{"version":3,"sources":["materialize.directive.js","smartHeight.directive.js","body.directive.js","ckEditor.directive.js","colorPicker.directive.js","notification.directive.js","onCaptureClick.directive.js","onLoad.directive.js","profilePic.directive.js","progressMeter.directive.js","resizable.directive.js","scrollContent.directive.js","slidingMenu.directive.js","smartAccordion.directive.js","smartAccumulator.directive.js","smartCarousel.directive.js","smartCountdown.directive.js","smartDocSlider.directive.js","smartGlobalLoader.directive.js","smartHierarchy.directive.js","hilitor.library.js","smartLastRepeaterElement.directive.js","smartmaps.directive.js","smartMetadataChips.directive.js","smartRangeSlider.directive.js","smartResize.directive.js","smartRevision.directive.js","smartSavedViewPopup.directive.js","smartSearch.directive.js","smartSelectall.directive.js","smartSort.directive.js","smartTable.directive.js","smartTree.directive.js","stickOnScroll.directive.js","customTab.directive.js","focusonkeypress.directive.js","helper.directive.js","tabbinggroup.directive.js","searchableCube.directive.js","smartBack.directive.js","smartBrowserSniffing.directive.js","smartButton.directive.js","smartCheckBox.directive.js","smartCultureDate.directive.js","smartDragDrop.directive.js","smartDropdown.directive.js","smartErrorFieldHighlighter.directive.js","smartFormWidget.directive.js","smartGrid.directive.js","smartInfotip.directive.js","smartList.directive.js","smartListLookup.directive.js","smartLookup.directive.js","smartMultiselect.directive.js","smartPopUp.directive.js","smartRadio.directive.js","smartReadErrors.directive.js","smartResizeableSidebar.directive.js","smartScroll.directive.js","smartPlaceholder.directive.js","smartSection.directive.js","smartSelect.directive.js","smartShowFieldAsOptional.directive.js","smartStickyHeader.directive.js","smartSubSection.directive.js","smartSwitch.directive.js","smartTabs.directive.js","smartCharacterRestrict.directive.js","smartTextfield.directive.js","autocomplete.library.js","smartTimeline.directive.js","smartTooltip.directive.js","smartTypeahead.directive.js","smartUiGrid.directive.js","smartUiTable.directive.js","trackStatus.directive.js","uigridCompatible.directive.js","directives.min.js"],"names":["sideNavFunc","scope","menuwidth","closeonclick","link","element","attrs","sideNav","menuWidth","angular","isDefined","undefined","edge","sidenav","closeOnClick","tabsFunc","tabs","dropdownFunc","$compile","$timeout","inDuration","outDuration","constrainWidth","hover","alignment","gutter","belowOrigin","dropdownCode","contents","attr","dropdown","constrain_width","$on","e","obj","ddname","trigger","inputDateFunc","style","$","append","dateFormat","token","timezone","timezoneClip","pad","val","len","String","length","date","mask","utc","dF","arguments","Object","prototype","toString","call","test","Date","isNaN","SyntaxError","masks","slice","_","d","D","m","y","H","M","s","L","o","getTimezoneOffset","flags","dd","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","Math","round","t","tt","T","TT","Z","match","pop","replace","floor","abs","S","$0","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","format","this","isValidDate","getTime","require","container","formatSubmit","monthsFull","monthsShort","weekdaysFull","weekdaysLetter","firstDay","disable","today","clear","close","selectYears","onStart","onRender","onOpen","onClose","onSet","onStop","ngReadonly","max","min","ngModelCtrl","$formatters","unshift","modelValue","$eval","pickadateInput","pickadate","picker","$watch","newMax","maxDate","set","newMin","minDate","modal","restrict","templateUrl","title","modalCounter","setTimeout","leanModal","template","slideToggleFunc","controller","$scope","bind","$slideBox","slideToggle","slideDuration","parseInt","slideToggleDuration","stop","collapsibleFunc","collapsible","smartHeightFun","normalizeNumber","v","NaN","Number","indecOf","each","outerHeight","get","returnVal","attribute","r","window","config","relativeTo","plusThis","minusThis","height","p","innerHeight","css","module","directive","elem","_wheelDelta","a","originalEvent","wheelDelta","deltaY","IEscroll","event","target","closest","dy","evDelta","preventDefault","currentScrollPosition","pageYOffset","scrollTop","navigator","appName","userAgent","browser","msie","APPCONSTANTS","elm","ngModel","update","updateModel","$setViewValue","ckeditor","getData","lang","userPreferences","UserBasicDetails","Culture","CKEDITOR","toolbar","language","on","setData","$viewValue","$render","value","removeAllListeners","remove","$parse","transclude","onSelect","$colorPicker","find","color","$apply","$event","colorpicker","showOn","history","stopImmediatePropagation","$observe","factory","Obj","show","onCallback","callback","notify","broadcastItem","resultCallBack","result","isFunction","$rootScope","notification","$translate","$sce","$focusOnField","browserSniffing","showN","cleanUpNotificationPopup","notifyClass","buttons","topPositionBeforeModalOpen","isChrome","indexOf","reset","off","onWindowKeyUp","document","keyCode","focus","type","dismissible","instant","icon","titleTextColor","onChange","remindMeDate","$digest","message","trustAsHtml","checkboxText","checkMessage","customTemplate","modalType","i","multipleCheckList","model","modelName","isCheck","preSelected","disableBtn","isCheckSelect","$firstField","removeAttr","bindforTab","overlayCLicked","onChangeNotification","cnt","clickCallbackFunction","responceObj","$broadcast","compile","fn","onCaptureClick","addEventListener","onLoadCallback","isProfilePicEditable","isUserProfile","circular","editable","dummyimg","imgsrc","readURL","input","files","reader","FileReader","onload","addClass","readAsDataURL","profilePicEdit","click","clearProfilePicEdit","confi","responce","prev","toggleClass","hasClass","removeClass","dummySrc","isDeleted","percent","getMeter","c","PI","pct","strokeStyle","stroke-dashoffset","unbindPercent","newVal","oldVal","handle","onresize","onstart","onstop","resizable","handles","resize","ui","start","maxheight","minheight","maxwidth","minwidth","alsoResizeRevert","alsoResize","$window","pageHeight","fixedSubHeader","console","log","$filter","scrollPosition","$attrs","getEnableScroll","foundItem","currentUrl","location","hash","performScroll","scroll","windowScrollTop","scrollY","RuleEngine","right","top","detachDefaultClass","includeTemplate","modifyParentStyle","tabData","$element","getModel","JSON","parse","logoutSession","requestClicked","navCircle","toLowerCase","slidingMenuId","rightPos","leftPos","innerWidth","newValue","oldValue","parent","width","outerWidth","transform","accEvents","isOpen","accordian","data","showHideAccordian","_this","_isOpen","content","slideDown","slideUp","hide","b","options","isSearch","leftLoader","rightLoader","modelCount","optionCount","columnMappingError","selectionCallback","searchCallback","maxLimit","scrollEndRightCallback","scrollEndLeftCallback","generateKey","getProperty","getKey","addedKeys","addKeys","label","iconInfo","accumulatorHeight","accumulatorLeftScrollHeight","loaderFlag","plain","center","left","focusAccumulatorSearch","isAccumulatorSearchActive","showAccumulatorSearch","accumulatorSearchModel","hideAccumulatorSearchClose","hideAcccumulatorSearch","leftCheckedCount","$data","text","smartScrollLeftEnd","smartScrollRightEnd","focusRightAccumulatorSearch","isRightAccumulatorSearchActive","showRightAccumulatorSearch","hideRightAccumulatorSearchClose","hideRightAcccumulatorSearch","searchTextKeyUpFn","rightCheckedCount","leftBoxListCheck","arg","isChecked","isDisabled","$$hashKey","rightBoxListCheck","newOptions","isGroup","j","group","optionKey","moveRight","accData","selectedOptions","push","index","splice","direction","moveLeft","newModel","accumulatorRightSearchModel","rightLoaderUpdate","leftLoaderUpdate","apiObj","carouselArr","arrowClick","getItem","marginToChange","dimensionToChange","textAlign","stepSize","scrollBarClass","classes","arrowClass","arrow","id","internalAPIObj","item","getClickedItem","animate","resetUI","availableLength","addAnimation","collectionEle","children","items","showArrow","$interval","timeoutCallback","timer","days","hours","minutes","seconds","timerObj","cancel","from","diff","onHide","commonSelectedOptionInside","slideObj","src","list","updateTheIndexInController","nextIndex","copy","prevIndex","listLength","tabbingFocus","ngShow","activeElement","firstFieldFocused","next","$fistField","first","funcOnKeyDown","startRequest","requestCount","endRequest","toState","toParams","fromState","fromParams","pageLoaderFlagController","request","requestError","response","responseError","$httpProvider","interceptors","isFixed","onCancel","conf","extend","bgwhite","messageArray","split","widthCount","querySelector","heightCount","leftTopCount","cancelBtn","isCancel","cancelCallback","hierarchyCounter","RESTApi","$q","setKeysAsPerNavigationContext","mode","nodeExpandingCodeProperty","dataProperty","levelWiseDataProperty","searchProperty","codeProperty","titleProperty","levelProperty","parentProperty","modelProperty","resetDataSourcesAndPromises","isPromiseInit","levelWiseData","categories","lazyLoadMarker","isLoading","isError","selectedData","getUserSelectionArray","totalSelection","totalID","totalName","initializePromise","init","initSelectallModel","noRecordsFound","selectionAndCountOptions","isPartiallySelected","treeConfig","isReadOnly","sn","selectedNodes","selectAllToggle","requestParameter","requestObject","isInitialServiceCalled","navContext","respData","action","status","isLazyLoadServerData","setLevelWiseDataSource","createLevelWiseDataSet","sortBy","isShowSelected","renderLevels","createSelectedModelIfRecieved","dataRecievedCallPromise","resolve","treeType","treeTypeObject","LevelAt","PageNumber","PageSize","lazyLoadingBucket","getLeafNodeWithParentHierarchy","levelKey","dataRievedPromiseBool","preselectionRecievedPromiseBool","preselectionRecievedPromise","promises","defer","promise","all","then","promiseResolved","initatePreSelection","dataSet","level","parentNodes","insertParentHierarchyForFlatStrucure","instance","map","groupBy","union","doc","grouped","maxLevel","to","levelDataIndex","ChildCount","fetchedData","childForParent","node","parentStringConstant","parentCodeStringConstant","nodeSelection","selection","isNodeSelected","IsSelected","getSelectionState","n","baseLevelExpectNode","getStateForNode","expandNode","Level","isArray","concat","setLevelWiseData","parentSelection","dIsSelected","resetSelectionState","_node","selectNode","preselection","preselectionNode","searchLevel","foundNode","getNodesFromServer","bucket","pageIndex","childLoading","reqPayLoad","responseData","getRequestedDataFromCache","childSearchLevel","startIndex","bucketData","getChildsForParentAsPerBucket","cachedDataSet","lazyLoadLevelWiseData","markerNode","parentSearchLevel","markerNodeParent","createTreeStructure","searchAsPerBucketSize","searchStr","isMaintainSearchPointer","searchString","searchDataYetToBeDisplayed","searchWithContainsHitResult","searchResults","searchData","getDataAsPerBucketSize","cancelTout","getOffsetSearchData","partitionedData","partition","getOffsetSearchDataForContainsSearch","offsetSearchData","filter","containsSarchResult","RegExp","compact","join","qumulativeData","containsSearchDataToBeAppended","closeChildsForParent","childs","childNode","isExpanded","child","removeMarkerForParent","childMarkers","difference","updateSelectionObject","selectionState","updateUserSelection","updateParentForNode","recursive","depthLevel","immediateParentCode","disabled","parentCode","groupByData","childCount","selectedChild","partiallySelectedChild","isSingleSelect","uniq","key","updateChildsForNode","parentCodesofNode","codeProp","updateChildsForSelectedData","searchHits","hits","getSearchDataFromServer","searchBucket","searchVal","isLazyLoad","serverSearchVal","searchResultPageNumber","isLazyLoadingNode","lazyLoading","ongoingService","abort","SearchText","searchFieldVal","createModelForSearchData","searchList","searchDataCollection","searchDataHierarchy","sortedLevelSearchedData","searchHitNode","parentString","parentCodeString","getSelectionFromLevelWiseData","resetSelectionForSearchNodes","searchNode","groupedLevelData","isPresentInInternalHierarchy","retVal","completeModelFromServerIfNeeded","parentHierarchy","updateSelectionInDataSource","reqObj","allResultData","PAS_SearchList","levelData","setExport","useAs","_export","cancelTitle","checkCondForTemplate","a_data","boolTemplate","templateCheck2","a_category","secondaryLinkCallback","secondaryLink","isSelectedOnly","hasOwnProperty","modalButtonShow","isMandatory","listIcon","doneCallback","refreshConfig","newData","resetValue","isRadio","uniqueRadioGroupName","uniqueIDGenerator","clearCache","navigationContext","searchCategories","selectAllBool","showSelectAll","showClearSelection","showSelectionCount","enableLastLevelSelection","deregisterConfigSelection","getSelections","deregReqContactCode","setContactCode","deregReqParam","setDocumentId","documentCode","contactCode","setUserContext","userExecutionContext","setEnvironment","URLs","AppURL","setRequestObject","setUrl","url","selectOptions","code","name","selectType","lazyLoadOffset","onSelectTypeChange","clearAllSelection","deregConfigData","deregSelectedNodes","closeButton","cancelButton","doneButton","resetButton","editButton","getSelectAllBool","doneClickHandler","cancelTimer","searchText","isService","toutCancel","searchAndSelectNode","filterTextTimeout","selectAll","byPassIsLazyLoadCheck","siblingNods","cancelToutOnScroll","uniqueID","random","position","lazyLoadLen","markerNodeSelect","getBoundingClientRect","scrollEndTout","scrollEnd","massageSelectedData","newtotalID","newtotalName","without","tCancel","outPutObject","selections","hierarchyCollection","parentTraversalArray","parentNode","found","clone","getHierarchyOnSelection","getUserSelection","getAllLazyLoadedData","isActive","hideSearch","focusSearch","showMe","showSearch","hideClose","editCallback","exportLen","ex","attributes","prop","hilitor","Hilitor","apply","service","$http","createRequest","isOverrideInputPayload","contactPasMappingMethod","getPasDetailsMethod","inputParameterKey","getParentForNodeUrl","bpcCode","EncryptedBPC","baseUrl","bpcCodes","propmiseForThisInstance","headers","Content-Type","UserExecutionContext","method","timeout","ContactCode","DocumentCode","documenttype","userRestrictCategoryTree","where","CommonSettings","lstSettings","FieldName","FieldValue","documentId","customeURL","requestObjectToBeExtended","serviceCall","req","dataFoundOnIndex","Callback","callbackTracker","isEqual","error","OrderData","RequisitionData","ProcurementProfileData","newURL","reqParam","isEmpty","stringify","exports","w","Error","define","amd","tag","targetNode","getElementById","body","hiliteTag","skipTags","colors","wordColor","colorIdx","matchRegex","openLeft","openRight","onFinish","onDoOne","setMatchType","setRegex","re","getRegex","retval","hiliteWords","nodeName","className","hasChildNodes","childNodes","nodeType","nv","nodeValue","regs","exec","createElement","appendChild","createTextNode","backgroundColor","fontStyle","after","splitText","substring","insertBefore","arr","querySelectorAll","el","replaceChild","firstChild","normalize","rv","callbackOnItem","$emit","$last","$templateRequest","infoWindowStyle","iwOuter","iwBackground","$infoWin","visibility","overflow","display","z-index","mapGeocodeFn","mapDataLeng","addressData","countryInfo","CountryCode","state","zipcode","geocoder","geocode","componentRestrictions","country","postalCode","results","google","maps","GeocoderStatus","OK","img","marker","Marker","LatLng","geometry","lat","lng","locations","baseImgUrl","setMap","markers","markerCluster","addMarkers","addListener","infowindow","open","latlngbounds","fitBounds","dataGeoDataTemp","dataGeoData","viewSwitcherFlag","flag","multiChoice","mc","locationClusterMarker","cluster_","clusterDom","div_","data-activates","data-stoppropagation","$dropBtn","locationsOpt","mapLoaded","viewSwitcher","myLatLng","mapOptions","maxZoom","minZoom","streetViewControl","mapTypeControl","mapTypeId","MapTypeId","ROADMAP","styles","elementType","stylers","font-weight","featureType","Map","mcOptions","gridSize","imagePath","InfoWindow","maxWidth","LatLngBounds","locData","MarkerClusterer","styles_","forEach","ind","textColor","onClickZoom","Geocoder","unbindWatch","reinit","clearMarkers","refresh","zoom","getZoom","setZoom","dataOption","clusterListFn","setPosition","$locationCardDropdown","linker","getTrustedResourceUrl","infoTemplateURL","setContent","addDomListener","debouncer","smartmetadata","metadatatitle","maxlength","callBack","fieldClass","itemTotal","fieldkey","showMoreChips","optionId","add","$chipsActiceContainer","targetScope","$parent","transition","background","metadataAdd","$e","fieldKey","isString","displayfield","trim","isfocus","metadataCheck","charReqKey","char","which","charReq","charReqLength","currentTarget","blur","beforeDelete","deleteCallback","success","reject","chipData","metadataDelete","smartmetachipTitleClick","metadataShowMore","cont","metadataLessMore","uiSliderConfig","preLink","parseNumber","decimals","parseFloat","destroy","slider","directiveOptions","uiSlider","prevRangeValues","properties","useDecimals","isUndefined","updateOn","range","warn","property","noop","valuesChanged","values","boundedValues","lowerBound","upperBound","boundedValue","Array","valueArr","tipElm","one","postLink","total","appendTo","pre","post","smartResizeDir","addArguments","resizeElement","initHandlers","size","previousSize","callbacks","onResize","onHeightChange","onWidthChange","resizeSensorCss","sensorCss","sensorElementCss","html","PD","PDC","mainSensor","sensor","scrollLeft","resizeSensor","setting","defaultConfig","jQuery","smartRevisionDir","oldData","align","imgDimention","treeCallback","image","normal","defaultDimention","tree","treemode","multiRows","ismultiRows","constructor","isChanged","oldDataHtml","newDataHtml","wrap","diagonal","diagonalWidth","calculateRectdiagonal","popup","treeChange","sqrt","smartSavedViewPopupFunc","cacheHelperService","smartSavedViewPopupCollection","loader","isApplyFilters","isSavedView","isSavedViewModified","openPopupSavedView","api","setTitle","callbackFunc","keepPopupOpen","cancelBubble","stopPropagation","isNameDuplicate","editedSavedName","duplicateName","greaterThanMaxCharacterLength","viewNameLength","showAlertMessage","alertMessage","SaveResetOrMarkAsDefault","currentViewApplied","rowKey","moduleName","removeDefaultFilter","isDefault","MarkasDefault","view","selectedFilter","isMarkAsDefault","check","errorCallback","statusText","ViewId","ViewName","ColumnList","Filters","SortColumn","SortOrder","GroupColumn","IsDefaultView","IsSystemDefault","DocumentTypeCode","UpdateSavedViewURL","updateMessage","popupInc","disableDoneButton","uncheckMarkAsDefault","handleDoneButtonVisibility","isDefaultSelected","defaultCheckUncheck","handleMarkAsDefault","isDefaultTxt","setDefaultFiler","isDefaultTrue","showSavedViewPopup","showSaveView","radioChangeCallback","currentItem","currentDefault","showSavedView","currentCheck","isSavedFilter","setFilterDef","selectedSavedview","selectedFilterView","applyViewOnGrid","currOperation","Reset","sysDefault","SystemAsDefault","msg","deleteItem","alterView","getDefaultSavedView","deletedView","deleteSavedViewURL","savedViewId","showEditor","editCurrentViewName","showCurrentItemEditor","getEditedviewName","isFocus","updateViewName","closeEditPanel","editedName","duplicateItem","duplicateErrorMessage","maxCharacterLength","validate","viewObject","SaveViewName","saveCurrentView","passData","insertSavedViewURL","getColDef","getFilterDef","getGroupDef","documentTypeCode","showPopUp","search_data","search_savedpopup","lowerStr","collection","x","httpService","setAllowedModuleListData","modules","Output","orderIndex","FilterKey","quickSearchItem","selectedModule","advancedSearchDocTypes","AdvancedSearchDocTypes","scopeValues","RFX","string","SubAppCodes","RFP","RFQ","RFI","Auction","Contract","Catalog","Requisition","PO","Order","Invoice","Receipts","Forms","Scorecards","Workbench","InvoiceReconciliation","Items","Templates","Partners","ContractRequest","RFxRequest","AuctionRequest","PaymentRequest","Project","CreditMemo","ReturnNote","ActionPlan","Blanket","CategoryWorkbench","ProjectDashboard","getCurrentModuleScope","selectedModules","moduleScopeString","lastChar","getSearchNavigateURL","moduleScope","redirectURL","generateUrl","getScopeFromModuleType","moduleType","array","makeArray","getModuleTypeFromScope","IsAdvanceSearchEnabled","productsArray","getAdvanceSearchEnabledProducts","searchConstants","portalURL","documentTypeCodes","encryptedBPC","catalogQueryString","orderQueryString","invoiceQueryString","receiptQueryString","requisitionQueryString","invoiceReconcillationQueryString","creditMemoQuerystring","blanketQueryString","categoryWorkbenchQueryString","partnersQueryString","formQueryString","assessmentQueryString","workBenchQueryString","rfxQueryString","auctionQueryString","actionPlanQueryString","contractQueryString","returnNoteQuerystring","projectQueryString","IsSupplier","lastSearchedText","constantURLAndQueryStringValue","AreaName","directhttp","errorData","BuyerPartnerCode","allowedModulesList","onModuleClick","showFilterList","recentSearches","searchResult","getRecentSearches","showRecentSearches","isRecentSearchesLoading","IsAllMenu","FieldKey","RecentSearches","onSearchTextChange","href","showSearchResult","isSearchResultLoading","getSearchResults","Sequence","searchKeyword","DataSearchResult","GroupTotal","TotalCount","onSearchTextFocus","onRecentSearchItemClick","getTranslatedLabel","onDocumentClick","smartSelectallFun","initCheckbox","initCheckboxItem","allCheckbox","selector","unbind","change","selected","getCheckboxInfo","getInfo","resetConfig","scopeData","getScope","scopeDeep","checkerFlag","$applyAsync","deep","checkboxSelector","disableFlag","disableStyle","sc","mainCheckbox","__selectallExoprt","selectall","_scope","eval","$watchCollection","sortReverse","currentCell","iconWithTooltip","sortbyIcon","tooltip","ascDescToggler","isRegionalSettingEnabled","RegionalSettingEnable","getObjectValue","keys","shift","getObjectValueForAutoSuggest","setObjectValue","updateCell","isObject","getFormattedData","displayFormat","str","parentSplit","childSplit","k","getDisplayData","evalResult","evaluatedKeysCounter","nullKeysCounter","convertNumberToFixed","number","minPrecision","maxPrecision","arrTmpInputValue","tmpStrAfterPrecision","sortSmartTableData","column","isAscending","translate","sort","strOne","field","strTwo","intOne","intTwo","enableTranslation","app","onmousedown","isSmartTableCellClicked","lastActiveCellScope","stopEdit","focusHandler","strLength","setSelectionRange","onkeydown","is","onElementKeyDown","smartTableUtils","isParentRowToBeDisplayed","filters","$$treeLevel","filterKey","filterText","getChildrenNodes","nodeIndex","tmpRows","row","$$nodeIndex","sortState","enableTreeView","showTreeView","offset","limit","useExternalPagination","smartTableId","outputData","parentIndex","$$enableTreeView","$$index","$$parentIndex","$$isExpanded","$$isSelectable","cellValue","keysMatchCounter","colDef","condition","arrParentNodes","order","arrOrderedData","broadcast","totalRecords","currentPageDataLength","$templateCache","smartTable","totalPages","apis","areEventListenersAdded","arrSelectedRowsIndexes","recordsFetchedCount","sortOrder","enableRowSelection","arrRowsPerPageOptions","rowsPerPage","listeners","addEventListeners","core","getActiveColumns","smartTableConfig","columnDefs","getColDefs","notifyColumnChange","notifyRowDataChange","rowIndex","notifyDataChange","isToBeRefreshed","onRefresh","pagination","nextButtonClick","scopeRef","onNextButtonClick","previousButtonClick","onPreviousButtonClick","onSort","onFilter","setDataLength","totalItemsCount","displayedRecords","setOffset","setLimit","getOffset","getRowsPerPage","columnRefresh","onColumnRefresh","cell","onCellClick","onCellChange","optionsChange","onOptionsChange","optionSelect","onOptionSelect","cellNav","scrollToFocus","colField","columnIndex","toBeFocused","colDefs","pendingFocus","updatePagination","pinnedColumns","unpinnedColumns","getSelection","removeAllRanges","edit","beginCellEdit","onBeginCellEdit","endCellEdit","onEndCellEdit","afterCellEdit","onAfterCellEdit","saveState","save","columnsState","tmpColDefs","getReOrderedColumnDefsForState","displayKey","displayName","visible","columns","paginationCurrentPage","paginationPageSize","timestamp","documentURL","isSmartTable","restore","getReOrderedColumnDefs","refreshColumns","clearSelectedRows","$$isSelected","isAllRowSelected","getSelectedRows","tmpRow","tmpSelectedRows","arrDeletedIndexes","entity","rowSelectionChanged","onRowSelectedChanged","onRegister","onSmartTableConfigChange","newConfig","getColumnDef","srcConfig","getColumFilterText","reOrderedColumns","pinnedLeft","pinnedContainerWidth","updateSmartTableColumnResizer","updateSmartTableColumnSorter","eventType","isRowSelectionEnabled","isNextButtonClicked","isRefresh","onRowsPerPageOptionChange","filterData","sortData","debounce","sortCondition","selectRow","shouldSelectedAllRows","isSelected","expandRow","shouldExpandAllRows","isAllRowExpanded","onColumnSort","endIndex","activeColDefs","startCol","endCol","onColumnResize","colToBeResized","watchers","onSmartTableRenderingStart","$$watchers","onSmartTableRenderingDone","onPageIndexChanged","ceil","onSmartTableCurrentPageDataLength","newLength","arrEvents","eventCounter","removeEventListener","eventName","eventId","objEvent","functionTimeout","isAngularTimeout","duration","isDigestCycleToBeTriggered","clearTimeout","onColumnConfigChange","isMouseDown","canBeResized","resizer","newWidth","leftPosLimit","onMouseMove","clientX","offsetX","onMouseUp","onMouseDown","border","bindEvents","not","startX","isPinnedColumn","mouseDownTimeout","th","$this","triggerTaxesPopup","isPopupOpenedByUIGridCompatibleElement","smartTableScope","cellClick","triggerAdhocPopup","triggerSupplierCardPopup","tabIndex","oldCellValue","oldCellClass","tmpCellValue","tmpInputValue","tmpValueForAutoSuggest","selectedOption","selectedDate","templateContainer","onPopupOpened","onPopupClosed","isInEditMode","cellClassElement","hasStopEditCalled","isInputFieldFocused","isRenderingToBeSkipped","isFocusToBeSkipped","onCellDataAndColDefChange","$watchGroup","$index","isRowDataUpdated","toBeTranslated","uiType","moment","localeData","longDateFormat","enableCellEdit","hasSmartTableRenderingStarted","pinned","autoIncrement","displayformat","COL_FIELD","cellClass","tmpClass","iconTemplate","cellEditableCondition","col","grid","rows","updateCellTemplate","updateDate","tmpDate","unix","isRegUpdateCol","cellChange","addPopupListeners","oldCellModel","newCellModel","updateCellValueForPopup","equals","removePopupListeners","toBeFiltered","cellTemplate","isNumber","minmaxprecisionfilter","substr","adhocpopup","mousedown","supplierCardPopup","RequisitionSource","Changereq","IsAddedFromRequistion","placeHolder","isTaxExempt","taxExempt","getEditableTemplate","toUpperCase","dataKey","idKey","lastKeyPressed","isRegClickCol","shiftKey","cellIndexFocus","isFreeText","autoNumeric","tmpPreviousSelectedDropdownObj","arrDecimalSplits","isWindowClickFired","devbridgeAutocomplete","dispose","daterangepicker","empty","onFocus","inputvalue","tmpVal","mDec","MaxPrecessionValue","filterKeys","filterkeys","optionFormat","optionformat","serviceObj","populateListOnFocus","params","param","CallbackObj","resp","isFlatArray","mapperObj","mapper","mapperstri","mapperkey","res","staticValues","setLookup","lookup","minChars","suggestion","option","triggerKeyUpOnfocus","tmpEvent","Event","singleDatePicker","showDropdowns","locale","autoUpdateInput","startDate","endDate","lastActiveCell","onFocusCell","onRowDataChange","onDataChange","header","toggle","disableLevelSelection","isInitServiceCall","showPopupBool","initServiceCall","SelectedNodes","hideCallback","selectCalback","IsRadio","onDoneCallback","onPopupHideCallback","RESTApiSt","Common","onDone","RESTApiStCallback","GetPASForDeviceMobResult","parentId","templateId","entityDetailCode","ACEntityId","entityId","EntityId","getHilitor","setTop","setZindex","onScroll","setLeft","setRight","$id","newElement","elemHeight","winScrollTop","stickLimit","applyClassOnFixed","tabbingOnKeyDown","tabType","prevFocus","bindKeyEventFunction","focusInfunc","firstFieldFocus","focusOutfunc","altkey","focusin","altKey","focusout","checkAttr","svgIcon","$set","menuListItemServ","firstField","focusableEle","avoidFocusableEle","$lastField","last","cubeletList","enableProceed","selectedCube","formatKey","camera","THREE","PerspectiveCamera","scene","Scene","lookAt","AmbientLight","light","SpotLight","castShadow","shadow","LightShadow","bias","mapSize","generateThreeByThree","generateTwoByTwo","cubletWidth","cubeSeparation","positionsArrayThreeByThree","positionsArrayTwoByTwo","BoxGeometry","object","Mesh","MeshLambertMaterial","transparent","opacity","z","scale","dataID","receiveShadow","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","PCFShadowMap","soft","domElement","onDocumentMouseDown","onWindowResize","keyPressed","handleRotation","animateRotation","xDirection","yDirection","zDirection","tween","TWEEN","Tween","prePositon","X","Y","easing","Easing","Quadratic","InOut","onUpdate","animationComplete","deltaRotationQuaternion","Quaternion","setFromEuler","Euler","quaternion","multiplyQuaternions","onComplete","aspect","updateProjectionMatrix","requestAnimationFrame","render","onDocumentMouseMove","onDocumentMouseUp","mouseDown","startPoint","clientY","rotateStartPoint","rotateEndPoint","projectOnTrackball","canvasMouseMove","mouse","mousemoved","deltaX","handleRotationMouse","lastMoveTimestamp","highlightCublet","previousInt","moveReleaseTimeDelta","vector","Vector3","unproject","ray","Raycaster","sub","intersects","intersectObjects","selectedCublet","popInCube","INTERSECTED","popOutCube","touchX","touchY","mouseOnBall","clamp","windowHalfX","windowHalfY","rotateMatrix","rotateStart","rotateEnd","angle","axis","acos","dot","crossVectors","rotationSpeed","setFromAxisAngle","drag","minDelta","animateFindElementRotation","anglex","angley","anglez","requestedID","currentAngles","rotation","animateCubePopup","material","setHex","currentHex","hovered","fromSerach","$mainScreen","intersect","getIntersect","getHex","cublet","select","sign","proceed","currentSelection","curQuaternion","Vector2","Group","btnType","routeToReport","searchElementByValue","findIndex","charAt","searchElement","rotateQuaternion","setRotationFromQuaternion","jqdiv","pos","projScreenMat","Matrix4","multiply","projectionMatrix","matrixWorldInverse","multiplyVector3","persistenceService","nPlusOne","historyIsEmpty","goBackClick","redirectToPreviousNode","tem","ua","appVersion","favoriteOps","showSniffing","image960","ContentURL","image1920","iconIE","iconChrome","execBrowserSniffing","Screen960","Screen1920","isShowSniffer","getSnifferFlag","sniffTemplateUrl","isTrue","hideSniffingOverlay","setSnifferFlag","browserDetail","remindOptions","unsupportedBrowserVersion","isMultipleCheck","checkContext","unsupportedBrowser","standalone","mobile","onClick","fabConfig","flat","callbackParams","buttonType","isFloating","floating","isLarge","large","clickCallback","goBack","styleClass","checkboxCounter","ScrollTo","ngModelResolve","isVisible","minHeight","fill","rules","parentElement","errorMessage","removable","showTooltip","tooltipPosition","showinfo","checkBoxId","isRemovable","checkboxEle","$modelValue","updateView","perform","onValidate","validateRules","isFoundInvalid","isValid","ngChange","resolveFun","checked","monthAbr","january","february","march","april","may","june","july","august","september","october","november","december","enableShortMonth","matchExpression","cultureCode","formatNumber","tempNumb","toLocaleString","showTime","_longDateFormat","LL","abr","search","onDrag","sortable","placeholder","helper","connectWith","containment","tolerance","isOverflowHidden","dragging","swipItem","sender","whileSorting","ele","main_width","ew","elft","rpos","isDraggable","stopProg","autoClose","islistDropdown","keycodeis","dropDownMenuListItem","dropdownContent","liList","liLength","eq","hideOnTabOut","lastOpenedDropdownConfig","activates","origin","clrTout","_element","closeDDButtons","singleElementDropdown","ddCloseOff","_elem","hideDropDown","fixed","$t","clrTout1","ddCnt","$tOffsetTop","$tOffsetLeft","lastScrollPosition","newScrollPosition","ddHgt","winHgt","diffHgt","clientOffsetHgt","tOut2","ddCntTop","ddCntLeft","onShow","fadeOut","end","errorConfig","otherMandetoryFields","formWidgetCounter","formWidgetUtils","formConfig","modelData","isSequential","showWidget","searchHolder","widgetPanelTop","widgetPanelRight","onSectionSort","onSave","revisionMode","secNav","filterWith","initSectionsLoadedWatcher","SectionLoaderInitiated","sections","unbindSectionsLoadedWathcer","loadedCompletely","isLazyLoadEnabled","initSectionFocus","seclectedSectionId","getSelectedSection","seclectedSectionIndex","sectionItemClicked","mySection","sectionTrackerItems","currentSelectedSection","isSectionsLoaded","formWidgetId","getOpenWidgetSection","a_id","returnItem","indx","tmpObj","isCheckSecnav","onDocumentScroll","isCheckWidget","scrollWitgetsection","masterPersistenceService","getMasterDataForRootField","widgetPanelRightPos","addRemoveSection","visibleSectionTrackerItemsCount","thumbnailsWrapHeightTemp","secnavIndex","thumbnailsWrapHeight","staticTopmargin","enableFieldPreview","updateVisibleSectionTrackerItemsCount","count","tItem","hidden","onSubHeaderHeight","setScrollingTopMargin","isFormWidgetToBeLoaded","toutPromise","checkPresistence","getPresistence","documentType","getUserData","sectionPersistence","getSectionsPersistence","userData","modelDataWatcherEnabledOrNot","initModelDataWatcher","unbindModelDataWatcher","getModelData","initChipsWatcher","persistenceTimeout","saveRecentDocument","formWidgetTimeout","fixedElemHeight","onFormConfig","oldConfig","sectionItems","optionalSections","optionalFieldsAndSections","sectionLen","tSection","convertAndGetValue","isHidden","sectionKey","sectionId","isOptionalSection","sectionIndex","mandatoryFieldStatus","sectionTLength","ij","searchLabel","isSection","sectionOptionalFields","rowsLength","trowsData","propertyLen","tProperty","sectionLabel","propertyIndex","optionalFields","draggableWidth","restrictWidth","secnavcontainerExpandWidth","$panelExp","draggable","$secNavCont","secnavHeightCal","$secNavContList","$thumbnailswrap","secNavUlHeight","$secNavSelector","selectedLiIndex","formWidgetTop","$fixedElem","$subHeaderFixedContainer","$formWidgetElem","$secnavchevroicon","trackerItemsLen","$cardParent","offsetLi","offsetLiHeight","newSelected","saveSelectedSection","checkSubheaderHeight","subheaderHeight","activeItem","onSectionItemClick","sectionNumber","sectionTrackerLength","Selectedsection","onOptionalSectionItemClick","isLabelClicked","trackerTLen","tmpSection","itemVisible","tempTOut","onOptionalFieldClick","showWidgetPanel","toggleWidgetPanel","formConfigAfterSort","trackerSortLen","sectionsList","section","updateUserData","saveUserData","$sectionCont","sectionList","sectionListitem","$thumbnailsCont","thumbnailsList","thumbnailsListitem","thumbNodes","previousClickedSection","openedSec","onSectionClick","tlenTracker","onSectionHeaderClick","onHeaderClick","generateFunctionWithParams","isContentLoaded","$itemSelected","displacementItem","prevKeyLen","prevObj","sectionDatastore","iconClasses","formWidgetItemClasses","smartSvgIcon","phrase","gridConfig","currencyFormatter","amountarg","symbol","zeroprecision","defaultCurrency","amount","toFixed","formattedAmount","shortamount","numberFormatter","headerTemplate","rowTemplate","headerData","rowData","cellRenderer","headerCellRenderer","rowHeight","cellStyle","dimension","gridHeight","cellWidth","datamappingkey","suppressSorting","formatterType","clickable","columnValue","titleValue","tmpRowData","angularGridConfig","onNewRows","enableSorting","angularCompileRows","virtualPaging","enableColResize","angularCompileHeaders","cellClicked","dataMappingKey","_lastOpenInfotip","hideLastInfotip","hObj","infotip","_ev","evt","triangle_height","triangle_diagonal","popover_container","popover_container_parent","popover","triangle","triangle_div_side","triangle_rect_div_side","infotipElement","getPosition","$win","bindOn","closeOnMouseleave","hideOnDocHover","getContentPopover","isTemplateUrl","getTriangleClass","hideTooltip","onHoverablearea","triangleClass","parent_width","popover_height","popover_width","parent_height","elementOffsetTop","elementOffsetLeft","templateElement","setDynamicInfotipPosition","getDyanamicPositions","popoverOffset","setInfotipPosition","customStyle","appendInfotipToBody","showFullTip","templateElementBody","commonUtilities","itemClass","displayConfig","listDisplayConfig","showIcon","showAction","importantAttribLimit","listClickHandler","listHeight","dataModel","lazyLoadingCallback","lazyLoadCallback","backToTopCallback","scrolledCallback","scrollInProgress","scrollEndCallback","scrollToTopCallback","actionElementID","callAddNew","lookupOpen","lookupHide","searchtextKeyUp","readonly","multiselect","addnew","titleofmodel","selecttypeoption","generateName","formattedLen","formatedArray","valuetoshow","toolTip","isInfoTipEnable","showInfoTip","checkInfoToolTip","pluck","deregisterWatchModel","totalEl","openLookup","lookupConfig","mutliselect","displayProperties","onKeyUp","titleOfModel","selectTypeOption","defaultselectiontext","defaultSelectionText","optionUpdate","getConfig","setTempModel","tempModel","getTempModel","onScrollEnd","onScrollEndCall","onScrollTop","onScrollTopCall","onScrollInProgress","onScrollInProgressCall","countForTheProprty","isObjectEquals","obj1","obj2","checkObj2","containsObject","catalogObj","UserId","propSeparation","initialize","propKey","multiple","stopInit","isObjectCompareCatalog","ischecked","descriptionKey","description","minMultiselect","checkSelectedItems","limitToCount","isLazyLoadingEnabled","scrollbarReload","scrollAlwaysTopOnload","scrollReload","cleanData","smartScrollEnd","smartScrollTop","smartScrollInProgress","selectdCount","selectTypeOptionWith","clearModelOnEnter","triggerFlag","returnObj","isSearchOpen","defaultSelectOption","selectiontext","searchFilterKey","stopFilterOnKey","hideSelectedCount","errorModel","defaultError","itemSelected","isLimitmultiselect","searchToggle","closeSearch","ondefaultSelectItem","onChangeItem","isdisable","optionUnSelected","isDefaultMandatory","selectionCancel","selectionDone","UnSelectedResult","callbackOnHide","addNew","multiSelectId","onBlur","datakey","autocomplete","dataLen","parentSplitLen","childSplitLen","childItem","defaultText","disableBlurEvent","labelForMultiSelectId","modelConfig","multiSelectFocus","setDisplayFormat","displayArray","valu","arrayD","arrDLen","currentSelectForDelete","ngKeyDown","evntKeyCode","selectForDelete","isInvalidId","isInvalid","invalidEmailId","checkEmailValidation","currentTextValue","pattern","filteredArray","invalidEmailArray","filteredLen","filterdItem","UserName","ngKeyUp","evtTrgt","defaultWidth","timeIntClear","deleteSelected","elementIndex","onvalidateConfig","ngBlur","checkChipIsDeleted","rulesLen","rulesItem","displayModel","optionsConfig","$evalAsync","interval","$smartModal","$controller","$scoper","ctrl","popupConfig","launchObj","$$smartModal","cleanFloatingElements","autoComplete","triggeredElement","afterCompleteClosePopup","isCancelButton","headerUrl","contentUrl","footerUrl","tOut","expandCollapse","$modal","$modalHeader","$leanOverlay","parents","innerTout1","innerTout2","$popup","openModal","beforeOpen","complete","toutpromise","ready","cancelTOut","$body","$modalUiDragable","bodyHeight","modalHeight","bodyWidth","modalWidth","margin","isPopupInit","closeModal","destroyModal","$view","tOutTemp","associatedOverlay","bLength","sortCn","subScope","initModal","$config","smartpopDir","$destroy","radioGroupId","ngModelCopy","layout","groupId","isNgModelFunction","radioGrouptId","isGap","gap","onNgModel","ruleLen","ruleT","focusElem","a_indx","timeoutPeriodTemp","$invalidDom","invalids","nextDisable","prevDisable","timeoutPeriod","counter","emptyText","leftLabelText","currentManualFocus","isManualFocus","fieldsSelector","customfieldsSelector","onErrorFound","showerrorsPanel","frmWidgetId","onblurEvent","invLen","isWarningHeader","onFocusEvent","currInd","closeErrorHeader","watchSaveClick","noMoreErrors","newLen","disableResize","collapseCallback","scrollCallback","leftPanelWidthCallback","elementWidth","leftPanel","resizableDiv","prepend","getResizableDiv","clickableDiv","minDraggableWidth","minWidth","lowDraggableWidth","lowWidth","midDraggableWidth","midWidth","maxDraggableWidth","UiLeftPosition","UiOriginalPosition","windowWidthBeforeResize","leftPecent","currentwindowWidth","margin-left","queue","originalPosition","marginLeftValue","scrollCounter","scrollBreakPoints","breakPConfig","BCkeys","srElements","bConfig","touchValue","scrollHeight","onBreakPoints","reverse","resizeHeight100P","dateHideOnScroll","dobj","isShowing","$selectDd","lastOpenSelectDD","ls","$scroller","lockScroll","onScrollLockUnlock","st","isFixedHeader","isScrollDate","hideDate","fixedHeader","tableElem","elScrollTop","thElem","tdElems","columnWidth","offsetWidth","tbl","theader","before","scrollid","customConfig","scrollConfig","onScrollToTop","maxScroll","vOffset","hOffset","args","onScrollHEnd","onScrollHToTop","onScrollHInProgress","eleWidth","scrollWidth","scrollTopSourceStorage","$vSource","vSource","$vSourceP","$hSource","hSource","$hSourceP","$vertical","vertical","$verticalP","$horizontal","horizontal","scrollTopSource","scrollTopConnect","lockScrollObser","scrollOnUpdate","handlers","addHandlers","func","_arguments","scrollToElement","scrollToElementName","$scrollToElementName","scrollWrapper","mergedConfig","merge","scrollbar","scrlTop","dir","currScrlTop","use","smartLazyLoad","scrollElement","offsetHeight","activePlaceholder","tmpPlaceholder","getHTMLPlaceholder","onAttributesChange","isPreviewMode","onRemoveButtonClick","onEditableRender","editableScope","editableEle","onStopEdit","setPrecisionLimits","decimalPrecision","minMaxPrecision","tempArr","preDecimal","tempVal","splitPrecision","lowerPrecisionLimit","highPrecisionLimit","postDecimalNumbers","pow","getFormattedDate","dateVal","isSetFromGrid","output","isDateBlank","doesContainDateString","now","tmpModel","decimalprecision","minmaxprecision","displaykey","sectionCounter","parentScope","isCollapsible","isHeader","isSwitchable","onClickSwitchable","isSwitchFunc","active","isCollapsed","formLoaderConfig","onRowsConfig","rowsLen","propLength","tData","updateOptionalField","optFieldLen","getVisiblePropertiesLength","visiblePropertiesLength","rowsPropLen","tmpPropIndxData","rowsPropLength","optLength","clearMe","expandSection","isActiveTriggered","onIsActive","collapsibleHdr","isClicked","clrTimeout","onSectionHeaderFocus","formwidget","angular2BootstrapTimeout","commonAttributes","formDataModel","extendedSectionConfig","isFieldPreviewEnabled","isSectionDisable","getAttributesMapping","mapEvents","listener","ngModelMapping","optionsMapping","optionsData","ngModelOptions","getterSetter","areaType","getColspanClass","colspan","onKeyDown","onKeyPress","onEnter","onDateChange","onDestroy","isAngular2Enabled","onLoadFunction","onLoad","revisionAttrs","clearInterval","setInterval","SmartAngular2","bootstrap","smartSelectFunc1","preview","customoption","showwarning","customMessage","isNgModelWatchAdded","typeOfNgModel","selectId","dropDownId","labelVal","customOptionReset","onOptions","optLen","selLabel","isDisabledOpt","firstOption","optionGroups","oldOptLen","groupName","selectTout","material_select","listElOffset","$dropdownDiv","newValueCopy","selectedOptionString","disableTOut","sOption","onDisable","isDisableTout","ruleLength","ch","manual","tmpSelectedOption","smartSelectFunc2","smartSelectService","clienterror","watchOptions","a_options","tmp","watchModel","buildOptionsList","updateLabelTemplate","collectionWatch","watchGrp","clrMe","containerElm","validateElm","buildValidationTemplate","hideShowField","onSelectChange","selectedVal","selectedIndex","buildTemplate","smartSelectServiceFunc","buildOptionalFieldTemplate","optionalField","buildSelectTemplate","elmLabel","buildLabelTemplate","buildInfoTemplate","onChangeCallback","OptionGroups","optHtml","optionLength","isDirectiveV2enabled","stickyElementsObj","stickyElementsHeight","listOfElements","StickyElements","$elem","stickTableHeader","scrollType","topVal","tdSel","columnMap","offsetParent","elScrollTopOriginal","stickyElementHeight","elemforStick","stickyHeader","theadHgt","tbodyHgt","$dummyThead","insertAfter","subsectionId","formModel","onModelData","onNgModelData","rightLabel","leftLabel","additionaltext","leftLbl","rightLbl","tabsId","setTabs","tabHorizontalWidth","totalTabWidth","showTabArrows","tabWrapperWidth","def","showCount","currentTab","tabWidth","tabParent","timeoutCanel","tabPanelHeight","tabId","tabWidthInFloat","remainingWidth","headerStyle","tabConfig","activeTabContent","htmlmode","tTab","tab","isLoaded","selectedTabContentUrl","tabClickCallback","returnObject","previousTab","moveTo","disableNext","disablePrev","transValue","isMovableTabs","tempValue","nextback","getTabsDimensions","goRight","goLeft","valueRegexPassed","keyCheckRe","patternreg","valueCheckRe","validationreg","allowCharacterFlag","allowpaste","inputValue","smartTextFieldFunc","modelOptions","setFromGrid","datanumeric","spinner","step","timePicker","isValueDateObj","prefixicon","suffixicon","timePicker12Hour","minuteIncrement","charactercounter","minchars","loading","noSuggestionNotice","showNoSuggestion","clearListOnFocus","retainDisplayModelAutocomplete","checkIfActive","toUTC","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getGridFormatToTimestamp","stringdate","dateFormate","createDatePicker","setDateFormate","datePar","tempDate","$date","textfieldId","callApplyFuncFlag","timePicker24Hour","timePickerIncrement","pickerObj","autoApply","opens","drops","cancelLabel","applyLabel","wHeight","srTop","move","ev","pickerr","hideAutoOnScroll","autoCompleteField","destroyEverythingElse","labelForTextfieldId","unbindValidate","unbindFocus","unbindOptions","unbindNumber","unbindDateModel","rulesValidationEvent","returnValue","validateOn","checkRule","noTrim","ngFocus","targetedEle","dateModel","splittedDisplayFormat","currentInputValue","ngKeyPress","charCode","textValue","decimalDigit","cc","fromCharCode","escapeChars","showNoSuggestionNotice","unbindNgModel","unbindMin","unbindMax","inputNumber","smartTextField2Func","smartTextFieldService","smartTextField3Service","isTitleVisible","SmartTextField_NumberFunc","onTextChange","updateTextValue","setActiveClass","updateTextFieldClass","prevModel","unbindModelWatcher","unbindAttributesWatcher","smartTextField_TextFunc","SmartTextField_DateFunc","SmartTextField_AutocompleteFunc","smartTextField_NumFunc","smartTextField3Func","regionalFormat","masterData","currencySymbol","smartTextField3_TextFunc","SmartTextField3_DateFunc","SmartTextField3_AutocompleteFunc","smartTextField3_NumFunc","showTitle","setModal","typing","getModal","unbindOtherWatcher","bindOtherWatcher","LT","datetimePicker","applyClientZone","convertIntoUTC","updateDateValue","updateDateClass","assignDateEvents","timeOffset","updatingDateModel","dateObj","timeZoneOffset","adjustTimeZone","zone","dateModifiedbyUser","dateStr","updateAutocompleteValue","elmVal","unbindValidationWatcher","ndisplayFormat","assignAutocompleteEvents","num","MinPrecessionValue","aPad","aSep","thousandSep","aDec","decimalSep","vMin","NEGATIVE_INFINITY","vMax","POSITIVE_INFINITY","viewTimeout","getSelectedDate","getPreviousDate","setSelectedDate","getMasterDataList","masterDataConfig","getAutoSuggestList","filterOptions","checkMasterFlag","setDocumentFields","setSelectedValue","checkobj","suggestedObjs","suggestedObject","suggestObj","searchOptions","saveMasterDataForRootField","valueToModel","aSign","smartTextFieldServiceFunc","wait","immediate","context","later","callNow","elmContainer","lbl","buildPrefixiconTemplate","buildSpinnerTemplate","buildTextFieldTemplate","buildInfoIconTemplate","isNumeric","characterCounter","addClassElem","showLessContent","showMoreContent","updateNgModel","updateElement","smartTextField3ServiceFunc","_selectedDate","_previousDate","setPreviousDate","gm","modelVal","tempString","invokeAsap","ctx","throttle","needInvoke","callee","smartCharacterCount","Autocomplete","that","defaults","ajaxSettings","autoSelectFirst","serviceUrl","maxHeight","deferRequestBy","formatResult","delimiter","zIndex","noCache","onSearchStart","onSearchComplete","onSearchError","preserveInput","containerClass","tabDisabled","dataType","currentRequest","triggerSelectOnValidInput","preventBadQueries","lookupFilter","originalQuery","queryLowerCase","paramName","transformResult","parseJSON","orientation","forceFixPosition","showLookup","suggestions","badQueries","currentValue","intervalId","cachedResponse","onChangeInterval","isLocal","suggestionsContainer","noSuggestionsContainer","hint","hintValue","onValueChange","setLoading","setOptions","suggest","isHTML","innerHTML","getCompiledOption","utils","escapeRegExChars","createNode","div","onclick","ESC","TAB","RETURN","LEFT","UP","RIGHT","DOWN","reg","killerFn","suggestionSelector","setAttribute","killSuggestions","disableKillerFn","activate","fixPositionCapture","fixPosition","enableKillerFn","abortAjax","suppliedOptions","verifySuggestionsFormat","validateOrientation","max-height","enable","$container","containerParent","containerHeight","viewPortHeight","topOverflow","bottomOverflow","parentOffsetDiff","stopKillSuggestions","isCursorAtEnd","valLength","selectionStart","createRange","moveStart","onHint","selectHint","moveUp","moveDown","findBestHint","query","getQuery","onInvalidateSelection","isExactMatch","getSuggestions","parts","getSuggestionsLocal","lookupLimit","grep","filterable","q","cacheKey","ignoreParams","isBadQuery","ajax","done","processResponse","fail","jqXHR","textStatus","errorThrown","signalHint","noSuggestions","category","classSelected","beforeRender","formatGroup","currentCategory","formattedResult","formattedTitle","loaderHtmls","totalIndex","innerWrapMaxHeight","escape","unescape","noSuggestionsMessage","addNewKey","showLookupKey","adjustContainerWidth","detach","bestMatch","foundMatch","fallback","inArray","adjustScroll","offsetTop","heightDelta","getValue","getTotalSuggested","onClickShowLookup","onClickAddNew","onSelectCallback","removeData","inputElement","smartTimeLineID","selectable","showCurrentTime","zoomMin","zoomMax","marginSpace","groupOrder","isTodayInBetween","getAngularDateFormat","defaultMin","defaultMax","timeline","groupOrderFunc","$a","$b","lines","timelineID","formateData","groups","groupItemPeer","flagS","flagE","classNamee","startFormated","endFormated","respo","passedClassName","barStyle","getCultureCode","culturecode","groupSet","vis","DataSet","itemSet","Timeline","setGroups","setItems","locales","minorLabels","millisecond","second","minute","hour","weekday","day","month","year","majorLabels","current","time","fittobound","fit","currentTime","bar","props","getEventProperties","groupObj","itemObj","$res","onMessage","delay","optionsObject","typeaheadId","callbackOnIconClick","desckey","infoIcon","infoIconTooltip","showInfoIcon","isSupplier","defaultselectoption","minCharForTrigger","setModel","setValues","DuplicateData","editTest","newArrLen","str_array","strLen","indexabc","copyArray","selectedArrIndex","newOptionsSelected","newArr","selectedArr","ab","_$index","v1","v2","isPresent","tNewArr","dataLength","childObj","getOpFormate","opFor","filterKeyLen","getDispFormate","opDisp","tChild","getFormatedArray","formatString","propArray","tLen","alignLookUp","elPosition","elHeight","lookupHeight","isOutOfBound","mutiselectVal","valuee","multiselectFlag","labelFortypeaheadId","toutOptions","infoIconFlag","infotipData","cancelMe","changeTimeout","keyUpTimeout","keyDownTimeout","keyPressTimeout","getOwnPropertyNames","tout","showLookupTrigger","preventKeyArray","formattedData","clickedOnIcon","ruleLlen","tRule","delimiterVal","tTout","scrollTo","drp","keyup","lookupTout","gridConfigProvider","uiGridConstants","$injector","focusRowCol","validationService","searchTerm","otherGridOptions","onRenderingStart","onRenderingFinish","dynamicPaginationPageSizes","dynamicItemTotal","getCellValue","gridInstance","getCellDisplayValue","outerSearchCallback","cols","formattedDate","decession","onCheckboxSelect","getGridInstanceCallback","rowSelectionCallback","isRowSelectable","registerRowsProcessor","rowsRendered","rowsRenderedTimeout","setHeightForGrid","navigate","newRowcol","oldRowCol","isRegFocusCol","focusedRowColObj","bluredRowColObj","rowEntity","rowModel","getDataFolDropDown","dropDownOptions","isRegBeginEditCol","paginationChanged","newPage","pageSize","rowCount","getVisibleRows","paginationOptions","pageNumber","cellClassFunction","cellEditableConditionFunction","defaultGridOptions","paginationPageSizes","dynamicPaginationCallback","enableCellEditOnFocus","enableFiltering","enableVerticalScrollbar","scrollbars","NEVER","treeRowHeaderAlwaysVisible","showTreeExpandNoChildren","modifiedColDef","totalItems","getMassagedGirdConfig","idx","defs","customTreeAggregationFinalizerFn","customTreeAggregationFn","groupingCol","isGrouped","grouping","clearGrouping","groupColumn","modifiedOtherGridOptions","appScopeProvider","treeColumns","treeViewColumnsToBeCreated","showTreeRowHeader","enableRowHeaderSelection","assignTreeLevel","onRegisterApi","isTree","loopedItems","SplitLevelArr","autoSuggestOptions","autoSuggestOnChange","indexFound","entityType","fieldId","splitEntityId","entityCode","responseRequired","autoSuggestOnSelect","autoSuggestModel","isModified","dropDownOnChange","popUpButtonClickCallback","isChargesGrid","checkBoxOnChange","textOrNumberKeyUp","self","statusDataChange","dataChange","legendChange","getChange","getLegendChange","trackStatusService","onTabChange","cycleChange","statusLegend","approverLegend","fileDownloadCallback","scrollToStatus","downloadAllAttachment","statusListData","statusLists","datailedData","selectCycle","cycles","cycleObject","selectedCycle","updateTabs","trackStatusTabs","tobj","htmlForDetail","updateHeaderData","headerSecData","Comments","docCreatedOn","createdOn","addUniqueId","pItems","pLen","cArr","actionerDetails","cLen","uniqueId","displayLegend","defApproverLegend","defStatusLegend","setTabCss","tabDiv","scrollToLatestStatus","$target","scrollIndex","uniqueid","headerLable","tsDocName","tsCreatedOn","trackStatusType","tsCurrStatus","labelOn","legend","by","defContentCommentLen","tabClicked","changeCycle","projectStatus","hasComments","a_comment","showLess","showMore","showMoreLess","showMoreComment","initShowModel","getString","a_str","a_count","applyStatusColor","IconStatus","iconMap","pending","approval","rejected","accepted","approved","auto_approved","approval pending","approval withdrawn","withdrawn","approval withdraw","withdraw","InnerIconStatus","approvalGroupType","slideDetailsTS","detailDataCopy","isDetailShow","changeScreenSize","isFullscreen","getFDownloadCallback","getDownloadAllAttchment","attachments","identifier","cntrl","downloadFile","showDownloadAllAttachment","filedownload","uigridCompatibleFunc","uiGridEditConstants","controllers","uiGridCtrl","renderContainerCtrl","isFocused","isSelectElement","lastRenderedElementScope","onDatePopupClosed","onViewPortKeyDown","viewPortKeyDown","rowCol","inputText","anchor","events","END_CELL_EDIT","keymap","CANCEL_CELL_EDIT","uiGridTargetRenderContainerId","containerId","handleKeyDown","ENTER","isCellClicked"],"mappings":"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","file":"directives.min.js","sourcesContent":["angular.module('SMART2')\r\n.directive(\"sidenav\", [sideNavFunc])\r\n.directive(\"tabs\", [tabsFunc])\r\n.directive(\"dropdown\", [\"$compile\", \"$timeout\", dropdownFunc])\r\n.directive('inputDate', [\"$compile\", \"$timeout\", inputDateFunc])\r\n.directive(\"modal\", [\"$compile\", \"$timeout\", modal])\r\n.directive(\"slideToggle\", [slideToggleFunc])\r\n.directive(\"collapsible\", [collapsibleFunc]);\r\n\r\n/*side nav*/\r\nfunction sideNavFunc() {\r\n    return {\r\n        scope: {\r\n            menuwidth: \"@\",\r\n            closeonclick: \"@\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            \r\n            element.sideNav({\r\n                menuWidth: (angular.isDefined(scope.menuwidth)) ? scope.menuwidth : undefined,\r\n                edge: attrs.sidenav ? attrs.sidenav : \"left\",\r\n                closeOnClick: (angular.isDefined(scope.closeonclick)) ? scope.closeonclick == \"true\" : undefined\r\n            });\r\n        }\r\n    };\r\n}\r\n/*tabs*/\r\nfunction tabsFunc() {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.tabs();\r\n            \r\n        }\r\n    };\r\n}\r\n\r\nfunction dropdownFunc($compile, $timeout) {\r\n    return {\r\n        scope: {\r\n            inDuration: \"@\",\r\n            outDuration: \"@\",\r\n            constrainWidth: \"@\",\r\n            hover: \"@\",\r\n            alignment: \"@\",\r\n            gutter: \"@\",\r\n            belowOrigin: \"@\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            var dropdownCode;\r\n            $timeout(function () {\r\n                $compile(element.contents())(scope);\r\n                dropdownCode = element.attr(\"data-activates\");\r\n                element.dropdown({\r\n                    inDuration: (angular.isDefined(scope.inDuration)) ? scope.inDuration : undefined,\r\n                    outDuration: (angular.isDefined(scope.outDuration)) ? scope.outDuration : undefined,\r\n                    constrain_width: (angular.isDefined(scope.constrainWidth)) ? scope.constrainWidth : undefined,\r\n                    hover: (angular.isDefined(scope.hover)) ? scope.hover : undefined,\r\n                    alignment: (angular.isDefined(scope.alignment)) ? scope.alignment : undefined,\r\n                    gutter: (angular.isDefined(scope.gutter)) ? scope.gutter : undefined,\r\n                    belowOrigin: (angular.isDefined(scope.belowOrigin)) ? scope.belowOrigin : undefined\r\n                });\r\n            });\r\n            \r\n            scope.$on('closeDropdown', function(e, obj){\r\n                  if(obj.ddname===dropdownCode){\r\n                    element.trigger(\"close\");  \r\n                  }\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nfunction inputDateFunc($compile, $timeout) {\r\n   \r\n    var style = $('<style>#inputCreated_root {outline: none;}</style>');\r\n    $('html > head').append(style);\r\n\r\n    var dateFormat = function () {\r\n\r\n        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\r\n            timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\r\n            timezoneClip = /[^-+\\dA-Z]/g,\r\n            pad = function (val, len) {\r\n                val = String(val);\r\n                len = len || 2;\r\n                while (val.length < len) {\r\n                    val = \"0\" + val;\r\n                }\r\n                return val;\r\n            };\r\n\r\n        return function (date, mask, utc) {\r\n\r\n            var dF = dateFormat;\r\n\r\n            if (arguments.length === 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\r\n                mask = date;\r\n                date = undefined;\r\n            }\r\n\r\n                    \r\n            date = date ? new Date(date) : new Date();\r\n            if (isNaN(date)) throw SyntaxError(\"invalid date\");\r\n\r\n            mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\r\n\r\n             \r\n            if (mask.slice(0, 4) == \"UTC:\") {\r\n                mask = mask.slice(4);\r\n                utc = true;\r\n            }\r\n\r\n            var _ = utc ? \"getUTC\" : \"get\",\r\n                d = date[_ + \"Date\"](),\r\n                D = date[_ + \"Day\"](),\r\n                m = date[_ + \"Month\"](),\r\n                y = date[_ + \"FullYear\"](),\r\n                H = date[_ + \"Hours\"](),\r\n                M = date[_ + \"Minutes\"](),\r\n                s = date[_ + \"Seconds\"](),\r\n                L = date[_ + \"Milliseconds\"](),\r\n                o = utc ? 0 : date.getTimezoneOffset(),\r\n                flags = {\r\n                    d: d,\r\n                    dd: pad(d),\r\n                    ddd: dF.i18n.dayNames[D],\r\n                    dddd: dF.i18n.dayNames[D + 7],\r\n                    m: m + 1,\r\n                    mm: pad(m + 1),\r\n                    mmm: dF.i18n.monthNames[m],\r\n                    mmmm: dF.i18n.monthNames[m + 12],\r\n                    yy: String(y).slice(2),\r\n                    yyyy: y,\r\n                    h: H % 12 || 12,\r\n                    hh: pad(H % 12 || 12),\r\n                    H: H,\r\n                    HH: pad(H),\r\n                    M: M,\r\n                    MM: pad(M),\r\n                    s: s,\r\n                    ss: pad(s),\r\n                    l: pad(L, 3),\r\n                    L: pad(L > 99 ? Math.round(L / 10) : L),\r\n                    t: H < 12 ? \"a\" : \"p\",\r\n                    tt: H < 12 ? \"am\" : \"pm\",\r\n                    T: H < 12 ? \"A\" : \"P\",\r\n                    TT: H < 12 ? \"AM\" : \"PM\",\r\n                    Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\r\n                    o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\r\n                    S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\r\n                };\r\n\r\n            return mask.replace(token, function ($0) {\r\n                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\r\n            });\r\n        };\r\n    }();\r\n\r\n\r\n    dateFormat.masks = {\r\n        \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\r\n        shortDate: \"m/d/yy\",\r\n        mediumDate: \"mmm d, yyyy\",\r\n        longDate: \"mmmm d, yyyy\",\r\n        fullDate: \"dddd, mmmm d, yyyy\",\r\n        shortTime: \"h:MM TT\",\r\n        mediumTime: \"h:MM:ss TT\",\r\n        longTime: \"h:MM:ss TT Z\",\r\n        isoDate: \"yyyy-mm-dd\",\r\n        isoTime: \"HH:MM:ss\",\r\n        isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\r\n        isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\r\n    };\r\n\r\n        \r\n    dateFormat.i18n = {\r\n        dayNames: [\r\n            \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\r\n            \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n        ],\r\n        monthNames: [\r\n            \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\r\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ]\r\n    };\r\n\r\n       \r\n    Date.prototype.format = function (mask, utc) {\r\n        return dateFormat(this, mask, utc);\r\n    };\r\n\r\n       \r\n    var isValidDate = function (date) {\r\n        if (Object.prototype.toString.call(date) === '[object Date]') {\r\n            return !isNaN(date.getTime());\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return {\r\n        require: 'ngModel',\r\n        scope: {\r\n            container: \"@\",\r\n            format: \"@\",\r\n            formatSubmit: \"@\",\r\n            monthsFull: \"@\",\r\n            monthsShort: \"@\",\r\n            weekdaysFull: \"@\",\r\n            weekdaysLetter: \"@\",\r\n            firstDay: \"=\",\r\n            disable: \"=\",\r\n            today: \"=\",\r\n            clear: \"=\",\r\n            close: \"=\",\r\n            selectYears: \"=\",\r\n            onStart: \"&\",\r\n            onRender: \"&\",\r\n            onOpen: \"&\",\r\n            onClose: \"&\",\r\n            onSet: \"&\",\r\n            onStop: \"&\",\r\n            ngReadonly: \"=?\",\r\n            max: \"@\",\r\n            min: \"@\"\r\n        },\r\n        link: function (scope, element, attrs, ngModelCtrl) {\r\n\r\n            ngModelCtrl.$formatters.unshift(function (modelValue) {\r\n                if (modelValue) {\r\n                    var date = new Date(modelValue);\r\n                    return (angular.isDefined(scope.format)) ? date.format(scope.format) : date.format('d mmmm, yyyy');\r\n        }\r\n                return null;\r\n            });\r\n\r\n            var monthsFull = (angular.isDefined(scope.monthsFull)) ? scope.$eval(scope.monthsFull) : undefined,\r\n                monthsShort = (angular.isDefined(scope.monthsShort)) ? scope.$eval(scope.monthsShort) : undefined,\r\n                weekdaysFull = (angular.isDefined(scope.weekdaysFull)) ? scope.$eval(scope.weekdaysFull) : undefined,\r\n                weekdaysLetter = (angular.isDefined(scope.weekdaysLetter)) ? scope.$eval(scope.weekdaysLetter) : undefined;\r\n\r\n\r\n            $compile(element.contents())(scope);\r\n            if (!(scope.ngReadonly)) {\r\n                $timeout(function () {\r\n                    var pickadateInput = element.pickadate({\r\n                        container: (angular.isDefined(scope.container)) ? scope.container : 'body',\r\n                        format: (angular.isDefined(scope.format)) ? scope.format : undefined,\r\n                        formatSubmit: (angular.isDefined(scope.formatSubmit)) ? scope.formatSubmit : undefined,\r\n                        monthsFull: (angular.isDefined(monthsFull)) ? monthsFull : undefined,\r\n                        monthsShort: (angular.isDefined(monthsShort)) ? monthsShort : undefined,\r\n                        weekdaysFull: (angular.isDefined(weekdaysFull)) ? weekdaysFull : undefined,\r\n                        weekdaysLetter: (angular.isDefined(weekdaysLetter)) ? weekdaysLetter : undefined,\r\n                        firstDay: (angular.isDefined(scope.firstDay)) ? scope.firstDay : 0,\r\n                        disable: (angular.isDefined(scope.disable)) ? scope.disable : undefined,\r\n                        today: (angular.isDefined(scope.today)) ? scope.today : undefined,\r\n                        clear: (angular.isDefined(scope.clear)) ? scope.clear : undefined,\r\n                        close: (angular.isDefined(scope.close)) ? scope.close : undefined,\r\n                        selectYears: (angular.isDefined(scope.selectYears)) ? scope.selectYears : undefined,\r\n                        onStart: (angular.isDefined(scope.onStart)) ? function () { scope.onStart(); } : undefined,\r\n                        onRender: (angular.isDefined(scope.onRender)) ? function () { scope.onRender(); } : undefined,\r\n                        onOpen: (angular.isDefined(scope.onOpen)) ? function () { scope.onOpen(); } : undefined,\r\n                        onClose: (angular.isDefined(scope.onClose)) ? function () { scope.onClose(); } : undefined,\r\n                        onSet: (angular.isDefined(scope.onSet)) ? function () { scope.onSet(); } : undefined,\r\n                        onStop: (angular.isDefined(scope.onStop)) ? function () { scope.onStop(); } : undefined\r\n                    });\r\n                 \r\n                    var picker = pickadateInput.pickadate('picker');\r\n\r\n            \r\n                    scope.$watch('max', function (newMax) {\r\n                        if (picker) {\r\n                            var maxDate = new Date(newMax);\r\n                            picker.set({ max: isValidDate(maxDate) ? maxDate : false });\r\n                        }\r\n                    });\r\n                    scope.$watch('min', function (newMin) {\r\n                        if (picker) {\r\n                            var minDate = new Date(newMin);\r\n                            picker.set({ min: isValidDate(minDate) ? minDate : false });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    };\r\n};\r\n/*modal*/\r\nvar modalCounter = 0;\r\n\r\n\r\nfunction modal($compile, $timeout) {\r\n    return {\r\n        restrict: 'E',\r\n        scope: {},\r\n        link: function (scope, element, attrs) {\r\n            scope.templateUrl = attrs.templateUrl;\r\n            scope.title = attrs.title;\r\n            modalCounter = modalCounter + 1;\r\n            scope.modalCounter = modalCounter;\r\n\r\n            setTimeout(function () {\r\n                angular.element('#modalButton' + modalCounter).leanModal();\r\n            });\r\n        },\r\n        template: '<div><a id=\"modalButton{{modalCounter}}\" class=\"waves-effect waves-light btn modal-trigger\" href=\"#modal{{modalCounter}}\" modal>{{title}}</a><div id=\"modal{{modalCounter}}\" class=\"modal modal-sm\" ng-include=\"templateUrl\"></div>'\r\n    };\r\n}\r\n\r\nfunction slideToggleFunc() {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {},\r\n        controller: function ($scope) { },\r\n        link: function (scope, element, attr) {\r\n            element.bind('click', function () {\r\n                var $slideBox = angular.element(attr.slideToggle);\r\n                var slideDuration = parseInt(attr.slideToggleDuration, 10) || 200;\r\n                $slideBox.stop().slideToggle(slideDuration);\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\n/*tabs*/\r\nfunction collapsibleFunc() {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            element.collapsible();\r\n        }\r\n    };\r\n}","angular\r\n    .module(\"SMART2\")\r\n    .directive(\"smartHeight\", [\"$timeout\", smartHeightFun]);\r\n\r\nfunction smartHeightFun($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        link: function (scope, element, attrs) {\r\n            var config = {\r\n                relativeTo: returnVal(attrs.relativeTo, \"relativeTo\"),\r\n                plusThis: returnVal(attrs.plusThis, \"plusThis\"),\r\n                minusThis: returnVal(attrs.minusThis, \"minusThis\")\r\n            };\r\n            var height = function () {\r\n                var h = 0, m = 0, p = 0;\r\n                if (config.relativeTo == window) {\r\n                    h = window.innerHeight;\r\n                } else {\r\n                    h = $(config.relativeTo).get(0).outerHeight;\r\n                }\r\n                if (config.plusThis) {\r\n                    p = normalizeNumber(config.plusThis);\r\n                    h += p;\r\n                } else {\r\n                    m = normalizeNumber(config.minusThis);\r\n                    h -= m;\r\n                }\r\n                return h;\r\n            }();\r\n\r\n            element.css(\"height\", height);\r\n\r\n            function normalizeNumber(val) {\r\n                var v = 0;\r\n                if (val) {\r\n                    if (Number(val) == NaN) {\r\n                        if (val.indecOf(',') > -1) {\r\n                            $(val).each(function () {\r\n                                v += this.outerHeight;\r\n                            });\r\n                        } else {\r\n                            v = $(val).get(0).outerHeight;\r\n                        }\r\n                    } else {\r\n                        v = Number(val)\r\n                    }\r\n                } else {\r\n                    v = 0;\r\n                }\r\n                return v;\r\n            }\r\n\r\n            function returnVal(val, attribute) {\r\n                var r;\r\n                switch (attribute) {\r\n                    case \"relativeTo\":\r\n                        if (!val) r = window\r\n                        else r = val;\r\n                        break;\r\n                    case \"plusThis\":\r\n                        if (!val) r = false;\r\n                        else r = val;\r\n                        break;\r\n                    case \"minusThis\":\r\n                        if (!val) r = false;\r\n                        else r = val;\r\n                        break;\r\n                }\r\n\r\n                return r;\r\n            };\r\n        }\r\n    };\r\n}","//Body\r\n(function () {\r\n    angular.module('SMART2').directive('body', function () {\r\n        return {\r\n            restrict: 'E',\r\n            link: function postLink(scope, elem, attrs) {\r\n                function _wheelDelta(a) {\r\n                    if (a.originalEvent.wheelDelta == undefined) {\r\n                        return a.originalEvent.deltaY;\r\n                    } else {\r\n                        return -a.originalEvent.wheelDelta;\r\n                    }\r\n                }\r\n                IEscroll = function (event) {\r\n                    if ($(event.target).closest(\".dropdown-content\").length == 0 && $(event.target).closest(\"smart-scroll\").length == 0 && $(event.target).closest(\".scroll-inner-wrapp\").length == 0) {\r\n                        var dy = _wheelDelta(event);\r\n                        if ($(\"body\").css(\"overflow\") == \"hidden\") {\r\n                            return;\r\n                        };\r\n                        var evDelta = function () {\r\n                            if (dy < 0) {\r\n                                return dy < -90 ? 60 : 40;\r\n                            } else {\r\n                                return dy > 90 ? 60 : 40;\r\n                            }\r\n                        }();\r\n                        event.preventDefault();\r\n                        var wheelDelta = dy < 0 ? dy - evDelta : dy + evDelta;\r\n                        var currentScrollPosition = window.pageYOffset;\r\n                        $(this).scrollTop(currentScrollPosition + wheelDelta);\r\n                        \r\n                    }\r\n                }\r\n\r\n                //function IEscrollfn() {\r\n                //    if (attrs.customWheelForie == \"true\") {\r\n                //        $('html,body').bind(\"mousewheel\", IEscroll);\r\n                //    } else {\r\n                //        $('html,body').unbind(\"mousewheel\", IEscroll);\r\n                //    }\r\n                //};\r\n\r\n                if (navigator.appName == 'Microsoft Internet Explorer' || !!(navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/rv:11/)) || (typeof $.browser !== \"undefined\" && $.browser.msie == 1)) {\r\n                    $('html,body').bind(\"mousewheel\", IEscroll);\r\n\r\n                    //attrs.$observe(\"customWheelForie\", function () {\r\n                    //    IEscrollfn();\r\n                    //});\r\n                };\r\n            }\r\n        }\r\n    });\r\n})();","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('ckEditor', ['APPCONSTANTS', function (APPCONSTANTS) {\r\n        return {\r\n            require: '?ngModel',\r\n            link: function (scope, elm, attr, ngModel) {\r\n                var lang = \"en\";\r\n                if (APPCONSTANTS.userPreferences.UserBasicDetails.Culture) {\r\n                    lang = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n                }\r\n                var ckeditor = CKEDITOR.replace(\r\n\t\t\t\t\telm[0],\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    \"toolbar\": \"Basic\",\r\n\t\t\t\t\t    \"language\": lang\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n                if (!ngModel)\n                    return;\n\n                var updateModel = false;\n                ckeditor.on('instanceReady', function () {\r\n                    ckeditor.setData(ngModel.$viewValue);\r\n                });\n\n                function update() {\r\n                    if (updateModel) {\r\n                        ngModel.$setViewValue(ckeditor.getData());\r\n                    }\r\n                };\n\n                ngModel.$render = function (value) {\r\n                    ckeditor.setData(ngModel.$viewValue);\r\n                };\n\n                ckeditor.on('change', update);\n                ckeditor.on('focus', function (event) {\r\n                    updateModel = true;\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                \tckeditor.removeAllListeners();\r\n                \tCKEDITOR.remove(ckeditor);\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();","(function () {\r\n\t'use strict';\r\n\r\n\tangular.module('SMART2').directive('colorPicker', ['$parse', '$timeout', function ($parse, $timeout) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\ttransclude: true,\r\n\t\t\tscope: {\r\n\t\t\t\tonSelect: '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tvar $colorPicker = $(element).find('.colorPicker');\r\n\t\t\t\t$colorPicker.on(\"change.color\", function (event, color) {\r\n\t\t\t\t\tif (color) {\r\n\t\t\t\t\t\tscope.$apply(function () {\r\n\t\t\t\t\t\t\tscope.onSelect({\r\n\t\t\t\t\t\t\t\t$event: { color: color }\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$colorPicker.colorpicker({\r\n\t\t\t\t\tshowOn: \"button\",\r\n\t\t\t\t\thistory: false\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$(element).bind('click', function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t$(this).find(\".colorPicker\").colorpicker(\"showPalette\");\r\n\t\t\t\t});\r\n\r\n\t\t\t\tattrs.$observe('color', function (value) {\r\n\t\t\t\t\t$colorPicker.colorpicker('val', value);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/colorPicker/colorPickerTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('notification', [function () {\r\n        var Obj = {};\r\n        Obj.show = false;\r\n        Obj.onCallback = undefined;\r\n\r\n        Obj.on = function (callback) {\r\n            Obj.onCallback = callback;\r\n        };\r\n\r\n        Obj.notify = function (config, callback) {\r\n            this.show = true;\r\n            this.config = config;\r\n            this.broadcastItem();\r\n            this.resultCallBack = function (result) {\r\n                if (typeof (callback) == 'function') {\r\n                    setTimeout(function () {\r\n                        callback(result);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n\r\n        Obj.broadcastItem = function () {\r\n            angular.isFunction(Obj.onCallback) && Obj.onCallback();\r\n        };\r\n\r\n        return Obj;\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartNotification', ['$rootScope', 'notification', '$translate', '$sce', '$timeout', '$focusOnField', 'browserSniffing', function ($rootScope, notification, $translate, $sce, $timeout, $focusOnField, browserSniffing) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            scope: {\r\n                showN: \"@\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var topPositionBeforeModalOpen = 0;\r\n                scope.isChrome = (navigator.userAgent.indexOf(\"Chrome\") != -1) ? \"remindMeOption\" : \"\";\r\n                /*\r\n                 *  Unbind window keyup listener and assign tabindex back to .picker elements\r\n                 */\r\n                var reset = function () {\r\n                    $(window).off('keyup', onWindowKeyUp);\r\n                    angular.element('.picker').attr(\"tabindex\", 0);\r\n                    angular.element(document).scrollTop(topPositionBeforeModalOpen);\r\n                };\r\n\r\n                /*\r\n                 *  window on key up event listener\r\n                 */\r\n                var onWindowKeyUp = function (e) {\r\n                    if (angular.element(e.target).closest('.modal').length == 0 && e.keyCode == 9) {\r\n                        angular.element(element.find(':focusable')[0]).focus();\r\n                    }\r\n                };\r\n\r\n                /*\r\n                 *  hide notification pop up when route changed\r\n                 */\r\n\r\n                scope.$on('$stateChangeSuccess', function () {\r\n                    if (scope.showN && !(scope.config.type == \"unsupportedBrowserVersion\" || scope.config.type == \"unsupportedBrowser\")) {\r\n                        scope.showN = false;\r\n                        cleanUpNotificationPopup();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 *  On notification listener\r\n                 */\r\n                scope.dismissible = true;\r\n                notification.on(function () {\r\n                    scope.dismissible = angular.isDefined(notification.config.dismissible) ? notification.config.dismissible : true;\r\n                    scope.config = notification.config;\r\n                    scope.buttons = scope.config.buttons;\r\n                    switch (scope.config.type) {\r\n                        case \"success\":\r\n                            scope.notifyClass = 'notify-success';\r\n                            scope.title = $translate.instant(\"notificationSuccessMsg\");\r\n                            scope.icon = \"#icon_CircleCheck\";\r\n                            break;\r\n                        case \"error\":\r\n                            scope.notifyClass = 'notify-error';\r\n                            scope.title = $translate.instant(\"notificationErrorMsg\");\r\n                            scope.icon = \"#icon_Exclamation\";\r\n                            break;\r\n                        case \"warning\":\r\n                            scope.notifyClass = 'notify-warning';\r\n                            scope.icon = \"#icon_Warning\";\r\n                            scope.title = $translate.instant(\"notificationWarningMsg\");\r\n                            break;\r\n                        case \"confirm\":\r\n                            scope.notifyClass = 'notify-confirm';\r\n                            scope.icon = \"#icon_Help\";\r\n                            scope.title = $translate.instant(\"notificationConfirmationMsg\");\r\n                            break;\r\n                        case \"inform\":\r\n                            scope.notifyClass = 'notify-information';\r\n                            scope.icon = \"#icon_Info\";\r\n                            scope.title = $translate.instant(\"notificationInformationMsg\");\r\n                            break;\r\n                        case \"sessionTimeOut\":\r\n                            scope.notifyClass = 'notify-session-timeout';\r\n                            scope.icon = \"#icon_AlertTimer\";\r\n                            scope.title = $translate.instant(\"notificationSessionTimeOut\");\r\n                            scope.dismissible = false;\r\n                            break;\r\n                        case \"sessionExpire\":\r\n                            scope.notifyClass = 'notify-session-expire';\r\n                            scope.icon = \"#icon_AlertTimer\";\r\n                            scope.title = $translate.instant(\"notificationSessionExpiredMsg\");\r\n                            scope.dismissible = false;\r\n                            break;\r\n                        case \"unsupportedBrowserVersion\":\r\n                            scope.notifyClass = \"notify-unsupported-browser-version\";\r\n                            scope.titleTextColor = \"browser-version-header-text\";\r\n                            scope.title = $translate.instant(\"notificationUnsupportedBrowserVersionMsg\");\r\n                            break;\r\n                        case \"unsupportedBrowser\":\r\n                            scope.notifyClass = \"notify-unsupported-browser\";\r\n                            scope.titleTextColor = \"browser-unsupported-header-text\";\r\n                            scope.title = $translate.instant(\"notificationUnsupportedBrowserMsg\");\r\n                    };\r\n\r\n                    scope.onChange = function (remindMeDate) {\r\n                        scope.showN = false;\r\n                        scope.$digest();\r\n                    };\r\n\r\n\r\n                    //scope.dismissible = (typeof notification.config.dismissible != \"undefined\")?(notification.config.dismissible) ? true : false : scope.dismissible;\r\n                    scope.message = $sce.trustAsHtml(scope.config.message);\r\n                    scope.checkboxText = scope.config.checkMessage;\r\n                    scope.customTemplate = false;\r\n                    if (typeof scope.config[\"isMultipleCheck\"] != \"undefined\" && scope.config[\"isMultipleCheck\"]) {\r\n                        scope.customTemplate = true;\r\n                        if (typeof scope.config.modalType == \"undefined\") {\r\n                            scope.config.modalType = \"small\"\r\n                        }\r\n                        for (var i in scope.config.multipleCheckList) {\r\n                            scope.config.multipleCheckList[i].model = {};\r\n                            scope.config.multipleCheckList[i].model.modelName = scope.config.multipleCheckList[i][\"checkContext\"];\r\n                            switch (scope.config.multipleCheckList[i].type) {\r\n                                case \"check\":\r\n                                    scope.config.multipleCheckList[i].model.isCheck = false;\r\n                                    break;\r\n                                case \"radio\":\r\n                                    scope.config.multipleCheckList[i].model.isCheck = {\r\n                                        \"title\": \"\"\r\n                                    };\r\n                                case \"select\":\r\n                                    if (typeof scope.config.multipleCheckList[i].preSelected != \"undefined\") {\r\n                                        scope.config.multipleCheckList[i].model.isCheck = scope.config.multipleCheckList[i].preSelected;\r\n                                    } else {\r\n                                        scope.config.multipleCheckList[i].model.isCheck = {\r\n                                            \"title\": \"\"\r\n                                        };\r\n                                    }\r\n                                    break;\r\n                            }\r\n                            if (typeof scope.config.multipleCheckList[i][\"header\"] != \"undefined\" && typeof scope.config.multipleCheckList[i][\"header\"] == \"string\") {\r\n                                scope.config.multipleCheckList[i][\"header\"] = $sce.trustAsHtml(scope.config.multipleCheckList[i][\"header\"]);\r\n                            }\r\n                            if (typeof scope.config.multipleCheckList[i][\"label\"] == \"string\") {\r\n                                scope.config.multipleCheckList[i][\"label\"] = $sce.trustAsHtml(scope.config.multipleCheckList[i][\"label\"]);\r\n                            }\r\n                        }\r\n                        for (var i in scope.config.buttons) {\r\n                            if (typeof scope.config.buttons[i].disableBtn != \"undefined\") {\r\n                                scope.config.buttons[i].disableBtn = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.isCheckSelect = false;\r\n                    if (typeof scope.config.isCheckSelect != 'undefined') {\r\n                        scope.isCheckSelect = scope.config.isCheckSelect;\r\n                    }\r\n                    scope.showN = notification.show;\r\n\r\n                    angular.element('body').css('overflow', 'hidden');\r\n                    $timeout(function () {\r\n                        var $firstField = element.find(':focusable')[0];\r\n                        $focusOnField($firstField);\r\n                        $(window).on('keyup', onWindowKeyUp);\r\n                        //  remove picker tabindex when popup to avoid focus on picker element\r\n                        angular.element('.picker').removeAttr(\"tabindex\");\r\n                        scope.notifyClass = scope.notifyClass + ' notificationanimate--active';\r\n                    }, 250);\r\n                    topPositionBeforeModalOpen = angular.element(document).scrollTop();\r\n                });\r\n\r\n                scope.showN = false;\r\n                scope.bindforTab = false;\r\n                scope.overlayCLicked = function () {\r\n                    if (scope.dismissible) {\r\n                        //scope.showN = false;\r\n                        //cleanUpNotificationPopup();\r\n                    }\r\n                }\r\n                scope.$on('LastRepeaterElement', function () {\r\n                    scope.bindforTab = true;\r\n                });\r\n                scope.onChangeNotification = function () {\r\n                    var cnt = 0;\r\n                    for (var i in scope.config.multipleCheckList) {\r\n                        if (scope.config.multipleCheckList[i].model.isCheck) {\r\n                            cnt++;\r\n                        }\r\n                    }\r\n                    for (var i in scope.config.buttons) {\r\n                        if (typeof scope.config.buttons[i].disableBtn != \"undefined\") {\r\n                            if (cnt > 0) {\r\n                                scope.config.buttons[i].disableBtn = false;\r\n                            } else {\r\n                                scope.config.buttons[i].disableBtn = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n                scope.clickCallbackFunction = function (e) {\r\n                    $timeout(function () {\r\n                        scope.showN = false;\r\n                        scope.bindforTab = false;\r\n                        var responceObj = {\r\n                            \"result\": e\r\n                        };\r\n                        if (scope.customTemplate) {\r\n                            for (var i in scope.config.multipleCheckList) {\r\n                                responceObj[scope.config.multipleCheckList[i].model.modelName] = scope.config.multipleCheckList[i].model.isCheck\r\n                            }\r\n                        } else {\r\n                            responceObj[\"isChecked\"] = scope.isCheckSelect;\r\n                        }\r\n                        cleanUpNotificationPopup();\r\n                        notification.resultCallBack(responceObj);\r\n                        $rootScope.$broadcast(\"closedPopup\");\r\n                    });\r\n                };\r\n                function cleanUpNotificationPopup() { // empty 'scope.buttons' object to avoid getting display multiple notification buttons\r\n                    scope.notifyClass = '';\r\n                    scope.buttons = [];\r\n                    angular.element('body').css('overflow', '');\r\n                    angular.element('.notification-massage .modal-content').css('display', 'none');\r\n                    angular.element('.notification-massage .modal-footer').css('display', 'none');\r\n                }\r\n                scope.$on('$destroy', function () {\r\n                    reset();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/notification/notificationTemplate.html',\r\n        }\r\n    }]);\r\n})();","(function() {\r\n\t'use strict';\r\n\tangular\r\n    .module('SMART2')\r\n    .directive('onCaptureClick', ['$parse', function ($parse) {\r\n      return {\r\n        restrict: 'A',\r\n        compile: function(element, attrs) {\r\n          var fn = $parse(attrs.onCaptureClick);\r\n          return function(scope, element) {\r\n            element[0].addEventListener('click', function(event) {\r\n              scope.$apply(function() {\r\n                fn(scope, {\r\n                  $event: event\r\n                });\r\n              });\r\n            }, true);\r\n          };\r\n        }\r\n      }\r\n    }]);\r\n})(angular);","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('onLoad', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            scope: {\r\n                onLoadCallback: '&',\r\n            },\n            link: function (scope, element, attrs) {\r\n                (scope.onLoadCallback) ? scope.onLoadCallback = scope.$eval(scope.onLoadCallback) : null;\n                if (angular.isFunction(scope.onLoadCallback)) {\r\n                    $timeout(function () {\r\n                        scope.onLoadCallback();\r\n                    }, 0);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();\n","    (function() {\r\n    \t'use strict';        \r\n    \tangular.module('SMART2').directive('profilePic', ['notification', '$translate', function (notification, $translate) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.isProfilePicEditable = false;\r\n            scope.isUserProfile = false;\r\n            if (attrs.circular == 'true') {\r\n                scope.isUserProfile = true;\r\n            }\r\n            if (attrs.editable == 'true') {\r\n                scope.isProfilePicEditable = true;\r\n            }\r\n            scope.dummyimg = false;\r\n            if (attrs.dummyimg == 'true') {\r\n                scope.dummyimg = true;\r\n            }\r\n     \r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? 'shared/resources/images/dummyImage.jpg' : attrs.imgsrc;\r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? scope.dummyimg = true : scope.dummyimg = false;\r\n            //var dummySrc = typeof attrs.dummysrc === 'undefined' ? 'shared/resources/images/user_default_BIG.PNG' : attrs.dummysrc;\r\n            //scope.dummyimg = typeof attrs.dummyimg === 'undefined' ? false : attrs.dummyimg;\r\n            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n            //debugger;\r\n            if (scope.isUserProfile == true) {\r\n                if (!scope.dummyimg) {\r\n                    scope.imgsrc = 'shared/resources/images/dummyImage.jpg';\r\n                    //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n                }\r\n            }\r\n            else {\r\n                if (!scope.dummyimg) {\r\n                    scope.imgsrc = 'shared/resources/images/kelloggs_logo.png';\r\n                }\r\n            }\r\n            var readURL = function (input) {\r\n                if (input.files && input.files[0]) {\r\n                    var reader = new FileReader();\r\n                    reader.onload = function (e) {\r\n                        angular.element('.user-profile').addClass('is-profile-pic');\r\n                        scope.dummyimg = false;\r\n                        scope.imgsrc = e.target.result;\r\n                        scope.$apply();\r\n                    }\r\n                    reader.readAsDataURL(input.files[0]);\r\n                }\r\n            }\r\n\r\n            element.find(\"#callFileFOrProfile\").on('change', function () {\r\n                readURL(this);\r\n            });\r\n\r\n            scope.profilePicEdit = function () {\r\n               element.find(\"#callFileFOrProfile\").get(0).click();\r\n            }\r\n\r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? 'shared/resources/images/dummyImage.jpg' : attrs.imgsrc;\r\n            // var imgsrc = typeof attrs.imgsrc === 'undefined' ? scope.dummyimg = true : scope.dummyimg = false;\r\n            //var dummySrc = typeof attrs.dummysrc === 'undefined' ? 'shared/resources/images/user_default_BIG.PNG' : attrs.dummysrc;\r\n            //scope.dummyimg = typeof attrs.dummyimg === 'undefined' ? false : attrs.dummyimg;\r\n            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n            // scope.isDeleted = false;\r\n\r\n            scope.clearProfilePicEdit = function () {\r\n            \tvar confi = {\r\n            \t\ttype: \"confirm\",\r\n            \t\tmessage: \"<p class='left-align'>\" + $translate.instant(\"confirmationMsg\") + \"</p>\",\r\n            \t\t//checkMessage: \"Do not show again.\",\r\n            \t\tbuttons: [\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t    \"title\": $translate.instant(\"notificationButtonYes\"),\r\n\t\t    \t\t\t\t\"result\": \"yes\"\r\n\t\t    \t\t\t},\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t    \"title\": $translate.instant(\"cancelBtn\"),\r\n\t\t    \t\t\t\t\"result\": \"no\"\r\n\t\t    \t\t\t}\r\n            \t\t]\r\n            \t};\r\n            \tnotification.notify(confi, function (responce) {\r\n            \t\tif (responce.result == \"yes\") {\r\n            \t\t\tangular.element('.overL').prev().toggleClass('changeImage');\r\n            \t\t\t\r\n\r\n            \t\t\t//if (angular.element('.overL').prev().hasClass(\"changeImage\") == true) {\r\n            \t\t\t//    scope.imgsrc = imgsrc;\r\n            \t\t\t\t\r\n            \t\t\t//\t//scope.isDeleted = true;\r\n            \t\t\t//}\r\n            \t\t\tif (angular.element('.user-profile img').hasClass(\"changeImage\")) {\r\n            \t\t\t    scope.imgsrc = false;\r\n            \t\t\t   element.find(\"#callFileFOrProfile\").val('');\r\n            \t\t\t    scope.dummyimg = true;\r\n            \t\t\t    //scope.isDeleted = true;\r\n            \t\t\t    if (scope.isUserProfile == true) {            \t\t\t       \r\n            \t\t\t        scope.imgsrc = 'shared/resources/images/user_default_BIG.PNG';\r\n            \t\t\t        angular.element('.user-profile').removeClass('is-profile-pic');\r\n            \t\t\t            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;            \t\t\t        \r\n            \t\t\t    }\r\n            \t\t\t}\r\n            \t\t\telse {\r\n            \t\t\t\tscope.imgsrc = dummySrc;\r\n            \t\t\t\tscope.isDeleted = false;\r\n            \t\t\t\tangular.element('.user-profile').addClass('is-profile-pic');\r\n            \t\t\t\t//console.log(isDeleted)\r\n            \t\t\t}\r\n            \t\t} else {\r\n            \t\t\treturn;\r\n            \t\t}\r\n            \t});\r\n            }\r\n        },\r\n        templateUrl: 'shared/components/directives/profilePic/profilePic.html'\r\n    };\r\n}]);\r\n    })();","angular.module('SMART2').directive('progressMeter', ['$timeout', function ($timeout) {\r\n\treturn {\r\n\t\trestrict: 'EA',\r\n\t\treplace: true,\r\n\t\tscope: {\r\n\t\t\tpercent: \"=?\"\r\n\t\t},\r\n\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\tvar unbindPercent = scope.$watch('percent', function (newVal, oldVal) {\r\n\t\t\t\t//if (newVal) {\r\n\t\t\t\t\tgetMeter();\r\n\t\t\t\t//}\r\n\t\t\t});\r\n\r\n\t\t\tfunction getMeter() {\r\n\t\t\t\tscope.value = parseInt(scope.percent);\r\n\t\t\t\tif (scope.value) {\r\n\t\t\t\t\tscope.c = Math.PI * (25 * 2);\r\n\t\t\t\t\tscope.pct = 156;\r\n\t\t\t\t\tif (scope.value < 0)\r\n\t\t\t\t\t\tscope.value = 0;\r\n\t\t\t\t\tif (scope.value > 100)\r\n\t\t\t\t\t\tscope.value = 100;\r\n\t\t\t\t\t$timeout(function () {\r\n\t\t\t\t\t\tscope.pct = ((100 - scope.value) / 100) * scope.c;\r\n\t\t\t\t\t\tscope.strokeStyle = { \"stroke-dashoffset\": scope.pct }\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\tunbindPercent();\r\n\t\t\t});\r\n\t\t},\r\n\t\ttemplateUrl: 'shared/directives/progressMeter/progressMeterTemplate.html'\r\n\t}\r\n}]);","//div resizer\r\nangular.module('SMART2').directive('isResizable', function () {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            'handle': '@',\r\n            'onresize': '&',\r\n            'onstart': '&',\r\n            'onstop': '&'\r\n        },\r\n        link: function postLink(scope, elem, attrs) {\r\n            elem.resizable({\r\n                handles: scope.handle,\r\n                resize: function (event, ui) {\r\n                    scope.onresize({ event: event, ui: ui })\r\n                },\r\n                start: function (event, ui) {\r\n                    scope.onstart({ event: event, ui: ui });\r\n                }\r\n                 ,\r\n                stop: function (event, ui) {\r\n\r\n                    scope.onstop({ event: event, ui: ui });\r\n                }\r\n            });\r\n\r\n            if (attrs.maxheight != undefined) {\r\n                attrs.$observe('maxheight', function () {\r\n                    elem.resizable(\"option\", \"maxHeight\", attrs.maxheight);\r\n                });\r\n            }\r\n            if (attrs.minheight != undefined) {\r\n                attrs.$observe('minheight', function () {\r\n                    elem.resizable(\"option\", \"minHeight\", attrs.minheight);\r\n                });\r\n\r\n            }\r\n            if (attrs.maxwidth != undefined) {\r\n                attrs.$observe('maxwidth', function () {\r\n                    elem.resizable(\"option\", \"maxWidth\", attrs.maxwidth);\r\n                });\r\n            }\r\n            if (attrs.minwidth != undefined) {\r\n                attrs.$observe('minwidth', function () {\r\n                    elem.resizable(\"option\", \"minWidth\", attrs.minwidth);\r\n                });\r\n\r\n            }\r\n            if (attrs.alsoResizeRevert != undefined) {\r\n                elem.resizable(\"option\", \"alsoResizeReverse\", attrs.alsoResizeRevert);\r\n            }\r\n            if (attrs.alsoResize != undefined) {\r\n                elem.resizable(\"option\", \"alsoResize\", attrs.alsoResizeRevert);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n//window resizer\r\nangular.module('SMART2').directive('smartWindowResizer', ['$window', function ($window) {\r\n    return {\r\n        restrict: 'AE',\r\n        replace:false,\r\n        scope: {\r\n            'pageHeight': '@'\r\n        },\r\n        link: function postLink(scope, elem, attrs) {\r\n            \r\n            scope.pageHeight = ($window.innerHeight - 114) + 'px';\r\n            elem.css('height', scope.pageHeight);\r\n\r\n            angular.element($window).bind('resize', function (e) {\r\n                if (scope.fixedSubHeader) {\r\n                    scope.pageHeight = ($window.innerHeight - 50) + 'px';\r\n                }\r\n                else {\r\n                    scope.pageHeight = ($window.innerHeight - 114) + 'px';\r\n                }\r\n\r\n                scope.$apply();\r\n                console.log(scope.pageHeight);\r\n                elem.css('height', scope.pageHeight);\r\n            });\r\n\r\n        }\r\n    };\r\n}]);","angular.module('SMART2').directive('scrollContent', ['$window', '$filter', '$rootScope', 'scrollPosition', function ($window, $filter, $rootScope, scrollPosition) {\r\n\treturn {\r\n\t\trestrict: 'A',\r\n\t\tscope: true,\r\n\t\tlink: function ($scope, elem, $attrs) {\r\n\t\t\t$rootScope.$on('$locationChangeSuccess', function() {\r\n\t\t\t\tif (scrollPosition.getEnableScroll() == true) {\r\n\t\t\t\t\tvar foundItem = $filter('filter')(scrollPosition.get(), { 'currentUrl': $window.location.hash }, true)[0];\r\n\t\t\t\t\tif(foundItem)\r\n\t\t\t\t\t\tscrollPosition.performScroll(scrollPosition.get()[scrollPosition.get().indexOf(foundItem)].scroll, 500);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tangular.element($window).bind('scroll', function (e) {\r\n\t\t\t\tvar windowScrollTop = this.scrollY || this.pageYOffset;\r\n\t\t\t\tif (windowScrollTop > 0)\r\n\t\t\t\tscrollPosition.set(windowScrollTop, $window.location.hash);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}]);","  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Sliding-menu\n   * @description This directive is useful for creating a sliding menu.\n   * \n   * @attr {Number} right\n   *    Menu's right position\n   * @attr {Number} top\n   *    Menu's top position\n   * @attr {Boolean} show\n   *    Sliding menu will toggle as soon as value of this attribute changes\n   * @attr {Boolean} modify-parent-style\n   *    This attribute is useful when parent does not need to animated. For e.g. Default behaviour is when 'show' is set to true, \n   *    parent element gets resized depending upon the width of sliding-menu.\n   * @attr {Boolean} detach-default-class\n   *    If this attribute is set to true, default class will not be applied to directive's template\n   * @attr {String} include-template\n   *    Template to be used\n   * @attr {Object} tabData\n   *    used for two-way communication based on this property\n   *\n   * @example\n   Usage:\n   <smart-sliding-menu>\n        //  Contents will go here\n   </smart-sliding-menu>\n   */\n\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartSlidingMenu', ['RuleEngine', '$timeout', '$compile', '$translate', '$rootScope', function (RuleEngine, $timeout, $compile, $translate, $rootScope) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            transclude: true,\n            scope: {\r\n                right: '@',\n                top: '@',\n                show: '=',\n                detachDefaultClass: '@',\n                includeTemplate: '@',\n                model: '@',\n                modifyParentStyle: '@',\r\n                tabData: '='\r\n            },\n            link: function (scope, $element, $attrs, controller) {\r\n                scope.getModel = function () {\r\n                    return JSON.parse(scope.model);\r\n                };\n                scope.logoutSession = function () {\r\n                    requestClicked.navCircle(\"request\", '#', null);\r\n                };\n                if (scope.detachDefaultClass) {\r\n                    if (scope.detachDefaultClass.toLowerCase() === \"true\") {\r\n                    } else {\r\n                        $element.addClass('secondary-navigation white');\r\n                    }\r\n                } else {\r\n                    $element.addClass('secondary-navigation white');\r\n                }\n\n                scope.slidingMenuId = 'sliding-menu-' + new Date().getTime();\n                scope.rightPos = scope.right ? scope.right : 0;\n                scope.leftPos = window.innerWidth - scope.rightPos;\n\n                scope.$watch('show', function (newValue, oldValue) {\r\n                    if (newValue != undefined || newValue != null) {\r\n                        if (newValue) {\r\n                            if (scope.modifyParentStyle) {\r\n                                if (scope.modifyParentStyle.toLowerCase() !== 'false') {\r\n                                    $element.parent().css({\r\n                                        width: 'calc(100% - ' + $element.outerWidth(true) + 'px)'\r\n                                    });\r\n                                }\r\n                            }\n                            $element.css({\r\n                                transform: 'translateX(-' + ($element.outerWidth(true) - scope.rightPos) + 'px)'\r\n                            });\r\n                            $('body').addClass('is-overflowHidden');\r\n                        }\n                        else {\r\n                            if (scope.modifyParentStyle) {\r\n                                if (scope.modifyParentStyle.toLowerCase() !== 'false') {\r\n                                    $element.parent().css({\r\n                                        width: 'calc(100% - ' + scope.rightPos + 'px)'\r\n                                    });\r\n                                }\r\n                            }\n                            $element.css({\r\n                                transform: 'translateX(0px)'\r\n                            });\r\n                            $('body').removeClass('is-overflowHidden');\r\n                        }\r\n                    }\r\n                });\r\n            },\n            templateUrl: 'shared/directives/slidingMenu/slidingMenuTemplate.html'\r\n        };\r\n    }]);\r\n})();","\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartAccordion', ['$timeout','$parse','$rootScope', function ($timeout,$parse,$rootScope) {\r\n        return {\r\n            restrict: 'EA',\r\n            transclude: true,\r\n            replace: true,\r\n            scope: true,\r\n            link: function (scope, elem, attr) {\r\n                var accordian = {\r\n                    target: elem.find('.accordion-header'),\r\n                    content: elem.find('.accordion-content')\r\n                }, onChange = $parse(attr.onChange);\r\n\r\n                accordian.target.data('isOpen', false);\r\n                accordian.content.hide(0).slideUp(0);\r\n\r\n                attr.$observe('show', function (a, b) {\r\n                    showHideAccordian.call(accordian.target, a == 'true' ? true : false);\r\n                });\r\n\r\n                accordian.target.click(function () {\r\n                    showHideAccordian.call(this, !$(this).data('isOpen'));\r\n                    accEvents();\r\n                    scope.$digest();\r\n                });\r\n                function accEvents() {\r\n                    onChange(scope, {\r\n                        e: {\r\n                            isOpen: accordian.target.data('isOpen')\r\n                        }\r\n                    });\r\n                   \r\n                }\r\n                function showHideAccordian(val) {\r\n                    var _this = $(this),\r\n                        _isOpen = _this.data(\"isOpen\");\r\n                    if (val && !_isOpen) {\r\n                        _this.data(\"isOpen\", true);\r\n                        accordian.content.slideDown();\r\n                    } else if (!val && _isOpen) {\r\n                        _this.data(\"isOpen\", false);\r\n                        accordian.content.slideUp();\r\n                    };\r\n                };\r\n            },\r\n            template: \"<div class='smart-accordion-container' ng-transclude></div>\"\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartAccumulator', ['$timeout', function ($timeout) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\tscope: {\r\n\t\t\t\tngModel: '=?',\r\n\t\t\t\toptions: '=',\r\n\t\t\t\tisSearch: '=',\r\n\t\t\t\tleftLoader: '=',\r\n\t\t\t\trightLoader: '=',\r\n\t\t\t\tmodelCount: '=?',\r\n\t\t\t\toptionCount: '=?',\r\n\t\t\t\tcolumnMappingError: '=',\r\n\t\t\t\tselectionCallback: '&',\r\n\t\t\t\tsearchCallback: '&',\r\n\t\t\t\tmaxLimit: '=',\r\n\t\t\t\tscrollEndRightCallback: '&',\r\n\t\t\t\tscrollEndLeftCallback: '&'\r\n                },\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\t\t\t    scope.label = attrs.label;\r\n\t\t\t    scope.optionCount = angular.isDefined(scope.optionCount) ? scope.optionCount : true;\r\n\t\t\t    scope.modelCount = angular.isDefined(scope.modelCount) ? scope.modelCount : true;\r\n\t\t\t    scope.iconInfo = scope.$eval(attrs.iconInfo);\r\n\t\t\t\tscope.accumulatorHeight = attrs.height + 'px';\r\n\t\t\t\tscope.accumulatorLeftScrollHeight = (attrs.height - 48) + 'px';\r\n\t\t\t    scope.loaderFlag = {\r\n\t\t\t\t    plain: true,\r\n\t\t\t\t    center: true,\r\n\t\t\t\t    message:\"\",\r\n\t\t\t\t    top:'50',\r\n                    left:'131'\r\n\t\t\t\t};\r\n\t\t\t\t//if (scope.isSearch) {\r\n\t\t\t\t//\tscope.accumulatorLeftScrollHeight = (attrs.height - 48) + 'px';            \t\t\r\n\t\t\t\t//}           \t\r\n\t\t\t\tscope.focusAccumulatorSearch = false;\r\n\t\t\t\tscope.isAccumulatorSearchActive = false;\r\n\t\t\t\tscope.showAccumulatorSearch = false;\r\n\t\t\t\tscope.accumulatorSearchModel = \"\";\r\n\t\t\t\tscope.showAccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isAccumulatorSearchActive = true;\r\n\t\t\t\t\tscope.focusAccumulatorSearch = true;\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t    $(\"#searchLeftTextbox\").find(\"input\").focus();\r\n\t\t\t\t}, 500);\r\n\t\t\t\t\t//scope.showMe = true;\r\n\t\t\t\t\tscope.hideAccumulatorSearchClose = true;\r\n\t\t\t\t}\r\n\t\t\t\tscope.hideAcccumulatorSearch = function () {\r\n\t\t\t\t    scope.leftCheckedCount = 0;\r\n\t\t\t\t\tif (scope.accumulatorSearchModel != \"\") {\r\n\t\t\t\t\t    scope.accumulatorSearchModel = \"\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t    scope.isAccumulatorSearchActive = false;\r\n\t\t\t\t\t    scope.focusAccumulatorSearch = false;\r\n\t\t\t\t\t    scope.hideAccumulatorSearchClose = false;\r\n\t\t\t\t\t    $(\"#accumulatorLeftShowSearch\").focus();\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($.isFunction(scope.searchCallback)) {\r\n\t\t\t\t\t    scope.searchCallback({ $data: { text: scope.accumulatorSearchModel, type: \"close\" } });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t    // Right side Search\r\n\t\t\t\tscope.smartScrollLeftEnd = function () {\r\n\t\t\t\t    if ($.isFunction(scope.scrollEndLeftCallback)) {\r\n\t\t\t\t        scope.scrollEndLeftCallback();\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.smartScrollRightEnd = function () {\r\n\t\t\t\t    if ($.isFunction(scope.scrollEndRightCallback)) {\r\n\t\t\t\t        scope.scrollEndRightCallback();\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.focusRightAccumulatorSearch = false;\r\n\t\t\t\tscope.isRightAccumulatorSearchActive = false;\r\n\t\t\t\tscope.showRightAccumulatorSearch = false;\r\n\t\t\t\tscope.showRightAccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isRightAccumulatorSearchActive = true;\r\n\t\t\t\t\tscope.focusRightAccumulatorSearch = true;\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t    $(\"#searchRightTextbox\").find(\"input\").focus();\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t\t//scope.showMe = true;\r\n\t\t\t\t\tscope.hideRightAccumulatorSearchClose = true;\r\n\t\t\t\t}\r\n\t\t\t\tscope.hideRightAcccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isRightAccumulatorSearchActive = false;\r\n\t\t\t\t\tscope.focusRightAccumulatorSearch = false;\r\n\t\t\t\t\tscope.hideRightAccumulatorSearchClose = false;\r\n\t\t\t\t\t$(\"#accumulatorRightShowSearch\").focus();\r\n\r\n\t\t\t\t}\r\n\t\t\t\tscope.searchTextKeyUpFn = function (e) {\r\n\t\t\t\t    if ($.isFunction(scope.searchCallback)) {\r\n\t\t\t\t        scope.searchCallback({ $data: { text: e.target.value, type: \"textfield\", \"e\": e } });\r\n\t\t\t\t    }\r\n\t\t\t\t    scope.leftCheckedCount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\tscope.leftCheckedCount = 0;\r\n\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\tscope.leftBoxListCheck = function (arg) {\r\n\t\t\t\t    if (arg.isChecked)\r\n\t\t\t\t        scope.leftCheckedCount++;\r\n\t\t\t\t    else\r\n\t\t\t\t        scope.leftCheckedCount--;\r\n\r\n\t\t\t\t    for (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t        if (((scope.leftCheckedCount + scope.ngModel.length >= scope.maxLimit) && !scope.options[i].isChecked) || (scope.maxLimit == scope.leftCheckedCount && !scope.options[i].isChecked)) {\r\n\t\t\t\t            scope.options[i].isDisabled = true;\r\n\t\t\t\t        } else {\r\n\t\t\t\t            if (scope.ngModel.length >= scope.maxLimit && scope.options[i].$$hashKey == arg.$$hashKey)\r\n\t\t\t\t                scope.options[i].isChecked = false;\r\n\t\t\t\t                 scope.options[i].isDisabled = false;\r\n\t\t\t\t        }\r\n\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\tscope.rightBoxListCheck = function () {\r\n\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\tfor (var i = 0; i < scope.ngModel.length; i++) {\r\n\t\t\t\t\t\tif (!scope.ngModel[i].isDisabled) {\r\n\t\t\t\t\t\t\tif (scope.ngModel[i].isChecked) {\r\n\t\t\t\t\t\t\t\tscope.rightCheckedCount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            function generateKey(obj) {\r\n\t\t\t\t\tvar getProperty = \"\";\r\n\t\t\t\t\tvar getKey = \"\";\r\n\t\t\t\t\tvar addedKeys = scope.$eval(attrs.addKeys);\r\n\t\t\t\t\tfor (var i = 0; i < addedKeys.length; i++) {\r\n\t\t\t\t\t\tgetProperty = addedKeys[i];\r\n\t\t\t\t\t\tgetKey = getKey + \" \" + obj[getProperty];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn getKey;\r\n\t\t\t\t}\r\n\t\t\t\tscope.$watch('options', function (newOptions) {\r\n\t\t\t\t\tscope.options = newOptions;\r\n\t\t\t\t\tfor (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t\t\tif (scope.options[i].isGroup) {\r\n\t\t\t\t\t\t\tfor (var j = 0; j < scope.options[i].group.length; j++) {\r\n\t\t\t\t\t\t\t\tscope.options[i].group[j].optionKey = generateKey(scope.options[i].group[j]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tscope.options[i].optionKey = generateKey(scope.options[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true);\r\n\t\t\t\t\r\n\t\t\t\t// move the selected item to the right\r\n\t\t\t\tscope.moveRight = function (accData) {\r\n\t\t\t\t\tvar selectedOptions = [];\r\n\t\t\t\t\tif (scope.leftCheckedCount > 0) {\r\n\t\t\t\t\t\tfor (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t\t\t\tif (scope.options[i].isChecked) {\r\n\t\t\t\t\t\t\t\tif (scope.options[i].isGroup) {\r\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < scope.options[i].group.length; j++) {\r\n\t\t\t\t\t\t\t\t\t\tscope.ngModel.push(scope.options[i].group[j]);\r\n\t\t\t\t\t\t\t\t\t\tscope.options[i].group[j].isChecked = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tscope.options[i].isChecked = true;\r\n\t\t\t\t\t\t\t\t\tselectedOptions.push(scope.options[i]);\r\n\t\t\t\t\t\t\t\t\tscope.ngModel.push(scope.options[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// get the add objects\r\n\t\t\t\t\t\t\t\t//scope.addscope.push(scope.leftBoxList[i]);\r\n\t\t\t\t\t\t\t\tvar index = scope.options.indexOf(scope.options[i]);\r\n\t\t\t\t\t\t\t\tscope.options.splice(index, 1);\r\n\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($.isFunction(scope.selectionCallback)) {\r\n\t\t\t\t\t\t\tscope.selectionCallback({ e: selectedOptions, direction: 'LTR' });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.rightBoxListCheck();\r\n\t\t\t\t\tscope.leftCheckedCount = 0;\r\n\t\t\t\t    //scope.leftSelectAll = false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// move the selected item to the left\r\n\t\t\t\tvar selectedOptions = [];\r\n\t\t\t\tscope.moveLeft = function (accData) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (scope.rightCheckedCount > 0) {\r\n\t\t\t\t\t\tfor (var i = 0; i < scope.ngModel.length; i++) {\r\n\t\t\t\t\t\t\tif (!scope.ngModel[i].isDisabled) {\r\n\t\t\t\t\t\t\t\tif (scope.ngModel[i].isChecked) {\r\n\r\n\t\t\t\t\t\t\t\t\tscope.ngModel[i].isChecked = false;\r\n\t\t\t\t\t\t\t\t\tscope.options.push(scope.ngModel[i]);\r\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < scope.options.length; j++) {\r\n\t\t\t\t\t\t\t\t\t    scope.options[j].isDisabled = false;\r\n\t\t\t\t\t\t\t\t\t    scope.rightCheckedCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tselectedOptions.push(scope.ngModel[i]);\r\n\r\n\t\t\t\t\t\t\t\t\t// get the remove objects\r\n\t\t\t\t\t\t\t\t\t//scope.removescope.push(scope.rightBoxList[i]);\r\n\t\t\t\t\t\t\t\t\tvar index = scope.ngModel.indexOf(scope.ngModel[i]);\r\n\t\t\t\t\t\t\t\t\tscope.ngModel.splice(index, 1);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($.isFunction(scope.selectionCallback)) {\r\n\t\t\t\t\t\t\tscope.selectionCallback({ e: selectedOptions, direction: 'RTL' });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\t//scope.rightSelectAll = false;\r\n\t\t\t\t};\r\n\t\t\t\tscope.$watch('ngModel', function (newModel) {\r\n\t\t\t\t    scope.accumulatorSearchModel = \"\";\r\n\t\t\t\t    scope.accumulatorRightSearchModel = \"\";\r\n\t\t\t\t\tscope.ngModel = newModel;\r\n\t\t\t\t\tif (scope.ngModel.length <= 0) {\r\n\t\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tscope.$watch('rightLoader', function (rightLoaderUpdate) {\r\n\t\t\t\t    scope.rightLoader = rightLoaderUpdate;\r\n\t\t\t\t});\r\n\t\t\t\tscope.$watch('leftLoader', function (leftLoaderUpdate) {\r\n\t\t\t\t    scope.leftLoader = leftLoaderUpdate;\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/smartAccumulator/smartAccumulatorTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartCarousel', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                \"apiObj\": \"=\",\r\n                \"carouselArr\": \"=\",\r\n                \"arrowClick\": \"&\",\r\n                \"getItem\": \"&\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var margin = 0;\r\n                var marginToChange = \"margin-left\";\r\n                var dimensionToChange = \"width\";\r\n                var textAlign = \"left\";\r\n                var stepSize = 94;\r\n\r\n                scope.scrollBarClass = \"scrollBarClass \" + scope.carouselArr.classes;\r\n                scope.arrowClass = \"icon iconMedium reqNavArrow \" + scope.carouselArr.arrow;\r\n\r\n                if (scope.carouselArr.type === \"horizontal\" && scope.carouselArr.id === \"leftBar\") {\r\n                    textAlign = \"right\";\r\n                }\r\n\r\n                if (scope.carouselArr.type == \"vertical\") {\r\n                    marginToChange = \"margin-top\";\r\n                    dimensionToChange = \"height\";\r\n                    textAlign = \"top\";\r\n                    stepSize = 94;\r\n                }\r\n\r\n                scope.internalAPIObj = scope.apiObj || {};\r\n                scope.internalAPIObj.arrowClick = function (item) {\r\n                    scope.arrowClick(scope, {\r\n                        e: item\r\n                    });\r\n                };\r\n\r\n                scope.getClickedItem = function (item) {\r\n                    scope.getItem({ e: item });\r\n                }\r\n                scope.animate = false;\r\n\r\n                scope.internalAPIObj.resetUI = function (availableLength, addAnimation) {\r\n                    var collectionEle = angular.element(element.children()[1]);\r\n\r\n                    var length = scope.carouselArr.items.length * stepSize;\r\n\r\n                    scope.animate = true;\r\n\r\n                    if (dimensionToChange == \"height\") {\r\n                        collectionEle.css(\"height\", availableLength);\r\n                    } else {\r\n                        collectionEle.css(\"width\", \"100%\");\r\n                    }\r\n\r\n                    if ((availableLength) <= length) {\r\n\r\n                        if (scope.carouselArr.id === \"topBar\") {\r\n                            collectionEle.removeClass('topBarOverflow').addClass('topBarOverflowHidden');\r\n                        }\r\n                        scope.carouselArr.showArrow = true;\r\n                    } else {\r\n\r\n                        if (scope.carouselArr.id === \"topBar\") {\r\n                            collectionEle.removeClass('topBarOverflowHidden').addClass('topBarOverflow');\r\n                        }\r\n                        scope.carouselArr.showArrow = false;\r\n                    }\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/smartCarousel/smartCarousel.html'\r\n        };\r\n    }]);\r\n})();\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tangular.module('SMART2').directive('countdown', ['$interval', function ($interval) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\ttransclude: true,\r\n\t\t\tscope: {\r\n\t\t\t    date: '@',\r\n                timeoutCallback: '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tvar from = new Date(attrs.date);\r\n\r\n\t\t\t\tfunction timer(t) {\r\n\t\t\t\t\tvar days = Math.floor(t / 86400);\r\n\t\t\t\t\tt -= days * 86400;\r\n\t\t\t\t\tvar hours = Math.floor(t / 3600) % 24;\r\n\t\t\t\t\tt -= hours * 3600;\r\n\t\t\t\t\tvar minutes = Math.floor(t / 60) % 60;\r\n\t\t\t\t\tt -= minutes * 60;\r\n\t\t\t\t\tvar seconds = t % 60;\r\n\t\t\t\t\tif (!days && !hours && !minutes && !seconds) {\r\n\t\t\t\t\t\tif (angular.isDefined(timerObj)) {\r\n\t\t\t\t\t\t\t$interval.cancel(timerObj);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (attrs.timeoutCallback && angular.isFunction(scope.timeoutCallback)) {\r\n\t\t\t\t\t\t    scope.timeoutCallback();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn days + 'd ' + hours + 'h ' + minutes + 'm ' + seconds + 's';\r\n\t\t\t\t}\r\n\t\t\t\tvar timerObj = $interval(function () {\r\n\t\t\t\t\tvar diff = Math.floor((from.getTime() - new Date().getTime()) / 1000);\r\n\t\t\t\t\t$(element).text(timer(diff));\r\n\t\t\t\t}, 1000)\r\n\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartDocSlider', ['$parse', '$focusOnField', function ($parse, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n             scope: true,\r\n            link: function (scope, element, attrs) {\r\n\r\n                var onHide = $parse(attrs.onHide);\r\n                scope.commonSelectedOptionInside = { title: '' };\r\n\r\n                attrs.$observe(\"slideObj\", function (value) {\r\n                    if (attrs.slideObj) {\r\n\r\n                        var slideObj = JSON.parse(attrs.slideObj);\r\n                        scope.src = slideObj.src;\r\n                        scope.list = slideObj.list;\r\n                        scope.index = slideObj.index;\r\n                        scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                        scope.updateTheIndexInController = function (obj) {\r\n                            scope.index = scope.list.indexOf(obj);\r\n                            scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                            scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                            var listLength = scope.list.length;\r\n                            if (scope.index == 0) {\r\n                                scope.prevIndex = listLength - 1;\r\n                            }\r\n                            else if (scope.index == listLength - 1) {\r\n                                scope.nextIndex = 0;\r\n                            }\r\n\r\n                        }\r\n\r\n                        scope.nextIndex = angular.copy(scope.index);\r\n                        scope.prevIndex = angular.copy(scope.index);\r\n\r\n                        var listLength = scope.list.length;\r\n\r\n                        if (scope.index == 0) {\r\n                            scope.nextIndex++;\r\n                            scope.prevIndex = listLength - 1;\r\n                        }\r\n                        else if (scope.index == listLength - 1) {\r\n                            scope.nextIndex = 0;\r\n                            scope.prevIndex--;\r\n                        }\r\n                        else if (scope.index < listLength - 1) {\r\n                            scope.nextIndex++;\r\n                            scope.prevIndex--;\r\n                        }\r\n                    }\r\n                });\r\n                scope.tabbingFocus = false;\r\n                //Need to change the code\r\n                scope.$watch(attrs.ngShow, function (value) {\r\n                    if (value) {\r\n                        angular.element('body').css('overflow', 'hidden');\r\n                        angular.element(document.activeElement).addClass(\"sliderDocTrigger\");\r\n                        setTimeout(function () { firstFieldFocused();}, 500);\r\n                      \r\n                    } else {\r\n                        angular.element('body').css('overflow', '');\r\n                        angular.element('.sliderDocTrigger').focus().removeClass('sliderDocTrigger');\r\n                        scope.tabbingFocus = false;\r\n                    }\r\n                });\r\n\r\n                scope.next = function () {\r\n                    scope.tabbingFocus = false;\r\n                    var listLength = scope.list.length;\r\n                    var modal = angular.element('.slide-view-modal');\r\n\r\n                    modal.css('left', '-50%');\r\n\r\n                    if (scope.index < listLength - 1)\r\n                        scope.index++;\r\n                    else if (scope.index == listLength - 1)\r\n                        scope.index = 0;\r\n\r\n                    if (scope.index == 0) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = listLength - 1;\r\n                    }\r\n                    else if (scope.index == listLength - 1) {\r\n                        scope.nextIndex = 0;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    else if (scope.index < listLength - 1) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    setTimeout(function () {\r\n                        modal.css('transition', 'none');\r\n                        modal.css('display', 'none');\r\n                        modal.css('left', '150%');\r\n                        modal.css('display', 'block');\r\n                    }, 350);\r\n                    setTimeout(function () {\r\n                        modal.css('transition', '0.5s ease-in-out');\r\n                        modal.css('left', '50%');\r\n                        firstFieldFocused();\r\n                    }, 370);\r\n                    scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                 \r\n                }\r\n\r\n                scope.prev = function () {\r\n                    scope.tabbingFocus = false;\r\n                    var listLength = scope.list.length;\r\n                    var modal = angular.element('.slide-view-modal');\r\n\r\n                    modal.css('left', '150%');\r\n\r\n                    if (scope.index > 0)\r\n                        scope.index--;\r\n                    else if (scope.index == 0)\r\n                        scope.index = listLength - 1;\r\n\r\n                    if (scope.index == 0) {\r\n                        scope.prevIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = listLength - 1;\r\n                    }\r\n                    else if (scope.index == listLength - 1) {\r\n                        scope.prevIndex = 0;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    else if (scope.index < listLength - 1) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    setTimeout(function () {\r\n                        modal.css('transition', 'none');\r\n                        modal.css('display', 'none');\r\n                        modal.css('left', '-50%');\r\n                        modal.css('display', 'block');\r\n                    }, 350);\r\n                    setTimeout(function () {\r\n                        modal.css('transition', '0.7s ease-in-out');\r\n                        modal.css('left', '50%');\r\n                        firstFieldFocused();\r\n                    \r\n                    }, 370);\r\n                    scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                   \r\n                };\r\n\r\n\r\n                scope.close = function () {\r\n\r\n                    if (angular.isFunction(onHide)) {\r\n                        //scope.$apply(function () {\r\n                        onHide(scope, { e: \"\" });\r\n                        //});\r\n                    };\r\n                    scope.tabbingFocus = false;\r\n                };\r\n\r\n                var firstFieldFocused = function () {\r\n                    scope.tabbingFocus = true;\r\n                    var $fistField = angular.element('.docSlider-content').find(\"a, input, button, textarea\").first();\r\n                    $focusOnField($fistField);\r\n                };\r\n\r\n                scope.funcOnKeyDown = function (e) {\r\n                    if (e.keyCode == 27) {\r\n                        scope.close();\r\n                    } else if (e.keyCode == 37) {\r\n                        scope.prev()\r\n                    } else if (e.keyCode == 39) {\r\n                        scope.next()\r\n                    }\r\n                };\r\n              \r\n            },\r\n            templateUrl: 'shared/directives/smartDocSlider/smartDocSlider.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('httpLoaderInterceptor', ['$rootScope', '$timeout', function ($rootScope, $timeout) {\r\n\r\n        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n            $rootScope.pageLoaderFlagController = true;\r\n        });\r\n\r\n        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\r\n            //$timeout(function () {\r\n                $rootScope.pageLoaderFlagController = false;\r\n            //}, 2000);\r\n        });\r\n\r\n        var requestCount = 0;\r\n        function startRequest(config) {\r\n            if (!requestCount) {\r\n                //$rootScope.pageLoaderFlagController = true;\r\n            }\r\n            requestCount++;\r\n            return config;\r\n        }\r\n        function endRequest(arg) {\r\n            if (!requestCount)\r\n                return;\r\n            requestCount--;\r\n            if (!requestCount) {\r\n                //$rootScope.pageLoaderFlagController = false;\r\n            }\r\n            return arg;\r\n        }\r\n        return {\r\n            'request': startRequest,\r\n            'requestError': endRequest,\r\n            'response': endRequest,\r\n            'responseError': endRequest\r\n        };\r\n    }]);\r\n\r\n    angular.module('SMART2').config(['$httpProvider', function ($httpProvider) {\r\n        $httpProvider.interceptors.push('httpLoaderInterceptor');\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartGlobalLoader', ['$timeout', '$translate', function ($timeout, $translate) {\r\n        return {\r\n            restrict: 'AE',\r\n            replace: true,\r\n            scope: {\r\n                isFixed: '=?',\r\n                config: '=?',\r\n                onCancel: \"&\",\r\n            },\r\n            link: function (scope, element, attrs) {\r\n            \tvar message = $translate.instant(\"loadingMsg\");\r\n            \t\r\n                scope.conf = angular.extend({\r\n                    message: message,\r\n                    center: false,\r\n                    plain: false,\r\n                    bgwhite: false,\r\n                    top: undefined,\r\n                    left: undefined\r\n                }, scope.config);\r\n                scope.messageArray = scope.conf.message.split(\"\\n\");\r\n                //Count left\r\n                $timeout(function () {\r\n                    var widthCount = angular.element(element[0].querySelector('.relative-loader-container')).width();\r\n                    var heightCount = angular.element(element[0].querySelector('.relative-loader-container')).height();\r\n                    scope.leftTopCount = {\r\n                        left: (scope.conf.left == undefined || scope.conf.left == null || scope.conf.left == '') ? \"calc(50% - \" + widthCount / 2 + \"px)\" : scope.conf.left + \"px\",\r\n                        top: (scope.conf.top == undefined || scope.conf.top == null || scope.conf.top == '') ? \"calc(50% - \" + heightCount / 2 + \"px)\" : scope.conf.top+\"px\"\r\n                    };\r\n                });\r\n\t\t\t\t\n                if (angular.isDefined(attrs.onCancel)) {\r\n                \tscope.cancelBtn = { title: $translate.instant(\"cancelBtn\") };\r\n                \tscope.conf.isCancel = true;\n                }\n\n                scope.cancelCallback = function (e) {\r\n                \tscope.onCancel({ $event: e });\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/smartGlobalLoader/smartGlobalLoader.html'\r\n        };\r\n    }]);\r\n})();","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name SmartHierarchy\r\n * @description This directive is useful for creating hierarchical structure.\r\n * \r\n * @attr {Object} config\r\n *    Config object is expected to decide the behaviour of the component.\r\n * @attr {Function} callback\r\n *    Callback function when selections are done in component\r\n * \r\n * @example\r\nController : \r\n    config :\r\n     $scope.treeComponentConfig = {\r\n                selectedNodes: \"\", // Coma seperated codes string given to component for pre selection, \r\n                \t\t\t\t   // so the default selections can be shown selected when the component \r\n                \t\t\t\t   // in initialized.\r\n                isRadio: false, // Boolean values to toggle between checkBox & radioButton\r\n                getHierarchyOnSelection: true, // If set to true , selection hierarchy\r\n                                               // (uptil the relevent parent) also will be recieved \r\n                                               // in selection callback.\r\n                isLazyLoad: true, // If set to true, data would be fetched from the server on demand \r\n                                  // (lazyLoading on scroll & node expansion)\r\n                data: null, // Custom data can also be passed to component, representation would be in hierarchical manner.\r\n                disableLevelSelection: '', // comma seperated string values of levels to be shown disabled eg. \"1,2,3\".\r\n                title: 'Category', // Title of the component.\r\n                getSelections: false, // On setting it true, it will call the callback function \r\n                                      // provided to the component with seleted values in the ouput.\r\n                clearCache: false, // On setting it true, it will clear the Java script heap \r\n                                   // runtime memory which will reduce the memory foot print of the web page.\r\n                height: '328px', // Height can be set to the component.\r\n                isSearchEnabled : true, // Bollean value to toggle the visibility of search bar.\r\n                requestParameter: { // Request parameter is expected to fetch the data from the server. \r\n                    navigationContext: \"PAS\",\r\n                    userExecutionContext: '{\"ClientName\":\"abc,....}',\r\n                    documentCode: null,\r\n                    contactCode: null,\r\n                }\r\n            };\r\n    callback :\r\n         $scope.treeComponentCallback = function (e) {\r\n                console.log(e);\r\n\r\n                // Un comment the below logic to see admin use case.\r\n                // TODO : getHierarchyOnSelection:true (in tree config)\r\n\r\n                // var obj = { 'PASList': [] };\r\n                // var levelData = _.groupBy(_.flatten(e.selectionHierarchy), \"Level\");\r\n                // _.each(levelData, function (data, key) {\r\n                    // _.each(data, function (n) {\r\n                        // n['selection'] = \"0\";\r\n                    // });\r\n                    // obj['PASList'].push({\r\n                        // \"Level\": key,\r\n                        // \"PASDetails\": data\r\n                    // });\r\n                // });\r\n                // $scope.treeComponentConfig.isRadio = true;\r\n                // $scope.treeComponentConfig.data = obj;\r\n                // $scope.treeComponentConfig.selectedNodes = e.selections[0]['ID'].toString();\r\n         }\r\n  Usage:\r\n      <smart-hierarchy-component config=\"treeComponentConfig\" callback=\"treeComponentCallback\"></smart-hierarchy-component>\r\n      */\r\n(function (angular) {\r\n    'use strict';\r\n    var hierarchyCounter = 0;\r\n    angular.module('smartHierarchyComponent', [])\r\n    .directive('smartHierarchyComponent', ['$timeout', 'RESTApi', '$q', '$rootScope', 'APPCONSTANTS', '$translate',\r\n      function ($timeout, RESTApi, $q, $rootScope, APPCONSTANTS, $translate) {\r\n          return {\r\n              restrict: 'E',\r\n              replace: true,\r\n              scope: {\r\n                  config: '=',\r\n                  callback: '&'\r\n              },\r\n              link: function (scope, element, attrs) {\r\n                  /*config for the directive*/\r\n                  scope.hierarchyCounter = hierarchyCounter++;\r\n                  scope.treeConfig = scope.config;\r\n                  scope.searchFieldVal = '';\r\n                  scope.cancelTitle = scope.searchFieldVal == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                  scope.checkCondForTemplate = function (a_data) {\r\n                      var boolTemplate = false;\r\n                      if (scope.searchFieldVal.length <= 2 && !scope.treeConfig.isReadOnly) {\r\n                          boolTemplate = true;\r\n                      } else if (scope.searchFieldVal.length <= 2 && scope.treeConfig.isReadOnly && a_data.selection != '0' && !scope.treeConfig.selectAllToggle) {\r\n                          boolTemplate = true;\r\n                      } else if (scope.searchFieldVal.length <= 2 && scope.treeConfig.isReadOnly && scope.treeConfig.selectAllToggle) {\r\n                          boolTemplate = true;\r\n                      }\r\n                      return boolTemplate;\r\n                  }\r\n                  scope.templateCheck2 = function (a_category) {\r\n                      var boolTemplate = false;\r\n                      if (scope.treeConfig.isReadOnly && a_category.selection != '0') {\r\n                          boolTemplate = true;\r\n                      } else if(!scope.treeConfig.isReadOnly) {\r\n                          boolTemplate = true;\r\n                      }\r\n                      return boolTemplate;\r\n                  }\r\n                  scope.secondaryLinkCallback = function () {\r\n                      scope.treeConfig.secondaryLink.callback();\r\n                  }\r\n                  scope.treeConfig.isSelectedOnly = false;\r\n                  scope.noRecordsFound = false;\r\n                  if (!scope.treeConfig.hasOwnProperty('modalButtonShow')) {\r\n                      scope.treeConfig.modalButtonShow = false;\r\n                  }\r\n\r\n                  if (!scope.treeConfig.hasOwnProperty('isMandatory')) {\r\n                      scope.treeConfig.isMandatory = true;\r\n                  }\r\n                  if (!scope.treeConfig.hasOwnProperty('listIcon')) {\r\n                      scope.treeConfig.listIcon = null;\r\n                  }\r\n                  if (!scope.treeConfig.hasOwnProperty('selectAllToggle')) {\r\n                      scope.treeConfig.selectAllToggle = false;\r\n                  }\r\n\r\n\r\n                  var doneCallback = scope.$eval(scope.callback);\r\n\r\n                  scope.config.refreshConfig = function (newData) {\r\n                      scope.treeConfig = newData;\r\n                      resetValue(scope.treeConfig);\r\n\r\n                  }\r\n\r\n                  var resetValue = function (data) {\r\n                      if (scope.treeConfig.isRadio) {\r\n\r\n                          scope.uniqueRadioGroupName = uniqueIDGenerator();\r\n                      }\r\n\r\n                      if (scope.treeConfig.clearCache) {\r\n                          resetDataSourcesAndPromises();\r\n                          scope.isLoading = false;\r\n                          scope.treeConfig.clearCache = false;\r\n                      }\r\n\r\n                      dataRecievedCallPromise;\r\n                      preselectionRecievedPromise;\r\n                      promises = [];\r\n\r\n                      /*Local variables*/\r\n                      navContext = scope.treeConfig.navigationContext;\r\n                      isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                      dataSet;\r\n                      searchBucket = 50;\r\n                      lazyLoadingBucket = 50;\r\n                      maxLevel = 1;\r\n                      lazyLoadOffset;\r\n                      lazyLoadMarker = [];\r\n                      levelKey = 'level';\r\n\r\n                      //levelWiseData = {};\r\n                      parentStringConstant = \"parentString\";\r\n                      parentCodeStringConstant = \"parentCodeString\";\r\n                      preselection;\r\n                      isInitialServiceCalled = false;\r\n                      searchCategories = [];\r\n                      baseLevelExpectNode = [];\r\n\r\n                      nodeExpandingCodeProperty;\r\n                      dataProperty;\r\n                      levelWiseDataProperty;\r\n                      searchProperty;\r\n                      modelProperty;\r\n\r\n                      //scope.totalSelection = 0;\r\n                      //totalID = [];\r\n                      //totalName = [];\r\n\r\n                      selectAllBool = false;\r\n\r\n                      scope.getUserSelectionArray = [];\r\n                      scope.selectionAndCountOptions = false;\r\n\r\n                      scope.treeType = scope.treeConfig.treeType;\r\n\r\n                      scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                      scope.isDisabled = scope.treeConfig.isDisabled;\r\n                      scope.isSingleSelect = scope.treeConfig.isRadio ? scope.treeConfig.isRadio : false;\r\n\r\n\r\n\r\n                      // if(scope.treeConfig.requestParameter)\r\n                      // {\r\n\r\n                      //           //scope.treeConfig.requestParameter = n;\r\n                      //           RESTApi.setDocumentId(scope.treeConfig.requestParameter.documentCode);\r\n                      //           RESTApi.setContactCode(scope.treeConfig.requestParameter.contactCode);\r\n                      //           RESTApi.setUserContext(scope.treeConfig.requestParameter.userExecutionContext);\r\n                      //           RESTApi.setEnvironment(scope.treeConfig.requestParameter.environment);\r\n                      //           RESTApi.setRequestObject(scope.treeConfig.requestParameter.requestObject);\r\n                      //           setKeysAsPerNavigationContext(scope.treeConfig.requestParameter.navigationContext);\r\n                      //           navContext = scope.treeConfig.requestParameter.navigationContext;\r\n\r\n                      //         init();\r\n\r\n                      // }\r\n\r\n                      scope.showSelectAll = scope.treeConfig.showSelectAll;\r\n                      scope.showClearSelection = scope.treeConfig.showClearSelection;\r\n                      scope.showSelectionCount = scope.treeConfig.showSelectionCount;\r\n                      scope.enableLastLevelSelection = scope.treeConfig.enableLastLevelSelection;\r\n\r\n                  };\r\n\r\n\r\n                  /* scope.$watch('config', function (n, o) {\r\n                    if (n) {\r\n                      scope.treeConfig = null;\r\n                      scope.treeConfig = scope.config;\r\n                      clearAllsearch();\r\n                     \r\n                      dataRecievedCallPromise;\r\n                      preselectionRecievedPromise;\r\n                      promises = [];\r\n                     \r\n                      navContext = scope.treeConfig.navigationContext;\r\n                      isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                      dataSet;\r\n                      searchBucket = 50;\r\n                      lazyLoadingBucket = 50;\r\n                      maxLevel = 1;\r\n                      lazyLoadOffset;\r\n                      lazyLoadMarker = [];\r\n                      levelKey = 'level';\r\n                      levelWiseData = {};\r\n                      parentStringConstant = \"parentString\";\r\n                      parentCodeStringConstant = \"parentCodeString\";\r\n                      preselection;\r\n                      isInitialServiceCalled = false;\r\n                      searchCategories = [];\r\n                      baseLevelExpectNode = [];\r\n                      nodeExpandingCodeProperty;\r\n                      dataProperty;\r\n                      levelWiseDataProperty;\r\n                      searchProperty;\r\n                      modelProperty;\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n                      selectAllBool = false;\r\n                      scope.getUserSelectionArray =[];\r\n                      scope.treeType = scope.treeConfig.treeType;\r\n                      scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                      scope.isDisabled = scope.treeConfig.isDisabled;\r\n                    }\r\n                  });*/\r\n\r\n                  function clearAllsearch() {\r\n                      serverSearchVal = \"\";\r\n                      scope.searchResults.length = 0;\r\n                      searchDataYetToBeDisplayed.length = 0;\r\n                      searchWithContainsHitResult.length = 0;\r\n                      scope.searchText = '';\r\n                      scope.searchFieldVal = '';\r\n                  }\r\n\r\n\r\n                  /*scope.$watch('config.clearCache', function (n, o) {\r\n                    if (n) {\r\n                     resetDataSourcesAndPromises();\r\n                     scope.isLoading = false;\r\n                     scope.config.clearCache = false;\r\n                   }\r\n                });*/\r\n\r\n\r\n                  var deregisterConfigSelection = scope.$watch('config.getSelections', function (n, o) {\r\n                      if (n) {\r\n                          getSelections();\r\n                          scope.config.getSelections = false;\r\n                      }\r\n                  });\r\n\r\n\r\n                  var deregReqContactCode = scope.$watch('config.requestParameter.contactCode', function (n, o) {\r\n                      if (n != o) {\r\n                          RESTApi.setContactCode(n);\r\n                          init();\r\n                      }\r\n                  });\r\n                  var deregReqParam = scope.$watch('config.requestParameter', function (n, o) {\r\n                      //if (!scope.treeConfig.data && n) {\r\n                      if (n) {\r\n                          scope.treeConfig.requestParameter = n;\r\n\r\n                          RESTApi.setDocumentId(n.documentCode);\r\n                          RESTApi.setContactCode(n.contactCode);\r\n                          RESTApi.setUserContext(n.userExecutionContext);\r\n                          RESTApi.setEnvironment(APPCONSTANTS.userPreferences.URLs.AppURL);\r\n                          RESTApi.setRequestObject(n.requestObject);\r\n\r\n                          setKeysAsPerNavigationContext(n.navigationContext);\r\n                          navContext = n.navigationContext;\r\n\r\n                          if (n.hasOwnProperty('url')) {\r\n                              RESTApi.setUrl(n.url);\r\n                          }\r\n\r\n                          //request params than it must go in \r\n                          //if (!isInitialServiceCalled)\r\n                          init();\r\n                      }\r\n                      //scope.treeConfig.requestParameter = null;\r\n                  });\r\n                  scope.selectOptions = [{\r\n                      \"code\": 1,\r\n                      \"name\": \"Select All\"\r\n                  }, {\r\n                      \"code\": 0,\r\n                      \"name\": \"Single Select\"\r\n                  }];\r\n\r\n                  scope.selectType = { \"code\": 0, \"name\": \"Single Select\" };\r\n\r\n                  var initSelectallModel = function () {\r\n                      //----SelectAllToggle----//\r\n                      scope.onSelectTypeChange = function (selectType) {\r\n                          scope.selectType = selectType;\r\n\r\n                          if (selectType.code == 1) {\r\n                              scope.clearAllSelection();\r\n                              //scope.treeConfig.isReadOnly = true;\r\n                          }\r\n                      }\r\n                      if (scope.treeConfig.selectType === 1) {\r\n                          scope.clearAllSelection();\r\n                          scope.selectType = { \"code\": 1, \"name\": \"Select All\" };\r\n                      } else {\r\n                          scope.selectType = { \"code\": 0, \"name\": \"Single Select\" };\r\n                      }\r\n                  }\r\n\r\n                  var deregConfigData = scope.$watch('config.data', function (n, o) {\r\n                      if (n) {\r\n                          initSelectallModel();\r\n                          if (scope.config.selectedNodes && scope.selectedData.length > 0) {\r\n                              scope.config.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : !scope.treeConfig.isRadio;\r\n                          } else if (!scope.config.selectedNodes || !scope.config.selectedNodes) {\r\n                              scope.config.isReadOnly = false;\r\n                          }\r\n                          setKeysAsPerNavigationContext(scope.treeConfig.navigationContext);\r\n                          navContext = scope.treeConfig.navigationContext;\r\n                          resetDataSourcesAndPromises(true);\r\n                          createLevelWiseDataSet(_.sortBy(n[dataProperty], 'Level'));\r\n                          dataRecievedCallPromise.resolve();\r\n                          renderLevels();\r\n                      }\r\n                      scope.config.data = null;\r\n                  });\r\n\r\n                  var deregSelectedNodes = scope.$watch('config.selectedNodes', function (n, o) {\r\n                      if (n) {\r\n                          preselection = n.split(',');\r\n                          if (preselection && preselection.length == 0) {\r\n                              scope.treeConfig.isReadOnly = false;\r\n                          }\r\n                          if (preselectionRecievedPromise)\r\n                              preselectionRecievedPromise.resolve();\r\n                      }\r\n                      scope.config.selectedNodes = null;\r\n                  });\r\n\r\n\r\n\r\n                  /*scope.$watch('config.isRadio', function(n, o) {\r\n                    scope.isSingleSelect = n;\r\n                    if (scope.isSingleSelect) {\r\n                     scope.uniqueRadioGroupName = uniqueIDGenerator();\r\n                   }\r\n                   scope.config.isRadio = false;\r\n                 });*/\r\n\r\n\r\n\r\n\r\n\r\n                  var navContext;\r\n                  /*promise*/\r\n                  var dataRecievedCallPromise;\r\n                  var preselectionRecievedPromise;\r\n                  var promises = [];\r\n                  var selectAllBool = false;\r\n                  /*Local variables*/\r\n                  var isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                  var dataSet;\r\n                  var searchBucket = 50;\r\n                  var lazyLoadingBucket = 50;\r\n                  var maxLevel = 1;\r\n                  var lazyLoadOffset;\r\n                  var lazyLoadMarker = [];\r\n                  var levelKey = 'level';\r\n                  var levelWiseData = {};\r\n                  var parentStringConstant = \"parentString\";\r\n                  var parentCodeStringConstant = \"parentCodeString\";\r\n                  var preselection;\r\n                  var isInitialServiceCalled = false;\r\n                  var searchCategories = [];\r\n                  var baseLevelExpectNode = [];\r\n                  var nodeExpandingCodeProperty;\r\n                  var dataProperty;\r\n                  var levelWiseDataProperty;\r\n                  var searchProperty;\r\n                  var modelProperty;\r\n                  var treeTypeObject = \"Generic\";\r\n                  scope.codeProperty = 'ID';\r\n                  scope.titleProperty = 'Name';\r\n                  scope.levelProperty = 'Level';\r\n                  scope.parentProperty = 'ParentID';\r\n                  scope.getUserSelectionArray = [];\r\n                  scope.treeType = \"Generic\";\r\n                  scope.totalSelection = 0;\r\n\r\n                  scope.isReadOnly = false;\r\n                  scope.isDisabled = false;\r\n\r\n                  scope.showSelectAll = false;\r\n                  scope.showClearSelection = false;\r\n                  scope.showSelectionCount = false;\r\n                  scope.enableLastLevelSelection = false;\r\n\r\n\r\n\r\n\r\n                  scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                  scope.isDisabled = scope.treeConfig.isDisabled;\r\n                  scope.isSingleSelect = scope.treeConfig.isRadio;\r\n\r\n                  scope.showSelectAll = scope.treeConfig.showSelectAll;\r\n                  scope.showClearSelection = scope.treeConfig.showClearSelection;\r\n                  scope.showSelectionCount = scope.treeConfig.showSelectionCount;\r\n                  scope.enableLastLevelSelection = scope.treeConfig.enableLastLevelSelection;\r\n\r\n\r\n                  scope.selectionAndCountOptions = false;\r\n\r\n                  scope.closeButton = { title: $translate.instant(\"closeBtn\") };\r\n                  scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                  scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n                  scope.resetButton = { title: $translate.instant(\"resetButton\") };\r\n                  scope.editButton = { title: $translate.instant(\"editButton\") };\r\n                  scope.isPartiallySelected = false;\r\n\r\n                  var totalID = [];\r\n                  var totalName = [];\r\n\r\n                  function setKeysAsPerNavigationContext(mode) {\r\n                      switch (mode) {\r\n                          case 'PAS':\r\n                              nodeExpandingCodeProperty = 'PASCodes';\r\n                              dataProperty = 'PASList';\r\n                              levelWiseDataProperty = 'PASDetails';\r\n                              searchProperty = 'PAS_SearchList';\r\n                              scope.codeProperty = 'ID';\r\n                              scope.titleProperty = 'Name';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentID';\r\n                              modelProperty = 'SelectedPasCodeList';\r\n                              break;\r\n                          case 'REG':\r\n                              nodeExpandingCodeProperty = 'RegionId';\r\n                              levelWiseDataProperty = 'RegionDetails';\r\n                              dataProperty = 'RegionList';\r\n                              searchProperty = 'Region_SearchList';\r\n                              scope.codeProperty = 'ID';\r\n                              scope.titleProperty = 'Name';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentID';\r\n                              modelProperty = 'SelectedRegionList';\r\n                              break;\r\n                          case 'ORG':\r\n                              nodeExpandingCodeProperty = 'EntityDetailCode';\r\n                              levelWiseDataProperty = 'EntityDetails';\r\n                              dataProperty = 'Org_DetailsList';\r\n                              searchProperty = 'Org_SearchList';\r\n                              scope.codeProperty = 'EntityDetailCode';\r\n                              scope.titleProperty = 'EntityDisplayName';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentEntityDetailCode';\r\n                              modelProperty = 'SelectedORGList';\r\n                              break;\r\n                      };\r\n                  };\r\n\r\n                  scope.selectedData = [];\r\n\r\n                  /*Local member fuctions*/\r\n\r\n                  function resetDataSourcesAndPromises(isPromiseInit) {\r\n                      levelWiseData = {};\r\n                      scope.categories = [];\r\n                      lazyLoadMarker = [];\r\n                      scope.isLoading = true;\r\n                      scope.isError = false;\r\n\r\n                      scope.selectedData = [];\r\n                      scope.getUserSelectionArray = [];\r\n\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n\r\n                      if (isPromiseInit) initializePromise(true, true);\r\n                  };\r\n\r\n                  function init() {\r\n                      initSelectallModel();\r\n                      scope.isError = false;\r\n                      scope.noRecordsFound = false;\r\n                      scope.selectionAndCountOptions = false;\r\n                      scope.isPartiallySelected = false;\r\n                      //scope.treeConfig.isReadOnly = typeof scope.config.isReadOnly !== 'undefined' ? scope.config.isReadOnly : false;\r\n                      scope.treeConfig.isReadOnly = function () {\r\n                          var isReadOnly, sn;\r\n                          if (scope.selectedData.length == 0 || scope.config.selectedNodes === null) {\r\n                              isReadOnly = false;\r\n                          } else {\r\n                              isReadOnly = scope.config.isReadOnly\r\n                          }\r\n\r\n                          if (!scope.treeConfig.selectAllToggle) {\r\n                              //.requestParameter.requestObject.selectedNodes\r\n                              sn = scope.treeConfig.requestParameter.requestObject && scope.treeConfig.requestParameter.requestObject.selectedNodes && scope.treeConfig.requestParameter.requestObject.selectedNodes.length;\r\n                              if (sn) {\r\n                                  isReadOnly = true;\r\n                              } else {\r\n                                  isReadOnly = false;\r\n                              }\r\n                          }\r\n\r\n                          return isReadOnly;\r\n                      }();\r\n                      isInitialServiceCalled = true;\r\n                      resetDataSourcesAndPromises(true);\r\n                      RESTApi.getData(navContext,\r\nfunction (response) {\r\n                          var respData = response.data,\r\n                              data = respData.data;\r\n                          isInitialServiceCalled = false;\r\n                          if (response.action == 'success' && (respData && respData.status != 404)) {\r\n                              scope.noRecordsFound = !data[dataProperty] || data[dataProperty].length <= 0;\r\n                              if (!scope.noRecordsFound) {\r\n                                  if (isLazyLoadServerData) {\r\n                                      //setLevelWiseData(response.data.data);\r\n                                      setLevelWiseDataSource(data);\r\n                                  } else {\r\n                                      createLevelWiseDataSet(_.sortBy(data[dataProperty], 'Level'));\r\n                                  }\r\n                                  if (data[modelProperty] && data[modelProperty].length > 0) {\r\n                                      scope.treeConfig.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : true;\r\n                                  }\r\n                                  renderLevels();\r\n\r\n                                  //createSelectedModelIfRecieved(response.data.data.SelectedPasCodeList);\r\n                                  createSelectedModelIfRecieved(data[modelProperty]);\r\n                                  dataRecievedCallPromise.resolve();\r\n\r\n                                  if (scope.treeType == treeTypeObject) {\r\n                                  } else { //working perfect in porject team case\r\n                                      scope.totalSelection = scope.selectedData.length;\r\n                                  }\r\n                              }\r\n                              else {\r\n                                  scope.isLoading = false;\r\n                              }\r\n\r\n                          } else {\r\n                              if (scope.isLoading) scope.isLoading = false;\r\n                              if (!scope.categories.length) scope.isError = true;\r\n                          }\r\n                      }, (isLazyLoadServerData) ? {\r\n                          \"LevelAt\": \"1\",\r\n                          \"PageNumber\": 1,\r\n                          \"PageSize\": lazyLoadingBucket\r\n                      } : {},false, scope.treeType);\r\n                  };\r\n\r\n                  scope.getSelectAllBool = function () {\r\n                      if (scope.categories && scope.categories.length > 0) {\r\n                          var selectedNodes = _.filter(scope.categories, function (node) {\r\n                              return (node.selection == \"1\" || node.disabled == true)\r\n                          });\r\n                          if (scope.categories.length > 0 && selectedNodes.length == scope.categories.length) {\r\n                              selectAllBool = true;\r\n                          } else {\r\n                              selectAllBool = false;\r\n                          }\r\n\r\n                      } else {\r\n                          selectAllBool = false;\r\n                      }\r\n                      return selectAllBool;\r\n                  }\r\n\r\n                  scope.doneClickHandler = function () {\r\n                      scope.treeConfig.getSelections = true;\r\n\r\n                      // timeout required for delaying the $digest cycle\r\n                      var cancelTimer = $timeout(function () {\r\n                          scope.treeConfig.isReadOnly = false;\r\n                          $timeout.cancel(cancelTimer);\r\n                          cancelTimer = null;\r\n                      }, 10);\r\n                  }\r\n                  function createSelectedModelIfRecieved(data) {\r\n\r\n                      if (data && data.length > 0) {\r\n                          scope.selectedData = getLeafNodeWithParentHierarchy(data);\r\n                          scope.treeConfig.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : true;\r\n                      }\r\n                  };\r\n\r\n                  function renderLevels() {\r\n                      if (levelWiseData[levelKey + '1'] != undefined) {\r\n                          scope.categories = !scope.treeConfig.isReadOnly ? levelWiseData[levelKey + '1'].slice(0, lazyLoadingBucket) : levelWiseData[levelKey + '1'];\r\n                          if (!scope.treeConfig.isReadOnly && scope.categories.length % lazyLoadingBucket == 0)\r\n                              lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                          scope.isLoading = false;\r\n                          if (scope.categories.length > 0) {\r\n                              scope.selectionAndCountOptions = true;\r\n                          }\r\n                      }\r\n                      scope.config.levelWiseData = levelWiseData;\r\n                  };\r\n\r\n\r\n                  function initializePromise(dataRievedPromiseBool, preselectionRecievedPromiseBool) {\r\n                      dataRecievedCallPromise = null;\r\n                      preselectionRecievedPromise = null;\r\n                      promises.length = 0;\r\n                      if (dataRievedPromiseBool) {\r\n                          dataRecievedCallPromise = $q.defer();\r\n                          promises.push(dataRecievedCallPromise.promise);\r\n                      }\r\n                      if (preselectionRecievedPromiseBool) {\r\n                          preselectionRecievedPromise = $q.defer();\r\n                          promises.push(preselectionRecievedPromise.promise);\r\n                      }\r\n                      $q.all(promises).then(promiseResolved);\r\n                  }\r\n\r\n\r\n\r\n                  function promiseResolved() {\r\n                      initatePreSelection();\r\n                      initializePromise(false, true);\r\n                  }\r\n\r\n                  function createLevelWiseDataSet(dataSet) {\r\n                      if (dataSet.length > 0) {\r\n                          var level = 1;\r\n                          var parentNodes = dataSet[level - 1][levelWiseDataProperty];\r\n                          insertParentHierarchyForFlatStrucure(parentNodes);\r\n                          while (parentNodes) {\r\n                              var instance = levelWiseData[levelKey + level];\r\n                              levelWiseData[levelKey + level] = (instance) ? _.map(_.groupBy(_.union(instance, parentNodes), function (doc) {\r\n                                  return doc[scope.codeProperty];\r\n                              }), function (grouped) {\r\n                                  return grouped[0];\r\n                              }) : parentNodes;\r\n                              if (dataSet[level]) {\r\n                                  insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet);\r\n                              };\r\n                              maxLevel = level;\r\n                              level = level + 1;\r\n                              if (typeof (scope.treeConfig.to) !== 'undefined') {\r\n                                  if (level > scope.treeConfig.to) {\r\n                                      var len = parentNodes.length;\r\n                                      for (var levelDataIndex = 0; levelDataIndex < len; levelDataIndex++) {\r\n                                          parentNodes[levelDataIndex].ChildCount = 0;\r\n                                      }\r\n                                      parentNodes = null;\r\n                                  } else {\r\n                                      parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                                  }\r\n                              } else {\r\n                                  parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                              }\r\n                          };\r\n                      }\r\n                  };\r\n\r\n                  function insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet) {\r\n                      var fetchedData = (level) ? _.groupBy(dataSet[level][levelWiseDataProperty], scope.parentProperty) : null;\r\n                      _.each(parentNodes, function (parent) {\r\n                          var childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n                          if (childForParent) {\r\n                              _.each(childForParent, function (node, index) {\r\n                                  node[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n                                  node[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n                                  node['isExpanded'] = false;\r\n                                  var nodeSelection = node.selection,\r\n                                      isNodeSelected = node.IsSelected;\r\n                                  node['selection'] = (node && nodeSelection && (nodeSelection == \"1\" || nodeSelection == \"0\") /*&& !scope.isSingleSelect*/) ? nodeSelection : (isNodeSelected == false || isNodeSelected == null || isNodeSelected) ? getSelectionState(isNodeSelected) : '0',\r\n                                  //checkDisableForPartialNode(node);\r\n                                  node['index'] = index;\r\n\r\n                                  if (nodeSelection == \"1\") {\r\n\r\n                                      var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                      if (index > -1) {\r\n                                      } else {\r\n                                          totalID.push(node[scope.codeProperty]);\r\n                                          totalName.push(node[scope.titleProperty]);\r\n                                          scope.totalSelection++;\r\n                                      }\r\n                                  }\r\n\r\n\r\n                              });\r\n                          }\r\n                      });\r\n                  };\r\n\r\n\r\n\r\n                  function checkDisableForPartialNode(node) {\r\n                      if (scope.treeConfig.requestParameter) {\r\n                          if (!scope.treeConfig.requestParameter.getComplete && scope.treeConfig.requestParameter.contactCode && node.selection == '2') {\r\n\r\n                              node.disabled = true;\r\n\r\n                          } else {\r\n                              node.disabled = false;\r\n                          }\r\n                      } else {\r\n                          node.disabled = false;\r\n                      }\r\n\r\n                  };\r\n\r\n                  function setLevelWiseDataSource(data, parent) {\r\n                      _.each(data[dataProperty], function (n) {\r\n                          _.each(n[levelWiseDataProperty], function (d) {\r\n                              d.selection = (parent && parent.selection && (parent.selection == \"1\" || parent.selection == \"0\") /*&& !scope.isSingleSelect*/) ? parent.selection : (d.IsSelected == false || d.IsSelected == null || d.IsSelected) ? getSelectionState(d.IsSelected) : '0';\r\n                              //checkDisableForPartialNode(d);\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };\r\n                  function setLevelWiseData(data, parent) {\r\n                      _.each(data[dataProperty], function (n) {\r\n                          _.each(n[levelWiseDataProperty], function (d) {\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  var parentSelection = parent.selection,\r\n                                      dIsSelected = d.IsSelected;\r\n                                  d.selection = (parent && parentSelection && (parentSelection == \"1\" || parentSelection == \"0\") /*&& !scope.isSingleSelect*/) ? parent.selection : (dIsSelected == false || dIsSelected == null || dIsSelected) ? getSelectionState(dIsSelected) : '0';\r\n\r\n                              }\r\n                              else {\r\n                                  d.selection = '0';\r\n                              }\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  if (isLazyLoadServerData) {\r\n                                      totalID.push(d[scope.codeProperty]);\r\n                                      totalName.push(d[scope.titleProperty]);\r\n                                      scope.totalSelection++;\r\n                                  }\r\n                              }\r\n\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };\r\n\r\n                  /*function createLevelWiseDataSet(dataSet) {\r\n                      var level = 1;\r\n                      var parentNodes = dataSet[level - 1][levelWiseDataProperty];\r\n                      insertParentHierarchyForFlatStrucure(parentNodes);\r\n                      while (parentNodes) {\r\n                          levelWiseData[levelKey + level] = parentNodes;\r\n                          if (dataSet[level]) {\r\n                              insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet);\r\n                          };\r\n                          maxLevel = level;\r\n                          level = level + 1;\r\n                          parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                      };\r\n                  };\r\n      \r\n                  function insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet) {\r\n                      var fetchedData = (level) ? _.groupBy(dataSet[level][levelWiseDataProperty], scope.parentProperty) : null;\r\n                      _.each(parentNodes, function(parent) {\r\n                          var childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n                          if (childForParent) {\r\n                              _.each(childForParent, function(node, index) {\r\n                                  node[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n                                  node[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n                                  node['isExpanded'] = false;\r\n                                  node['selection'] = node['selection'] ? node['selection'] : \"0\";\r\n                                  node['index'] = index;\r\n                              });\r\n                          }\r\n                      });\r\n                  };\r\n      \r\n                  function setLevelWiseData(data, parent) {\r\n                      _.each(data[dataProperty], function(n) {\r\n                          _.each(n[levelWiseDataProperty], function(d) {\r\n                              d.selection = (parent && parent.selection && (parent.selection == \"1\" || parent.selection == \"0\") && !scope.isSingleSelect) ? parent.selection : (d.IsSelected == false || d.IsSelected == null || d.IsSelected) ? getSelectionState(d.IsSelected) : '0';\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n      \r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };*/\r\n\r\n                  function getSelectionState(val) {\r\n                      if (val) {\r\n                          return '1';\r\n                      } else if (val == false) {\r\n                          return '2';\r\n                      } else if (val == null) {\r\n                          return '0';\r\n                      }\r\n                  };\r\n\r\n                  function resetSelectionState() {\r\n                      _.each(scope.selectedData, function (_node) {\r\n                          scope.selectNode(_node, '0');\r\n                      });\r\n                  };\r\n\r\n                  function initatePreSelection() {\r\n                      resetSelectionState();\r\n                      _.each(preselection, function (preselectionNode) {\r\n                          var searchLevel = 1;\r\n                          while (searchLevel <= maxLevel) {\r\n                              var foundNode = _.groupBy(levelWiseData[levelKey + searchLevel], scope.codeProperty)[preselectionNode];\r\n                              if (foundNode) {\r\n                                  scope.selectNode(foundNode[0], '1');\r\n                                  break;\r\n                              }\r\n                              searchLevel = searchLevel + 1;\r\n                          }\r\n                      });\r\n                  };\r\n\r\n                  function getNodesFromServer(parent, level, bucket, pageIndex, callback) {\r\n                      scope.isLoading = true;\r\n                      if (scope.isError) scope.isError = false;\r\n                      if (parent)\r\n                          parent.childLoading = true;\r\n\r\n                      var reqPayLoad = {\r\n                          \"LevelAt\": level,\r\n                          \"PageNumber\": (!parent) ? pageIndex : null,\r\n                          \"PageSize\": (!parent) ? bucket : null\r\n                      };\r\n                      reqPayLoad[nodeExpandingCodeProperty] = (parent) ? parent[scope.codeProperty] : null;\r\n                      //RESTApi.getData(scope.treeConfig.navigationContext, function (responseData) {\r\n                      //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function (responseData) {\r\n                      RESTApi.getData(navContext,\r\n                          function (responseData) {\r\n                          if (responseData.action == 'success') {\r\n                              scope.isLoading = false;\r\n                          } else {\r\n                              scope.isError = true;\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          var level = (responseData.data.data[dataProperty] && responseData.data.data[dataProperty].length > 0) ? responseData.data.data[dataProperty][0].Level : null;\r\n                          maxLevel = (level && maxLevel < level) ? level : maxLevel;\r\n                          callback(parent, responseData, true, bucket, pageIndex);\r\n                      }, reqPayLoad, false, scope.treeType);\r\n                  };\r\n\r\n\r\n                  function getRequestedDataFromCache(parent, bucket, pageIndex) {\r\n                      var childSearchLevel = (parent) ? parent[scope.levelProperty] + 1 : 1;\r\n                      var parentCodeStringIterator;\r\n                      var result = (parent) ? _.groupBy(levelWiseData[levelKey + childSearchLevel], scope.parentProperty)[parent[scope.codeProperty]] : levelWiseData[levelKey + childSearchLevel];\r\n                      if (scope.treeConfig.isReadOnly) {\r\n                          result = result ? result : [];\r\n                          return {\r\n                              \"data\": result,\r\n                              \"searchLevel\": childSearchLevel\r\n                          };\r\n                      }\r\n                      var startIndex = (pageIndex - 1) * bucket;\r\n                      var bucketData = (bucket && result) ? result.slice(startIndex, startIndex + bucket) : (result) ? result : [];\r\n                      return {\r\n                          \"data\": bucketData,\r\n                          \"searchLevel\": childSearchLevel\r\n                      };\r\n                  };\r\n\r\n                  function getChildsForParentAsPerBucket(parent, bucket, pageIndex, callback) {\r\n                      if (parent != undefined) {\r\n                          if (parent.ChildCount != undefined && parent.ChildCount > 0) {\r\n                              bucket = parent.ChildCount;\r\n                          }\r\n                      }\r\n                      var cachedDataSet = getRequestedDataFromCache(parent, bucket, pageIndex);\r\n                      var bucketData = cachedDataSet.data;\r\n                      var searchLevel = cachedDataSet.searchLevel;\r\n\r\n                      if (bucketData.length > 0) {\r\n                          callback(parent, bucketData, false, bucket, pageIndex);\r\n                      } else {\r\n                          getNodesFromServer(parent, searchLevel, bucket, pageIndex, callback);\r\n                      }\r\n                  };\r\n\r\n                  function lazyLoadLevelWiseData(markerNode) {\r\n                      var parentSearchLevel = markerNode[scope.levelProperty] - 1;\r\n                      var markerNodeParent = markerNode[scope.parentProperty];\r\n                      var parent = _.find(levelWiseData[levelKey + parentSearchLevel], function (node) {\r\n                          return node[scope.codeProperty] == markerNodeParent;\r\n                      });\r\n\r\n                      if (parent && parent.children && parent.children.length % lazyLoadingBucket != 0) {\r\n                          return;\r\n                      };\r\n\r\n                      getChildsForParentAsPerBucket(parent, lazyLoadingBucket, (parent) ? (parent.children.length / lazyLoadingBucket) + 1 : (scope.categories.length / lazyLoadingBucket) + 1, createTreeStructure);\r\n                  };\r\n\r\n                  var searchString = \"\";\r\n                  var searchLevel;\r\n                  var searchDataYetToBeDisplayed = [];\r\n                  var searchWithContainsHitResult = [];\r\n                  scope.searchResults = [];\r\n\r\n                  function searchAsPerBucketSize(searchStr, bucket, isMaintainSearchPointer) {\r\n                      if (!isMaintainSearchPointer) {\r\n                          if (searchString != searchStr) {\r\n                              searchString = searchStr;\r\n                              searchLevel = maxLevel;\r\n                              searchDataYetToBeDisplayed.length = 0;\r\n                              searchWithContainsHitResult.length = 0;\r\n                              scope.searchResults.length = 0;\r\n                          };\r\n                      }\r\n                      var searchData = getDataAsPerBucketSize(searchStr, bucket);\r\n                      if (!isMaintainSearchPointer && searchData.length == 0 && scope.searchResults.length === 0) {\r\n                          scope.noRecordsFound = true;\r\n                      } else {\r\n                          scope.noRecordsFound = false;\r\n                      }\r\n\r\n                      var cancelTout = $timeout(function () {\r\n                          scope.searchResults = scope.searchResults.concat(searchData);\r\n                          if (scope.searchResults.length > 0) {\r\n                              scope.noRecordsFound = false;\r\n                          } else {\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          $timeout.cancel(cancelTout);\r\n                          cancelTout = null;\r\n                      });\r\n                  };\r\n\r\n                  function getOffsetSearchData(bucket) {\r\n                      var partitionedData = _.partition(searchDataYetToBeDisplayed, function (data, index) {\r\n                          return index > (bucket - 1);\r\n                      });\r\n                      searchDataYetToBeDisplayed = partitionedData[0];\r\n                      return partitionedData[1];\r\n                  };\r\n\r\n                  function getOffsetSearchDataForContainsSearch(bucket) {\r\n                      var partitionedData = _.partition(searchWithContainsHitResult, function (data, index) {\r\n                          return index > (bucket - 1);\r\n                      });\r\n                      searchWithContainsHitResult = partitionedData[0];\r\n                      return partitionedData[1];\r\n                  };\r\n\r\n                  function getDataAsPerBucketSize(searchStr, bucket) {\r\n                      var bucketData = [];\r\n                      while (bucketData.length < bucket && searchLevel > 0) {\r\n                          var offsetSearchData = getOffsetSearchData(bucket);\r\n                          if (offsetSearchData.length == bucket) {\r\n                              bucketData = offsetSearchData;\r\n                              break;\r\n                          }\r\n                          var searchData = _.filter(levelWiseData[levelKey + searchLevel], function (node) {\r\n                              return -1 != node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n                          });\r\n\r\n                          var containsSarchResult = _.filter(levelWiseData[levelKey + searchLevel], function (node) {\r\n                              return new RegExp(\"(\" + _.compact(searchString.split(' ')).join('|') + \")\", \"gi\").test(node[scope.titleProperty]) && -1 == node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n                          });\r\n                          searchWithContainsHitResult = searchWithContainsHitResult.concat(containsSarchResult);\r\n                          var qumulativeData = offsetSearchData.concat(searchData);\r\n                          var partitionedData = _.partition(qumulativeData, function (data, index) {\r\n                              return index > (bucket - 1);\r\n                          });\r\n                          searchDataYetToBeDisplayed = searchDataYetToBeDisplayed.concat(partitionedData[0]);\r\n                          bucketData = bucketData.concat(partitionedData[1]);\r\n                          searchLevel = searchLevel - 1;\r\n                      }\r\n                      if (searchLevel == 0) {\r\n                          while (bucketData.length < bucket) {\r\n                              var containsSearchDataToBeAppended = getOffsetSearchDataForContainsSearch(bucket);\r\n                              if (containsSearchDataToBeAppended.length > 0) {\r\n                                  bucketData = bucketData.concat(containsSearchDataToBeAppended);\r\n                              } else {\r\n                                  break;\r\n                              }\r\n                          }\r\n                      }\r\n                      return bucketData;\r\n                  };\r\n\r\n                  function closeChildsForParent(parent) {\r\n                      getChildsForParentAsPerBucket(parent, null, null, function (parent, data) {\r\n                          var childs = _.filter(data, function (childNode) {\r\n                              return childNode.isExpanded;\r\n                          });\r\n                          _.each(childs, function (child) {\r\n                              child.isExpanded = false;\r\n                              child.children = [];\r\n                              closeChildsForParent(child);\r\n                          });\r\n                      });\r\n\r\n                  };\r\n\r\n                  scope.searchText = '';\r\n                  scope.searchFieldVal = '';\r\n\r\n                  scope.expandNode = function (node, index) {\r\n                      node.isExpanded = !node.isExpanded;\r\n                      if (node.isExpanded) {\r\n                          getChildsForParentAsPerBucket(node, lazyLoadingBucket, 1, createTreeStructure);\r\n                      } else {\r\n                          node.children = [];\r\n                          removeMarkerForParent(node);\r\n                      }\r\n                  };\r\n\r\n                  var createTreeStructure = function (node, data, isService, bucket, pageIndex) {\r\n                      if (isService) {\r\n                          if (node) {\r\n                              node.childLoading = false;\r\n                              node.lazyLoading = false;\r\n                          }\r\n                          if (data.action == 'success') {\r\n                              setLevelWiseData(data.data.data, node);\r\n                              if (node && data.data.data[dataProperty][0]) {\r\n                                  if (!node.children) {\r\n                                      node.children = getRequestedDataFromCache(node, bucket, pageIndex).data;\r\n                                  } else {\r\n                                      node.children = node.children.concat(getRequestedDataFromCache(node, bucket, pageIndex).data);\r\n                                  }\r\n                                  if (node.children.length % lazyLoadingBucket == 0) {\r\n                                      lazyLoadMarker.push(node.children[node.children.length - 1]);\r\n                                  }\r\n                              } else {\r\n                                  scope.categories[scope.categories.length - 1].lazyLoading = false;\r\n                                  scope.categories = scope.categories.concat(data.data.data[dataProperty][0][levelWiseDataProperty]);\r\n                                  if (scope.categories.length % lazyLoadingBucket == 0) {\r\n                                      lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                                  }\r\n                              }\r\n                          } else {\r\n                              console.log('service failure');\r\n                          }\r\n                      } else {\r\n                          var toutCancel = $timeout(function () {\r\n                              if (node) {\r\n                                  if (node && node.children && node.children.length > 0)\r\n                                      node.children[node.children.length - 1].lazyLoading = false;\r\n                                  //node.children = (node.children) ? node.children.concat(data) : data;\r\n                                  node.children = (node.children) ? ((scope.treeConfig.getAllLazyLoadedData) ? data : node.children.concat(data)) : data;\r\n\r\n                                  if ((!scope.treeConfig.isReadOnly) && (node.children.length % lazyLoadingBucket == 0)) {\r\n                                      lazyLoadMarker.push(node.children[node.children.length - 1]);\r\n                                  }\r\n                              } else {\r\n                                  scope.categories[scope.categories.length - 1].lazyLoading = false;\r\n                                  scope.categories = scope.categories.concat(data);\r\n                                  if ((!scope.treeConfig.isReadOnly) && (scope.categories.length % lazyLoadingBucket == 0)) {\r\n                                      lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                                  }\r\n                              }\r\n                              $timeout.cancel(toutCancel);\r\n                              toutCancel = null;\r\n                          });\r\n                      }\r\n                  };\r\n\r\n                  function removeMarkerForParent(parent) {\r\n                      var childMarkers = _.filter(lazyLoadMarker, function (node, index) {\r\n                          return -1 != node[parentCodeStringConstant].indexOf(parent[scope.codeProperty]);\r\n                      });\r\n                      lazyLoadMarker = _.difference(lazyLoadMarker, childMarkers);\r\n                      closeChildsForParent(parent);\r\n                  };\r\n\r\n                  var filterTextTimeout;\r\n                  scope.searchAndSelectNode = function (e) {\r\n                      \r\n                      //scope.$apply();\r\n                      //if (filterTextTimeout) {\r\n                          //$timeout.cancel(filterTextTimeout);\r\n                          //filterTextTimeout = null;\r\n                      //}\r\n                      //if (scope.searchFieldVal.length <= 2) {\r\n                         // scope.noRecordsFound = false;\r\n                          //serverSearchVal = \"\";\r\n                         // scope.searchResults.length = 0;\r\n                          //searchDataYetToBeDisplayed.length = 0;\r\n                          //searchWithContainsHitResult.length = 0;\r\n                      //} else {\r\n                          //scope.noRecordsFound = false;\r\n                      var filterTextTimeout = $timeout(function () {\r\n                          scope.noRecordsFound = false;\r\n                              if (scope.searchFieldVal.length <= 2) {\r\n                                  // scope.noRecordsFound = false;\r\n                                  serverSearchVal = \"\";\r\n                                  // scope.searchResults.length = 0;\r\n                                  searchDataYetToBeDisplayed.length = 0;\r\n                                  searchWithContainsHitResult.length = 0;\r\n                              } else if (scope.searchFieldVal.length >= 3) {\r\n                                  if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket, false);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal);\r\n                              }\r\n                              }\r\n                              $timeout.cancel(filterTextTimeout);\r\n                              filterTextTimeout = null;\r\n                              scope.cancelTitle = e.target.value == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                          }, 500);\r\n                      //}\r\n                  };\r\n\r\n\r\n                  scope.selectAll = function () {\r\n                      scope.isPartiallySelected = false;\r\n                      if (selectAllBool) {\r\n                          for (var key in levelWiseData) {\r\n                              _.each(levelWiseData[key], function (data, n) {\r\n                                  //if (data.disabled == false) {\r\n                                      data.selection = \"0\";\r\n                                  //}\r\n                                  scope.selectedData = (key == (levelKey + '1')) ? [] : [];\r\n                              });\r\n                          }\r\n                          scope.getUserSelectionArray = [];\r\n                          scope.totalSelection = 0;\r\n                          totalID = [];\r\n                          totalName = [];\r\n                      } else {\r\n                          for (var key in levelWiseData) {\r\n                              _.each(levelWiseData[key], function (data, n) {\r\n                                  if (data.disabled != true) {\r\n                                      data.selection = \"1\";\r\n                                  }\r\n                                  scope.selectedData = (key == (levelKey + '1')) ? levelWiseData[levelKey + '1'] : scope.selectedData;\r\n                                  var index = totalID.indexOf(data[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                  } else {\r\n                                      totalID.push(data[scope.codeProperty]);\r\n                                      totalName.push(data[scope.titleProperty]);\r\n                                      scope.totalSelection++;\r\n                                  }\r\n                              });\r\n                          }\r\n                      }\r\n                  }\r\n\r\n                  scope.clearAllSelection = function () {\r\n                      for (var key in levelWiseData) {\r\n                          _.each(levelWiseData[key], function (data, n) {\r\n                              data.selection = \"0\";\r\n                              //scope.selectedData = (key == (levelKey + '1'))  ? [] : [];\r\n                              //scope.getUserSelectionArray = [];\r\n                          });\r\n                      }\r\n                      scope.selectedData = [];\r\n                      scope.getUserSelectionArray = [];\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n                      scope.isPartiallySelected = false;\r\n                  }\r\n\r\n\r\n                  scope.selectNode = function (node, selectionState, byPassIsLazyLoadCheck, recursive, siblingNods) {\r\n                      if (isLazyLoadServerData && scope.searchFieldVal.length > 0 && !byPassIsLazyLoadCheck) {\r\n                          completeModelFromServerIfNeeded(node);\r\n                          if (scope.config.useAs == 'inline') {\r\n                              getSelections();\r\n                          }\r\n                          return;\r\n                      }\r\n\r\n                      //updateSelectionObject(node, selectionState);\r\n                      if (scope.isSingleSelect) {\r\n                          if (scope.selectedData.length > 0 && scope.selectedData[0][scope.codeProperty] == node[scope.codeProperty]) {\r\n                              if (scope.config.useAs == 'inline') {\r\n                                  getSelections();\r\n                              }\r\n                              return;\r\n                          }\r\n                          if (scope.selectedData.length > 0 && scope.selectedData[0][scope.codeProperty] != node[scope.codeProperty]) {\r\n                              scope.clearAllSelection();\r\n                          };\r\n                          node.selection = selectionState;\r\n                          scope.selectedData = [node];\r\n                          scope.totalSelection = scope.selectedData.length;\r\n                      } else {\r\n                          node.selection = selectionState;\r\n                          updateSelectionObject(node, selectionState);\r\n                          updateChildsForNode(node, selectionState);\r\n                      }\r\n                      //updateChildsForNode(node, selectionState);\r\n                      updateParentForNode(node, selectionState, recursive);\r\n                      updateUserSelection(node, selectionState);\r\n                      if (scope.treeType == treeTypeObject) {\r\n                      } else {\r\n                          //working perfect in project team\r\n                          scope.totalSelection = scope.selectedData.length;\r\n                      }\r\n\r\n                      if (scope.config.useAs == 'inline') {\r\n                          getSelections();\r\n                      }\r\n\r\n                      if (scope.totalSelection == 0) {\r\n                          scope.isPartiallySelected = false;\r\n                      } else {\r\n                          scope.isPartiallySelected = !scope.getSelectAllBool();\r\n                      }\r\n                  };\r\n                  function getInsSelectedNode(siblingNods) {\r\n                      var r,\r\n                          len = siblingNods.length;\r\n                      for (var x = 0; x < len; x++) {\r\n                          var selection = siblingNods[x].selection;\r\n                          if (selection == \"1\" || selection == \"2\") {\r\n                              r = siblingNods[x];\r\n                              break;\r\n                          }\r\n                      }\r\n                      return r;\r\n                  };\r\n                  function updateSelectionObject(node, selectionState) {\r\n                      switch (selectionState) {\r\n                          case '0':\r\n                              //scope.selectedData = _.without(scope.selectedData, node);\r\n                              scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                  return data[scope.codeProperty] != node[scope.codeProperty];\r\n                              });\r\n                              scope.totalSelection = scope.totalSelection - 1;\r\n                              var index = totalID.indexOf(node[scope.codeProperty]);\r\n                              if (index > -1) {\r\n                                  totalID.splice(index, 1);\r\n                                  totalName.splice(index, 1);\r\n                              }\r\n                              break;\r\n                          case '1':\r\n                              scope.selectedData.push(node);\r\n                              scope.totalSelection = scope.totalSelection + 1;\r\n                              totalID.push(node[scope.codeProperty]);\r\n                              totalName.push(node[scope.titleProperty]);\r\n                              break;\r\n                      }\r\n                  };\r\n                  function updateUserSelection(node, selectionState) {\r\n                      switch (selectionState) {\r\n                          case '0':\r\n                              scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });//_.without(scope.getUserSelectionArray, node);\r\n                              break;\r\n                          case '1':\r\n                              scope.getUserSelectionArray.push(node);\r\n                              break;\r\n                      }\r\n                  }\r\n\r\n                  /*function updateParentForNode(node, selectionState) {\r\n                   var depthLevel = node[scope.levelProperty] - 1;\r\n                   var immediateParentCode = node[scope.parentProperty].toString();\r\n                   while (depthLevel > 0) {\r\n                    var parent = _.find(levelWiseData[levelKey + depthLevel], function(node) {\r\n                     return node[scope.codeProperty] == immediateParentCode;\r\n                   });\r\n                    if (!parent && depthLevel == 1) {\r\n                     baseLevelExpectNode[node[parentCodeStringConstant].split('>')[0]] = true;\r\n                     parent = {};\r\n                     parent[scope.codeProperty] = node[parentCodeStringConstant].split('>')[0];\r\n                     parent[scope.levelProperty] = 1;\r\n                     parent[scope.parentProperty] = parent[scope.codeProperty];\r\n                   }\r\n                   if (parent) {\r\n                     immediateParentCode = parent[scope.parentProperty].toString();\r\n                     if (!parent['isExpanded']) {\r\n                      scope.expandNode(parent);\r\n                    }\r\n                    if (!scope.isSingleSelect) {\r\n                      parent.selection = getStateForNode(parent);\r\n                    }\r\n                  }\r\n                  depthLevel = depthLevel - 1;\r\n                }\r\n              };*/\r\n\r\n                  function updateParentForNode(node, selectionState, recursive) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] - 1;\r\n                      var immediateParentCode = node[scope.parentProperty].toString();\r\n\r\n                      while (depthLevel > 0) {\r\n                          var parent = _.find(levelWiseData[levelKey + depthLevel], function (node) {\r\n                              return node[scope.codeProperty] == immediateParentCode;\r\n                          });\r\n                          if (!parent && depthLevel == 1) {\r\n                              baseLevelExpectNode[node[parentCodeStringConstant].split('>')[0]] = true;\r\n                              parent = {};\r\n                              parent[scope.codeProperty] = node[parentCodeStringConstant].split('>')[0];\r\n                              parent[scope.levelProperty] = 1;\r\n                              parent[scope.parentProperty] = parent[scope.codeProperty];\r\n                          }\r\n                          //if (parent && !parent.disabled) {\r\n                          if (parent && !parent.disabled) {\r\n                              immediateParentCode = parent[scope.parentProperty].toString();\r\n                              if (!parent['isExpanded']) {\r\n                                  scope.expandNode(parent);\r\n                              }\r\n                              //if (!scope.isSingleSelect) {\r\n                              parent.selection = getStateForNode(parent, parent.selection);\r\n                              //}\r\n                          } else {\r\n                              immediateParentCode = parent[scope.parentProperty].toString();\r\n                              if (!parent['isExpanded']) {\r\n                                  scope.expandNode(parent);\r\n                              }\r\n                              //if (!scope.isSingleSelect) {\r\n                              var tempSelection = getStateForNode(parent, parent.selection);\r\n                              parent.selection = \"2\";\r\n                              //}\r\n                          }\r\n                          depthLevel = depthLevel - 1;\r\n\r\n                          immediateParentCode = parent[scope.parentProperty].toString();\r\n                      }\r\n                  };\r\n\r\n                  function getStateForNode(node, parentSelection) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] + 1;\r\n                      var parentCode = node[scope.codeProperty];\r\n                      var groupByData = _.groupBy(levelWiseData[levelKey + depthLevel], scope.parentProperty);\r\n                      var childCount = groupByData[parentCode].length;\r\n                      var selectedChild = _.filter(groupByData[parentCode], function (node) {\r\n                          return node.selection == '1';\r\n                      });\r\n                      var partiallySelectedChild = _.filter(groupByData[parentCode], function (node) {\r\n                          return node.selection == '2';\r\n                      });\r\n\r\n\r\n                      /*\r\n                        if (childCount == selectedChild.length) {\r\n                          //scope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n                          //JJ Add Later\r\n                          scope.selectedData = _.filter(scope.selectedData,function(data,n)\r\n                          {\r\n                            return data[scope.parentProperty] !=parentCode;\r\n                          });\r\n                      \r\n                          scope.selectedData.push(node);\r\n                          return \"1\";\r\n                        } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n                         scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                      \r\n                         scope.selectedData = _.uniq(scope.selectedData,function(item,jey,a) {\r\n                          return item[scope.codeProperty]; \r\n                        });\r\n                         //scope.selectedData = _.without(scope.selectedData, node);\r\n                         scope.selectedData = _.filter(scope.selectedData,function(data,n)\r\n                         {\r\n                          return data[scope.codeProperty] != node[scope.codeProperty];\r\n                        });\r\n                      \r\n                         return \"2\";\r\n                       } else {\r\n                         scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                         scope.selectedData = _.filter(scope.selectedData, function(data)\r\n                         {\r\n                          return data[scope.codeProperty] != node[scope.codeProperty];\r\n                        });\r\n                         //scope.selectedData = _.without(scope.selectedData, node);\r\n                         return \"0\";\r\n                       }\r\n                       */\r\n\r\n                      if (scope.isSingleSelect) {\r\n                          return \"0\";\r\n                      } else {\r\n                          if (scope.treeType == treeTypeObject) {\r\n                              if (childCount == selectedChild.length) {\r\n\r\n                                  ///scope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.parentProperty] != parentCode;\r\n                                  });\r\n\r\n                                  scope.selectedData.push(node);\r\n                                  //Manage Total Selection and TotalName nd ID  \r\n                                  scope.totalSelection = scope.totalSelection + 1;\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                  } else {\r\n                                      totalID.push(node[scope.codeProperty]);\r\n                                      totalName.push(node[scope.titleProperty]);\r\n                                  }//Ends\r\n\r\n                                  return \"1\";\r\n\r\n                              } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.uniq(scope.selectedData, function (item, key, a) {\r\n                                      return item[scope.codeProperty];\r\n                                  });\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != node[scope.codeProperty]\r\n                                  }); //_.without(scope.selectedData, node);\r\n\r\n\r\n\r\n                                  //Manage Total Selection and TotalName nd ID\r\n                                  if (parentSelection != \"0\" && parentSelection != \"2\") {\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                  }\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                      totalID.splice(index, 1);\r\n                                      totalName.splice(index, 1);\r\n                                  }\r\n                                  //Ends\r\n\r\n\r\n                                  return \"2\";\r\n                              } else {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != node[scope.codeProperty]\r\n                                  });\r\n\r\n                                  //_.without(scope.selectedData, node);\r\n\r\n                                  //Manage Total Selection and TotalName nd ID\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                      totalID.splice(index, 1);\r\n                                      totalName.splice(index, 1);\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                  }//Ends\r\n                                  return \"0\";\r\n                              }\r\n                          } else {\r\n\r\n                              //Non Generic Tree management\r\n                              //it will not having parent selection full means 1 even if all childs are selected.\r\n                              if (childCount == selectedChild.length) {\r\n                                  //scope.selectedData = selectedChild;\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                                  return \"2\";\r\n\r\n                              } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.uniq(scope.selectedData, function (item, key, a) {\r\n                                      return item[scope.codeProperty];\r\n                                  });\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });\r\n                                  //_.without(scope.selectedData, node);\r\n                                  return \"2\";\r\n                              } else {\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });//_.without(scope.selectedData, node);\r\n                                  return \"0\";\r\n                              }\r\n                          }\r\n                      }\r\n\r\n\r\n                  };\r\n\r\n\r\n\r\n                  /*\r\n                  function updateChildsForNode(node, selectionState) {\r\n                    var depthLevel = node[scope.levelProperty] + 1;\r\n                    var parentCode = node[scope.codeProperty].toString();\r\n                    while (depthLevel <= maxLevel) {\r\n                     var childs = _.filter(levelWiseData[levelKey + depthLevel], function(node) {\r\n                      return -1 != node[parentCodeStringConstant].indexOf(parentCode);\r\n                    });\r\n                     _.each(childs, function(child) {\r\n                      child.selection = selectionState;\r\n                      if (selectionState == \"1\") {\r\n                       //scope.selectedData = _.without(scope.selectedData, child);\r\n                       scope.selectedData =_.filter(scope.selectedData,function(data)\r\n                       {\r\n                        return data[scope.codeProperty] != child[scope.codeProperty];\r\n                      });\r\n                     };\r\n                   });\r\n                     depthLevel = depthLevel + 1;\r\n                   }\r\n                   if (isLazyLoadServerData) {\r\n                     updateChildsForSelectedData(node);\r\n                   }\r\n                  }*/\r\n\r\n                  function updateChildsForNode(node, selectionState) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] + 1;\r\n                      var parentCode = node[scope.codeProperty].toString();\r\n                      var tempNode = node;\r\n                      while (depthLevel <= maxLevel) {\r\n                          var childs = _.filter(levelWiseData[levelKey + depthLevel], function (node) {\r\n                              //return -1 != node[parentCodeString].indexOf(parentCode)\r\n                              var parentCodesofNode = node[parentCodeStringConstant].split(\">\");\r\n                              return -1 != parentCodesofNode.indexOf(parentCode);\r\n                          });\r\n\r\n\r\n                          _.each(childs, function (child) {\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  var codeProp = child[scope.codeProperty];\r\n                                  if (selectionState == \"1\") {\r\n                                      //Work in laziloading false\r\n                                      scope.totalSelection = (child.selection == \"1\") ? scope.totalSelection : scope.totalSelection + 1;\r\n                                      scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                          return data[scope.codeProperty] != codeProp;\r\n                                      });\r\n                                      //closed//_.without(scope.selectedData, child);\r\n                                      var index = totalID.indexOf(codeProp);\r\n                                      if (index > -1) {\r\n                                      } else {\r\n                                          totalID.push(codeProp);\r\n                                          totalName.push(codeProp);\r\n                                      }\r\n                                  } else {\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                      var index = totalID.indexOf(codeProp);\r\n                                      if (index > -1) {\r\n                                          totalID.splice(index, 1);\r\n                                          totalName.splice(index, 1);\r\n                                      }\r\n                                  }\r\n\r\n                                  if (!(selectionState == \"1\" && scope.isSingleSelect)) {\r\n                                      child.selection = selectionState;\r\n                                  }\r\n\r\n                                  scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray, function (data) {\r\n                                      return data[scope.codeProperty] != child[scope.codeProperty]\r\n                                  });//_.without(scope.selectedData, child);\r\n                                  //jayesh add\r\n                              } else {\r\n                                  child.selection = \"0\";\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != child[scope.codeProperty]\r\n                                  });//_.without(scope.selectedData, child);\r\n                              }\r\n                              /*scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray,function(data){\r\n                              \r\n                                return data[scope.codeProperty] != child[scope.codeProperty]\r\n                              });//_.without(scope.selectedData, child);*/\r\n                          });\r\n\r\n                          depthLevel = depthLevel + 1;\r\n                      }\r\n                      //if (isLazyLoadServerData) {\r\n                      updateChildsForSelectedData(node);\r\n                      //}\r\n                  }\r\n\r\n\r\n\r\n                  function updateChildsForSelectedData(node) {\r\n                      var searchHits = [];\r\n                      _.each(scope.selectedData, function (data) {\r\n                          if (-1 != data[parentCodeStringConstant].indexOf(node[scope.codeProperty].toString())) {\r\n                              searchHits.push(data);\r\n                          }\r\n                      });\r\n                      _.each(searchHits, function (hits) {\r\n\r\n                          //scope.selectedData = _.without(scope.selectedData, hits);\r\n                          scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                              return data[scope.codeProperty] != hits[scope.codeProperty];\r\n                          });\r\n\r\n\r\n                      });\r\n                  }\r\n\r\n                  var uniqueIDGenerator = function () {\r\n                      var d = new Date().getTime();\r\n                      var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                          var r = (d + Math.random() * 16) % 16 | 0;\r\n                          d = Math.floor(d / 16);\r\n                          return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                      });\r\n                      return uniqueID;\r\n                  };\r\n                  var cancelToutOnScroll;\r\n                  scope.scroll = function () {\r\n                      if (cancelToutOnScroll) {\r\n                          $timeout.cancel(cancelToutOnScroll);\r\n                          cancelToutOnScroll = null;\r\n                      }\r\n                      cancelToutOnScroll = $timeout(function () {\r\n                          if (!lazyLoadOffset) {\r\n                              //lazyLoadOffset = angular.element(\"#treeComponentContainer-\" + scope.hierarchyCounter)[0].getBoundingClientRect().bottom;\r\n                              var link = (angular.element(\"#treeComponentContainer\"));\r\n                              var position = link.position();\r\n                              var right = $(window).width();\r\n                              lazyLoadOffset = $(window).height();\r\n                          };\r\n                          var lazyLoadLen = lazyLoadMarker.length;\r\n                          if (lazyLoadLen > 0 && scope.searchFieldVal.length == 0) {\r\n                              var markerNode = lazyLoadMarker[lazyLoadLen - 1],\r\n                                  markerNodeSelect = angular.element(\"#\" + markerNode[scope.codeProperty]);\r\n                              if ((markerNodeSelect.length > 0) && markerNodeSelect[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n                                  markerNode.lazyLoading = true;\r\n                                  lazyLoadMarker.length = (lazyLoadLen > 0) ? lazyLoadLen - 1 : 0;\r\n                                  lazyLoadLevelWiseData(markerNode);\r\n                              }\r\n                          }\r\n                      }, 20);                      \r\n                  };\r\n                  var scrollEndTout;\r\n                  scope.scrollEnd = function () {\r\n                      if (scrollEndTout) {\r\n                          $timeout.cancel(scrollEndTout);\r\n                          scrollEndTout = null;\r\n                      }\r\n                      scrollEndTout = $timeout(function () {\r\n                          if (scope.searchFieldVal.length > 2) {\r\n                              if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket, true);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal, true);\r\n                              }\r\n                           }                              \r\n                      }, 20);\r\n                      \r\n                  };\r\n\r\n                  /*lazyLoadOffset = angular.element(\"#treeComponentContainer\")[0].getBoundingClientRect().bottom;\r\n                  console.log(lazyLoadOffset);\r\n                  angular.element('.scrollbar-outer').scrollbar({\r\n                      onScroll : function(y, x) {\r\n                          //console.log('marker length -- '+lazyLoadMarker.length);\r\n                          if (lazyLoadMarker.length > 0 && scope.searchFieldVal.length == 0) {\r\n                              var markerNode = lazyLoadMarker[lazyLoadMarker.length - 1];\r\n                              if (angular.element(\"#\"+markerNode[scope.codeProperty])[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n                                  console.log(markerNode);\r\n                                  markerNode.lazyLoading = true;\r\n                                  lazyLoadMarker.length = (lazyLoadMarker.length > 0) ? lazyLoadMarker.length - 1 : 0;\r\n                                  lazyLoadLevelWiseData(markerNode);\r\n                                  console.log(lazyLoadMarker.length);\r\n                              }\r\n                          }\r\n                          if (y.maxScroll > 0 && y.scroll == y.maxScroll && scope.searchFieldVal.length > 0) {\r\n                              if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal, true);\r\n                              }\r\n                          }\r\n                      }\r\n                  });*/\r\n\r\n                  var massageSelectedData = function (data) {\r\n                      _.each(data, function (e) {\r\n                          if (e['children'])\r\n                              delete e['children'];\r\n                      });\r\n                      return data;\r\n                  };\r\n\r\n\r\n                  var newtotalID = [];\r\n                  var newtotalName = [];\r\n\r\n\r\n                  var getSelections = function () {\r\n\r\n                      _.each(scope.selectedData, function (node) {\r\n                          if (node.disabled) {\r\n                              scope.selectedData = _.without(scope.selectedData, node);\r\n                          }\r\n                      });\r\n\r\n                      newtotalID = [];\r\n                      newtotalName = [];\r\n\r\n                      var tCancel = $timeout(function () {\r\n                          scope.treeConfig.selectType = scope.selectType.code;\r\n                          var outPutObject = {\r\n                              'selectType': scope.selectType.code,\r\n                              'selections': massageSelectedData(scope.selectedData)\r\n                          };\r\n\r\n                          _.each(outPutObject.selections, function (data) {\r\n                              newtotalID.push(data[scope.codeProperty]);\r\n                              newtotalName.push(data[scope.titleProperty]);\r\n                          });\r\n\r\n                          outPutObject[\"selectionIds\"] = newtotalID;\r\n                          outPutObject[\"selectionNames\"] = newtotalName;\r\n                          if (scope.treeType == treeTypeObject) {\r\n                              outPutObject[\"selectionAllIds\"] = totalID;\r\n                              outPutObject[\"selectionAllNames\"] = totalName;\r\n                          }\r\n\r\n                          var hierarchyCollection = [];\r\n                          _.each(scope.selectedData, function (node) {\r\n                              if (node[scope.levelProperty] > 1) {\r\n                                  var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                                  var parentTraversalArray = [];\r\n                                  _.each(parentHierarchy, function (parentNode, index) {\r\n                                      var found = _.clone(_.find(levelWiseData[levelKey + (index + 1)], function (data) {\r\n                                          return data[scope.codeProperty] == parentNode;\r\n                                      }));\r\n                                      if (found && found['children'])\r\n                                          delete found['children'];\r\n                                      parentTraversalArray.push(found);\r\n                                  });\r\n                                  hierarchyCollection.push(parentTraversalArray);\r\n                              } else {\r\n                                  hierarchyCollection.push([node]);\r\n                              }\r\n                          });\r\n\r\n                          /*if(scope.treeConfig.getHierarchyOnSelection)\r\n                          {\r\n                            outPutObject['selectionHierarchy'] =  massageSelectedData(hierarchyCollection);\r\n                          }\r\n                          if(scope.treeConfig.getAllLazyLoadedData)\r\n                          {\r\n                            outPutObject['allLazyLoadedData'] = levelWiseData;\r\n                          }*/\r\n\r\n\r\n                          if (scope.treeConfig.getHierarchyOnSelection && (scope.treeType == treeTypeObject)) {\r\n                              outPutObject['selectionHierarchy'] = massageSelectedData(hierarchyCollection);\r\n                          }\r\n                          if (scope.treeConfig.getUserSelection && (scope.treeType == treeTypeObject)) {\r\n                              outPutObject['userSelection'] = massageSelectedData(scope.getUserSelectionArray);\r\n                          }\r\n                          if (scope.treeConfig.getAllLazyLoadedData) {\r\n                              outPutObject['allLazyLoadedData'] = levelWiseData;\r\n                          }\r\n                          if (scope.isActive) {\r\n                              scope.searchFieldVal = '';\r\n                              scope.hideSearch();\r\n                          }\r\n\r\n                          doneCallback(outPutObject);\r\n                          $timeout.cancel(tCancel);\r\n                          tCancel = null;\r\n                      });\r\n                  };\r\n\r\n                  /** seacrh for server **/\r\n\r\n                  var searchResultPageNumber = 0;\r\n                  var serverSearchVal = \"\";\r\n                  var isLazyLoadingNode;\r\n                  var ongoingService;\r\n                  function getSearchDataFromServer(searchBucket, callback, searchVal, isLazyLoad) {\r\n                      if (searchVal != serverSearchVal) {\r\n                          serverSearchVal = searchVal;\r\n                          searchResultPageNumber = 0;\r\n                          scope.searchResults.length = 0;\r\n                      }\r\n\r\n                      scope.isLoading = true;\r\n                      if (scope.isError) scope.isError = false;\r\n\r\n                      if (scope.searchResults.length > 0) {\r\n                          isLazyLoadingNode = scope.searchResults[scope.searchResults.length - 1];\r\n                          isLazyLoadingNode.lazyLoading = true;\r\n                      }\r\n\r\n                      if (ongoingService && !isLazyLoad) {\r\n                          RESTApi.abort(ongoingService);\r\n                      }\r\n\r\n                      ongoingService = {\r\n                          \"PageNumber\": searchResultPageNumber = searchResultPageNumber + 1,\r\n                          \"PageSize\": searchBucket,\r\n                          \"SearchText\": scope.searchFieldVal\r\n                      };\r\n\r\n                      //RESTApi.getData(scope.treeConfig.navigationContext, function(responseData) {\r\n                      //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function(responseData) {\r\n                      RESTApi.getData(navContext,\r\n                          function (responseData) {\r\n                          ongoingService = null;\r\n                          if (responseData.action == 'success') {\r\n                              scope.isLoading = false;\r\n                          } else {\r\n                              scope.isError = true;\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          callback(responseData);\r\n                      }, ongoingService, false, scope.treeType);\r\n                  }\r\n\r\n                  function createModelForSearchData(data) {\r\n                      if (isLazyLoadingNode)\r\n                          isLazyLoadingNode.lazyLoading = false;\r\n                      scope.searchResults = scope.searchResults.concat(getLeafNodeWithParentHierarchy(data.data.data[searchProperty]));\r\n                  };\r\n\r\n                  function getLeafNodeWithParentHierarchy(data) {\r\n                      var searchList = data;\r\n                      var searchDataCollection = [];\r\n                      var selectedData = _.groupBy(scope.selectedData, scope.codeProperty);\r\n                      _.each(searchList, function (searchData) {\r\n                          var searchDataHierarchy = searchData[levelWiseDataProperty];\r\n                          var sortedLevelSearchedData = _.sortBy(searchDataHierarchy, 'Level');\r\n                          var searchHitNode = sortedLevelSearchedData[sortedLevelSearchedData.length - 1];\r\n                          var parentString = \"\";\r\n                          var parentCodeString = \"\";\r\n\r\n                          _.each(sortedLevelSearchedData, function (data) {\r\n                              parentString = (parentString.length > 0) ? parentString + ' > ' + data[scope.titleProperty] : data[scope.titleProperty];\r\n                              parentCodeString = (parentCodeString.length > 0) ? parentCodeString + '>' + data[scope.codeProperty].toString() : data[scope.codeProperty].toString();\r\n                              data[parentStringConstant] = parentString;\r\n                              data[parentCodeStringConstant] = parentCodeString;\r\n                              data.selection = getSelectionFromLevelWiseData(data);\r\n                          });\r\n\r\n                          //searchHitNode.serverData = _.groupBy(sortedLevelSearchedData, scope.codeProperty);\r\n                          searchDataCollection.push(searchHitNode);\r\n                      });\r\n                      return searchDataCollection;\r\n                  };\r\n\r\n                  function resetSelectionForSearchNodes(node) {\r\n                      _.each(scope.searchResults, function (searchNode) {\r\n                          if (node[scope.codeProperty] != searchNode[scope.codeProperty] && searchNode[parentCodeStringConstant].indexOf((node[parentCodeStringConstant].length > 0) ? node[parentCodeStringConstant] : node[scope.codeProperty].toString()) != -1) {\r\n                              searchNode.selection = node.selection;\r\n                          } else {\r\n                              searchNode.selection = getSelectionFromLevelWiseData(searchNode);\r\n                          }\r\n                      });\r\n                  };\r\n\r\n                  function getSelectionFromLevelWiseData(node) {\r\n                      var searchLevel = node[scope.levelProperty];\r\n                      var groupedLevelData = _.groupBy(levelWiseData[levelKey + searchLevel], scope.codeProperty);\r\n                      var selectionState = (groupedLevelData[node[scope.codeProperty]]) ? groupedLevelData[node[scope.codeProperty]][0].selection : isPresentInInternalHierarchy(node) ? '1' : (node.IsSelected == false || node.IsSelected == null || node.IsSelected) ? getSelectionState(node.IsSelected) : '0';\r\n                      return selectionState;\r\n                  };\r\n\r\n                  function isPresentInInternalHierarchy(searchNode) {\r\n                      var retVal = false,\r\n                          len = scope.selectedData.length;\r\n                      for (var i = 0; i < len; i++) {\r\n                          var node = scope.selectedData[i];\r\n                          if (searchNode[parentCodeStringConstant].indexOf((node[parentCodeStringConstant].length > 0) ? node[parentCodeStringConstant] : node[scope.codeProperty].toString()) != -1) {\r\n                              retVal = true;\r\n                              break;\r\n                          }\r\n                      }\r\n                      return retVal;\r\n                  };\r\n\r\n                  /*function completeModelFromServerIfNeeded(node) {\r\n                      var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                      var dataRetrivalCount = parentHierarchy.length;\r\n                      parentHierarchy.length = dataRetrivalCount - 1;\r\n                      var recievedData = [];\r\n                      if (parentHierarchy.length > 0) {\r\n                          _.each(parentHierarchy, function(PASCode, index) {\r\n                              getChildsForParentAsPerBucket(node.serverData[PASCode][0], lazyLoadingBucket, 1, function(_node, data, isService, bucket, pageIndex) {\r\n                                  if (isService) {\r\n                                      if (data.action == 'success')\r\n                                          setLevelWiseData(data.data.data, _node);\r\n                                  };\r\n                                  dataRetrivalCount = dataRetrivalCount - 1;\r\n                                  if (dataRetrivalCount == 1) {\r\n                                      updateSelectionInDataSource(node);\r\n                                  }\r\n                              });\r\n                          });\r\n                      } else {\r\n                          updateSelectionInDataSource(node);\r\n                      }\r\n                  }*/\r\n\r\n                  function completeModelFromServerIfNeeded(node) {\r\n\r\n                      var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                      var levelNumber = node['Level'];\r\n                      var recievedData = [];\r\n\r\n                      if (!(levelWiseData[levelKey + node[scope.levelProperty]] && _.find(levelWiseData[levelKey + node[scope.levelProperty]], function (data) {\r\n                          return node[scope.codeProperty] == data[scope.codeProperty];\r\n                      }))) {\r\n                          var reqObj = {};\r\n                          reqObj[nodeExpandingCodeProperty] = [parseInt(parentHierarchy[parentHierarchy.length - 1])];\r\n\r\n                          //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function(responseData) {\r\n                          RESTApi.getData(navContext,\r\n                              function (responseData) {\r\n                              if (responseData.action == 'success') {\r\n                                  var allResultData = responseData.data.data.PAS_SearchList[0][levelWiseDataProperty];\r\n                                  var result = _.groupBy(allResultData, \"Level\");\r\n                                  var level = 1;\r\n                                  var levelData = [];\r\n                                  while (level) {\r\n                                      var obj = {};\r\n                                      obj[levelWiseDataProperty] = result[level];\r\n                                      obj['Level'] = level;\r\n                                      levelData.push(obj);\r\n                                      level = level + 1;\r\n                                      if (!result[level])\r\n                                          break;\r\n                                  };\r\n                                  createLevelWiseDataSet(levelData);\r\n                                  updateSelectionInDataSource(node);\r\n                              } else {\r\n                                  console.log('error');\r\n                              }\r\n                          }, reqObj, true, scope.treeType);\r\n                      } else {\r\n                          updateSelectionInDataSource(node);\r\n                      }\r\n                  }\r\n\r\n                  function updateSelectionInDataSource(node) {\r\n                      scope.selectNode(_.find(levelWiseData[levelKey + node.Level], function (data) {\r\n                          return data[scope.codeProperty] == node[scope.codeProperty];\r\n                      }), (node.selection == \"1\") ? \"0\" : \"1\", true);\r\n                      resetSelectionForSearchNodes(node);\r\n                  };\r\n\r\n                  scope.focusSearch = false;\r\n                  scope.isActive = false;\r\n                  scope.showMe = false;\r\n                  scope.showSearch = function () {\r\n                      scope.isActive = true;\r\n                      scope.showMe = true;\r\n                      scope.hideClose = true;\r\n                      $timeout(function () {\r\n                          scope.focusSearch = true;\r\n                      }, 100); \r\n                  }\r\n\r\n                  scope.hideSearch = function () {\r\n                    if(scope.searchFieldVal != \"\")\r\n                    {\r\n                        scope.searchFieldVal = \"\";    \r\n                        scope.noRecordsFound = false;\r\n                    }\r\n                    else\r\n                    {\r\n                            scope.searchFieldVal = \"\";\r\n                            scope.isActive = false;\r\n                            scope.focusSearch = false;\r\n                            scope.hideClose = false;\r\n                            scope.noRecordsFound = false;\r\n                            $(\"#SearchBtn\").focus();\r\n                    }\r\n                    scope.cancelTitle = scope.searchFieldVal == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                  }\r\n                  scope.editCallback = function () {\r\n\r\n                      scope.treeConfig.isReadOnly = false;\r\n                      scope.categories = [];\r\n                      lazyLoadMarker = [];\r\n                      scope.isLoading = true;\r\n                      scope.isError = false;\r\n                      totalID = [];\r\n                      totalName = [];\r\n\r\n                      initializePromise(true, true);\r\n                      renderLevels();\r\n                  }\r\n\r\n                  if (scope.config.useAs == \"inline\" && scope.config.export) {\r\n                      var exportLen = scope.config.export.length;\r\n                      for (var ex = 0; ex < exportLen; ex++) {\r\n                          setExport(scope.config.export[ex]);\r\n                      };\r\n                  }\r\n\r\n                  function setExport(key) { // setExport allow to access the isolated scope's functionality outside of directive\r\n                      if (scope.config.useAs != \"inline\") return; // if not useAs inline;\r\n                      !scope.config._export && (scope.config._export = {});\r\n                      if (key !== undefined) {\r\n                          scope.config._export[key] = typeof scope[key] == \"function\" ? function () {\r\n                              scope[key]()\r\n                          } : function () { return scope[key]; };\r\n                      }\r\n                  };\r\n\r\n                  scope.$on('$destroy', function () {\r\n                      deregisterConfigSelection();\r\n                      deregReqParam();\r\n                      deregReqContactCode();\r\n                      deregConfigData();\r\n                      deregSelectedNodes();\r\n                  });\r\n              },\r\n              templateUrl: 'shared/directives/smartHierarchy/smartHierarchyTemplate.html'\r\n          };\r\n      }])\r\n    .directive('myTemplate', function () {\r\n            return {\r\n                restrict: 'EA',\r\n                templateUrl: function (elem, attr) {\r\n                    return attr.type;\r\n                }\r\n            };\r\n        })\r\n.directive('ngIndeterminate', [\"$compile\", function ($compile) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attributes) {\r\n            scope.$watch(attributes['ngIndeterminate'], function (value) {\r\n                element.prop('indeterminate', value);\r\n            });\r\n        }\r\n    };\r\n}])\r\n.directive('ngHighlight', ['$compile', 'hilitor', function ($compile, hilitor) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attributes) {\r\n            scope.$watch(attributes['ngHighlight'], function (value) {\r\n                new Hilitor(\"treeComponentContainer-\" + scope.hierarchyCounter).apply(value);\r\n            });\r\n        }\r\n    };\r\n}])\r\n.service('RESTApi', ['$http', '$q','APPCONSTANTS',\r\nfunction ($http, $q, APPCONSTANTS) {\r\n    var baseUrl;\r\n    var documenttype='';\r\n    if (APPCONSTANTS != undefined) {\r\n        if (APPCONSTANTS.userPreferences.OrderData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.OrderData.type.id;\r\n        }\r\n        if (APPCONSTANTS.userPreferences.RequisitionData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.RequisitionData.type.id;\r\n        }\r\n        if (APPCONSTANTS.userPreferences.ProcurementProfileData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.ProcurementProfileData.type.id;\r\n        }\r\n\r\n    }\r\n    var callbackTracker = [];\r\n    var userExecutionContext;\r\n    var documentId;\r\n    var contactCode;\r\n    var requestObjectToBeExtended = null;\r\n    var customeURL;\r\n\r\n    /*if(windows.location.origin.indexOf('smartdev') > -1 || windows.location.origin.indexOf('127') > -1)\r\n    {\r\n      env = \"DEV\";\r\n    }else if(windows.location.origin.indexOf('smartqc') > -1)\r\n    {\r\n      env = \"QC\";\r\n    }else if(windows.location.origin.indexOf('smartuat') > -1)\r\n    {\r\n      env = \"UAT\";\r\n    }else\r\n    {\r\n      env = \"PROD\";\r\n    }*/\r\n\r\n    /*this.setEnvironment = function(env)\r\n    {\r\n      switch(env) {\r\n        case \"DEV\":\r\n        baseUrl = 'https://gepdevsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"QC\":\r\n        baseUrl = 'https://gepqcsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"UAT\":\r\n        baseUrl = 'https://gepuatsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"PROD\":\r\n        baseUrl = 'https://gepsmart-rest.servicebus.windows.net/PortalRestService/';\r\n      }\r\n    }*/\r\n    this.setEnvironment = function (newURL) {\r\n        baseUrl = newURL + \"PortalRestService/\";\r\n    };\r\n    //baseUrl = APPCONSTANTS.userPreferences.URLs.AppURL;\r\n\r\n    this.setDocumentId = function (val) {\r\n        documentId = val;\r\n    };\r\n    this.setContactCode = function (val) {\r\n        contactCode = val;\r\n    };\r\n    this.setUserContext = function (val) {\r\n        userExecutionContext = val;\r\n    };\r\n    this.setRequestObject = function (val) {\r\n        requestObjectToBeExtended = val;\r\n    };\r\n    this.setUrl = function (val) {\r\n        customeURL = val;\r\n    };\r\n    function createRequest(mode, data, isOverrideInputPayload, treeType) {\r\n        var contactPasMappingMethod,\r\n             bpcCode ='&c=' + APPCONSTANTS.userPreferences.EncryptedBPC,\r\n            getPasDetailsMethod,\r\n            inputParameterKey,\r\n            getParentForNodeUrl;\r\n        if (!baseUrl) {\r\n            return null;\r\n        }\r\n        switch (mode) {\r\n            case \"PAS\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactPASMappingDetilsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactPASMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetPASDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'PASInputParam_Levels';\r\n                getParentForNodeUrl = \"GetPASLevelDetailsByPASCodes?oloc=218\" + bpcCode;\r\n                break;\r\n            case \"REG\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactRegionMappingDetailsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactRegionMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetRegionDetails?oloc=218' + bpcCodes;\r\n                inputParameterKey = 'RegionInputParam_Levels';\r\n                getParentForNodeUrl = \"GetREGIONLevelDetailsByRegionIds\";\r\n                break;\r\n\r\n            case \"ORG\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactORGMappingDetailsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactOrgMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetORGDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'ORG_InputParams';\r\n                getParentForNodeUrl = \"GetOrgEntityLevelDetailsByEntityDetailCodes\";\r\n                break;\r\n        }\r\n\r\n\r\n        var propmiseForThisInstance = $q.defer();\r\n        var requestObject = {\r\n            'url': baseUrl,\r\n            'headers': {\r\n                'Content-Type': 'application/json',\r\n                'UserExecutionContext': null\r\n            },\r\n            'data': {},\r\n            'method': 'POST',\r\n            'timeout': propmiseForThisInstance.promise\r\n        };\r\n        requestObject['data'][inputParameterKey] = {\r\n            'ContactCode': null,\r\n            'DocumentCode': null\r\n        };\r\n        if (mode != undefined) {\r\n            if (mode.toLowerCase() == 'pas' && (documenttype == '8' || documenttype == '7' || documenttype == '38')) {\r\n                var userRestrictCategoryTree = _.where(APPCONSTANTS.userPreferences.CommonSettings.lstSettings, { \"FieldName\": \"RestrictUserMappedCategorySelection\" });\r\n                if (userRestrictCategoryTree != undefined && userRestrictCategoryTree.length > 0) {\r\n                    if (userRestrictCategoryTree[0].FieldValue.toLowerCase() == 'false') {\r\n                        contactCode = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isOverrideInputPayload == true) {\r\n            requestObject.url = requestObject.url + getParentForNodeUrl;\r\n            requestObject.data = data;\r\n        } else {\r\n            if (contactCode) {\r\n                requestObject.data[inputParameterKey].ContactCode = contactCode;\r\n                requestObject.url = requestObject.url + contactPasMappingMethod;\r\n            } else {\r\n                requestObject.data[inputParameterKey].ContactCode = null;\r\n                requestObject.url = requestObject.url + getPasDetailsMethod;\r\n            }\r\n            requestObject.data[inputParameterKey].DocumentCode = (documentId) ? documentId : null;\r\n\r\n        }\r\n\r\n        if (customeURL) {\r\n            requestObject.url = customeURL;\r\n            //getPasDetailsMethod = 'GetORGDetails';\r\n            //inputParameterKey = 'ORG_InputParams';\r\n            //getParentForNodeUrl = \"GetOrgEntityLevelDetailsByEntityDetailCodes\";\r\n        }\r\n        requestObject.headers.UserExecutionContext = userExecutionContext;\r\n        requestObject.promise = propmiseForThisInstance;\r\n        if (requestObjectToBeExtended == null && contactCode == null) {\r\n            requestObject.data[inputParameterKey] = _.extend(requestObject.data[inputParameterKey], data);\r\n        } else {\r\n            requestObject.data[inputParameterKey] = _.extend(_.extend(requestObject.data[inputParameterKey], data), requestObjectToBeExtended)\r\n        }\r\n        return requestObject;\r\n    };\r\n    this.abort = function (reqParam) {\r\n        var dataFoundOnIndex;\r\n        var promise = _.find(callbackTracker, function (reqObj, index) {\r\n            dataFoundOnIndex = index;\r\n            return _.isEqual(reqParam, reqObj.data);\r\n        }).promise;\r\n        if (promise) {\r\n            promise.resolve();\r\n            console.log('canceled - ' + reqParam);\r\n        }\r\n    };\r\n\r\n    this.getData = function (mode, callback, data, isOverrideInputPayload, treeType) {\r\n        var requestObject = new createRequest(mode, data, isOverrideInputPayload, treeType);\r\n        if (!(_.isEmpty(requestObject))) {\r\n            callbackTracker.push({\r\n                'key': JSON.stringify(requestObject.data),\r\n                'callback': callback,\r\n                'promise': requestObject.promise,\r\n                'data': data\r\n            });\r\n            serviceCall(requestObject);\r\n        }\r\n    };\r\n\r\n    function serviceCall(req) {\r\n        $http(req).then(function (response) {\r\n            var dataFoundOnIndex;\r\n            var Callback = _.find(callbackTracker, function (reqObj, index) {\r\n                dataFoundOnIndex = index;\r\n                return _.isEqual(JSON.parse(reqObj.key), req.data);\r\n            }).callback;\r\n            callbackTracker.splice(dataFoundOnIndex, 1);\r\n            Callback({\r\n                'action': 'success',\r\n                'data': response\r\n            });\r\n        }, function (error) {\r\n            var dataFoundOnIndex;\r\n            var Callback = _.find(callbackTracker, function (reqObj, index) {\r\n                dataFoundOnIndex = index;\r\n                return _.isEqual(JSON.parse(reqObj.key), req.data);\r\n            }).callback;\r\n            callbackTracker.splice(dataFoundOnIndex, 1);\r\n            Callback({\r\n                'action': 'failure',\r\n                'data': error\r\n            });\r\n        });\r\n    };\r\n}]);\r\n\r\n})(angular);","// Original JavaScript code by Chirp Internet: www.chirp.com.au\n// Please acknowledge use of this code by including this header.\n// 2/2013 jon: modified regex to display any match, not restricted to word boundaries.\n\n// License at http://www.the-art-of-web.com/copyright.html\n\n(function ( window, factory ) {\n\n  if ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n    // Expose a factory as module.exports in loaders that implement the Node\n    // module pattern (including browserify).\n    // This accentuates the need for a real window in the environment\n    // e.g. var jQuery = require(\"jquery\")(window);\n    module.exports = function( w ) {\n      w = w || window;\n      if ( !w.document ) {\n        throw new Error(\"Hilitor requires a window with a document\");\n      }\n      return factory( w.document );\n    };\n  } else {\n    if ( typeof define === \"function\" && define.amd ) {\n      // AMD. Register as a named module.\n      define( [], function() {\n        return factory(document);\n      });\n    } else {\n        // Browser globals\n        window.Hilitor = factory(document);\n    }\n  }\n\n// Pass this, window may not be defined yet\n}(this, function ( document, undefined ) {\n\n\nfunction Hilitor(id, tag, options)\n{\n  var targetNode = document.getElementById(id) || document.body;\n  var hiliteTag = tag || \"EM\";\n  var skipTags = new RegExp(\"^(?:SCRIPT|FORM|INPUT|TEXTAREA|IFRAME|VIDEO|AUDIO)$\");\n  var colors = [\"#ff6\"];\n  var wordColor = [];\n  var colorIdx = 0;\n  var matchRegex = \"\";\n  var openLeft = true;\n  var openRight = true;\n  options = options || {};\n  if (typeof options.onStart !== 'function') {\n    options.onStart = function () { /* return FALSE when you want to abort */ };\n  }\n  if (typeof options.onFinish !== 'function') {\n    options.onFinish = function () { /* What you return here is returned by Hilitor.apply() */ return true; };\n  }\n  if (typeof options.onDoOne !== 'function') {\n    options.onDoOne = function (node) { /* return FALSE when you want to skip the highlighting change for this node */ };\n  }\n\n  this.setMatchType = function(type)\n  {\n    switch(type)\n    {\n    case \"left\":\n      openLeft = false;\n      openRight = true;\n      break;\n    case \"right\":\n      openLeft = true;\n      openRight = false;\n      break;\n    default:\n    case \"open\":\n      openLeft = openRight = true;\n      break;\n    case \"complete\":\n      openLeft = openRight = false;\n      break;\n    }\n  };\n\n  this.setRegex = function (input)\n  {\n    input = input.replace(/^[^\\w]+|[^\\w]+$/g, \"\").replace(/[^\\w'\\-]+/g, \"|\");\n    var re = \"(\" + input + \")\";\n    if(!openLeft) re = \"\\\\b\" + re;\n    if(!openRight) re = re + \"\\\\b\";\n    matchRegex = new RegExp(re, \"i\");\n  };\n\n  this.getRegex = function ()\n  {\n    var retval = matchRegex.toString();\n    retval = retval.replace(/^\\/(\\\\b)?|(\\\\b)?\\/i$/g, \"\");\n    retval = retval.replace(/\\|/g, \" \");\n    return retval;\n  };\n\n  // recursively apply word highlighting\n  this.hiliteWords = function (node)\n  {\n    var i;\n\n    if(!node)\n      return;\n    if(!matchRegex)\n      return;\n    if(skipTags.test(node.nodeName))\n       return;\n    if(node.nodeName === hiliteTag && node.className === \"hilitor\")\n      return;\n\n    if(node.hasChildNodes()) {\n      for(i = 0; i < node.childNodes.length; i++) {\n        this.hiliteWords(node.childNodes[i]);\n      }\n    }\n    if(node.nodeType === 3) { // NODE_TEXT\n      if((nv = node.nodeValue) && (regs = matchRegex.exec(nv))) {\n        if (false !== options.onDoOne.call(this, node)) {\n          if(!wordColor[regs[0].toLowerCase()]) {\n            wordColor[regs[0].toLowerCase()] = colors[colorIdx++ % colors.length];\n          }\n\n          var match = document.createElement(hiliteTag);\n          match.appendChild(document.createTextNode(regs[0]));\n          match.className = \"hilitor\";\n          match.style.backgroundColor = wordColor[regs[0].toLowerCase()];\n          match.style.fontStyle = \"inherit\";\n          match.style.color = \"#000\";\n\n          var after = node.splitText(regs.index);\n          after.nodeValue = after.nodeValue.substring(regs[0].length);\n          node.parentNode.insertBefore(match, after);\n        }\n      }\n    }\n  };\n\n  // remove highlighting\n  this.remove = function ()\n  {\n    var arr, i;\n    do {\n      arr = document.querySelectorAll(hiliteTag + \".hilitor\");\n      i = 0;\n      while (i < arr.length && (el = arr[i])) {\n        // store the reference to the parent of the hilite tag as that node itself, \n        // and all its links, is invalidated in the next .replaceChild() call:\n        var parentNode = el.parentNode;\n        if (!parentNode) {\n          i++;      \n          // this entry would otherwise crash in the code below; we can however improve \n          // on the total run-time costs by cutting back on the number of times we trigger\n          // the outer loop (which serves as a recovery mechanism anyway) by continuing\n          // with this querySelectorAll()'s results, but at it's higher indexes, which\n          // are very probably still valid/okay. This saves a number of outer loops and \n          // thus a number of querySelectorAll calls.\n          continue;\n        }\n        // Note that this stuff can crash (due to the parentNode being nuked) when multiple\n        // snippets in the same text node sibling series are merged. That's what the\n        // parentNode check is for. Ugly. Even while the .querySelectorAll() 'array' is updated\n        // automatically, which would imply that this never occurs, yet: it does. :-(\n        parentNode.replaceChild(el.firstChild, el);\n        // and merge the text snippets back together again.\n        parentNode.normalize();\n      }\n    } while (arr.length > 0);\n  };\n\n  // start highlighting at target node\n  this.apply = function (input)\n  {\n    // always remove all highlight markers which have been done previously\n    this.remove();\n    if(!input) {\n      return false;\n    }\n    this.setRegex(input);\n    var rv = options.onStart.call(this);\n    if (rv === false) {\n      return rv;\n    }\n    // ensure all text node series are merged, etc. so that we don't have to bother with fragmented texts in the search/scan.\n    targetNode.normalize();\n    this.hiliteWords(targetNode);\n    return options.onFinish.call(this);\n  };\n}\n\n\n  return Hilitor;\n}));\n","(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartLastRepeaterElement', function () {\r\n\t\treturn function (scope, element, attrs) {\r\n\t\t    if (attrs.callbackOnItem === 'true') {\r\n\t\t        scope.$emit('AllRepeaterElement', element, attrs);\r\n\t\t    }\r\n\t\t    if (scope.$last) {\r\n\t\t        scope.$emit('LastRepeaterElement', element, attrs);\r\n\t\t    }\r\n\t\t};\r\n\t});\r\n})(angular);","(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartMaps', [\"$compile\", \"$sce\", \"$templateRequest\", \"$timeout\", \"$translate\", function ($compile, $sce, $templateRequest, $timeout, $translate) {\r\n        return {\r\n            restrict: 'E',\r\n            template: '<div><div ng-if=\"!mapLoaded\" class=\"row\"><div class=\"mapinfocontainer center-align\"> <i class=\"icon grey-text\"><svg><use xlink:href=\"#icon_Info\"></use></svg></i> <span class=\"center-align displayBlock\">' + $translate.instant('couldNotLoadMap') + '</span> <span class=\"center-align displayBlock\">' + $translate.instant('checkAccessPermission') + '<a href=\"javascript:void(0)\" ng-click=\"viewSwitcher()\">' + $translate.instant('tableView') + '</a>.</span></div></div></div>',\r\n            scope: true,\r\n            replace: true,\r\n            link: function (scope, element, attrs) {\r\n\r\n                //scope.locations = scope[attrs.locations];\r\n                var locationsOpt = scope.$eval(attrs.locations);\r\n                scope.locations = scope[locationsOpt[0]][locationsOpt[1]];\r\n\r\n                scope.mapLoaded = true;\r\n                if (typeof window.google !== 'object' || typeof window.google.maps !== 'object') {\r\n                    scope.mapLoaded = false;\r\n                    scope.viewSwitcher = function () {\r\n                        scope.locations.viewSwitcherFlag.flag = false;\r\n                    };\r\n                    return false;\r\n                }\r\n\r\n                var myLatLng = new google.maps.LatLng(21, 78);\r\n                var mapOptions = {\r\n                    center: myLatLng,\r\n                    maxZoom: 14,\r\n                    minZoom: 2,\r\n                    streetViewControl: false,\r\n                    mapTypeControl: false,\r\n                    mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n                    styles: [\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"elementType\": \"labels.text.fill\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                               {\r\n                                   \"visibility\": \"on\"\r\n                               },\r\n                               {\r\n                                   \"color\": \"#6fa4e4\",\r\n                                   \"font-weight\": \"normal\"\r\n                               }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t   {\r\n\t\t\t\t\t\t       \"elementType\": \"labels.text.stroke\",\r\n\t\t\t\t\t\t       \"stylers\": [\r\n                                 {\r\n                                     \"visibility\": \"off\"\r\n                                 }\r\n\t\t\t\t\t\t       ]\r\n\t\t\t\t\t\t   },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.fill\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.stroke\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"labels\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#6fa4e4\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.land_parcel\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.locality\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                              {\r\n                                  \"color\": \"#6fa4e4\",\r\n                                  \"font-weight\": \"normal\"\r\n                              },\r\n                               {\r\n                                   \"visibility\": \"simplified\"\r\n                               }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.neighborhood\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"e6ebf1\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.stroke\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"elementType\": \"labels\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#6fa4e4\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.man_made\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"on\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural.landcover\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural.terrain\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"poi\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"road\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.airport\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.bus\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.rail\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"water\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#ffffff\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t }\r\n                    ]\r\n                };\r\n                element.height(480);\r\n\r\n                var map = new google.maps.Map(document.getElementById(attrs.id), mapOptions);\r\n\r\n                var mcOptions = { gridSize: 50, maxZoom: 14, imagePath: scope.locations.baseImgUrl + 'm' };\r\n\r\n                var infowindow = new google.maps.InfoWindow({\r\n                    maxWidth: 360\r\n                });\r\n                var latlngbounds = new google.maps.LatLngBounds();\r\n                var markers = [];\r\n                var img;\r\n                var key;\r\n                var mapDataLeng = scope.locations.locData.length,\r\n                    dataGeoDataTemp,\r\n\t\t\t        markerCluster;\r\n\r\n                markerCluster = new MarkerClusterer(map, markers, mcOptions);\r\n                markerCluster.styles_.forEach(function (val, ind) {\r\n                    val.textColor = \"white\";\r\n                });\r\n\r\n                // onClickZoom OVERRIDE\r\n                markerCluster.onClickZoom = function (event) { return multiChoice(markerCluster, event); };\r\n                scope.locationClusterMarker = {};\r\n                for (key = 0; key < mapDataLeng; key++) {\r\n                    var geocoder = new google.maps.Geocoder();\r\n                    (function (value, key) {\r\n                        mapGeocodeFn(value, key, mapDataLeng)\r\n\r\n                    })(scope.locations.locData[key], key);\r\n                };\r\n\r\n                function infoWindowStyle() {\r\n\r\n                    var iwOuter = $('.gm-style-iw');\r\n                    var iwBackground = iwOuter.prev();\r\n                    var $infoWin = iwOuter.parent('div').parent('div').parent('div');\r\n\r\n                    $infoWin.css({ visibility: 'hidden' });\r\n                    iwOuter.next().css('display', 'none');\r\n                    iwOuter.children(':nth-child(1)').css({ 'overflow': 'visible' });\r\n                    iwBackground.children(':nth-child(2)').css({ 'display': 'none' });\r\n                    iwBackground.children(':nth-child(4)').css({ 'display': 'none' });\r\n                    iwOuter.parent().css({ width: '360px' });\r\n                    iwOuter.css({ 'z-index': '-1' });\r\n                    $infoWin.css({ visibility: 'visible' });\r\n\r\n                }\r\n\r\n                function mapGeocodeFn(value, key, mapDataLeng) {\r\n                    var addressData = value.countryInfo ? value.countryInfo.CountryCode.toString() : value.state ? value.state.toString() : '',\r\n                        zipcode = value.zipcode ? value.zipcode.toString() : '';\r\n                    geocoder.geocode({\r\n                        componentRestrictions: {\r\n                            country: addressData,\r\n                            postalCode: zipcode\r\n                        }\r\n                    }, function (results, status) {\r\n                        if (status == google.maps.GeocoderStatus.OK) {\r\n\r\n                            if (key >= 7) {\r\n                                img = key % 7;\r\n                            } else {\r\n                                img = key;\r\n                            }\r\n\r\n                            var marker = new google.maps.Marker({\r\n                                position: new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()),\r\n                                map: map,\r\n                                title: value.state,\r\n                                id: key,\r\n                                //animation: google.maps.Animation.DROP,\r\n                                icon: scope.locations.baseImgUrl + \"cmarker\" + img + \".png\"\r\n                            });\r\n                            marker.setMap(map);\r\n                            markers.push(marker);\r\n\r\n                            markerCluster.addMarkers(markers);\r\n\r\n                            google.maps.event.addListener(marker, 'click', function () {\r\n                                var marker = this;\r\n                                //infowindow.setContent($compile(linker)(scope)[0]);\r\n                                scope.locations.id = marker.id;\r\n                                infowindow.open(map, marker);\r\n                                infoWindowStyle();\r\n                            });\r\n\r\n                            //AutoZoom map to fit all markers\r\n                            latlngbounds.extend(new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()));\r\n                            map.fitBounds(latlngbounds);\r\n                        }\r\n                        dataGeoDataTemp = markers.length ? false : true;\r\n                        if (dataGeoDataTemp != scope.locations.dataGeoData) {\r\n                            scope.$apply(function () {\r\n                                scope.locations.dataGeoData = dataGeoDataTemp;\r\n                            });\r\n                        }\r\n\r\n                        if (dataGeoDataTemp && scope.locations.viewSwitcherFlag.flag) {\r\n                            scope.$apply(function () {\r\n                                scope.locations.viewSwitcherFlag.flag = false;\r\n                            });\r\n                        }\r\n                    });\r\n                };\r\n                function multiChoice(mc, event) {\r\n\r\n                    scope.locationClusterMarker = event.cluster_;\r\n\r\n                    //map.panTo(event.cluster_.markers_[0].position);\r\n\r\n                    var clusterDom = '<ul id=\"dropdown1\" class=\"dropdown-content clusterDomContainer\"><li ng-click=\"clusterListFn(marker)\" ng-repeat=\"marker in locationClusterMarker.markers_\"><a href=\"javascript:void(0)\" class=\"grey-text text-darken-4\">{{locations.locData[marker.id].locname}}</a></li></ul>';\r\n                    clusterDom = $compile(clusterDom)(scope);\r\n                    if (!angular.element(event.div_).hasClass('clusterDomContainer-dropdown-button')) {\r\n                        angular.element(event.div_).addClass('clusterDomContainer-dropdown-button').attr({ 'data-activates': 'dropdown1', 'data-stoppropagation': true }).append(clusterDom);\r\n                        setTimeout(function () {\r\n                            var $dropBtn = angular.element('.clusterDomContainer-dropdown-button');\r\n                            $dropBtn.dropdown({\r\n                                constrain_width: false\r\n                            });\r\n                            $dropBtn.trigger('click');\r\n\r\n                        }, 10)\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                var unbindWatch = scope.$watch('locations.mapReinit', function (val) {\r\n                    if (val.reinit) {\r\n                        mapDataLeng = scope.locations.locData.length;\r\n                        infowindow.close();\r\n                        if (markerCluster) {\r\n                            markerCluster.clearMarkers();\r\n                            markers = [];\r\n                        }\r\n                        for (key = 0; key < mapDataLeng; key++) {\r\n                            var geocoder = new google.maps.Geocoder();\r\n                            (function (value, key) {\r\n                                mapGeocodeFn(value, key, mapDataLeng);\r\n                            })(scope.locations.locData[key], key);\r\n                        };\r\n                    }\r\n\r\n                    if (val.refresh) {\r\n                        setTimeout(function () {\r\n                            google.maps.event.trigger(map, \"resize\");\r\n                            map.fitBounds(latlngbounds);\r\n                            var zoom = map.getZoom();\r\n                            map.setZoom(zoom > 14 ? 14 : zoom);\r\n                        }, 100);\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    unbindWatch();\r\n                    scope.dataOption = null;\r\n                    infowindow = null;\r\n                    latlngbounds = null;\r\n                    markers = null;\r\n                    mapOptions = null;\r\n                    map = null;\r\n                    geocoder = null;\r\n                });\r\n\r\n                scope.clusterListFn = function (data) {\r\n                    var marker = data;\r\n                    $timeout(function () {\r\n                        scope.locations.id = marker.id;\r\n                        infowindow.setPosition(marker.position);\r\n                        infowindow.open(map);\r\n                        infoWindowStyle();\r\n                    }, 10);\r\n                };\r\n\r\n                google.maps.event.addListener(map, 'click', function (event) {\r\n                    if (infowindow) {\r\n                        var $locationCardDropdown = angular.element('.mapdropdownbtn');\r\n                        if ($locationCardDropdown.hasClass('active')) {\r\n                            $locationCardDropdown.trigger('click');\r\n                        }\r\n                        infowindow.close();\r\n                    }\r\n                });\r\n                var templateUrl = $sce.getTrustedResourceUrl(scope.locations.infoTemplateURL);\r\n                var linker;\r\n                $templateRequest(templateUrl).then(function (template) {\r\n                    linker = template;\r\n                    infowindow.setContent($compile(linker)(scope)[0]);\r\n                });\r\n                google.maps.event.addDomListener(map, 'zoom_changed', function () {\r\n                    if (infowindow) {\r\n                        var $locationCardDropdown = angular.element('.mapdropdownbtn');\r\n                        if ($locationCardDropdown.hasClass('active')) {\r\n                            $locationCardDropdown.trigger('click');\r\n                        }\r\n                        infowindow.close();\r\n                    }\r\n                    angular.element('#dropdown1').remove();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})(angular);","(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartMetadataChips', ['debouncer', function (debouncer) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\tscope: {\r\n\t\t\t\t\"smartmetadata\": \"=metadata\",\r\n\t\t\t\t\"metadatatitle\": \"@\",\r\n\t\t\t\t\"maxlength\": \"@\",\r\n\t\t\t\t\"callBack\": \"&\"\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tscope.fieldClass = typeof attrs.fieldClass === 'undefined' ? 's4' : attrs.fieldClass;\r\n\t\t\t\tscope.itemTotal = typeof attrs.itemTotal === 'undefined' ? 3 : (parseInt(attrs.itemTotal, 10) <= 0 ? 0 : parseInt(attrs.itemTotal, 10));\r\n\t\t\t\tscope.fieldkey = typeof attrs.fieldkey === 'undefined' ? 'name' : attrs.fieldkey;\r\n\t\t\t\tscope.showMoreChips = 0;\r\n\r\n\t\t\t\tattrs.$observe('optionId', function () {\r\n\t\t\t\t\tscope.optionId = attrs.optionId;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.$on('LastRepeaterElement', function (scope, element, attrs) {\r\n\t\t\t\t\tdebouncer.add(function () {\r\n\t\t\t\t\t\tvar $chipsActiceContainer;\r\n\t\t\t\t\t\t$chipsActiceContainer = typeof $chipsActiceContainer !== 'undefined' ? $chipsActiceContainer : angular.element('#' + scope.targetScope.$parent.optionId + '-chips-0');\r\n\t\t\t\t\t\tif ($chipsActiceContainer) {\r\n\t\t\t\t\t\t\t$chipsActiceContainer.css({ 'transition': 'all .5s ease-in-out', 'background': '#e4e4e4', 'color': '#000' });\r\n\t\t\t\t\t\t\t$chipsActiceContainer.find('.chips-icon').css({ 'transition': 'all .5s ease-in-out', 'color': '#9e9e9e' });\r\n\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\t$chipsActiceContainer.css('transition', 'none').find('.chips-icon').css('transition', 'none');\r\n\t\t\t\t\t\t\t}, 500);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 100);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.metadataAdd = function (data, $e) {\r\n\t\t\t\t\tvar metadataContainer = angular.element('#' + scope.optionId).width() - 200,\r\n\t\t\t\t\t\t$chipsActiceContainer,\r\n\t\t\t\t\t\tfieldKey = scope.fieldkey;\r\n\t\t\t\t\tif (angular.isString(data.displayfield.title)) {\r\n\t\t\t\t\t    data.displayfield.title = data.displayfield.title.trim();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!data.displayfield.title) {\r\n\t\t\t\t\t    data.displayfield.isfocus = true;\r\n\t\t\t\t\t    return 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$chipsActiceContainer = angular.element('#' + scope.optionId + '-chips-0');\r\n\t\t\t\t\tif ($chipsActiceContainer) {\r\n\t\t\t\t\t\t$chipsActiceContainer.css({ 'transition': 'none', 'background': '#159dfc', 'color': '#fff' });\r\n\t\t\t\t\t\t$chipsActiceContainer.find('.chips-icon').css({ 'transition': 'none', 'color': '#fff' });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.options.unshift({});\r\n\t\t\t\t\tdata.options[0][fieldKey] = data.displayfield.title;\r\n\t\t\t\t\tdata.displayfield.title = \"\";\r\n\t\t\t\t\tdata.displayfield.isfocus = true;\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataCheck = function (data, $e) {\r\n\t\t\t\t\tvar char = $e.which || $e.keyCode,\r\n\t\t\t\t\t\tcharReq = [13, 188, 186],\r\n\t\t\t\t\t\tcharReqLength = charReq.length,\r\n\t\t\t\t\t\tcharReqKey,\r\n\t\t\t\t\t\ti;\r\n\r\n\t\t\t\t\tif (data.displayfield.title) {\r\n\t\t\t\t\t\tfor (i = 0; i < charReqLength; i++) {\r\n\t\t\t\t\t\t\tif (char === charReq[i]) {\r\n\t\t\t\t\t\t\t\tcharReqKey = charReq[i] === 188 ? ',' : charReq[i] === 186 ? ';' : '';\r\n\t\t\t\t\t\t\t\tif (charReqKey) {\r\n\t\t\t\t\t\t\t\t\tdata.displayfield.title = data.displayfield.title.replace(charReqKey, '');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tangular.element($e.currentTarget).blur();\r\n\t\t\t\t\t\t\t\tscope.metadataAdd(data, $e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar beforeDelete = function (obj) {\r\n\t\t\t\t    scope.callBack({\r\n\t\t\t\t        data: {\r\n\t\t\t\t            'data': obj.data.chipData.options[obj.data.index],\r\n\t\t\t\t            'type': 'delete', callback: deleteCallback\r\n\t\t\t\t        }\r\n\t\t\t\t    });\r\n\t\t\t\t    function deleteCallback(a) {\r\n\t\t\t\t        if (a) { obj.success() }\r\n\t\t\t\t        else { obj.reject() }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.metadataDelete = function (data, ind) {\r\n\t\t\t\t    if (attrs.callBack) {\r\n\t\t\t\t        beforeDelete({\r\n\t\t\t\t            data: { chipData: data, index: ind },\r\n\t\t\t\t            success: function () {\r\n\t\t\t\t                // user wants to delete\r\n\t\t\t\t                data.options.splice(ind, 1);\r\n\t\t\t\t                scope.$apply();\r\n\t\t\t\t            },\r\n\t\t\t\t            reject: function () {\r\n\t\t\t\t                // deletion rejected!\r\n\t\t\t\t            }\r\n\t\t\t\t        });\r\n\t\t\t\t    } else {\r\n\t\t\t\t        data.options.splice(ind, 1);\r\n\t\t\t\t    }\r\n\t\t\t\t};\r\n\t\t\t\tscope.smartmetachipTitleClick = function (data, ind) {\r\n\t\t\t\t\tangular.isFunction(scope.callBack) && scope.callBack({ data: { 'data': data.options[ind], 'type': 'add' } });\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataShowMore = function (cont) {\r\n\t\t\t\t\tangular.element('#' + cont).css('transition', '1s ease-in-out');\r\n\t\t\t\t\tdebouncer.add(function () {\r\n\t\t\t\t\t\tscope.showMoreChips = 1;\r\n\t\t\t\t\t}, 10);\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataLessMore = function (cont) {\r\n\t\t\t\t\tangular.element('#' + cont).css('transition', 'none');\r\n\t\t\t\t\tscope.showMoreChips = 0;\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/smartMetadataChips/smartMetadataChipsTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})(angular);","(function () {\r\n\t'use strict';\r\n\tangular.module('SMART2').value('uiSliderConfig', {}).directive('smartRangeSlider', ['uiSliderConfig', '$timeout', function (uiSliderConfig, $timeout) {\r\n\t\tuiSliderConfig = uiSliderConfig || {};\r\n\t\treturn {\r\n\t\t\trequire: 'ngModel',\r\n\t\t\tcompile: function () {\r\n\t\t\t\tvar preLink = function (scope, elm, attrs, ngModel) {\r\n\r\n\t\t\t\t\tfunction parseNumber(n, decimals) {\r\n\t\t\t\t\t\treturn (decimals) ? parseFloat(n) : parseInt(n, 10);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar directiveOptions = angular.copy(scope.$eval(attrs.uiSlider));\r\n\t\t\t\t\tvar options = angular.extend(directiveOptions || {}, uiSliderConfig);\r\n\t\t\t\t\t// Object holding range values\r\n\t\t\t\t\tvar prevRangeValues = {\r\n\t\t\t\t\t\tmin: null,\r\n\t\t\t\t\t\tmax: null\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// convenience properties\r\n\t\t\t\t\tvar properties = ['min', 'max', 'step', 'lowerBound', 'upperBound'];\r\n\t\t\t\t\tvar useDecimals = (!angular.isUndefined(attrs.useDecimals)) ? true : false;\r\n\t\t\t\t\tvar updateOn = (angular.isDefined(options['updateOn'])) ? options['updateOn'] : 'slide'\r\n\r\n\t\t\t\t\tvar init = function () {\r\n\t\t\t\t\t\t// When ngModel is assigned an array of values then range is expected to be true.\r\n\t\t\t\t\t\t// Warn user and change range to true else an error occurs when trying to drag handle\r\n\t\t\t\t\t\tif (angular.isArray(ngModel.$viewValue) && options.range !== true) {\r\n\t\t\t\t\t\t\tconsole.warn('Change your range option of ui-slider. When assigning ngModel an array of values then the range option should be set to true.');\r\n\t\t\t\t\t\t\toptions.range = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Ensure the convenience properties are passed as options if they're defined\r\n\t\t\t\t\t\t// This avoids init ordering issues where the slider's initial state (eg handle\r\n\t\t\t\t\t\t// position) is calculated using widget defaults\r\n\t\t\t\t\t\t// Note the properties take precedence over any duplicates in options\r\n\t\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\t\tif (angular.isDefined(attrs[property])) {\r\n\t\t\t\t\t\t\t\toptions[property] = parseNumber(attrs[property], useDecimals);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\telm.slider(options);\r\n\t\t\t\t\t\tinit = angular.noop;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Find out if decimals are to be used for slider\r\n\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\t// support {{}} and watch for updates\r\n\t\t\t\t\t\tattrs.$observe(property, function (newVal) {\r\n\t\t\t\t\t\t\tif (!!newVal) {\r\n\t\t\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\t\t\toptions[property] = parseNumber(newVal, useDecimals);\r\n\t\t\t\t\t\t\t\telm.slider('option', property, parseNumber(newVal, useDecimals));\r\n\t\t\t\t\t\t\t\tngModel.$render();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\tattrs.$observe('disabled', function (newVal) {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\telm.slider('option', 'disabled', !!newVal);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Watch ui-slider (byVal) for changes and update\r\n\t\t\t\t\tscope.$watch(attrs.uiSlider, function (newVal) {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\tif (newVal !== undefined) {\r\n\t\t\t\t\t\t\telm.slider('option', newVal);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\t// Late-bind to prevent compiler clobbering\r\n\t\t\t\t\t$timeout(init, 0, true);\r\n\r\n\t\t\t\t\t// Update model value from slider\r\n\t\t\t\t\telm.bind(updateOn, function (event, ui) {\r\n\t\t\t\t\t\tvar valuesChanged;\r\n\r\n\t\t\t\t\t\tif (ui.values) {\r\n\t\t\t\t\t\t\tvar boundedValues = ui.values.slice();\r\n\r\n\t\t\t\t\t\t\tif (options.lowerBound && boundedValues[0] < options.lowerBound) {\r\n\t\t\t\t\t\t\t\tboundedValues[0] = Math.max(boundedValues[0], options.lowerBound);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (options.upperBound && boundedValues[1] > options.upperBound) {\r\n\t\t\t\t\t\t\t\tboundedValues[1] = Math.min(boundedValues[1], options.upperBound);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (boundedValues[0] !== ui.values[0] || boundedValues[1] !== ui.values[1]) {\r\n\t\t\t\t\t\t\t\tvaluesChanged = true;\r\n\t\t\t\t\t\t\t\tui.values = boundedValues;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar boundedValue = ui.value;\r\n\r\n\t\t\t\t\t\t\tif (options.lowerBound && boundedValue < options.lowerBound) {\r\n\t\t\t\t\t\t\t\tboundedValue = Math.max(boundedValue, options.lowerBound);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (options.upperBound && boundedValue > options.upperBound) {\r\n\t\t\t\t\t\t\t\tboundedValue = Math.min(boundedValue, options.upperBound);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (boundedValue !== ui.value) {\r\n\t\t\t\t\t\t\t\tvaluesChanged = true;\r\n\t\t\t\t\t\t\t\tui.value = boundedValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tngModel.$setViewValue(ui.values || ui.value);\r\n\t\t\t\t\t\t$(ui.handle).find('.ui-slider-tip').text(ui.value);\r\n\t\t\t\t\t\tscope.$apply();\r\n\r\n\t\t\t\t\t\tif (valuesChanged) {\r\n\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\telm.slider('value', ui.values || ui.value);\r\n\t\t\t\t\t\t\t}, 0);\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Update slider from model value\r\n\t\t\t\t\tngModel.$render = function () {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\tvar method = options.range === true ? 'values' : 'value';\r\n\r\n\t\t\t\t\t\tif (options.range !== true && isNaN(ngModel.$viewValue) && !(ngModel.$viewValue instanceof Array)) {\r\n\t\t\t\t\t\t\tngModel.$viewValue = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (options.range && !angular.isDefined(ngModel.$viewValue)) {\r\n\t\t\t\t\t\t\tngModel.$viewValue = [0, 0];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Do some sanity check of range values\r\n\t\t\t\t\t\tif (options.range === true) {\r\n\t\t\t\t\t\t\t// previously, the model was a string b/c it was in a text input, need to convert to a array.\r\n\t\t\t\t\t\t\t// make sure input exists, comma exists once, and it is a string.\r\n\t\t\t\t\t\t\tif (ngModel.$viewValue && angular.isString(ngModel.$viewValue) && (ngModel.$viewValue.match(/,/g) || []).length === 1) {\r\n\t\t\t\t\t\t\t\t// transform string model into array.\r\n\t\t\t\t\t\t\t\tvar valueArr = ngModel.$viewValue.split(',');\r\n\t\t\t\t\t\t\t\tngModel.$viewValue = [Number(valueArr[0]), Number(valueArr[1])];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Check outer bounds for min and max values\r\n\t\t\t\t\t\t\tif (angular.isDefined(options.min) && options.min > ngModel.$viewValue[0]) {\r\n\t\t\t\t\t\t\t\tngModel.$viewValue[0] = options.min;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(options.max) && options.max < ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\tngModel.$viewValue[1] = options.max;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check min and max range values\r\n\t\t\t\t\t\t\tif (ngModel.$viewValue[0] > ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\t// Min value should be less to equal to max value\r\n\t\t\t\t\t\t\t\tif (prevRangeValues.min >= ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\t\tngModel.$viewValue[1] = prevRangeValues.min;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Max value should be less to equal to min value\r\n\t\t\t\t\t\t\t\tif (prevRangeValues.max <= ngModel.$viewValue[0]) {\r\n\t\t\t\t\t\t\t\t\tngModel.$viewValue[0] = prevRangeValues.max;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Store values for later user\r\n\t\t\t\t\t\t\tprevRangeValues.min = ngModel.$viewValue[0];\r\n\t\t\t\t\t\t\tprevRangeValues.max = ngModel.$viewValue[1];\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telm.slider(method, ngModel.$viewValue);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tscope.$watch(attrs.ngModel, function () {\r\n\t\t\t\t\t\tif (options.range === true) {\r\n\t\t\t\t\t\t\tngModel.$render();\r\n\r\n\t\t\t\t\t\t\t$(elm).find('.ui-slider-tip').each(function (i, tipElm) {\r\n\t\t\t\t\t\t\t\t$(tipElm).text(ngModel.$viewValue[i]);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$(elm).find('.ui-slider-tip').text(ngModel.$viewValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\tfunction destroy() {\r\n\t\t\t\t\t\tif (elm.hasClass('ui-slider')) {\r\n\t\t\t\t\t\t\telm.slider('destroy');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.$on(\"$destroy\", destroy);\r\n\t\t\t\t\telm.one('$destroy', destroy);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar postLink = function (scope, element, attrs, ngModel) {\r\n\t\t\t\t\t// Add tick marks if 'tick' and 'step' attributes have been setted on element.\r\n\t\t\t\t\t// Support horizontal slider bar so far. 'tick' and 'step' attributes are required.\r\n\t\t\t\t\tvar options = angular.extend({}, scope.$eval(attrs.uiSlider));\r\n\t\t\t\t\tvar properties = ['min', 'max', 'step', 'tick', 'tip'];\r\n\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\tif (angular.isDefined(attrs[property])) {\r\n\t\t\t\t\t\t\toptions[property] = attrs[property];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (angular.isDefined(options['tick']) && angular.isDefined(options['step'])) {\r\n\t\t\t\t\t\tvar total = parseInt((parseInt(options['max']) - parseInt(options['min'])) / parseInt(options['step']));\r\n\t\t\t\t\t\tfor (var i = total; i >= 0; i--) {\r\n\t\t\t\t\t\t\tvar left = ((i / total) * 100) + '%';\r\n\t\t\t\t\t\t\t$(\"<div/>\").addClass(\"ui-slider-tick\").appendTo(element).css({ left: left });\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (angular.isDefined(options['tip'])) {\r\n\t\t\t\t\t\t$timeout(function () {\r\n\t\t\t\t\t\t\tvar handles = element.find('.ui-slider-handle');\r\n\t\t\t\t\t\t\tif (handles && handles.length > 1 && ngModel.$viewValue && angular.isArray(ngModel.$viewValue)) {\r\n\t\t\t\t\t\t\t\t$(handles[0]).append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue[0] + '</div>');\r\n\t\t\t\t\t\t\t\t$(handles[1]).append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue[1] + '</div>');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\telement.find('.ui-slider-handle').append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue + '</div>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 10);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpre: preLink,\r\n\t\t\t\t\tpost: postLink\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();","(function (angular,$) {\r\n    /*\r\n        :: directive attributes\r\n                onResize    :   & // fires when element changes size\r\n          onHeightChange    :   & // fires when element's height change\r\n           onWidthChange    :   & // fires when element's width change\r\n    */\r\n    \"use strict\";\r\n    angular.module(\"SMART2\")\r\n        .directive(\"smartResize\", [\"$timeout\", \"$parse\", smartResizeDir]);\r\n\r\n    function smartResizeDir($timeout, $parse) {\r\n        return {\r\n            link: function (scope, element, attrs) {\r\n                var callbacks = {\r\n                    onResize: attrs.onResize ? $parse(addArguments(attrs.onResize)) : null,\r\n                    onHeightChange: attrs.onHeightChange ? $parse(addArguments(attrs.onHeightChange)) : null,\r\n                    onWidthChange: attrs.onWidthChange ? $parse(addArguments(attrs.onWidthChange)) : null\r\n                };\r\n                function addArguments(fn) {\r\n                    return fn.replace(/\\(\\)/, '(e)');\r\n                }\r\n                $timeout(function () {\r\n                    resizeElement({\r\n                        element: element.get(0),\r\n                        onResize: function (a) {\r\n                            callbacks.onResize(scope, { e: a });\r\n                        },\r\n                        onHeightChange: function (a) {\r\n                            callbacks.onHeightChange(scope, { e: a });\r\n                        },\r\n                        onWidthChange: function (a) {\r\n                            callbacks.onWidthChange(scope, { e: a });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function resizeElement(config) {\r\n                    var config = $.extend({\r\n                        element: null, // html element :: accepts Html Element not selector\r\n                        onResize: null, // callback fires after changed size of element :: accepts function\r\n                        onHeightChange: null, // callback fires after changed height of element :: accepts function\r\n                        onWidthChange: null // callback fires after changed width of element :: accepts function\r\n                    }, config),\r\n                        resizeSensorCss = 'width:100%;height:100%;position:absolute;left:0;top:0;z-index:-1;',\r\n                        sensorCss = 'position:absolute;left:0;top:0;overflow:hidden;height:100%;width:100%;',\r\n                        sensorElementCss = 'position:relative;top:0;',\r\n                        html = '<div class=\"resize-sensor\" style=\"' + resizeSensorCss + '\"><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"shrink\"><div class=\"sensor-element-shrink\" style=\"' + sensorElementCss + '\"></div></div><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"expand\"><div class=\"sensor-element-expand\" style=\"' + sensorElementCss + '\"></div></div></div>';\r\n\r\n                    var el = $(config.element),\r\n                        PD = { height: 0, width: 0 },\r\n                        PDC = { height: 0, width: 0 };\r\n                    if (el.length > 0) {\r\n                        var mainSensor = $(html);\r\n                        el.css(\"position\", \"relative\").append(mainSensor);\r\n                        mainSensor.find(\".sensor\").each(function () {\r\n                            var sensor = $(this);\r\n                            if (sensor.data(\"el\") == \"expand\") {\r\n                                sensor.find(\".sensor-element-expand\")\r\n                                    .css({ width: el.outerWidth() * 2, height: el.outerHeight() * 2 });\r\n                            } else if (sensor.data(\"el\") == \"shrink\") {\r\n                                sensor.find(\".sensor-element-shrink\")\r\n                                    .css({ width: \"200%\", height: \"200%\" });\r\n                            }\r\n                            sensor.scrollLeft(el.outerWidth() * 2);\r\n                            sensor.scrollTop(el.outerHeight() * 2);\r\n                        }).each(function () {\r\n                            var sensor = $(this);\r\n                            sensor.scroll(function (e) {\r\n                                var _this = $(this);\r\n                                if ((el.outerWidth() != PD.width || el.outerHeight() != PD.height) && (PD.height != 0 && PD.width != 0)) {\r\n                                    PD.height = el.outerHeight();\r\n                                    PD.width = el.outerWidth()\r\n                                    if (_this.data(\"el\") == \"shrink\") {\r\n                                        mainSensor\r\n                                            .find(\".sensor-element-expand\")\r\n                                            .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2);\r\n\r\n                                    } else if (_this.data(\"el\") == \"expand\") {\r\n                                        mainSensor\r\n                                            .find(\".sensor-element-shrink\")\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2)\r\n                                            .next()\r\n                                            .find(\".sensor-element-expand\")\r\n                                            .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2);\r\n                                    }\r\n\r\n                                    initHandlers(PD, PDC); // invoke callbacks\r\n                                } else {\r\n                                    PD.height = el.outerHeight();\r\n                                    PD.width = el.outerWidth();\r\n\r\n                                    PDC.height = PD.height;\r\n                                    PDC.width = PD.width;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    function initHandlers(size, previousSize) {\r\n                        if (callbacks.onResize) {\r\n                            config.onResize.call(config.element, size); // execute resize callback\r\n                        }\r\n\r\n                        if (size.height != previousSize.height && callbacks.onHeightChange) {\r\n                            config.onHeightChange.call(config.element, size); // execute height resize callback\r\n                        } else if (size.width != previousSize.width && callbacks.onWidthChange) {\r\n                            config.onWidthChange.call(config.element, size); // execute width resize callback\r\n                        }\r\n\r\n                        // save new dimention\r\n                        previousSize.height = size.height;\r\n                        previousSize.width = size.width;\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    $.fn.resizeSensor = function (setting) {\r\n\r\n        var resizeSensorCss = 'width:100%;height:100%;position:absolute;left:0;top:0;z-index:-1;',\r\n            sensorCss = 'position:absolute;left:0;top:0;overflow:hidden;height:100%;width:100%;',\r\n            sensorElementCss = 'position:relative;top:0;',\r\n            html = '<div class=\"resize-sensor\" style=\"' + resizeSensorCss + '\"><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"shrink\"><div class=\"sensor-element-shrink\" style=\"' + sensorElementCss + '\"></div></div><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"expand\"><div class=\"sensor-element-expand\" style=\"' + sensorElementCss + '\"></div></div></div>',\r\n         defaultConfig = {\r\n             onResize: null, // callback fires after changed size of element :: accepts function\r\n             onHeightChange: null, // callback fires after changed height of element :: accepts function\r\n             onWidthChange: null // callback fires after changed width of element :: accepts function\r\n         };\r\n\r\n        return this.each(function () {\r\n\r\n            var config = $.extend(defaultConfig, setting),\r\n                el = $(this),\r\n                    PD = { height: 0, width: 0 },\r\n                    PDC = { height: 0, width: 0 };\r\n            if (el.length > 0) {\r\n                var mainSensor = $(html);\r\n                if (el.css('position') === 'static') {\r\n                    el.css(\"position\", \"relative\")\r\n                }\r\n                el.append(mainSensor);\r\n\r\n                mainSensor.find(\".sensor\").each(function () {\r\n                    var sensor = $(this);\r\n                    if (sensor.data(\"el\") == \"expand\") {\r\n                        sensor.find(\".sensor-element-expand\")\r\n                            .css({ width: el.outerWidth() * 2, height: el.outerHeight() * 2 });\r\n                    } else if (sensor.data(\"el\") == \"shrink\") {\r\n                        sensor.find(\".sensor-element-shrink\")\r\n                            .css({ width: \"200%\", height: \"200%\" });\r\n                    }\r\n                    sensor.scrollLeft(el.outerWidth() * 2);\r\n                    sensor.scrollTop(el.outerHeight() * 2);\r\n                }).each(function () {\r\n                    var sensor = $(this);\r\n                    sensor.scroll(function (e) {\r\n                        var _this = $(this);\r\n                        if ((el.outerWidth() != PD.width || el.outerHeight() != PD.height) && (PD.height != 0 && PD.width != 0)) {\r\n                            PD.height = el.outerHeight();\r\n                            PD.width = el.outerWidth()\r\n                            if (_this.data(\"el\") == \"shrink\") {\r\n                                mainSensor\r\n                                    .find(\".sensor-element-expand\")\r\n                                    .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2);\r\n\r\n                            } else if (_this.data(\"el\") == \"expand\") {\r\n                                mainSensor\r\n                                    .find(\".sensor-element-shrink\")\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2)\r\n                                    .next()\r\n                                    .find(\".sensor-element-expand\")\r\n                                    .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2);\r\n                            }\r\n\r\n                            initHandlers(sensor, PD, PDC); // invoke callbacks\r\n                        } else {\r\n                            PD.height = el.outerHeight();\r\n                            PD.width = el.outerWidth();\r\n\r\n                            PDC.height = PD.height;\r\n                            PDC.width = PD.width;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function initHandlers(sensor, size, previousSize) {\r\n                    if (config.onResize) {\r\n                        config.onResize.call(sensor, size); // execute resize callback\r\n                    }\r\n\r\n                    if (size.height != previousSize.height && config.onHeightChange) {\r\n                        config.onHeightChange.call(sensor, size); // execute height resize callback\r\n                    } else if (size.width != previousSize.width && config.onWidthChange) {\r\n                        config.onWidthChange.call(sensor, size); // execute width resize callback\r\n                    }\r\n\r\n                    // save new dimention\r\n                    previousSize.height = size.height;\r\n                    previousSize.width = size.width;\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    };\r\n})(angular, jQuery);\r\n","(function (angular) {\r\n    \"use strict\";\r\n    angular.module(\"SMART2\")\r\n        .directive(\"smartRevision\", [\"$timeout\", \"$sce\", \"$translate\", smartRevisionDir]);\r\n\r\n    function smartRevisionDir($timeout, $sce, $translate) {\r\n        return {\r\n            restrict: \"E\",\r\n            replace: true,\r\n            transclude: {\r\n                oldData: \"?span\",\r\n                newData:\"?div\"\r\n            },\r\n            scope: {\r\n                align: \"@\",\r\n                oldData: \"=?\",\r\n                newData: \"=?\",\r\n                label: \"@\",\r\n                type: \"@\",\r\n                imgDimention: \"@\",\r\n                treeCallback: \"&\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var value = {\r\n                    image: \"image\",\r\n                    normal: \"normal\",\r\n                    defaultDimention: 150,\r\n                    tree: \"tree\"\r\n                };\r\n                scope.type = scope.type || value.normal;\r\n                scope.align = scope.align ? scope.align : \"left\";\r\n                scope.treemode = attrs.treemode;\r\n                //scope.oldData = scope.oldData ? scope.oldData : attrs.oldData;\r\n                //scope.newData = scope.newData ? scope.newData : attrs.newData;\r\n\r\n                scope.closeButton = { title: $translate.instant(\"closeBtn\") };\r\n\r\n                scope.multiRows = function (data) {\r\n                    var ismultiRows = false;\r\n                    if (data) {\r\n                        var type = data.constructor.toString().match(/function ([A-Za-z]+)/)[1];\r\n                        if (type == \"Array\") {\r\n                            ismultiRows = true;\r\n                        }\r\n                    }\r\n                    return ismultiRows;\r\n                }(scope.oldData || scope.newData);\r\n                if (!scope.oldData && !scope.newData) { // for transclude element\r\n                    scope.transclude = true;\r\n                    $timeout(function () {\r\n                        element\r\n                            .find(\"[old-data]\")\r\n                            .addClass(\"revision-old-val\")\r\n                            .wrap(\"<span>\")\r\n                            .parent()\r\n                            .addClass(\"revision-old-data\");\r\n                        element\r\n                            .find(\"[new-data]\")\r\n                            .wrap(\"<span>\")\r\n                            .parent()\r\n                            .addClass(\"revision-new-data\");\r\n                    });\r\n                } else if (scope.oldData && scope.newData) {\r\n                    scope.isChanged = true;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.oldDataHtml = $sce.trustAsHtml(scope.oldData);\r\n                        scope.newDataHtml = $sce.trustAsHtml(scope.newData);\r\n                    }\r\n                } else if (scope.oldData && !scope.newData) {\r\n                    scope.isChanged = false;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.oldDataHtml = $sce.trustAsHtml(scope.oldData);\r\n                    }\r\n                } else if (!scope.oldData && scope.newData) {\r\n                    scope.isChanged = true;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.newDataHtml = $sce.trustAsHtml(scope.newData);\r\n                    }\r\n                }\r\n                if (scope.type == value.image) {\r\n                    if (scope.imgDimention) {\r\n                        scope.diagonal = {}\r\n                    } else {\r\n                        var diagonalWidth = calculateRectdiagonal(value.defaultDimention, value.defaultDimention);\r\n                        scope.diagonal = {\r\n                            width: diagonalWidth,\r\n                            left: -(diagonalWidth / 2 - value.defaultDimention / 2)\r\n                        }\r\n                    }\r\n                } else if (scope.type == value.tree) {\r\n                    scope.popup = {\r\n                        url: \"shared/directives/smartRevision/treeviewChanges.html\",\r\n                        show: false,\r\n                        callback: function (a) {\r\n                            scope.popup.show = false;\r\n                            if (attrs.treeCallback) {\r\n                                scope.treeCallback({\r\n                                    data: {\r\n                                        'oldData': scope.oldData,\r\n                                        'newData': scope.newData,\r\n                                        'type': 'close',\r\n                                        'label': scope.label\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                scope.treeChange = function () {\r\n                    if (attrs.treeCallback) {\r\n                        scope.treeCallback({\r\n                            data: {\r\n                                'oldData': scope.oldData,\r\n                                'newData': scope.newData,\r\n                                'type': 'open',\r\n                                'label': scope.label\r\n                            }\r\n                        });\r\n                    }\r\n                    scope.popup.show = true;\r\n                }\r\n            },\r\n            templateUrl: \"shared/directives/smartRevision/smartRevisionTemplate.html\"\r\n        }\r\n    }\r\n    function calculateRectdiagonal(w, h) {\r\n        return Math.sqrt(w * w + h * h);\r\n    }\r\n    function checkJson(a) {\r\n        if (a) {\r\n            try{\r\n                a = JSON.parse(a);\r\n            }catch(e){}\r\n        }\r\n\r\n        return a;\r\n    }\r\n})(angular);","(function() {\r\n    'use strict';\r\n    angular.module('SMART2')\r\n        .directive('smartSavedViewPopup', ['notification', 'cacheHelperService', 'smartSavedViewPopupCollection', '$translate', smartSavedViewPopupFunc])\r\n        .service(\"smartSavedViewPopupCollection\", function () {\r\n            this.collection = [];\r\n            this.set = function (x) {\r\n                this.collection.push(x);\r\n            }\r\n            this.get = function (x) {\r\n                return this.collection;\r\n            }\r\n        });\r\n\r\n    function smartSavedViewPopupFunc(notification, cacheHelperService, smartSavedViewPopupCollection, $translate) {\r\n        return {\r\n            restrict: 'E',\r\n            transclude: true,\r\n            scope: {\r\n                show: '=',\r\n                hide: '&',\r\n                loader: '=',\r\n                model: '=ngModel',\r\n                config: '=',\r\n                isApplyFilters: \"=\",\r\n                isSavedView: \"=\",\r\n                isSavedViewModified: \"=\",\r\n                openPopupSavedView: \"=\",\r\n                api: \"=\",\r\n                setTitle: '@',\r\n                callbackFunc: \"&\"\r\n            },\r\n            controller: [\"$scope\", \"$http\", \"$timeout\", \"smartSavedViewPopupCollection\", function ($scope, $http, $timeout, smartSavedViewPopupCollection) {\r\n                //  $scope.collection = smartSavedViewPopupCollection.get(\"all\").length;\r\n                smartSavedViewPopupCollection.set($scope);\r\n                $scope.popupInc = smartSavedViewPopupCollection.get().length;\r\n                \r\n                $scope.disableDoneButton = true;\r\n                $scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n                $scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                $scope.uncheckMarkAsDefault;\r\n                /*for Done button disabled*/\r\n                var handleDoneButtonVisibility = function () {\r\n                    var isDefaultSelected = _.find($scope.config, { \"isDefault\": true });\r\n                    if (isDefaultSelected) {\r\n                        $scope.disableDoneButton = false;\r\n                    } else {\r\n                        $scope.disableDoneButton = true;\r\n                    }\r\n                }\r\n                handleDoneButtonVisibility();\r\n                $scope.defaultCheckUncheck = true;\r\n                var handleMarkAsDefault = function () {\r\n                    $scope.isMarkAsDefault.check = false;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].isDefault && $scope.config[i].isDefaultTxt) {\r\n                            $scope.isMarkAsDefault.check = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                $scope.setDefaultFiler = function (isDefaultTrue) {\r\n                    $scope.defaultCheckUncheck = true;\r\n                    if (isDefaultTrue) {\r\n                        $scope.uncheckMarkAsDefault = false;\r\n                    } else {\r\n                        $scope.uncheckMarkAsDefault = true;\r\n                    }\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].isDefault && $scope.config[i].isDefaultTxt) {\r\n                            $scope.defaultCheckUncheck = isDefaultTrue;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                $scope.showSavedViewPopup = true;\r\n                $scope.showSaveView = true;\r\n                $scope.radioChangeCallback = function (index, currentItem) {\r\n                    var view = _.find($scope.config, { \"index\": $scope.model.name });\r\n                    if (!view) {\r\n                        view = _.find($scope.config, { \"index\": $scope.model.index });\r\n                    }\r\n                    $scope.selectedFilter = view;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        $scope.config[i].isDefault = false;\r\n                    }\r\n                    \r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if (currentItem) {\r\n                            if ($scope.config[i].index === currentItem.index) {\r\n                                $scope.config[i].isDefault = true;\r\n                            }\r\n                        } else {\r\n                            if ($scope.config[i].index === (view && view.index)) {\r\n                                $scope.config[i].isDefault = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    handleDoneButtonVisibility();\r\n                    handleMarkAsDefault();\r\n                }\r\n                $scope.currentDefault;\r\n                $scope.showSavedView = function () {\r\n                    $scope.currentDefault = _.find($scope.config, { \"isDefaultTxt\": true });\r\n                    var currentCheck = $scope.defaultCheckUncheck;\r\n                    $scope.isSavedView = true;\r\n                    $scope.isSavedFilter = true;\r\n                    if ($scope.uncheckMarkAsDefault && $scope.uncheckMarkAsDefault != undefined) {\r\n                        for (var i = 0; i < $scope.config.length; i++) {\r\n                            $scope.config[i].isDefaultTxt = false;\r\n                        }\r\n                    }\r\n                    $scope.uncheckMarkAsDefault = false;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.isMarkAsDefault.check == true) {\r\n                            $scope.config[i].isDefaultTxt = false;\r\n                            if ($scope.config[i].isDefault == true) {\r\n                                $scope.config[i].isDefaultTxt = true;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!$scope.selectedFilter.name) {\r\n                        $scope.selectedFilter.name = $scope.api.currentViewApplied.name;\r\n                    }\r\n                    if ($scope.api) {\r\n                        $scope.api.currentViewApplied = _.find($scope.config, { index: $scope.selectedFilter.index });\r\n                        if ($scope.api.currentViewApplied == null) {\r\n                            cacheHelperService.setFilterDef('{\"defaultFilterType\":3,\"filters\":[]}');\r\n                        }\r\n                        if ($scope.api.currentViewApplied != undefined) {\r\n                            cacheHelperService.setFilterDef($scope.api.currentViewApplied.Filters);\r\n                        }\r\n                        $scope.api.selectedSavedview = { \"name\": $scope.selectedFilter.name };\r\n                        $scope.api.selectedFilterView = { \"name\": $scope.selectedFilter.name };\r\n                        if ($scope.currentDefault != undefined) {\r\n                            if ($scope.currentDefault.index != $scope.api.currentViewApplied.index) {\r\n                                $scope.currentDefault.isDefault = currentCheck;\r\n                                SaveResetOrMarkAsDefault($scope.currentDefault);\r\n                            }\r\n                        }\r\n                        if ($scope.isMarkAsDefault.check == true) {\r\n                            $scope.api.currentViewApplied.isDefault = true;\r\n                            SaveResetOrMarkAsDefault($scope.api.currentViewApplied);\r\n                            $scope.isMarkAsDefault.check = false;\r\n                        } else {\r\n                            $scope.api.currentViewApplied.isDefault = false;\r\n                            SaveResetOrMarkAsDefault($scope.api.currentViewApplied);\r\n                        }\r\n                        if($scope.setTitle != \"SAVED FILTERS\")\r\n                            $scope.api.applyViewOnGrid();\r\n                    }\r\n                    $scope.callbackFunc({\r\n                        e: {\r\n                            'model': $scope.selectedFilter,\r\n                            'currOperation': 'applyFilter'\r\n                        }\r\n                    });\r\n\r\n                };\r\n\r\n                $scope.Reset = function() {\r\n                    var sysDefault = _.find($scope.config, { IsSystemDefault: true });\r\n                    sysDefault.isDefault = true;\r\n                    $scope.api.currentViewApplied = sysDefault;\r\n                    var req = {\r\n                        method: 'POST',\r\n                        url: $scope.api.UpdateSavedViewURL,\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        }\r\n                    };\r\n                    _.each($scope.config, function(n) {\r\n                        if (!n.IsSystemDefault) {\r\n                            if (n.isDefault) {\r\n                                req.data = n;\r\n                                $http(req).then(function(response) {}).catch(function (errorCallback) {\r\n                                    console.log(errorCallback.statusText);\r\n                                });\r\n                            }\r\n                            n.isDefault = false;\r\n                        }\r\n                    })\r\n                    if($scope.setTitle != \"SAVED FILTERS\")\r\n                        $scope.api.applyViewOnGrid();\r\n                };\r\n\r\n                $scope.isMarkAsDefault = { 'check': false };\r\n                $scope.SystemAsDefault = { 'check': false };\r\n                $scope.showSavedViewPopup = false;\r\n                $scope.showSaveView = false;\r\n                $scope.focusSearch = false;\r\n                $scope.isActive = false;\r\n                $scope.showMe = false;\r\n\r\n                $scope.showSearch = function() {\r\n                    $scope.isActive = true;\r\n                    $scope.focusSearch = true;\r\n                    $scope.showMe = true;\r\n                    $scope.hideClose = true;\r\n                }\r\n\r\n                $scope.hideSearch = function() {\r\n                    $scope.isActive = false;\r\n                    $scope.focusSearch = false;\r\n                    $scope.hideClose = false;\r\n                }\r\n\r\n                var msg = {\r\n                    type: \"inform\",\r\n                    buttons: [{\r\n                        \"title\": $translate.instant('notificationButtonOk'),\r\n                        \"result\": \"true\"\r\n                    }]\r\n                }\r\n\r\n                $scope.deleteItem = function(index, currentItem, currOperation) {\r\n                    if (currentItem.IsSystemDefault && $scope.setTitle != \"SAVED FILTERS\") {\r\n                        msg.message = $translate.instant('deleteSystemDefaultMsg');\r\n                        notification.notify(msg, function(result) {});\r\n                    } else if (currentItem.isDefault == true && $scope.setTitle != \"SAVED FILTERS\") {\r\n                        msg.message = \"You can not delete a saved view when it is marked as default.\";\r\n                        notification.notify(msg, function(result) {});\r\n                    } else {\r\n                        var config = {\r\n                            type: \"warning\",\r\n                            message: $translate.instant('deleteMessage'),\r\n                            buttons: [{\r\n                                \"title\": $translate.instant('notificationButtonYes'),\r\n                                \"result\": \"true\"\r\n                            }, {\r\n                                \"title\": $translate.instant('notificationButtonNo'),\r\n                                \"result\": \"false\"\r\n                            }]\r\n                        };\r\n                        var alterView = cacheHelperService.getDefaultSavedView($scope.config, false) || cacheHelperService.getDefaultSavedView($scope.config, true);\r\n                        notification.notify(config, function(result) {\r\n                            if (result.result == \"true\") {\r\n                                var deletedView;\r\n                                for (var i = 0; i < $scope.config.length; i++) {\r\n                                    if ($scope.config[i].index === currentItem.index) {\r\n                                        deletedView = $scope.config.splice(i, 1);\r\n                                    }\r\n                                }\r\n\r\n                                handleDoneButtonVisibility();\r\n                                handleMarkAsDefault();\r\n                                $scope.callbackFunc({\r\n                                    e: {\r\n                                        'index': currentItem.index,\r\n                                        'currentItem': currentItem,\r\n                                        'currOperation': currOperation\r\n                                    }\r\n                                });\r\n                                var req = {\r\n                                    method: 'DELETE',\r\n                                    url: $scope.api.deleteSavedViewURL,\r\n                                    data: { \"data\": { \"savedViewId\": deletedView[0].ViewId } },\r\n                                    headers: {\r\n                                        \"Content-Type\": \"application/json\"\r\n                                    }\r\n                                };\r\n                                $http(req).then(function(response) {\r\n                                    if (response.data != null) {\r\n                                        if(alterView){\r\n                                            $scope.api.currentViewApplied = alterView;\r\n                                            $scope.selectedFilter.name = alterView.name;\r\n                                            $scope.api.applyViewOnGrid();\r\n                                            console.log(\"Saved View Deleted\");\r\n                                        }\r\n                                    }\r\n                                }).catch(function(errorCallback) {\r\n                                    console.log(errorCallback.statusText);\r\n                                });\r\n                            }\r\n\r\n                        });\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.showEditor = false;\r\n\r\n                $scope.editCurrentViewName = function (index, currentItem) {\r\n                    var _this = $scope;\r\n                    angular.forEach(_this.config, function (key, value) {\r\n                        if (_this.config[value].showCurrentItemEditor == true) {\r\n                            _this.config[value].showCurrentItemEditor = false;\r\n                        }\r\n                    });\r\n                    if (!currentItem.IsSystemDefault) {\r\n                        //$scope.config[index].showCurrentItemEditor = true;\r\n                        //$scope.getEditedviewName.name = $scope.config[index].name;\r\n\r\n                        for (var i = 0; i < _this.config.length; i++) {\r\n                            if (_this.config[i].index === currentItem.index) {\r\n                                _this.config[i].showCurrentItemEditor = true;\r\n                            }\r\n                        }\r\n                        _this.getEditedviewName.name = currentItem.name;\r\n                    } else {\r\n                        msg.message = $translate.instant('renameSystemDefaultMsg');\r\n                        notification.notify(msg, function(result) {});\r\n                    }\r\n                    $timeout(function() {\r\n                        _this.getEditedviewName.isFocus = true;\r\n                    }, 900);\r\n                }\r\n\r\n                $scope.getEditedviewName = { \"name\": \"\", isFocus: false };\r\n\r\n                $scope.updateViewName = function (index, currentItem, currOperation) {\r\n                    $scope.closeEditPanel(index, currentItem);\r\n                    $scope.callbackFunc({\r\n                        e: {\r\n                            'index': currentItem.index,\r\n                            'currentItem': currentItem,\r\n                            'currOperation': currOperation,\r\n                            'editedName': $scope.getEditedviewName.name\r\n                        }\r\n                    });\r\n                    if ($scope.getEditedviewName.name.length == 0) {\r\n                        keepPopupOpen();\r\n                        return false;\r\n                    }\r\n                    var duplicateItem = $scope.config.filter(function(view) {\r\n                        return (view.name === $scope.getEditedviewName.name && view.ViewId !== $scope.config[index].ViewId)\r\n                    });\r\n                    if (duplicateItem.length != 0) {\r\n                        showAlertMessage($scope.api.duplicateErrorMessage);\r\n                    } else if (greaterThanMaxCharacterLength($scope.getEditedviewName.name)) {\r\n                        showAlertMessage($scope.api.maxCharacterLength);\r\n                    } else {\r\n                        $scope.config[currentItem.index].name = $scope.getEditedviewName.name;\r\n                        $scope.config[currentItem.index].showCurrentItemEditor = false;\r\n                        var obj = {\r\n                            'ViewName': $scope.config[currentItem.index].name || $scope.config[currentItem.index].ViewName,\r\n                            'IsDefaultView': $scope.config[currentItem.index].isDefault,\r\n                            'IsSystemDefault': $scope.config[currentItem.index].IsSystemDefault,\r\n                            'SortColumn': $scope.config[currentItem.index].SortColumn,\r\n                            'SortOrder': $scope.config[currentItem.index].SortOrder,\r\n                            'ViewId': $scope.config[currentItem.index].ViewId,\r\n                            'GroupColumn': $scope.config[currentItem.index].GroupColumn,\r\n                            'Filters': $scope.config[currentItem.index].Filters,\r\n                            'DocumentTypeCode': $scope.config[currentItem.index].DocumentTypeCode,\r\n                            'ContactCode': $scope.config[currentItem.index].ContactCode,\r\n                            'ColumnList': $scope.config[currentItem.index].ColumnList\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.UpdateSavedViewURL,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n                        $http(req).then(function(response) {\r\n                            if (response.data != null) {\r\n                                console.log($scope.api.updateMessage);\r\n                            }\r\n                        }).catch(function(errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.closeEditPanel = function (index, currentItem) {\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].index === currentItem.index) {\r\n                            $scope.config[i].showCurrentItemEditor = false;\r\n                        }\r\n                    }\r\n                    currentItem.validate = false;\r\n                };\r\n\r\n                $scope.viewObject = {};\r\n                $scope.viewObject.SaveViewName = \"\";\r\n\r\n                $scope.saveCurrentView = function(passData) {\r\n                    if (passData != '') {\r\n                        if (isNameDuplicate(passData)) {\r\n                            showAlertMessage($scope.api.duplicateErrorMessage);\r\n                        } else if (greaterThanMaxCharacterLength(passData)) {\r\n                            showAlertMessage($scope.api.maxCharacterLength);\r\n                        } else {\r\n                            $scope.isApplyFilters = false;\r\n\r\n                            $scope.model = { 'name': passData, 'isDefault': false, 'showCurrentItemEditor': false };\r\n\r\n                            var req = {\r\n                                method: 'POST',\r\n                                url: $scope.api.insertSavedViewURL,\r\n                                data: {\r\n                                    \"ViewId\": 0,\r\n                                    \"ViewName\": passData,\r\n                                    \"ContactCode\": $scope.api.contactCode,\r\n                                    \"ColumnList\": cacheHelperService.getColDef() || \"\",\r\n                                    \"Filters\": cacheHelperService.getFilterDef() || \"\",\r\n                                    \"SortColumn\": \"NeedByDate\",\r\n                                    \"SortOrder\": \"Ascending\",\r\n                                    \"GroupColumn\": cacheHelperService.getGroupDef() || \"\",\r\n                                    \"IsDefaultView\": false,\r\n                                    \"IsSystemDefault\": false,\r\n                                    \"DocumentTypeCode\": $scope.api.documentTypeCode\r\n                                },\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                }\r\n                            };\r\n                            $http(req).then(function(response) {\r\n                                if (response.data != null) {\r\n                                    $scope.isSavedView = true;\r\n                                    $scope.config.push({\r\n                                        \"ViewId\": response.data,\r\n                                        \"ViewName\": passData,\r\n                                        \"ContactCode\": $scope.api.contactCode,\r\n                                        \"ColumnList\": cacheHelperService.getColDef() || \"\",\r\n                                        \"Filters\": cacheHelperService.getFilterDef() || \"\",\r\n                                        \"SortColumn\": \"NeedByDate\",\r\n                                        \"SortOrder\": \"Ascending\",\r\n                                        \"GroupColumn\": cacheHelperService.getGroupDef() || \"\",\r\n                                        \"IsDefaultView\": false,\r\n                                        \"IsSystemDefault\": false,\r\n                                        \"DocumentTypeCode\": $scope.api.documentTypeCode,\r\n                                        \"showCurrentItemEditor\": false,\r\n                                        \"name\": passData,\r\n                                        \"isDefault\": false\r\n                                    });\r\n                                    $scope.api.currentViewApplied = _.find($scope.config, { name: $scope.selectedFilter.name });\r\n                                    console.log(\"Saved View Created\");\r\n                                }\r\n                            }).catch(function(errorCallback) {\r\n                                console.log(errorCallback.statusText);\r\n                            });\r\n                            $scope.isSavedFilter = true;\r\n                            $scope.viewObject.SaveViewName = '';\r\n\r\n\r\n                        }\r\n                    } else {\r\n                        keepPopupOpen();\r\n                    }\r\n                }\r\n\r\n                function keepPopupOpen(e) {\r\n                    if (!e) {\r\n                        var e = window.event;\r\n                    }\r\n                    e.cancelBubble = true;\r\n                    if (e.stopPropagation) {\r\n                        e.stopPropagation();\r\n                    }\r\n                }\r\n\r\n                function isNameDuplicate(editedSavedName) {\r\n                    var duplicateName = \"\";\r\n                    duplicateName = _.find($scope.config, { name: editedSavedName });\r\n                    if (typeof duplicateName === 'undefined') {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                function greaterThanMaxCharacterLength(editedSavedName) {\r\n                    if (editedSavedName.length > $scope.api.viewNameLength) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                function showAlertMessage(alertMessage) {\r\n                    notification.notify(alertMessage, function(result) { });\r\n                }\r\n                $scope.$watch('show', function(n, o) {\r\n                    angular.forEach($scope.config, function(key, value) {\r\n                        if ($scope.config[value].showCurrentItemEditor == true) {\r\n                            $scope.config[value].showCurrentItemEditor = false;\r\n                        }\r\n                    }); //clearing if anything in edit state\r\n                    if ($scope.openPopupSavedView == true && n == true) {\r\n                        $scope.showPopUp = true;\r\n                        $scope.showSavedViewPopup = true;\r\n                        $scope.showSaveView = false;\r\n                        $scope.hideSearch();\r\n                    } else if ($scope.openPopupSavedView != true && n == true) {\r\n                        $scope.showSavedViewPopup = false;\r\n                        $scope.showSaveView = true;\r\n                    } else {\r\n                        $scope.showSavedViewPopup = false;\r\n                        $scope.showSaveView = false;\r\n                        $scope.show = false;\r\n                        $scope.showPopUp = false;\r\n                    }\r\n                    $timeout(function () {\r\n                        angular.element('.searchWithHiddenTextField input').blur();\r\n                        angular.element('.savedFiltersPopUpLists').find(angular.element('input[checked=\"checked\"]')).prop('checked', true);\r\n                    }, 1000);\r\n                    $scope.radioChangeCallback();\r\n                });\r\n\r\n\r\n                $scope.loaderFlag = {\r\n                    plain: true,\r\n                    message: $translate.instant('loadingMsg'),\r\n                    center: true\r\n                };\r\n\r\n                $scope.$watch('setTitle', function (value) {\r\n                    if (value == 'SAVED FILTERS') {\r\n                        $scope.title = $translate.instant('savedFilters');\r\n                    }\r\n                    if (value == 'SAVED VIEWS') {\r\n                        $scope.title = $translate.instant('savedViews');\r\n                    }\r\n                    \r\n                });\r\n\r\n                function SaveResetOrMarkAsDefault(currentViewApplied) {\r\n                    if ($scope.setTitle == \"SAVED FILTERS\") {\r\n                        console.log(currentViewApplied);\r\n\r\n                        var obj =\r\n                        {\r\n                            \"rowKey\": currentViewApplied.rowKey,\r\n                            \"moduleName\": currentViewApplied.module,\r\n                            \"removeDefaultFilter\": currentViewApplied.isDefault ? false : true\r\n\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.MarkasDefault,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n\r\n                        $http(req).then(function (response) {\r\n                            if (response.data != null) {\r\n\r\n                                /*if (currentViewApplied.isDefault) {\r\n                                    for (var i = 0; i < $scope.config.length; i++) {\r\n                                        if ($scope.config[i].rowKey != currentViewApplied.rowKey && $scope.config[i].isDefault) {\r\n                                            $scope.config[i].isDefault = false; \r\n                                        }\r\n                                    }\r\n                                }*/\r\n\r\n                                var view = _.find($scope.config, { \"name\": $scope.selectedFilter.name || $scope.api.currentViewApplied.name });\r\n                                if (view) {\r\n                                    if (view.isDefault) {\r\n                                        $scope.isMarkAsDefault.check = true;\r\n                                    } else {\r\n                                        $scope.isMarkAsDefault.check = false;\r\n                                    }\r\n                                }\r\n\r\n                                for (var i = 0; i < $scope.config.length; i++) {\r\n                                    $scope.config[i].isDefault = false;\r\n                                }\r\n\r\n                                view.isDefault = true;\r\n                            }\r\n                        }).catch(function (errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n\r\n                    } else {\r\n                        var obj = {\r\n                            \"ViewId\": currentViewApplied.ViewId,\r\n                            \"ViewName\": currentViewApplied.name,\r\n                            \"ContactCode\": currentViewApplied.ContactCode,\r\n                            \"ColumnList\": currentViewApplied.ColumnList,\r\n                            \"Filters\": currentViewApplied.Filters,\r\n                            \"SortColumn\": \"NeedByDate\",\r\n                            \"SortOrder\": \"Ascending\",\r\n                            \"GroupColumn\": currentViewApplied.GroupColumn,\r\n                            \"IsDefaultView\": currentViewApplied.isDefault,\r\n                            \"IsSystemDefault\": currentViewApplied.IsSystemDefault,\r\n                            \"DocumentTypeCode\": currentViewApplied.DocumentTypeCode\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.UpdateSavedViewURL,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n                        $http(req).then(function(response) {\r\n                            if (response.data != null) {\r\n                                console.log($scope.api.updateMessage);\r\n                                if (currentViewApplied.isDefault) {\r\n                                    for (var i = 0; i < $scope.config.length; i++) {\r\n                                        if ($scope.config[i].ViewId != currentViewApplied.ViewId && $scope.config[i].isDefault) {\r\n                                            $scope.config[i].isDefault = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }).catch(function(errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n                    }\r\n                }\r\n                $scope.search_data = $scope.config;\r\n                var b = [];\r\n                $scope.search_savedpopup = function(e) {\r\n                    $scope.config = [];\r\n\r\n                    if (e.data[0].value != null && e.data[0].value != \"\") {\r\n\r\n                        b = [];\r\n                        for (var i = 0; i < $scope.search_data.length; i++) {\r\n                            var lowerStr = ($scope.search_data[i].name + \"\").toLowerCase();\r\n                            var s = lowerStr.indexOf(e.data[0].value.toLowerCase()) === 0;\r\n                            if (s) {\r\n                                if (b.indexOf($scope.search_data[i].name) == -1) {\r\n                                    b.push({ 'name': $scope.search_data[i].name, 'isDefault': $scope.search_data[i].isDefault, 'showCurrentItemEditor': $scope.search_data[i].showCurrentItemEditor });\r\n                                }\r\n                            }\r\n                        }\r\n                        $scope.config = b;\r\n                    } else {\r\n                        b = [];\r\n                        $scope.config = $scope.search_data;\r\n                    }\r\n                }\r\n\r\n                $scope.onHide = function() {\r\n                    $scope.viewObject.SaveViewName = '';\r\n                    $scope.hide();\r\n                };\r\n\r\n            }],\r\n            templateUrl: 'shared/directives/smartSavedViewPopup/smartSavedViewPopupTemplate.html'\r\n        };\r\n    }\r\n})();","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartSearch', ['httpService', '$timeout', 'APPCONSTANTS', '$translate', function (httpService, $timeout, APPCONSTANTS, $translate) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            transclude: true,\n            scope: {\r\n                type: '@'\r\n            },\n            link: function (scope, element, attrs) {\r\n                var scopeValues = { \"RFX\": { \"value\": \"0\", \"string\": \"RFX\", \"SubAppCodes\": 103 }, \"RFP\": { \"value\": \"1\", \"string\": \"RFP\", \"SubAppCodes\": 103 }, \"RFQ\": { \"value\": \"2\", \"string\": \"RFQ\", \"SubAppCodes\": 103 }, \"RFI\": { \"value\": \"3\", \"string\": \"RFI\", \"SubAppCodes\": 103 }, \"Auction\": { \"value\": \"4\", \"string\": \"Auction\", \"SubAppCodes\": 103 }, \"Contract\": { \"value\": \"5\", \"string\": \"Contract\", \"SubAppCodes\": 104 }, \"Catalog\": { \"value\": \"6\", \"string\": \"Catalog\", \"SubAppCodes\": 108 }, \"Requisition\": { \"value\": \"7\", \"string\": \"Requisition\", \"SubAppCodes\": 107 }, \"PO\": { \"value\": \"8\", \"string\": \"PO\", \"SubAppCodes\": 107 }, \"Order\": { \"value\": \"8\", \"string\": \"Order\", \"SubAppCodes\": 107 }, \"Invoice\": { \"value\": \"9\", \"string\": \"Invoice\", \"SubAppCodes\": 107 }, \"Receipts\": { \"value\": \"10\", \"string\": \"Receipt\", \"SubAppCodes\": 107 }, \"Forms\": { \"value\": \"11\", \"string\": \"Forms\", \"SubAppCodes\": 105 }, \"Scorecards\": { \"value\": \"12\", \"string\": \"Scorecards\", \"SubAppCodes\": 105 }, \"Workbench\": { \"value\": \"13\", \"string\": \"Workbench\", \"SubAppCodes\": 110 }, \"InvoiceReconciliation\": { \"value\": \"14\", \"string\": \"InvoiceReconciliation\", \"SubAppCodes\": 107 }, \"Items\": { \"value\": \"20\", \"string\": \"Items\" }, \"Templates\": { \"value\": \"15\", \"string\": \"Templates\", \"SubAppCodes\": 111 }, \"Partners\": { \"value\": \"19\", \"string\": \"Partners\", \"SubAppCodes\": 105 }, \"ContractRequest\": { \"value\": \"16\", \"string\": \"ContractRequest\" }, \"RFxRequest\": { \"value\": \"17\", \"string\": \"RFxRequest\" }, \"AuctionRequest\": { \"value\": \"18\", \"string\": \"AuctionRequest\" }, \"PaymentRequest\": { \"value\": \"27\", \"string\": \"PaymentRequest\" }, \"Project\": { \"value\": \"21\", \"string\": \"Project\", \"SubAppCodes\": 113 }, \"CreditMemo\": { \"value\": \"22\", \"string\": \"CreditMemo\", \"SubAppCodes\": 107 }, \"ReturnNote\": { \"value\": \"20\", \"string\": \"ReturnNote\", \"SubAppCodes\": 107 }, \"ActionPlan\": { \"value\": \"23\", \"string\": \"ActionPlan\", \"SubAppCodes\": 105 }, \"Blanket\": { \"value\": \"30\", \"string\": \"Blanket\", \"SubAppCodes\": 104 }, \"CategoryWorkbench\": { \"value\": \"28\", \"string\": \"CategoryWorkbench\", \"SubAppCodes\": 116 }, \"ProjectDashboard\": { \"value\": \"101\", \"string\": \"ProjectDashboard\", \"SubAppCodes\": 113 } };\r\n\r\n                /*\r\n                 *  Get current module scope\r\n                 */\r\n                var getCurrentModuleScope = function () {\r\n                    var selectedModules = scope.selectedModule.FilterKey.split(',');\r\n                    var moduleScopeString = \"\";\r\n\r\n                    for (var i = 0; i < selectedModules.length; i++) {\r\n                        switch (selectedModules[i]) {\r\n                            case (scopeValues.RFI.value):\r\n                                moduleScopeString += scopeValues.RFI.string + \",\";\r\n                                break;\r\n                            case (scopeValues.RFP.value):\r\n                                moduleScopeString += scopeValues.RFP.string + \",\";\r\n                                break;\r\n                            case (scopeValues.RFQ.value):\r\n                                moduleScopeString += scopeValues.RFQ.string + \",\";\r\n                                break;\r\n                            case (scopeValues.Auction.value):\r\n                                moduleScopeString += scopeValues.Auction.string + \",\";\r\n                                break;\r\n                            case scopeValues.Workbench.value:\r\n                                moduleScopeString += scopeValues.Workbench.string + \",\";\r\n                                break;\r\n                            case scopeValues.Contract.value:\r\n                                moduleScopeString += scopeValues.Contract.string + \",\";\r\n                                break;\r\n                            case scopeValues.Scorecards.value:\r\n                                moduleScopeString += scopeValues.Scorecards.string + \",\";\r\n                                break;\r\n                            case scopeValues.Forms.value:\r\n                                moduleScopeString += scopeValues.Forms.string + \",\";\r\n                                break;\r\n                            case scopeValues.Requisition.value:\r\n                                moduleScopeString += scopeValues.Requisition.string + \",\";\r\n                                break;\r\n                            case scopeValues.Order.value:\r\n                                moduleScopeString += scopeValues.Order.string + \",\";\r\n                                break;\r\n                            case scopeValues.Invoice.value:\r\n                                moduleScopeString += scopeValues.Invoice.string + \",\";\r\n                                break;\r\n                            case scopeValues.InvoiceReconciliation.value:\r\n                                moduleScopeString += scopeValues.InvoiceReconciliation.string + \",\";\r\n                                break;\r\n                            case scopeValues.Receipts.value:\r\n                                moduleScopeString += scopeValues.Receipts.string + \",\";\r\n                                break;\r\n                            case scopeValues.AuctionRequest.value:\r\n                                moduleScopeString += scopeValues.AuctionRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.RFxRequest.value:\r\n                                moduleScopeString += scopeValues.RFxRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.ContractRequest.value:\r\n                                moduleScopeString += scopeValues.ContractRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.PaymentRequest.value:\r\n                                moduleScopeString += scopeValues.PaymentRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.Partners.value:\r\n                                moduleScopeString += scopeValues.Partners.string + \",\";\r\n                                break;\r\n                            case scopeValues.Templates.value:\r\n                                moduleScopeString += scopeValues.Templates.string + \",\";\r\n                                break;\r\n                            case scopeValues.Catalog.value:\r\n                                moduleScopeString += scopeValues.Catalog.string + \",\";\r\n                                break;\r\n                                //PPST\r\n                            case scopeValues.Project.value:\r\n                                moduleScopeString += scopeValues.Project.string + \",\";\r\n                                break;\r\n                            case scopeValues.CreditMemo.value:\r\n                                moduleScopeString += scopeValues.CreditMemo.string + \",\";\r\n                                break;\r\n                            case scopeValues.ReturnNote.value:\r\n                                moduleScopeString += scopeValues.ReturnNote.string + \",\";\r\n                                break;\r\n                            case scopeValues.ActionPlan.value:\r\n                                moduleScopeString += scopeValues.ActionPlan.string + \",\";\r\n                                break;\r\n                            case scopeValues.Blanket.value:\r\n                                moduleScopeString += scopeValues.Blanket.string + \",\";\r\n                                break;\r\n                            case scopeValues.CategoryWorkbench.value:\r\n                                moduleScopeString += scopeValues.CategoryWorkbench.string + \",\";\r\n                                break;\r\n                            case scopeValues.ProjectDashboard.value:\r\n                                moduleScopeString += scopeValues.ProjectDashboard.string + \",\";\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    //if ModuleScope is 'RFI,RFQ & RFP' than it should be RFx\r\n                    if ((moduleScopeString.indexOf(scopeValues.RFI.string) !== -1) ||\r\n                        (moduleScopeString.indexOf(scopeValues.RFP.string) !== -1) ||\r\n                        (moduleScopeString.indexOf(scopeValues.RFQ.string) !== -1)) {\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFI.string + \",\", '');\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFP.string + \",\", '');\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFQ.string + \",\", '');\r\n                        moduleScopeString += scopeValues.RFX.string;\r\n                    }\r\n\r\n                    // Remove last comma from modulescopestring\r\n                    var lastChar = moduleScopeString.slice(-1);\r\n                    if (lastChar == ',') {\r\n                        moduleScopeString = moduleScopeString.slice(0, -1);\r\n                    }\r\n\r\n                    return moduleScopeString;\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Get search navigation url\r\n                 */\r\n                scope.getSearchNavigateURL = function (moduleScope, fieldKey) {\r\n                    var redirectURL = generateUrl(moduleScope);\r\n                    if (fieldKey) {\r\n                        redirectURL += \"&fieldkey=\" + fieldKey;\r\n                    }\r\n                    return redirectURL;\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Get scope from module type\r\n                 */\r\n                var getScopeFromModuleType = function (moduleType) {\r\n                    var scope = '';\r\n                    var array = $.makeArray(\"16,17,18,27\".split(','), moduleType.split(',')[0]);\r\n\r\n                    if (moduleType == \"1,2,3\") {\r\n                        scope = scopeValues.RFX.string.toLowerCase();\r\n                    }\r\n                    else if (array == \"16\" || array == \"17\" || array == \"18\" || array == \"27\") {\r\n                        scope = \"request\";\r\n                    }\r\n                    else {\r\n                        for (var key in scopeValues) {\r\n                            if (scopeValues[key].value == moduleType) {\r\n                                scope = scopeValues[key].string.toLowerCase();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    return scope;\r\n                };\r\n\r\n                var getModuleTypeFromScope = function (moduleScope) {\r\n                    var type = '';\r\n                    for (var key in scopeValues) {\r\n                        if (scopeValues[key].string.toLowerCase() == moduleScope) {\r\n                            type = scopeValues[key].value;\r\n                            break;\r\n                        }\r\n                    }\r\n                    return type;\r\n                };\r\n\r\n                var IsAdvanceSearchEnabled = function (moduleScope) {\r\n                    var productsArray = getAdvanceSearchEnabledProducts();\r\n                    var type = getModuleTypeFromScope(moduleScope);\r\n                    if (productsArray.length > 0) {\r\n                        if (productsArray.indexOf(type) != -1)\r\n                            return true;\r\n                        else\r\n                            return false;\r\n                    }\r\n                };\r\n\r\n                var getAdvanceSearchEnabledProducts = function () {\r\n                    var productsArray = scope.advancedSearchDocTypes != null ? scope.advancedSearchDocTypes.split(\",\") : [];\r\n                    return productsArray;\r\n                };\r\n\r\n                /*\r\n                 *  Create redirection url\r\n                 */\r\n                var generateUrl = function (moduleScope) {\r\n                    var searchText = scope.searchText.trim();\r\n                    var url = '';\r\n                    if (IsAdvanceSearchEnabled(moduleScope)) {\r\n                        url = searchConstants.portalURL + 'Portal/Dashboard/Documents?scope=' + moduleScope + '&q=' + searchText + '&oloc=' + searchConstants.documentTypeCodes;\r\n                    }\r\n                    else {\r\n                        url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&oloc=' + searchConstants.documentTypeCodes;\r\n                    }\r\n\r\n                    switch (moduleScope.toLowerCase()) {\r\n                        case scopeValues.Catalog.string.toLowerCase():\r\n                            url = searchConstants.portalURL + '/Catalog/Manage/Navigation?bpc=' + searchConstants.encryptedBPC + '&navTo=1&q=' + searchText + '&scope=' + moduleScope + '&' + searchConstants.catalogQueryString + '&oloc=' + scopeValues.Catalog.SubAppCodes;\r\n                            break;\r\n                        case scopeValues.Order.string.toLowerCase():\r\n                            url += '&' + searchConstants.orderQueryString;\r\n                            break;\r\n                        case scopeValues.Invoice.string.toLowerCase():\r\n                            url += '&' + searchConstants.invoiceQueryString;\r\n                            break;\r\n                        case scopeValues.Receipts.string.toLowerCase():\r\n                            url += '&' + searchConstants.receiptQueryString;\r\n                            break;\r\n                        case scopeValues.Requisition.string.toLowerCase():\r\n                            url += '&' + searchConstants.requisitionQueryString;\r\n                            break;\r\n                        case scopeValues.InvoiceReconciliation.string.toLowerCase():\r\n                            url += '&' + searchConstants.invoiceReconcillationQueryString;\r\n                            break;\r\n                        case scopeValues.CreditMemo.string.toLowerCase():\r\n                            url += '&' + searchConstants.creditMemoQuerystring;\r\n                            break;\r\n                        case scopeValues.Blanket.string.toLowerCase():\r\n                            url += '&' + searchConstants.blanketQueryString;\r\n                            break;\r\n                        case scopeValues.CategoryWorkbench.string.toLowerCase():\r\n                            url += '&' + searchConstants.categoryWorkbenchQueryString;\r\n                            break;\r\n                        case scopeValues.Partners.string.toLowerCase():\r\n                            url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&' + searchConstants.partnersQueryString + '&oloc=' + searchConstants.documentTypeCodes;\r\n                            break;\r\n                        case scopeValues.Forms.string.toLowerCase():\r\n                            url += '&' + searchConstants.formQueryString;\r\n                            break;\r\n                        case scopeValues.Scorecards.string.toLowerCase():\r\n                            url += '&' + searchConstants.assessmentQueryString;\r\n                            break;\r\n                        case scopeValues.Workbench.string.toLowerCase():\r\n                            url += '&' + searchConstants.workBenchQueryString;\r\n                            break;\r\n                        case scopeValues.RFX.string.toLowerCase():\r\n                        case scopeValues.RFP.string.toLowerCase():\r\n                        case scopeValues.RFQ.string.toLowerCase():\r\n                        case scopeValues.RFI.string.toLowerCase():\r\n                            url += '&' + searchConstants.rfxQueryString;\r\n                            break;\r\n                        case scopeValues.Auction.string.toLowerCase():\r\n                            url += '&' + searchConstants.auctionQueryString;\r\n                            break;\r\n                        case scopeValues.ActionPlan.string.toLowerCase():\r\n                            url += '&' + searchConstants.actionPlanQueryString;\r\n                            break;\r\n                        case scopeValues.Contract.string.toLowerCase():\r\n                            url += '&' + searchConstants.contractQueryString;\r\n                            break;\r\n                        case scopeValues.Templates.string.toLowerCase():\r\n                            url += '&' + searchConstants.catalogQueryString;\r\n                            break;\r\n                        case \"request\":\r\n                            moduleScope = scopeValues.RFxRequest.string.toLowerCase() + \",\" + scopeValues.AuctionRequest.string.toLowerCase() + \",\" + scopeValues.ContractRequest.string.toLowerCase() + \",\" + scopeValues.PaymentRequest.string.toLowerCase();\r\n                            url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&oloc=' + searchConstants.documentTypeCodes;\r\n                            break;\r\n                        case \"returnnote\":\r\n                            url += '&' + searchConstants.returnNoteQuerystring;\r\n                            break;\r\n                        case scopeValues.Project.string.toLowerCase():\r\n                            url = searchConstants.portalURL + 'PPST/Project/ProjectHome?oloc=113&q=' + searchText + '&' + searchConstants.projectQueryString;\r\n                            break;\r\n                        default:\r\n                            if ((moduleScope.toLowerCase().indexOf(scopeValues.AuctionRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.RFxRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.ContractRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.PaymentRequest.string.toLowerCase()) !== -1)) {\r\n                                url += '&' + searchConstants.auctionQueryString;\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    if (APPCONSTANTS.userPreferences.UserBasicDetails.IsSupplier) {\r\n                        url = url + \"&dd=\" + searchConstants.encryptedBPC;\r\n                    }\r\n\r\n                    return url;\r\n                };\r\n\r\n\r\n                scope.searchText = '';\n\n                var request, searchConstants, lastSearchedText;\n\n                /*\n                 *  Get search constants from .net controller\n                 */\n                if (APPCONSTANTS && APPCONSTANTS.userPreferences && APPCONSTANTS.userPreferences.constantURLAndQueryStringValue)\n                    searchConstants = APPCONSTANTS.userPreferences.constantURLAndQueryStringValue;\n                else {\r\n                    request = {\r\n                        method: 'GET',\r\n                        url: '/' + APPCONSTANTS.userPreferences.AreaName + '/GetConstantURLAndQueryStringValues?oloc=216'\r\n                    };\r\n\r\n                    httpService.directhttp(request).then(function (result) {\r\n                        searchConstants = result;\r\n                    }, function (errorData) {\r\n                        searchConstants = {};\r\n                    });\r\n                }\n\n                request = {\r\n                    method: 'GET',\r\n                    url: '/' + APPCONSTANTS.userPreferences.AreaName + '/GetAllowedModulesList?oloc=216&BuyerPartnerCode=' + APPCONSTANTS.userPreferences.UserBasicDetails.BuyerPartnerCode\r\n                };\n\n                function setAllowedModuleListData(result) {\r\n                    var modules = result.Output;\n                    var orderIndex = -1;\n                    for (var i = 0; i < modules.length; i++) {\r\n                        if (modules[i].FilterKey == 8) {\r\n                            orderIndex = i;\r\n                            break;\r\n                        }\r\n                    }\n                    if (orderIndex > -1) {\r\n                        var quickSearchItem = modules.splice(orderIndex, 1);\r\n                        modules.splice(1, 0, quickSearchItem[0]);\r\n                    }\n                    scope.modules = angular.copy(modules);\n                    scope.selectedModule = scope.modules[0];\r\n                    scope.advancedSearchDocTypes = result.AdvancedSearchDocTypes;\r\n                };\n\n                if (APPCONSTANTS.userPreferences.allowedModulesList){\n                    setAllowedModuleListData(APPCONSTANTS.userPreferences.allowedModulesList);\n                }else{\n                    httpService.directhttp(request).then(function (result) {\r\n                        setAllowedModuleListData(result);\r\n                    }, function (errorData) { });\r\n                }\n                \n                /*\n                 *  On module item click handler\n                 */\n                scope.onModuleClick = function (module) {\r\n                    scope.selectedModule = module;\r\n                    scope.showFilterList = false;\r\n                    scope.recentSearches = null;\r\n                    scope.searchResult = null;\r\n                };\n\n\n                /*\n                 *  Get recent searches\n                 */\n                var getRecentSearches = function () {\r\n                    if (scope.recentSearches) {\r\n                        scope.recentSearches = scope.recentSearches.splice(0, 5);\r\n                        scope.showRecentSearches = true;\r\n                        return;\r\n                    }\r\n\r\n                    scope.recentSearches = null;\r\n\r\n                    scope.isRecentSearchesLoading = true;\r\n\r\n                    request = {\r\n                        method: 'GET',\r\n                        url: '/Controls/HeaderBar/GetRecentSearches?oloc=101&moduleType=' + (scope.selectedModule.IsAllMenu ? 0 : scope.selectedModule.FilterKey.split(',')[0]) + '&fieldKey=' + (scope.selectedModule.FieldKey != undefined ? scope.selectedModule.FieldKey : 0)\r\n                    };\r\n\r\n                    httpService.directhttp(request).then(function (result) {\r\n                        scope.showRecentSearches = true;\r\n                        scope.isRecentSearchesLoading = false;\r\n                        try {\r\n                            scope.recentSearches = JSON.parse(result.RecentSearches).splice(0, 5);\r\n                        }\r\n                        catch (e) {\r\n                            scope.recentSearches = [];\r\n                        }\r\n                    }, function (errorData) {\r\n                        scope.isRecentSearchesLoading = false;\r\n                    });\r\n                };\n\n\n                /*\n                 *  Get search results\n                 */\n                scope.onSearchTextChange = function (event) {\r\n                    if (event.keyCode === 13 && scope.searchText.trim().length > 2) {\r\n                        if (!scope.selectedModule.IsAllMenu) {\r\n                            window.location.href = scope.getSearchNavigateURL(getScopeFromModuleType(scope.selectedModule.FilterKey), scope.selectedModule.FieldKey);\r\n                            return;\r\n                        }\r\n\r\n                        scope.showRecentSearches = false;\r\n                        scope.showFilterList = false;\r\n                        scope.showSearchResult = true;\r\n                        scope.isSearchResultLoading = true;\r\n\r\n                        //  If user has recently searched for the text entered, do not hit the service\r\n                        if (lastSearchedText === scope.searchText.trim() && scope.searchResult) {\r\n                            scope.isSearchResultLoading = false;\r\n                            return;\r\n                        }\r\n\r\n                        if (!scope.recentSearches) {\r\n                            getSearchResults();\r\n                            return;\r\n                        }\r\n\r\n                        var recentSearches = [{ \"Sequence\": 0, \"SearchText\": scope.searchText.trim() }];\r\n\r\n                        //  Remove duplicate entries from recent searches and generate recent search sequence\r\n                        for (var i = 0; i < scope.recentSearches.length; i++) {\r\n                            if (scope.recentSearches[i].SearchText != scope.searchText.trim()) {\r\n                                recentSearches.push({\r\n                                    \"Sequence\": recentSearches.length,\r\n                                    \"SearchText\": scope.recentSearches[i].SearchText\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        scope.recentSearches = angular.copy(recentSearches);\r\n\r\n                        request = {\r\n                            method: 'POST',\r\n                            url: '/Controls/HeaderBar/SaveRecentSearches?oloc=101',\r\n                            data: {\r\n                                \"recentSearches\": JSON.stringify(recentSearches),\r\n                                \"moduleType\": scope.selectedModule.IsAllMenu ? 0 : scope.selectedModule.FilterKey.split(\",\")[0],\r\n                                \"fieldKey\": scope.selectedModule.FieldKey != undefined ? scope.selectedModule.FieldKey : 0\r\n                            }\r\n                        };\r\n\r\n                        httpService.directhttp(request).then(function (result) {\r\n                            getSearchResults();\r\n                        }, function (errorData) {\r\n                            getSearchResults();\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (scope.searchText.trim().length == 0) {\r\n                            scope.showSearchResult = false;\r\n                            getRecentSearches();\r\n                        }\r\n                    }\r\n                };\n\n\n                var getSearchResults = function () {\r\n                    lastSearchedText = angular.copy(scope.searchText.trim());\r\n\r\n                    scope.searchResult = null;\r\n\r\n                    request = {\r\n                        method: 'POST',\n                        url: '/Controls/BaseSearch/GetSearchResultForWeb?oloc=101',\r\n                        data: {\r\n                            \"searchKeyword\": scope.searchText.trim(),\r\n                            \"Filters\": [\"searchScope:All\", \"pageNumber:1\", \"isGlobalSearch:true\", \"module:all\", \"moduleScope:\" + getCurrentModuleScope(), \"noOfRecords:0\"]\r\n                        }\r\n                    };\n\n                    if (scope.selectedModule.FieldKey) {\r\n                        request.data.Filters.push(\"fieldkey:\" + scope.selectedModule.FieldKey);\r\n                    }\n\n                    httpService.directhttp(request).then(function (result) {\r\n                        scope.isSearchResultLoading = false;\r\n                        if (result.DataSearchResult.GroupTotal.TotalCount > 0) {\r\n                            scope.searchResult = result.DataSearchResult.GroupTotal;\r\n                        }\r\n                        else {\r\n                            scope.searchResult = [];\r\n                        }\r\n                    }, function (errorData) {\r\n                        scope.isSearchResultLoading = false;\r\n                    });\r\n                };\n\n\n                /*\n                 *  On search-text focus\n                 */\n                scope.onSearchTextFocus = function (e) {\r\n                    if (scope.searchText.trim().length == 0) {\r\n                        scope.showSearchResult = false;\r\n                        getRecentSearches();\r\n                    }\r\n                };\n\n\n                /*\n                 *  On recent search item click handler\n                 */\n                scope.onRecentSearchItemClick = function (text) {\r\n                    scope.searchText = text;\r\n                    scope.onSearchTextChange({ keyCode: 13 });\r\n                };\n\n\n                /*\n                 *  Get translated label\n                 */\n                scope.getTranslatedLabel = function (label) {\r\n                    return $translate.instant(label);\r\n                };\n\n\n                /*\n                 *  On document click handler\n                 */\n                var onDocumentClick = function () {\r\n                    $timeout(function () {\r\n                        scope.showRecentSearches = false;\n                        scope.showFilterList = false;\r\n                        scope.showSearchResult = false;\r\n                        try {\r\n                            httpService.abort(request);\r\n                        }\r\n                        catch (e) { }\r\n                    });\r\n                };\n\n                $(document).on('click', onDocumentClick);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    $(document).off('click', onDocumentClick);\r\n                })\r\n            },\n            templateUrl: 'shared/directives/smartSearch/smartSearchTemplate.html'\r\n        };\r\n    }]);\r\n})();","/*\r\n    ::attributes {\r\n        getCheckboxInfo : & (callback for getting selected items and total length of set)\r\n                   data : @ (takes pipe \"|\" sepereted values like eg. \"dataset|selector\")\r\n            checkerFlag : @\r\n            disableFlag : @\r\n    }\r\n*/\r\n\r\n(function (angular) {\r\n    \"use strict\";\r\n    angular\r\n        .module(\"SMART2\")\r\n        .directive(\"smartSelectall\", [\"$parse\", \"$timeout\", smartSelectallFun]);\r\n\r\n    function smartSelectallFun($parse, $timeout) {\r\n        return {\r\n            restrict: \"A\",\r\n            require: \"ngModel\",\r\n            link: function (scope, element, attrs, ngModel) {\r\n                var getCheckboxInfo = attrs.getCheckboxInfo ? $parse(attrs.getCheckboxInfo.replace(/\\(\\)/, '(selected, length)')) : false, // callback for to get checkbox selection status info\r\n                    config = function () {\r\n                        var a = attrs.data.split(\"|\"),\r\n                        scopeDeep = a[0] ? a[0].replace(/\\s+/ig, '') : null,\r\n                        checkboxSelector = a[1] ? a[1].replace(/\\s+/ig, '') : null,\r\n                        checkerFlag = attrs.checkerFlag ? attrs.checkerFlag : \"checked\",\r\n                        disableFlag = attrs.disableFlag ? attrs.disableFlag : \"disable\",\r\n                        //checkerStyle = attrs.checkerFlag.indexOf(\"{\") == 0 ? \"eval\" : \"flag\",\r\n                        disableStyle = disableFlag.indexOf(\"{\") == 0 ? \"eval\" : \"flag\",\r\n                        sc = getScope(scope, scopeDeep);\r\n\r\n                        return {\r\n                            checkerFlag: checkerFlag,\r\n                            //checkerStyle: checkerStyle,\r\n                            disableFlag: disableFlag,\r\n                            disableStyle: disableStyle,\r\n                            scopeDeep: scopeDeep,\r\n                            scopeData: sc, // set of list items\r\n                            selector: checkboxSelector,\r\n                            selected: 0,\r\n                            length: sc.length\r\n                        };\r\n                    }(),\r\n                    mainCheckbox = element.find(\"input[type=checkbox]\");\r\n\r\n                if (scope.__selectallExoprt) {\r\n                    !scope.__selectallExoprt && (scope.__selectallExoprt = {});\r\n                    scope.__selectallExoprt.selectall = function (check) {\r\n                        mainCheckbox.prop('checked', check).change();\r\n                    };\r\n                };\r\n\r\n                mainCheckbox.change(function (e) {\r\n                    var el = $(this),\r\n                        _scope = scope,\r\n                        isChecked = el.prop(\"checked\");\r\n\r\n                    config.scopeData.forEach(function (a) {\r\n                        var isDisabled = function () {\r\n                            var r;\r\n                            if (config.disableStyle == \"flag\") {\r\n                                r = a[config.disableFlag];\r\n                            } else if (config.disableStyle == \"eval\") {\r\n                                r = eval(config.disableFlag.replace(/(\\{|\\})/ig, '').replace(/this/ig, 'a'));\r\n                            }\r\n                            return r;\r\n                        }();\r\n                        if (!isDisabled) {\r\n                            a[config.checkerFlag] = isChecked;\r\n                        }\r\n                    });\r\n                    element.removeClass(\"filled-partial\");\r\n                    config.selected = isChecked ? config.scopeData.length : 0;\r\n                    if (getCheckboxInfo)\r\n                        scope.$apply(function () {\r\n                            getCheckboxInfo(scope, getInfo());\r\n                        });\r\n                });\r\n\r\n\r\n                scope.$watchCollection(config.scopeData, function () {\r\n                    refresh();\r\n                });\r\n\r\n                scope.$watch(config.scopeDeep + \".length\", function () {\r\n                    refresh();\r\n                });\r\n\r\n                initCheckbox(); // applying events to checkbox\r\n\r\n\r\n                function initCheckbox() {\r\n                    $timeout(function () {\r\n                        initCheckboxItem();\r\n                    });\r\n                }\r\n                function initCheckboxItem() {\r\n                    var allCheckbox = $(config.selector).find(\"input[type=checkbox]\");\r\n                    if (allCheckbox && allCheckbox.length > 0) {\r\n                        allCheckbox.unbind(\"change\").change(function (e) {\r\n                            var el = $(this),\r\n                                isChecked = el.prop(\"checked\");\r\n\r\n                            config.selected = isChecked ? config.selected += 1 : config.selected -= 1;\r\n                            if (config.selected < config.length) {\r\n                                config.selected == 0 ? element.removeClass(\"filled-partial\") : element.addClass(\"filled-partial\");\r\n                                ngModel.$setViewValue(false);\r\n                                ngModel.$render();\r\n                            } else if (config.selected == config.length) {\r\n                                element.removeClass(\"filled-partial\");\r\n                                ngModel.$setViewValue(true);\r\n                                ngModel.$render();\r\n                            }\r\n                            if (getCheckboxInfo)\r\n                                scope.$apply(function () {\r\n                                    getCheckboxInfo(scope, getInfo());\r\n                                });\r\n                        });\r\n                    }\r\n                }\r\n                function resetConfig() {\r\n                    var selected = 0;\r\n                    config.scopeData = getScope(scope, config.scopeDeep);\r\n                    config.scopeData.forEach(function (a) {\r\n                        if (a[config.checkerFlag]) selected++;\r\n                    });\r\n\r\n                    config.selected = selected;\r\n                    config.length = config.scopeData.length;\r\n\r\n                    if (config.selected < config.length) {\r\n                        config.selected == 0 ? element.removeClass(\"filled-partial\") : element.addClass(\"filled-partial\");\r\n                        ngModel.$setViewValue(false);\r\n                        ngModel.$render();\r\n                    } else if (config.selected == config.length) {\r\n                        element.removeClass(\"filled-partial\");\r\n                        ngModel.$setViewValue(true);\r\n                        ngModel.$render();\r\n                    }\r\n\r\n                    if (getCheckboxInfo)\r\n                        scope.$applyAsync(function () {\r\n                            getCheckboxInfo(scope, getInfo());\r\n                        });\r\n                }\r\n                function getScope(scope, deep) {\r\n                    var a, b = deep.split(\".\");\r\n                    if (b.length > 1) {\r\n                        a = scope;\r\n                        for (var i = 0; i < b.length; i++) {\r\n                            a = a[b[i]];\r\n                        }\r\n                    } else {\r\n                        a = scope[deep];\r\n                    }\r\n                    return a;\r\n                }\r\n                function refresh() {\r\n                    initCheckbox();\r\n                    resetConfig();\r\n                }\r\n                function getInfo() {\r\n                    return {\r\n                        selected: config.selected,\r\n                        length: config.length\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n})(angular);","angular.module('SMART2').directive('smartSort', function () {\r\n    return {\r\n        restrict: 'E',\r\n       \ttransclude: true,\r\n       \ttemplate:'<a href=\\\"javascript:void(0)\\\" class=\"waves-circle waves-effect waves-grey\" ng-click=\\\"ascDescToggler()\\\">\\n<i ng-if=\"currentCell != sortBy\" class=\\\"icon iconSmall grey-text\\\" smart-tooltip position=\\\"bottom\\\" delay=\\\"50\\\" message=\\\"{{ \\'Sort By \\' | translate }}\\\">\\n<svg>\\n<use xlink:href=\\\"{{ \\'#icon_Sort\\' }}\\\"><\\/use>\\n<\\/svg><\\/i><i class=\\\"icon iconSmall grey-text\\\" ng-if=\"currentCell == sortBy\" ng-class=\\\" { \\'s-dd-icon-wth-color\\':  currentCell == sortBy }\\\"  smart-tooltip position=\\\"bottom\\\" delay=\\\"50\\\" message=\\\"{{ iconWithTooltip.tooltip | translate }}\\\">\\n<svg>\\n<use xlink:href=\\\"{{ iconWithTooltip.sortbyIcon }}\\\"><\\/use>\\n<\\/svg><\\/i><\\/a>',\r\n       \tscope:{\r\n       \t\tsortBy:\"=\",\r\n       \t\tsortReverse:\"=\",\r\n\t\t\tcurrentCell:\"@\"\r\n       \t},\r\n       \tlink:function($scope, $element, $attrs){\r\n\r\n       \t\t$scope.iconWithTooltip = {\r\n\t\t\t\tsortbyIcon : \"\",\r\n       \t\t\ttooltip\t:\t\"\"\r\n\r\n       \t\t}\r\n\r\n       \t\t\r\n\t       \t\t$scope.ascDescToggler = function(){\r\n              \r\n       \t\t\t$scope.sortBy = $scope.currentCell;\r\n\t       \t\t\t$scope.sortReverse = !$scope.sortReverse;\r\n\r\n\t       \t\t\tif($scope.sortBy == $scope.currentCell && $scope.sortReverse == false ){\r\n\t\t\t\t\t\t\t$scope.iconWithTooltip.sortbyIcon = \"#icon_SortDescending\";\r\n\t       \t\t\t\t\t$scope.iconWithTooltip.tooltip\t=\t\"Descending\";\r\n\t       \t\t\t}\r\n\t       \t\t\telse if($scope.sortBy == $scope.currentCell && $scope.sortReverse == true ){\r\n\t\t\t\t\t\t\t$scope.iconWithTooltip.sortbyIcon = \"#icon_SortAscending\";\r\n\t       \t\t\t\t\t$scope.iconWithTooltip.tooltip\t=\t\"Ascending\";\r\n\t       \t\t\t}\r\n\t       \t\t\t\r\n       \t\t\t};\r\n       \t\t\r\n       \t}\r\n       \r\n    }\r\n});","var isRegionalSettingEnabled = typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable;\r\n(function () {\r\n    'use strict';\r\n\r\n    var app = angular.module('SMART2');\r\n\r\n\r\n    window.onmousedown = function (e) {\r\n        if ($(e.target).closest('.smart-table-cell-template').length > 0) {\r\n            window.isSmartTableCellClicked = true;\r\n        }\r\n\r\n        //\tIf autosuggest option is not clicked, allow scope to be cleared\r\n        if (window.lastActiveCellScope && ($(e.target).closest('.daterangepicker').length > 0 || $(e.target).closest('.autocomplete-suggestion').length > 0 ||\r\n        $(e.target).closest('.autocomplete-suggestions').length > 0 || $(e.target).closest('.modal').length > 0 || $(e.target).closest('.lean-overlay').length > 0)) {\r\n            return;\r\n        }\r\n\r\n        //\tClear and update last rendered cell when selection or tree icon is clicked\r\n        if ($(e.target).closest('.smart-table-row-cell').length == 0 || $(e.target).closest('.smart-table-icon-holder').length > 0) {\r\n            if (window.lastActiveCellScope) {\r\n                window.lastActiveCellScope.stopEdit();\r\n                window.lastActiveCellScope = undefined;\r\n            }\r\n            return;\r\n        }\r\n    };\r\n\r\n\r\n    window.focusHandler = function (element) {\r\n        element.focus(function () {\r\n            setTimeout((function (el) {\r\n                var strLength = el.value.length;\r\n                return function () {\r\n                    if (el.setSelectionRange !== undefined) {\r\n                        el.setSelectionRange(strLength, strLength);\r\n                    }\r\n                    else {\r\n                        $(el).val(el.value);\r\n                    }\r\n                }\r\n            }(this)), 0);\r\n        });\r\n    };\r\n\r\n\r\n    //  To handle date picker control issue\r\n    setTimeout(function () {\r\n        window.onkeydown = function (e) {\r\n            if ($(e.target).is('body') && window.lastActiveCellScope &&\r\n                window.lastActiveCellScope.column.attributes && window.lastActiveCellScope.column.attributes.type == 'date') {\r\n                window.lastActiveCellScope.onElementKeyDown(e);\r\n                return false;\r\n            }\r\n        };\r\n    }, 500);\r\n\r\n\r\n    function getObjectValue(obj, keys) {\r\n        try {\r\n            var arr = keys.split('.');\r\n            while (arr.length) {\r\n                obj = obj[arr.shift()];\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return obj;\r\n    };\r\n\r\n    function getObjectValueForAutoSuggest(obj, keys) {\r\n        var arr = keys.split('.');\r\n        if (arr.length > 1) {\r\n            arr.splice(arr.length - 1, 1);\r\n            return getObjectValue(obj, arr.join('.'));\r\n        }\r\n        return obj[arr[0]];\r\n    };\r\n\r\n    function setObjectValue(obj, keys, value) {\r\n        try {\r\n            var arr = keys.split('.');\r\n            if (arr.length == 1) {\r\n                obj[arr[0]] = value;\r\n            }\r\n            else {\r\n                var obj = obj[arr[0]];\r\n                arr.shift();\r\n                var keys = arr.join('.');\r\n                setObjectValue(obj, keys, value);\r\n            }\r\n        }\r\n        catch (e) { }\r\n    };\r\n\r\n    function updateCell(obj, keys, value) {\r\n        if (!angular.isObject(value)) {\r\n            setObjectValue(obj, keys, value);\r\n            return;\r\n        }\r\n        else if (!angular.isObject(obj[keys.split('.')[0]]) && angular.isObject(value)) {\r\n            setObjectValue(obj, keys, value[keys.split('.')[0]]);\r\n            return;\r\n        }\r\n        angular.extend(obj[keys.split('.')[0]], value);\r\n    };\r\n\r\n    function getFormattedData(data, displayFormat) {\r\n        if (!data || data.length == 0) {\r\n            return [];\r\n        }\r\n        for (var i = 0; i < data.length; i++) {\r\n            var str = displayFormat;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) { }\r\n            data[i].value = str.trim();\r\n        }\r\n        return data;\r\n    };\r\n\r\n    function getDisplayData(data, displayFormat) {\r\n        if (data == undefined || data == null || data == '') {\r\n            return '';\r\n        }\r\n        var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n        try {\r\n            var parentSplit = str.split('{');\r\n            for (var j = 0; j < parentSplit.length; j++) {\r\n                var childSplit = parentSplit[j].split('}');\r\n                for (var k = 0; k < childSplit.length; k++) {\r\n                    if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                        evalResult = eval('data.' + childSplit[k]);\r\n                        evaluatedKeysCounter++;\r\n                        if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                            evalResult = '';\r\n                            nullKeysCounter++;\r\n                        }\r\n                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                    }\r\n                }\r\n            }\r\n            if (evaluatedKeysCounter == nullKeysCounter) {\r\n                str = '';\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n    };\r\n\r\n    function convertNumberToFixed(number, minPrecision, maxPrecision) {\r\n        var arrTmpInputValue, tmpStrAfterPrecision;\r\n        arrTmpInputValue = (number + '').split('.');\r\n\r\n        if (arrTmpInputValue.length > 1) {\r\n            tmpStrAfterPrecision = arrTmpInputValue[arrTmpInputValue.length - 1];\r\n            if (maxPrecision > 0 && tmpStrAfterPrecision.length >= maxPrecision) {\r\n                return number.toString().match(new RegExp('^-?\\\\d+(?:\\.\\\\d{0,' + (maxPrecision || -1) + '})?'))[0];\r\n            }\r\n            else if (minPrecision > 0 && tmpStrAfterPrecision.length <= minPrecision) {\r\n                return Number(Math.round(number + 'e' + minPrecision) + 'e-' + minPrecision);\r\n            }\r\n            else {\r\n                return number;\r\n            }\r\n        }\r\n        else {\r\n            return Number(Math.round(number + 'e' + minPrecision) + 'e-' + minPrecision);\r\n        }\r\n    };\r\n\r\n    function sortSmartTableData(data, column, isAscending, translate) {\r\n        return data.sort(function (a, b) {\r\n            var strOne = getObjectValue(a, column.field);\r\n            var strTwo = getObjectValue(b, column.field);\r\n\r\n            var intOne = parseFloat(strOne);\r\n            var intTwo = parseFloat(strTwo);\r\n\r\n            if (isNaN(intOne) && isNaN(intTwo)) {\r\n                try {\r\n                    if (column.enableTranslation) {\r\n                        strOne = translate.instant(strOne);\r\n                        strTwo = translate.instant(strTwo);\r\n                    }\r\n                    strOne = strOne.toLowerCase();\r\n                    strTwo = strTwo.toLowerCase();\r\n                }\r\n                catch (e) { }\r\n                return strOne > strTwo ? (isAscending ? -1 : 1) : (strOne < strTwo ? (isAscending ? 1 : -1) : 0);\r\n            }\r\n            else if (isNaN(intOne)) {\r\n                return isAscending ? -1 : 1;\r\n            }\r\n            else if (isNaN(intTwo)) {\r\n                return isAscending ? 1 : -1;\r\n            }\r\n            else {\r\n                return intOne > intTwo ? (isAscending ? -1 : 1) : (intOne < intTwo ? (isAscending ? 1 : -1) : 0);\r\n            }\r\n        });\r\n    };\r\n\r\n    app.filter('smartTableFilter', ['$filter', '$translate', 'smartTableUtils', function ($filter, $translate, smartTableUtils) {\r\n        var isParentRowToBeDisplayed = function (data, index, filters) {\r\n            var result = false;\r\n\r\n            for (var i = index + 1; i < data.length; i++) {\r\n                if (data[i].$$treeLevel == 0) {\r\n                    break;\r\n                }\r\n                else {\r\n                    for (var j = 0; j < filters.length; j++) {\r\n                        if (((getObjectValue(data[i], filters[j].filterKey) + \"\").toLowerCase()).indexOf((filters[j].filterText + \"\").toLowerCase()) > -1) {\r\n                            result = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        var getChildrenNodes = function (data, nodeIndex) {\r\n            var tmpRows = $filter('filter')(data, function (row, i) {\r\n                return row.$$treeLevel > 0 && row.$$nodeIndex == nodeIndex;\r\n            });\r\n            tmpRows = $filter('orderBy')(tmpRows, '$$treeLevel', false);\r\n            return tmpRows;\r\n        };\r\n\r\n        return function (data, filters, sortState, enableTreeView, showTreeView, offset, limit, useExternalPagination, smartTableId) {\r\n            var outputData;\r\n            if (filters.length == 0) {\r\n                if (data) {\r\n                    if (enableTreeView) {\r\n                        var nodeIndex = -1;\r\n                        var parentIndex = -1;\r\n\r\n                        outputData = $filter('filter')(data, function (row, index) {\r\n                            if (row.$$treeLevel == 0) {\r\n                                nodeIndex++;\r\n                                parentIndex = index;\r\n                                row.$$enableTreeView = false;\r\n                            }\r\n                            else {\r\n                                try {\r\n                                    data[parentIndex].$$enableTreeView = true;\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n\r\n                            row.$$nodeIndex = nodeIndex;\r\n                            row.$$index = (useExternalPagination ? offset : 0) + index;\r\n                            row.$$parentIndex = parentIndex;\r\n                            row.$$isExpanded = data[parentIndex].$$isExpanded || !showTreeView;\r\n                            row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n\r\n                            return row.$$treeLevel == 0 || row.$$isExpanded;\r\n                        });\r\n                    }\r\n                    else {\r\n                        outputData = $filter('filter')(data, function (row, index) {\r\n                            row.$$index = (useExternalPagination ? offset : 0) + index;\r\n                            row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                            return true;\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    outputData = [];\r\n                }\r\n            }\r\n            else {\r\n                var keysMatchCounter = 0;\r\n                var nodeIndex = -1;\r\n                var parentIndex = -1;\r\n                var cellValue;\r\n\r\n                if (enableTreeView) {\r\n                    outputData = $filter('filter')(data, function (row, index) {\r\n                        if (row.$$treeLevel == 0) {\r\n                            nodeIndex++;\r\n                            parentIndex = index;\r\n                            row.$$enableTreeView = false;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                data[parentIndex].$$enableTreeView = true;\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n\r\n                        row.$$nodeIndex = nodeIndex;\r\n                        row.$$index = index;\r\n                        row.$$parentIndex = parentIndex;\r\n                        row.$$isExpanded = data[parentIndex].$$isExpanded || !showTreeView;\r\n                        row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                        keysMatchCounter = 0;\r\n\r\n                        for (var j = 0; j < filters.length; j++) {\r\n                            cellValue = (filters[j].colDef.enableTranslation && $translate.instant(getObjectValue(row, filters[j].filterKey) + '')) || getObjectValue(row, filters[j].filterKey) + '';\r\n\r\n                            if ((cellValue.toLowerCase()).indexOf((filters[j].filterText + '').toLowerCase()) > -1 ||\r\n                            (angular.isFunction(filters[j].condition) && filters[j].condition(filters[j].filterText, row, filters[j].colDef))) {\r\n                                keysMatchCounter++;\r\n                            }\r\n                        }\r\n\r\n                        return (row.$$treeLevel == 0 && keysMatchCounter == filters.length) ||\r\n                            (row.$$treeLevel != 0 && row.$$isExpanded && keysMatchCounter == filters.length) ||\r\n                            (row.$$treeLevel == 0 && isParentRowToBeDisplayed(data, index, filters));\r\n                    });\r\n                }\r\n                else {\r\n                    outputData = $filter('filter')(data, function (row, index) {\r\n                        row.$$index = index;\r\n                        row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                        keysMatchCounter = 0;\r\n\r\n                        for (var j = 0; j < filters.length; j++) {\r\n                            cellValue = (filters[j].colDef.enableTranslation && $translate.instant(getObjectValue(row, filters[j].filterKey) + '')) || getObjectValue(row, filters[j].filterKey) + '';\r\n\r\n                            if ((cellValue.toLowerCase()).indexOf((filters[j].filterText + '').toLowerCase()) > -1 ||\r\n                            (angular.isFunction(filters[j].condition) && filters[j].condition(filters[j].filterText, row, filters[j].colDef))) {\r\n                                keysMatchCounter++;\r\n                            }\r\n                        }\r\n\r\n                        return keysMatchCounter == filters.length;\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (sortState) {\r\n                if (enableTreeView) {\r\n                    //\treorder tree data\r\n                    var arrParentNodes = $filter('filter')(outputData, function (row) {\r\n                        return row.$$treeLevel == 0;\r\n                    });\r\n                    if (sortState.order > -1) {\r\n                        if (angular.isFunction(sortState.condition)) {\r\n                            arrParentNodes = sortState.condition(arrParentNodes, sortState.column, sortState.order == 0 ? false : true);\r\n                        }\r\n                        else {\r\n                            arrParentNodes = sortSmartTableData(arrParentNodes, sortState.column, sortState.order == 0 ? false : true, $translate);\r\n                        }\r\n                    }\r\n                    var arrOrderedData = [];\r\n                    angular.forEach(arrParentNodes, function (row) {\r\n                        arrOrderedData = arrOrderedData.concat([row]).concat(getChildrenNodes(outputData, row.$$nodeIndex));\r\n                    });\r\n                    outputData = arrOrderedData;\r\n                }\r\n                else {\r\n                    if (sortState.order > -1) {\r\n                        if (angular.isFunction(sortState.condition)) {\r\n                            outputData = sortState.condition(outputData, sortState.column, sortState.order == 0 ? false : true);\r\n                        }\r\n                        else {\r\n                            outputData = sortSmartTableData(outputData, sortState.column, sortState.order == 0 ? false : true, $translate);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!useExternalPagination) {\r\n                //\tUpdate total number of pages\r\n                smartTableUtils.broadcast('dataChange', { totalRecords: outputData.length, smartTableId: smartTableId });\r\n\r\n                outputData = outputData.slice(offset, limit);\r\n\r\n                //\tUpdate currently displayed records count\r\n                smartTableUtils.broadcast('pageIndexChanged', { currentPageDataLength: outputData.length, smartTableId: smartTableId });\r\n            }\r\n\r\n            return outputData;\r\n        }\r\n    }]);\r\n\r\n\r\n    app.directive('smartTable', ['$filter', '$timeout', '$templateCache', 'smartTableUtils', function ($filter, $timeout, $templateCache, smartTableUtils) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                smartTable: '=?'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var areEventListenersAdded = false, arrSelectedRowsIndexes = [], smartTableState;\r\n                var pageIndex = 0;\r\n                var recordsFetchedCount = 0;\r\n                var totalPages;\r\n                var apis;\r\n\r\n                var sortOrder = 1;  //  1 = descending, 0 = ascending, -1 = reset\r\n                scope.filters = [];\r\n                scope.enableRowSelection = false;\r\n                scope.enableTreeView = false;\r\n                scope.showTreeView = false;\r\n                scope.arrRowsPerPageOptions = [10, 20, 30, 40, 50];\r\n                scope.rowsPerPage = \"10\";\r\n                scope.useExternalPagination = false;\r\n                scope.smartTableId = 'smart-table-' + (new Date().getTime());\r\n\r\n                scope.listeners = {};\r\n\r\n                var limit = parseInt(scope.rowsPerPage);\r\n\r\n                var addEventListeners = function (smartTable) {\r\n                    apis = {\r\n                        core: {\r\n                            getActiveColumns: function () {\r\n                                return scope.smartTableConfig.columnDefs;\r\n                            },\r\n                            getColDefs: function () {\r\n                                return scope.smartTableConfig.columnDefs;\r\n                            },\r\n                            notifyColumnChange: function () {\r\n                                init('columnChange');\r\n                            },\r\n                            notifyRowDataChange: function (rowIndex) {\r\n                                smartTableUtils.broadcast('rowDataChange', { rowIndex: rowIndex, smartTableId: scope.smartTableId });\r\n                            },\r\n                            notifyDataChange: function (isToBeRefreshed) {\r\n                                if (isToBeRefreshed) {\r\n                                    init('refresh');\r\n                                }\r\n                                else {\r\n                                    smartTableUtils.broadcast('dataChange', { smartTableId: scope.smartTableId, updateCell: true });\r\n                                }\r\n                            },\r\n                            refresh: function () {\r\n                                scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                                scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                                scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                                scope.useExternalPagination = scope.smartTableConfig.useExternalPagination ? true : false;\r\n                                init('refresh');\r\n                                angular.isFunction(smartTable.onRefresh) && smartTable.onRefresh(apis);\r\n                            },\r\n                            update: function () {\r\n                                init('dataChange');\r\n                            },\r\n                            stopEdit: function () {\r\n                                if (window.lastActiveCellScope) {\r\n                                    window.lastActiveCellScope.stopEdit();\r\n                                    window.lastActiveCellScope = undefined;\r\n                                }\r\n                            },\r\n                            pagination: {\r\n                                on: {\r\n                                    nextButtonClick: function (scopeRef, onNextButtonClick) {\r\n                                        scope.listeners['nextButtonClick'] = onNextButtonClick;\r\n                                    },\r\n                                    previousButtonClick: function (scopeRef, onPreviousButtonClick) {\r\n                                        scope.listeners['previousButtonClick'] = onPreviousButtonClick;\r\n                                    },\r\n                                    sort: function (scopeRef, onSort) {\r\n                                        scope.listeners['sort'] = onSort;\r\n                                    },\r\n                                    filter: function (scopeRef, onFilter) {\r\n                                        scope.listeners['filter'] = onFilter;\r\n                                    }\r\n                                },\r\n                                setDataLength: function (totalItemsCount) {\r\n                                    scope.displayedRecords = totalItemsCount;\r\n                                },\r\n                                setData: function (items) {\r\n                                    scope.smartTableConfig.data = items;\r\n                                    scope.currentPageDataLength = items.length;\r\n                                },\r\n                                setOffset: function (offset) {\r\n                                    scope.offset = offset;\r\n                                },\r\n                                setLimit: function (limit) {\r\n                                    scope.limit = limit;\r\n                                },\r\n                                getOffset: function () {\r\n                                    return scope.offset;\r\n                                },\r\n                                getRowsPerPage: function () {\r\n                                    return scope.rowsPerPage;\r\n                                }\r\n                            },\r\n                            on: {\r\n                                columnRefresh: function (scopeRef, onColumnRefresh) {\r\n                                    scope.listeners['columnRefresh'] = onColumnRefresh;\r\n                                }\r\n                            }\r\n                        },\r\n                        cell: {\r\n                            on: {\r\n                                click: function (scopeRef, onCellClick) {\r\n                                    scope.listeners['cellClick'] = onCellClick;\r\n                                },\r\n                                change: function (scopeRef, onCellChange) {\r\n                                    scope.listeners['cellChange'] = onCellChange;\r\n                                },\r\n                                optionsChange: function (scopeRef, onOptionsChange) {\r\n                                    scope.listeners['optionsChange'] = onOptionsChange;\r\n                                },\r\n                                optionSelect: function (scopeRef, onOptionSelect) {\r\n                                    scope.listeners['optionSelect'] = onOptionSelect;\r\n                                }\r\n                            }\r\n                        },\r\n                        cellNav: {\r\n                            scrollToFocus: function (rowIndex, colField) {\r\n                                var columnIndex, toBeFocused = true;\r\n\r\n                                for (var i = 0; i < scope.colDefs.length; i++) {\r\n                                    if (scope.colDefs[i].field == colField) {\r\n                                        columnIndex = i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n\r\n                                if (scope.enableTreeView && scope.showTreeView && !scope.smartTableConfig.data[scope.smartTableConfig.data[rowIndex].$$parentIndex].$$isExpanded) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.smartTableConfig.data[scope.smartTableConfig.data[rowIndex].$$parentIndex].$$isExpanded = true;\r\n                                    toBeFocused = false;\r\n                                }\r\n\r\n                                //  Load next page\r\n                                if (rowIndex > (scope.limit > scope.displayedRecords ? scope.displayedRecords : scope.limit) - 1) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.updatePagination(true, false);\r\n                                }\r\n                                    //  Load previous page\r\n                                else if (rowIndex < scope.offset) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.updatePagination(false, false);\r\n                                }\r\n                                else if (toBeFocused) {\r\n                                    scope.pendingFocus = undefined;\r\n                                    $('#' + scope.smartTableId + '-smart-table-cell-' + ((scope.pinnedColumns.length + scope.unpinnedColumns.length) * (rowIndex - scope.offset) + columnIndex)).focus();\r\n                                    //smartTableUtils.broadcast('focusCell', { rowIndex: rowIndex - scope.offset, colField: colField, smartTableId: scope.smartTableId });\r\n                                }\r\n\r\n                                document.getSelection().removeAllRanges();\r\n                            }\r\n                        },\r\n                        edit: {\r\n                            on: {\r\n                                beginCellEdit: function (scopeRef, onBeginCellEdit) {\r\n                                    scope.listeners['beginCellEdit'] = onBeginCellEdit;\r\n                                },\r\n                                endCellEdit: function (scopeRef, onEndCellEdit) {\r\n                                    scope.listeners['endCellEdit'] = onEndCellEdit;\r\n                                },\r\n                                afterCellEdit: function (scopeRef, onAfterCellEdit) {\r\n                                    scope.listeners['afterCellEdit'] = onAfterCellEdit;\r\n                                }\r\n                            }\r\n                        },\r\n                        saveState: {\r\n                            save: function () {\r\n                                var columnsState = [];\r\n                                var tmpColDefs = getReOrderedColumnDefsForState(scope.smartTableConfig.columnDefs);\r\n\r\n                                for (var i = 0; i < tmpColDefs.length; i++) {\r\n                                    columnsState.push({\r\n                                        displayKey: tmpColDefs[i].displayKey,\r\n                                        displayName: tmpColDefs[i].displayName,\r\n                                        field: tmpColDefs[i].field,\r\n                                        width: tmpColDefs[i].width,\r\n                                        visible: tmpColDefs[i].visible\r\n                                    });\r\n                                }\r\n\r\n                                return {\r\n                                    columns: JSON.stringify(columnsState),\r\n                                    filters: scope.filters,\r\n                                    sort: scope.sortState,\r\n                                    enableRowSelection: scope.enableRowSelection,\r\n                                    enableTreeView: scope.enableTreeView,\r\n                                    showTreeView: scope.showTreeView,\r\n                                    pagination: {\r\n                                        pageIndex: pageIndex,\r\n                                        limit: limit,\r\n                                        paginationCurrentPage: 1,\r\n                                        paginationPageSize: 10\r\n                                    },\r\n                                    timestamp: new Date(),\r\n                                    documentURL: window.location.href,\r\n                                    isSmartTable: true\r\n                                };\r\n                            },\r\n                            restore: function (scopeRef, state) {\r\n                                //\trestore table state\r\n                                if (state.isSmartTable) {\r\n                                    scope.enableRowSelection = state.enableRowSelection ? true : false;\r\n                                    scope.enableTreeView = state.enableTreeView ? true : false;\r\n                                    scope.showTreeView = state.showTreeView ? true : false;\r\n\r\n                                    if (state.filters && !scope.useExternalPagination) {\r\n                                        scope.filters = state.filters;\r\n                                    }\r\n                                    if (angular.isDefined(state.columns)) {\r\n                                        scope.smartTableConfig.columnDefs = getReOrderedColumnDefs(state.columns);\r\n                                    }\r\n                                    if (!scope.useExternalPagination) {\r\n                                        if (state.pagination) {\r\n                                            pageIndex = state.pagination.limit > 10 ? 0 : state.pagination.pageIndex;\r\n                                            limit = 10; // state.pagination.limit;\r\n                                            scope.offset = pageIndex * limit;\r\n                                            scope.limit = (pageIndex * limit) + limit;\r\n                                            scope.rowsPerPage = \"10\";\r\n                                        }\r\n                                        if (state.sort) {\r\n                                            scope.sortState = state.sort;\r\n                                            sortOrder = state.sort.order;\r\n                                        }\r\n                                    }\r\n                                    refreshColumns();\r\n                                    angular.isFunction(smartTable.onRefresh) && smartTable.onRefresh(apis);\r\n                                }\r\n                                else {\r\n                                    scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                                    scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                                    scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                                    init('refresh');\r\n                                }\r\n                            }\r\n                        },\r\n                        selection: {\r\n                            clearSelectedRows: function () {\r\n                                for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                                    scope.smartTableConfig.data[i].$$isSelected = false;\r\n                                }\r\n                                arrSelectedRowsIndexes = [];\r\n                                scope.isAllRowSelected = false;\r\n                            },\r\n                            getSelectedRows: function () {\r\n                                var tmpSelectedRows = [], tmpRow, arrDeletedIndexes = [];\r\n                                for (var i = 0; i < arrSelectedRowsIndexes.length; i++) {\r\n                                    tmpRow = angular.copy(scope.smartTableConfig.data[arrSelectedRowsIndexes[i]]);\r\n                                    if (tmpRow) {\r\n                                        tmpRow.$$isSelected = false;\r\n                                        tmpSelectedRows.push({ entity: tmpRow, index: arrSelectedRowsIndexes[i] });\r\n                                    }\r\n                                    else {\r\n                                        arrDeletedIndexes.push(i);\r\n                                    }\r\n                                }\r\n                                for (var i = arrDeletedIndexes.length - 1; i >= 0; i--) {\r\n                                    arrSelectedRowsIndexes.splice(arrDeletedIndexes[i], 1);\r\n                                }\r\n                                return tmpSelectedRows;\r\n                            },\r\n                            on: {\r\n                                rowSelectionChanged: function (scopeRef, onRowSelectedChanged) {\r\n                                    scope.listeners['rowSelectionChanged'] = onRowSelectedChanged;\r\n                                }\r\n                            }\r\n                        },\r\n                        options: scope.smartTableConfig\r\n                    };\r\n                    angular.isFunction(smartTable.onRegister) && smartTable.onRegister(apis);\r\n                };\r\n\r\n\r\n                var onSmartTableConfigChange = scope.$watch('smartTable', function (newConfig) {\r\n                    if (!newConfig) {\r\n                        return;\r\n                    }\r\n\r\n                    scope.smartTableConfig = newConfig;\r\n                    scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                    scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                    scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                    scope.useExternalPagination = scope.smartTableConfig.useExternalPagination ? true : false;\r\n\r\n                    scope.smartTableConfig.columnDefs = newConfig.columnDefs ? newConfig.columnDefs : [];\r\n                    scope.smartTableConfig.data = newConfig.data ? newConfig.data : [];\r\n\r\n                    init('refresh');\r\n\r\n                    if (!areEventListenersAdded) {\r\n                        addEventListeners(scope.smartTable);\r\n                        areEventListenersAdded = true;\r\n                    }\r\n                });\r\n\r\n\r\n                var getColumnDef = function (srcConfig, colField) {\r\n                    for (var i = 0; i < srcConfig.length; i++) {\r\n                        if (srcConfig[i].field == colField) {\r\n                            return srcConfig[i];\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n\r\n\r\n                var getColumFilterText = function (colField) {\r\n                    for (var i = 0; i < scope.filters.length; i++) {\r\n                        if (scope.filters[i].filterKey == colField) {\r\n                            return scope.filters[i].filterText;\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n\r\n\r\n                var getReOrderedColumnDefs = function (colDefs) {\r\n                    colDefs = typeof colDefs == 'string' ? JSON.parse(colDefs) : colDefs;\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        if (angular.isUndefined(getColumnDef(colDefs, scope.smartTableConfig.columnDefs[i].field))) {\r\n                            return scope.smartTableConfig.columnDefs;\r\n                        }\r\n                    }\r\n                    var reOrderedColumns = [];\r\n                    var colDef;\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        colDef = getColumnDef(scope.smartTableConfig.columnDefs, colDefs[i].field);\r\n                        if (angular.isUndefined(colDef)) {\r\n                            return scope.smartTableConfig.columnDefs;\r\n                        }\r\n                        reOrderedColumns.push(angular.extend(colDef, {\r\n                            width: colDefs[i].width,\r\n                            visible: angular.isUndefined(colDefs[i].visible) ? colDef.visible : colDefs[i].visible,\r\n                            filterText: getColumFilterText(colDefs[i].field)\r\n                        }));\r\n                    }\r\n                    return reOrderedColumns;\r\n                };\r\n\r\n\r\n                var getReOrderedColumnDefsForState = function (colDefs) {\r\n                    var pinnedColumns = [];\r\n                    var unpinnedColumns = [];\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    return pinnedColumns.concat(unpinnedColumns);\r\n                };\r\n\r\n\r\n                var refreshColumns = function () {\r\n                    var pinnedColumns = [];\r\n                    var unpinnedColumns = [];\r\n                    var pinnedContainerWidth = 0;\r\n\r\n                    var colDefs = angular.copy(scope.smartTableConfig.columnDefs);\r\n                    var tmpColDefs = [];\r\n                    var leftPos = (scope.enableRowSelection ? 40 : 0) + (scope.enableTreeView && scope.showTreeView ? 40 : 0);\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].visible == false) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            colDefs[i].pinnedLeft = false;\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    colDefs = pinnedColumns.concat(unpinnedColumns);\r\n                    pinnedColumns = [];\r\n                    unpinnedColumns = [];\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].visible == false) {\r\n                            continue;\r\n                        }\r\n\r\n                        colDefs[i].left = leftPos;\r\n\r\n                        leftPos = leftPos + colDefs[i].width;\r\n\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedContainerWidth = pinnedContainerWidth + (colDefs[i].visible ? (colDefs[i].width ? colDefs[i].width : '100') : 0);\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    tmpColDefs = pinnedColumns.concat(unpinnedColumns);\r\n\r\n                    scope.colDefs = angular.copy(tmpColDefs);\r\n\r\n                    $(element.find('.smart-table-unpinned-container')).css('margin-left', pinnedContainerWidth + (scope.enableRowSelection ? 40 : 0) + (scope.enableTreeView && scope.showTreeView ? 40 : 0));\r\n\r\n                    scope.pinnedColumns = pinnedColumns;\r\n                    scope.unpinnedColumns = unpinnedColumns;\r\n\r\n                    scope.updateSmartTableColumnResizer = true;\r\n                    scope.updateSmartTableColumnSorter = true;\r\n                };\r\n\r\n\r\n                var init = function (eventType) {\r\n                    switch (eventType) {\r\n                        case 'refresh':\r\n                            pageIndex = 0;\r\n                            scope.rowsPerPage = \"10\";\r\n                            limit = parseInt(scope.rowsPerPage); // 10;\r\n                            recordsFetchedCount = 0;\r\n\r\n                            sortOrder = 1;\r\n\r\n                            for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                                scope.smartTableConfig.columnDefs[i].filterText = \"\";\r\n                            }\r\n\r\n                            scope.filters = [];\r\n                            scope.sortState = undefined;\r\n\r\n                            scope.isRowSelectionEnabled = true;\r\n                            scope.isAllRowSelected = false;\r\n\r\n                            refreshColumns();\r\n\r\n                            scope.updatePagination(false, true);\r\n                            break;\r\n\r\n                        case 'columnChange':\r\n                        case 'dataChange':\r\n                            refreshColumns();\r\n                            break;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.updatePagination = function (isNextButtonClicked, isRefresh) {\r\n                    if (scope.useExternalPagination) {\r\n                        if (isNextButtonClicked) {\r\n                            angular.isFunction(scope.listeners.nextButtonClick) && scope.listeners.nextButtonClick();\r\n                        }\r\n                        else {\r\n                            angular.isFunction(scope.listeners.previousButtonClick) && scope.listeners.previousButtonClick();\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (isRefresh) {\r\n                        scope.offset = 0;\r\n                        scope.limit = parseInt(scope.rowsPerPage); // 10\r\n                        pageIndex = 0;\r\n                    }\r\n                    else {\r\n                        if (isNextButtonClicked && pageIndex < totalPages) {\r\n                            pageIndex++;\r\n                        }\r\n                        else if (!isNextButtonClicked && pageIndex > 0) {\r\n                            pageIndex--;\r\n                        }\r\n                        scope.offset = pageIndex * limit;\r\n                        scope.limit = (pageIndex * limit) + limit;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.onRowsPerPageOptionChange = function (rowsPerPage) {\r\n                    limit = parseInt(rowsPerPage);\r\n                    scope.updatePagination(false, true);\r\n                };\r\n\r\n\r\n                scope.filterData = function (column) {\r\n                    for (var i = 0; i < scope.filters.length; i++) {\r\n                        if (scope.filters[i].filterKey == column.field) {\r\n                            if (column.filterText.trim() == '') {\r\n                                scope.filters.splice(i, 1);\r\n                            }\r\n                            else {\r\n                                scope.filters[i].filterText = column.filterText;\r\n                            }\r\n                            scope.updatePagination(false, true);\r\n                            return;\r\n                        }\r\n                    }\r\n                    scope.filters.push({\r\n                        filterKey: column.field,\r\n                        filterText: column.filterText,\r\n                        colDef: column,\r\n                        condition: column.hasOwnProperty('filter') && column.filter.condition\r\n                    });\r\n                    scope.updatePagination(false, true);\r\n                };\r\n\r\n\r\n                scope.sortData = function (column) {\r\n                    smartTableUtils.debounce.add(function () {\r\n                        //\tIf new column needs to be sorted, then reset sort flag\r\n                        if (scope.sortState && scope.sortState.column.field != column.field || sortOrder < -1) {\r\n                            sortOrder = 1;\r\n                        }\r\n                        refreshColumns();\r\n                        scope.updatePagination(false, true);\r\n                        scope.sortState = {\r\n                            column: column,\r\n                            order: sortOrder,\r\n                            condition: column.sortCondition\r\n                        };\r\n                        sortOrder--;\r\n                    }, 250);\r\n                };\r\n\r\n\r\n                scope.selectRow = function (row, rowIndex, shouldSelectedAllRows) {\r\n                    if (shouldSelectedAllRows) {\r\n                        scope.isAllRowSelected = !scope.isAllRowSelected;\r\n                        if (scope.isAllRowSelected) {\r\n                            arrSelectedRowsIndexes = [];\r\n                        }\r\n                        for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                            scope.smartTableConfig.data[i].$$isSelected = scope.smartTableConfig.data[i].$$isSelectable && scope.isAllRowSelected;\r\n                            if (scope.isAllRowSelected && scope.smartTableConfig.data[i].$$isSelected) {\r\n                                arrSelectedRowsIndexes.push(i);\r\n                            }\r\n                        }\r\n                        if (!scope.isAllRowSelected) {\r\n                            arrSelectedRowsIndexes = [];\r\n                        }\r\n                    }\r\n                    else {\r\n                        row.$$isSelected = row.$$isSelectable && !row.$$isSelected;\r\n                        if (row.$$isSelected) {\r\n                            arrSelectedRowsIndexes.push(rowIndex);\r\n                        }\r\n                        else {\r\n                            if (arrSelectedRowsIndexes.indexOf(rowIndex) > -1) {\r\n                                arrSelectedRowsIndexes.splice(arrSelectedRowsIndexes.indexOf(rowIndex), 1);\r\n                            }\r\n                        }\r\n                        scope.isAllRowSelected = arrSelectedRowsIndexes.length == scope.smartTableConfig.data.length;\r\n                    }\r\n\r\n                    if (/*rowIndex > -1 &&*/ angular.isFunction(scope.listeners.rowSelectionChanged)) {\r\n                        scope.listeners.rowSelectionChanged({\r\n                            row: {\r\n                                entity: row,\r\n                                index: rowIndex,\r\n                                isSelected: scope.isAllRowSelected || (row && row.$$isSelected)\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n\r\n                scope.expandRow = function (row, rowIndex, shouldExpandAllRows) {\r\n                    if (shouldExpandAllRows) {\r\n                        for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                            if (scope.smartTableConfig.data[i].$$treeLevel == 0) {\r\n                                scope.smartTableConfig.data[i].$$isExpanded = !scope.isAllRowExpanded\r\n                            }\r\n                        }\r\n                        scope.isAllRowExpanded = !scope.isAllRowExpanded;\r\n                        scope.updatePagination(false, true);\r\n                    }\r\n                    else {\r\n                        if (row.$$treeLevel > 0) {\r\n                            return;\r\n                        }\r\n                        row.$$isExpanded = !row.$$isExpanded;\r\n                        scope.isAllRowExpanded = false;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.onColumnSort = function (e) {\r\n                    var activeColDefs = angular.copy(scope.colDefs);\r\n                    var startIndex, endIndex, toBeSorted;\r\n\r\n                    var startCol = activeColDefs[e.startIndex];\r\n                    var endCol = activeColDefs[e.endIndex];\r\n\r\n                    if (startCol.pinnedLeft != endCol.pinnedLeft || startCol.field == endCol.field) {\r\n                        return;\r\n                    }\r\n\r\n                    scope.$apply(function () {\r\n                        for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                            if (scope.smartTableConfig.columnDefs[i].field == startCol.field) {\r\n                                startIndex = i;\r\n                                if (angular.isDefined(endIndex)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (scope.smartTableConfig.columnDefs[i].field == endCol.field) {\r\n                                endIndex = i;\r\n                                if (angular.isDefined(startIndex)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var tmpColDefs = angular.copy(scope.smartTableConfig.columnDefs);\r\n                        var item = tmpColDefs.splice(startIndex, 1);\r\n                        tmpColDefs.splice(endIndex, 0, item[0]);\r\n                        scope.smartTableConfig.columnDefs = angular.copy(tmpColDefs);\r\n                        tmpColDefs = null;\r\n\r\n                        init('columnChange');\r\n                        angular.isFunction(scope.listeners.columnRefresh) && scope.listeners.columnRefresh(scope.colDefs);\r\n                    });\r\n                };\r\n\r\n\r\n                scope.onColumnResize = function (e) {\r\n                    var activeColDefs = angular.copy(scope.colDefs);\r\n                    var colToBeResized;\r\n\r\n                    for (var i = 0; i < activeColDefs.length; i++) {\r\n                        if (e.columnIndex == i) {\r\n                            colToBeResized = activeColDefs[i];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        if (scope.smartTableConfig.columnDefs[i].field == colToBeResized.field) {\r\n                            scope.smartTableConfig.columnDefs[i].width = e.width;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    init('columnChange');\r\n                    angular.isFunction(scope.listeners.columnRefresh) && scope.listeners.columnRefresh(scope.colDefs);\r\n                };\r\n\r\n\r\n                var watchers;\r\n\r\n                scope.onSmartTableRenderingStart = function () {\r\n                    watchers = scope.$$watchers;\r\n                    scope.$$watchers = [];\r\n                    // window.startTime = performance.now();\r\n                    // console.log('rendering start');\r\n                };\r\n\r\n                scope.onSmartTableRenderingDone = function () {\r\n                    if (watchers) {\r\n                        scope.$$watchers = watchers;\r\n                    }\r\n                    // discard our copy of the watchers\r\n                    watchers = void 0;\r\n                    // console.log('rendering done in => ' + ((performance.now() - window.startTime) / 1000) + ' seconds');\r\n                };\r\n\r\n                var onDataChange = smartTableUtils.on('dataChange', function (e) {\r\n                    if (angular.isDefined(e.totalRecords) && e.smartTableId == scope.smartTableId) {\r\n                        totalPages = Math.ceil(e.totalRecords / limit) - 1;\r\n                        scope.displayedRecords = e.totalRecords;\r\n                    }\r\n                });\r\n\r\n                var onPageIndexChanged = smartTableUtils.on('pageIndexChanged', function (e) {\r\n                    if (e.smartTableId == scope.smartTableId) {\r\n                        scope.currentPageDataLength = e.currentPageDataLength;\r\n                    }\r\n                });\r\n\r\n                var onSmartTableCurrentPageDataLength = scope.$watch('currentPageDataLength', function (newLength) {\r\n                    if (newLength == 0 && pageIndex > 0) {\r\n                        scope.updatePagination(false, false);\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onSmartTableConfigChange();\r\n                    onPageIndexChanged();\r\n                    onSmartTableCurrentPageDataLength();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/smartTable/smartTableTemplate.html'\r\n        };\r\n    }]);\r\n\r\n    app.service('smartTableUtils', ['$timeout', function ($timeout) {\r\n        var _this = this;\r\n\r\n        /*\r\n         *  Alternative of broadcast event\r\n         */\r\n        var arrEvents = [];\r\n        var eventCounter = 0;\r\n\r\n\r\n        /*\r\n         *  Deregister an event or events\r\n         */\r\n        this.removeEventListener = function (event) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (arrEvents[i].eventName == event.eventName && arrEvents[i].eventId == event.eventId) {\r\n                    arrEvents[i].callback = null;\r\n                    arrEvents.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n         *  Register a listener\r\n         */\r\n        this.on = function (eventName, callback) {\r\n            eventCounter++;\r\n            arrEvents.push({\r\n                eventName: eventName,\r\n                callback: callback,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            });\r\n            var objEvent = {\r\n                eventName: eventName,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            };\r\n            return function () {\r\n                _this.removeEventListener(objEvent);\r\n            };\r\n        };\r\n\r\n\r\n        /*\r\n         *  Fire an event\r\n         */\r\n        this.broadcast = function (eventName, data) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (eventName == arrEvents[i].eventName) {\r\n                    angular.isFunction(arrEvents[i].callback) && arrEvents[i].callback(data);\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n\t     *\tDebouncer logic\r\n\t\t */\r\n        var functionTimeout, isAngularTimeout;\r\n\r\n        this.debounce = {\r\n            add: function (callback, duration, isDigestCycleToBeTriggered) {\r\n                if (functionTimeout) {\r\n                    if (angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false) {\r\n                        clearTimeout(functionTimeout);\r\n                    }\r\n                    else {\r\n                        $timeout.cancel(functionTimeout);\r\n                    }\r\n                }\r\n                functionTimeout = angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false ? setTimeout(function () {\r\n                    angular.isFunction(callback) && callback();\r\n                }, duration ? duration : 1000) : $timeout(function () {\r\n                    angular.isFunction(callback) && callback();\r\n                }, duration ? duration : 1000);\r\n                isAngularTimeout = !angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false;\r\n            },\r\n            cancel: function () {\r\n                if (isAngularTimeout) {\r\n                    $timeout.cancel(functionTimeout);\r\n                }\r\n                else {\r\n                    clearTimeout(functionTimeout);\r\n                }\r\n                functionTimeout = null;\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableCellStyle', ['$compile', '$timeout',\r\n\tfunction () {\r\n\t    return {\r\n\t        restrict: 'A',\r\n\t        link: function (scope, element, attrs) {\r\n\t            //\tto watch the rendering changes e.g. sort or filter\r\n\t            var onColumnConfigChange = scope.$watch('column', function (n) {\r\n\t                init();\r\n\t            });\r\n\r\n\t            var init = function () {\r\n\t                element.removeClass('smart-table-pinned-column smart-table-unpinned-column');\r\n\t                if (scope.column.pinnedLeft) {\r\n\t                    element.addClass('smart-table-pinned-column');\r\n\t                    element.css('left', scope.column.left);\r\n\t                    element.css('width', scope.column.width);\r\n\t                }\r\n\t                else {\r\n\t                    element.addClass('smart-table-unpinned-column');\r\n\t                }\r\n\t            };\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                onColumnConfigChange();\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t}]);\r\n\r\n    app.directive('smartTableHeaderCellTextContainer', ['$compile', '$timeout',\r\n\tfunction () {\r\n\t    return {\r\n\t        restrict: 'C',\r\n\t        link: function (scope, element, attrs) {\r\n\t            //\tto watch the rendering changes e.g. sort or filter\r\n\t            var onColumnConfigChange = scope.$watch('column', function (n) {\r\n\t                init();\r\n\t            });\r\n\r\n\t            var init = function () {\r\n\t                element.css('width', scope.column.width - (scope.column.pinnedLeft ? 12 : 0));\r\n\t            };\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                onColumnConfigChange();\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t}]);\r\n\r\n    app.directive('smartTableColumnResizer', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var isMouseDown, canBeResized, resizer, leftPosLimit = 0, columnIndex, maxWidth, width, newWidth;\r\n\r\n                var onMouseMove = function (e) {\r\n                    if (isMouseDown) {\r\n                        if (e.clientX > leftPosLimit && (angular.isUndefined(maxWidth) || (angular.isDefined(maxWidth) && e.clientX - leftPosLimit < maxWidth))) {\r\n                            resizer.css({\r\n                                left: e.clientX\r\n                            });\r\n                        }\r\n                        document.getSelection().removeAllRanges();\r\n                    }\r\n                    else {\r\n                        if (e.offsetX > (($(this).outerWidth(true) - 2) - 5) && e.offsetX < (($(this).outerWidth(true) - 2))) {\r\n                            $(this).css('cursor', 'col-resize');\r\n                        }\r\n                        else {\r\n                            $(this).css('cursor', 'default');\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var onMouseUp = function (e) {\r\n                    if (isMouseDown) {\r\n                        resizer.off('mousemove', onMouseMove);\r\n                        resizer.off('mouseup', onMouseUp);\r\n                        resizer.remove();\r\n                        canBeResized = false;\r\n                        isMouseDown = false;\r\n                        newWidth = (angular.isDefined(maxWidth) && e.clientX - leftPosLimit > maxWidth) ? maxWidth : e.clientX - leftPosLimit;\r\n\r\n                        if (Math.abs(newWidth - width) > 5) {\r\n                            scope.$apply(function () {\r\n                                scope.onColumnResize({\r\n                                    columnIndex: columnIndex,\r\n                                    width: newWidth < 20 ? 20 : newWidth\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var onMouseDown = function (e) {\r\n                    if (e.offsetX >= (($(this).outerWidth(true) - 2) - 5) && e.offsetX < (($(this).outerWidth(true) - 2))) {\r\n                        $(this).css('cursor', 'col-resize');\r\n                        leftPosLimit = $(this).offset().left;\r\n                        resizer = $(document.createElement('div'));\r\n                        columnIndex = parseInt($(this).attr('column-index'));\r\n                        maxWidth = scope.colDefs[columnIndex].maxWidth;\r\n                        width = scope.colDefs[columnIndex].width;\r\n\r\n                        resizer.css({\r\n                            position: 'absolute',\r\n                            left: $(this).offset().left + $(this).outerWidth(true),\r\n                            top: $(this).offset().top,\r\n                            width: '1px',\r\n                            height: $(this).closest('table').outerHeight(true),\r\n                            'z-index': 1000,\r\n                            border: 'dotted'\r\n                        });\r\n\r\n                        resizer.on('mousemove', onMouseMove);\r\n                        resizer.on('mouseup', onMouseUp);\r\n\r\n                        $(document.body).append(resizer);\r\n\r\n                        isMouseDown = true;\r\n                    }\r\n                    else {\r\n                        $(this).css('cursor', 'default');\r\n                    }\r\n                };\r\n\r\n                var bindEvents = function () {\r\n                    setTimeout(function () {\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousemove', onMouseMove);\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousemove', onMouseMove);\r\n                    }, 250);\r\n                };\r\n\r\n                scope.$watch('updateSmartTableColumnResizer', function (newValue) {\r\n                    if (newValue) {\r\n                        bindEvents();\r\n                        scope.updateSmartTableColumnResizer = false;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableColumnSorter', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var isMouseDown, startX, offsetX, isPinnedColumn, clone, mouseDownTimeout;\r\n\r\n                var onMouseMove = function (e) {\r\n                    if (isMouseDown) {\r\n                        $(clone).css({\r\n                            left: e.clientX - offsetX\r\n                        });\r\n                        document.getSelection().removeAllRanges();\r\n                    }\r\n                };\r\n\r\n                var onMouseUp = function (e) {\r\n                    $(clone).off('mousemove', onMouseMove);\r\n                    $(clone).off('mouseup', onMouseUp);\r\n                    $(clone).off('mouseleave', onMouseUp);\r\n                    $(clone).remove();\r\n\r\n                    if (isMouseDown && e.type == 'mouseup') {\r\n                        var startIndex, endIndex;\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').each(function (index, th) {\r\n                            if (angular.isUndefined(startIndex) && startX > $(th).offset().left && startX < $(th).offset().left + $(th).outerWidth(true)) {\r\n                                startIndex = index;\r\n                            }\r\n                            else if (angular.isUndefined(endIndex) && e.clientX > $(th).offset().left && e.clientX < $(th).offset().left + $(th).outerWidth(true)) {\r\n                                endIndex = index;\r\n                            }\r\n                        });\r\n\r\n                        if (angular.isDefined(startIndex) && angular.isDefined(endIndex)) {\r\n                            scope.onColumnSort({\r\n                                startIndex: startIndex,\r\n                                endIndex: endIndex,\r\n                                isPinnedColumn: isPinnedColumn\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    isMouseDown = false;\r\n\r\n                    if (mouseDownTimeout) {\r\n                        clearTimeout(mouseDownTimeout);\r\n                        mouseDownTimeout = undefined;\r\n                    }\r\n                };\r\n\r\n                var onMouseDown = function (e) {\r\n                    if ($(e.target).closest('.smart-table-search-container').length > 0 || e.offsetX >= $(this).outerWidth(true) - 20) {\r\n                        return;\r\n                    }\r\n\r\n                    var $this = this;\r\n\r\n                    mouseDownTimeout = setTimeout(function () {\r\n                        startX = e.clientX;\r\n                        offsetX = e.offsetX;\r\n                        isMouseDown = true;\r\n\r\n                        isPinnedColumn = $(e.target).closest('.smart-table-pinned-column').length > 0;\r\n                        clone = $($this).clone();\r\n\r\n                        $(clone).on('mousemove', onMouseMove);\r\n                        $(clone).on('mouseup', onMouseUp);\r\n                        $(clone).on('mouseleave', onMouseUp);\r\n\r\n                        $(clone).css({\r\n                            position: 'absolute',\r\n                            left: $($this).offset().left,\r\n                            top: $($this).offset().top,\r\n                            width: $($this).outerWidth(true),\r\n                            height: $($this).outerHeight(true),\r\n                            'z-index': 1000,\r\n                            border: 'dotted'\r\n                        });\r\n\r\n                        $(document.body).append(clone);\r\n\r\n                        mouseDownTimeout = undefined;\r\n                    }, 500);\r\n                };\r\n\r\n                var bindEvents = function () {\r\n                    setTimeout(function () {\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousemove', onMouseMove);\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousemove', onMouseMove);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mouseup', onMouseUp);\r\n                    }, 250);\r\n                };\r\n\r\n                scope.$watch('updateSmartTableColumnSorter', function (newValue) {\r\n                    if (newValue) {\r\n                        bindEvents();\r\n                        scope.updateSmartTableColumnSorter = false;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableCell', ['$rootScope', '$compile', '$timeout', 'smartTableUtils', '$filter', '$translate', 'APPCONSTANTS', 'httpService',\r\n\tfunction ($rootScope, $compile, $timeout, smartTableUtils, $filter, $translate, APPCONSTANTS, httpService) {\r\n\t    return {\r\n\t        restrict: 'EA',\r\n\t        replace: true,\r\n\t        link: function (scope, element, attrs) {\r\n\t            var tabIndex, oldCellValue, oldCellClass, tmpCellValue, tmpInputValue, tmpValueForAutoSuggest;\r\n\t            var isInEditMode = false, selectedOption, selectedDate;\r\n\r\n\t            var templateContainer, cellClassElement = $(element.closest('.smart-table-row-cell'));\r\n\t            var hasStopEditCalled = false, isLineNumberAssigned = false, isInputFieldFocused = false, isRenderingToBeSkipped = false, isFocusToBeSkipped = false;\r\n\r\n\t            var appScope = scope.$parent.$parent.$parent;\r\n\t            var smartTableScope = scope.$parent.$parent;\r\n\r\n\t            //\tto watch the rendering changes e.g. sort or filter, col def change\r\n\t            var onCellDataAndColDefChange = scope.$watchGroup(['value', 'column'], function (n) {\r\n\t                tabIndex = (scope.pinnedColumns.length + scope.unpinnedColumns.length) * scope.$parent.$index + scope.$index;\r\n\t                element.attr('id', smartTableScope.smartTableId + '-smart-table-cell-' + tabIndex);\r\n\t                element.attr('tabindex', tabIndex);\r\n\t                oldCellClass = undefined;\r\n\t                init(false, true);\r\n\t                if (angular.isDefined(smartTableScope.pendingFocus) && (smartTableScope.pendingFocus.rowIndex - smartTableScope.offset) == scope.rowIndex && smartTableScope.pendingFocus.columnIndex == scope.columnIndex) {\r\n\t                    element.trigger('focus');\r\n\t                    scope.pendingFocus = undefined;\r\n\t                }\r\n\t            });\r\n\r\n\t            var init = function (isRowDataUpdated, toBeTranslated) {\r\n\t                scope.row = {\r\n\t                    entity: scope.value\r\n\t                };\r\n\r\n\t                if (angular.isDefined(scope.column) && scope.column.uiType == 'editable' && scope.column.attributes.type == 'date' && isRegionalSettingEnabled) {\r\n\t                    scope.column.attributes.format = moment.localeData().longDateFormat('L').toLowerCase().replace(/m/g, 'M');\r\n\t                }\r\n\r\n\t                scope.enableCellEdit = angular.copy(scope.column.enableCellEdit);\r\n\r\n\t                cellClassElement.removeClass('smart-table-row-cell-invalid smart-table-row-cell-disabled smart-table-row-cell-canceled');\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css({\r\n\t                    border: '',\r\n\t                    width: scope.column.width + (scope.column.pinnedLeft ? -2 : 10)\r\n\t                });\r\n\r\n\t                if (!isRowDataUpdated) {\r\n\t                    //\trendering start callback\r\n\t                    if (!smartTableScope.hasSmartTableRenderingStarted) {\r\n\t                        scope.onSmartTableRenderingStart();\r\n\t                        smartTableScope.hasSmartTableRenderingStarted = true;\r\n\t                    }\r\n\r\n\t                    scope.pinned = attrs.pinned == 'true';\r\n\r\n\t                    scope.rowIndex = scope.$parent.$index;\r\n\t                    scope.columnIndex = scope.$index;\r\n\r\n\t                    if (scope.column.autoIncrement && !smartTableScope.useExternalPagination) {\r\n\t                        if (angular.isDefined(scope.row.entity.$$nodeIndex)) {\r\n\t                            updateCell(scope.row.entity, scope.column.field, scope.row.entity.$$nodeIndex + 1);\r\n\t                        }\r\n\t                        else {\r\n\t                            updateCell(scope.row.entity, scope.column.field, scope.row.entity.$$index + 1);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (angular.isDefined(scope.column.attributes) && scope.column.attributes.type == \"autocomplete\" &&\r\n                    angular.isDefined(scope.column.attributes.displayformat) && angular.isDefined(scope.column.field)) {\r\n\t                    tmpValueForAutoSuggest = getObjectValueForAutoSuggest(scope.row.entity, scope.column.field);\r\n\t                    if (angular.isObject(tmpValueForAutoSuggest)) {\r\n\t                        //scope.COL_FIELD = getDisplayData(getObjectValue(scope.row.entity, scope.column.field.split('.')[0]), scope.column.attributes.displayformat);\r\n\t                        scope.COL_FIELD = getDisplayData(tmpValueForAutoSuggest, scope.column.attributes.displayformat);\r\n\t                    }\r\n\t                    else {\r\n\t                        scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                }\r\n\r\n\t                if (angular.isFunction(scope.column.cellClass) /*&& oldCellValue != scope.COL_FIELD*/) {\r\n\t                    var tmpClass = scope.column.cellClass({}, { entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex, value: getObjectValue(scope.row.entity, scope.column.field) });\r\n\t                    if (angular.isObject(tmpClass)) {\r\n\t                        if (cellClassElement.find('.smart-table-row-cell-info-icon').length == 0) {\r\n\t                            var iconTemplate = '';\r\n\t                            switch (tmpClass.type) {\r\n\t                                case 'smart-table-row-cell-info':\r\n\t                                    iconTemplate += '<svg><use xlink:href=\"#icon_Info\"></use></svg>';\r\n\t                                    break;\r\n\t                                default:\r\n\t                                    iconTemplate += '<svg><use xlink:href=\"#icon_Info\"></use></svg>';\r\n\t                                    break;\r\n\t                            }\r\n\t                            cellClassElement.find('.smart-table-cell-text').append('<i class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + tmpClass.message + '\">' + iconTemplate + '</i>');\r\n\t                        }\r\n\t                        cellClassElement.addClass(tmpClass.class);\r\n\t                    }\r\n\t                    else {\r\n\t                        cellClassElement.addClass(tmpClass);\r\n\t                    }\r\n\t                    oldCellClass = tmpClass;\r\n\t                }\r\n\r\n\t                if (angular.isFunction(scope.column.cellEditableCondition)) {\r\n\t                    scope.enableCellEdit = scope.column.cellEditableCondition({ row: scope.row, index: scope.rowIndex, col: { colDef: scope.column, index: scope.columnIndex }, grid: { rows: smartTableScope.smartTableConfig.data } });\r\n\t                }\r\n\r\n\t                updateCellTemplate(true, toBeTranslated);\r\n\r\n\t                if (!isRowDataUpdated) {\r\n\t                    //\trendering done callback\r\n\t                    if (scope.$parent.$last && scope.$last) {\r\n\t                        scope.onSmartTableRenderingDone();\r\n\t                        smartTableScope.hasSmartTableRenderingStarted = false;\r\n\t                    }\r\n\t                }\r\n\t            };\r\n\r\n\t            // init();\r\n\r\n\r\n\t            //  Update date\r\n\t            var updateDate = function (tmpDate) {\r\n\t                if (selectedDate == '/Date(' + ((tmpDate.unix() * 1000) + 43200000) + '+0000)/') {\r\n\t                    return;\r\n\t                }\r\n\t                selectedDate = '/Date(' + ((tmpDate.unix() * 1000) + 43200000) + '+0000)/';\r\n\t                element.find('input').val($filter('smartDateFormat')(selectedDate, scope.column.attributes.format));\r\n\t                if (scope.column.isRegUpdateCol) {\r\n\t                    //\tcell change listener\r\n\t                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: selectedDate });\r\n\t                }\r\n\t            };\r\n\r\n\r\n\t            //  Pop-up listeners\r\n\t            var onPopupOpened, onPopupClosed;\r\n\r\n\t            var addPopupListeners = function () {\r\n\t                var oldCellModel, newCellModel;\r\n\r\n\t                onPopupOpened = $rootScope.$on(\"popupOpened\", function () {\r\n\t                    oldCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                });\r\n\r\n\t                onPopupClosed = $rootScope.$on(\"popupClosed\", function () {\r\n\t                    if (angular.isDefined(scope.column.debounce) && scope.column.debounce > 0) {\r\n\t                        setTimeout(function () {\r\n\t                            newCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                            updateCellValueForPopup(oldCellModel, newCellModel);\r\n\t                        }, scope.column.debounce);\r\n\t                    }\r\n\t                    else {\r\n\t                        newCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                        updateCellValueForPopup(oldCellModel, newCellModel);\r\n\t                    }\r\n\r\n\t                    element.trigger('focus');\r\n\t                });\r\n\t            };\r\n\r\n\r\n\t            var updateCellValueForPopup = function (oldCellModel, newCellModel) {\r\n\t                if (!angular.equals(oldCellModel, newCellModel)) {\r\n\t                    scope.COL_FIELD = newCellModel;\r\n\t                    updateCellTemplate(true, true);\r\n\t                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }\r\n\t            };\r\n\r\n\r\n\t            var removePopupListeners = function () {\r\n\t                angular.isFunction(onPopupOpened) && onPopupOpened();\r\n\t                angular.isFunction(onPopupClosed) && onPopupClosed();\r\n\t            };\r\n\r\n\t            function triggerTaxesPopup() {\r\n\t                element.trigger(\"blur\");\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t            }\r\n\t            function triggerAdhocPopup() {\r\n\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t                event.stopPropagation();\r\n\t                event.preventDefault();\r\n\t            }\r\n\t            function triggerSupplierCardPopup() {\r\n\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t                event.stopPropagation();\r\n\t                event.preventDefault();\r\n\t            }\r\n\t            var updateCellTemplate = function (toBeFiltered, toBeTranslated) {\r\n\t                if (angular.isFunction(scope.column.cellTemplate)) {\r\n\t                    tmpCellValue = scope.column.cellTemplate({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                    if (scope.column.uiType == 'popup' && angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\t                    element.find('.smart-table-cell-template').html((scope.column.uiType == 'popup' ? '<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' : '<span>') + tmpCellValue + (scope.column.uiType == 'popup' ? '</a>' : '</span>'));\r\n\t                    element.parent().attr('title', tmpCellValue);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (scope.column.uiType == 'editable') {\r\n\t                    switch (scope.column.attributes.type) {\r\n\t                        case 'number':\r\n\t                            if (toBeFiltered && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        case 'date':\r\n\t                            if (toBeFiltered) {\r\n\t                                scope.COL_FIELD = scope.COL_FIELD == '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : $filter('smartDateFormat')(scope.COL_FIELD, scope.column.attributes.format);\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        default:\r\n\t                            if (toBeTranslated && scope.column.enableTranslation) {\r\n\t                                scope.COL_FIELD = $translate.instant(scope.COL_FIELD);\r\n\t                            }\r\n\t                            if (toBeFiltered && angular.isDefined(scope.column.attributes.maxlength) && angular.isDefined(scope.COL_FIELD)) {\r\n\t                                scope.COL_FIELD = scope.COL_FIELD.substr(0, scope.column.attributes.maxlength);\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                    tmpCellValue = (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD);\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                    if (scope.column.uiType == \"editable\" && scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Common_AddAdhocLocation\") + '\"><svg><use xlink:href=\"#icon_Location\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerAdhocPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\r\n\t                    }\r\n\t                    else if (scope.column.uiType == \"editable\" && scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Req_SupplierName\") + '\"><svg><use xlink:href=\"#icon_ContactCard\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerSupplierCardPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\r\n\t                    }\r\n\t                    if (scope.row.entity.RequisitionSource != undefined && scope.row.entity.RequisitionSource == 3 && scope.column.uiType == \"editable\" && scope.column.Changereq && scope.column.Changereq === \"Changereq\") {\r\n\t                        if (scope.row.entity.IsAddedFromRequistion != undefined) {\r\n\t                            if (scope.row.entity.IsAddedFromRequistion == true) {\r\n\t                            }\r\n\t                            else {\r\n\t                                var icon = $('<i  style=\"float: right\" class=\"icon small red-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"\"><svg><use xlink:href=\"#icon_AddToDefault \"></use></svg></i>')\r\n\t                                element.find('.smart-table-cell-template').append(icon);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else if (scope.column.uiType == 'popup') {\r\n\t                    tmpCellValue = (scope.COL_FIELD === '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null) ? (scope.column.placeHolder ? scope.column.placeHolder : $translate.instant('P2P_Common_Add')) : scope.COL_FIELD;\r\n\t                    if (angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\t                    element.find('.smart-table-cell-template').html('<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' + tmpCellValue + '</a>');\r\n\t                }\r\n\t                else if (scope.column.uiType == 'dropdown') {\r\n\t                    tmpCellValue = toBeTranslated && scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : scope.COL_FIELD;\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                }\r\n\t                else if (scope.column.uiType == 'taxesPopup') {\r\n\t                    tmpCellValue = scope.row.entity[scope.column.field];\r\n\r\n\t                    if (angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    element.find('.smart-table-cell-template').html('<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' + tmpCellValue + '</a>');\r\n\t                    if (scope.row.entity.isTaxExempt) {\r\n\t                        var taxExempt = $('<a>' + $translate.instant(\"P2P_Common_Exempt\") + '</a>');\r\n\t                        taxExempt.mousedown(function () {\r\n\t                            triggerTaxesPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').html(taxExempt);\r\n\t                    }\r\n\t                    var icon = $('<i style=\"float: right\" class=\"icon iconSmall tooltipped\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"ADD\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i>')\r\n\t                    icon.mousedown(function () {\r\n\t                        triggerTaxesPopup();\r\n\t                    })\r\n\t                    element.find('.smart-table-cell-template').append(icon);\r\n\t                    element.parent().attr('title', tmpCellValue);\r\n\t                }\r\n\t                else {\r\n\t                    if (toBeFiltered && scope.column.attributes && scope.column.attributes.type == 'number' && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                        scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                    }\r\n\t                    tmpCellValue = toBeTranslated && scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD);\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                }\r\n\t                element.parent().attr('title', tmpCellValue);\r\n\t            };\r\n\r\n\r\n\t            var getEditableTemplate = function () {\r\n\t                var template = '<div>';\r\n\t                switch (scope.column.uiType) {\r\n\t                    case 'editable':\r\n\t                        switch (scope.column.attributes.type) {\r\n\t                            case 'number':\r\n\t                                tmpInputValue = parseFloat(getObjectValue(scope.row.entity, scope.column.field));\r\n\r\n\t                                if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                    tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1])\r\n\t                                }\r\n\r\n\t                                template += '<input type=\"number\" autocomplete=\"off\" value=\"' + (tmpInputValue == 0 ? '' : tmpInputValue) + '\">';\r\n\t                                break;\r\n\r\n\t                            case 'date':\r\n\t                                template += '<input type=\"text\" autocomplete=\"off\" value=\"' + (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD) + '\" placeholder=\"' + (scope.column.attributes.format ? (scope.column.attributes.format).toUpperCase() : 'MM/DD/YYYY') + '\">';\r\n\t                                break;\r\n\r\n\t                            default:\r\n\t                                template += '<input type=\"text\" autocomplete=\"off\" value=\"' + (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD) + '\"' + (angular.isDefined(scope.column.attributes.maxlength) ? 'maxlength=\"' + scope.column.attributes.maxlength : '\"') + '>';\r\n\t                                break;\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'dropdown':\r\n\t                    case 'select':\r\n\t                        template += '<select style=\"display: block !important;\">';\r\n\t                        for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                            template += '<option ' + ($translate.instant(scope.column.attributes.options[i][scope.column.attributes.dataKey] + '') == $translate.instant(scope.COL_FIELD + '') ? 'selected' : '') + ' value=\"' + $translate.instant(scope.column.attributes.options[i][scope.column.attributes.idKey] + '') + '\">' + $translate.instant(scope.column.attributes.options[i][scope.column.attributes.dataKey] + '') + '</option>';\r\n\t                        }\r\n\t                        template += '</select>';\r\n\t                        break;\r\n\r\n\t                        //case 'popup':\r\n\t                        //    template += '<div><a>' + ((scope.COL_FIELD === '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null) ? (scope.column.placeHolder ? scope.column.placeHolder : 'ADD') : scope.COL_FIELD) + '</a></div>';\r\n\t                        //    break;\r\n\t                }\r\n\t                return template + '</div>'\r\n\t            };\r\n\r\n\r\n\t            var onElementKeyDown = function (e) {\r\n\t                window.lastKeyPressed = e.keyCode;\r\n\t                switch (e.keyCode) {\r\n\t                    //\tspace key\r\n\t                    case 32:\r\n\t                        if (scope.column.uiType == 'editable' && element.find('input').length > 0) {\r\n\t                            if (element.find('input:focus').length > 0) {\r\n\t                                isInputFieldFocused = true;\r\n\t                            }\r\n\t                            if (scope.column.attributes.type == 'date') {\r\n\t                                element.find('input').focus();\r\n\t                                e.stopPropagation();\r\n\t                                return false;\r\n\t                            }\r\n\t                            else {\r\n\t                                if (!isInputFieldFocused) {\r\n\t                                    isInputFieldFocused = true;\r\n\r\n\t                                    //if (element.find('input:focus').length == 0) {\r\n\t                                    tmpInputValue = element.find('input').val();\r\n\t                                    element.find('input').focus().val('').val(tmpInputValue);\r\n\t                                    //if (element.find('input').val().trim().length == 0) {\r\n\t                                    e.stopPropagation();\r\n\t                                    return false;\r\n\t                                    //}\r\n\t                                    //}\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'dropdown' && element.find('select').length > 0) {\r\n\t                            element.find('select').focus();\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'popup' && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }) && scope.column.isRegClickCol) {\r\n\t                            smartTableUtils.debounce.add(function () {\r\n\t                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                                //\tcell click listener\r\n\t                                angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                            }, 100);\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        else {\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                        //\tarrow keys\r\n\t                    case 37:\r\n\t                        if (!isInputFieldFocused) {\r\n\t                            if (element.find('input:focus').length > 0) {\r\n\t                                isInputFieldFocused = true;\r\n\t                                return;\r\n\t                            }\r\n\r\n\t                            if (scope.rowIndex == 0 && scope.columnIndex == 0) { }\r\n\t                            else {\r\n\t                                $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) - 1)).focus();\r\n\t                                scope.stopEdit();\r\n\t                            }\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                    case 39:\r\n\t                    case 9:\r\n\t                        if (e.keyCode == 39) {\r\n\t                            if (!isInputFieldFocused) {\r\n\t                                if (element.find('input:focus').length > 0) {\r\n\t                                    isInputFieldFocused = true;\r\n\t                                    return;\r\n\t                                }\r\n\r\n\t                                if (scope.$parent.$last && scope.$last) {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-0').focus();\r\n\t                                }\r\n\t                                else {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) + 1)).focus();\r\n\t                                }\r\n\t                                scope.stopEdit();\r\n\t                                e.stopPropagation();\r\n\t                                return false;\r\n\t                            }\r\n\t                        }\r\n\t                        else {\r\n\t                            if (e.shiftKey) {\r\n\t                                if (scope.rowIndex == 0 && scope.columnIndex == 0) {\r\n\t                                }\r\n\t                                else {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) - 1)).focus();\r\n\t                                    scope.stopEdit();\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) + 1)).focus();\r\n\t                                scope.stopEdit();\r\n\t                            }\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                    case 38:\r\n\t                        // if(!$(e.target).is('select')) {\r\n\t                        if (scope.rowIndex > 0) {\r\n\t                            var cellIndexFocus = parseInt(tabIndex) - (smartTableScope.pinnedColumns.length + smartTableScope.unpinnedColumns.length);\r\n\t                            $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + cellIndexFocus).focus();\r\n\t                            scope.stopEdit();\r\n\t                        }\r\n\t                        e.stopPropagation();\r\n\t                        return false;\r\n\t                        // }\r\n\t                        break;\r\n\t                    case 40:\r\n\t                    case 13:\r\n\t                        // if(!$(e.target).is('select')) {\r\n\t                        if (scope.rowIndex < smartTableScope.currentPageDataLength - 1) {\r\n\t                            var cellIndexFocus = parseInt(tabIndex) + (smartTableScope.pinnedColumns.length + smartTableScope.unpinnedColumns.length);\r\n\t                            $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + cellIndexFocus).focus();\r\n\t                            scope.stopEdit();\r\n\t                        }\r\n\t                        e.stopPropagation();\r\n\t                        return false;\r\n\t                        // }\r\n\t                        break;\r\n\t                        //  escape key\r\n\t                    case 27:\r\n\t                        if ((scope.column.uiType == 'editable' || scope.column.uiType == 'dropdown') && (scope.column.attributes.type != 'autocomplete' || (scope.column.attributes.type == 'autocomplete' &&\r\n                            scope.column.isFreeText && !selectedOption))) {\r\n\t                            isInputFieldFocused = false;\r\n\r\n\t                            if (scope.column.attributes.type == 'number') {\r\n\t                                tmpInputValue = parseFloat(oldCellValue);\r\n\t                                if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                    tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1]);\r\n\t                                }\r\n\t                                element.find('input').val(tmpInputValue == 0 ? '' : tmpInputValue).blur();\r\n\t                                if (isRegionalSettingEnabled) {\r\n\t                                    try {\r\n\t                                        element.find('input').autoNumeric('get');\r\n\t                                    }\r\n\t                                    catch (e) { }\r\n\t                                }\r\n\t                                updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                            }\r\n\t                            else if (scope.column.attributes.type == 'date') {\r\n\t                                element.find('input').val($filter('smartDateFormat')(oldCellValue, scope.column.attributes.format)).blur();\r\n\t                                updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                                selectedDate = undefined;\r\n\t                            }\r\n\t                            else {\r\n\t                                if (scope.column.uiType == 'dropdown') {\r\n\t                                    var tmpPreviousSelectedDropdownObj;\r\n\t                                    for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                        if (oldCellValue == scope.column.attributes.options[i][scope.column.attributes.dataKey]) {\r\n\t                                            tmpPreviousSelectedDropdownObj = scope.column.attributes.options[i];\r\n\t                                            updateCell(scope.row.entity, scope.column.field, scope.column.attributes.options[i]);\r\n\t                                            break;\r\n\t                                        }\r\n\t                                    }\r\n\t                                    element.find('select').val(tmpPreviousSelectedDropdownObj[scope.column.attributes.idKey]).blur();\r\n\t                                }\r\n\t                                else {\r\n\t                                    element.find('input').val(oldCellValue).blur();\r\n\t                                    updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                                }\r\n\t                            }\r\n\r\n\t                            isRenderingToBeSkipped = true;\r\n\t                            isFocusToBeSkipped = true;\r\n\t                            element.focus();\r\n\r\n\t                            if (scope.column.attributes.type == 'number' && scope.column.isRegUpdateCol) {\r\n\t                                smartTableUtils.debounce.add(function () {\r\n\t                                    //\tcell change listener\r\n\t                                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                    smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                }, 250, false);\r\n\t                            }\r\n\t                            else if (scope.column.attributes.type == 'date') {\r\n\t                                if (scope.column.isRegUpdateCol) {\r\n\t                                    //\tcell change listener\r\n\t                                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: selectedDate });\r\n\t                                }\r\n\t                            }\r\n\t                            else if (scope.column.uiType == 'dropdown') {\r\n\t                                // Options change listener\r\n\t                                angular.isFunction(smartTableScope.listeners.optionSelect) && smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpPreviousSelectedDropdownObj });\r\n\t                            }\r\n\t                        }\r\n\t                        break;\r\n\t                    default:\r\n\t                        //  disable focus on function and filter keys\r\n\t                        if ((e.keyCode >= 112 && e.keyCode <= 123) || [16, 20, 255, 17, 91, 18, 33, 34, 144, 45, 19, 145, 93, 173, 174, 175].indexOf(e.keyCode) > -1) {\r\n\t                            e.preventDefault();\r\n\t                            return false;\r\n\t                        }\r\n\t                        if ((scope.column.uiType == 'editable' || scope.column.uiType == 'taxesPopup') && element.find('input').length > 0) {\r\n\t                            //  HOME and END keys\r\n\t                            if (!isInputFieldFocused && [35, 36].indexOf(e.keyCode) > -1) {\r\n\t                                e.preventDefault();\r\n\t                                return false;\r\n\t                            }\r\n\t                            if (!isInputFieldFocused) {\r\n\t                                isInputFieldFocused = true;\r\n\r\n\t                                if (element.find('input:focus').length == 0) {\r\n\t                                    //tmpInputValue = element.find('input').val();\r\n\t                                    //element.find('input').focus().val('').val(tmpInputValue);\r\n\t                                    element.find('input').focus().val('');\r\n\r\n\t                                    if (scope.column.attributes.type == 'number' && !isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        var arrDecimalSplits = element.find('input').val().split('.');\r\n\r\n\t                                        if (arrDecimalSplits.length > 1) {\r\n\t                                            if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                                e.preventDefault();\r\n\t                                                return false;\r\n\t                                            }\r\n\t                                        }\r\n\t                                        else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                            e.preventDefault();\r\n\t                                            return false;\r\n\t                                        }\r\n\t                                    }\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'dropdown' && element.find('select').length > 0) {\r\n\t                            element.find('select').focus();\r\n\t                        }\r\n\t                        if (e.keyCode == 8 && element.find('input').length == 0) {\r\n\t                            e.preventDefault();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                }\r\n\t            };\r\n\r\n\t            scope.onElementKeyDown = onElementKeyDown;\r\n\r\n\t            element.on('keydown', onElementKeyDown);\r\n\r\n\r\n\t            scope.stopEdit = function (isWindowClickFired) {\r\n\t                isRenderingToBeSkipped = false;\r\n\t                isFocusToBeSkipped = false;\r\n\r\n\t                //  prevent stop edit \r\n\t                if (isWindowClickFired && scope.column.uiType == 'popup') {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                //\tscroll container to left\r\n\t                if (scope.$last && window.lastKeyPressed != 37 && !window.isSmartTableCellClicked && (window.shiftKey && window.lastKeyPressed == 9)) {\r\n\t                    $(element.closest('.smart-table-unpinned-container')).scrollLeft(0);\r\n\t                }\r\n\r\n\t                if ((scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup' || (scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") || (scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\")) && scope.column.isRegClickCol) {\r\n\t                    removePopupListeners();\r\n\t                }\r\n\r\n\t                if (hasStopEditCalled) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                isInEditMode = false;\r\n\t                isInputFieldFocused = false;\r\n\r\n\t                //\tIf cell is editable\r\n\t                if (scope.column.enableCellEdit && (angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }))) {\r\n\t                    switch (scope.column.uiType) {\r\n\t                        case 'editable':\r\n\t                            switch (scope.column.attributes.type) {\r\n\t                                case 'number':\r\n\t                                    if (isRegionalSettingEnabled) {\r\n\t                                        try {\r\n\t                                            scope.COL_FIELD = element.find('input').autoNumeric('get') * 1;\r\n\t                                        }\r\n\t                                        catch (error) {\r\n\t                                            console.log(error);\r\n\t                                            console.log(\"Error in number get. \" + scope.column.field);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = parseFloat($(element.find('input')).val());\r\n\t                                    }\r\n\t                                    scope.COL_FIELD = isNaN(scope.COL_FIELD) ? 0 : scope.COL_FIELD;\r\n\t                                    updateCell(scope.row.entity, scope.column.field, angular.copy(scope.COL_FIELD));\r\n\t                                    if (angular.isDefined(scope.column.attributes) && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                                    }\r\n\t                                    break;\r\n\r\n\t                                case 'autocomplete':\r\n\t                                    if (element.find('input').devbridgeAutocomplete()) {\r\n\t                                        element.find('input').devbridgeAutocomplete().dispose();\r\n\t                                    }\r\n\t                                    if (selectedOption) {\r\n\t                                        scope.COL_FIELD = angular.isDefined(scope.column.attributes.displayformat) ? getDisplayData(selectedOption, scope.column.attributes.displayformat) : $(element.find('input')).val();\r\n\t                                        updateCell(scope.row.entity, scope.column.field, selectedOption);\r\n\t                                        selectedOption = undefined;\r\n\t                                    }\r\n\t                                    else if (scope.column.isFreeText) {\r\n\t                                        scope.COL_FIELD = $(element.find('input')).val();\r\n\t                                        updateCell(scope.row.entity, scope.column.field, scope.COL_FIELD);\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                                    }\r\n\t                                    break;\r\n\r\n\t                                case 'date':\r\n\t                                    if (element.find('input').daterangepicker()) {\r\n\t                                        element.find('input').daterangepicker().daterangepicker();\r\n\t                                    }\r\n\t                                    if (selectedDate == '') {\r\n\t                                        scope.COL_FIELD = '';\r\n\t                                        updateCell(scope.row.entity, scope.column.field, null);\r\n\t                                    }\r\n\t                                    else if (angular.isDefined(selectedDate) && selectedDate.indexOf('Date') > -1) {\r\n\t                                        scope.COL_FIELD = $filter('smartDateFormat')(selectedDate, scope.column.attributes.format);\r\n\t                                        updateCell(scope.row.entity, scope.column.field, selectedDate);\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = $filter('smartDateFormat')(getObjectValue(scope.row.entity, scope.column.field), scope.column.attributes.format);\r\n\t                                    }\r\n\t                                    selectedDate = undefined;\r\n\t                                    break;\r\n\r\n\t                                default:\r\n\t                                    scope.COL_FIELD = $(element.find('input')).val();\r\n\t                                    updateCell(scope.row.entity, scope.column.field, scope.COL_FIELD);\r\n\t                                    break;\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        case 'dropdown':\r\n\t                        case 'select':\r\n\t                            for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                if ($(element.find('select')).val() == scope.column.attributes.options[i][scope.column.attributes.idKey]) {\r\n\t                                    scope.COL_FIELD = scope.column.attributes.options[i][scope.column.attributes.dataKey];\r\n\t                                    updateCell(scope.row.entity, scope.column.field, scope.column.attributes.options[i]);\r\n\t                                    break;\r\n\t                                }\r\n\t                            }\r\n\t                            scope.COL_FIELD = scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : scope.COL_FIELD;\r\n\t                            break;\r\n\t                        case 'taxesPopup':\r\n\t                            if (isRegionalSettingEnabled) {\r\n\t                                try {\r\n\t                                    if (element.find('input').length > 0) {\r\n\t                                        scope.COL_FIELD = element.find('input').autoNumeric('get') * 1;\r\n\t                                    }\r\n\t                                }\r\n\t                                catch (error) {\r\n\t                                    console.log(error);\r\n\t                                    console.log(\"Error in number get. \" + scope.column.field);\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                scope.COL_FIELD = parseFloat($(element.find('input')).val());\r\n\t                            }\r\n\t                            scope.COL_FIELD = isNaN(scope.COL_FIELD) ? 0 : scope.COL_FIELD;\r\n\t                            updateCell(scope.row.entity, scope.column.field, angular.copy(scope.COL_FIELD));\r\n\t                            if (angular.isDefined(scope.column.attributes) && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                    updateCellTemplate();\r\n\t                }\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css('border', '');\r\n\t                templateContainer && templateContainer.empty();\r\n\r\n\t                if (scope.column.enableCellEdit && oldCellValue != scope.COL_FIELD) {\r\n\t                    if (oldCellValue != scope.COL_FIELD) {\r\n\t                        angular.isFunction(smartTableScope.listeners.afterCellEdit) && smartTableScope.listeners.afterCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\r\n\t                        smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                    }\r\n\r\n\t                    //\tend cell edit listener\r\n\t                    angular.isFunction(smartTableScope.listeners.endCellEdit) && smartTableScope.listeners.endCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }\r\n\r\n\t                if (scope.column.enableCellEdit && (scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup')) {\r\n\t                    smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                }\r\n\r\n\t                hasStopEditCalled = true;\r\n\t            };\r\n\r\n\r\n\t            var onFocus = function (e) {\r\n\t                if (isRenderingToBeSkipped) {\r\n\t                    if (element.find('input').length > 0 && !isFocusToBeSkipped) {\r\n\t                        element.find('input').focus();\r\n\t                    }\r\n\t                    return;\r\n\t                }\r\n\r\n\t                oldCellValue = scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : (scope.column.uiType == 'editable' && (scope.column.attributes.type == 'date' || scope.column.attributes.type == 'number') ? getObjectValue(scope.row.entity, scope.column.field) : scope.COL_FIELD);\r\n\r\n\t                //  Prevent from scrolling to left\r\n\t                if (scope.$last) {\r\n\t                    window.lastKeyPressed = 37;\r\n\t                }\r\n\r\n\t                if (window.lastActiveCellScope) {\r\n\t                    window.lastActiveCellScope.stopEdit();\r\n\t                    window.lastActiveCellScope = undefined;\r\n\t                }\r\n\r\n\t                window.lastActiveCellScope = scope;\r\n\r\n\t                hasStopEditCalled = false;\r\n\r\n\t                //\tscroll container to left\r\n\t                if (smartTableScope.pinnedColumns.length == scope.$index) {\r\n\t                    setTimeout(function () {\r\n\t                        $(element.closest('.smart-table-unpinned-container')).scrollLeft(0);\r\n\t                    }, 250);\r\n\t                }\r\n\r\n\t                if ((scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup' || (scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") || (scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\")) && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }) && scope.column.isRegClickCol) {\r\n\t                    addPopupListeners();\r\n\t                }\r\n\r\n\t                window.isSmartTableCellClicked = false;\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css('border', '1px solid ' + (cellClassElement.hasClass('smart-table-row-cell-invalid') ? 'red' : '#159dfc'));\r\n\t                if (isInEditMode || !scope.column.enableCellEdit || (angular.isFunction(scope.column.cellEditableCondition) && !scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }))) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                //\tBegin cell edit listener\r\n\t                angular.isFunction(smartTableScope.listeners.beginCellEdit) && smartTableScope.listeners.beginCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\r\n\t                if (scope.column.uiType != 'popup') {\r\n\t                    $(element.find('.smart-table-cell-template')).html(getEditableTemplate());\r\n\t                    if (scope.column.uiType == \"editable\" && scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Common_AddAdhocLocation\") + '\"><svg><use xlink:href=\"#icon_Location\"></use></svg></i>');\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerAdhocPopup();\r\n\t                        });\r\n\t                        var inputvalue = $(element.find('.smart-table-cell-template')).html(getEditableTemplate()).css(\"width\", $(element.find('.smart-table-cell-template')).parent().width() - 40 + \"px\");\r\n\t                        $(element.find('.smart-table-cell-template')).append(inputvalue).append(icon);\r\n\t                    }\r\n\t                    else if (scope.column.uiType == \"editable\" && scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Req_SupplierName\") + '\"><svg><use xlink:href=\"#icon_ContactCard\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerSupplierCardPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (scope.column.uiType == 'taxesPopup') {\r\n\t                    var tmpInputValue = parseFloat(getObjectValue(scope.row.entity, scope.column.field));\r\n\t                    if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                        tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1]);\r\n\t                    }\r\n\t                    var input = $('<input  type=\"number\" autocomplete=\"off\" value=\"' + (tmpInputValue == 0 ? '' : tmpInputValue) + '\">');\r\n\t                    if (scope.row.entity.isTaxExempt) {\r\n\t                        input = $('<a>' + $translate.instant(\"P2P_Common_Exempt\") + '</a>')\r\n\t                        input.mousedown(function () {\r\n\t                            triggerTaxesPopup();\r\n\r\n\t                        });\r\n\t                    }\r\n\t                    var icon = $('<i style=\"float: right\" class=\"icon iconSmall tooltipped\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i>');\r\n\t                    icon.mousedown(function () {\r\n\t                        triggerTaxesPopup();\r\n\t                    });\r\n\t                    input.css(\"width\", $(element.find('.smart-table-cell-template')).parent().width() - 40 + \"px\");\r\n\t                    $(element.find('.smart-table-cell-template')).html('').append(input).append(icon);\r\n\t                }\r\n\r\n\t                switch (scope.column.uiType) {\r\n\t                    case 'editable':\r\n\t                        switch (scope.column.attributes.type) {\r\n\t                            case 'number':\r\n\t                                setTimeout(function () {\r\n\t                                    var tmpVal;\r\n\t                                    if (isRegionalSettingEnabled) {\r\n\t                                        try {\r\n\t                                            element.find('input').attr('type', 'text');\r\n\t                                            var mDec = scope.column.attributes.minmaxprecisionfilter != undefined && scope.column.attributes.minmaxprecisionfilter.split(':')[1] != '' ? scope.column.attributes.minmaxprecisionfilter.split(':')[1] : MaxPrecessionValue;\r\n\t                                            element.find('input').autoNumeric('init', { mDec: mDec });\r\n\t                                        }\r\n\t                                        catch (error) {\r\n\t                                            console.log(\"Error in number init. \" + scope.column.field);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        var arrDecimalSplits;\r\n\r\n\t                                        element.find('input').on('keydown', function (e) {\r\n\t                                            arrDecimalSplits = $(this).val().split('.');\r\n\r\n\t                                            if (arrDecimalSplits.length > 1) {\r\n\t                                                if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                                    e.preventDefault();\r\n\t                                                    return false;\r\n\t                                                }\r\n\t                                            }\r\n\t                                            else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                                e.preventDefault();\r\n\t                                                return false;\r\n\t                                            }\r\n\t                                        });\r\n\t                                    }\r\n\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        if (isRegionalSettingEnabled) {\r\n\t                                            try {\r\n\t                                                tmpVal = $(this).autoNumeric('get') * 1;\r\n\t                                            }\r\n\t                                            catch (error) {\r\n\t                                                console.log(\"Error in number format. \" + scope.column.field);\r\n\t                                            }\r\n\t                                        }\r\n\t                                        else {\r\n\t                                            if (tmpVal == $(this).val()) {\r\n\t                                                return;\r\n\t                                            }\r\n\t                                            tmpVal = $(this).val();\r\n\t                                        }\r\n\r\n\t                                        if (scope.column.isRegUpdateCol) {\r\n\t                                            smartTableUtils.debounce.add(function () {\r\n\t                                                updateCell(scope.row.entity, scope.column.field, parseFloat(tmpVal));\r\n\t                                                //\tcell change listener\r\n\t                                                angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                                smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                            }, 250, false);\r\n\t                                        }\r\n\t                                    });\r\n\t                                });\r\n\t                                break;\r\n\r\n\t                            case 'autocomplete':\r\n\t                                var filterKeys = scope.column.attributes.filterkeys ? scope.column.attributes.filterkeys : ['title'];\r\n\t                                var optionFormat = scope.column.attributes.optionformat ? scope.column.attributes.optionformat : '{title}';\r\n\t                                var displayFormat = scope.column.attributes.displayformat ? scope.column.attributes.displayformat + '' : '{title}';\r\n\r\n\t                                setTimeout(function () {\r\n\t                                    var serviceObj = scope.column.attributes.serviceObj;\r\n\t                                    var tmpVal = oldCellValue;\r\n\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        if (angular.isDefined(tmpVal) && $(this).val().trim().length > 0 && tmpVal.trim() == $(this).val().trim()) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        tmpVal = $(this).val();\r\n\r\n\t                                        if ([37, 38, 39, 40].indexOf(e.keyCode) > -1) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        //\tcell change listener\r\n\t                                        angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal });\r\n\r\n\t                                        if (angular.isDefined(tmpVal) && tmpVal.trim().length == 0 && !scope.column.attributes.populateListOnFocus) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        smartTableUtils.debounce.add(function () {\r\n\t                                            if (serviceObj != undefined) {\r\n\t                                                var req = {\r\n\t                                                    method: serviceObj.method === \"POST\" ? \"POST\" : \"GET\",\r\n\t                                                    url: serviceObj.url,\r\n\t                                                    params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", tmpVal)),\r\n\t                                                    timeout: 120000,\r\n\t                                                    headers: {\r\n\t                                                        \"Content-Type\": \"application/json\",\r\n\t                                                        \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n\t                                                    }\r\n\t                                                };\r\n\t                                                if (req.method == \"POST\") {\r\n\t                                                    req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", tmpVal));\r\n\t                                                    delete req.params;\r\n\t                                                }\r\n\t                                                httpService.directhttp(req).then(function (response) {\r\n\t                                                    if (serviceObj.CallbackObj) {\r\n\t                                                        response = serviceObj.CallbackObj(response, scope.column.field)\r\n\t                                                    }\r\n\r\n\t                                                    var resp = [];\r\n\r\n\t                                                    if (typeof response === \"string\") {\r\n\t                                                        response = JSON.parse(response);\r\n\t                                                    }\r\n\r\n\t                                                    if (serviceObj.isFlatArray) {\r\n\t                                                        _.each(response, function (x, index) {\r\n\t                                                            var obj = {};\r\n\t                                                            obj[\"name\"] = x;\r\n\t                                                            obj[\"code\"] = x;\r\n\t                                                            resp.push(obj);\r\n\t                                                        });\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        _.each(response, function (obj) {\r\n\t                                                            var mapperObj = (serviceObj.isObjectArray) ? obj : {};\r\n\t                                                            _.each(serviceObj.mapper, function (mapper) {\r\n\t                                                                var mapperstri = '';\r\n\t                                                                if (angular.isArray(mapper['toBeMapped'])) {\r\n\t                                                                    var mapperkey = mapper.key;\r\n\t                                                                    _.each(mapper['toBeMapped'], function (res) {\r\n\t                                                                        if (mapperkey != undefined && mapperkey == 'email' && res == 'EmailAddress') {\r\n\t                                                                            mapperstri += \"</br>\" + obj[res] + \" \";\r\n\t                                                                        }\r\n\t                                                                        else {\r\n\t                                                                            mapperstri += obj[res] + \" \";\r\n\t                                                                        }\r\n\t                                                                    });\r\n\t                                                                    mapperstri.trim();\r\n\t                                                                }\r\n\t                                                                else {\r\n\t                                                                    mapperstri = obj[mapper['toBeMapped']];\r\n\t                                                                }\r\n\t                                                                mapperObj[mapper['key']] = mapperstri;\r\n\t                                                            });\r\n\t                                                            _.each(serviceObj.staticValues, function (item) {\r\n\t                                                                mapperObj[item['key']] = item['value'];\r\n\t                                                            });\r\n\t                                                            resp.push(mapperObj);\r\n\t                                                        });\r\n\t                                                    }\r\n\r\n\t                                                    if (element.find('input').devbridgeAutocomplete()) {\r\n\t                                                        element.find('input').devbridgeAutocomplete().setLookup(getFormattedData(resp, displayFormat));\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        element.find('input').devbridgeAutocomplete({\r\n\t                                                            filterKeys: filterKeys,\r\n\t                                                            optionFormat: optionFormat,\r\n\t                                                            displayFormat: displayFormat,\r\n\t                                                            lookup: getFormattedData(resp, displayFormat),\r\n\t                                                            width: scope.column.width,\r\n\t                                                            minChars: scope.column.attributes.populateListOnFocus ? 0 : 1,\r\n\t                                                            onSelect: function (suggestion) {\r\n\t                                                                selectedOption = suggestion;\r\n\t                                                                isRenderingToBeSkipped = true;\r\n\t                                                                element.find('input').devbridgeAutocomplete().setLookup([]);\r\n\t                                                                //\tOption select listener\r\n\t                                                                angular.isFunction(smartTableScope.listeners.optionSelect) && smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal, option: selectedOption });\r\n\t                                                                element.trigger('focus');\r\n\t                                                            }\r\n\t                                                        });\r\n\t                                                    }\r\n\r\n\t                                                    if (resp.length == 1 && scope.column.attributes.populateListOnFocus) {\r\n\t                                                        try {\r\n\t                                                            element.find('input').devbridgeAutocomplete().onSelect(0);\r\n\t                                                        }\r\n\t                                                        catch (e) { }\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        //\tOptions change listener\r\n\t                                                        angular.isFunction(smartTableScope.listeners.optionsChange) && smartTableScope.listeners.optionsChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal, options: response });\r\n\t                                                    }\r\n\r\n\t                                                }, function () {\r\n\t                                                });\r\n\t                                            }\r\n\t                                        }, 250, false);\r\n\t                                    });\r\n\r\n\t                                    if (scope.column.attributes.populateListOnFocus) {\r\n\t                                        var triggerKeyUpOnfocus = function () {\r\n\t                                            if (!isInputFieldFocused) {\r\n\t                                                var tmpEvent = $.Event(\"keyup\", {\r\n\t                                                    keyCode: 32\r\n\t                                                });\r\n\t                                                element.find('input').trigger(tmpEvent);\r\n\t                                                isInputFieldFocused = true;\r\n\t                                            }\r\n\t                                        };\r\n\r\n\t                                        element.find('input').on('click', function (e) {\r\n\t                                            triggerKeyUpOnfocus();\r\n\t                                        });\r\n\r\n\t                                        if (element.find('input:focus').length > 0) {\r\n\t                                            triggerKeyUpOnfocus();\r\n\t                                        }\r\n\t                                    }\r\n\t                                });\r\n\t                                break;\r\n\r\n\t                            case 'date':\r\n\t                                setTimeout(function () {\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        selectedDate = $(this).val();\r\n\t                                    });\r\n\r\n\t                                    element.find('input').daterangepicker({\r\n\t                                        singleDatePicker: true,\r\n\t                                        showDropdowns: true,\r\n\t                                        locale: {\r\n\t                                            format: scope.column.attributes.format ? (scope.column.attributes.format).toUpperCase() : 'MM/DD/YYYY'\r\n\t                                        },\r\n\t                                        minDate: scope.column.attributes.min ? scope.column.attributes.min : null,\r\n\t                                        maxDate: scope.column.attributes.max ? scope.column.attributes.max : null,\r\n\t                                        autoUpdateInput: false\r\n\t                                    }, function (startDate, endDate) {\r\n\t                                        updateDate(startDate);\r\n\t                                    }).on('apply.daterangepicker', function (e, picker) {\r\n\t                                        updateDate(picker.startDate);\r\n\t                                    });\r\n\t                                });\r\n\t                                break;\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'dropdown':\r\n\t                        if (angular.isFunction(smartTableScope.listeners.optionSelect)) {\r\n\t                            setTimeout(function () {\r\n\t                                element.find('select').on('change', function () {\r\n\t                                    for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                        if ($(this).val() == scope.column.attributes.options[i][scope.column.attributes.idKey] + '') {\r\n\t                                            // Options change listener\r\n\t                                            smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: scope.column.attributes.options[i] });\r\n\t                                            break;\r\n\t                                        }\r\n\t                                    }\r\n\t                                });\r\n\t                            });\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'taxesPopup':\r\n\t                        setTimeout(function () {\r\n\t                            var tmpVal;\r\n\t                            if (isRegionalSettingEnabled) {\r\n\t                                try {\r\n\t                                    element.find('input').attr('type', 'text');\r\n\t                                    element.find('input').autoNumeric('init');\r\n\t                                }\r\n\t                                catch (error) {\r\n\t                                    console.log(\"Error in number init. \" + scope.column.field);\r\n\t                                }\r\n\t                            }\r\n\t                            else if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                var arrDecimalSplits;\r\n\r\n\t                                element.find('input').on('keydown', function (e) {\r\n\t                                    arrDecimalSplits = $(this).val().split('.');\r\n\r\n\t                                    if (arrDecimalSplits.length > 1) {\r\n\t                                        if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                            e.preventDefault();\r\n\t                                            return false;\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                        e.preventDefault();\r\n\t                                        return false;\r\n\t                                    }\r\n\t                                });\r\n\t                            }\r\n\r\n\t                            element.find('input').on('keyup', function (e) {\r\n\t                                if (isRegionalSettingEnabled) {\r\n\t                                    try {\r\n\t                                        tmpVal = $(this).autoNumeric('get') * 1;\r\n\t                                    }\r\n\t                                    catch (error) {\r\n\t                                        console.log(\"Error in number format. \" + scope.column.field);\r\n\t                                    }\r\n\t                                }\r\n\t                                else {\r\n\t                                    if (tmpVal == $(this).val()) {\r\n\t                                        return;\r\n\t                                    }\r\n\t                                    tmpVal = $(this).val();\r\n\t                                }\r\n\r\n\t                                if (scope.column.isRegUpdateCol) {\r\n\t                                    smartTableUtils.debounce.add(function () {\r\n\t                                        updateCell(scope.row.entity, scope.column.field, parseFloat(tmpVal));\r\n\t                                        //\tcell change listener\r\n\t                                        angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                        smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                    }, 250, false);\r\n\t                                }\r\n\t                            });\r\n\t                        });\r\n\t                        break;\r\n\t                }\r\n\r\n\t                smartTableScope.lastActiveCell = {\r\n\t                    rowIndex: scope.rowIndex,\r\n\t                    columnIndex: scope.columnIndex\r\n\t                };\r\n\r\n\t                isInEditMode = true;\r\n\t            };\r\n\r\n\r\n\t            element.on('focus', onFocus);\r\n\r\n\t            element.on('click', function (e) {\r\n\t                if (scope.column.uiType == 'popup' && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }) && scope.column.isRegClickCol) {\r\n\t                    smartTableUtils.debounce.add(function () {\r\n\t                        window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                        //\tcell click listener\r\n\t                        angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                    }, 100);\r\n\t                }\r\n\t            });\r\n\r\n\t            var onFocusCell = smartTableUtils.on('focusCell', function (e) {\r\n\t                if (e.rowIndex == scope.rowIndex && e.columnIndex == scope.columnIndex && e.smartTableId == smartTableScope.smartTableId) {\r\n\t                    element.trigger('focus');\r\n\t                }\r\n\t            });\r\n\r\n\t            var onRowDataChange = smartTableUtils.on('rowDataChange', function (e) {\r\n\t                if (e.rowIndex == scope.rowIndex && e.smartTableId == smartTableScope.smartTableId) {\r\n\t                    //\tskip updating the field since being already in edit mode\r\n\t                    if (!isInEditMode) {\r\n\t                        init(true, true);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\r\n\t            var onDataChange = smartTableUtils.on('dataChange', function (e) {\r\n\t                if (e.smartTableId == smartTableScope.smartTableId && e.updateCell) {\r\n\t                    init(true, true);\r\n\t                }\r\n\t            });\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                // console.log('smart-cell scope destroyed');\r\n\t                onCellDataAndColDefChange();\r\n\t                onFocusCell();\r\n\t                onRowDataChange();\r\n\t                onDataChange();\r\n\t                element.off('keydown', onElementKeyDown);\r\n\t            });\r\n\t        },\r\n\t        template: '<span class=\"smart-table-cell-text\"><span class=\"smart-table-cell-template\"></span></span>'\r\n\t    };\r\n\t}]);\r\n})();","(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartTreePopup', ['$timeout',\r\n\tfunction($timeout) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\tscope : {\r\n\t\t\t\theader : \"@\",\r\n\t\t\t\tisRadio : \"@\",\r\n\t\t\t\ttoggle : \"@\",\r\n\t\t\t\tpreselection : \"@\",\r\n\t\t\t\tonHide : \"&\",\r\n\t\t\t\tonSelect : \"&\",\r\n                disableLevelSelection : \"@\"\r\n\t\t\t},\r\n\t\t\tlink : function(scope, element, attrs) {\r\n\t\t\t    //watch treePopupToggle boolean to toggle popup\r\n\t\t\t    var isInitServiceCall = true;\r\n\t\t\t\tscope.$watch('toggle', function(value) {\r\n\t\t\t\t    scope.showPopupBool = scope.$eval(value);\r\n\t\t\t\t    if (scope.showPopupBool) {\r\n\t\t\t\t        scope.treeConfig.hideSearch = false;\r\n\t\t\t\t        if (isInitServiceCall) {\r\n\t\t\t\t            $timeout(function () {\r\n\t\t\t\t                scope.treeConfig.initServiceCall();\r\n\t\t\t\t            });\r\n\t\t\t\t            isInitServiceCall = false;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t//watch preselection\r\n\t\t\t\tscope.$watch('preselection', function(value) {\r\n\t\t\t\t\tscope.treeConfig.SelectedNodes = value;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//on-hide callback\r\n\t\t\t\tvar hideCallback = scope.$eval(scope.onHide);\r\n\t\t\t\t\r\n\t\t\t\t//on-select callback\r\n\t\t\t\tvar selectCalback = scope.$eval(scope.onSelect);\r\n\r\n\t\t\t\t//creating Tree Component Config\r\n\t\t\t\tscope.treeConfig = {\r\n\t\t\t\t\tIsRadio : scope.$eval(scope.isRadio),\r\n\t\t\t\t\ttype : \"Category\",\r\n\t\t\t\t\tSelectedNodes : \"\",\r\n\t\t\t\t\ttitle: scope.header,\r\n\t\t\t\t\tdisableLevelSelection: scope.disableLevelSelection,\r\n                    hideSearch : false\r\n\t\t\t\t};\r\n\t\t\t\tscope.onDoneCallback = function(e) {\r\n\t\t\t\t\tif (angular.isFunction(selectCalback)) {\r\n\t\t\t\t\t\tselectCalback(e);\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// view bindings\r\n\t\t\t\tscope.showPopupBool = false;\r\n\t\t\t\tscope.onPopupHideCallback = function() {\r\n\t\t\t\t    scope.showPopupBool = false;\r\n\t\t\t\t    scope.treeConfig.hideSearch = true;\r\n\t\t\t\t\tif (angular.isFunction(hideCallback)) {\r\n\t\t\t\t\t\thideCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/smartTree/smartTreePopup.html'\r\n\t\t};\r\n\t}]);\r\n\r\n\t/*******----smartTreeComponent Module----*******/\r\n\r\n\tangular.module('smartTreeComponent', []).directive('smartTreeComponent', ['$timeout', '$translate', 'RESTApiSt', '$q', 'APPCONSTANTS', 'Common',\r\n\tfunction ($timeout, $translate, RESTApiSt, $q, APPCONSTANTS, Common) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\treplace : true,\r\n\t\t\tscope : {\r\n\t\t\t\tconfig : '=',\r\n\t\t\t\tonDone : '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t    // ID's generation\r\n\t\t\t    scope.parentId = 'Parent_' + Common.uniqueIDGenerator();\r\n\t\t\t    scope.templateId = 'Template_' + Common.uniqueIDGenerator() + '.html';\r\n\r\n\r\n\t\t\t\t/*config for the directive*/\r\n\t\t\t    scope.config.initServiceCall = function () {\r\n\t\t\t        RESTApiSt.getData(scope.treeConfig.type, RESTApiStCallback, req);\r\n\t\t\t    }\r\n\t\t\t\tscope.treeConfig = scope.config;\r\n\t\t\t\tvar doneCallback = scope.$eval(scope.onDone);\r\n\t\t\t\tscope.$watch('config.SelectedNodes', function(n, o) {\r\n\t\t\t\t\tif (n) {\r\n\t\t\t\t\t\tpreselection = n.split(',');\r\n\t\t\t\t\t\tif (preselectionRecievedPromise)\r\n\t\t\t\t\t\t\tpreselectionRecievedPromise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.$watch('config.hideSearch', function (n, o) {\r\n\t\t\t\t    if (n && scope.searchFieldVal.length > 0) {\r\n\t\t\t\t        $timeout(function () {\r\n\t\t\t\t            angular.element('#closeButton').trigger('click');\r\n\t\t\t\t        });\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\t/*promise*/\r\n\t\t\t\tvar dataRecievedCallPromise;\r\n\t\t\t\tvar preselectionRecievedPromise;\r\n\t\t\t\tvar promises = [];\r\n\t\t\t\tinitializePromise(true, true);\r\n\r\n\t\t\t\t/*Local variables*/\r\n\t\t\t\tvar dataSet;\r\n\t\t\t\tvar searchBucket = 50;\r\n\t\t\t\tvar lazyLoadingBucket = 50;\r\n\t\t\t\tvar maxLevel;\r\n\t\t\t\tvar lazyLoadOffset;\r\n\t\t\t\tvar lazyLoadMarker = [];\r\n\t\t\t\tvar levelKey = 'level';\r\n\t\t\t\tvar levelWiseData = {};\r\n\t\t\t\tvar parentStringConstant = \"parentString\";\r\n\t\t\t\tvar parentCodeStringConstant = \"parentCodeString\";\r\n\t\t\t\tvar preselection;\r\n\t\t\t\tvar searchCategories = [];\r\n\t\t\t\tvar req;\r\n\r\n\t\t\t\tswitch(scope.treeConfig.type) {\r\n\t\t\t\tcase 'Category':\r\n\t\t\t\t\tscope.codeProperty = 'PASCode';\r\n\t\t\t\t\tscope.titleProperty = 'PASName';\r\n\t\t\t\t\tscope.levelProperty = 'PASLevel';\r\n\t\t\t\t\tscope.parentProperty = 'ParentPASCode';\r\n\t\t\t\t\t/*req = {\r\n\t\t\t\t\t    method: 'POST',\r\n\t\t\t\t\t    url: 'https://gepqcsmart-rest.servicebus.windows.net/PortalRestService/GetPASForDeviceMob',\r\n\t\t\t\t\t    headers: {\r\n\t\t\t\t\t        'Content-Type': 'application/json',\r\n\t\t\t\t\t        'UserExecutionContext': '{\"ClientName\":\"BuyerSqlConn\",\"ClientID\":2,\"BuyerPartnerCode\":6315,\"Product\":2,\"UserId\":\"28082\",\"EntityType\":\"supplier registration\",\"EntityId\":8888,\"LoggerCode\":\"EC101\",\"Culture\":\"en-US\",\"UserName\":\"RiteAid.Admin@gep.com\",\"CompanyName\":\"BuyerSqlConn\",\"ContactCode\":63150040000001}'\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t    data: {\r\n\t\t\t\t\t        \"ContactCode\": 63150040000001,\r\n\t\t\t\t\t        \"entityDetailCode\": 7,\r\n\t\t\t\t\t        \"entityId\": 1\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t};*/\r\n\t\t\t\t\treq = {\r\n\t\t\t\t\t    method: 'POST',\r\n\t\t\t\t\t    url: APPCONSTANTS.userPreferences.URLs.AppURL + 'PortalRestService/GetPASForDeviceMob?oloc=218',\r\n\t\t\t\t\t    headers: {\r\n\t\t\t\t\t        'Content-Type': 'application/json',\r\n\t\t\t\t\t        'UserExecutionContext': JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails),\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t    data: {\r\n\t\t\t\t\t        \"ContactCode\": APPCONSTANTS.userPreferences.UserBasicDetails.ContactCode,\r\n\t\t\t\t\t        \"entityDetailCode\": APPCONSTANTS.userPreferences.ACEntityId,\r\n\t\t\t\t\t        \"entityId\": APPCONSTANTS.userPreferences.UserBasicDetails.EntityId\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'Region':\r\n\t\t\t\t\tscope.codeProperty = 'RegionId';\r\n\t\t\t\t\tscope.titleProperty = 'RegionName';\r\n\t\t\t\t\tscope.levelProperty = 'RegionLevel';\r\n\t\t\t\t\tscope.parentProperty = 'RegionParentId';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tscope.isLoading = true;\r\n\t\t\t\tscope.selectedData = [];\r\n\t\t\t\tscope.isSingleSelect = scope.treeConfig.IsRadio;\r\n\t\t\t\tscope.msg = $translate.instant('loadingMsg');\r\n\r\n\t\t\t\t/*Local member fuctions*/\r\n\r\n\t\t\t\tfunction initializePromise(dataRievedPromiseBool, preselectionRecievedPromiseBool) {\r\n\t\t\t\t\tdataRecievedCallPromise = null;\r\n\t\t\t\t\tpreselectionRecievedPromise = null;\r\n\t\t\t\t\tpromises.length = 0;\r\n\t\t\t\t\tif (dataRievedPromiseBool) {\r\n\t\t\t\t\t\tdataRecievedCallPromise = $q.defer();\r\n\t\t\t\t\t\tpromises.push(dataRecievedCallPromise.promise);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (preselectionRecievedPromiseBool) {\r\n\t\t\t\t\t\tpreselectionRecievedPromise = $q.defer();\r\n\t\t\t\t\t\tpromises.push(preselectionRecievedPromise.promise);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$q.all(promises).then(promiseResolved);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction promiseResolved() {\r\n\t\t\t\t\tinitatePreSelection();\r\n\t\t\t\t\tinitializePromise(false, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction createLevelWiseDataSet() {\r\n\t\t\t\t\tvar level = 1;\r\n\t\t\t\t\tvar parentNodes = dataSet[level];\r\n\t\t\t\t\tinsertParentHierarchyForFlatStrucure(parentNodes);\r\n\t\t\t\t\twhile (parentNodes) {\r\n\t\t\t\t\t\tlevelWiseData[levelKey + level] = parentNodes;\r\n\t\t\t\t\t\tinsertParentHierarchyForFlatStrucure(parentNodes, level);\r\n\t\t\t\t\t\tmaxLevel = level;\r\n\t\t\t\t\t\tlevel = level + 1;\r\n\t\t\t\t\t\tparentNodes = dataSet[level];\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction insertParentHierarchyForFlatStrucure(parentNodes, level) {\r\n\t\t\t\t\tvar fetchedData = (level) ? _.groupBy(dataSet[level + 1], scope.parentProperty) : null;\r\n\t\t\t\t\t_.each(parentNodes, function(parent) {\r\n\t\t\t\t\t\tvar childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n\t\t\t\t\t\tif (childForParent) {\r\n\t\t\t\t\t\t\t_.each(childForParent, function(node, index) {\r\n\t\t\t\t\t\t\t\tnode[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n\t\t\t\t\t\t\t\tnode[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n\t\t\t\t\t\t\t\tnode['isExpanded'] = false;\r\n\t\t\t\t\t\t\t\tnode['selection'] = \"0\";\r\n\t\t\t\t\t\t\t\tnode['index'] = index;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction RESTApiStCallback(response) {\r\n\t\t\t\t    try{\r\n\t\t\t\t        dataSet = _.groupBy(JSON.parse(response.data.GetPASForDeviceMobResult), scope.levelProperty);\r\n\t\t\t\t        createLevelWiseDataSet();\r\n\t\t\t\t        scope.categories = levelWiseData[levelKey + '1'].slice(0, lazyLoadingBucket);\r\n\t\t\t\t        lazyLoadMarker.push(levelWiseData[levelKey+'1'][levelWiseData[levelKey + '1'].length - 1]);\r\n\t\t\t\t        scope.isLoading = false;\r\n\t\t\t\t    }catch(e){\r\n\t\t\t\t        scope.msg = $translate.instant('loadingDataErr');\r\n\t\t\t\t    }\r\n\t\t\t\t    dataRecievedCallPromise.resolve();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction resetSelectionState() {\r\n\t\t\t\t\t_.each(scope.selectedData, function(_node) {\r\n\t\t\t\t\t\tscope.selectNode(_node, '0');\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction initatePreSelection() {\r\n\t\t\t\t\tresetSelectionState();\r\n\t\t\t\t\t_.each(preselection, function(preselectionNode) {\r\n\t\t\t\t\t\tvar searchLevel = 1;\r\n\t\t\t\t\t\twhile (searchLevel <= maxLevel) {\r\n\t\t\t\t\t\t\tvar foundNode = _.groupBy(levelWiseData[levelKey + searchLevel],scope.codeProperty)[preselectionNode];\r\n\t\t\t\t\t\t\tif (foundNode) {\r\n\t\t\t\t\t\t\t\tscope.selectNode(foundNode[0], '1');\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsearchLevel = searchLevel + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction openSelectionTree() {\r\n\t\t\t\t\tvar partialSeletedNodes = _.filter(levelWiseData[levelKey + 0], function(node) {\r\n\t\t\t\t\t\treturn node.selection = '2';\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_.each(partialSeletedNodes, function(nodes) {\r\n\t\t\t\t\t\tvar level = nodes[scope.levelProperty];\r\n\t\t\t\t\t\t//var childs = _.\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction getChildsForParentAsPerBucket(parent, bucket, startIndex) {\r\n\t\t\t\t\tvar childSearchLevel = parent[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCodeStringIterator;\r\n\t\t\t\t\tvar result = _.groupBy(levelWiseData[levelKey+childSearchLevel],scope.parentProperty)[parent[scope.codeProperty]];\r\n\t\t\t\t\t//var bucketData = (bucket) ? result.slice(startIndex, startIndex + bucket) : result;\r\n\t\t\t\t\tvar bucketData = result;\r\n\t\t\t\t\treturn bucketData;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction lazyLoadLevelWiseData(markerNode) {\r\n\t\t\t\t\tvar parentSearchLevel = markerNode[scope.levelProperty] - 1;\r\n\t\t\t\t\tvar markerNodeParent = markerNode[scope.parentProperty];\r\n\t\t\t\t\tvar parent = _.find(levelWiseData[levelKey + parentSearchLevel], function(node) {\r\n\t\t\t\t\t\treturn node[scope.codeProperty] == markerNodeParent;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\tvar bucketChilds = getChildsForParentAsPerBucket(parent, lazyLoadingBucket, markerNode.index + 1);\r\n\t\t\t\t\t\tconsole.log('childs appended = ' + bucketChilds.length);\r\n\t\t\t\t\t\tif (bucketChilds.length > 0) {\r\n\t\t\t\t\t\t\tparent.children = parent.children.concat(bucketChilds);\r\n\t\t\t\t\t\t\tlazyLoadMarker.push(bucketChilds[bucketChilds.length - 1]);\r\n\t\t\t\t\t\t\tscope.$apply();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar searchString = \"\";\r\n\t\t\t\tvar searchLevel;\r\n\t\t\t\tvar searchDataYetToBeDisplayed = [];\r\n\t\t\t\tvar searchWithContainsHitResult = [];\r\n\t\t\t\tscope.searchResults = [];\r\n\t\t\t\tfunction searchAsPerBucketSize(searchStr, bucket) {\r\n\t\t\t\t\tif (searchString != searchStr) {\r\n\t\t\t\t\t\tsearchString = searchStr;\r\n\t\t\t\t\t\tsearchLevel = maxLevel;\r\n\t\t\t\t\t\tsearchDataYetToBeDisplayed.length = 0;\r\n\t\t\t\t\t\tsearchWithContainsHitResult.length = 0;\r\n\t\t\t\t\t\tscope.searchResults.length = 0;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar searchData = getDataAsPerBucketSize(searchStr, bucket);\r\n\t\t\t\t\tscope.searchResults = scope.searchResults.concat(searchData);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getOffsetSearchData(bucket) {\r\n\t\t\t\t\tvar partitionedData = _.partition(searchDataYetToBeDisplayed, function(data, index) {\r\n\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsearchDataYetToBeDisplayed = partitionedData[0];\r\n\t\t\t\t\treturn partitionedData[1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getOffsetSearchDataForContainsSearch(bucket) {\r\n\t\t\t\t\tvar partitionedData = _.partition(searchWithContainsHitResult, function(data, index) {\r\n\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsearchWithContainsHitResult = partitionedData[0];\r\n\t\t\t\t\treturn partitionedData[1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getDataAsPerBucketSize(searchStr, bucket) {\r\n\t\t\t\t\tvar bucketData = [];\r\n\t\t\t\t\twhile (bucketData.length < bucket && searchLevel > 0) {\r\n\t\t\t\t\t\tvar offsetSearchData = getOffsetSearchData(bucket);\r\n\t\t\t\t\t\tif (offsetSearchData.length == bucket) {\r\n\t\t\t\t\t\t\tbucketData = offsetSearchData;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar searchData = _.filter(levelWiseData[levelKey + searchLevel], function(node) {\r\n\t\t\t\t\t\t\treturn -1 != node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvar containsSarchResult = _.filter(levelWiseData[levelKey + searchLevel], function(node) {\r\n\t\t\t\t\t\t\treturn new RegExp(\"(\" + _.compact(searchString.split(' ')).join('|') + \")\", \"gi\").test(node[scope.titleProperty]) && -1 == node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsearchWithContainsHitResult = searchWithContainsHitResult.concat(containsSarchResult);\r\n\t\t\t\t\t\tvar qumulativeData = offsetSearchData.concat(searchData);\r\n\t\t\t\t\t\tvar partitionedData = _.partition(qumulativeData, function(data, index) {\r\n\t\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsearchDataYetToBeDisplayed = searchDataYetToBeDisplayed.concat(partitionedData[0]);\r\n\t\t\t\t\t\tbucketData = bucketData.concat(partitionedData[1]);\r\n\t\t\t\t\t\tsearchLevel = searchLevel - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (searchLevel == 0) {\r\n\t\t\t\t\t\twhile (bucketData.length < bucket) {\r\n\t\t\t\t\t\t\tvar containsSearchDataToBeAppended = getOffsetSearchDataForContainsSearch(bucket);\r\n\t\t\t\t\t\t\tif (containsSearchDataToBeAppended.length > 0) {\r\n\t\t\t\t\t\t\t\tbucketData = bucketData.concat(containsSearchDataToBeAppended);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn bucketData;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction closeChildsForParent(parent) {\r\n\t\t\t\t\tvar childs = _.filter(getChildsForParentAsPerBucket(parent), function(childNode) {\r\n\t\t\t\t\t\treturn childNode.isExpanded;\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_.each(childs, function(child) {\r\n\t\t\t\t\t\tchild.isExpanded = false;\r\n\t\t\t\t\t\tchild.children = [];\r\n\t\t\t\t\t\tcloseChildsForParent(child);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.searchText = '';\r\n\t\t\t\tscope.searchFieldVal = '';\r\n\r\n\t\t\t\tscope.expandNode = function(node, index) {\r\n\t\t\t\t\tnode.isExpanded = !node.isExpanded;\r\n\t\t\t\t\tif (node.isExpanded) {\r\n\t\t\t\t\t\tnode.children = getChildsForParentAsPerBucket(node, lazyLoadingBucket, 0);\r\n\t\t\t\t\t\tlazyLoadMarker.push(node.children[node.children.length - 1]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode.children = [];\r\n\t\t\t\t\t\tremoveMarkerForParent(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction removeMarkerForParent(parent) {\r\n\t\t\t\t\tvar childMarkers = _.filter(lazyLoadMarker, function(node, index) {\r\n\t\t\t\t\t\treturn -1 != node[parentCodeStringConstant].indexOf(parent[scope.codeProperty]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlazyLoadMarker = _.difference(lazyLoadMarker, childMarkers);\r\n\t\t\t\t\tcloseChildsForParent(parent);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar filterTextTimeout;\r\n\t\t\t\tscope.searchAndSelectNode = function(node) {\r\n\t\t\t\t\tif (filterTextTimeout)\r\n\t\t\t\t\t\t$timeout.cancel(filterTextTimeout);\r\n\t\t\t\t\tfilterTextTimeout = $timeout(function() {\r\n\t\t\t\t\t\tif (scope.searchFieldVal.length > 2)\r\n\t\t\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tsearchDataYetToBeDisplayed.length = 0;\r\n\t\t\t\t\t\t\tsearchWithContainsHitResult.length = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 300);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.selectNode = function(node, selectionState) {\r\n\t\t\t\t\tnode.selection = selectionState;\r\n\t\t\t\t\tif (scope.isSingleSelect) {\r\n\t\t\t\t\t    if (scope.selectedData && scope.selectedData[0] && scope.selectedData[0][scope.codeProperty] != node[scope.codeProperty]) {\r\n\t\t\t\t\t        scope.selectedData[0].selection = '0';\r\n\t\t\t\t\t    };\r\n\t\t\t\t\t    scope.selectedData = (selectionState == '0') ? [] : [node];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdateSelectionObject(node, selectionState);\r\n\t\t\t\t\t\tupdateChildsForNode(node, selectionState);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tupdateParentForNode(node, selectionState);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateSelectionObject(node, selectionState) {\r\n\t\t\t\t\tswitch(selectionState) {\r\n\t\t\t\t\tcase '0':\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '1':\r\n\t\t\t\t\t\tscope.selectedData.push(node);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateParentForNode(node, selectionState) {\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] - 1;\r\n\t\t\t\t\tvar immediateParentCode = node[scope.parentProperty].toString();\r\n\t\t\t\t\twhile (depthLevel > 0) {\r\n\t\t\t\t\t\tvar parent = _.find(levelWiseData[levelKey + depthLevel], function(node) {\r\n\t\t\t\t\t\t\treturn node[scope.codeProperty] == immediateParentCode;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\timmediateParentCode = parent[scope.parentProperty].toString();\r\n\t\t\t\t\t\tif (!parent['isExpanded']) {\r\n\t\t\t\t\t\t\tscope.expandNode(parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!scope.isSingleSelect) {\r\n\t\t\t\t\t\t\tparent.selection = getStateForNode(parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdepthLevel = depthLevel - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getStateForNode(node) {\r\n\t\t\t\t\tvar childCount = node.ChildCount;\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCode = node[scope.codeProperty];\r\n\t\t\t\t\tvar groupByData = _.groupBy(levelWiseData[levelKey + depthLevel], scope.parentProperty);\r\n\t\t\t\t\tvar selectedChild = _.filter(groupByData[parentCode], function(node) {\r\n\t\t\t\t\t\treturn node.selection == '1';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tvar partiallySelectedChild = _.filter(groupByData[parentCode], function(node) {\r\n\t\t\t\t\t\treturn node.selection == '2';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (childCount == selectedChild.length) {\r\n\t\t\t\t\t\tscope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData.push(node);\r\n\t\t\t\t\t\treturn \"1\";\r\n\t\t\t\t\t} else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\t\t\t\t\t\tscope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\treturn \"2\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tscope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\treturn \"0\";\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateChildsForNode(node, selectionState) {\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCode = node[scope.codeProperty].toString();\r\n\t\t\t\t\twhile (depthLevel <= maxLevel) {\r\n\t\t\t\t\t\tvar childs = _.filter(levelWiseData[levelKey + depthLevel], function(node) {\r\n\t\t\t\t\t\t\treturn -1 != node[parentCodeStringConstant].indexOf(parentCode);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t_.each(childs, function(child) {\r\n\t\t\t\t\t\t\tchild.selection = selectionState;\r\n\t\t\t\t\t\t\tif (selectionState == \"1\") {\r\n\t\t\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, child);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdepthLevel = depthLevel + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniqueIDGenerator = function() {\r\n\t\t\t\t\tvar d = new Date().getTime();\r\n\t\t\t\t\tvar uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function(c) {\r\n\t\t\t\t\t\tvar r = (d + Math.random() * 16) % 16 | 0;\r\n\t\t\t\t\t\td = Math.floor(d / 16);\r\n\t\t\t\t\t\treturn (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn uniqueID;\r\n\t\t\t\t};\r\n\t\t\t\tif (scope.isSingleSelect) {\r\n\t\t\t\t\tscope.uniqueRadioGroupName = uniqueIDGenerator();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*$timeout(function() {\r\n\t\t\t\t\tlazyLoadOffset = angular.element(\"#treeComponentContainer\")[0].getBoundingClientRect().bottom;\r\n\t\t\t\t\tangular.element('.scrollbar-outer').scrollbar({\r\n\t\t\t\t\t\tonScroll : function(y, x) {\r\n\t\t\t\t\t\t\tif (lazyLoadMarker.length > 0 && scope.searchFieldVal.length == 0) {\r\n\t\t\t\t\t\t\t\tvar markerNode = lazyLoadMarker[lazyLoadMarker.length - 1];\r\n\t\t\t\t\t\t\t\tif (angular.element(\"#\"+markerNode[scope.codeProperty])[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n\t\t\t\t\t\t\t\t\tconsole.log(markerNode);\r\n\t\t\t\t\t\t\t\t\tlazyLoadMarker.length = (lazyLoadMarker.length > 0) ? lazyLoadMarker.length - 1 : 0;\r\n\t\t\t\t\t\t\t\t\tlazyLoadLevelWiseData(markerNode);\r\n\t\t\t\t\t\t\t\t\tconsole.log(lazyLoadMarker.length);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (y.maxScroll > 0 && y.scroll == y.maxScroll && scope.searchFieldVal.length > 0) {\r\n\t\t\t\t\t\t\t\t$timeout(function() {\r\n\t\t\t\t\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});*/\r\n\t\t\t\t\r\n\t\t\t\tscope.scrollEnd = function(e){\r\n\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n\r\n\t\t\t\tscope.doneClickHandler = function() {\r\n\t\t\t\t\tif (angular.isFunction(doneCallback)) {\r\n\t\t\t\t\t\tdoneCallback(scope.selectedData);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tscope.focusSearch = false;\r\n\t\t\t\tscope.isActive = false;\r\n\t\t\t\tscope.showMe = false;\r\n\t\t\t\tscope.showSearch = function () {\r\n\t\t\t\t    scope.isActive = true;\r\n\t\t\t\t    scope.focusSearch = true;\r\n\t\t\t\t    scope.showMe = true;\r\n\t\t\t\t    scope.hideClose = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.hideSearch = function () {\r\n\t\t\t\t    scope.isActive = false;\r\n\t\t\t\t    scope.focusSearch = false;\r\n\t\t\t\t    scope.hideClose = false;\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/smartTree/smartTreeTemplate.html'\r\n\t\t};\r\n\t}]).directive('ngIndeterminate', function($compile) {\r\n\t\treturn {\r\n\t\t\trestrict : 'A',\r\n\t\t\tlink : function(scope, element, attributes) {\r\n\t\t\t\tscope.$watch(attributes['ngIndeterminate'], function(value) {\r\n\t\t\t\t\telement.prop('indeterminate', value);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}).directive('ngHighlightSt',['$compile', 'hilitor', function($compile, hilitor) {\r\n\t\treturn {\r\n\t\t\trestrict : 'A',\r\n\t\t\tlink : function(scope, element, attributes) {\r\n\t\t\t\tscope.$watch(attributes['ngHighlight'], function(value) {\r\n\t\t\t\t\thilitor.getHilitor().apply(value);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}]).service('RESTApiSt', ['$http',\r\n\tfunction($http) {\r\n\t\tvar Callback;\r\n\r\n\t\tthis.getData = function(mode, callback, requestObject) {\r\n\t\t\tswitch(mode) {\r\n\t\t\tcase 'Category':\r\n\t\t\t\tCallback = callback;\r\n\t\t\t\tserviceCall(requestObject);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction serviceCall(req) {\r\n\t\t\t$http(req).then(function(response) {\r\n\t\t\t\tCallback(response);\r\n\t\t\t}, function(error) {\r\n\t\t\t\tCallback(error);\r\n\t\t\t});\r\n\t\t};\r\n\t}]).service('hilitor', [\r\n\tfunction() {\r\n\t\tvar hilitor = new Hilitor(\"treeComponentContainer\");\r\n\t\tthis.getHilitor = function() {\r\n\t\t\treturn hilitor;\r\n\t\t};\r\n\t}]);\r\n\r\n})(angular);\r\n","angular.module('SMART2').directive('stickOnScroll', function ($window, $compile) {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            setTop: '@',\r\n            setZindex: '@',\r\n            onScroll:'&',\r\n            setLeft:\"@\",\r\n            setRight:\"@\",\r\n        },\r\n        link: function (scope, elem, attrs) {\r\n\r\n\r\n            if (scope.setTop == '' || scope.setTop == undefined) {\r\n                scope.setTop = '0'\r\n            }\r\n            if (scope.setLeft == '' || scope.setLeft == undefined) {\r\n                scope.setLeft = '0'\r\n            }\r\n            if (scope.setRight == '' || scope.setRight == undefined) {\r\n                scope.setRight = '0'\r\n            }\r\n\r\n            if (scope.setZindex == '' || scope.setZindex == undefined) {\r\n                scope.setZindex = '1'\r\n            }\r\n            \r\n\r\n            var template = '<div id=\"fixedtoHeaderheight_' + scope.$id + '\" style=\"display:none\"></div>';\r\n            attrs.$observe('stickOnScroll', function (value) {\r\n                if (value == \"true\") {\r\n                    var newElement = $compile(template)(scope);\r\n                    elem.after(newElement);\r\n                    var scrollTop = elem.offset().top;\r\n                    angular.element($window).bind('scroll', function () {\r\n                        var elemHeight = elem.outerHeight(),\r\n                            winScrollTop = angular.element($window).scrollTop();\r\n\r\n                        if (winScrollTop >= scrollTop) {\r\n                            if (attrs.stickLimit != undefined) {\r\n                                var el = $(attrs.stickLimit),\r\n                                    config = {\r\n                                        top: el.offset().top,\r\n                                        height: el.outerHeight()\r\n                                    };\r\n                                if ((winScrollTop + elem.outerHeight()) > (config.top + config.height)) {\r\n                                    elem.removeClass('is-fixed-on-top').css({ 'top': \"\", \"left\": \"\", \"right\": \"\", 'z-index': \"\" });\r\n                                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                                } else {\r\n                                    elem.addClass('is-fixed-on-top ' + attrs.applyClassOnFixed).css({ 'top': scope.setTop, 'left': scope.setLeft, 'right': scope.setRight, 'z-index': scope.setZindex });\r\n                                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': elemHeight, 'display': 'block' });\r\n                                }\r\n                            } else {\r\n                                elem.addClass('is-fixed-on-top ' + attrs.applyClassOnFixed).css({ 'top': scope.setTop, 'left': scope.setLeft, 'right': scope.setRight, 'z-index': scope.setZindex });\r\n                                angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': elemHeight, 'display': 'block' });\r\n                            }\r\n                        } else {\r\n                            elem.removeClass('is-fixed-on-top').css({ 'top': \"\", \"left\": \"\", \"right\":\"\", 'z-index': \"\" });\r\n                            angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                        }\r\n\r\n                        scope.onScroll();\r\n                    });\r\n                }\r\n                else {\r\n                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                    elem.next('#fixedtoHeaderheight_' + scope.$id).remove();\r\n                    elem.removeClass('is-fixed-on-top').css({ 'top': \"\",   \"left\": \"\", \"right\":\"\",'z-index': \"\" });\r\n                    \r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n});\r\n\r\n","(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n.directive('customTab', [function () {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attrs) {\r\n            var tabbingOnKeyDown = function (e) {\r\n                var $this = $(this),\r\n                    tabType = angular.isDefined(attrs.tabType);\r\n                if (e.keyCode == 38 && !tabType && ($this.prev().length > 0) || e.keyCode == 37 && tabType && ($this.prev().length > 0)) {\r\n                    $this.prev().focus();\r\n                    e.preventDefault();\r\n                }\r\n                else if (e.keyCode == 40 && !tabType && ($this.next().length > 0) || e.keyCode == 39 && tabType && ($this.next().length > 0)) {\r\n                    $this.next().focus();\r\n                    e.preventDefault();\r\n                }\r\n               else if (e.keyCode == 13) {\r\n                   $this.trigger(\"click\");\r\n                   e.preventDefault();\r\n               }\r\n                \r\n            };\r\n            elem.bind(\"keydown\", tabbingOnKeyDown);\r\n            scope.$on('$destroy', function () {\r\n                elem.unbind(\"keydown\", tabbingOnKeyDown);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n})();","(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n  .directive('focusonkeypress', ['$focusOnField', function ($focusOnField) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attr) {\r\n            var prevFocus;\r\n            var bindKeyEventFunction = function (e) {\r\n                var focusInfunc = function () {\r\n                    if (!elem.hasClass(\"focused\")) {\r\n                        prevFocus = document.activeElement;\r\n                        elem.addClass(\"focused\");\r\n                        var firstFieldFocus = elem.find(\"a, input, textarea, [tabindex]\").first();\r\n                        $focusOnField(firstFieldFocus);\r\n                    }\r\n                },\r\n                focusOutfunc = function () {\r\n                    if (elem.hasClass(\"focused\")) {\r\n                        $focusOnField(prevFocus);\r\n                        prevFocus = ''\r\n                        elem.removeClass(\"focused\");\r\n\r\n                    }\r\n                };\r\n\r\n                if (attr.altkey && attr.altkey != 'false') {\r\n                    if (attr.focusin && e.key == attr.focusin && e.altKey == true) {\r\n                        focusInfunc();\r\n                    } else if (attr.focusout && e.key == attr.focusout && e.altKey == true) {\r\n                        focusOutfunc();\r\n                    };\r\n                }\r\n                else {\r\n                    if (attr.focusin && e.key == attr.focusin) {\r\n                        focusInfunc();\r\n                    } else if (attr.focusout && e.key == attr.focusout) {\r\n                        focusOutfunc();\r\n                    };\r\n                };\r\n\r\n            };\r\n            $(document).bind(\"keydown\", bindKeyEventFunction);\r\n          scope.$on('$destroy', function () {\r\n                $(document).unbind(\"keydown\", bindKeyEventFunction);\r\n            });\r\n        }\r\n    }\r\n  }]);\r\n})();","(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n  .directive('a', function () {\r\n      return {\r\n          restrict : 'E',\r\n          link: function (scope, elem, attr) {\r\n              var checkAttr = attr.href,\r\n                  svgIcon = elem.find('svg');\r\n                  \r\n              if(svgIcon){\r\n                  svgIcon.attr(\"focusable\",\"false\");// ie 11 not supported for this\r\n              }  \r\n              if(checkAttr == undefined){\r\n                  attr.$set(\"href\",\"\");\r\n              }\r\n          }\r\n      }\r\n  })\r\n.directive('menuItemList', ['menuListItemServ', function (menuListItemServ) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attr) {\r\n            menuListItemServ(elem);\r\n        }\r\n    }\r\n}])\r\n.directive('extraNavTitle', [function () {\r\n    return {\r\n        restrict: 'C',\r\n        link: function (scope, element, attrs) {\r\n            var firstField = element.find(\"a, input, button, textarea, [tabindex]\").not(\":disabled, :hidden, [tabindex = -1]\").first();\r\n            firstField.focus();\r\n        }\r\n    }\r\n\r\n}]);\r\n})();","(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n.directive('tabbingGroup', ['$focusOnField', function ($focusOnField) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attrs) {\r\n            elem.bind(\"keydown\", function (e) {\r\n                if (e.which == 9) {\r\n                    var focusableEle = \"a, input[type=text],input[type=radio]:checked,input[type=checkbox], button, textarea, [tabindex='0']\",\r\n                        avoidFocusableEle = \":disabled, :hidden, [tabindex=-1]\",\r\n                        $firstField = elem.find(focusableEle).not(avoidFocusableEle).first(),\r\n                        $lastField = elem.find(focusableEle).not(avoidFocusableEle).last();\r\n                    if (e.target == $firstField.get(0) && e.shiftKey) {\r\n                        e.preventDefault();\r\n                        $focusOnField($lastField);\r\n                    } else if (e.target == $lastField.get(0) && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        $focusOnField($firstField);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n}]);\r\n})();","(function () {\r\nangular.module(\"SMART2\").directive(\"searchableCube\", [function () {\r\n        \"use strict\";\r\n        return {\r\n            restrict: 'E',\r\n            transclude: true,\r\n            scope: {\r\n                cubeletList: '=?',\r\n                enableProceed: '&',\r\n                selectedCube: '=?',\r\n                formatKey: '@'\r\n            },\r\n            link: function (scope, $element, attrs) {\r\n                scope.proceed = false;\r\n\r\n                var enableProceed = scope.$eval(scope.enableProceed);\r\n                scope.options = JSON.parse(JSON.stringify(scope.cubeletList));\r\n\r\n                scope.selectedCube = scope.selectedCube || {};\r\n\r\n                var container,\r\n                    camera, scene, renderer,\r\n                    canvasMouseMove = false,\r\n                    mouse = new THREE.Vector2(),\r\n                    INTERSECTED, previousInt,\r\n                    group = new THREE.Group(),\r\n\r\n                    // mouseRotation vars\r\n                    mouseDown = false,\r\n                    mousemoved = false,\r\n                    startPosition = { x: 0, y: 0, z: 0 },\r\n                    rotateStartPoint = new THREE.Vector3(0, 0, 1),\r\n                    rotateEndPoint = new THREE.Vector3(0, 0, 1),\r\n                    curQuaternion,\r\n                    animationComplete = true,\r\n                    windowHalfX = window.innerWidth / 2,\r\n                    windowHalfY = window.innerHeight / 2,\r\n                    rotationSpeed = 2,\r\n                    lastMoveTimestamp,\r\n                    moveReleaseTimeDelta = 50,\r\n                    selectedCublet,\r\n                    startPoint = {\r\n                        x: 0,\r\n                        y: 0\r\n                    },\r\n                    deltaX = 0,\r\n                    deltaY = 0;\r\n                // mouseRotation vars End\r\n\r\n\r\n\r\n                init();\r\n                animate();\r\n\r\n                function init() {\r\n                    container = $element[0];\r\n\r\n                    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);\r\n                    camera.position.set(-360, 440, 700);\r\n\r\n                    scene = new THREE.Scene();\r\n                    //scene.background = new THREE.Color(0x0067b0);\r\n\r\n                    camera.lookAt(scene.position);\r\n\r\n                    scene.add(new THREE.AmbientLight(0x505050));\r\n\r\n                    var light = new THREE.SpotLight(0xffffff, 1.25);\r\n                    light.position.set(-650, 650, 650);\r\n                    // light.rotation.set(  37.32 * Math.PI/180,    -16.45* Math.PI/180,    204.184* Math.PI/180);\r\n                    light.castShadow = true;\r\n\r\n                    light.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(70, 1, 100, 10000));\r\n                    light.shadow.bias = 0.00001;\r\n\r\n                    light.shadow.mapSize.width = 4096;\r\n                    light.shadow.mapSize.height = 4096;\r\n\r\n                    scene.add(light);\r\n\r\n                    var cubletWidth = 90,\r\n                        cubeSeparation = 20,\r\n                        geometry,\r\n                        generateThreeByThree,\r\n                        generateTwoByTwo;\r\n\r\n                    var positionsArrayThreeByThree = [\r\n                            [-1, 1, 1],\r\n                            [-1, 0, 1],\r\n                            [-1, -1, 1],\r\n                            [0, 1, 1],\r\n                            [0, 0, 1],\r\n                            [0, -1, 1],\r\n                            [1, 1, 1],\r\n                            [1, 0, 1],\r\n                            [1, -1, 1],\r\n                            [1, 1, 0],\r\n                            [1, 0, 0],\r\n                            [1, -1, 0],\r\n                            [1, 1, -1],\r\n                            [1, 0, -1],\r\n                            [1, -1, -1],\r\n                            [0, 1, -1],\r\n                            [0, 0, -1],\r\n                            [0, -1, -1],\r\n                            [-1, 1, -1],\r\n                            [-1, 0, -1],\r\n                            [-1, -1, -1],\r\n                            [-1, 1, 0],\r\n                            [-1, 0, 0],\r\n                            [-1, -1, 0],\r\n                            [0, 1, 0],\r\n                            [0, -1, 0],\r\n                            [0, 0, 0]\r\n                        ],\r\n                        positionsArrayTwoByTwo = [\r\n                            [-1, 1, 1],\r\n                            [-1, -1, 1],\r\n                            [1, 1, 1],\r\n                            [1, -1, 1],\r\n                            [1, 1, -1],\r\n                            [1, -1, -1],\r\n                            [-1, 1, -1],\r\n                            [-1, -1, -1]\r\n                        ];\r\n\r\n\r\n                    generateThreeByThree = function () {\r\n                        geometry = new THREE.BoxGeometry(cubletWidth, cubletWidth, cubletWidth);\r\n                        var object;\r\n                        for (var i = 0; i < 27; i++) {\r\n                            if (i < scope.options.length) {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: \"#6fc2fb\" }));\r\n                            } else {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\r\n                                    color: 0xffffff,\r\n                                    transparent: true,\r\n                                    opacity: 0.7\r\n                                }));\r\n                            }\r\n                            object.position.x = positionsArrayThreeByThree[i][0] * (cubletWidth + cubeSeparation);\r\n                            object.position.y = positionsArrayThreeByThree[i][1] * (cubletWidth + cubeSeparation);\r\n                            object.position.z = positionsArrayThreeByThree[i][2] * (cubletWidth + cubeSeparation);\r\n\r\n                            object.scale.x = 1;\r\n                            object.scale.y = 1;\r\n                            object.scale.z = 1;\r\n\r\n                            \r\n                            object.dataID = i + 1;\r\n                            if (i < scope.options.length) {\r\n                                object.castShadow = true;\r\n                                object.receiveShadow = true;\r\n                                object.name = scope.options[i][scope.formatKey];\r\n                                object.disable = false;\r\n                            } else {\r\n                                object.disable = true;\r\n                            }\r\n\r\n                            group.add(object);\r\n                        }\r\n                    };\r\n\r\n                    generateTwoByTwo = function () {\r\n                        geometry = new THREE.BoxGeometry(cubletWidth + 45, cubletWidth + 45, cubletWidth + 45);\r\n                        var object;\r\n                        for (var i = 0; i < 8; i++) {\r\n                            if (i < scope.options.length) {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: \"#6fc2fb\" }));\r\n                            } else {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\r\n                                    color: 0xffffff,\r\n                                    transparent: true,\r\n                                    opacity: 0.7\r\n                                }));\r\n                            }\r\n\r\n                            object.position.x = positionsArrayTwoByTwo[i][0] * (cubletWidth + cubeSeparation + 45) / 2;\r\n                            object.position.y = positionsArrayTwoByTwo[i][1] * (cubletWidth + cubeSeparation + 45) / 2;\r\n                            object.position.z = positionsArrayTwoByTwo[i][2] * (cubletWidth + cubeSeparation + 45) / 2;\r\n\r\n                            object.scale.x = 1;\r\n                            object.scale.y = 1;\r\n                            object.scale.z = 1;\r\n                            object.dataID = i + 1;\r\n                            \r\n                            if (i < scope.options.length) {\r\n                                object.name = scope.options[i][scope.formatKey];\r\n                                object.castShadow = true;\r\n                                object.receiveShadow = true;\r\n                                object.disable = false;\r\n                            } else {\r\n                                object.disable = true;\r\n                            }\r\n\r\n                            group.add(object);\r\n                        }\r\n                    };\r\n                    \r\n\r\n                    if (scope.options.length > 8) {\r\n                        generateThreeByThree();\r\n                    } else {\r\n                        generateTwoByTwo();\r\n                    }\r\n\r\n                    scene.add(group);\r\n\r\n                    renderer = new THREE.WebGLRenderer({\r\n                            alpha: true,\r\n                            antialias: true\r\n                    });\r\n                    renderer.setPixelRatio(window.devicePixelRatio);\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n                    renderer.shadowMap.enabled = true;\r\n                    renderer.shadowMap.type = THREE.PCFShadowMap;\r\n                    renderer.shadowMap.soft = true;\r\n\r\n                    container.appendChild(renderer.domElement);\r\n                    container.addEventListener('mousemove', onMouseMove);\r\n\r\n                    // window.addEventListener('resize', onWindowResize, false);\r\n                    container.addEventListener('mousedown', onDocumentMouseDown, true);\r\n                    window.addEventListener('resize', onWindowResize, false);\r\n                }\r\n\r\n                // keyhandler\r\n                container.addEventListener('keydown', keyPressed);\r\n\r\n                function keyPressed(e) {\r\n                    switch (e.keyCode) {\r\n                        case 38:\r\n                            scope.handleRotation(\"top\");\r\n                            break;\r\n                        case 40:\r\n                            scope.handleRotation(\"bottom\");\r\n                            break;\r\n                        case 37:\r\n                            scope.handleRotation(\"left\");\r\n                            break;\r\n                        case 39:\r\n                            scope.handleRotation(\"right\");\r\n                            break;\r\n                    }\r\n                };\r\n                \r\n\r\n                //$element.find(\".searchElement\").on('click', function (event) {\r\n                //    event.stopPropagation();\r\n                //});\r\n                   \r\n                \r\n                //$element.find(\".navBtn\").on('click', function(event) {\r\n                //    scope.handleRotation(this.id);\r\n                //});\r\n\r\n                scope.handleRotation = function(btnType) {\r\n                    if (!animationComplete) {\r\n                        return;\r\n                    }\r\n                    switch (btnType) {\r\n                        case \"top\":\r\n                            animateRotation(1, 0, 0);\r\n                            break;\r\n                        case \"bottom\":\r\n                            animateRotation(-1, 0, 0);\r\n                            break;\r\n                        case \"left\":\r\n                            animateRotation(0, 1, 0);\r\n                            break;\r\n                        case \"right\":\r\n                            animateRotation(0, -1, 0);\r\n                            break;\r\n                    }\r\n                };\r\n\r\n                scope.routeToReport = function () {\r\n                    location.href = \"index_reports.html#/analytics/new\";\r\n                }\r\n\r\n                scope.searchElementByValue = function () {\r\n                    var value = $element.find(\".searchElement input\").val().toLowerCase();\r\n                    var index = _.findIndex(this.cubeletList, { name: value.charAt(0).toUpperCase() + value.slice(1) });\r\n                    if (index !== -1) {\r\n                        scope.selectedCube.select = this.cubeletList[index];\r\n                        scope.searchElement(scope.selectedCube.select.id);\r\n                    }\r\n                }\r\n                \r\n\r\n                function animateRotation(xDirection, yDirection, zDirection) {\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: Math.PI / 2 },\r\n                        tween = new TWEEN.Tween(position).to(target, 1000),\r\n                        prePositon = { x: 0, y: 0 },\r\n                        X = 0,\r\n                        Y = 0,\r\n                        Z = 0;\r\n\r\n                    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.y - prePositon.y;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        } else {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        var deltaRotationQuaternion = new THREE.Quaternion()\r\n                            .setFromEuler(new THREE.Euler(X,\r\n                                Y,\r\n                                Z,\r\n                                'XYZ'\r\n                            ));\r\n                        group.quaternion.multiplyQuaternions(deltaRotationQuaternion, group.quaternion);\r\n                        prePositon.y = position.y;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                // keyhandler end\r\n\r\n\r\n                function onWindowResize() {\r\n                    camera.aspect = window.innerWidth / window.innerHeight;\r\n                    camera.updateProjectionMatrix();\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n                };\r\n\r\n                function animate() {\r\n                    requestAnimationFrame(animate);\r\n                    render();\r\n                    update();\r\n                    TWEEN.update();\r\n                };\r\n\r\n                // animationLogic\r\n                function onDocumentMouseDown(event) {\r\n                    if (!animationComplete || event.target != $element.find('.mainScreen')[0]) {\r\n                        return;\r\n                    }\r\n                    //event.preventDefault();\r\n                    container.addEventListener('mousemove', onDocumentMouseMove, false);\r\n                    container.addEventListener('mouseup', onDocumentMouseUp, false);\r\n\r\n                    mouseDown = true;\r\n\r\n                    startPoint = {\r\n                        x: event.clientX,\r\n                        y: event.clientY\r\n                    };\r\n\r\n                    rotateStartPoint = rotateEndPoint = projectOnTrackball(0, 0);\r\n                };\r\n\r\n                function onMouseMove(e) {\r\n                    canvasMouseMove = true;\r\n                    event.preventDefault();\r\n                    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n                    mouse.clientX = event.clientX;\r\n                    mouse.clientY = event.clientY;\r\n                };\r\n\r\n                function onDocumentMouseMove(event) {\r\n                    mousemoved = true;\r\n\r\n                    deltaX = event.x - startPoint.x;\r\n                    deltaY = event.y - startPoint.y;\r\n\r\n                    handleRotationMouse();\r\n\r\n                    startPoint.x = event.x;\r\n                    startPoint.y = event.y;\r\n\r\n                    lastMoveTimestamp = new Date();\r\n                };\r\n\r\n                function onDocumentMouseUp(event) {\r\n                    highlightCublet(previousInt);\r\n                    if (new Date().getTime() - (lastMoveTimestamp ? lastMoveTimestamp.getTime() : 0) > moveReleaseTimeDelta) {\r\n                        deltaX = event.x - startPoint.x;\r\n                        deltaY = event.y - startPoint.y;\r\n                    }\r\n\r\n                    mouseDown = false;\r\n\r\n                    container.removeEventListener('mousemove', onDocumentMouseMove, false);\r\n                    container.removeEventListener('mouseup', onDocumentMouseUp, false);\r\n                    if (mousemoved && animationComplete) {\r\n                        // resetCube();\r\n                    }\r\n                    mousemoved = false;\r\n\r\n\r\n                    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\r\n                    vector.unproject(camera);\r\n                    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n\r\n                    // create an array containing all objects in the scene with which the ray intersects\r\n                    var intersects = ray.intersectObjects(scene.children[2].children);\r\n\r\n                    // if there is one (or more) intersections\r\n                    if (intersects.length > 0 && (selectedCublet == void 0 || intersects[0].object.name != selectedCublet.name)) {\r\n                        popInCube(INTERSECTED);\r\n                        popOutCube(INTERSECTED);\r\n                        //console.log(\"route to: \" + intersects[0].object.name);\r\n                        \r\n                    }\r\n                };\r\n\r\n\r\n                function projectOnTrackball(touchX, touchY) {\r\n                    var mouseOnBall = new THREE.Vector3();\r\n\r\n                    mouseOnBall.set(\r\n                        clamp(touchX / windowHalfX, -1, 1), clamp(-touchY / windowHalfY, -1, 1),\r\n                        0.0\r\n                    );\r\n\r\n                    var length = mouseOnBall.length();\r\n\r\n                    if (length > 1.0) {\r\n                        mouseOnBall.normalize();\r\n                    } else {\r\n                        mouseOnBall.z = Math.sqrt(1.0 - length * length);\r\n                    }\r\n\r\n                    return mouseOnBall;\r\n                };\r\n\r\n                function rotateMatrix(rotateStart, rotateEnd) {\r\n                    var axis = new THREE.Vector3(),\r\n                        quaternion = new THREE.Quaternion(),\r\n                        angle;\r\n\r\n                    angle = Math.acos(rotateStart.dot(rotateEnd) / rotateStart.length() / rotateEnd.length());\r\n\r\n                    if (angle) {\r\n                        axis.crossVectors(rotateStart, rotateEnd).normalize();\r\n                        angle *= rotationSpeed;\r\n                        quaternion.setFromAxisAngle(axis, angle);\r\n                    }\r\n                    return quaternion;\r\n                };\r\n\r\n                function clamp(value, min, max) {\r\n                    return Math.min(Math.max(value, min), max);\r\n                };\r\n                // animationLogicEnds\r\n\r\n\r\n                function render() {\r\n                    TWEEN.update();\r\n                    if (!mouseDown) {\r\n                        var drag = 0.95,\r\n                            minDelta = 0.05;\r\n\r\n                        if (deltaX < -minDelta || deltaX > minDelta) {\r\n                            deltaX *= drag;\r\n                        } else {\r\n                            deltaX = 0;\r\n                        }\r\n\r\n                        if (deltaY < -minDelta || deltaY > minDelta) {\r\n                            deltaY *= drag;\r\n                        } else {\r\n                            deltaY = 0;\r\n                        }\r\n\r\n                        // handleRotationMouse();\r\n                    }\r\n                    renderer.render(scene, camera);\r\n                };\r\n\r\n\r\n                var handleRotationMouse = function() {\r\n                    rotateEndPoint = projectOnTrackball(deltaX, deltaY, -1 * deltaX);\r\n                    var rotateQuaternion = rotateMatrix(rotateStartPoint, rotateEndPoint);\r\n                    curQuaternion = group.quaternion;\r\n                    curQuaternion.multiplyQuaternions(rotateQuaternion, curQuaternion);\r\n                    curQuaternion.normalize();\r\n                    group.setRotationFromQuaternion(curQuaternion);\r\n                    rotateEndPoint = rotateStartPoint;\r\n                };\r\n\r\n                function resetCube() {\r\n                    var position = group.rotation;\r\n                    animateResetRotation(Math.sign(position.x), Math.sign(position.y), Math.sign(position.z), group.rotation.x, group.rotation.y, group.rotation.z);\r\n                    group.updateMatrix();\r\n                };\r\n\r\n                function animateResetRotation(xDirection, yDirection, zDirection, anglex, angley, anglez) {\r\n                    var PI = Math.PI,\r\n                        position = { x: anglex, y: angley, z: anglez },\r\n                        nearesrXGap = Math.abs(anglex % (PI / 2)) > PI / 4 ? anglex + xDirection * (PI / 2 - Math.abs(anglex % (PI / 2))) : anglex - anglex % (PI / 2),\r\n                        nearesrYGap = Math.abs(angley % (PI / 2)) > PI / 4 ? angley + yDirection * (PI / 2 - Math.abs(angley % (PI / 2))) : angley - angley % (PI / 2),\r\n                        nearesrZGap = Math.abs(anglez % (PI / 2)) > PI / 4 ? anglez + zDirection * (PI / 2 - Math.abs(anglez % (PI / 2))) : anglez - anglez % (PI / 2),\r\n                        target = { x: nearesrXGap, y: nearesrYGap, z: nearesrZGap },\r\n                        tween = new TWEEN.Tween(position).to(target, 200),\r\n                        prePositon = { x: anglex, y: anglex, z: anglez },\r\n                        X, Y, Z;\r\n\r\n                    // tween.easing(TWEEN.Easing.Linear.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.x - prePositon.x;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        }\r\n                        if (yDirection) {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n                        if (zDirection) {\r\n                            Z = position.z - prePositon.z;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        group.rotation.x = position.x;\r\n                        group.rotation.y = position.y;\r\n                        group.rotation.z = position.z;\r\n                        prePositon.x = position.x;\r\n                        prePositon.y = position.y;\r\n                        prePositon.z = position.z;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                //$element.find(\"#search-cublet\").on(\"click\", function (e) {\r\n                //     searchElement();\r\n                //});\r\n\r\n                scope.searchElement = function (requestedID) {\r\n                    if (scope.options.length > 8) {\r\n                        switch (requestedID) {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                            case 9:\r\n                                animateFindElementRotation(0, 0, 0, 0, 0, 0, requestedID);\r\n                                break;\r\n                            case 16:\r\n                            case 17:\r\n                            case 18:\r\n                            case 19:\r\n                            case 20:\r\n                            case 21:\r\n                                animateFindElementRotation(1, 0, 1, Math.PI, 0, Math.PI, requestedID);\r\n                                break;\r\n                            case 22:\r\n                            case 23:\r\n                            case 24:\r\n                                animateFindElementRotation(0, 1, 0, 0, Math.PI / 2, 0, requestedID);\r\n                                break;\r\n                            case 10:\r\n                            case 11:\r\n                            case 12:\r\n                            case 13:\r\n                            case 14:\r\n                            case 15:\r\n                                animateFindElementRotation(0, -1, 0, 0, -Math.PI / 2, 0, requestedID);\r\n                                break;\r\n                            case 25:\r\n                                animateFindElementRotation(1, 0, 0, Math.PI / 2, 0, 0, requestedID);\r\n                                break;\r\n                            case 26:\r\n                                animateFindElementRotation(-1, 0, 0, -Math.PI / 2, 0, 0, requestedID);\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        switch (requestedID) {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                                animateFindElementRotation(0, 0, 0, 0, 0, 0, requestedID);\r\n                                break;\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                                animateFindElementRotation(1, 0, 1, Math.PI, 0, Math.PI, requestedID);\r\n                                break;\r\n                        }\r\n                    }\r\n                    \r\n                };\r\n\r\n                function animateFindElementRotation(xDirection, yDirection, zDirection, anglex, angley, anglez, requestedID) {\r\n                    var INTERSECTED = scene.children[2].children[parseInt(requestedID) - 1],\r\n                        currentAngles = group.rotation,\r\n                        PI = Math.PI,\r\n                        position = { x: currentAngles.x, y: currentAngles.y, z: currentAngles.z },\r\n                        target = { x: anglex, y: angley, z: anglez },\r\n                        tween = new TWEEN.Tween(position).to(target, 200),\r\n                        prePositon = { x: anglex, y: anglex, z: anglez },\r\n                        X, Y, Z;\r\n\r\n                    highlightCublet(previousInt);\r\n                    //if (previousInt == void 0 || previousInt.dataID !== requestedID) {\r\n                        animateCubePopup(INTERSECTED, true);\r\n                        popInCube(INTERSECTED);\r\n                        popOutCube(INTERSECTED);\r\n                    //}\r\n\r\n                    previousInt = INTERSECTED;\r\n\r\n                    // tween.easing(TWEEN.Easing.Linear.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.x - prePositon.x;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        }\r\n                        if (yDirection) {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n                        if (zDirection) {\r\n                            Z = position.z - prePositon.z;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        group.rotation.x = position.x;\r\n                        group.rotation.y = position.y;\r\n                        group.rotation.z = position.z;\r\n                        prePositon.x = position.x;\r\n                        prePositon.y = position.y;\r\n                        prePositon.z = position.z;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                // highlight logic\r\n                function update() {\r\n                    if (!animationComplete || mouseDown || !canvasMouseMove) {\r\n                        return;\r\n                    }\r\n                    // find intersections\r\n\r\n                    // create a Ray with origin at the mouse position\r\n                    //   and direction into the scene (camera direction)\r\n                    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\r\n                    vector.unproject(camera);\r\n                    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n\r\n                    // create an array containing all objects in the scene with which the ray intersects\r\n                    var intersects = ray.intersectObjects(scene.children[2].children);\r\n\r\n                    // INTERSECTED = the object in the scene currently closest to the camera \r\n                    //      and intersected by the Ray projected from the mouse position    \r\n\r\n                    // if there is one (or more) intersections\r\n                    if (intersects.length > 0) {\r\n                        // if the closest object intersected is not the currently stored intersection object\r\n                        if (intersects[0].object != INTERSECTED) {\r\n\r\n                            // restore previous intersection object (if it exists) to its original color\r\n                            if (INTERSECTED && (selectedCublet == void 0 || INTERSECTED.id != selectedCublet.id) && !INTERSECTED.disable) {\r\n                                INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\r\n                            }\r\n\r\n\r\n                            // store reference to closest object as current intersection object\r\n                            INTERSECTED = intersects[0].object;\r\n                            if (INTERSECTED.disable) {\r\n                                return;\r\n                            }\r\n\r\n                            if (previousInt !== void 0 && INTERSECTED.name !== previousInt.name && previousInt.hovered) {\r\n                                highlightCublet(previousInt);\r\n                            }\r\n\r\n                            if (previousInt == void 0 || INTERSECTED.name !== previousInt.name) {\r\n                                // store color of closest object (for later restoration)\r\n                                canvasMouseMove = false;\r\n\r\n                                animateCubePopup(INTERSECTED);\r\n                            }\r\n                        }\r\n                    } else // there are no intersections\r\n                    {\r\n                        INTERSECTED = null;\r\n                    }\r\n                };\r\n\r\n                var getIntersect = function (INTERSECTED, camera, jqdiv) {\r\n\r\n\r\n                    var pos = INTERSECTED.position.clone(),\r\n                    projScreenMat = new THREE.Matrix4();\r\n                    projScreenMat.multiply(camera.projectionMatrix, camera.matrixWorldInverse);\r\n                    projScreenMat.multiplyVector3(pos);\r\n\r\n                    return {\r\n                        \"x\": (pos.x + 1) * jqdiv.width() / 2 + jqdiv.offset().left,\r\n                        \"y\": (-pos.y + 1) * jqdiv.height() / 2 + jqdiv.offset().top\r\n                    };\r\n                };\r\n\r\n\r\n                function animateCubePopup(INTERSECTED, fromSerach) {\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: 20 },\r\n                        tween = new TWEEN.Tween(position).to(target, 100),\r\n                        prePositon = { x: 0, y: 0 },\r\n                        $mainScreen = $element.find(\".mainScreen\"),\r\n                        intersect = {\r\n                            x: mouse.clientX + 10,\r\n                            y: mouse.clientY\r\n                        };\r\n\r\n                        if (fromSerach) {\r\n                            intersect = getIntersect(INTERSECTED, camera, $element);\r\n                        }\r\n\r\n                    $mainScreen.attr(\"interesect\", JSON.stringify(intersect))\r\n                    .attr(\"tooltipActive\", true)\r\n                    .attr(\"message\", \"Cublet <b>\" + INTERSECTED.name + \"</b>\")\r\n                    .trigger(\"interesected\");\r\n\r\n                    INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\r\n                    INTERSECTED.hovered = true;\r\n                    // set a new color for closest object\r\n                    if (!INTERSECTED.selected) {\r\n                        INTERSECTED.material.color.setHex(0xa49cfb);\r\n                    } else {\r\n                        INTERSECTED.material.color.setHex(0xffa600);\r\n                    }\r\n                    previousInt = INTERSECTED;\r\n                };\r\n\r\n                function highlightCublet(cublet) {\r\n                    $element.find(\".mainScreen\").attr(\"tooltipActive\", false);\r\n                    if (cublet !== void 0 && cublet.hovered) {\r\n                        if (selectedCublet == void 0 || previousInt.id != selectedCublet.id) {\r\n                            previousInt.material.color.setHex(previousInt.currentHex);\r\n                            previousInt.hovered = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function popOutCube(cublet) {\r\n                    if (cublet.disable) {\r\n                        return;\r\n                    }\r\n                    animationComplete = false;\r\n                    previousInt.material.color.setHex(0xffa600);\r\n                    cublet.selected = true;\r\n                    scope.selectedCube.select = _.where(scope.cubeletList, { id: cublet.dataID })[0];\r\n\r\n\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: 20 },\r\n                        tween = new TWEEN.Tween(position).to(target, 100),\r\n                        prePositon = { x: 0, y: 0 };\r\n                    \r\n                    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        cublet.position.x += Math.sign(cublet.position.x) * (position.y - prePositon.y);\r\n                        cublet.position.y += Math.sign(cublet.position.y) * (position.y - prePositon.y);\r\n                        cublet.position.z += Math.sign(cublet.position.z) * (position.y - prePositon.y);\r\n                        selectedCublet = cublet;\r\n                        prePositon.y = position.y;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                        if(!scope.proceed) {\r\n                            scope.proceed = true;\r\n                            enableProceed();\r\n                            scope.$apply();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function popInCube(currentSelection) {\r\n                    if (selectedCublet == void 0 || currentSelection.disable) {\r\n                        return;\r\n                    }\r\n                    selectedCublet.selected = false;\r\n                    selectedCublet.material.color.setHex(7324411);\r\n                    selectedCublet.position.x -= Math.sign(selectedCublet.position.x) * 20;\r\n                    selectedCublet.position.y -= Math.sign(selectedCublet.position.y) * 20;\r\n                    selectedCublet.position.z -= Math.sign(selectedCublet.position.z) * 20;\r\n                }\r\n\r\n                if (scope.selectedCube.select)\r\n                    scope.searchElement(scope.selectedCube.select.id);\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/searchableCube/searchableCubeTemplate.html'\r\n        };\r\n\r\n}]);\r\n})();","(function () {\n    'use strict';\n    angular.module('SMART2').directive('smartBack', ['$timeout','persistenceService', '$rootScope', function ($timeout, persistenceService, $rootScope) {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                callback: \"&\"\n            },\n            link: function (scope, element, attrs) {\n               \n                //click callback\n                var callback = scope.$eval(scope.callback);\n                \n                if(!persistenceService.nPlusOne.historyIsEmpty()){\n                    scope.show=true;\n                }\n                \n                //Local click binding\n                scope.goBackClick = function (e) {\r\n                    if (!scope.disable) {\r\n                        if (angular.isFunction(callback)) {\r\n                            callback(e)\r\n                        };\n                        persistenceService.redirectToPreviousNode();\r\n                    }\r\n                };\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartBack/smartBackTemplate.html'\n        };\n    }]);\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('browserSniffing', [function () {\r\n        var ua = navigator.userAgent, tem,\r\n                   old_ie = ua.indexOf('MSIE '), //IE browser version less than 11\r\n                    new_ie = ua.indexOf('Trident/'), //IE browser version greater or equal to 11\r\n              // M = ua.match(/(opera|chrome|safari|firefox|msie|android|ipad|iphone|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n\r\n        //For checking if browser is from Internet Explorer family\r\n        if (/trident/i.test(M[1]) || /MSIE/i.test(M[1])) {\r\n            tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\r\n            if (tem.length == 0) {\r\n                return 'IE ' + (M[2] || '');\r\n            } else {\r\n                return 'IE ' + (tem[1] || '');\r\n            }\r\n        }\r\n        if (M[1] === 'Chrome') {\r\n            tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\r\n            if (tem != null)\r\n                return tem.slice(1).join(' ').replace('OPR', 'Opera');\r\n        }\r\n        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\r\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null)\r\n            M.splice(1, 1, tem[1]);\r\n        return M; // returning browser name and browser version\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartBrowserSniffing', ['$window', '$timeout', '$translate', 'browserSniffing', 'notification', 'APPCONSTANTS', 'favoriteOps', function ($window, $timeout, $translate, browserSniffing, notification, APPCONSTANTS, favoriteOps) {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                showSniffing: '@',\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartBrowserSniffing/browerSniffingTemplate.html',\r\n            link: function (scope, element) {\r\n                var showSniffing = (scope.showSniffing == 'true') ? true : false;\r\n                scope.image960 = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/960-error-trans.png\";\r\n                scope.image1920 = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/1920-error-trans.png\";\r\n                var iconIE = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/IE.png\",\r\n                    iconChrome = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/Chrome.png\";\r\n                if (showSniffing == true) {\r\n                    $timeout(function () {\r\n                        scope.execBrowserSniffing();\r\n                    });\r\n\r\n                    angular.element($window).bind('resize', function () {\r\n                        scope.execBrowserSniffing();\r\n                    });\r\n\r\n                    scope.Screen960 = false;\r\n                    scope.Screen1920 = false;\r\n\r\n                    scope.execBrowserSniffing = function () {\r\n                        scope.isShowSniffer = favoriteOps.getSnifferFlag && favoriteOps.getSnifferFlag();\r\n                        if (!scope.isShowSniffer) {\r\n                            scope.sniffTemplateUrl = \"\";\r\n                            angular.element('html').css('overflow', 'hidden');\r\n\r\n                            if (angular.element($window).innerWidth() < 960 || angular.element($window).innerWidth() > 1920) {\r\n                                if (angular.element($window).innerWidth() < 960) {\r\n                                    scope.Screen960 = true;\r\n                                    scope.sniffTemplateUrl = \"shared/directives/uiElements/smartBrowserSniffing/Browse960.html\";\r\n                                    element.addClass('active');\r\n                                    scope.$apply();\r\n                                }\r\n                                if (angular.element($window).innerWidth() > 1920) {\r\n                                    scope.Screen1920 = true;\r\n                                    scope.sniffTemplateUrl = \"shared/directives/uiElements/smartBrowserSniffing/Browse1920.html\";\r\n                                    element.addClass('active');\r\n                                    scope.$apply();\r\n                                }\r\n                            }\r\n                            else {\r\n                                element.removeClass('active');\r\n                                angular.element('html').removeAttr('style');\r\n                            }\r\n                            angular.element('.sniffingContainer').animate({ scrollTop: 1000 }, 'slow');\r\n                        }\r\n                    }\r\n\r\n                    scope.onChange = function (isTrue) {\r\n                        scope.isShowSniffer = isTrue;\r\n                    }\r\n\r\n                    scope.hideSniffingOverlay = function () {\r\n                        scope.Screen1920 = false;\r\n                        scope.Screen960 = false;\r\n                        element.removeClass('active');\r\n                        angular.element('html').removeAttr('style');\r\n                        favoriteOps.setSnifferFlag(scope.isShowSniffer);\r\n                    }\r\n                    if (!(typeof browserSniffing === 'object')) {\r\n                        browserSniffing = browserSniffing.split(' ');\r\n                    }\r\n                    var browserDetail = browserSniffing;\r\n\r\n                    scope.remindOptions = [{\r\n                        \"title\": \"30 Days\"\r\n                    }, {\r\n                        \"title\": \"15 Days\"\r\n                    }];\r\n                    scope.selectedDate = { \"title\": \"30 Days\" };\r\n\r\n                    var unsupportedBrowserVersion = {\r\n                        type: \"unsupportedBrowserVersion\",\r\n                        isMultipleCheck: true,\r\n                        titleTextColor: \"browser-version-header-text\",\r\n                        buttons: [\r\n                            {\r\n                                title: $translate.instant('updateNowBtn'),\r\n                                result: \"Update Now\"\r\n                            },\r\n                        {\r\n                            title: $translate.instant('dismissLink'),\r\n                            result: \"dismiss\"\r\n                        }\r\n                        ],\r\n                        multipleCheckList: [{\r\n                            type: \"select\",\r\n                            checkContext: scope.selectedDate,\r\n                            options: scope.remindOptions,\r\n                            model: scope.selectedDate,\r\n                            preSelected: scope.selectedDate,\r\n                            header: $translate.instant('yourCurrentBrowser')\r\n                        }]\r\n                    };\r\n\r\n                    var unsupportedBrowser = {\r\n                        type: \"unsupportedBrowser\",\r\n                        isMultipleCheck: true,\r\n                        //message: \"<em>\" + browserDetail[0] + \"</em> \" + $translate.instant(\"browserIncompatibleMsg\") + \"<ul class=\\\"browser-list\\\"><li><a href=\\\"https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD&gclid=EAIaIQobChMIuPufvL320gIVwpe9Ch3VhQUtEAAYASAAEgJ8ifD_BwE\\\" target=\\\"_blank\\\"><img src=\" + iconChrome + \" /><p>\" + $translate.instant('broswerChrome') + \"</p></a></li><li><a href=\\\"https://www.microsoft.com/en-in/download/Internet-Explorer-11-for-Windows-7-details.aspx\\\" target=\\\"_blank\\\"><img src=\" + iconIE + \" /><p>\" + $translate.instant('browserInterExplorer') + \"</p></a></li></ul>\",\r\n                        titleTextColor: \"browser-unsupported-header-text\",\r\n                        buttons: [\r\n                            {\r\n                                title: $translate.instant('dismissLink'),\r\n                                result: \"dismiss\"\r\n                            }\r\n                        ],\r\n                        multipleCheckList: [{\r\n                            type: \"select\",\r\n                            checkContext: scope.selectedDate,\r\n                            options: scope.remindOptions,\r\n                            model: scope.selectedDate,\r\n                            preSelected: scope.selectedDate,\r\n                            header: \"<em>\" + browserDetail[0] + \"</em> \" + $translate.instant(\"browserIncompatibleMsg\") + \"<ul class=\\\"browser-list\\\"><li><a href=\\\"https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD&gclid=EAIaIQobChMIuPufvL320gIVwpe9Ch3VhQUtEAAYASAAEgJ8ifD_BwE\\\" target=\\\"_blank\\\"><img src=\" + iconChrome + \" /><p>\" + $translate.instant('broswerChrome') + \"</p></a></li><li><a href=\\\"https://www.microsoft.com/en-in/download/Internet-Explorer-11-for-Windows-7-details.aspx\\\" target=\\\"_blank\\\"><img src=\" + iconIE + \" /><p>\" + $translate.instant('browserInterExplorer') + \"</p></a></li></ul>\",\r\n                        }]\r\n                    };\r\n\r\n                    var standalone = window.navigator.standalone,\r\n                    userAgent = window.navigator.userAgent.toLowerCase(),\r\n                    mobile = /iphone|ipod|ipad|android/.test(userAgent);\r\n                    if (mobile) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        if ((browserSniffing[0] == \"Chrome\" && browserSniffing[1] < 45) ||\r\n                            (browserSniffing[0] == \"IE\" && browserSniffing[1] < 11)) {\r\n                            notification.notify(unsupportedBrowserVersion, function (result) {\r\n                            });\r\n                        }\r\n\r\n                        if ((browserSniffing[0] != \"Chrome\" && browserSniffing[0] != \"IE\")) {\r\n                            notification.notify(unsupportedBrowser, function (result) { });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();","(function () {\n    'use strict';\n    angular.module('SMART2').directive('smartButton', ['$timeout', 'persistenceService', function ($timeout, persistenceService) {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                callback: \"&\",\n                onClick: \"&\",\n                config: \"=\",\n                backgroundColor: \"=\",\n                fabConfig: \"=\",\n                flat: \"=\",\n                disable: \"=\",\n                callbackParams: \"=\",\n                buttonType: \"=\"\n            },\n            link: function (scope, element, attrs) {\n                //check is floating\n                scope.isFloating = (attrs.floating) ? scope.$eval(attrs.floating) : false;\n\n                //check is large\n                scope.isLarge = (attrs.large) ? scope.$eval(attrs.large) : false;\n\n                //click callback\n                var callback = scope.$eval(scope.callback);\n           \n                //Local click binding\n                scope.clickCallback = function (e) {\n                    e.goBack= persistenceService.redirectToPreviousNode;\n                    if (!scope.buttonType  || (scope.buttonType && scope.buttonType != \"Cancel\")) {\r\n                        if (!scope.disable) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback(e, scope.callbackParams)\r\n                            };\r\n                            scope.onClick({ $event: e });\r\n                        }\r\n                    }\n                    else {\r\n                        persistenceService.redirectToPreviousNode();\r\n                    }\n                };\n\n                attrs.$observe('ngClass', function (value) {\n                    scope.styleClass = value;\n                });\n            },\n            templateUrl: 'shared/directives/uiElements/smartButton/smartButtonTemplate.html'\n        };\n    }]);\n})();","  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Checkbox\r\n   * @description This directive is useful for creating a checkbox.\r\n   *\r\n   * @attr {String} label\r\n   *    Label to be displayed for identification of this ui element\r\n   * @attr {Boolean} ng-model\r\n   *    Checkbox's default state (selected or unselected)\r\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\r\n   * @attr {Boolean} disable\r\n   *    If value of this attribute is set to true, checkbox will not be clickable\r\n   * @attr {Boolean} focus \r\n   *    If set to true, this ui element will be focused\r\n   * @attr {Boolean} validate\r\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n   * @attr {Array} rules \r\n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n   * @attr {String} error-message \r\n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n   * @attr {Boolean} is-mandatory \r\n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n   * @attr {Boolean} is-visible \r\n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-change\r\n   *    Callback function when checkbox state is changed \r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"isUrgent\": true\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"Urgent\",\r\n                                        \"type\": \"checkbox\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"isUrgent\",\r\n                                        \"colspan\": 1,\r\n                                        \"onChange\": \"onChange\"  //  controller function ,\r\n                                        \"attributes\": {\r\n                                            \"fill\": true\r\n                                        },\r\n                                        \"rules\": [\r\n                                            { \r\n                                                \"rule\": \"this == true\", \r\n                                                \"error\": \"Checkbox should not be selected\" \r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n   \r\n   * @example\r\n   Static:\r\n   Controller:\r\n       $scope.isUrgent = true;\r\n       $scope.onChange = function(isUrgent) {\r\n           console.log(isUrgent);\r\n       };\r\n   Usage:\r\n       <smart-checkbox label=\"Urgent\" ng-model=\"isUrgent\" on-change=\"onChange(isUrgent)\"></smart-checkbox>\r\n       \r\n   * @example\r\n   Disabled checkbox:\r\n   <smart-checkbox disable=\"true\"></smart-checkbox>     \r\n   */\r\n  \r\n\r\n(function() {\r\n    'use strict';\r\n    var checkboxCounter = 0;\r\n    \r\n    angular.module('SMART2').directive('smartCheckbox', ['$timeout', 'ScrollTo', 'RuleEngine', function ($timeout, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                //ngModel: '=?',\r\n                ngModelResolve: '&',\r\n                disable: '@',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                label: '@',\r\n                minHeight: '@',\r\n                fill: '@',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                errorMessage: '@',\r\n                onChange: '&',\r\n                removable: '@',\r\n                showTooltip: '@',\r\n                tooltipPosition: '@',\r\n                showinfo: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                checkboxCounter++;\r\n                scope.checkBoxId = \"checkbox-\" + checkboxCounter;\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n                scope.showTooltip = (scope.showTooltip == undefined || scope.showTooltip == null) ? false : scope.showTooltip;\r\n                scope.fill = scope.$eval(scope.fill) == undefined ? true : scope.$eval(scope.fill);\r\n                var checkboxEle = element.find(\":checkbox\");\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\r\n\r\n\r\n                /*\r\n                 * Focus field when focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate field whene validate is set to true\r\n                 */\r\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(rules[i], function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                scope.ngChange = function () {\r\n                    if (attrs.ngModelResolve) {\r\n                        var isChecked = checkboxEle.prop('checked');\r\n                        checkboxEle.prop('checked', !isChecked);\r\n                        ngModelCtrl.$setViewValue(!isChecked);\r\n                        scope.ngModel = !isChecked;\r\n\r\n                        scope.ngModelResolve({\r\n                            $event: {\r\n                                isChecked: !checkboxEle.prop('checked'),\r\n                                resolveFun: function (checked) {\r\n                                    checkboxEle.prop('checked', checked);\r\n                                    ngModelCtrl.$setViewValue(checked);\r\n                                    scope.ngModel = checked;\r\n                                    updateView();\r\n                                    scope.validateRules();\r\n                                    var timeout = $timeout(function () {\r\n                                        scope.onChange();\r\n                                        $timeout.cancel(timeout);\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        updateView();\r\n                        scope.validateRules();\r\n                        var timeout = $timeout(function () {\r\n                            scope.onChange();\r\n                            $timeout.cancel(timeout);\r\n                        });\r\n                    };\r\n                };\r\n\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                    element.remove();\r\n                    scope = null;\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartCheckBox/smartCheckBoxTemplate.html'\r\n        };\r\n    }]);\r\n})();\r\n","angular.module('SMART2').directive('smartCultureDate', ['APPCONSTANTS', function (APPCONSTANTS) {\r\n    \"use strict\";\r\n    var monthAbr = {\r\n        january: 'Jan',\r\n        february: 'Feb',\r\n        march: 'Mar',\r\n        april: 'Apr',\r\n        may: 'May',\r\n        june: 'Jun',\r\n        july: 'Jul',\r\n        august: 'Aug',\r\n        september: 'Sep',\r\n        october: 'Oct',\r\n        november: 'Nov',\r\n        december: 'Dec'\r\n    };\r\n    return {\r\n        restrict: 'AE',\r\n        scope: {\r\n            ngModel: '=ngModel',\r\n            enableShortMonth: '@'\r\n        },\r\n        replace: true,\r\n        link: function ($scope, elem, attr) {\r\n            var matchExpression = /^[0-9]+$/;\r\n            var cultureCode = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n            //var currencyCode = APPCONSTANTS.userPreferences.UserBasicDetails.DefaultCurrencyCode;\r\n\r\n            var formatNumber = function () {\r\n                if (attr.type == 'number' && $scope.ngModel != undefined && $scope.ngModel != '') {\r\n                    if (typeof $scope.ngModel == \"string\") {\r\n                        var tempNumb = $scope.ngModel.replace(/,/g, \"\");\r\n                        if (tempNumb.indexOf('.') !== -1) {\r\n                            tempNumb = $scope.ngModel.replace(/\\./g, '');\r\n                        }\r\n                        if (tempNumb.indexOf('') !== -1) {\r\n                            tempNumb = $scope.ngModel.replace(/\\s/g, '');\r\n                        }\r\n                        $scope.ngModel = parseInt(tempNumb);\r\n                    }\r\n                    if (cultureCode == 'pt-PT') {\r\n                        $scope.ngModel = $scope.ngModel.toLocaleString(cultureCode).replace(/\\s+/g, '.');\r\n                    } else {\r\n                        $scope.ngModel = $scope.ngModel.toLocaleString(cultureCode);\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (attr.type == 'date' && $scope.ngModel != undefined && $scope.ngModel != '') {\r\n                if (matchExpression.test($scope.ngModel)) {\r\n                    if (attr.showTime == 'true') {\r\n                        $scope.ngModel = moment.unix(new Date(JSON.parse($scope.ngModel)).getTime() / 1000).format(moment.localeData()._longDateFormat.L + \" \" + 'HH:mm');\r\n                    } else {\r\n                        $scope.ngModel = moment.unix(new Date(JSON.parse($scope.ngModel)).getTime() / 1000).format(moment.localeData()._longDateFormat.L);\r\n                    }\r\n                } else {\r\n                    if (attr.showTime == 'true') {\r\n                        $scope.ngModel = moment.unix(new Date($scope.ngModel).getTime() / 1000).format(moment.localeData()._longDateFormat.LL + \" \" + 'HH:mm');\r\n                    } else {\r\n                        $scope.ngModel = moment.unix(new Date($scope.ngModel).getTime() / 1000).format(moment.localeData()._longDateFormat.LL);\r\n                    }\r\n                }\r\n\r\n                if ($scope.enableShortMonth == true && $scope.ngModel) {\r\n                    for (var i = 0, abr = Object.keys(monthAbr) ; i < abr.length; i++) {\r\n                        if ($scope.ngModel.search(new RegExp(abr[i], 'gi')) > -1) {\r\n                            $scope.ngModel = $scope.ngModel.replace(new RegExp(abr[i], 'gi'), monthAbr[abr[i]]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            formatNumber();\r\n\r\n            $scope.$watch('ngModel', function (newValue) {\r\n                if (newValue) formatNumber();\r\n            });\r\n\r\n        },\r\n        templateUrl: 'shared/directives/uiElements/smartCultureDate/smartCultureDate.html',\r\n    };\r\n}]);","(function () {\r\n    'use strict';\n\n    var startIndex;\n\n    angular.module('SMART2').directive('smartSortable', [function () {\r\n        return {\r\n            restrict: 'A',\n            scope: {\r\n                onSort: '&',\r\n                onDrag: '&'\r\n            },\n            link: function (scope, element, attrs) {\r\n                element.sortable({\r\n                    placeholder: attrs.placeholder ? attrs.placeholder : \"drop-hover\",\r\n                    helper: attrs.helper ? attrs.helper : \"original\",\r\n                    handle: \".collapsible-header-drag-icon\",\r\n                    items: \">*:not(.disable-sort-item)\",\r\n                    cancel: \".disable-sort-item\",\r\n                    connectWith: attrs.connectWith ? attrs.connectWith : \"\",\r\n                    appendTo: attrs.appendTo ? attrs.appendTo : \"parent\",\r\n                    containment: attrs.containment ? attrs.containment : \"parent\",\r\n                    tolerance: attrs.tolerance ? attrs.tolerance : \"intersect\",\r\n                    start: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', 'hidden');\r\n                        }\r\n                        startIndex = ui.item.index();\r\n                        if (ui.placeholder) {\r\n                            ui.placeholder.height(ui.item.height()).css(\"width\", ui.item.outerWidth());\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: true\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    stop: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', '');\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: false\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    update: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', '');\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onSort({\r\n                                $event: {\r\n                                    startIndex: startIndex,\r\n                                    endIndex: ui.item.index()\r\n                                }\r\n                            });\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: false\r\n                                }\r\n                            });\r\n                        });\r\n                        if (attrs.swipItem == \"true\") {\r\n                            // swiping element position with each other\r\n                            if (ui.sender) {\r\n                                var el = ui.item.next().length == 1 ? ui.item.next() : ui.item.prev();\r\n                                ui.sender.append(el);\r\n                            }\r\n                        }\r\n                    },\r\n                    sort: function (event, ui) {\r\n                        //console.log({ event, ui })\r\n                        if (attrs.whileSorting == \"true\") {\r\n                            var ele = $(\".slick-list\"),\r\n                                scrollpos = ele.scrollLeft(),\r\n                                main_width = ele.outerWidth(),\r\n                                ew = ui.helper.outerWidth(),\r\n                                elft = ui.helper.offset().left - ele.offset().left,\r\n                                rpos = (main_width - (elft + ew));\r\n                            if (elft < 0) { // left\r\n                                $('.slick-prev').click();\r\n                            } else if (rpos < 0) { // right    \r\n                                $('.slick-next').click();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\n\n    angular.module('SMART2').directive('isDraggable', [function () {\r\n        return {\r\n            restrict: 'A',\n            link: function (scope, element, attrs) {\r\n                attrs.$observe('isDraggable', function (isDraggable) {\r\n                    if (isDraggable != undefined && isDraggable != \"\") {\r\n                        if (isDraggable == 'true' || isDraggable == true) {\r\n                            element.removeClass('disable-sort-item');\r\n                        }\n                        if (isDraggable == 'false' || isDraggable == false) {\r\n                            element.addClass('disable-sort-item');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\n\n\n\r\n    //var droppableParent;\n\n    ///*\n    // * Highlight droppables on mouse down\n    // */\n    //var highlightDroppableElements = function (currentDraggableElement) {\r\n    //    currentDraggableElement.removeAttr('style').addClass('being-dragged z-index-plus');\n    //    angular.element('.ui-droppable').addClass('being-dropped-on');\r\n    //};\n\n    ///*\n    // * Unhighlight droppables on mouse up\n    // */\n    //var unhighlightDroppableElements = function (currentDraggableElement) {\r\n    //    currentDraggableElement.removeClass('being-dragged z-index-plus');\n    //    angular.element('.ui-droppable').removeClass('being-dropped-on');\r\n    //};\n\n    ///*\n    // *  This directive will handle dragging of portlet\n    // */\n    //angular.module('SMART2').directive('smartDraggable', [function () {\r\n    //    return {\r\n    //        restrict: 'A',\n    //        link: function (scope, element, attrs) {\r\n    //            if (attrs.smartDraggable == 'false' || attrs.smartDraggable == false) {\r\n    //                return;\r\n    //            }\n\n    //            attrs.$observe('enabled', function (isEnabled) {\r\n    //                if (isEnabled != undefined) {\r\n    //                    if (isEnabled == 'true' || isEnabled == true) {\r\n    //                        element.draggable('enable');\r\n    //                    }\n    //                    if (isEnabled == 'false' || isEnabled == false) {\r\n    //                        element.draggable('disable');\r\n    //                    }\r\n    //                }\r\n    //            });\n\n    //            /*\n    //             *  Make portlet dragging enabled\n    //             */\n    //            element.draggable({\r\n    //                revert: 'invalid',\n    //                handle: '.collapsible-header-drag-icon',\n    //                revertDuration: 200,\n    //                delay: 200,\n    //                appendTo: 'body',\r\n    //                containment: 'body',\r\n    //                start: function () {\r\n    //                    droppableParent = $(this).parent();\n    //                    $(droppableParent).addClass('being-dragged z-index-plus');\r\n    //                },\n    //                drag: function (e) {\r\n    //                    if (e.clientX > window.innerWidth - 10 || e.clientX < 10 || e.clientY > window.innerHeight - 10 || e.clientY < 10) {\r\n    //                        $(document).trigger('mouseup');\r\n    //                    }\r\n    //                },\n    //                stop: function () {\r\n    //                    setTimeout(function () {\r\n    //                        $(droppableParent).removeClass('being-dragged z-index-plus');\n    //                        // clearTimeout(dragTimeout);\n    //                    }, 250);\r\n    //                }\r\n    //            });\r\n    //        }\r\n    //    };\r\n    //}]);\n\n\n    ///*\n    // *  This directive will handle dropping of portlet\n    // */\n    //angular.module('SMART2').directive('smartDroppable', ['$compile', '$timeout', function ($compile, $timeout) {\r\n    //    return {\r\n    //        restrict: 'A',\n    //        link: function (scope, element, attrs) {\r\n    //            if (attrs.smartDroppable == 'false' || attrs.smartDroppable == false) {\r\n    //                return;\r\n    //            }\n\n    //            /*\n    //             *  Make portlet dropping enabled\n    //             */\n    //            element.droppable({\r\n    //                hoverClass: 'drop-hover',\n    //                drop: function (event, ui) {\r\n    //                    var draggable = $(ui.draggable[0]),\n    //                        draggableOffset = draggable.offset(),\n    //                        container = $(event.target),\n    //                        containerOffset = container.offset();\n\n    //                    $('.draggable', event.target).appendTo(droppableParent).css({ opacity: 0 }).animate({ opacity: 1 }, 200);\n    //                    draggable.appendTo(container).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ left: 0, top: 0 }, 200);\r\n    //                }\r\n    //            });\r\n    //        }\r\n    //    };\r\n    //}]);\r\n})();\n","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartDropdown', ['$window', '$timeout', 'menuListItemServ', '$focusOnField', function ($window, $timeout, menuListItemServ, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                config: \"@\",\r\n                show: \"@\",\r\n                onHide: \"&\",\r\n                stopProg: \"@\",\r\n                autoClose: \"@\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var islistDropdown;\r\n                var dropDownMenuListItem = function (dropdownContent) {\r\n                    /*dropdown checker*/\r\n                    var liList = dropdownContent.children('li'),\r\n                        liLength = liList.length;\r\n                    if (!liList.attr(\"isItemList\")) {\r\n                       \r\n                        for (var i = 0; i < liLength; i++) {\r\n                            var $this = liList.eq(i),\r\n                                children = $this.children().eq(0);\r\n                            if ($this.children().length == 1 && !$this.hasClass(\"dropdown-content-footer\") && (children.attr(\"ng-click\") != null || children.attr(\"ui-sref\") != null || $this.attr(\"ng-click\") != null)) {\r\n                                islistDropdown = true;\r\n                                break;\r\n                            }\r\n                        };\r\n                        if (islistDropdown == true) {\r\n                            if (liList.last().hasClass(\"dropdown-content-footer\")) {\r\n                                liList.splice(liLength - 1, 1);\r\n                            }\r\n                            menuListItemServ(liList);\r\n                            islistDropdown = false;\r\n                        };\r\n                    }\r\n                    /*dropdown checker end*/\r\n\r\n                },\r\n                keycodeis,\r\n\t\t\t     hideOnTabOut = function (e) {\r\n\t\t\t         if (e.keyCode == 9) {\r\n\t\t\t             keycodeis = e.keyCode;\r\n\t\t\t             window.lastOpenedDropdownConfig.activates.hide().removeClass('active');\r\n\t\t\t             window.lastOpenedDropdownConfig.origin.removeClass(\"active\");\r\n\t\t\t             window.lastOpenedDropdownConfig.activates.unbind(\"keydown\", hideOnTabOut);\r\n\t\t\t         };\r\n\t\t\t     };\r\n\r\n\r\n                //initialization\r\n                var clrTout = setTimeout(function () {\r\n                    var _element = element.find(\".dropdown-button\"),\r\n\t\t\t            closeDDButtons = element.find(\".close-dd\");\r\n                    $(_element).dropdown(angular.extend(typeof scope.$eval(attrs.config) == \"object\" ? scope.$eval(attrs.config) : {}, {\r\n                        onHide: function () {\r\n                            if (keycodeis != 9 && (attrs.singleElementDropdown != undefined)) {\r\n                                window.lastOpenedDropdownConfig.origin.focus();\r\n                                keycodeis = null;\r\n                            }\r\n                            if (scope.autoClose == \"false\") {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }));\r\n                    var ddCloseOff = angular.element(\".dd-close-off\");\r\n                    if (ddCloseOff.length > 0) {\r\n                        ddCloseOff.click(function (e) {\r\n                            var _elem = angular.element(e.target);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(!_elem.hasClass(\"btn-flat\") && !_elem.hasClass(\"btn\") && !_elem.hasClass(\"btn-large\")){\r\n\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t}\r\n                        });\r\n                    }\r\n\r\n                    if (closeDDButtons.length > 0) {\r\n                        closeDDButtons.click(function () {\r\n                            var dd = element.find(\".dropdown-content\");\r\n                            if (dd.length > 0) {\r\n                                scope.hideDropDown(dd);\r\n                            };\r\n                        });\r\n                    }\r\n\r\n                    clearTimeout(clrTout);\r\n                    clrTout = null;\r\n                });\r\n\r\n                if (scope.$eval(attrs.fixed)) {\r\n                    $(element).find('.dropdown-content').addClass('fixeddd');\r\n                    $(element).find('.dropdown-button').bind('click', function (e) {\r\n                        (function ($t) {\r\n                            var clrTout1 = setTimeout(function () {\r\n                                var ddCnt = $t.next('.dropdown-content'),\r\n                                    $tOffsetTop = $t.offset().top - $(window).scrollTop(),\r\n                                    $tOffsetLeft = $t.offset().left - $(window).scrollLeft();\r\n                                ddCnt.css({ 'left': $tOffsetLeft - 2 + 'px', 'top': $tOffsetTop - 2 + 'px' });\r\n                                //ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n                                var lastScrollPosition = $tOffsetTop - 2,\r\n\t\t\t\t\t\t\t\t\tnewScrollPosition = $tOffsetTop - 2;\r\n\r\n                                var ddHgt = ddCnt.css('height'),\r\n                                    winHgt = angular.element(window).height();\r\n                                if ((parseInt(ddHgt) + $tOffsetTop) > winHgt) {\r\n                                    var diffHgt = (parseInt(ddHgt) + $tOffsetTop) - winHgt,\r\n                                        clientOffsetHgt = ($tOffsetTop - diffHgt - 15);\r\n                                    ddCnt.css('top', clientOffsetHgt + 'px');\r\n                                    lastScrollPosition = clientOffsetHgt,\r\n\t\t\t\t\t\t\t\t\tnewScrollPosition = clientOffsetHgt;\r\n                                }\r\n\r\n                                angular.element($window).on(\"scroll.smartFixedSmartDrop\", function () {\r\n                                    newScrollPosition = this.pageYOffset;\r\n                                    if (newScrollPosition !== lastScrollPosition) {\r\n                                        if (ddCnt.hasClass('active')) {\r\n                                            scope.hideDropDown(ddCnt);\r\n                                        }\r\n                                    }\r\n                                    lastScrollPosition = newScrollPosition;\r\n                                });\r\n                                dropDownMenuListItem(ddCnt) // function for apply the tabbing\r\n                                if (attrs.singleElementDropdown != undefined ) {\r\n                                    ddCnt.bind(\"keydown\", hideOnTabOut);\r\n                                }\r\n                                var firstFieldFocus = ddCnt.find(\"a, input, textarea, [tabindex]\").first();\r\n                                $focusOnField(firstFieldFocus);\r\n\r\n                                clearTimeout(clrTout1);\r\n                                clrTout1 = null;\r\n\r\n                            });\r\n                        })($(this));\r\n                    });\r\n\r\n                } else {\r\n\r\n                    // Animation from bottom to top\r\n                    $(element).find('.dropdown-button').bind('click', function (e) {\r\n                        var dropdownContent = $(this).next('.dropdown-content');\r\n                        dropDownMenuListItem(dropdownContent) // function for apply the tabbing\r\n                        if (attrs.singleElementDropdown != undefined) {\r\n                            dropdownContent.bind(\"keydown\", hideOnTabOut);\r\n                        }\r\n\r\n                        $(this).next('.dropdown-content').addClass('ddautoHeight');\r\n                        (function ($t) {\r\n                            var tOut2 = setTimeout(function () {\r\n                                var ddCnt = $t.next('.dropdown-content');\r\n                                var ddCntTop = (parseInt(ddCnt.css('top')) + 5) + 'px';\r\n                                var ddCntLeft = (parseInt(ddCnt.css('left')) + 5) + 'px';\r\n                                if (parseInt(ddCntTop, 10) < 0) {\r\n                                    ddCnt.css('top', 0);\r\n                                    ddCnt.animate({\r\n                                        top: ddCntTop, left: ddCntLeft\r\n                                    });\r\n                                }\r\n                                var firstFieldFocus = ddCnt.find(\"a, input, textarea, [tabindex]\").first();\r\n                                $focusOnField(firstFieldFocus);\r\n                                clearTimeout(tOut2);\r\n                                tOut2 = null;\r\n                            });\r\n                        })($(this));\r\n                    });\r\n                }\r\n\r\n\r\n                var onShow = attrs.$observe('show', function (value) {\r\n                    if (angular.isDefined(value)) {\r\n                        if (!scope.$eval(value)) {\r\n                            var dropdown = element.find('.dropdown-content');\r\n                            scope.hideDropDown(dropdown);\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n                scope.hideDropDown = function (dropdown) {\r\n                    if (dropdown.length > 0) {\r\n                        dropdown.fadeOut(250);\r\n                        dropdown.removeClass('active');\r\n                        dropdown.css('max-height', '');\r\n                        angular.element(\"[data-activates='\" + dropdown.attr('id') + \"']\").removeClass('active');\r\n                        angular.isFunction(scope.onHide) && scope.onHide();\r\n                    }\r\n                }\r\n\r\n                /*Stop Propogation: Start*/\r\n                if (scope.stopProg === \"true\") {\r\n                    var cancelTout = $timeout(function () {\r\n                        element.find(\".dropdown-button\").click(function (e) {\r\n                            e.stopPropagation();\r\n                        }).end().find(\".dropdown-content\").click(function (e) {\r\n                            //Close dropdown after option get selected, this is default fuctionality of materialize framework\r\n                            var a = window.lastOpenedDropdownConfig;\r\n                            a.activates.fadeOut(a.options.outDuration);\r\n                            a.activates.removeClass('active');\r\n                            a.activates.css('max-height', '');\r\n                            a.origin.removeClass('active');\r\n                            e.stopPropagation();\r\n                        });\r\n                        $timeout.cancel(cancelTout);\r\n                        cancelTout = null;\r\n                    });\r\n                }\r\n                /*Stop Propogation: End*/\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onShow();\r\n                    angular.element($window).off(\"scroll.smartFixedSmartDrop\");\r\n                    $(element).find('.dropdown-button').unbind('click');\r\n                    $(element).find('.dropdown-button').off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartDropdown/smartDropdownTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('actionCloseDropdown', [function () {\r\n        return {\r\n            restrict: 'C',\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n                //[commenting the traverseAndFireHideDropDown function as it takes time to close/hide dropdown container as soon as closing event is fired]\r\n                //var traverseAndFireHideDropDown = function (scopeRef, dropdown) {\r\n                //    for (var key in scopeRef) {\r\n                //        if (key == 'hideDropDown') {\r\n                //            scopeRef.hideDropDown(dropdown);\r\n                //            return;\r\n                //        }\r\n                //    }\r\n                //    traverseAndFireHideDropDown(scopeRef.$parent, dropdown);\r\n                //    dropdown = null; //[OPTIMIZATION]\r\n                //};\r\n\r\n                element.bind('click', function () {\r\n                    angular.element(document).trigger('click');\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.unbind('click', function () {\r\n                        angular.element(document).trigger('click');\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();","'use strict';\nangular.module('SMART2').directive('smartErrorFieldHighlighter', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: 'AE',\r\n        scope: {\r\n            errorConfig: \"=\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.otherMandetoryFields = false;\r\n            scope.$watch(\"errorConfig.check\", function (value) {\r\n                if (value == true) {\r\n                    $timeout(function () {\r\n                        $(element.find(\"[is-mandatory='true'] input\")).each(function () {\r\n                            if ($(this).hasClass('invalid')) {\r\n                                $(this).focus();\r\n                                scope.otherMandetoryFields = true;\r\n                                return false;\r\n                            } else {\r\n                                scope.otherMandetoryFields = false;\r\n                            }\r\n                        });\r\n\r\n                        if (!scope.otherMandetoryFields) {\r\n                            $(element.find(\"[is-mandatory='true'].smartMandetoryField\")).each(function () {\r\n                                if ($(this).find('.smartErrorText').length > 0 || $(this).find('.select-invalid-wrapper').length > 0) {\r\n                                    $(this).find('a.focusErrorField').focus();\r\n                                    $(this).find('input').focus();\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                        scope.errorConfig.check = false;\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Form-widget\r\n * @description Form widget directive accepts form-config and model-data. \r\n *    ui elements (fields) that are optional are added in right-panel (widget-panel). Optional fields can be added on form by simply clicking that item in right-panel. \r\n *    Optional field can also be removed by clicking 'x' icon on the upper right corner of ui element or 'x' icon against that item in right-panel. \r\n * \r\n * @attr {Array} form-config\r\n *    Form config is expected to be an array of ui elements (fields)\r\n * @attr {Object} model-data\r\n *    Data to be bound on ui elements (fields)\r\n * @attr {Boolean} is-sequencial\r\n *    If the value of this attribute is set to true, newly added ui element (field) will be added at the end of the section.\r\n *    If the value of this attribute is set to false, newly added ui element (field) will be added by the orders it appears in form-config.  \r\n * @attr {Boolean} show-widget\r\n *    When form-config is passed to form-widget, right-panel will always be created if this attribute is not set to false.\r\n * @attr {String} search-holder\r\n *    Id of DOM element where search bar should appear. This attribute enables form-widget search feature, where user can search for optional sections and fields on the form.\r\n *    And navigate to optional section or field by clicking on search result item.\r\n * @attr {Number} widget-panel-top\r\n *    Top position for widget-panel (right-panel)\r\n * @attr {Number} widget-panel-right\r\n *    Right position for widget-panel (right-panel)\r\n * @attr {Function} on-section-sort\r\n *    Callback function when sections are sorted or rearranged\r\n * @attr {Function} on-save\r\n *    Callback function when sections are need to be save on outside section click\r\n *\r\n * @example\r\n Dynamic:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Dynamic attribute value. One can set a scope variable or function as attribute value. \r\n One can also pass parameters in calling function as is done on callback functions.\r\n In following example, value of 'isMandatory' field for 'Last Name' can be 'isLastNameMandatory(config.modelData)'.\r\n 'options' attribute does not support function as value.\r\n Controller:\r\n      $scope.isFirstNameMandatory = true;\r\n\r\n      $scope.isLastNameMandatory = function() {\r\n            return true;\r\n      };\r\n\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": \"isMandatory\",\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": \"isLastNameMandatory\",\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n      \r\n * @example\r\n Form widget without widget panel (right panel):\r\n <smart-form-widget show-widget=\"false\"></smart-form-widget>   \r\n     \r\n * @example\r\n If newly added ui elements (fields) to be added at the end of the section:\r\n <smart-form-widget is-sequencial=\"true\"></smart-form-widget>\r\n \r\n * @example\r\n Widget-panel with top and right position:\r\n <smart-form-widget widget-panel-top=\"100\" widget-panel-right=\"70\"></smart-form-widget>    \r\n \r\n * @example\r\n Form widget with 'Rule Engine' service:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\r\n      $scope.validateForm = function() {\r\n          RuleEngine.setRules($scope.config.formConfig.sections, $scope.config.modelData, $scope.config.rules);\r\n          RuleEngine.execute(function (e) {\r\n              console.log(e);   //  Check e for more details\r\n          }, $scope);  \r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n      <button ng-click=\"validateForm()\">Validate Form</button>\r\n\r\n* @example\r\nSaving sections on outside section click.\r\n\r\nmandatoryFieldStatus property used to initiate sec Nav validation and section indicator\r\n\r\n Dynamic:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                        \"save\":true,\r\n                        \"mandatoryFieldStatus\": {\r\n                            \"status\": \"complete\",\r\n                            \"isvalidate\":  false,\r\n                            \"description\": \"There are some mandatory fields that are not filled in this section\",\r\n                            \"title\": \"Section 3 - Completed\" \r\n                        },\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\t  $scope.onSave = function (data, prevObj) {\r\n\t      console.log(data, \"In Controller \", prevObj)\r\n          $scope.$digest();\r\n\t\t  // Note: data will give scope.modelData Obj and prevObj will give scope.formConfig.sections[..]\r\n\t\t  // use class=\"savable\" in actionable container within the section for avoiding the onSave callback function. \r\n\t  };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\" on-save=\"onSave(data, prevObj)\"></smart-form-widget>\r\n\r\n\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    var formWidgetCounter = 0;\r\n    angular.module('SMART2').directive('smartFormWidget', ['APPCONSTANTS', 'ScrollTo', 'formWidgetUtils', '$translate', '$timeout', '$compile', 'persistenceService', 'scrollPosition', '$window', function (APPCONSTANTS, ScrollTo, formWidgetUtils, $translate, $timeout, $compile, persistenceService, scrollPosition, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                formConfig: '=?',\r\n                modelData: '=?',\r\n                isSequential: '@',\r\n                showWidget: '@',\r\n                searchHolder: '@',\r\n                widgetPanelTop: '@',\r\n                widgetPanelRight: '@',\r\n                onSectionSort: '&',\r\n                onSave: '&',\r\n                revisionMode: \"@\",\r\n                secNav: '=?',\r\n                filterWith: '=?'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                $window.onload = function () {\r\n                    ///TODO \r\n                    //Call persistenceService to get All MasterData for all root fields\r\n                    persistenceService.masterPersistenceService.getMasterDataForRootField();\r\n                };\r\n                if (scope.secNav == undefined) {\r\n                    scope.secNav = true\r\n                }\r\n                scope.widgetPanelRightPos = scope.widgetPanelRight ? parseFloat(scope.widgetPanelRight) : 70;\r\n                formWidgetCounter = formWidgetCounter + 1;\r\n                scope.formWidgetId = 'form-widget-' + formWidgetCounter;\r\n                scope.addRemoveSection = $translate.instant('AddRemoveSectionTxt');\r\n                scope.visibleSectionTrackerItemsCount = 0;\r\n\r\n                var currentSelectedSection = 0,\r\n                    thumbnailsWrapHeightTemp = 0,\r\n                    secnavIndex = 0,\r\n                    thumbnailsWrapHeight = 0,\r\n                    sectionItemClicked = false,\r\n                    staticTopmargin = 64; // header height\r\n\r\n                scope.enableFieldPreview = false;\r\n\r\n                /*\r\n                 *  Update visible section tracker items\r\n                 */\r\n                var updateVisibleSectionTrackerItemsCount = function () {\r\n                    var count = 0,\r\n                        len = scope.sectionTrackerItems.length;\r\n                    for (var i = 0; i < len; i++) {\r\n                        var tItem = scope.sectionTrackerItems[i];\r\n                        if (tItem.visible && !tItem.hidden) {\r\n                            count++;\r\n                        }\r\n                    }\r\n                    scope.visibleSectionTrackerItemsCount = count;\r\n                };\r\n\r\n                var onSubHeaderHeight = attrs.$observe('subHeaderHeight', function (value) {\r\n                    if (!isNaN(value)) {\r\n                        ScrollTo.setScrollingTopMargin(parseInt(value));\r\n                    }\r\n                });\r\n\r\n\r\n                scope.isFormWidgetToBeLoaded = false;\r\n\r\n                var toutPromise = $timeout(function () {\r\n                    scope.isFormWidgetToBeLoaded = true;\r\n                    $timeout.cancel(toutPromise);\r\n                    toutPromise = null;\r\n                }, 500);\r\n\r\n\r\n\r\n                scope.checkPresistence = false;\r\n                scope.getPresistence = function (formConfig) {\r\n                    if (formConfig && typeof formConfig.documentType != 'undefined') {\r\n                        persistenceService.getUserData(formConfig.documentType);\r\n                        persistenceService.sectionPersistence.getSectionsPersistence(formConfig, persistenceService.userData);\r\n                    }\r\n                }\r\n\r\n                scope.modelDataWatcherEnabledOrNot = false;\r\n                scope.initModelDataWatcher = function (newConfig) {\r\n                    scope.modelDataWatcherEnabledOrNot = true;\r\n                    scope.unbindModelDataWatcher = scope.$watch('modelData', function (newVal, oldVal) {\r\n\r\n                        persistenceService.getModelData(newConfig, newVal, scope.unbindModelDataWatcher, scope.initChipsWatcher);\r\n                    }, true);\r\n                }\r\n                var persistenceTimeout;\r\n                scope.initChipsWatcher = function (arr) {\r\n\r\n                    scope.$watchGroup(arr, function (newVal, oldVal) {\r\n                        persistenceService.nPlusOne.getSelectedSection();\r\n                        if (persistenceTimeout) {\r\n                            $timeout.cancel(persistenceTimeout);\r\n                            persistenceTimeout = undefined;\r\n                        }\r\n                        persistenceTimeout = $timeout(function () {\r\n                            persistenceService.saveRecentDocument(newVal, scope.modelData);\r\n                        }, 1000);\r\n\r\n                    });\r\n                }\r\n\r\n                var unbindSectionsLoadedWathcer;\r\n                function initSectionsLoadedWatcher() {\r\n                    scope.SectionLoaderInitiated = true;\r\n                    var arr = [];\r\n                    for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                        arr.push('formConfig.sections[' + i + '].isContentLoaded');\r\n                    }\r\n\r\n\r\n                    unbindSectionsLoadedWathcer = scope.$watchGroup(arr, function (newVal, oldVal) {\r\n                        if (newVal) {\r\n                            var loadedCompletely = false;\r\n                            for (var i = 0; i < newVal.length; i++) {\r\n                                if (newVal[i] == false && !scope.formConfig.sections[i].isLazyLoadEnabled) {\r\n                                    break;\r\n                                }\r\n                                if (i == newVal.length - 1 && (newVal[i] == true || typeof newVal[i] == 'undefined')) {\r\n                                    scope.initSectionFocus();\r\n                                    var seclectedSectionId = persistenceService.nPlusOne.getSelectedSection();\r\n                                    if (seclectedSectionId != '') {\r\n                                        var seclectedSectionIndex = -1;\r\n                                        var sections = scope.formConfig.sections;\r\n                                        for (var j = 0; j < sections.length; j++) {\r\n                                            if (typeof sections[j].id != 'undefined' && sections[j].id == seclectedSectionId) {\r\n                                                seclectedSectionIndex = j;\r\n                                                sections[j].isActive = true;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                        loadedCompletely = true;\r\n                                        if (seclectedSectionIndex > -1) {\r\n                                            sectionItemClicked = true;\r\n                                            var mySection = scope.sectionTrackerItems[seclectedSectionIndex];\r\n                                            if (mySection.visible) {\r\n                                                scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                                mySection.isActive = true;\r\n                                                currentSelectedSection = seclectedSectionIndex;\r\n\r\n\r\n                                            }\r\n\r\n                                            scope.isSectionsLoaded = false;\r\n                                            ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + seclectedSectionIndex), angular.element('#' + scope.formWidgetId), function (e) {\r\n                                                setTimeout(function () {\r\n                                                    sectionItemClicked = false;\r\n                                                    scope.isSectionsLoaded = true;\r\n                                                }, 250);\r\n\r\n                                                // scope.sectionsLoadedCompletely = true;\r\n                                                unbindSectionsLoadedWathcer();\r\n                                            });\r\n                                        }\r\n                                        else {\r\n                                            scope.isSectionsLoaded = true;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        scope.isSectionsLoaded = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                var formWidgetTimeout,\r\n                    fixedElemHeight = 0,\r\n                    windowScrollTop = 0;\r\n                scope.sectionTrackerItems = [];\r\n                var onFormConfig = scope.$watch('formConfig', function (newConfig, oldConfig) {\r\n                    if (newConfig) {\r\n                        if (formWidgetTimeout) {\r\n                            $timeout.cancel(formWidgetTimeout);\r\n                            formWidgetTimeout = undefined;\r\n                        }\r\n                        if (scope.checkPresistence != true) {\r\n                            scope.getPresistence(newConfig);\r\n                            scope.formConfig.sections = newConfig.sections;\r\n                            scope.checkPresistence = true;\r\n                        }\r\n\r\n                        if (scope.modelDataWatcherEnabledOrNot == false && newConfig != undefined) {\r\n                            scope.initModelDataWatcher(newConfig);\r\n\r\n                        }\r\n\r\n                        formWidgetTimeout = $timeout(function () {\r\n                            var sectionItems = [];\r\n                            var optionalSections = [];\r\n                            var optionalFieldsAndSections = [],\r\n                                sectionLen = scope.formConfig.sections.length;\r\n\r\n                            scope.enableFieldPreview = newConfig.enableFieldPreview;\r\n\r\n                            for (var i = 0; i < sectionLen; i++) {\r\n                                var tSection = scope.formConfig.sections[i];\r\n                                //  if (firstTime || !angular.equals(newConfig.sections[i], (typeof oldConfig === 'undefined') ? null : oldConfig.sections[i])) {\r\n                                tSection.isMandatory = formWidgetUtils.convertAndGetValue(tSection.isMandatory, scope, tSection);\r\n                                if (angular.isDefined(tSection.isVisible)) {\r\n                                    tSection.isVisible = formWidgetUtils.convertAndGetValue(tSection.isVisible, scope, tSection);\r\n                                } else {\r\n                                    tSection.isVisible = tSection.isMandatory;\r\n                                }\r\n                                if (!angular.isDefined(tSection.isHidden)) {\r\n                                    //tSection.isHidden = scope.formConfig.sections[i].isHidden; //[TODO] not needed code\r\n                                    tSection.isHidden = false;\r\n                                } //else {\r\n                                //tSection.isHidden = false;\r\n                                //}\r\n                                tSection.key = scope.formWidgetId + '-section-' + i;\r\n\r\n                                if (scope.$eval(scope.showWidget) != false) {\r\n                                    sectionItems.push({\r\n                                        sectionKey: tSection.key,\r\n                                        sectionId: tSection.sectionId,\r\n                                        isOptionalSection: !tSection.isMandatory,\r\n                                        label: tSection.label,\r\n                                        sectionIndex: i,\r\n                                        visible: tSection.isVisible,\r\n                                        hidden: tSection.isHidden,\r\n                                        isActive: i == currentSelectedSection,\r\n                                        save: tSection.save,\r\n                                        id: tSection.id || '',\r\n                                        mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                        isReadOnly: tSection.isReadOnly\r\n                                    });\r\n\r\n                                    var sectionTLength = scope.sectionTrackerItems.length;\r\n                                    if (sectionTLength) {\r\n\r\n                                        //  For loop is needed in this case, because it is difficult to maintain the index of dragged/dropped item with ng-repeat.\r\n\r\n                                        for (var ij = 0; ij < sectionTLength; ij++) {\r\n                                            if (scope.sectionTrackerItems[ij].sectionIndex == tSection.key.split('section-')[1]) {\r\n                                                scope.sectionTrackerItems[ij] = {\r\n                                                    sectionKey: tSection.key,\r\n                                                    sectionId: tSection.sectionId,\r\n                                                    isOptionalSection: !tSection.isMandatory,\r\n                                                    label: tSection.label,\r\n                                                    sectionIndex: i,\r\n                                                    visible: tSection.isVisible,\r\n                                                    hidden: tSection.isHidden,\r\n                                                    isActive: i == currentSelectedSection,\r\n                                                    save: tSection.save,\r\n                                                    mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                                    isReadOnly: tSection.isReadOnly\r\n                                                };\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                if (!tSection.isMandatory && scope.$eval(scope.showWidget) != false && !tSection.isHidden) {\r\n                                    optionalSections.push({\r\n                                        sectionKey: tSection.key,\r\n                                        sectionId: tSection.sectionId,\r\n                                        isOptionalSection: !tSection.isMandatory,\r\n                                        label: tSection.label,\r\n                                        searchLabel: $translate.instant(tSection.label),\r\n                                        sectionIndex: i,\r\n                                        visible: tSection.isVisible,\r\n                                        hidden: scope.formConfig.sections[i].isHidden,\r\n                                        isActive: false,\r\n                                        isSection: true,\r\n                                        save: tSection.save,\r\n                                        mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                        isReadOnly: tSection.isReadOnly\r\n                                    });\r\n                                }\r\n\r\n                                var sectionOptionalFields = [],\r\n                                    rowsLength = tSection.rows.length;\r\n\r\n                                for (var j = 0; j < rowsLength; j++) {\r\n                                    var trowsData = tSection.rows[j],\r\n                                        propertyLen = trowsData.properties.length;\r\n                                    for (var k = 0; k < propertyLen; k++) {\r\n                                        var tProperty = trowsData.properties[k];\r\n                                        tProperty.isMandatory = formWidgetUtils.convertAndGetValue(tProperty.isMandatory, scope, tProperty);\r\n                                        if (angular.isDefined(tProperty.isVisible)) {\r\n                                            tProperty.isVisible = formWidgetUtils.convertAndGetValue(tProperty.isVisible, scope, tProperty);\r\n                                        } else {\r\n                                            tProperty.isVisible = tProperty.isMandatory;\r\n                                        }\r\n                                        if (angular.isDefined(tProperty.isHidden)) {\r\n                                            tProperty.isHidden = formWidgetUtils.convertAndGetValue(tProperty.isHidden, scope, tProperty);\r\n                                        }\r\n                                        if (!tProperty.isMandatory && scope.$eval(scope.showWidget) != false && !tProperty.isHidden) {\r\n                                            sectionOptionalFields.push({\r\n                                                sectionKey: tSection.key,\r\n                                                label: tProperty.label,\r\n                                                sectionLabel: tSection.label,\r\n                                                searchLabel: $translate.instant(tSection.label) + ' ' + $translate.instant(tProperty.label),\r\n                                                sectionIndex: i,\r\n                                                rowIndex: j,\r\n                                                propertyIndex: k,\r\n                                                visible: tProperty.isVisible,\r\n                                                isSection: false\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                tSection.optionalFields = sectionOptionalFields;\r\n                                optionalFieldsAndSections = optionalFieldsAndSections.concat(tSection.optionalFields);\r\n                                //}\r\n                            }\r\n                            //  firstTime = false;\r\n\r\n                            if (scope.sectionTrackerItems.length != sectionItems.length) {\r\n                                scope.sectionTrackerItems = sectionItems;\r\n                            }\r\n\r\n                            scope.optionalSections = optionalSections;\r\n\r\n                            optionalFieldsAndSections = scope.optionalSections.concat(optionalFieldsAndSections);\r\n\r\n                            scope.optionalFieldsAndSections = optionalFieldsAndSections;\r\n\r\n                            updateVisibleSectionTrackerItemsCount();\r\n\r\n                            scope.showWidget = scope.sectionTrackerItems.length > 1 || scope.optionalSections.length > 0;\r\n                            if (!scope.SectionLoaderInitiated) {\r\n                                initSectionsLoadedWatcher();\r\n                            }\r\n                        }, 250);\r\n                    }\r\n                }, true);\r\n                /*\r\n                *  If search is enabled \r\n                */\r\n                //caching the selector.\r\n                var searchHolder = angular.element('#' + scope.searchHolder);\r\n                if (searchHolder.length > 0) {\r\n                    searchHolder.html('<div ng-include=\"\\'shared/directives/uiElements/smartFormWidget/searchTemplate.html\\'\"></div>');\r\n                    $compile(searchHolder.contents())(scope);\r\n                }\r\n\r\n                function getOpenWidgetSection(a_id) {\r\n                    var returnItem = false,\r\n                        len = scope.formConfig.sections.length;\r\n                    for (var indx = 0; indx < len; indx++) {\r\n                        var tmpObj = scope.formConfig.sections[indx];\r\n                        if (tmpObj.id === a_id) {\r\n                            returnItem = tmpObj;\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n                    return returnItem;\r\n                }\r\n\r\n                if (scope.$eval(scope.showWidget) != false) {\r\n                    var draggableWidth = $(window).width() / 2,\r\n                        restrictWidth = 0,\r\n                        secnavcontainerExpandWidth = 350;\r\n                    // To expand the sec nav\r\n                    element.on('click.secnavchevroicon', '#secnavchevroicon', function () {\r\n                        var $panelExp = $('#panelexpandor');\r\n                        if (!$panelExp.data('ui-draggable')) {\r\n                            $panelExp.draggable({\r\n                                axis: 'x',\r\n                                drag: function (e, ui) {\r\n                                    restrictWidth = secnavcontainerExpandWidth - draggableWidth;\r\n                                    ui.position.left = Math.min(secnavcontainerExpandWidth - 300, ui.position.left);\r\n                                    ui.position.left = Math.max(restrictWidth, ui.position.left);\r\n                                },\r\n                                stop: function (e, ui) {\r\n                                    secnavcontainerExpandWidth -= ui.position.left;\r\n                                    $('.secnavcontainer-expand').width(secnavcontainerExpandWidth);\r\n                                    $panelExp.css('left', 0);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        var $this = $(this),\r\n                            $secNavCont = $this.closest('.secnavcontainer');\r\n\r\n                        if ($secNavCont.hasClass('secnavcontainer-animate')) {\r\n\r\n                            $secNavCont.removeClass('secnavcontainer-animate secnavcontainer-expand').width(69);\r\n                            $this.find('use').attr('xlink:href', '#icon_LeftChevron');\r\n                            $('#sevnav-overlay').remove();\r\n                            $('body').css('overflow', 'auto');\r\n                            secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight)\r\n                        } else {\r\n\r\n                            $('body').css('overflow', 'hidden').append('<div id=\"sevnav-overlay\" class=\"sevnav-overlay\"></div>');\r\n                            $secNavCont.addClass('secnavcontainer-animate').width(secnavcontainerExpandWidth);\r\n                            setTimeout(function () {\r\n                                $secNavCont.addClass('secnavcontainer-expand');\r\n                            }, 450);\r\n                            $this.find('use').attr('xlink:href', '#icon_RightChevro');\r\n                            var $secNavContList = $secNavCont.find('.thumbnails-wrap').children('li')\r\n                            $secNavContList.each(function (k, v) {\r\n                                v.style.height = \"46px\";\r\n                            });\r\n                            var $thumbnailswrap = $('#thumbnails-wrap');\r\n                            $thumbnailswrap.animate({ scrollTop: (($($secNavContList[secnavIndex]).offset().top - $thumbnailswrap.offset().top) - 20) }, \"slow\");\r\n                            $('#sevnav-overlay').off('click').on('click', function () {\r\n                                $('#secnavchevroicon').trigger('click');\r\n                            });\r\n                        }\r\n\r\n                    });\r\n\r\n                    // Sec nav dot mouse enter functionality \r\n                    element.on('mouseenter.secnav', '.thumbnails-wrap li', function (e) {\r\n                        var $this = $(this);\r\n                        if ($this.closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n\r\n                        $('.nearby').removeClass(\"nearby\");\r\n                        $this.prev(\"li\").addClass(\"nearby\");\r\n                        $this.next(\"li\").addClass(\"nearby\");\r\n                        secnavHeightCal(element, e, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // SubHeader \r\n                    $('.extra-nav-wrap').resizeSensor({\r\n                        onHeightChange: function (a) {\r\n                            $('#subheaderwrapper').height(a.height);\r\n                            onDocumentScroll();\r\n                        }\r\n                    });\r\n\r\n                    // Sec nav dot mouse leave functionality \r\n                    element.on('mouseleave.secnav', '.thumbnails-wrap', function () {\r\n                        if ($(this).closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n                        element.find('li').removeClass(\"nearby\");\r\n                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // Sec nav dot mouse leave functionality \r\n                    element.on('mouseenter.secnavform', '.accountDetails', function () {\r\n                        if ($(this).closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n                        element.find('li').removeClass(\"nearby\");\r\n                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // For calculating the dot height of sec nav \r\n                    var secnavHeightCal = function (element, e, thumbnailsWrapHeight, type) {\r\n                        var $secNavSelector = $('#thumbnails-wrap').children('li'),\r\n                            selectedLiIndex = typeof e === 'number' ? e : $secNavSelector.index($(e.currentTarget).closest('li')),\r\n                            prevSec = selectedLiIndex - 1,\r\n                            afterSec = selectedLiIndex + 1,\r\n                            prevSecDiff = prevSec,\r\n                            afterSecDiff = 2,\r\n                            secNavUlHeight;\r\n\r\n                        secNavUlHeight = Math.floor((thumbnailsWrapHeight) / ($secNavSelector.length));\r\n\r\n                        if (type != 'mouse') {\r\n                            secnavIndex = selectedLiIndex;\r\n                        }\r\n                        if (element.find('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                            return\r\n                        };\r\n\r\n                        $secNavSelector.each(function (k, v) {\r\n                            v.style.height = secNavUlHeight + \"px\";\r\n\r\n                            //if (k === selectedLiIndex) {\r\n                            //    v.style.height = (secNavUlHeight + 16) + \"px\";\r\n\r\n                            //} else if (k <= prevSec) {\r\n\r\n                            //    v.style.height = prevSecDiff === 1 ? (5 + secNavUlHeight) + \"px\" : prevSecDiff === 0 ? (10 + secNavUlHeight) + \"px\" : v.style.height = secNavUlHeight + \"px\";\r\n\r\n                            //    prevSecDiff--;\r\n                            //} else {\r\n                            //    if (afterSecDiff === 2) {\r\n                            //        v.style.height = (5 + secNavUlHeight) + \"px\";\r\n                            //    } else {\r\n                            //        v.style.height = secNavUlHeight + \"px\";\r\n                            //    }\r\n                            //    afterSecDiff--;\r\n                            //}\r\n                        });\r\n                    };\r\n\r\n                    var filterTextTimeout,\r\n                        onDocumentScroll = function () {\r\n\r\n                            /**\r\n                             ** Adding and Removing fixed class on subheader\r\n                             ** Setting height of sec nav\r\n                             ** Highlighting sec nav dots \r\n                            **/\r\n                            if (filterTextTimeout) {\r\n                                $timeout.cancel(filterTextTimeout);\r\n                            }\r\n\r\n                            try {\r\n                                var $fixedElem = $('.extra-nav-wrap'),\r\n                                    $subHeaderFixedContainer = $('#subheaderwrapper'),\r\n                                    $formWidgetElem = $('.secondary-navigation'),\r\n                                    formWidgetElemHeight = $formWidgetElem && $formWidgetElem.height(),\r\n                                    $thumbnailsWrap = $('#thumbnails-wrap'),\r\n                                    $secnavchevroicon = $('#secnavchevroicon'),\r\n                                    formWidgetTop,\r\n                                    formWidgetFixedTop = 1;\r\n                                windowScrollTop = $(window).scrollTop();\r\n                                fixedElemHeight = $fixedElem.outerHeight();\r\n                                if (windowScrollTop > 63) {\r\n\r\n                                    $formWidgetElem.css(\"top\", fixedElemHeight);\r\n\r\n                                    thumbnailsWrapHeight = $(window).height() - ((scope.optionalSections && scope.optionalSections.length ? 193 : 150) + (fixedElemHeight - 63));\r\n\r\n                                    if (!$fixedElem.hasClass('extra-nav-wrap-fixed')) {\r\n                                        $fixedElem.addClass('extra-nav-wrap-fixed');\r\n                                        $subHeaderFixedContainer.addClass('extra-nav-wrap-fixed');\r\n                                    }\r\n\r\n                                } else {\r\n\r\n                                    $formWidgetElem.css(\"top\", \"auto\");\r\n                                    if ($fixedElem.hasClass('extra-nav-wrap-fixed')) {\r\n                                        $fixedElem.removeClass('extra-nav-wrap-fixed');\r\n                                        $subHeaderFixedContainer.removeClass('extra-nav-wrap-fixed');\r\n                                    }\r\n\r\n                                    thumbnailsWrapHeight = $(window).height() - (((scope.optionalSections && scope.optionalSections.length ? 193 : 150) + (fixedElemHeight)) - windowScrollTop);\r\n                                }\r\n                                $formWidgetElem.height(thumbnailsWrapHeight + 24);\r\n                                $secnavchevroicon.css(\"top\", (thumbnailsWrapHeight / 2));\r\n\r\n                                formWidgetTop = $formWidgetElem.length && $formWidgetElem.offset().top;\r\n                                var trackerItemsLen = scope.sectionTrackerItems && scope.sectionTrackerItems.length;\r\n\r\n\r\n                                if (!sectionItemClicked && trackerItemsLen) {\r\n\r\n                                    var $cardParent = element.find('#' + scope.formWidgetId + '-sortable').find('.cardParent');\r\n                                    for (var i = 0; i < trackerItemsLen; i++) {\r\n                                        var $this = element.find('#' + scope.formWidgetId + '-section-' + i);\r\n\r\n                                        // Position of section relative to window\r\n                                        if ($this.children().length > 0) {\r\n                                            var offsetLi = $this.offset().top - 10,\r\n                                                offsetLiHeight = offsetLi + $this.height();\r\n                                            //activeoffset = offsetLi - formWidgetTop;\r\n                                            //get index of div in the parent document  \r\n                                            if (formWidgetTop >= offsetLi && formWidgetTop <= offsetLiHeight || thumbnailsWrapHeightTemp != thumbnailsWrapHeight) {\r\n                                                thumbnailsWrapHeightTemp = thumbnailsWrapHeight;\r\n                                                newSelected = scope.sectionTrackerItems[i].sectionIndex;\r\n\r\n                                                if (scope.sectionTrackerItems[newSelected].visible) {\r\n                                                    filterTextTimeout = $timeout(function () {\r\n                                                        scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                                        scope.sectionTrackerItems[newSelected].isActive = true;\r\n                                                        currentSelectedSection = newSelected;\r\n                                                        if (typeof scope.sectionTrackerItems[newSelected].id != 'undefined') {\r\n                                                            persistenceService.nPlusOne.saveSelectedSection(scope.sectionTrackerItems[newSelected].id);\r\n                                                        }\r\n                                                        secnavHeightCal(element, $cardParent.index($this), thumbnailsWrapHeight);\r\n                                                    });\r\n                                                }\r\n                                                $cardParent.children('.collapsible-container').removeClass('collapsible-focus');\r\n\r\n                                                $this.children('.collapsible-container').addClass('collapsible-focus');\r\n\r\n\r\n\r\n                                                if (formWidgetTop >= offsetLi && formWidgetTop <= offsetLiHeight) {\r\n                                                    break;\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                        $this = null;\r\n                                    }\r\n                                }\r\n\r\n\r\n                            } catch (e) { console.log(\"onDocumentScroll\") }\r\n                        },\r\n                        checkSubheaderHeight,\r\n                        subheaderHeight,\r\n                        newSelected = 0,\r\n                        filterTextTimeout = null;\r\n\r\n                    setTimeout(function () {\r\n                        isCheckSecnav();\r\n                    }, 100);\r\n\r\n                    function isCheckSecnav() {\r\n                        if ($('.secondary-navigation').length) {\r\n                            onDocumentScroll();\r\n                            $(document).on('scroll.secnav', onDocumentScroll);\r\n                        } else {\r\n                            setTimeout(function () {\r\n                                isCheckSecnav();\r\n                            }, 500);\r\n                        }\r\n                    }\r\n\r\n                    setTimeout(function () {\r\n                        isCheckWidget();\r\n                    }, 1000);\r\n\r\n                    function isCheckWidget() {\r\n                        if ($('#' + scope.formWidgetId).length) {\r\n                            scrollPosition.scrollWitgetsection(scope.sectionTrackerItems);\r\n                        } else {\r\n                            setTimeout(function () {\r\n                                isCheckWidget();\r\n                            }, 1000);\r\n                        }\r\n                    };\r\n                    /*\r\n                     * Section item click handler\r\n                     */\r\n                    var activeItem;\r\n                    scope.onSectionItemClick = function (item, sectionNumber, e) {\r\n\r\n                        var sectionTrackerLength = scope.sectionTrackerItems.length;\r\n                        //  For loop is needed in this case, because it is difficult to maintain the index of dragged/dropped item.\r\n                        for (var i = 0; i < sectionTrackerLength; i++) {\r\n                            scope.sectionTrackerItems[i].isActive = false;\r\n                        }\r\n                        scope.sectionTrackerItems[sectionNumber].isActive = true;\r\n                        currentSelectedSection = sectionNumber;\r\n                        var Selectedsection = scope.formConfig.sections[item.sectionIndex];\r\n                        Selectedsection.isActive = true;\r\n                        if (typeof Selectedsection.id != 'undefined') {\r\n                            persistenceService.nPlusOne.saveSelectedSection(Selectedsection.id);\r\n                        }\r\n                        scope.formConfig.sections[item.sectionIndex].isActive = true;\r\n                        sectionItemClicked = true;\r\n                        activeItem = e;\r\n                        ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                        ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId + '-sortable'), function (e) {\r\n\r\n                            setTimeout(function () {\r\n                                secnavHeightCal(element, activeItem, thumbnailsWrapHeight);\r\n                                sectionItemClicked = false;\r\n                            }, 300);\r\n                        });\r\n                    };\r\n\r\n\r\n                    /*\r\n                     * On optional section item click handler\r\n                     */\r\n                    scope.onOptionalSectionItemClick = function (isLabelClicked, item) {\r\n                        if (isLabelClicked && item.isVisible) {\r\n                            return;\r\n                        }\r\n\r\n                        scope.formConfig.sections[item.sectionIndex].isVisible = !scope.formConfig.sections[item.sectionIndex].isVisible;\r\n                        //  Toggle section tracker item visibility\r\n                        var trackerTLen = scope.sectionTrackerItems.length;\r\n                        for (var i = 0; i < trackerTLen; i++) {\r\n                            if (scope.sectionTrackerItems[i].label === item.label) {\r\n                                scope.sectionTrackerItems[i].visible = !item.visible;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        /*\r\n                         *  scope.isSequential is set to 'true', form-widget-section would be added \r\n                         *  where it is positioned in the JSON structure else \r\n                         *  form-widget-section would be added at the end of row\r\n                         */\r\n                        if (!scope.$eval(scope.isSequential) && scope.formConfig.sections[item.sectionIndex].isVisible) {\r\n                            //  Re-arrange sections order\r\n                            var tmpSection = scope.formConfig.sections[item.sectionIndex];\r\n                            scope.formConfig.sections.splice(item.sectionIndex, 1);\r\n                            scope.formConfig.sections.push(tmpSection);\r\n\r\n                            //  Re-arrange sections tracker items order\r\n                            for (var i = 0; i < scope.sectionTrackerItems.length; i++) {\r\n                                if (scope.sectionTrackerItems[i].label === item.label) {\r\n                                    var tmpSection = scope.sectionTrackerItems[i];\r\n                                    scope.sectionTrackerItems.splice(i, 1);\r\n                                    scope.sectionTrackerItems.push(tmpSection);\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            //  Re-arrange sections tracker items section index\r\n                            for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                                for (var j = 0; j < scope.sectionTrackerItems.length; j++) {\r\n                                    if (scope.formConfig.sections[i].label == scope.sectionTrackerItems[j].label) {\r\n                                        scope.sectionTrackerItems[j].sectionIndex = i;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //  Re-arrange sections optional fields section index\r\n                            for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                                for (var j = 0; j < scope.optionalSections.length; j++) {\r\n                                    if (scope.formConfig.sections[i].label == scope.optionalSections[j].label) {\r\n                                        scope.optionalSections[j].sectionIndex = i;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        var itemVisible = !item.visible;\r\n                        var tempTOut = setTimeout(function () {\r\n                            if (itemVisible) {\r\n\r\n                                ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                                ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId + '-sortable'), function () {\r\n                                    if ($('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                                        $('.secnavcontainer').find('.thumbnails-wrap').children('li').each(function (k, v) {\r\n                                            v.style.height = \"46px\";\r\n                                        });\r\n                                    } else {\r\n                                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight);\r\n                                    }\r\n                                });\r\n                            }\r\n                            clearTimeout(tempTOut);\r\n                        }, 200);\r\n\r\n                        updateVisibleSectionTrackerItemsCount();\r\n                    };\r\n\r\n\r\n                    scope.onOptionalFieldClick = function (isLabelClicked, item) {\r\n                        if (!item.visible) {\r\n                            ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                            ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId));\r\n                        }\r\n                        scope.$broadcast('optionalFieldClick', {\r\n                            isLabelClicked: isLabelClicked, item: item\r\n                        });\r\n                    };\r\n\r\n\r\n                    /*\r\n                     * Widget panel\r\n                     */\r\n                    scope.showWidgetPanel = false;\r\n\r\n                    scope.toggleWidgetPanel = function () {\r\n                        scope.showWidgetPanel = !scope.showWidgetPanel;\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Callback function when section order gets changed\r\n                     */\r\n\r\n                    scope.onSort = function (e) {\r\n                        scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n\r\n                        var sectionTrackerItems = angular.copy(scope.sectionTrackerItems),\r\n                            item = sectionTrackerItems.splice(e.startIndex, 1);\r\n                        sectionTrackerItems.splice(e.endIndex, 0, item[0]);\r\n\r\n                        var formConfigAfterSort = [],\r\n                            trackerSortLen = scope.sectionTrackerItems.length;\r\n                        var sectionsList = [];\r\n                        for (var i = 0; i < trackerSortLen; i++) {\r\n                            var section = scope.formConfig.sections[scope.sectionTrackerItems[i].sectionIndex];\r\n                            formConfigAfterSort.push(section);\r\n                            if (typeof section.id != 'undefined') {\r\n                                sectionsList.push(section.id);\r\n                            }\r\n                        }\r\n                        if (sectionsList.length > 0 && typeof scope.formConfig.documentType != 'undefined') {\r\n                            persistenceService.updateUserData('sections', sectionsList);\n                            persistenceService.saveUserData(scope.formConfig.documentType);\r\n                        }\r\n                        scope.onSectionSort({\r\n                            $event: {\r\n                                formConfig: formConfigAfterSort\r\n                            }\r\n                        });\r\n\r\n                        if (element.find('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                            var $sectionCont = $('#form-widget-1-sortable'),\r\n                                sectionList = $sectionCont.children('li'),\r\n                                sectionListitem = sectionList.splice(e.startIndex, 1);\r\n                            sectionList.splice(e.endIndex, 0, sectionListitem[0]);\r\n                            $sectionCont.append(sectionList);\r\n                        } else {\r\n                            var $thumbnailsCont = $('#thumbnails-wrap'),\r\n                                thumbnailsList = $thumbnailsCont.children('li'),\r\n                                thumbnailsListitem = thumbnailsList.splice(e.startIndex, 1),\r\n                                thumbNodes = [],\r\n                                count = 0;\r\n                            thumbnailsList.splice(e.endIndex, 0, thumbnailsListitem[0]);\r\n\r\n                            $.each($thumbnailsCont.get(0).childNodes, function (k, v) {\r\n                                if ($(v).is('li')) {\r\n                                    thumbNodes[k] = thumbnailsList[count];\r\n                                    count++;\r\n                                } else {\r\n                                    thumbNodes[k] = v;\r\n                                }\r\n                            });\r\n                            $thumbnailsCont.append(thumbNodes);\r\n                        }\r\n                        setTimeout(function () {\r\n                            onDocumentScroll();\r\n                        }, 10);\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Make section active in section tracker\r\n                     */\r\n                    var previousClickedSection = [];\r\n                    scope.initSectionFocus = function () {\r\n                        scope.$on('sectionFocus', function (event, data) {\r\n                            var openedSec = getOpenWidgetSection(data.id);\r\n                            var sectionNumber = openedSec.sectionIndex;\r\n                            if (openedSec) {\r\n                                scope.onSectionItemClick(openedSec, sectionNumber);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    scope.onSectionClick = function (section) {\r\n\r\n                        //scrollPosition.set(0, location.hash, { key: section.key.split('section-')[1], active: true });\r\n\r\n                        if (attrs.onSave) {\r\n                            if (section.hasOwnProperty('save') && section != previousClickedSection[(previousClickedSection.length - 1)]) {\r\n                                previousClickedSection.push(section);\r\n                            }\r\n\r\n                            if (previousClickedSection.length > 2) {\r\n                                previousClickedSection.shift();\r\n                            }\r\n                        }\r\n                        if (scope.sectionTrackerItems[currentSelectedSection].label === section.label) {\r\n                            return;\r\n                        }\r\n                        var tlenTracker = scope.sectionTrackerItems.length;\r\n                        for (var i = 0; i < tlenTracker; i++) {\r\n                            if (scope.sectionTrackerItems[i].label === section.label) {\r\n                                scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                scope.sectionTrackerItems[i].isActive = true;\r\n                                currentSelectedSection = i;\r\n                                if (typeof scope.sectionTrackerItems[i].id != 'undefined') {\r\n                                    persistenceService.nPlusOne.saveSelectedSection(scope.sectionTrackerItems[i].id);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Callback function when user expands or collapses the section\r\n                     */\r\n                    scope.onSectionHeaderClick = function (section) {\r\n                        if (angular.isDefined(section.onHeaderClick)) {\r\n                            eval('scope.' + formWidgetUtils.generateFunctionWithParams(section.onHeaderClick, '$parent', true));\r\n                        }\r\n                        if (!section.isContentLoaded) {\r\n                            section.isContentLoaded = true;\r\n                        }\r\n\r\n                        var $itemSelected = element.find('#' + section.key);\r\n\r\n                        if (!$itemSelected.find('.collapsible-body').hasClass('displayBlock')) {\r\n\r\n                            var displacementItem = $itemSelected.offset().top - angular.element('#' + scope.formWidgetId + '-sortable').offset().top;\r\n\r\n                            displacementItem = displacementItem + staticTopmargin;\r\n                            setTimeout(function () {\r\n                                angular.element('body,html').animate({\r\n                                    scrollTop: displacementItem\r\n                                }, \"medium\");\r\n                            }, 200)\r\n                        }\r\n                    };\r\n\r\n\r\n                    // Auto Save Callback\r\n                    if (attrs.onSave) {\r\n                        var onDocumentClick = function (e) {\r\n                            if (!previousClickedSection.length) {\r\n                                return;\r\n                            }\r\n                            var prevKeyLen = $(e.target).closest('#' + previousClickedSection[0].key).length;\r\n                            if ((!prevKeyLen) || (prevKeyLen && $(e.target).closest('.savable').length)) {\r\n                                if (!$(e.target).closest('.modal').length && !$(e.target).closest('.noSaveItem').length && !$(e.target).closest('.lean-overlay').length) {\r\n                                    scope.onSave({\r\n                                        data: scope.modelData, prevObj: previousClickedSection[0]\r\n                                    });\r\n                                    previousClickedSection.shift();\r\n                                }\r\n                                //scope.$digest();\r\n                            }\r\n                        }\r\n\r\n                        $(document).off('click.saveSection').on('click.saveSection', onDocumentClick);\r\n\r\n                        // Needed due to selectbox plugin using stopPropagation\r\n                        $(document).off('change.saveSelect').on('change.saveSelect', '.select-wrapper select', function (e) {\r\n                            //var ind = $('#' + scope.formWidgetId + '-sortable').children('li').index($(this).closest('li')),\r\n                            //    sectionDatastore = scope.formConfig.sections[ind];\r\n\r\n\r\n                            var ind = $(this).closest('.card.cardParent').attr('id').split('section-'),\r\n                                sectionDatastore = scope.formConfig.sections[ind[1]];\r\n                            if (sectionDatastore.hasOwnProperty('save') && sectionDatastore != previousClickedSection[(previousClickedSection.length - 1)]) {\r\n                                previousClickedSection.push(sectionDatastore);\r\n                            }\r\n\r\n                            if (previousClickedSection.length > 2) {\r\n                                previousClickedSection.shift();\r\n                            }\r\n\r\n                            onDocumentClick(e);\r\n                        });\r\n                    };\r\n\r\n                    /*\r\n                     *  Remove all listeners on scope destroy\r\n                     */\r\n                    scope.$on('$destroy', function () {\r\n                        $(document).off('scroll.secnav click.saveSection change.saveSelect');\r\n                        $('#sevnav-overlay') && $('#sevnav-overlay').remove();\r\n\r\n                        element.off('mouseenter.secnav mouseleave.secnav click.secnavchevroicon mouseenter.secnavform');\r\n                        onSubHeaderHeight();\r\n                        onFormConfig();\r\n\r\n                    });\r\n\r\n\r\n                    scope.iconClasses = APPCONSTANTS.formWidgetItemClasses;\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartFormWidget/smartFormWidgetTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('smartSvgIcon', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                element.html('<svg><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#' + attrs.smartSvgIcon + '\"></use></svg>');\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    /*\r\n     *  Text highlighting filter\r\n     */\r\n    angular.module('SMART2').filter('highlight', ['$sce', function ($sce) {\r\n        return function (text, phrase) {\r\n            if (phrase) {\r\n                text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span style=\"background: yellow\">$1</span>');\r\n            }\r\n            return $sce.trustAsHtml(text);\r\n        }\r\n    }]);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartGrid', ['$filter', function ($filter) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                gridConfig: '=config'\r\n            },\r\n            controller: function ($scope) {\r\n                /*\r\n                 * Current formatter\r\n                 */\r\n                $scope.currencyFormatter = function (amountarg, symbol, zeroprecision, defaultCurrency) {\r\n                    var amount = amountarg;\r\n                    if (zeroprecision)\r\n                        amount = Number(amountarg).toFixed(0);\r\n\r\n                    var formattedAmount;\r\n                    if (amount >= 1000000 || amount <= -1000000) {\r\n                        shortamount = amount / 1000000;\r\n                        formattedAmount = $scope.currencyFormatter(shortamount, symbol, false, defaultCurrency);\r\n                        //if (zeroprecision)\r\n                        //formattedAmount = formattedAmount.substring(0, formattedAmount.length - 3);\r\n                        formattedAmount = formattedAmount + \" MM\";\r\n                    }\r\n                    else {\r\n                        formattedAmount = $filter('currency')(amount);\r\n                        if (defaultCurrency != undefined) symbol = defaultCurrency;\r\n                        if (amount < 0) {\r\n                            if (symbol !== undefined)\r\n                                formattedAmount = $filter('currency')(amount, symbol).replace(\"(\", \"-\").replace(\")\", \"\");\r\n                            else\r\n                                formattedAmount = $filter('currency')(amount).replace(\"(\", \"-\").replace(\")\", \"\");\r\n                        }\r\n                        else if (symbol !== undefined) {\r\n                            formattedAmount = $filter('currency')(amount, symbol);\r\n                        }\r\n                        if (zeroprecision) {\r\n                            if (parseInt(formattedAmount.substring(formattedAmount.length - 2, formattedAmount.length)) == 0) {\r\n                                formattedAmount = formattedAmount.substring(0, formattedAmount.length - 3);\r\n                            }\r\n                        }\r\n                    }\r\n                    return formattedAmount.toString();\r\n                };\r\n\r\n                /*\r\n                 * Number formatter\r\n                 */\r\n                $scope.numberFormatter = function (amountarg, zeroprecision) {\r\n                    var formattedAmount = amountarg;\r\n                    if (zeroprecision)\r\n                        formattedAmount = Number(amountarg).toFixed(0);\r\n                    if (formattedAmount >= 1000000 || formattedAmount <= -1000000) {\r\n                        var shortamount = formattedAmount / 1000000;\r\n                        if (zeroprecision) {\r\n                            formattedAmount = Number(shortamount).toFixed(0);\r\n                        } else {\r\n                            formattedAmount = shortamount;\r\n                        }\r\n                        return $filter('number')(formattedAmount) + \" MM\";\r\n                    }\r\n                    else {\r\n                        return $filter('number')(formattedAmount);\r\n                    }\r\n                };\r\n            },\r\n            link: function (scope, element, attr) {\r\n                var headerTemplate, rowTemplate, headerData, rowData, cellTemplate, cellRenderer, headerCellRenderer, onClick, rowHeight, cellStyle;\r\n\r\n                scope.$watch('gridConfig', function (n, o) {\r\n                    if (n) {\r\n                        scope.config = scope.gridConfig;\r\n\r\n                        if (scope.config && scope.config.headerTemplate) {\r\n                            headerTemplate = scope.config.headerTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowTemplate) {\r\n                            rowTemplate = scope.config.rowTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.headerData) {\r\n                            headerData = scope.config.headerData;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowData) {\r\n                            rowData = scope.config.rowData;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.dimension && scope.config.dimension.height) {\r\n                            scope.gridHeight = scope.config.dimension.height;\r\n                        }\r\n                        else {\r\n                            scope.gridHeight = element.parent().outerHeight(true);\r\n                        }\r\n\r\n                        scope.gridHeight = scope.gridHeight - 1; // 1 is the border\r\n\r\n                        if (scope.config && scope.config.cellRenderer) {\r\n                            cellRenderer = scope.config.cellRenderer;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.headerCellRenderer) {\r\n                            headerCellRenderer = scope.config.headerCellRenderer;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.onClick) {\r\n                            onClick = scope.config.onClick;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.cellTemplate) {\r\n                            cellTemplate = scope.config.cellTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowHeight) {\r\n                            rowHeight = scope.config.rowHeight;\r\n                        }\r\n                        else {\r\n                            rowHeight = 40;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.cellStyle) {\r\n                            cellStyle = scope.config.cellStyle;\r\n                        }\r\n\r\n                        var columnDefs = [];\r\n                        var cellWidth = element.parent().outerWidth() / headerData.length;\r\n\r\n                        for (var i = 0; i < headerData.length; i++) {\r\n                            columnDefs.push({\r\n                                displayName: headerData[i].title,\r\n                                field: headerData[i].datamappingkey,\r\n                                suppressSorting: headerData[i].sortable ? false : true,\r\n                                formatterType: headerData[i].formatterType,\r\n                                clickable: headerData[i].clickable ? true : false,\r\n                                align: headerData[i].align,\r\n                                width: headerData[i].width != undefined ? headerData[i].width : cellWidth,\r\n                                cellStyle: headerData[i].cellStyle != undefined ? headerData[i].cellStyle : undefined\r\n                            });\r\n\r\n                            //  Set default currency if the formatter type is currency\r\n                            if (headerData[i].formatterType == 'currency') {\r\n                                columnDefs[columnDefs.length - 1].defaultCurrency = headerData[i].defaultCurrency;\r\n                            }\r\n\r\n                            if (cellTemplate != undefined) {\r\n                                columnDefs[columnDefs.length - 1].template = cellTemplate;\r\n                            }\r\n                            else {\r\n                                columnDefs[columnDefs.length - 1].cellRenderer = cellRenderer ? cellRenderer : function (e) {\r\n                                    var columnValue, titleValue;\r\n                                    switch (e.colDef.formatterType) {\r\n                                        case 'link':\r\n                                            columnValue = titleValue = '<a>' + e.value + '</a>';\r\n                                            break;\r\n\r\n                                        case 'number':\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = titleValue = '<a>' + e.value + '</a>';\r\n                                            }\r\n                                            break;\r\n\r\n                                        case 'currency':\r\n                                            columnValue = titleValue = scope.currencyFormatter(e.value, undefined, true, e.colDef.defaultCurrency);\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = '<a>' + columnValue + '</a>';\r\n                                            }\r\n                                            break;\r\n\r\n                                        default:\r\n                                            columnValue = e.value === 0 || e.value === '0' ? '0' : (e.value == 'null' || e.value == null || e.value == '' ? '<span style=\"color: transparent;\">-</span>' : e.value);\r\n                                            titleValue = e.value;\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = '<a>' + columnValue + '</a>';\r\n                                            }\r\n                                            break;\r\n                                    }\r\n                                    if (e.value == 'null' || e.value == null || e.value == '') {\r\n                                        return '<span style=\"width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\">' + columnValue + '</span>';\r\n                                    }\r\n                                    else {\r\n                                        return '<span style=\"width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\" title=\"' + titleValue + '\">' + columnValue + '</span>';\r\n                                    }\r\n                                    //'<a style=\"white-space: normal;\">' + columnValue + '</a>' - To avoid text ellipsis\r\n                                };\r\n                            }\r\n                        }\r\n\r\n                        var tmpRowData = [];\r\n                        for (var i = 0; i < rowData.length; i++) {\r\n                            tmpRowData[i] = {};\r\n                            for (var j = 0; j < columnDefs.length; j++) {\r\n                                tmpRowData[i][columnDefs[j].field] = rowData[i][columnDefs[j].field]; // rowData[i][columnDefs[j].field] == 'null' || rowData[i][columnDefs[j].field] == null  || rowData[i][columnDefs[j].field] == '' ? '<span style=\"color: transparent;\">-</span>' : rowData[i][columnDefs[j].field];\r\n                            }\r\n                        }\r\n\r\n                        if (scope.angularGridConfig) {\r\n                            scope.angularGridConfig.columnDefs = columnDefs;\r\n                            scope.angularGridConfig.rowData = tmpRowData;\r\n                            scope.angularGridConfig.api.onNewRows();\r\n                        }\r\n                        else {\r\n                            scope.angularGridConfig = {\r\n                                columnDefs: columnDefs,\r\n                                rowData: tmpRowData,\r\n                                enableSorting: true,\r\n                                angularCompileRows: true,\r\n                                virtualPaging: true,\r\n                                enableColResize: true,\r\n                                angularCompileHeaders: scope.config && scope.config.angularCompileHeaders,\r\n                                headerCellRenderer: headerCellRenderer ? headerCellRenderer : function (e) {\r\n                                    return '<span style=\"width: 80%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\">' + e.colDef.displayName + '</span>';\r\n                                },\r\n                                cellClicked: onClick ? function (e) {\r\n                                    onClick({ dataMappingKey: e.colDef.field, value: e.value, rowIndex: e.rowIndex, rowData: rowData[e.rowIndex], clickable: e.colDef.clickable });\r\n                                } : undefined,\r\n                                rowHeight: rowHeight == undefined ? undefined : rowHeight\r\n                            };\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartGrid/smartGrid.html'\r\n        };\r\n    }]);\r\n})();\r\n/*\r\n * Inject required CSS\r\n */\r\n//var angularGridCSS = document.createElement(\"link\");\r\n//angularGridCSS.setAttribute(\"rel\", \"stylesheet\");\r\n//angularGridCSS.setAttribute(\"type\", \"text/css\");\r\n//angularGridCSS.setAttribute(\"href\", $('#blobURL').val()+'shared/libraries/angularGrid/angularGrid.css');\r\n//document.getElementsByTagName(\"head\")[0].appendChild(angularGridCSS);\r\n\r\n//var angularGridThemeCSS = document.createElement(\"link\");\r\n//angularGridThemeCSS.setAttribute(\"rel\", \"stylesheet\");\r\n//angularGridThemeCSS.setAttribute(\"type\", \"text/css\");\r\n//angularGridThemeCSS.setAttribute(\"href\", $('#blobURL').val()+'shared/libraries/angularGrid/theme-fresh.css');\r\n//document.getElementsByTagName(\"head\")[0].appendChild(angularGridThemeCSS);\r\n","angular.module('SMART2').directive('smartInfotip', ['$window', function ($window) {\r\n    \"use strict\";\r\n    var _lastOpenInfotip = {},\r\n    hideLastInfotip = function (hObj) {\r\n        if (_lastOpenInfotip.target && _lastOpenInfotip.target.hasClass('isInfotipVisible')) {\r\n            _lastOpenInfotip.target.removeClass('isInfotipVisible');\r\n            _lastOpenInfotip.infotip.find(\".infotip-popover\").addClass('hide-popover-element');\r\n            _lastOpenInfotip.infotip.find(\".infotip-popover-triangle\").addClass('hide-popover-element');\r\n            _lastOpenInfotip._ev.value = true;\r\n        }\r\n    };\r\n    $(document).click(function (evt) {\r\n        hideLastInfotip();\r\n     });\r\n    return {\r\n        restrict: 'A',\r\n        transclude: true,\r\n        scope:true,\r\n        link: function (scope, element, attrs) {\r\n            //the root div of the popup template\r\n            var popover_container = element.find('.infotip-popover-container'),\r\n                popover_container_parent = popover_container.parent(),\r\n                popover = element.find('.infotip-popover'), //the popover element\r\n                triangle = element.find('.infotip-popover-triangle'), //the small triangle attached with the popover\r\n                triangle_height, //vertical height of the triangle\r\n                triangle_diagonal, //base of the triangle\r\n                triangle_div_side = 15, //side of the triangle\r\n                triangle_rect_div_side = 30, //the div which has been rotated to make a triangle using the after pseudo class\r\n                infotipElement = element,\r\n                getPosition = popover_container_parent.css('position') === \"\" || popover_container_parent.css('position') === \"static\" ? \"relative\" : popover_container_parent.css('position'),\r\n                $win = angular.element($window),\r\n                bindOn = !attrs.bindOn ? 'click mouseover interesected' : attrs.bindOn;\r\n\r\n            popover_container_parent.css({ 'position': getPosition, 'z-index': '1', 'display': 'inline-block' });\r\n            //popover_container_parent.css('position', getPosition);\r\n            //popover_container_parent.css('display', 'inline-block');\r\n            triangle_height = Math.sqrt(triangle_div_side * triangle_div_side / 2);\r\n            triangle_diagonal = Math.sqrt(triangle_div_side * triangle_div_side * 2);\r\n            var mode = attrs.mode === '' || attrs.mode === undefined ? 'mouseover' : attrs.mode;\r\n            var closeOnClick = attrs.closeOnClick === undefined ?\r\n                                    (mode == 'click' ? true : false) :\r\n                                    (attrs.closeOnClick === 'true');\r\n\r\n            var closeOnMouseleave = attrs.closeOnMouseleave === undefined ?\r\n                                        (mode == 'mouseover' ? true : false) :\r\n                                        (attrs.closeOnMouseleave === 'true');\r\n\r\n            var hideOnDocHover = { value: attrs.hideOnDocHover == 'true' };\r\n            //return the path of the popover template\r\n            scope.getContentPopover = attrs.templateUrl;\r\n\r\n            scope.isTemplateUrl = attrs.templateUrl ? true : false;\r\n\r\n            //depending upon the position specified, attached the appropriate class to the popover \r\n            var getTriangleClass = function () {\r\n                return 'infotip-popover-triangle-' + attrs.position;\r\n            }\r\n\r\n            var hideTooltip = function () {\r\n                setTimeout(function () {\r\n                    if (!onHoverablearea() && hideOnDocHover.value) {\r\n                        popover.addClass('hide-popover-element');\r\n                        triangle.addClass('hide-popover-element');\r\n                    }\r\n                }, 0);\r\n            };\r\n            var onHoverablearea = function () {\r\n                return (popover.is(':hover') || infotipElement.is(':hover') || triangle.is(':hover'));\r\n            };\r\n\r\n            scope.triangleClass = getTriangleClass();\r\n            if (closeOnMouseleave) {\r\n                if (hideOnDocHover.value) {\r\n                    infotipElement.bind('mouseleave blur', function () {\r\n                         hideTooltip();\r\n                    });\r\n                    popover.bind('mouseleave blur', function () {\r\n                        hideTooltip();\r\n                    });\r\n                    triangle.bind('mouseleave blur', function () {\r\n                        hideTooltip();\r\n                    });\r\n                }\r\n                else {\r\n                    infotipElement.bind('mouseleave blur ', function () {\r\n                        popover.addClass('hide-popover-element');\r\n                        triangle.addClass('hide-popover-element');\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (mode != 'click' && closeOnClick) {\r\n                infotipElement.bind('click', function () {\r\n                    popover.addClass('hide-popover-element');\r\n                    triangle.addClass('hide-popover-element');\r\n                });\r\n            }\r\n\r\n            popover.on('click', function (evt) {\r\n                evt.stopPropagation();\r\n            });\r\n\r\n            //Hide infotip on scroll\r\n            $win.bind('scroll', function (e) {\r\n                popover.addClass('hide-popover-element');\r\n                triangle.addClass('hide-popover-element');\r\n            });\r\n\r\n            //listen for click on the directive element\r\n            infotipElement.bind(bindOn, function (evt) {\r\n                evt.stopImmediatePropagation();\r\n               var _this = $(this),\r\n                parent_height = _this.outerHeight(),\r\n                parent_width, popover_height, popover_width,\r\n                elementOffsetTop = element.offset().top + 23,\r\n                elementOffsetLeft = element.offset().left,\r\n                leftPos;\r\n\r\n                if (evt.type == \"click\") {\r\n                    hideLastInfotip();\r\n                    hideOnDocHover.value = false;\r\n                    _this.addClass('isInfotipVisible');\r\n                    _lastOpenInfotip.target = _this;\r\n                    _lastOpenInfotip.infotip = popover_container;\r\n                    _lastOpenInfotip._ev = hideOnDocHover;\r\n                };\r\n\r\n                if (mode == \"canvas\") {\r\n                    elementOffsetTop = 100;\r\n                    elementOffsetLeft = 100;\r\n                    parent_height = 100;\r\n                }\r\n\r\n                //move the popover container to the bottom of the directive element\r\n                popover_container.css(\"top\", parent_height)//.style.top = parent_height + 'px';\r\n                parent_width = _this.outerWidth();\r\n\r\n                //'mouseover' mode\r\n                if (popover.hasClass('hide-popover-element') && attrs.message != '') {\r\n                    popover.removeClass('hide-popover-element');\r\n                    triangle.removeClass('hide-popover-element');\r\n                }\r\n\r\n                //if the template is supplied instead of templateUrl, set the popover innerHTML to the string passed in the 'template' attribute\r\n                if (attrs.message) {\r\n                    var templateElement = _this.find('.infotip-popover-template');\r\n                    templateElement.html(attrs.message);\r\n                }\r\n\r\n                var setDynamicInfotipPosition = function (position) {\r\n                    _this.find('.' + scope.triangleClass).removeClass(scope.triangleClass);\r\n                    triangle.removeClass(scope.triangleClass);\r\n                    attrs.position = position;\r\n                    scope.triangleClass = getTriangleClass();\r\n                    triangle.addClass(scope.triangleClass);\r\n                }\r\n\r\n                attrs.position = attrs.position === '' || attrs.position === undefined ? 'top' : attrs.position;\r\n\r\n                //function to set dynamic position for popover and triangle\r\n                var getDyanamicPositions = function () {\r\n                    var popoverOffset = popover.offset(),\r\n                                        bodyScrolled = $(\"body\").scrollTop() || $(\"html\").scrollTop();\r\n\r\n                    if (popoverOffset.left + popover.width() > $(window).width()) {\r\n                        leftPos = true;\r\n                        setDynamicInfotipPosition('left');\r\n                    } else if (popoverOffset.left < (0 || 10)) {\r\n                        setDynamicInfotipPosition('right');\r\n                    } else if (popover[0].getBoundingClientRect().top < 0) {\r\n                        setDynamicInfotipPosition('bottom');\r\n                    } else if ((popover[0].getBoundingClientRect().top + popover.height()) >= $(window).height()) {\r\n                        setDynamicInfotipPosition('top');\r\n                    } \r\n                };\r\n\r\n                //check position and calculate position for appending popover and triangle\r\n                var setInfotipPosition = function () {\r\n                    popover_height = popover.outerHeight();\r\n                    popover_width = popover.outerWidth();\r\n\r\n                    if (mode == \"canvas\") {\r\n                        popover_height = 100;\r\n                        popover_width = 100;\r\n                        if (infotipElement.attr(\"interesect\")) {\r\n                            var intersect = JSON.parse(infotipElement.attr(\"interesect\")),\r\n                                templateElement;\r\n\r\n                            popover.css({\r\n                                top: (intersect.y - triangle_height - 100),\r\n                                left: (intersect.x)\r\n                            });\r\n                            triangle.css({\r\n                                top: (intersect.y - triangle_height - 100),\r\n                                left: (intersect.x - triangle_rect_div_side)\r\n                            });\r\n\r\n                        }\r\n                        templateElement = _this.find('.infotip-popover-template');\r\n                        templateElement.html(infotipElement.attr(\"message\"));\r\n                        return;\r\n                    }\r\n\r\n                    switch (attrs.position) {\r\n                        case 'top':\r\n                            popover.css({\r\n                                top: (-parent_height - popover_height - triangle_height),\r\n                                left: ((parent_width - popover_width) / 2)\r\n                            });\r\n                            triangle.css({\r\n                                top: (-parent_height - triangle_height),\r\n                                left: ((parent_width - triangle_rect_div_side) / 2)\r\n                            });\r\n                            break;\r\n\r\n                        case 'bottom':\r\n                            popover.css({\r\n                                top: triangle_height,\r\n                                left: ((parent_width - popover_width) / 2)\r\n                            });\r\n                            triangle.css({\r\n                                top: -(triangle_rect_div_side - triangle_height),\r\n                                left: ((parent_width - triangle_rect_div_side) / 2)\r\n                            });\r\n                            break;\r\n\r\n                        case 'right':\r\n                            popover.css({\r\n                                top: ((parent_height - popover_height) / 2 - parent_height),\r\n                                left: parent_width + triangle_height\r\n                            });\r\n                            triangle.css({\r\n                                top: ((parent_height - triangle_rect_div_side) / 2 - parent_height),\r\n                                left: (parent_width - (triangle_rect_div_side - triangle_height))\r\n                            });\r\n                            break;\r\n\r\n                        case 'left':\r\n                            if (leftPos) {\r\n                                popover.css({ left: -(popover_width + triangle_div_side) })\r\n                            }\r\n                            popover.css({\r\n                                top: ((parent_height - popover_height) / 2 - parent_height),\r\n                                right: triangle_height\r\n                            });\r\n                            triangle.css({\r\n                                top: ((parent_height - triangle_rect_div_side) / 2 - parent_height),\r\n                                left: -triangle_height\r\n                            });\r\n                            if (attrs.customStyle == 'true') {\r\n                                popover.css({ left: -(popover_width + triangle_div_side - 5) });\r\n                                triangle.css({\r\n                                    top: ((parent_height - triangle_rect_div_side) / 2 - parent_height + 5),\r\n                                });\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                //Append infotip to body only when isFixed = 'true'\r\n                var appendInfotipToBody = function () {\r\n                    if (attrs.isFixed == 'true') {\r\n                        if (!popover_container.data('appended')) {\r\n                            angular.element('body').append(popover_container.data('appended', true));\r\n                        }\r\n                        if (attrs.customStyle == 'true') {\r\n                            popover_container.addClass('fullWidthInfo');\r\n                        }\r\n                        if (attrs.showFullTip == 'true') {\r\n                            popover_container.addClass('showFullTip');\r\n                        }\r\n                        var templateElementBody = popover_container.find('.infotip-popover-template');\r\n                        templateElementBody.html(attrs.message);\r\n                        popover_container.css({ 'top': elementOffsetTop + 'px', 'left': elementOffsetLeft + 'px' });\r\n                    }\r\n                }\r\n\r\n                setInfotipPosition();\r\n                appendInfotipToBody();\r\n                getDyanamicPositions();\r\n                setInfotipPosition();\r\n                appendInfotipToBody();\r\n            });\r\n        },\r\n        templateUrl: 'shared/directives/uiElements/smartInfotip/smartInfotipTemplate.html'\r\n    }\r\n}]);","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartList', ['$parse', '$window', 'commonUtilities', function ($parse, $window, commonUtilities) {\r\n        return {\r\n            restrict: 'AE',\n            replace: false,\n            scope: true,\n            link: function (scope, element, attrs) {\r\n                scope.styleClass = 'collection';\n                scope.itemClass = 'collection-item';\n                // evaluating callback for list\n                var clickCallback = $parse(attrs.clickCallback);\n\n                attrs.$observe('selectiveDisplayConfig', function (displayConfig) {\r\n                    if (displayConfig) {\r\n                        scope.listDisplayConfig = scope.$eval(displayConfig);\r\n                    } else {\r\n                        scope.listDisplayConfig = { \"showIcon\": true, \"showAction\": false, \"importantAttribLimit\": 5 };\r\n                    }\r\n\r\n                });\n\n                //Loacal list Click handler\n                scope.listClickHandler = function (item) {\r\n                    if (angular.isFunction(clickCallback)) {\r\n                        clickCallback(scope, { e: item });\r\n                    }\r\n                };\n\n                attrs.$observe(\"height\", function (value) {\r\n                    if (value) {\r\n                        scope.listHeight = value;\r\n                    }\r\n                });\n\n                attrs.$observe('model', function (value) {\r\n                    if (value) {\r\n                        scope.dataModel = scope.$eval(value);\r\n                    }\r\n                });\n\n\n                attrs.$observe('styleClass', function (value) {\r\n                    scope.styleClass = value;\r\n                });\n\n                attrs.$observe('itemClass', function (value) {\r\n                    scope.itemClass = value;\r\n                });\n\n                attrs.$observe('template', function (value) {\r\n                    scope.template = value;\r\n                });\n                var lazyLoadingCallback = $parse(attrs.lazyLoadCallback);\n                var backToTopCallback = $parse(attrs.backToTopCallback);\n                var scrolledCallback = $parse(attrs.scrollInProgress);\n\n                scope.scrollEndCallback = function () {\r\n                    if (angular.isFunction(lazyLoadingCallback)) {\r\n                        lazyLoadingCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.scrollToTopCallback = function () {\r\n                    if (angular.isFunction(backToTopCallback)) {\r\n                        backToTopCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.scrollInProgress = function () {\r\n                    if (angular.isFunction(scrolledCallback)) {\r\n                        scrolledCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.actionElementID = commonUtilities.uniqueIDGenerator;\r\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartList/smartListTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartListLookup', ['$rootScope', '$timeout', 'ScrollTo', 'lookup', 'debouncer', function ($rootScope, $timeout, ScrollTo, lookup, debouncer) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                callAddNew: '&',\r\n                lookupOpen: '&',\r\n                lookupHide: '&',\r\n                searchtextKeyUp: '&',\r\n                readonly: '@',\r\n                displayformat: '@',\r\n                multiselect: '@',\r\n                addnew: '@',\r\n                titleofmodel: '@',\r\n                selecttypeoption: '='\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                var multiselect = (scope.multiselect == undefined || scope.multiselect == null) ? false : scope.multiselect == \"true\" ? true : false;\r\n                var addnew = (scope.addnew == undefined || scope.addnew == null) ? false : scope.addnew == \"true\" ? true : false;\r\n                //var readonly = (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false;\r\n                var formatedArray = eval(scope.displayformat);\r\n                scope.valuetoshow = [\"\"];\r\n                scope.titleofmodel = (scope.titleofmodel == undefined || scope.titleofmodel == null) ? 'Title Of Model' : scope.titleofmodel;\r\n                scope.toolTip = \"\";\r\n                var isInfoTipEnable = attrs.showInfoTip == 'true' ? true : false,\r\n                    checkInfoToolTip = function () {\r\n                        var infotipData = scope.ngModel;\r\n                        \r\n\r\n                        if (isInfoTipEnable) {\r\n                            scope.toolTip = _.pluck(scope.ngModel, \"name\").join('</br>');\r\n                        } \r\n                    };\r\n\r\n                function generateName(obj) {\r\n                    var label = \"\",\r\n                        formattedLen = formatedArray.length;\r\n                    for (var j = 0; j < formattedLen; j++) {\r\n                        if (obj.hasOwnProperty(formatedArray[j])) {\r\n                            label = label + \" \" + obj[formatedArray[j]];\r\n                        }\r\n                    }\r\n                    return label;\r\n                }\r\n\r\n               var deregisterWatchModel = scope.$watch(\"ngModel\", function (newVal) {\r\n                    scope.valuetoshow = [\"\"];\r\n                    if (multiselect) {\r\n                        if (angular.isDefined(newVal)) {\r\n                            if (newVal.length > 0) {\r\n                                scope.valuetoshow = [generateName(newVal[0])];\r\n                                var totalEl = newVal.length;\r\n                                if (totalEl > 1) {\r\n                                    scope.valuetoshow.push(\"+\" + (totalEl - 1) + \" More\");\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        scope.valuetoshow = [generateName(newVal)];\r\n                    }\r\n                    if (scope.valuetoshow[0] == \"\") {\r\n                        scope.isActive = false;\r\n                    } else {\r\n                        scope.isActive = true;\r\n                    }\r\n                    checkInfoToolTip();\r\n                });\r\n\r\n                scope.openLookup = function () {\r\n                    debouncer.add(function () {\r\n                        if (scope.readonly === 'true' && !scope.valuetoshow[1]) return false;\r\n                        if ($.isFunction(scope.lookupOpen)) {\r\n                            scope.lookupOpen();\r\n                        }\r\n                        var lookupConfig = {\r\n                            modelData: scope.ngModel,\r\n                            config: {\r\n                                mutliselect: multiselect,\r\n                                displayProperties: formatedArray,\r\n                                options: scope.options,\r\n                                addnew: addnew,\r\n                                isMandatory: scope.isMandatory,\r\n                                onKeyUp: attrs.searchtextKeyUp ? scope.searchtextKeyUp : '',\r\n                                titleOfModel: scope.titleofmodel,\r\n                                selectTypeOption: scope.selecttypeoption,\r\n                                readonly: (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false\r\n                            }\r\n                        }\r\n                        var cancelTimer = $timeout(function () {\r\n                            lookup.open(lookupConfig, function (response) {\r\n\r\n                                if (response.addnew) {\r\n                                    if ($.isFunction(scope.callAddNew)) {\r\n                                        scope.callAddNew();\r\n                                    }\r\n                                }\r\n                                scope.ngModel = response.result;\r\n                                scope.defaultselectiontext = response.defaultSelectionText;\r\n                                scope.selecttypeoption = response.selectTypeOption;\r\n                                if ($.isFunction(scope.lookupHide)) {\r\n                                    scope.lookupHide({ data: response });\r\n                                }\r\n                            });\r\n                            $timeout.cancel(cancelTimer);\r\n                            cancelTimer = null;\r\n                        });\r\n                    }, 300);\r\n                }\r\n\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                scope.$on('$destroy', function () {\r\n                    deregisterWatchModel();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartListLookup/smartListLookupTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('lookup', ['$rootScope', function ($rootScope) {\r\n        var Obj = {};\r\n        Obj.onCallback = undefined;\r\n        Obj.on = function (callback) {\r\n            Obj.onCallback = callback;\r\n        };\r\n\r\n        Obj.open = function (config, callback) {\r\n            this.config = config;\r\n            this.broadcastItem();\r\n            this.resultCallBack = function (result) {\r\n                callback(result);\r\n            };\r\n        };\r\n        Obj.optionUpdate = function (option) {\r\n            if (typeof this.config != 'undefined') {\r\n                this.config.config.options = option;\r\n            }\r\n        };\r\n        Obj.getConfig = function () {\r\n            return this.config;\r\n        };\r\n        Obj.setTempModel = function (arg) {\r\n            this.tempModel = arg;\r\n        };\r\n        Obj.getTempModel = function () {\r\n            return this.tempModel;\r\n        };\r\n        Obj.onScrollEnd = function (callback) {\r\n            this.onScrollEndCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.onScrollTop = function (callback) {\r\n            this.onScrollTopCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.onScrollInProgress = function (callback) {\r\n            this.onScrollInProgressCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.broadcastItem = function () {\r\n            angular.isFunction(Obj.onCallback) && Obj.onCallback();\r\n        };\r\n        return Obj;\r\n    }]);\r\n\r\n    var countForTheProprty = 0;\r\n    angular.module('SMART2').directive('smartLookup', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', function ($rootScope, $timeout, $translate, ScrollTo, lookup) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.searchText = { title: \"\" };\r\n                scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                function isObjectEquals(obj1, obj2) {\r\n                    var checkObj2 = function () {\r\n                        for (var i in obj2) { }\r\n                        return i == undefined ? false : true;\r\n                    }\r\n                    if (obj2 == '' || obj2 == null || checkObj2() === false) {\r\n                        return false;\r\n                    }\r\n                    for (var i in obj2) {\r\n                        if (obj2.hasOwnProperty(i)) {\r\n                            if (!obj1.hasOwnProperty(i)) return false;\r\n                            if (obj2[i] != obj1[i]) return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                function containsObject(obj, list, catalogObj) {\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        if (catalogObj) {\r\n                            if (obj.UserId == list[i]) {\r\n                                return true;\r\n                            };\r\n                        } else {\r\n                            if (isObjectEquals(obj, list[i])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                scope.smartScrollEnd = function () {\r\n                    if (angular.isFunction(lookup.onScrollEndCall)) {\r\n                        lookup.onScrollEndCall();\r\n                    };\r\n                    $timeout(function () {\r\n                        if (scope.isLazyLoadingEnabled && scope.limitToCount <= scope.options.length)\r\n                            scope.limitToCount = scope.limitToCount + 35;\r\n                    });\r\n                };\r\n                scope.smartScrollTop = function () {\r\n                    if (angular.isFunction(lookup.onScrollTopCall)) {\r\n                        lookup.onScrollTopCall();\r\n                    };\r\n                };\r\n                scope.smartScrollInProgress = function () {\r\n                    if (angular.isFunction(lookup.onScrollInProgressCall)) {\r\n                        lookup.onScrollInProgressCall();\r\n                    };\r\n                };\r\n                scope.searchText = { title: \"\" };\r\n                scope.selectdCount = 0;\r\n                scope.model = [];\r\n                scope.options = [];\r\n                scope.displayProperties = [\"name\"];\r\n                scope.selectTypeOptionWith = '';\r\n                scope.propKey = \"\";\r\n                countForTheProprty++;\r\n                function generateName(obj) {\r\n                    var label = \"\";\r\n                    if (scope.displayProperties.length == 1) {\r\n                        label = obj[scope.displayProperties[0]];\r\n                    }\r\n                    else {\r\n                        for (var j = 0; j < scope.displayProperties.length; j++) {\r\n                            if (scope.propSeparation !== undefined && j !== scope.displayProperties.length - 1) {\r\n                               label = label + \" \" + obj[scope.displayProperties[j]] + \" \" + scope.propSeparation;\r\n                            }\r\n                            else { \r\n                                label = label + \" \" + obj[scope.displayProperties[j]];\r\n                            }\r\n                        }\r\n                    }\r\n                    return label;\r\n              \r\n                }\r\n                var stopInit = false;\r\n                function initialize() {\r\n                    //migrate two array with flag\r\n                    scope.propKey = \"counterProp\" + countForTheProprty;\r\n                    if (scope.options == undefined || scope.config.options == undefined) {\r\n                        scope.options = [];\r\n                    } else {                      \r\n                            scope.options = scope.config.options;                        \r\n                    }\r\n                    if (scope.multiple) {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!scope.options[i].hasOwnProperty(\"ischecked\") && !stopInit) {\r\n                                if (containsObject(scope.options[i], scope.model, scope.isObjectCompareCatalog)) {\r\n                                    scope.options[i].ischecked = true;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                } else {\r\n                                    scope.options[i].ischecked = false;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                }\r\n                                if (scope.descriptionKey) {\r\n                                    scope.options[i].description = scope.options[i][scope.descriptionKey];\r\n                                }\r\n                            }                           \r\n                        }\r\n                        if (scope.minMultiselect) {\r\n                            checkSelectedItems();\r\n                        }\r\n                    } else {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!stopInit) {\r\n                                if (isObjectEquals(scope.options[i], scope.model)) {\r\n                                    scope.options[i].ischecked = true;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                } else {\r\n                                    scope.options[i].ischecked = false;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                }\r\n                                if (scope.descriptionKey) {\r\n                                    scope.options[i].description = scope.options[i][scope.descriptionKey];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.limitToCount = scope.isLazyLoadingEnabled ? 35 : scope.options.length;\r\n                };\r\n                scope.searchTextKeyUpFn = function (e) {\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: { text: e.target.value, type: \"textfield\", \"e\": e } });\r\n                    }\r\n\r\n                    if (e.keyCode == 13) {\r\n                        element.find(\"#lookup-content-wrpper .scroll-content\").scrollTop(0);\r\n                        if (scope.clearModelOnEnter) {\r\n                            scope.model = [];\r\n                        }\r\n                    }\r\n                    scope.cancelTitle = e.target.value == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                }\r\n\r\n                var regEx = new RegExp(\"\", \"ig\");\r\n                //scope.filterKeyFn = function (searchtxt, filterKey, stopFilterOnKey) {\r\n                //    return function (item) {\r\n                //        var r;\r\n                //        if (filterKey && !stopFilterOnKey && searchtxt != \"\") {\r\n                //            regEx.compile(searchtxt, \"ig\");\r\n                //            for (var f = 0; f < filterKey.length; f++) {\r\n                //                if (!searchtxt || item[filterKey[f]].toString().search(regEx) > -1) {\r\n                //                    r = true;\r\n                //                    break;\r\n                //                } else {\r\n                //                    r = false\r\n                //                }\r\n                //            }\r\n                //        } else {\r\n                //            r = true;\r\n                //        }\r\n                //        return r;\r\n                //    }\r\n                //}\r\n                function scrollbarReload() {\r\n                    if (scope.scrollAlwaysTopOnload == true && scope.scrollReload == false) {\r\n                        scope.scrollReload = true\r\n                    } else if (scope.scrollAlwaysTopOnload == true && scope.scrollReload == true) {\r\n                        scope.scrollReload = false\r\n                    }\r\n                };\r\n                scope.triggerFlag = false;\r\n                var returnObj = {};\r\n                lookup.on(function () {\r\n                    scope.config = lookup.config.config;\r\n                    scope.minMultiselect = scope.config.minMultiselect;\r\n                    scope.label = scope.config.label;\r\n                    scope.isSearchOpen = false;\r\n                    scope.multiple = false;\r\n                    scope.addnew = false;\r\n                    scope.readonly = false;\r\n                    scope.multiple = typeof (scope.config.mutliselect) == \"undefined\" ? false : scope.config.mutliselect;\r\n                    scope.addnew = typeof (scope.config.addnew) == \"undefined\" ? false : scope.config.addnew;\r\n                    scope.readonly = typeof (scope.config.readonly) == \"undefined\" ? false : scope.config.readonly;\r\n                    scope.titleOfModel = typeof (scope.config.titleOfModel) === \"undefined\" ? $translate.instant('titleOfModel') : scope.config.titleOfModel;\r\n                \t/*  Default Selection scope variable */\r\n                    scope.config.defaultSelectOption = typeof (scope.config.defaultSelectOption) === \"undefined\" ? false : scope.config.defaultSelectOption;\r\n                    scope.config.defaultSelectionText = typeof (scope.config.defaultSelectionText) === \"undefined\" ? \"\" : scope.config.defaultSelectionText;\r\n                    scope.config.selectTypeOption = typeof (scope.config.selectTypeOption) === \"undefined\" ? null : scope.config.selectTypeOption;\r\n                    scope.selectiontext = angular.copy(scope.config.selectTypeOption);    \r\n                    scope.model = lookup.config.modelData;\r\n                    scope.isLazyLoadingEnabled = scope.config.isLazyLoadingEnabled;\r\n                    \r\n                    if (angular.isDefined(scope.model) && (scope.model != \"\" || angular.equals(scope.model, {}) )) {\r\n                        if (scope.multiple) {\r\n                            scope.selectdCount = scope.model.length || 0;\r\n                        }\r\n                        else if (scope.model.hasOwnProperty('name') || scope.model.hasOwnProperty('value') || scope.model.hasOwnProperty('id')) {\r\n                            scope.selectdCount = 1;\r\n                        }\r\n                    } else {\r\n                        scope.selectdCount = 0;\r\n                    }\r\n                    scope.options = scope.config.options;\r\n                    scope.limitToCount = scope.isLazyLoadingEnabled ? 35 : scope.options.length;\r\n                    scope.displayProperties = scope.config.displayProperties.length > 0 ? scope.config.displayProperties : scope.displayProperties;\r\n                    scope.descriptionKey = scope.config.descriptionKey;\r\n                    scope.propSeparation = scope.config.propSeparation;\r\n                    scope.scrollAlwaysTopOnload = (scope.config.scrollAlwaysTopOnload === undefined) ? false : scope.config.scrollAlwaysTopOnload;\r\n                    scope.scrollReload = scope.scrollAlwaysTopOnload ? false : true;\r\n                    scope.selectTypeOptionWith = scope.config.selectTypeOptionWith ? scope.config.selectTypeOptionWith : scope.selectTypeOptionWith;\r\n                    scope.searchFilterKey = scope.config.searchFilterKey; // added for filter on key basis\r\n                    scope.stopFilterOnKey = scope.config.stopFilterOnKey; // added for stop filtering on keydown\r\n                    scope.hideSelectedCount = scope.config.hideSelectedCount;\r\n                    scope.isObjectCompareCatalog = scope.config.isObjectCompareCatalog;\r\n                    scope.clearModelOnEnter = scope.config.clearModelOnEnter;\r\n                    initialize();\r\n                    scope.triggerFlag = true;\r\n                    scrollbarReload();\r\n                    $timeout(function () {\r\n                    element.find('.lookupPopupContent input[checked=\"checked\"]').prop('checked', true);            \r\n                });\r\n                    scope.$watch(function () {\r\n                        return lookup.config.config.options;\r\n                    },\r\n                    function (newVal, oldVal) {\r\n                        initialize();\r\n                    }, true);\r\n                    returnObj.addnew = false;\r\n                    returnObj.result = scope.model;\r\n                    returnObj.btnType = '';\r\n                    returnObj.defaultSelectionText = scope.config.defaultSelectionText.trim(),\r\n                    returnObj.selectTypeOption = scope.config.selectTypeOption;\r\n                    returnObj.errorModel = scope.config.errorModel;\r\n                    scope.defaultError = false;\r\n\r\n                    if (scope.selectdCount == 0 && scope.$eval(scope.config.isMandatory))\r\n                    \tscope.itemSelected = false;\r\n                    else\r\n                        scope.itemSelected = true;\r\n\r\n                    scope.isLimitmultiselect = scope.minMultiselect ? scope.minMultiselect.event : false; scope.minMultiselect\r\n\r\n                });\r\n\r\n                scope.searchToggle = function () {\r\n                    if (scope.isSearchOpen == false) {\r\n                        scope.isSearchOpen = true;\r\n                        $timeout(function () {\r\n                            if ($(\"#searchTextbox\").find(\"input\").length) {\r\n                                $(\"#searchTextbox\").find(\"input\").focus();\r\n                            } else {\r\n                                $(\"#searchTextbox\").focus();\r\n                            }\r\n                        });\r\n                    }\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: { text: scope.searchText.title, type: \"search\" } });\r\n                    }\r\n                    scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                };\r\n                scope.closeSearch = function () {\r\n                    if (scope.searchText.title != \"\") {\r\n                        scope.searchText.title = \"\";\r\n                    } else {\r\n                        scope.isSearchOpen = false;\r\n                        $(\"#btnShowSearch\").focus();\r\n                    }\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: {text: scope.searchText.title, type : \"close\" } });\r\n                    }\r\n                    scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                };\r\n\r\n            \t/*  triggers which default radio btn click */\r\n                scope.ondefaultSelectItem = function (obj) {\r\n                \tobj.ischecked = true;\r\n                \tscope.onChangeItem(obj);\r\n                \tscope.defaultError = false;\r\n                \tscope.config.errorModel = '';\r\n                };\r\n                var checkSelectedItems = function () {\r\n                    if (scope.selectdCount >= parseInt(scope.minMultiselect.value)) {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!scope.options[i].ischecked) {\r\n                                scope.options[i].isdisable = true;\r\n                            } else {\r\n                                scope.options[i].isdisable = false;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            scope.options[i].isdisable = false;\r\n                        }\r\n                    }\r\n                }\r\n                scope.optionUnSelected = [];\r\n                scope.onChangeItem = function (obj) {\r\n                    if (scope.multiple) {\r\n                \t\tif (obj.ischecked) {\r\n                \t\t\tscope.selectdCount++;\r\n                \t\t} else {\r\n                \t\t    scope.selectdCount--;\r\n                \t\t    scope.optionUnSelected.push(obj);\r\n\r\n                \t\t    if (scope.$eval(scope.config.isDefaultMandatory) && obj[scope.propKey] === scope.config.defaultSelectionText) {\r\n                \t\t        scope.config.defaultSelectionText = ''\r\n                \t\t    }\r\n                \t\t}\r\n                \t\tif (scope.selectdCount == 0 && scope.$eval(scope.config.isMandatory)) {\r\n                \t\t\tscope.itemSelected = false;\r\n                \t\t\tscope.config.errorModel = $translate.instant(\"selectValueErrMsg\");\r\n                \t\t}\r\n                \t\telse {\r\n                \t\t\tscope.itemSelected = true;\r\n                \t\t\tscope.config.errorModel = '';\r\n                \t\t}\r\n                \t\tif (scope.minMultiselect && scope.minMultiselect.event) {\r\n                \t\t    checkSelectedItems();\r\n                \t\t}\r\n                \t} else {\r\n                \t\tscope.model = obj;\r\n                \t\tscope.itemSelected = true;\r\n                \t\tscope.config.errorModel = '';\r\n                \t\tinitialize();\r\n                \t}\r\n                };\r\n                \r\n                function cleanData() {\r\n                \tstopInit = true;\r\n                \tfor (var i = 0; i < scope.options.length; i++) {\r\n                \t\tdelete scope.options[i].ischecked;\r\n                \t\tdelete scope.options[i][scope.propKey];\r\n                \t}\r\n                \t$timeout(function () {\r\n                \t\tstopInit = false;\r\n                \t}, 500);\r\n                };\r\n                scope.defaultError = false;\r\n\r\n                scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n\r\n                scope.selectionCancel = function () {\r\n                    returnObj.btnType = 'cancel';\r\n                }\r\n                scope.selectionDone = function () {\r\n                    returnObj.UnSelectedResult = [];\r\n                \tif (!scope.itemSelected && scope.$eval(scope.config.isMandatory)) {\r\n                \t\treturn;\r\n                \t}\r\n                \tif (scope.$eval(scope.config.isDefaultMandatory) && scope.config.defaultSelectionText == '') {\r\n                \t\tscope.defaultError = true;\r\n                \t\tscope.config.errorModel = $translate.instant(\"markPaymentErrMsg\");\r\n                \t\treturn;\r\n                \t}\r\n                    if (scope.multiple) {\r\n                        var result = [];\r\n                        stopInit = true;\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            delete scope.options[i][scope.propKey];\r\n                            if (scope.options[i].ischecked) {\r\n                            \tdelete scope.options[i].ischecked;\r\n\r\n                            \t/*  Default Selection check point */\r\n                                if (scope.config.defaultSelectionText.trim() === scope.options[i].name) {\r\n                                \tresult.unshift(scope.options[i]);\r\n                                } else {\r\n                                \tresult.push(scope.options[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                        cleanData();\r\n                        $timeout(function () {\r\n                            stopInit = false;\r\n                        }, 500);\r\n                    }\r\n                    else {\r\n                        stopInit = true;\r\n                        delete scope.model.ischecked;\r\n                        delete scope.model[scope.propKey];\r\n                        result = scope.model;\r\n                        if (scope.config.selectTypeOption != null) {\r\n                            scope.config.selectTypeOption.selectiontext = scope.selectiontext.selectiontext;\r\n                        }\r\n                        cleanData();\r\n                        $timeout(function () {\r\n                            stopInit = false;\r\n                        }, 500)\r\n                    }\r\n\r\n                    returnObj.result = result;\r\n                    returnObj.UnSelectedResult = scope.optionUnSelected;\r\n                    scope.optionUnSelected = [];\r\n\r\n                    returnObj.btnType = 'save';\r\n                    returnObj.defaultSelectionText = scope.config.defaultSelectionText.trim();\r\n                    returnObj.selectTypeOption = scope.config.selectTypeOption;\r\n                    returnObj.errorModel = scope.config.errorModel;\r\n                    scope.callbackOnHide();\r\n                }\r\n                scope.addNew = function () {\r\n                    cleanData();\r\n                    returnObj.addnew = true;\r\n                    scope.triggerFlag = false;\r\n                    scrollbarReload();\r\n                }\r\n\r\n                //Popup hide/show flag\r\n                scope.callbackOnHide = function (e) {\r\n                    scope.triggerFlag = false;\r\n                    scrollbarReload();\r\n                    scope.searchText.title = \"\";\r\n                    if (scope.isLazyLoadingEnabled)\r\n                    scope.limitToCount = 35;\r\n                    scope.isSearchOpen = false;\r\n                    //cleanData() comment this and add in manually due to avoid timeout checkbox issue;\r\n                    stopInit = true;\r\n                    for (var i = 0; i < scope.options.length; i++) {\r\n                        delete scope.options[i].ischecked;\r\n                        delete scope.options[i][scope.propKey];\r\n                    }\r\n                    $timeout(function () {\r\n                        stopInit = false;\r\n                    });\r\n\r\n                    /*  Return Default Selection Object */\r\n                    lookup.resultCallBack(returnObj);\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartLookup/smartLookupTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    var multiSelectId = 0;\r\n    angular.module('SMART2').directive('smartMultiselect', ['$timeout', '$translate', 'RuleEngine', function ($timeout, $translate, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModel: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                onChange: '&',\r\n                onSelect: '&',\r\n                onBlur: '&',\r\n                disable: '@',\r\n                readonly: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                removable: '@',\r\n                autocomplete: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var options, filterKeys;\r\n                scope.defaultText = \"\";\r\n                var disableBlurEvent = true;\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.multiSelectId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    multiSelectId += multiSelectId;\r\n                    scope.multiSelectId = 'multiselect-' + multiSelectId;\r\n                }\r\n                scope.labelForMultiSelectId = 'label-for-' + scope.multiSelectId;\r\n                scope.displayformat = scope.displayformat ? scope.displayformat : '{title}';\r\n                var modelConfig = scope.$watch('ngModel', function (newValue) {\r\n                    if (newValue) {\r\n                         scope.selectedOptions = newValue;\r\n                    }\r\n                   \r\n                });\r\n\r\n                scope.multiSelectFocus = function () {\r\n                    if (!scope.$eval(scope.disable) && !scope.$eval(scope.readonly))\r\n                        $(\"#\" + scope.multiSelectId).focus();\r\n                };\r\n\r\n                scope.setDisplayFormat = function (item) {\r\n                    var displayArray = scope.displayformat.substring(1, scope.displayformat.length - 1);\r\n                    displayArray = displayArray.replace(/  +/g, ' ');\r\n                    var valu = \"\";\r\n                    var arrayD = displayArray.split('} {'), arrDLen = arrayD.length;\r\n                    for (var i = 0; i < arrDLen; i++) {\r\n                        valu += item[arrayD[i]] + \" \";\r\n                    }\r\n                    return valu;\r\n                }\r\n                var currentSelectForDelete = scope.ngModel.length;\r\n\r\n             \r\n                scope.ngKeyDown = function (event) {\r\n\r\n                    var evntKeyCode = event.keyCode;\r\n                    if (evntKeyCode === 40 && event.target.value == '') {\r\n                        event.stopImmediatePropagation();\r\n                    }\r\n                    if (scope.ngModel.length > 0) {\r\n                        if ((evntKeyCode === 8 || evntKeyCode === 46) && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete >= scope.ngModel.length) {\r\n                                currentSelectForDelete = scope.ngModel.length - 1;\r\n                                if ((scope.ngModel[currentSelectForDelete].selectForDelete) === false) {\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = true;\r\n                                    currentSelectForDelete = scope.ngModel.length - 1;\r\n                                }\r\n                                else {\r\n                                    scope.ngModel.splice(currentSelectForDelete, 1);\r\n                                     currentSelectForDelete = scope.ngModel.length;\r\n\r\n                                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                                    if (!isInvalidId) {\r\n                                        scope.invalidEmailId = false;\r\n                                        scope.validate = false;\r\n                                        scope.errorMessage = null;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if ((scope.ngModel[currentSelectForDelete].selectForDelete) === true) {\r\n                                scope.ngModel.splice(currentSelectForDelete, 1);\r\n                               \r\n                                currentSelectForDelete = scope.ngModel.length;\r\n                            }\r\n                        }\r\n                        else if (evntKeyCode === 37 && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete > 0) {\r\n                                scope.ngModel[currentSelectForDelete - 1].selectForDelete = true;\r\n\r\n                                if (currentSelectForDelete < scope.ngModel.length)\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n\r\n                                currentSelectForDelete--;\r\n                            }\r\n                        }\r\n                        else if (evntKeyCode === 39 && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete < scope.ngModel.length -1) {\r\n                                scope.ngModel[currentSelectForDelete + 1].selectForDelete = true;\r\n\r\n                                if (currentSelectForDelete >= 0)\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n\r\n                                currentSelectForDelete++;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (currentSelectForDelete < scope.ngModel.length) {\r\n                                scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n                            } else {\r\n                                var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                                if (isInvalidId) {\r\n                                    scope.invalidEmailId = true;\r\n                                } else {\r\n                                    scope.invalidEmailId = false;\r\n                                    scope.validate = false;\r\n                                    scope.errorMessage = null;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        scope.invalidEmailId = false;\r\n                        scope.validate = false;\r\n                        scope.errorMessage = null;\r\n                    }\r\n                };\r\n\r\n                var checkEmailValidation = function (event, onBlur) {\r\n                    if (event.keyCode == 13 || event.keyCode == 9 || onBlur) {\r\n\r\n                        var currentTextValue = element.find('.multiselect-input').val().split(';'),\r\n                            pattern = /^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i;\r\n\r\n                        var filteredArray = [],\r\n                            invalidEmailArray = []; \r\n                        angular.forEach(currentTextValue, function (item) {\r\n                            if (item) filteredArray.push(item.trim());\r\n                        });\r\n                        var filteredLen = filteredArray.length;\r\n\r\n                        for (var i = 0; i < filteredLen; i++) {\r\n                            var filterdItem = filteredArray[i];\r\n                            if (filterdItem != '') {\r\n                                var currentItem = { UserName: filterdItem, value: filterdItem };\r\n                                if (!pattern.test(filterdItem)) {\r\n                                    currentItem.isInvalid = true;\r\n                                    scope.invalidEmailId = true;\r\n                                    invalidEmailArray.push(currentItem);\r\n                                } else {\r\n                                    currentItem.isInvalid = false;\r\n                                    scope.invalidEmailId = false;\r\n                                }\r\n\r\n                                if (!currentItem.isInvalid) {\r\n                                    scope.ngModel.push(currentItem);\r\n                                    scope.setDisplayFormat(currentItem);\r\n                                    scope.defaultText = \"\";\r\n                                  var timeout = $timeout(function () {\r\n                                        scope.onSelect({\r\n                                            $event: {\r\n                                                data: currentItem\r\n                                            }\r\n                                           \r\n                                        });\r\n                                        currentSelectForDelete = scope.ngModel.length;\r\n                                        scope.validateRules();\r\n                                        disableBlurEvent = true;\r\n                                        $timeout.cancel(timeout);\r\n                                        timeout = null;\r\n                                  });\r\n\r\n                                }\r\n                                else {\r\n                                    scope.validateRules();\r\n                                }\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        var result = invalidEmailArray.map(function (item) { return item.UserName; });\r\n                        scope.defaultText = result.join(';');\r\n                        if (result.length > 0)\r\n                            scope.invalidEmailId = true;\r\n                        scope.validateRules();\r\n                    }\r\n                };\r\n\r\n              \r\n                scope.ngKeyUp = function (event, onBlur) {\r\n                    checkEmailValidation(event, onBlur);\r\n                    var evtTrgt = $(event.target), defaultWidth = 250;\r\n                    var timeIntClear =$timeout(function () {\r\n                        if (event.keyCode == 13 && evtTrgt.parent('.multiselect-chip-wrap').find('.multiselect-input').val().length == 0) {\r\n                             evtTrgt.width(defaultWidth);\r\n                        } else {\r\n                            var ele = evtTrgt.parent('.multiselect-chip-wrap').find('.multiselect-input');\r\n                            if (ele.val().length >= 32) {\r\n                                defaultWidth = ele.val().length;\r\n                                evtTrgt.width(defaultWidth * 10);\r\n                            } else {\r\n                                \r\n                                evtTrgt.width(defaultWidth);\r\n                            }\r\n                        }\r\n\r\n                        $timeout.cancel(timeIntClear);\r\n                        timeIntClear = null;\r\n                    });\r\n                };\r\n\r\n\r\n                scope.deleteSelected = function (elementIndex) {\r\n                    disableBlurEvent = false;\r\n                    scope.ngModel.splice(elementIndex, 1);                   \r\n                    $(\"#\" + scope.multiSelectId).focus();\r\n                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                    if (scope.ngModel.length === 0 || !isInvalidId) {\r\n                        scope.invalidEmailId = false;\r\n                        scope.validate = false;\r\n                        scope.errorMessage = null;\r\n                        return;\r\n                    }\r\n                };\r\n\r\n                var onvalidateConfig = scope.$watch('validate', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                scope.ngChange = function (e) {\r\n                    scope.onChange({\r\n                        $event: {\r\n                            data: angular.element('#' + scope.multiSelectId)\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scope.ngBlur = function (e) {\r\n                    function checkChipIsDeleted() {\r\n                        if (disableBlurEvent) {\r\n                            scope.ngKeyUp(e, true);\r\n                        }\r\n                        disableBlurEvent = true;\r\n                        $timeout.cancel(toutPromise);\r\n                        toutPromise = null;\r\n                    }\r\n                    //Timeout is being added to differentiate between blur and delete chip click event.  \r\n                    var toutPromise = $timeout(checkChipIsDeleted, 200);\r\n                    scope.onBlur({ $event: e });\r\n                };\r\n\r\n                scope.validateRules = function () {\r\n                    if (scope.readonly == 'true') {\r\n                        return;\r\n                    }\r\n\r\n                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                    if (scope.invalidEmailId || isInvalidId) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"invalidEmailErrMsg\");\r\n                        return;\r\n                    }\r\n\r\n                    if (scope.$eval(scope.isMandatory) && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined)) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                        return;\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false, rulesLen = rules.length;\r\n\r\n                        for (var i = 0; i < rulesLen; i++) {\r\n                            var rulesItem = rules[i];\r\n                            if (typeof rulesItem == 'object') {\r\n                                if (eval((rulesItem.rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rulesItem.error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    if (typeof scope.ngModel != 'object')\r\n                                        var data = scope.ngModel;\r\n                                    else\r\n                                        var data = scope.displayModel;\r\n\r\n                                    RuleEngine.isValid(rulesItem, function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    }, data);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                    filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                }\r\n                else {\r\n                    filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                }\r\n                var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n                var displayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n                function getFormattedData(data) {\r\n                    var dataLen = data.length;\r\n                    if (!data || dataLen == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < dataLen; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{'), parentSplitLen = parentSplit.length;\r\n                            for (var j = 0; j < parentSplitLen; j++) {\r\n                                var childSplit = parentSplit[j].split('}'), childSplitLen = childSplit.length;\r\n                                for (var k = 0; k < childSplitLen; k++) {\r\n                                    var childItem = childSplit[k];\r\n                                    if (childItem.indexOf('.') > 0 || data[i].hasOwnProperty(childItem)) {\r\n                                        str = str.replace(new RegExp(\"{\" + childItem + \"}\", \"ig\"), eval('data[i].' + childItem));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n           var optionsConfig =  scope.$watch('options', function (newOptions) {\r\n                    var selector = $('#' + scope.multiSelectId);\r\n                    try {\r\n                        if (!selector.devbridgeAutocomplete()) {\r\n                            selector.devbridgeAutocomplete({\r\n                                filterKeys: filterKeys,\r\n                                optionFormat: optionFormat,\r\n                                displayFormat: displayFormat,\r\n                                lookup: getFormattedData(newOptions),\r\n                                width: scope.width,\r\n                                onSelect: function (suggestion) {\r\n\r\n                                    scope.$evalAsync(function () {\r\n                                        scope.ngModel.push(suggestion);\r\n                                    });\r\n                                    $(this).focus();\r\n                                    scope.defaultText = \"\";\r\n                                    var interval = $timeout(function () {\r\n                                        scope.defaultText = \"\";\r\n                                        scope.onSelect({\r\n                                            $event: {\r\n                                                data: suggestion\r\n                                            }\r\n                                        });\r\n                                        currentSelectForDelete = scope.ngModel.length;\r\n                                        scope.validateRules();\r\n                                        $timeout.cancel(interval);\r\n                                        interval = null;\r\n                                    });\r\n                                    angular.element('.autocomplete-suggestions').hide();\r\n\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            selector.devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                });\r\n\r\n                /*\r\n\t\t\t\t * Destroy autocomplete on scope destroy\r\n\t\t\t\t */\r\n                scope.$on('$destroy', function () {\r\n                    if ($('#' + scope.multiSelectId).devbridgeAutocomplete()) {\r\n                        $('#' + scope.multiSelectId).devbridgeAutocomplete().dispose();\r\n                    }\r\n                    modelConfig();\r\n                    onvalidateConfig();\r\n                    optionsConfig();\r\n                });\r\n\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartMultiselect/smartMultiselectTemplate.html'\r\n        }\r\n    }]\r\n\t)\r\n})();","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Popup\r\n * @description This directive is useful for creating a popup.\r\n * \r\n * @attr {String} template-url\r\n *    Template url that is expected to appear as popup contents\r\n * @attr {Boolean} show\r\n *    Popup will toggle as soon as value of this attribute changes\r\n * @attr {String} modal-type\r\n *    Modal type. Possible values are 'large' or 'small'.\r\n * @attr {Boolean} dismissible\r\n *   If set to true, popup will not hide when clicked outside. Default value is true.\r\n * @attr {Function} on-hide\r\n *    Callback function when popup hides\r\n * \r\n * @example\r\n Controller:\r\n $scope.showPopup = false;\r\n $scope.onPopupHide = function() {\r\n      $scope.showPopup = false;\r\n };\r\nUsage:\r\n <smart-popup template-url=\"abc.html\" show=\"{{showPopup}}\" on-hide=\"onPopupHide()\"></smart-popup>\r\n <button ng-click=\"showPopup=true\">Click here</button>\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartPopup', ['$rootScope', '$parse', '$timeout', '$smartModal', '$focusOnField', function ($rootScope, $parse, $timeout, $smartModal, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: true,\r\n            controller: [\"$controller\", \"$scope\", \"$attrs\", \"$scoper\", function ($controller, $scope, $attrs, $scoper) {\r\n                var _scope = $scope,\r\n                    ctrl,\r\n                popupConfig = $scoper.getScope(_scope, $attrs.popupConfig);\r\n\r\n                if (popupConfig) {\r\n                    if (popupConfig.controller) {\r\n                        var launchObj = {\r\n                            $scope: _scope\r\n                        };\r\n                        if (popupConfig.resolve) {\r\n                            var val;\r\n                            angular.forEach(popupConfig.resolve, function (value, key) {\r\n                                if (typeof value == \"function\") {\r\n                                    val = value();\r\n                                } else {\r\n                                    val = value;\r\n                                }\r\n                                this[key] = val;\r\n                            }, launchObj);\r\n                        }\r\n                        ctrl = $controller(popupConfig.controller, launchObj);\r\n                        ctrl.$$smartModal = true;\r\n                    }\r\n                } else {\r\n                    ctrl = _scope;\r\n                };\r\n                return ctrl;\r\n            }],\r\n            link: function (scope, element, attrs, controller) {\r\n\r\n                var onHide = $parse(attrs.onHide),\r\n                    triggeredElement;\r\n                // Callback for complete popup close i.e this callback executes after popup animation over.\r\n                if (attrs.afterCompleteClosePopup) {\r\n                    var afterCompleteClosePopup = $parse(attrs.afterCompleteClosePopup);\r\n                }\r\n\r\n                var topPositionBeforeModalOpen = 0;\r\n\r\n                scope.isCancelButton = (attrs.cancelButton) ? scope.$eval(attrs.cancelButton) : false;\r\n\r\n                scope.headerUrl = attrs.headerUrl;\r\n                scope.contentUrl = attrs.contentUrl;\r\n                scope.footerUrl = attrs.footerUrl;\r\n                scope.templateUrl = attrs.templateUrl;\r\n                scope.modalType = attrs.type;\r\n                scope.isDraggable = attrs.isDraggable;\r\n\r\n                //Cleaning floating elements on drag\r\n                function cleanFloatingElements() {\r\n                    element.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                        var autoComplete = $(this).data().autocomplete;\r\n                        if (autoComplete && autoComplete.visible) {\r\n                            autoComplete.hide();\r\n                        }\r\n                    });\r\n                }\r\n                //End of cleaning floating elements on drag\r\n\r\n                if (scope.isDraggable) {\r\n                    angular.element(element).draggable({\r\n                        start: function () {\r\n                            cleanFloatingElements();\r\n                        },\r\n                        containment: \".is-popup-Draggable\"\r\n                    });\r\n                };\r\n\r\n                var tOut;\r\n                attrs.$observe('expandCollapse', function (value) {\r\n                    scope.expandCollapse = value;\r\n                    tOut = setTimeout(function () {\r\n\r\n                        angular.element(scope.expandCollapse).click(function () {\r\n                            var expandCollapse = angular.element(scope.expandCollapse),\r\n                                $modal = expandCollapse.closest('.modal'),\r\n                                $modalHeader = expandCollapse.closest('.modal .modal-header'),\r\n                                $leanOverlay = expandCollapse.parents('body').find('.lean-overlay');\r\n                            $modal.addClass('expand-css-trans');\r\n                            var innerTout1 = setTimeout(function () {\r\n                                $modalHeader.toggleClass('extra-nav-wrap expand-header expand-css-trans');\r\n                                clearTimeout(innerTout1);\r\n                                innerTout1 = null;\r\n                            }, 500);\r\n\r\n                            var innerTout2 = setTimeout(function () {\r\n                                $modal.removeClass('expand-css-trans');\r\n                                clearTimeout(innerTout2);\r\n                                innerTout2 = null;\r\n                            }, 200);\r\n\r\n                            $modal.toggleClass('expand-css');\r\n                            expandCollapse.parent('.modal-header').next().next('.modal-footer_new').find('.modal-close').click(function () {\r\n                                $modal.removeClass('expand-css');\r\n                                $modalHeader.removeClass('extra-nav-wrap expand-header expand-css-trans');\r\n                                $leanOverlay.css('display', 'block');\r\n                            });\r\n                            if ($modal.hasClass('expand-css')) {\r\n                                $leanOverlay.css('display', 'none');\r\n                                $modal.css('border-radius', '0');\r\n                            }\r\n                            else {\r\n                                $leanOverlay.css('display', 'block');\r\n                            }\r\n                        });\r\n                    }, 1000);\r\n                });\r\n\r\n\r\n                /*\r\n                 *  Unbind window keyup listener and assign tabindex back to .picker elements\r\n                 */\r\n                var reset = function () {\r\n                  //  $(window).off('keyup', onWindowKeyUp);\r\n                    angular.element('.picker').attr(\"tabindex\", 0);\r\n                    //COMMENTED: TWO-5672 impact   angular.element(document).scrollTop(topPositionBeforeModalOpen);\r\n                };\r\n\r\n\r\n                /*\r\n                 *  window on key up event listener\r\n                 */\r\n                //var onWindowKeyUp = function (e) {\r\n                //    if (angular.element(e.target).closest('.modal').length == 0 && e.keyCode == 9) {\r\n                //        angular.element(element.find(':focusable')[0]).focus();\r\n                //    }\r\n                //};\r\n\r\n\r\n                /*\r\n                 * Show pop up\r\n                 */\r\n                var $popup, onShow = attrs.$observe('show', function (value) {\r\n                    if (angular.isDefined(value)) {\r\n                        if (scope.$eval(value)) {\r\n                            triggeredElement = document.activeElement;\r\n                            angular.element(triggeredElement).addClass('currentPopupTriggerer');\r\n                            topPositionBeforeModalOpen = angular.element(document).scrollTop();\r\n                            angular.element(element).openModal({\r\n                                dismissible: scope.$eval(attrs.dismissible),\r\n                                beforeOpen: function () {\r\n                                    $popup = angular.element(element).data();\r\n                                    if (scope.isDraggable) {\r\n                                        angular.element('body').addClass('is-popup-Draggable');\r\n                                    }\r\n                                },\r\n                                complete: function () {\r\n                                    if (angular.isFunction(onHide)) {\r\n                                        scope.$apply(function () {\r\n                                            onHide(scope, { e: \"\" });\r\n                                        });\r\n                                    }\r\n                                    reset();\r\n\r\n                                    //  Check if popup is opened by uigrid-compatible element\r\n                                    if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                        //  Following event is listened inside uigrid-compatible dir\r\n                                        $rootScope.$emit(\"popupClosed\");\r\n                                        window.isPopupOpenedByUIGridCompatibleElement = undefined;\r\n                                    }\r\n\r\n                                    if (element.hasClass(\"noTransform\")) {\r\n                                        var toutpromise = setTimeout(function () {\r\n                                            element.css('top', 0).removeClass('noTransform');\r\n                                            clearTimeout(toutpromise);\r\n                                            toutpromise = null;\r\n                                        }, 100);\r\n                                    }\r\n                                },\r\n                                ready: function () {\r\n                                    //  Check if popup is opened by uigrid-compatible element\r\n                                    if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                        $rootScope.$emit(\"popupOpened\");\r\n                                    }\r\n                                    var cancelTOut = $timeout(function () {\r\n                                        if (scope.isDraggable) {\r\n                                            var $body = angular.element('body'),\r\n                                                $modalUiDragable = angular.element('.modal.ui-draggable');\r\n                                            var bodyHeight = $body.height() / 2,\r\n                                             modalHeight = $modalUiDragable.height() / 2,\r\n                                            bodyWidth = $body.width() / 2,\r\n                                            modalWidth = $modalUiDragable.width() / 2;\r\n\r\n                                            $(element).css({ 'position': \"absolute\", 'top': (bodyHeight - modalHeight) / 2, 'margin': 0, 'left': (bodyWidth - modalWidth) });\r\n                                        }\r\n                                        else {\r\n                                            var t = window.innerHeight / 2 - element.outerHeight() / 2;\r\n                                            element.css('top', t);\r\n                                        };\r\n                                        $(element).addClass('noTransform');\r\n\r\n                                        //Auto focus first feild / manage tab index\r\n\r\n                                      //  $(window).on('keyup', onWindowKeyUp);\r\n\r\n                                        //Remove picker tabindex when popup to avoid focus on picker element\r\n                                        angular.element('.picker').removeAttr(\"tabindex\");\r\n                                        $timeout.cancel(cancelTOut);\r\n                                        cancelTOut = null;\r\n                                    });\r\n                                    $timeout(function () {\r\n                                        var $firstField = element.find(\"a, input[type=text],input[type=radio]:checked,input[type=checkbox], button, textarea, [tabindex='0']\").not(\":disabled, :hidden, [tabindex = -1]\").first();\r\n                                        $focusOnField($firstField);\r\n                                    }, 600);\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            var el = angular.element(element),\r\n                                isPopupInit = el.data(\"overlay-id\") === undefined ? false : true;\r\n\r\n                            // isPopupInit variable is used  to check whether popup is initiated or not.\r\n                            if (isPopupInit) {\r\n                                el.closeModal({\r\n                                    complete: function () {\r\n                                        if (attrs.afterCompleteClosePopup)\r\n                                            afterCompleteClosePopup(scope, {});\r\n\r\n                                        if (scope.isDraggable) {\r\n                                            angular.element('body').removeClass('is-popup-Draggable');\r\n                                        }\r\n                                        if (controller.$$smartModal === true) {\r\n                                            $smartModal.destroyModal({ $view: el, $scope: scope });\r\n                                        }\r\n                                        angular.element(\".currentPopupTriggerer\").focus().removeClass('currentPopupTriggerer');\r\n                                        triggeredElement = null;\r\n                                    }\r\n                                });\r\n\r\n                                if (element.hasClass(\"noTransform\")) {\r\n                                    var tOutTemp = setTimeout(function () {\r\n                                        element.css('top', 0).removeClass('noTransform');\r\n                                        clearTimeout(tOutTemp);\r\n                                        tOutTemp = null;\r\n                                    }, 100);\r\n                                }\r\n                            }\r\n                            //  remove the listener and add tabindex back on picker\r\n                            reset();\r\n\r\n                            //  Check if popup is opened by uigrid-compatible element\r\n                            if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                //  Following event is listened inside uigrid-compatible dir\r\n                                $rootScope.$emit(\"popupClosed\");\r\n                                window.isPopupOpenedByUIGridCompatibleElement = undefined;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onShow();\r\n                    reset();\r\n                    if ($popup) {\r\n                        $($popup.associatedOverlay).remove();\r\n                        $smartModal.destroyModal({ $view: element });\r\n                    }\r\n                    clearTimeout(tOut);\r\n                    tOut = null;\r\n                    angular.element(scope.expandCollapse).off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartPopUp/smartPopUpTemplate.html'\r\n        };\r\n    }])\r\n    .factory(\"$scoper\", function () {\r\n        return {\r\n            getScope: function (scope, deep) {\r\n                if (deep) {\r\n                    var a, b = deep.split(\".\");\r\n                    var bLength = b.length;\r\n                    if (bLength > 1) {\r\n                        a = scope;\r\n                        for (var i = 0; i < bLength; i++) {\r\n                            var sortCn = b[i].match(/(\\[\\d+\\])+$/);\r\n                            if (sortCn && sortCn.length > 0) {\r\n                                var subScope = b[i].substr(0, b[i].indexOf('['));\r\n                                a = a[subScope];\r\n                                sortCn = sortCn[0].replace(/\\]\\[/g, ',').replace(/[\\[\\]]/g, '').split(\",\");\r\n                                for (var j = 0; j < sortCn.length; j++) {\r\n                                    a = a[sortCn[j]];\r\n                                }\r\n                            } else {\r\n                                a = a[b[i]];\r\n                            };\r\n                        }\r\n                    } else {\r\n                        a = scope[deep];\r\n                    }\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n    })\r\n    .service(\"$smartModal\", [\"$timeout\", \"$compile\", function ($timeout, $compile) {\r\n        var _this = this;\r\n\r\n        _this.open = function (config) {\r\n            _this.initModal(config);\r\n        }\r\n\r\n        _this.initModal = function (config) {\r\n            var attrs = [\r\n                \"show='{{\" + (config.show || \"\") + \"}}'\",\r\n                \"popup-config='\" + (config.$config || \"\") + \"'\",\r\n                \"on-hide='\" + (config.onHide || \"\") + \"'\",\r\n                \"after-complete-close-popup='{{\" + (config.afterCompleteClosePopup || \"\") + \"}}'\",\r\n                \"cancel-button='\" + (config.cancelButton || \"\") + \"'\",\r\n                \"template-url='\" + (config.templateUrl || \"\") + \"'\",\r\n                \"header-url='\" + (config.headerUrl || \"\") + \"'\",\r\n                \"content-url='\" + (config.contentUrl || \"\") + \"'\",\r\n                \"footer-url='\" + (config.footerUrl || \"\") + \"'\",\r\n                \"type='\" + (config.type || \"\") + \"'\",\r\n                \"is-draggable='\" + (config.isDraggable || \"\") + \"'\",\r\n                \"expand-collapse='\" + (config.expandCollapse || \"\") + \"'\",\r\n                \"dismissible='\" + (config.dismissible || \"\") + \"'\",\r\n                \"class='\" + (config.class || \"\") + \"'\"\r\n            ]\r\n                , smartpopDir = '<smart-popup ' + attrs.join(\" \") + '> </smart-popup>';\r\n\r\n            var popup = $compile(smartpopDir)(config.$scope);\r\n            popup.appendTo(\"body\");\r\n        }\r\n\r\n        _this.destroyModal = function (modal) { // this method invoke automatically once popup goes hide and also executed on scope $destroy.\r\n            modal.$view && modal.$view.remove();\r\n            modal.$scope && modal.$scope.$destroy();\r\n        }\r\n    }]);\r\n})();","/**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Radio\n   * @description This directive is useful for creating a radio button or a group of radio buttons.\n   * \n   * @attr {String} label\n   *    Label to be displayed for identification of this ui element\n   * @attr {Array} options\n   *    Number of radio buttons to be created. Only one option can be selected at a time.\n   * @attr {Object} ng-model\n   *    Default selected option. This is expected to be one of the 'options'.\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\n   * @attr {String} datakey\n   *    A property of an option to be used to display the label for option. Default value is 'title'.\n   * @attr {String} layout\n   *    'vertical' or 'horizontal' layout\n   * @attr {Boolean} validate\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\n   * @attr {Array} rules \n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\n   * @attr {String} error-message \n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\n   * @attr {Boolean} is-mandatory \n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\n   * @attr {Boolean} is-visible \n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\n   * @attr {Number} colspan\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\n   *    Default value is 1.\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\n   * @attr {Function} on-change\n   *    Callback function when any of the buttons from radio group is selected\n   * @type cool\n   * \n   * @example\n   Dynamic:\n   Controller:\n       $scope.config = {\n            \"modelData\": {\n                \"currency\": { \"code\": \"€\", \"name\": \"EUR\" }\n            }, \n            \"formConfig\": {\n                \"sections\": [\n                    {\n                        \"isMandatory\": true,\n                        \"rows\": [\n                            {\n                                \"properties\": [\n                                    {\n                                        \"label\": \"Currency\",\n                                        \"type\": \"radio\",\n                                        \"isMandatory\": true,\n                                        \"data\": \"currency\",\n                                        \"colspan\": 1,\n                                        \"onChange\": \"onChange\",  //  controller function\n                                        \"attributes\": {\n                                            \"options\": [{\n                                                \"code\": \"$\",\n                                                \"name\": \"USD\"\n                                            }, {\n                                                \"code\": \"€\",\n                                                \"name\": \"EUR\"\n                                            }],\n                                            \"datakey\": \"name\"\n                                        },\n                                        \"rules\": [\n                                            { \n                                                \"rule\": \"this.title == \\\"Option 2\\\"\", \n                                                \"error\": \"Invalid selection\" \n                                            }\n                                        ]\n                                    }\n                                ]    \n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n    Usage:\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\n   \n   * @example\n   Static:\n   Controller:\n       $scope.currencyOptions = [{\n            \"code\": \"$\",\n            \"name\": \"USD\"\n       }, {\n           \"code\": \"€\",\n           \"name\": \"EUR\"\n       }];\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\n       $scope.onChange = function(selectedCurrency) {\n           console.log(selectedCurrency);\n       };\n   Usage:\n       <smart-radio label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-radio> \n\n   * @example\n   Radio with disabled option:\n   Controller:\n       $scope.currencyOptions = [{\n            \"code\": \"$\",\n            \"name\": \"USD\",\n            \"disable\": true\n       }, {\n           \"code\": \"€\",\n           \"name\": \"EUR\"\n       }];\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\n   Usage:\n       <smart-radio label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\"></smart-radio> \n   */\n\n(function () {\r\n    'use strict';\n    var radioGroupId = 0;\n\n    angular.module('SMART2').directive('smartRadio', ['$timeout', '$translate', 'ScrollTo', 'RuleEngine', function ($timeout, $translate, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            require: '?ngModel',\n            scope: {\r\n                label: '@',\n                options: '=?',\n                ngModelCopy: '=?ngModel',\n                isMandatory: '@',\n                isVisible: '=?',\n                layout: '@',\n                rules: '@',\n                validate: '=?',\n                focus: '=?',\n                parentElement: '@',\n                errorMessage: '@',\n                onChange: '&',\n                removable: '@',\n                datakey: '@',\n                optionId: '@',\n                groupId: '@'\r\n            },\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\n\n                var isNgModelFunction = typeof scope.ngModelCopy == 'function';\n\n                // key to be used to bind options\n                scope.dataKey = scope.datakey ? scope.datakey : 'title';\n\n                //uniqueID\n                radioGroupId = radioGroupId + 1;\n                scope.radioGrouptId = (attrs.groupId) ? attrs.groupId : \"radio-group-\" + radioGroupId;\n\n                if (typeof attrs.optionId != \"undefined\") {\r\n                    scope.optionId = attrs.optionId;\r\n                }\n\n                //check is gap\n                scope.isGap = (attrs.gap) ? scope.$eval(attrs.gap) : false;\n\n                scope.layout = scope.layout ? scope.layout : 'horizontal';\n\n\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                if (isNgModelFunction) {\r\n                    try {\r\n                        ngModelCtrl.$render = function () {\r\n                            scope.ngModel = ngModelCtrl.$modelValue;\r\n                            scope.selectedOption = scope.ngModel;\r\n                        };\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                var updateView = function () {\r\n                    if (isNgModelFunction) {\r\n                        try {\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\n\n\n                /*\n                 * Focus field when focus is set to true\n                 */\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\n                        scope.focus = false;\r\n                    }\r\n                });\n\n                /*\n                 * Validate field whene validate is set to true\n                 */\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\n\n                /*\n                 * Watch needs to be added on ngModel\n                 */\n                var onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                    scope.selectedOption = newVal;\r\n                }, true);\n\n                /*\n                 * Validate rules\n                 */\n                scope.validateRules = function () {\r\n                    if (scope.$eval(scope.isMandatory) && (isNgModelFunction && (scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) || (!isNgModelFunction && (scope.ngModelCopy === '' || scope.ngModelCopy === undefined || scope.ngModelCopy === null))) {\r\n                        scope.validate = true;\n                        scope.errorMessage = $translate.instant('selectOptionErrMsg');\n                        return;\r\n                    }\n\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\n\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\n                            ruleLen = rules.length;\n\n                        for (var i = 0; i < ruleLen; i++) {\r\n                            var ruleT = rules[i]; // temp hold\r\n                            if (typeof ruleT == 'object') {\r\n                                if (eval((ruleT.rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                    scope.validate = true;\n                                    scope.errorMessage = ruleT.error;\n                                    break;\r\n                                }\r\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(ruleT, function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\n\n                scope.ngChange = function (selectedOption) {\r\n                    // Commented below code for fixing TWO-2748\r\n                    //if (!scope.$eval(scope.isMandatory) && angular.isDefined(scope.selectedOption) && scope.selectedOption[scope.dataKey] == selectedOption[scope.dataKey]) {\r\n                    //    scope.selectedOption = '';\r\n                    //}\r\n                    //else {\r\n                    //    scope.selectedOption = selectedOption;\r\n                    //}\r\n\r\n                    // Added below code for fixing TWO-2748\r\n                    scope.selectedOption = selectedOption;\r\n\r\n                    if (!scope.groupId) {\r\n                        if (isNgModelFunction) {\r\n                            scope.ngModel = scope.selectedOption;\r\n                        }\r\n                        else {\r\n                            scope.ngModelCopy = scope.selectedOption;\r\n                        }\r\n                    }\n                    updateView();\n                    scope.validateRules();\n                    var toutPromise = $timeout(function () {\r\n                        scope.onChange();\r\n                        $timeout.cancel(toutPromise); // cancel the timeout promise to avoid any leakage.\r\n                    });\r\n                };\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                    onNgModel();\r\n                    element.remove();\r\n                    scope = null;\r\n                });\r\n            },\n            templateUrl: 'shared/directives/uiElements/smartRadio/smartRadioTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    /**\r\n     * @memberof SMART2\r\n     * @ngdoc directive\r\n     * @name Widget Error Field \r\n     * @description This directive is useful for displaying total error field in widget form\r\n     * \r\n     * @attr {Object} showerrorsPanel: scope variable, that need to be declared in the controller.\r\n     *    \r\n     * @attr {String} customfieldsSelector: customfields-selector=\".linkError, .red-text\"\r\n     *    class and id can be passed \r\n     *    \r\n     * @attr {String} frmWidgetId: frm-widget-id=\"formWidgetUniqueIdTest1\"\r\n     *    widget Id need to be specified here.\r\n     *\r\n     * @example\r\n     Dynamic:\r\n     Controller:\r\n         $scope.onErrorFound = {\r\n            \"error\": false, // change value for triggering the error count.\r\n            \"isWarningHeader\": false, // set true for displaying the error band.\r\n            \"noMoreErrors\": false // \r\n        };\r\n\r\n      Usage:\r\n         <smart-read-errors showerrors-panel=\"onErrorFound\" customfields-selector=\".linkError\" frm-widget-id=\"formWidgetUniqueIdTest1\" class=\"bandcontainer clearfix\"></smart-read-errors>\r\n     * \r\n     */\r\n\r\n    'use strict';\r\n    angular.module('SMART2')\r\n    .directive('smartReadErrors', function ($rootScope, $compile, $timeout) {\r\n        return {\r\n            restrict: 'EA',\r\n            templateUrl: 'shared/directives/uiElements/smartReadErrors/smartReadErrorsTemplate.html',\r\n            replace: true,\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n                scope.counter = 0;\r\n                scope.emptyText = \"\";\r\n                scope.leftLabelText = \"Show only error field\";\r\n                var invalids = [],\r\n                    count = 0,\r\n                    currentManualFocus = '',\r\n                    isManualFocus = true,\r\n                    topMinus = 300,\r\n                    timeoutPeriod = 300,\r\n                    fieldsSelector = \"input.invalid, .invalid input, textarea.invalid\";\r\n\r\n                fieldsSelector += attrs.customfieldsSelector ? \", \" + attrs.customfieldsSelector : \"\";\r\n                scope.onErrorFound = scope[attrs.showerrorsPanel];\r\n                scope.nextDisable = false;\r\n                scope.prevDisable = false;\r\n                var formWidgetId = attrs.frmWidgetId;\r\n                var onblurEvent = function () {\r\n                    $timeout(function () {\r\n                        invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                        var invLen = invalids.length - 1;\r\n                        if (scope.counter != invLen) {\r\n                            count--;\r\n\r\n                            if (count < 0) {\r\n                                count = (scope.counter - invLen) < 0 ? 0 : invLen;\r\n                            }\r\n                            scope.counter = invLen;\r\n                        }\r\n                        if (invLen === 0) {\r\n                            $timeout(function () {\r\n                                scope.onErrorFound.isWarningHeader = false; // close the yellow bar\r\n                            }, 3000);\r\n\r\n                        }\r\n                        isManualFocus = true;\r\n                        //scope.counter = invLen;\r\n                    }, timeoutPeriod);\r\n                };\r\n\r\n\r\n                // To set focus on \r\n                function focusElem(a_indx) {\r\n                    var top,\r\n                        timeoutPeriodTemp = 0,\r\n                        $invalidDom = invalids.eq(a_indx);\r\n\r\n                    if (!$invalidDom.closest('.collapsible-body').hasClass('displayBlock')) {\r\n                        $invalidDom.closest('.collapsible-container').find('.collapsible-header').trigger('click');\r\n                        timeoutPeriodTemp = 350;\r\n                    }\r\n\r\n                    $timeout(function () {\r\n                        top = $invalidDom.offset().top - $('#subheaderwrapper').height();\r\n                        //if (top > 300) {\r\n                        $(window).scrollTop(top - 40);\r\n                        //}\r\n                        if ($invalidDom.is(\"span\")) {\r\n                            $invalidDom.closest('div').find('button, [href], input, select, textarea')[0].focus();\r\n                        } else {\r\n                            if ($invalidDom.closest('span').length) {\r\n                                $invalidDom.closest('span').find('.dropdown-button').focus();\r\n                            } else {\r\n\r\n                                $invalidDom.focus();\r\n                            }\r\n                        }\r\n                        scope.nextDisable = false;\r\n                        scope.prevDisable = false;\r\n                    }, timeoutPeriodTemp + timeoutPeriod);\r\n\r\n                }\r\n                // On focus to maintain the counter\r\n                var onFocusEvent = function (e) {\r\n                    if (isManualFocus) {\r\n                        invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                        currentManualFocus = $(this);\r\n                        var currInd = invalids.index(currentManualFocus);\r\n                        count = currInd >= 0 ? currInd : count;\r\n                    }\r\n                }\r\n\r\n                // Needed for tabbing navigation using tab key\r\n\r\n                //var onKeyPressEvent = function (e) {\r\n                //    var char = e.which || e.keyCode;\r\n                //    if (scope.onErrorFound.isTabSwitch && char === 9) {\r\n\r\n                //        e.preventDefault();\r\n\r\n                //        if (e.shiftKey) {\r\n                //            scope.prev()\r\n                //        } else {\r\n                //            scope.next()\r\n                //        }\r\n                //    }\r\n                //};\r\n\r\n                //$(window).keydown(function (e) {\r\n\r\n                //    onKeyPressEvent(e);\r\n                //});\r\n\r\n                scope.closeErrorHeader = function () {\r\n                    scope.onErrorFound.isWarningHeader = !scope.onErrorFound.isWarningHeader;\r\n                }\r\n\r\n                var watchSaveClick = scope.$watch('onErrorFound.error', function (newValue, oldValue) {\r\n\r\n                    if (newValue !== oldValue) {\r\n                        $timeout(function () {\r\n                            invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                            if (invalids.length > 0) {\r\n                                scope.onErrorFound.noMoreErrors = false;\r\n                                scope.onErrorFound.isWarningHeader = true;\r\n                                invalids.blur(onblurEvent).focus(onFocusEvent)\r\n                                scope.counter = invalids.length - 1;\r\n                                focusElem(0);\r\n                                isManualFocus = false; // No user manual focus\r\n                            } else {\r\n                                scope.onErrorFound.noMoreErrors = true;\r\n                                //scope.onErrorFound.isWarningHeader = '';\r\n                                //scope.onErrorFound.isWarningHeader = false;\r\n                            }\r\n                        }, 1000);\r\n\r\n                    }\r\n\r\n                });\r\n                scope.next = function () {\r\n                    scope.nextDisable = true;\r\n                    scope.prevDisable = true;\r\n                    isManualFocus = true;\r\n                    invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                    var invLen = invalids.length - 1;\r\n\r\n                    if (count < invLen) {\r\n                        isManualFocus = false;\r\n                        focusElem(count + 1);\r\n                        if (scope.counter === invLen) {\r\n                            count++;\r\n                        }\r\n                    } else {\r\n                        isManualFocus = false;\r\n                        count = 0;\r\n                        focusElem(count);\r\n                    };\r\n                    //scope.counter = invLen;\r\n                };\r\n\r\n                scope.prev = function () {\r\n                    scope.nextDisable = true;\r\n                    scope.prevDisable = true;\r\n                    isManualFocus = true;\r\n                    invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                    var newLen = invalids.length - 1;\r\n                    if (count > 0) {\r\n                        isManualFocus = false;\r\n                        focusElem(count - 1);\r\n                        if (scope.counter === newLen) {\r\n                            count--;\r\n                        }\r\n                    } else {\r\n                        isManualFocus = false;\r\n                        focusElem(newLen);\r\n                        count = newLen;\r\n                    };\r\n                    //scope.counter = newLen;\r\n                };\r\n\r\n                // Destroy event\r\n                scope.$on('$destroy', function () {\r\n                    watchSaveClick(); // Deregister\r\n                    invalids.unbind(); // unbind all events\r\n                    invalids = [];\r\n                    scope = {}; // nullify the scope\r\n                });\r\n\r\n            }\r\n        }\r\n    })\r\n})(angular);","//resizeable Sidebar\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('resizeableSidebar',[function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                disableResize: '=?',\r\n                collapseCallback : '&',\r\n                scrollCallback : '&',\r\n                leftPanelWidthCallback : '&'\r\n            },\r\n            link: function(scope, element, attrs) {\r\n              var elementWidth = element.innerWidth();\r\n              var collapseCallback = scope.$eval(scope.collapseCallback);\r\n              var scrollCallback = scope.$eval(scope.scrollCallback);\r\n              var leftPanelWidthCallback = scope.$eval(scope.leftPanelWidthCallback);\r\n              var leftPanel = element.find('.leftPanel');\r\n              var resizableDiv = document.createElement('div');\r\n              resizableDiv.id = 'panelexpandorreports';\r\n              resizableDiv.className = 'panelexpandorreports';\r\n              leftPanel.prepend(resizableDiv);\r\n              var getResizableDiv = element.find('.panelexpandorreports');\r\n              var clickableDiv = document.createElement('div');\r\n              clickableDiv.id = 'panelexpandorreportsdiv';\r\n              clickableDiv.className = 'panelexpandorreportsdiv';\r\n              getResizableDiv.prepend(clickableDiv);\r\n              scope.$watch('disableResize', function (disableResize) {\r\n                    if (disableResize) {\r\n                        $('#panelexpandorreports').addClass('disableCursorAction');\r\n                    } else {\r\n                        $('#panelexpandorreports').removeClass('disableCursorAction');\r\n                    }\r\n                });\r\n                var restrictWidth = 0,\r\n                minDraggableWidth = attrs.minWidth || 100,\r\n                lowDraggableWidth = attrs.lowWidth || 100,\r\n                midDraggableWidth = attrs.midWidth || 282;\r\n                var maxDraggableWidth = window.innerWidth / 2;//$(window).width() / 2;\r\n                var UiLeftPosition = 0;\r\n                var UiOriginalPosition = 0;\r\n                var windowWidthBeforeResize = window.innerWidth //$(window).width();\r\n                var leftPecent = midDraggableWidth / windowWidthBeforeResize * 100;\r\n                var currentwindowWidth = window.innerWidth //$(window).width();\r\n                // on window resize calculations\r\n                $(window).resize(function() {                \r\n                    //maxDraggableWidth  = $(window).width() / 2;\r\n                    //restrictWidth = maxDraggableWidth - minDraggableWidth;\r\n                    currentwindowWidth = window.innerWidth //$(window).width();\r\n                    maxDraggableWidth = currentwindowWidth / 2\r\n                    UiLeftPosition = currentwindowWidth * leftPecent / 100;\r\n                    UiLeftPosition = Math.max(midDraggableWidth, UiLeftPosition); \r\n                    windowWidthBeforeResize = currentwindowWidth;\r\n                    $(\".leftPanel\").animate({\r\n                        'margin-left': -UiLeftPosition,\r\n                        width: UiLeftPosition\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false,\r\n                    }).addClass('overflowVisible');\r\n                    $(\".wrapper--withSidebar\").animate({\r\n                        'margin-left': UiLeftPosition\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false\r\n                    }).addClass('overflowVisible');\r\n                    $(\".panelexpandorreports\").animate({\r\n                            left: UiLeftPosition,\r\n                            backgroundColor:'#ccc'\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false,\r\n                        complete: function(){\r\n                            $(\".panelexpandorreports\").removeClass('dragLine');                                            \r\n                        }\r\n                    }).addClass('dragLine');\r\n                    leftPanelWidthCallback(UiLeftPosition,elementWidth);\r\n                });\r\n                \r\n                //var maxDraggableWidth  = window.innerWidth / 2, //attrs.maxWidth ||\r\n                  element.on('click mouseover.leftPanel', '#leftPanel', function () {\r\n                        var $panelExp = $('#panelexpandorreports');\r\n                        if (!$panelExp.data('ui-draggable')) {\r\n                            $panelExp.draggable({\r\n                                axis: 'x',\r\n                                drag: function (e, ui) {\r\n                                    restrictWidth = maxDraggableWidth - minDraggableWidth;\r\n                                    $('.panelexpandorreports').addClass('panelexpandorreports-nohover');\r\n                                    //ui.position.left = Math.max(minDraggableWidth, ui.position.left);  \r\n                                    ui.position.left = Math.min(maxDraggableWidth, ui.position.left);\r\n                                    UiLeftPosition = ui.position.left;\r\n                                    UiOriginalPosition = ui.originalPosition.left; \r\n                                    leftPecent = UiLeftPosition / windowWidthBeforeResize * 100;   \r\n                                    leftPanelWidthCallback(ui.position.left,elementWidth);      \r\n                                },\r\n                                stop: function (e, ui) {                               \r\n                                    if(ui.position.left < lowDraggableWidth){                    \r\n                                       collapseCallback();\r\n                                       $('#panelexpandorreports').css('left', ui.originalPosition.left);\r\n                                    } else if ((ui.position.left >= lowDraggableWidth) && (ui.position.left <= midDraggableWidth)) {\r\n                                        element.removeClass('conditionalLftPanelTransition');\r\n                                        /*var marginLeftValue = parseInt($('.wrapper--withSidebar').css('margin-left')) - (ui.originalPosition.left - ui.position.left);\r\n                                        $(\".leftPanel\").animate({\r\n                                           'margin-left': -marginLeftValue,\r\n                                            width: ui.position.left\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false\r\n                                        });\r\n\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': marginLeftValue\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false\r\n                                        });\r\n                                        // $panelExp.css('left', 282);*/                                 \r\n                                       // setTimeout(function () {\r\n                                        $(\".leftPanel\").animate({\r\n                                            'margin-left': -midDraggableWidth,\r\n                                            width: midDraggableWidth                                           \r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                           // complete: function(){\r\n                                            //  $(\".leftPanel\").removeClass('overflowVisible');\r\n                                            //}\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': midDraggableWidth,\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                            //complete: function(){\r\n                                            //  $(\".leftPanel\").removeClass('overflowVisible');\r\n                                           // }\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".panelexpandorreports\").animate({\r\n                                               left: midDraggableWidth,\r\n                                               backgroundColor:'#ccc'\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                            complete: function(){\r\n                                              $(\".panelexpandorreports\").removeClass('dragLine');                                            \r\n                                            }\r\n                                        }).addClass('dragLine');\r\n                                       // }, 400);\r\n                                    } else {                                   \r\n                                        element.removeClass('conditionalLftPanelTransition');\r\n                                        var marginLeftValue = parseInt($('.wrapper--withSidebar').css('margin-left')) - (ui.originalPosition.left - ui.position.left);\r\n                                        $(\".leftPanel\").animate({\r\n                                           'margin-left': -marginLeftValue,\r\n                                            width: ui.position.left\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                           // complete: function(){\r\n                                          //    $(\".leftPanel\").removeClass('overflowVisible');\r\n                                          //  }\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': marginLeftValue\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                          //  complete: function(){\r\n                                          //    $(\".leftPanel\").removeClass('overflowVisible');\r\n                                           // }\r\n                                        }).addClass('overflowVisible'); \r\n                                    }\r\n                                    scrollCallback(); \r\n                                    $('.panelexpandorreports').removeClass('panelexpandorreports-nohover');\r\n                                }\r\n                            });\r\n                        } \r\n                });\r\n            },\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    var scrollCounter = 0;\r\n\r\n    angular.module('SMART2').directive('smartScroll', ['$parse', '$timeout', '$window', function ($parse, $timeout, $window) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: false,\r\n            transclude: true,\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n\t\t\t\t//Setting for fixed header on scroll\r\n                var isFixedHeader = attrs.isFixedHeader ? true : false,\r\n                    isScrollDate = attrs.hideDate == 'true' ? true : false,\r\n                    onBreakPoints = attrs.onBreakPoints ? $parse(attrs.onBreakPoints.replace(/\\(\\)/, '(e)')) : false,\r\n                    onScrollLockUnlock = attrs.onScrollLockUnlock ? $parse(attrs.onScrollLockUnlock.replace(/\\(\\)/, '(e)')) : false;\r\n\r\n                scope.fixedHeader = function (e) {\r\n                    var _this = $(e.target),\r\n            \t\ttableElem = _this.find(\">\").eq(0).find(\">\").eq(0), // this is depending on the smartScroll directive html structure!\r\n            \t\t elScrollTop = _this.scrollTop();\r\n\r\n                    if (elScrollTop > 0 && !_this.data('appended')) {\r\n                        // reset display styles so column widths are correct when measured below\r\n                        tableElem.find('thead, tbody, tfoot').css('display', '');\r\n\r\n                        // set widths of columns\r\n                        tableElem.find('tr:first-child th').each(function (i, thElem) {\r\n                            var tdElems = tableElem.find('tbody > tr:first-child > td').eq(i),\r\n            \t\t\t\tcolumnWidth = tdElems.length ? tdElems.get(0).offsetWidth : thElem.offsetWidth;\r\n\r\n                            if (tdElems.length) {\r\n                                tdElems.css('width', columnWidth + 'px');\r\n                            }\r\n                            if (thElem) {\r\n                                $(thElem).css('width', columnWidth + 'px');\r\n                            }\r\n                        });\r\n\r\n                        var tbl = $('<table>');\r\n                        var theader = tableElem.find('thead tr:first-child').clone();\r\n                        tableElem.find('thead tr:first-child').css('opacity', '0');\r\n                        tbl.append(theader);\r\n                        tbl.addClass(\"fixed-header-when-scrolled\");\r\n                        _this.before(tbl);\r\n                        _this.data('appended', true);\r\n                    }\r\n                    else if (elScrollTop == 0) {\r\n                        _this.parent().find(\".fixed-header-when-scrolled\").remove();\r\n                        tableElem.find('thead tr:first-child').css('opacity', '1');\r\n                        _this.data('appended', false);\r\n                    }\r\n                };\r\n\r\n                function scrollBreakPoints(scrollTop, direction) {\r\n                    if (attrs.scrollBreakPoints) {\r\n                        var breakPConfig = JSON.parse(attrs.scrollBreakPoints),\r\n                            BCkeys = Object.keys(breakPConfig),\r\n                            srElements = element.find(BCkeys.join(\",\"));\r\n\r\n                        for (var z = 0; z < BCkeys.length; z++) {\r\n                            element.find(BCkeys[z]).data(\"configSele\", BCkeys[z]);\r\n                        }\r\n\r\n                        if (srElements.length > 0) {\r\n                            srElements.each(function (i, e) {\r\n                                var el = $(e),\r\n                                    pos = el.position(),\r\n                                    bConfig = breakPConfig[el.data(\"configSele\")],\r\n                                    touchValue = function () {\r\n                                        var r;\r\n                                        if (typeof bConfig.top == \"number\") {\r\n                                            r = bConfig.top * parseInt(scope.scrollHeight);\r\n                                        } else {\r\n                                            r = parseInt(bConfig.top);\r\n                                        }\r\n\r\n                                        return r;\r\n                                    }();\r\n\r\n                                if (direction == \"upward\" && pos.top <= touchValue && !el.data(\"fired\")) {\r\n                                    el.data(\"fired\", true);\r\n                                    onBreakPoints(scope, {\r\n                                        e: {\r\n                                            index: i,\r\n                                            direction: \"upward\"\r\n                                        }\r\n                                    });\r\n                                    scope.$digest();\r\n                                } else if (direction == \"downward\" && ((bConfig.reverse === true ? pos.top + el.outerHeight() : pos.top) >= (touchValue)) && el.data(\"fired\")) {\r\n                                    el.data(\"fired\", false);\r\n                                    onBreakPoints(scope, {\r\n                                        e: {\r\n                                            index: i,\r\n                                            direction: \"downward\"\r\n                                        }\r\n                                    });\r\n                                    scope.$digest();\r\n                                };\r\n                            });\r\n                        };\r\n                    };\r\n                };\r\n\r\n            \t//unique ID for scroll\r\n                scrollCounter = scrollCounter + 1;\r\n                scope.scrollid = 'scroll-' + scrollCounter;\r\n\r\n                //custom config\r\n                var customConfig;\r\n                attrs.$observe('scrollConfig', function (value) {\r\n                    if (value) {\r\n                        customConfig = scope.$eval(attrs.scrollConfig);\r\n                    };\r\n                });\r\n\r\n                //scroll config\r\n                var scrollConfig = {},\r\n                onScrollEnd = $parse(attrs.onScrollEnd),\r\n                onScrollToTop = $parse(attrs.onScrollToTop),\r\n                onScrollInProgress = $parse(attrs.onScrollInProgress);\r\n\r\n                attrs.$observe('height', function (value) {\r\n                    if (value) {                               \r\n                        if (angular.isFunction(onScrollEnd) || angular.isFunction(onScrollToTop)) {\r\n                            scrollConfig.onScroll = function (y, x) {\r\n                                if (y.maxScroll > 0 && y.scroll >= y.maxScroll && angular.isFunction(onScrollEnd)) {\r\n                                    onScrollEnd(scope, { e: \"\" });\r\n                                }\r\n                                if (y.scroll == 0 && angular.isFunction(onScrollToTop)) {\r\n                                    onScrollToTop(scope, { e: \"\" });\r\n                                }\r\n                                else if (y.maxScroll > y.scroll > 0 && angular.isFunction(onScrollInProgress)) {\r\n                                    onScrollInProgress(scope, { e: \"\" });\r\n                                }\r\n                                angular.element('.fixeddd').hide();\r\n                            };\r\n                        }\r\n                    \r\n\r\n                        if (!attrs.vOffset) {\r\n                            if (value == \"parent\") {\r\n                                scope.scrollHeight = element.parent().outerHeight();\r\n                                $(window).resize(resizeHeight100P);\r\n                            } else {\r\n                                scope.scrollHeight = value;\r\n                            }\r\n                        } else if (attrs.vOffset) {\r\n                        \t// If scroll to be responsive excluding an offset\r\n                            $(window).unbind(\"resize\", resizeHeight100P);\r\n                        \tscope.scrollHeight = $window.innerHeight - parseInt(attrs.vOffset);\r\n                        } else {\r\n                        \tscope.scrollHeight = value;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                function resizeHeight100P(a) {\r\n                    scope.scrollHeight = element.parent().outerHeight();\r\n                    scope.$digest();\r\n                };\r\n\r\n                if (attrs.vOffset || attrs.hOffset) {\r\n                \t// Resize event if scroll to be responsive excluding an offset\r\n                \t$(window).bind('resize', function () {\r\n                        scope.scrollHeight = $window.innerHeight - parseInt(attrs.vOffset);\r\n                        scope.$digest();\r\n                        $timeout(function () {\r\n                \t\t\tif (attrs.vOffset) {\r\n                \t\t\t\tif (element.closest('.modal').length > 0) {\r\n                \t\t\t\t\tvar modalHeight = element.closest('.modal').height();\r\n                \t\t\t\t\telement.closest('.modal').css('top', window.innerHeight / 2 - modalHeight / 2 + 'px');\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t});\r\n                \t});\r\n                }\r\n                attrs.$observe('vOffset', function (newVal) {\r\n                    scope.scrollHeight = $window.innerHeight - parseInt(newVal);\r\n                });\r\n                scope.$on('scrollTopToBottom', function (event, args) {\r\n                    element.find('.scrollbar-outer').animate({ scrollTop: args }, \"slow\");\r\n                });\r\n\r\n                var onScrollHEnd = $parse(attrs.onScrollHEnd);\r\n                var onScrollHToTop = $parse(attrs.onScrollHToTop);\r\n                var onScrollHInProgress = $parse(attrs.onScrollHInProgress);\r\n\r\n                var eleWidth = element.css('width');\r\n                scope.scrollWidth = parseInt(eleWidth) ? eleWidth : '100%';\r\n\r\n                attrs.$observe('width', function (value) {\r\n                \tif (value) {\r\n                \t\tif (angular.isFunction(onScrollHEnd) || angular.isFunction(onScrollHToTop)) {\r\n                \t\t\tscrollConfig.onScroll = function (y, x) {\r\n                \t\t\t\tif (x.maxScroll > 0 && x.scroll == x.maxScroll && angular.isFunction(onScrollHEnd)) {\r\n                \t\t\t\t\tonScrollHEnd(scope, { e: \"\" });\r\n                \t\t\t}\r\n                \t\t\t\tif (x.scroll == 0 && angular.isFunction(onScrollHToTop)) {\r\n                \t\t\t\t\tonScrollHToTop(scope, { e: \"\" });\r\n                \t\t\t\t}\r\n                \t\t\t\telse if (x.maxScroll > x.scroll > 0 && angular.isFunction(onScrollHInProgress)) {\r\n                \t\t\t\t\tonScrollHInProgress(scope, { e: \"\" });\r\n                \t\t\t}\r\n                \t\t};\r\n                \t};\r\n                \t\tscope.scrollWidth = value;\r\n                }\r\n                });\r\n\r\n                attrs.$observe('connectScrolls', function (value) {\r\n                \tif (value) {\r\n                \t\tvar value = JSON.parse(value),\r\n                \t\t\tscrollTopSourceStorage = 0;\r\n\r\n                \t\tscrollConfig.onScroll = function (y, x) {\r\n                \t\t\tvar $vSource = $('.' + value.vSource),\r\n\t\t\t\t\t\t\t$vSourceP = $vSource.parent().parent(),\r\n\t\t\t\t\t\t\t$hSource = $('.' + value.hSource),\r\n\t\t\t\t\t\t\t$hSourceP = $hSource.parent().parent(),\r\n\t\t\t\t\t\t\t$vertical = $('.' + value.vertical),\r\n\t\t\t\t\t\t\t$verticalP = $vertical.parent().parent(),\r\n                \t\t\t$horizontal = $('.' + value.horizontal);\r\n\r\n                \t\t\tvar sourceHeight = $vSource.height();\r\n                \t\t\tvar scrollTopSource = $vSourceP.scrollTop(),\r\n                \t\t\tscrollTopConnect = $verticalP.scrollTop();\r\n\r\n                \t\t\tif (scrollTopSource > scrollTopSourceStorage) {\r\n                \t\t\t\tif (scrollTopSource > scrollTopConnect) {\r\n                \t\t\t\t\t$verticalP.scrollTop(scrollTopSource);\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t\telse if (scrollTopSource < scrollTopSourceStorage) {\r\n                \t\t\t\tif (scrollTopSource < scrollTopConnect) {\r\n                \t\t\t\t\t$verticalP.scrollTop(scrollTopSource);\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t\telse {\r\n                \t\t\t\tvar scrollLeft = $hSourceP.scrollLeft();\r\n                \t\t\t\t$horizontal.scrollLeft(scrollLeft);\r\n                \t\t\t}\r\n                \t\t\tscrollTopSourceStorage = scrollTopSource;\r\n                \t\t\tangular.element('.fixeddd').hide();\r\n                \t\t};\r\n\t\t\t\t\t}\r\n                });\r\n\r\n                function dateHideOnScroll(e) {\r\n                    element.find(\"input.datepicker\").each(function (i, el) {\r\n                        var dobj = $(el).data(\"daterangepicker\");\r\n                        if (dobj && dobj.isShowing) {\r\n                            dobj.hide()\r\n                        }\r\n                    });\r\n                }\r\n                //Cleaning floating elements on scroll\r\n                var lastOpenSelectDD;\r\n                function cleanFloatingElements(e) {\r\n                    element.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                        var autoComplete = $(this).data().autocomplete;\r\n                        if (autoComplete && autoComplete.visible) {\r\n                            autoComplete.hide();\r\n                        }\r\n                    });\r\n                    /* close select-dropdown */\r\n                    var $selectDd = $window.lastOpenedDropdownConfig;\r\n                    if ($selectDd && $selectDd != lastOpenSelectDD && $selectDd.origin.hasClass('select-dropdown')) {\r\n                        $selectDd.origin.trigger('close');\r\n                    }\r\n                    lastOpenSelectDD = $selectDd;\r\n                }\r\n                //End of cleaning floating elements on scroll\r\n                var lockScrollObser = false;\r\n                attrs.$observe(\"lockScroll\", function (a) {\r\n                    if (!lockScrollObser) {\r\n                        lockScrollObser = true;\r\n                        $timeout(ls.bind(this, a));\r\n                    } else {\r\n                        ls(a);\r\n                    }\r\n                });\r\n\r\n                function ls(a) {\r\n                    if (a) {\r\n                        var $scroller = element.find(\".scroll-content\");\r\n                        if (a == \"true\") {\r\n                            $scroller.data(\"scrolltop\", $scroller.scrollTop());\r\n                            $scroller.get(0).addEventListener(\"scroll\", lockScroll, true);\r\n                            if (onScrollLockUnlock) {\r\n                                onScrollLockUnlock(scope, { e: 'locked' });\r\n                                scope.$digest();\r\n                            }\r\n                        } else if (a == \"false\") {\r\n                            $scroller.get(0).removeEventListener(\"scroll\", lockScroll, true);\r\n                            if (onScrollLockUnlock) {\r\n                                onScrollLockUnlock(scope, { e: 'unLocked' });\r\n                                scope.$digest();\r\n                            }\r\n                        }\r\n                }\r\n\t\t\t\t\r\n                };\r\n                //Cleaning floating elements on scroll\r\n                function cleanFloatingElements(e) {\r\n                \telement.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                \t\tvar autoComplete = $(this).data().autocomplete;\n                \t\tif (autoComplete && autoComplete.visible) {\r\n                \t\t\tautoComplete.hide();\r\n                \t\t}\r\n                \t});\r\n                }\r\n            \t//End of cleaning floating elements on scroll\r\n                function lockScroll(e) {\r\n                    var st = $(this).data(\"scrolltop\");\r\n                    this.scrollTop = st;\r\n                    e.stopPropagation();\r\n                    return false;\r\n                };\r\n\r\n                var scrollOnUpdate = {\r\n                        handlers: [],\r\n                        addHandlers: function (func) {\r\n                            this.handlers.push(func);\r\n                        }\r\n                    };\r\n\r\n                scrollConfig.onUpdate = function () {\r\n                    var _this = this,\r\n                        _arguments = arguments;\r\n\r\n                    scrollOnUpdate.handlers.forEach(function (func) {\r\n                        if (typeof func === \"function\") {\r\n                            func.apply(_this, _arguments);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scrollOnUpdate.addHandlers(function (y, x) {\r\n                    if (y.closest('.modal.noTransform').length > 0) {\r\n                        var modalHeight = y.closest('.modal').height();\r\n                        y.closest('.modal').css('top', window.innerHeight / 2 - modalHeight / 2 + 'px');\r\n                    }\r\n                });\r\n\r\n                var scrollToElement,\r\n                    scrollToElementName;\r\n                if (attrs.scrollToElement) {\r\n\r\n                    scrollOnUpdate.addHandlers(function (y, x) {\r\n                        var $scrollToElementName = y.find(scrollToElementName.content);\r\n                        if (scrollToElementName && scrollToElementName.status && $scrollToElementName.length) {\r\n                            y.animate({ scrollTop: (($scrollToElementName.offset().top - y.children('div').offset().top) - 10) }, \"slow\");\r\n                        }\r\n                    });\r\n\r\n                    scrollToElement = attrs.$observe('scrollToElement', function (value) {\r\n                        scrollToElementName = attrs.scrollToElement && JSON.parse(attrs.scrollToElement);\r\n                    });\r\n                }\r\n\r\n                setTimeout(function () {\r\n                    var scrollWrapper = angular.element('#' + scope.scrollid);\r\n                    var mergedConfig = angular.merge(scrollConfig, customConfig);\r\n                    scrollWrapper.scrollbar(mergedConfig);\r\n\r\n                \t//Fixed header on scroll\r\n                    var scrlTop;\r\n                    scrollWrapper.scroll(function (e) {\r\n                        var _this = $(this),\r\n                            currScrlTop = _this.scrollTop(),\r\n                            dir;\r\n\r\n                        if (isFixedHeader) {\r\n                            scope.fixedHeader(e);\r\n                        } else if (isScrollDate) {\r\n                            dateHideOnScroll(e);\r\n                        }\r\n                        if (attrs.scrollBreakPoints) {\r\n                            if (currScrlTop > scrlTop) {\r\n                                dir = \"upward\";\r\n                            } else if (currScrlTop < scrlTop) {\r\n                                dir = \"downward\";\r\n                            };\r\n                            scrollBreakPoints(currScrlTop, dir);\r\n                        }\r\n                        cleanFloatingElements(e);\r\n                        scrlTop = currScrlTop;\r\n                    });\r\n                    scrlTop = scrollWrapper.scrollTop();\r\n\r\n                    // for ie update the icon inside the smartscroll\r\n                    var ua = window.navigator.userAgent, use = scrollWrapper.find('use');\r\n                    if (ua.indexOf('MSIE') !== undefined || ua.indexOf('Trident/') !== undefined || ua.indexOf('Edge/') !== undefined) {\r\n                        if (use.length > 0) {\r\n                            use.each(function () {\r\n                                var _this = angular.element(this), currentItem = _this.attr(\"xlink:href\");\r\n                                _this.attr(\"xlink:href\", \"\").attr(\"xlink:href\", currentItem);\r\n                    });\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    if (scrollToElement) {\r\n                        scrollToElement();\r\n                    }\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartScroll/smartScrollTemplate.html'\r\n        };\r\n    }]);\r\n})();\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartLazyLoad', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                smartLazyLoad: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var scrollElement = element.closest('.scrollbar-outer');\r\n                scrollElement.scroll(function () {\r\n                    if (this.scrollTop + this.offsetHeight >= this.scrollHeight) {\r\n                        scope.$apply(function () {\r\n                            scope.smartLazyLoad();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n})();","(function() {\r\n    'use strict';\r\n    \r\n    angular.module('SMART2').directive('smartPlaceholder', ['$translate', 'ScrollTo', function ($translate, ScrollTo) {\r\n        return {\r\n            restrict: 'A',\r\n            replace: true,\r\n            link: function (scope, element, attrs) {\r\n                window.activePlaceholder = element;\r\n\t\t\t\tvar tmpPlaceholder = getHTMLPlaceholder(scope);\r\n                element.addClass((!scope.property.isMandatory ? 'optionalField ' : '') + ((scope.property.attributes.readonly ? 'readOnlyField' : '')));\r\n                element.find('.smart-ph-label').html('<span>' + $translate.instant(scope.property.label) + '</span>');\r\n                element.find('.smart-ph-value').html('<span>' + tmpPlaceholder + '</span>');\r\n                element.attr('title', tmpPlaceholder);\r\n\t\t\t\t\r\n\t\t\t\tif (tmpPlaceholder != '') {\r\n                    element.find('.smart-ph-label').addClass('active');\r\n                }\r\n\r\n                if (scope.property.attributes.disable || scope.property.attributes.readonly) {\r\n                    element.find('.smart-ph-value').addClass('disabled');\r\n                }\r\n                else {\r\n                    element.attr('tabindex', 0);\r\n                }\r\n\t\t\t\t\r\n                var onAttributesChange = scope.$watchGroup(['property.attributes.disable', 'property.attributes.readonly', 'model.' + scope.property.data, 'property.validate', 'property.focus'], function (newVal, oldVal) {\r\n\t\t\t\t\t//\tdisable and readonly change listener\r\n\t\t\t\t\tif(!angular.equals(newVal[0], oldVal[0]) || !angular.equals(newVal[1], oldVal[1])) {\r\n\t\t\t\t\t    if (newVal[0] || newVal[1]) {\r\n\t\t\t\t\t        element.find('.smart-ph-value').addClass('disabled');\r\n\t\t\t\t\t        element.attr('tabindex', -1);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t    else {\r\n\t\t\t\t\t        element.find('.smart-ph-value').removeClass('disabled');\r\n\t\t\t\t\t        element.attr('tabindex', 0);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//\tdata change listener\r\n\t\t\t\t\tif(!angular.equals(newVal[2], oldVal[2])) {\r\n\t\t\t\t\t\ttmpPlaceholder = getHTMLPlaceholder(scope);\r\n\t\t\t\t\t\telement.find('.smart-ph-value').html('<span>' + tmpPlaceholder + '</span>');\r\n\t\t\t\t\t\telement.attr('title', tmpPlaceholder);\r\n\t\t\t\t\t\tif (tmpPlaceholder != '') {\r\n\t\t\t\t\t\t\telement.find('.smart-ph-label').addClass('active');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t    element.find('.smart-ph-label').removeClass('active');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                    //\tvalidate change listener\r\n\t\t\t\t\tif (!angular.equals(newVal[3], oldVal[3])) {\r\n\t\t\t\t\t    if (scope.property.validate) {\r\n\t\t\t\t\t        if ((angular.isUndefined(scope.property.attributes.readonly) || scope.property.attributes.readonly == false) &&\r\n                                (angular.isUndefined(scope.property.attributes.disable) || scope.property.attributes.disable == false)) {\r\n\t\t\t\t\t            validate();\r\n\t\t\t\t\t        }\r\n\t\t\t\t\t        scope.property.validate = false;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\r\n                    //\tfocus change listener\r\n\t\t\t\t\tif (!angular.equals(newVal[4], oldVal[4])) {\r\n\t\t\t\t\t    if (scope.property.focus) {\r\n\t\t\t\t\t        ScrollTo.perform(element, angular.element('#' + scope.formWidgetId));\r\n\t\t\t\t\t        scope.onFocus();\r\n\t\t\t\t\t        scope.property.focus = false;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n                });\r\n\r\n                var validate = function () {\r\n                    var model = eval('scope.model.' + scope.property.data);\r\n                    var error;\r\n\r\n                    if(scope.property.isMandatory) {\r\n                        if ((scope.property.attributes.type === 'text' || angular.isUndefined(scope.property.attributes.type)) && (angular.isUndefined(model) || model == null || model.trim() == '')) {\r\n                            error = $translate.instant(\"enterValueErrMsg\");\r\n                        }\r\n                        else if (scope.property.attributes.type == 'autocomplete' && (angular.isUndefined(model) || model == null || model == '' || (model && model.hasOwnProperty('value') && model.value.trim() == ''))) {\r\n                            error = $translate.instant(\"enterValueErrMsg\");\r\n                        }\r\n                        else if (scope.type == 'number' && isNaN(scope.ngModel)) {\r\n                            error = $translate.instant(\"enterNumberErrMsg\");\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isUndefined(error) && scope.property.rules) {\r\n                        var rules = scope.property.rules;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, model))) {\r\n                                    error = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (error) {\r\n                        element.find('.smart-ph-label').addClass('active');\r\n                        element.find('.smart-ph-value').addClass('invalid');\r\n                        element.find('.smart-ph-error').html(error);\r\n                        //scope.$parent.errorMessage = error;\r\n                    }\r\n                    else {\r\n                        element.find('.smart-ph-value').removeClass('invalid');\r\n                        element.find('.smart-ph-error').html('');\r\n                        if (tmpPlaceholder == '') {\r\n                            element.find('.smart-ph-label').removeClass('active');\r\n                        }\r\n                        //scope.$parent.errorMessage = undefined;\r\n                    }\r\n                };\r\n\r\n                //validate();\r\n                \r\n                scope.onFocus = function (e) {\r\n                    if (scope.property.attributes.disable || scope.property.attributes.readonly) {\r\n                        return;\r\n                    }\r\n                    scope.$parent.isPreviewMode = false;\r\n                };\r\n\r\n                scope.onRemoveButtonClick = function (e) {\r\n                    scope.property.isVisible = !scope.property.isVisible;\r\n                    e.stopPropagation();\r\n                };\r\n\r\n                scope.$parent.onEditableRender = function (editableScope, editableEle) {\r\n                    editableEle.find('input').focus();\r\n                    editableEle.find('input').select();\r\n                    element.attr('tabindex', -1);\r\n                    if (this.errorMessage) {\r\n                        editableEle.find('input').addClass('invalid');\r\n                        editableEle.find('label').attr('data-error', this.errorMessage);\r\n                        this.errorMessage = undefined;\r\n                    }\r\n                };\r\n\r\n                scope.$parent.onStopEdit = function (editableScope, editableEle) {\r\n                    this.isPreviewMode = true;\r\n                    if (editableScope.errorMessage != undefined || editableScope.errorMessage != null) {\r\n                        this.errorMessage = editableScope.errorMessage;\r\n                        setTimeout(function () {\r\n                            window.activePlaceholder.find('.smart-ph-label').addClass('active');\r\n                            window.activePlaceholder.find('.smart-ph-value').addClass('invalid');\r\n                            window.activePlaceholder.find('.smart-ph-error').html(editableScope.errorMessage);\r\n                        });\r\n                    }\r\n                };\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onAttributesChange();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSection/smartPlaceholderTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\t\r\n\tvar setPrecisionLimits = function (number, decimalPrecision, minMaxPrecision) {\r\n        if (number != undefined) {\r\n            var arr = (number.toString()).split('e')\r\n            if (arr.length > 1 && parseInt(arr[1]) < 0) {\r\n                number = (number).toFixed(6);\r\n            }\r\n            var tempArr = number.toString().split('.');\r\n            if (tempArr != undefined && tempArr.length > 1) {\r\n                var preDecimal = tempArr[0];\r\n                if (preDecimal != 0 && preDecimal.toString().length > 20) {\r\n                    var tempVal = preDecimal.toString().substring(0, 19);\r\n                    number = parseInt(tempVal);\r\n                }\r\n            }\r\n            else {\r\n                if (number != 0 && number.toString().length > 20) {\r\n                    var tempVal = number.toString().substring(0, 19);\r\n                    number = parseInt(tempVal);\r\n                }\r\n            }\r\n            if (decimalPrecision != undefined) {\r\n                number = parseFloat(parseFloat(number).toFixed(decimalPrecision));\r\n            }\r\n            else if (minMaxPrecision !== undefined && minMaxPrecision !== '') {\r\n                var splitPrecision = JSON.parse(minMaxPrecision);\r\n                if (splitPrecision.length > 2 || splitPrecision.length < 1) {\r\n                    //\tdon't do anything\r\n                }\r\n                else {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    var highPrecisionLimit = splitPrecision[1];\r\n\r\n                    var postDecimalNumbers = ((number + \"\").split(\".\")[1] != undefined) ? (number + \"\").split(\".\")[1].length : 0;\r\n\r\n                    if (postDecimalNumbers == 0) {\r\n                        //\tdon't do anything\r\n                    }\r\n                    else if (lowerPrecisionLimit > postDecimalNumbers && postDecimalNumbers < highPrecisionLimit && postDecimalNumbers != 0) {\r\n                        number = parseFloat(parseFloat(number).toFixed(lowerPrecisionLimit));\r\n                    }\r\n                    else if (postDecimalNumbers >= highPrecisionLimit && postDecimalNumbers != 0) {\r\n                        var fixed = Math.pow(10, highPrecisionLimit);\r\n                        number = Math.floor(number * fixed) / fixed;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return number;\r\n    };\r\n\r\n\r\n    var getFormattedDate = function (dateVal, dateFormat, isSetFromGrid) {\r\n        var output = '';\r\n        dateFormat = dateFormat.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n        var isDateBlank = false;\r\n        var doesContainDateString = isSetFromGrid == 'true' ? true : (dateVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n\r\n        if (dateVal == \"\" || dateVal == null) {\r\n            dateVal = Date.now();\r\n            isDateBlank = true;\r\n        }\r\n        else {\r\n            if (doesContainDateString) {\r\n                var tmpModel = (dateVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                tmpModel = tmpModel.split('+');\r\n                tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + dateVal + '\").getTime()') : tmpModel[0]));\r\n                output = moment(tmpModel).format(dateFormat);\r\n            }\r\n            else {\r\n                if (Object.prototype.toString.call(dateVal) !== '[object Date]') {\r\n                    dateVal = parseInt(dateVal);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!isDateBlank) {\r\n            if (!doesContainDateString) {\r\n                output = moment(dateVal).format(dateFormat);\r\n            }\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    var getHTMLPlaceholder = function (scope) {\r\n        var placeHolder;\r\n        var tmpModel = eval(\"scope.model.\" + scope.property.data);\r\n\r\n        switch (scope.property.type) {\r\n            case 'textfield':\r\n                switch (scope.property.attributes.type) {\r\n                    case 'number':\r\n                        placeHolder = setPrecisionLimits(tmpModel, scope.property.attributes.decimalprecision, scope.property.attributes.minmaxprecision);\r\n                        break;\r\n\r\n                    case 'date':\r\n                        placeHolder = getFormattedDate(tmpModel, scope.property.attributes.format);\r\n                        break;\r\n\r\n                    case 'autocomplete':\r\n                        if (tmpModel == undefined || tmpModel == null || tmpModel == '') {\r\n                            return '';\r\n                        }\r\n                        var str = scope.property.attributes.displayformat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                        try {\r\n                            var parentSplit = str.split('{');\r\n                            for (var j = 0; j < parentSplit.length; j++) {\r\n                                var childSplit = parentSplit[j].split('}');\r\n                                for (var k = 0; k < childSplit.length; k++) {\r\n                                    if (childSplit[k].indexOf('.') > 0 || tmpModel.hasOwnProperty(childSplit[k])) {\r\n                                        evalResult = eval('tmpModel.' + childSplit[k]);\r\n                                        evaluatedKeysCounter++;\r\n                                        if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                            evalResult = '';\r\n                                            nullKeysCounter++;\r\n                                        }\r\n                                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (evaluatedKeysCounter == nullKeysCounter) {\r\n                                str = '';\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                        placeHolder = str;\r\n                        break;\r\n\r\n                    default:\r\n                        placeHolder = eval(\"scope.model.\" + scope.property.data);\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            case 'dropdown':\r\n            case 'select':\r\n                placeHolder = (eval(\"scope.model.\" + scope.property.data + (scope.property.attributes.displaykey ? \".\" + scope.property.attributes.displaykey : (scope.property.attributes.datakey ? \"\" + scope.property.attributes.datakey : \"\"))));\r\n                break;\r\n        }\r\n        return placeHolder == null || placeHolder == undefined ? '' : placeHolder;\r\n    };\r\n\t\r\n})();    ","  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Section\r\n   * @description This directive is useful for creating a section.\r\n   * \r\n   * @attr {String} label\r\n   *    Label to be displayed on section header. If 'is-header' is set to true, label will be displayed on section header.\r\n   * @attr {Boolean} plain\r\n   *    If set to true, section with no style will be generated\r\n   * @attr {Boolean} is-collapsible\r\n   *    If set to true, section will be collapsible\r\n   * @attr {String} header-template\r\n   *    This attribute is useful for creating sections with custom header templates.\r\n   *    'header-template' is expected to be an URL of a template.\r\n   * @attr {Boolean} is-active\r\n   *    If set to false and if 'is-collapsible' is set to true, section will be displayed in collapsed mode. Default value is true.      \r\n   * @attr {Boolean} is-header\r\n   *    If set to true, section-header will be displayed. Default value is true.\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n    \r\n   * @example \r\n   Dynamic: (Section with header)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"label\": \"Section header\",\r\n                        \"isHeader\": true,\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example \r\n   Dynamic: (Section with custom header-template)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"headerTemplate\": \"abc.html\",\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example \r\n   Dynamic: (Section with collapsible header)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"headerTemplate\": \"abc.html\",\r\n                        \"isCollapsible\": true,\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example\r\n   Static:\r\n   <smart-section>\r\n        Section contents will go here\r\n    </smart-section> \r\n\r\n   * @example\r\n   Static: (Section with header)\r\n   <smart-section label=\"Section Header\" is-header=\"true\">\r\n        Section contents will go here\r\n   </smart-section>\r\n\r\n   * @example\r\n   Static: (Section with collpsible header)\r\n   <smart-section is-collapsible=\"true\">\r\n        Section contents will go here\r\n   </smart-section>\r\n        \r\n   * @example\r\n   Static: (Section with header and content place holder)\r\n   <smart-section is-header=\"true\">\r\n        <smart-section-header>\r\n            Section header will go here\r\n        </smart-section-header>\r\n        <smart-section-content>\r\n            Section contents will go here\r\n        </smart-section-content>\r\n    </smart-section>    \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var Textid = 16011982;\r\n    var sectionCounter = 0;\r\n    \r\n    angular.module('SMART2').directive('smartSection', ['$timeout', '$parse', function ($timeout, $parse) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: {\r\n                'header': '?smartSectionHeader',\r\n                'body': '?smartSectionBody'\r\n            },\r\n            scope: {\r\n                config: '=?',\r\n                model: '=?',\r\n                label: '@',\r\n                isSequential: '@',\r\n                isMandatory: '@',\r\n                isDraggable: '@',\r\n                parentScope: '=?',\r\n                formWidgetId: '@',\r\n                isCollapsible: '@',\r\n                enableFieldPreview: '@',\r\n                headerTemplate: '@',\r\n                isActive: '=?',\r\n                isHeader: '@',\r\n                plain: '@',\r\n                onClick: '&',\r\n                onHeaderClick: '&',\r\n                revisionMode:'@',\r\n                isSwitchable: '@',\r\n                onClickSwitchable: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.isSwitchFunc = function () {\r\n                    scope.onClickSwitchable({ \"section\": scope.config });\r\n                }\r\n               if (attrs.id !== '' || attrs.id !== undefined || attrs.id !== null) {\r\n                    scope.sectionId = attrs.id;\r\n                }\r\n                else {\r\n                    scope.sectionId = 'section-' + sectionCounter;\r\n                    sectionCounter++;\r\n                }\r\n\r\n                element.attr('id', scope.sectionId);\r\n\r\n                scope.collapsible = scope.$eval(scope.isCollapsible) == true ? true : false;\r\n                scope.active = angular.isUndefined(scope.isActive) || scope.isActive == true ? true : false;\r\n                scope.header = scope.$eval(scope.isHeader) ? true : false;\r\n\r\n                if(!scope.collapsible) {\r\n                    scope.active = true;\r\n                }\r\n                else {\r\n                    scope.header = true;\r\n                }\r\n\r\n                scope.isCollapsed = scope.active;\r\n\r\n                if(!scope.headerTemplate) {\r\n                    scope.headerTemplate = '';\r\n                }\r\n                scope.formLoaderConfig = { bgwhite: true, plain: true, center: true, message: \"\" };\r\n\t\t\t\t/*\r\n\t\t\t\t * Update optional field item\r\n\t\t\t\t */\r\n                var onRowsConfig = scope.$watch('config.rows', function (newConfig) {\r\n                    if(newConfig) {\r\n                        var rowsLen = scope.config.rows.length;\r\n                        for (var j = 0; j < rowsLen; j++) {\r\n                            var propLength = scope.config.rows[j].properties.length;\r\n                            for (var k = 0; k < propLength; k++) {\r\n                                var tData = scope.config.rows[j].properties[k];\r\n                                if (!tData.isMandatory) {\r\n                                    updateOptionalField(tData);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                    }\r\n                }, true);\r\n                    \r\n                var updateOptionalField = function (item) {\r\n                    var optFieldLen = scope.config.optionalFields.length;\r\n                    for (var i = 0; i < optFieldLen; i++) {\r\n                        var tData = scope.config.optionalFields[i];\r\n                        if (item.label == tData.label) {\r\n                            tData.visible = item.isVisible;\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\r\n                /*\r\n                 * Get row's visible properties length\r\n                 */\r\n                var getVisiblePropertiesLength = function (rowIndex) {\r\n                    var visiblePropertiesLength = 0,\r\n                        rowsPropLen = scope.config.rows[rowIndex].properties.length;\r\n                    for (var i = 0; i < rowsPropLen; i++) {\r\n                        var tData = scope.config.rows[rowIndex].properties[i];\r\n                        if (tData.isVisible && !tData.isHidden) {\r\n                            visiblePropertiesLength++;\r\n                        }\r\n                    }\r\n                    return visiblePropertiesLength;\r\n                };\r\n\r\n\r\n                scope.onOptionalFieldClick = function (isLabelClicked, item) {\r\n                    if (isLabelClicked && item.isVisible) {\r\n                        return;\r\n                    }\r\n\r\n                    /*\r\n                     *  If row's visible properties length is 0\r\n                     *  then splice the row and push it at the end of section\r\n                     */\r\n                    var tmpRow = scope.config.rows[item.rowIndex],\r\n                        tmpPropIndxData = tmpRow.properties[item.propertyIndex];\r\n                    if (!scope.$eval(scope.isSequential) && getVisiblePropertiesLength(item.rowIndex) == 0) {\r\n                        scope.config.rows.splice(item.rowIndex, 1);\r\n                        scope.config.rows.push(tmpRow);\r\n                        item.rowIndex = scope.config.rows.length - 1;\r\n                    }\r\n\r\n                    tmpPropIndxData.isVisible = !tmpPropIndxData.isVisible;\r\n\r\n                    /*\r\n                     *  scope.isSequential is set to 'true', form-widget-property would be added \r\n                     *  where it is positioned in the JSON structure else \r\n                     *  form-widget-property would be added at the end of row\r\n                     */\r\n                    if (!scope.$eval(scope.isSequential) && tmpPropIndxData.isVisible) {\r\n                        //var tmpProperty = scope.config.rows[item.rowIndex].properties[item.propertyIndex];\r\n                        tmpRow.properties.splice(item.propertyIndex, 1);\r\n                        tmpRow.properties.push(tmpPropIndxData);\r\n                        var rowsPropLength = scope.config.rows[item.rowIndex].properties.length;\r\n                        for (var i = 0; i < rowsPropLength; i++) {\r\n                            var optLength = scope.config.optionalFields.length;\r\n                            for (var j = 0; j < optLength; j++) {\r\n                                if (tmpRow.properties[i].label == scope.config.optionalFields[j].label) {\r\n                                    scope.config.optionalFields[j].propertyIndex = i;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    item.visible = !item.visible;\r\n                    //  Expand the section\r\n                    if (item.visible) {\r\n                        var clearMe = setTimeout(function () {\r\n                            expandSection();\r\n                            clearTimeout(clearMe);\r\n                            clearMe = null;\r\n                        }, 250);\r\n                    }\r\n                };\r\n\r\n                var isActiveTriggered = false;\r\n\r\n                /*\r\n                 * Expand section if isActive is set to true\r\n                 */\r\n                var onIsActive = scope.$watch('isActive', function (newValue) {\r\n                \tif (angular.isDefined(newValue) && newValue) {\r\n                \t\tisActiveTriggered = true;\r\n                    \texpandSection();\r\n                    \tscope.isActive = false;\r\n                    }\r\n                });\r\n\r\n\r\n                /*\r\n                 * On optional field click listener\r\n                 */\r\n                var onOptionalFieldClick = scope.$on('optionalFieldClick', function (event, args) {\r\n                    try {\r\n                        if (args.item.sectionKey === scope.config.key) {\r\n                            scope.onOptionalFieldClick(args.isLabelClicked, args.item);\r\n                        }\r\n                    }\r\n                    catch(e) {}\r\n                });\r\n\r\n\r\n                /*\r\n                 *  Expand section\r\n                 */\r\n                var expandSection = function () {\r\n                    var collapsibleHdr = element.find('.collapsible-header');\r\n                    if (!collapsibleHdr.hasClass('active')) {\r\n                        collapsibleHdr.trigger('click');\r\n                    }\r\n                    else if (!collapsibleHdr.hasClass('active')) {\r\n                        collapsibleHdr.trigger('click');\r\n                    }\r\n                };\r\n\r\n                var isClicked = false\r\n\r\n               var clrTimeout = setTimeout(function () {\r\n                    element.find('.collapsible-header').click(function () {\r\n                    \tvar ele = this;\r\n\r\n                        scope.$evalAsync(function () {\r\n                        \tif (isClicked && !isActiveTriggered)\r\n                        \t\treturn;\r\n                        \t\r\n                        \tisClicked = true;\r\n                            scope.isCollapsed = angular.element(ele).hasClass('active');\r\n                            scope.active = scope.isCollapsed;\r\n                            scope.onHeaderClick();\r\n                            scope.onClick();\r\n                        \tsetTimeout(function () {\r\n                        \t    isClicked = false;\r\n                        \t}, 500);\r\n                        \tisActiveTriggered = false;\r\n                            clearTimeout(clrTimeout);\r\n                            clrTimeout = null;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                \r\n                /*\r\n                 *  Expand section on header focus\r\n                 */\r\n                scope.onSectionHeaderFocus = function (e) {\r\n                    if ($(e.target).hasClass('section-header-focuser') && !scope.active) {\r\n                        scope.config.isContentLoaded = true;\r\n                        scope.active = true;\r\n                        //scope.isCollapsed = true;\r\n                        expandSection();\r\n                    }\r\n                    /* in focus for section move on top */\r\n                    var conf = scope.config.key,\r\n                     formwidget = scope.formWidgetId,\r\n                     $itemSelected = $('#' + conf),\r\n                     staticTopmargin = 64; // 64 is subheader height\r\n\r\n                    var displacementItem = $itemSelected.offset().top - angular.element('#' + formwidget + '-sortable').offset().top;\r\n\r\n                    displacementItem = displacementItem + staticTopmargin;\r\n                    setTimeout(function () {\r\n                        angular.element('body,html').animate({\r\n                            scrollTop: displacementItem\r\n                        }, \"medium\");\r\n                    }, 200);\r\n                    /* in focus for section move on top end */\r\n                };\r\n                \r\n\r\n                /*\r\n                 *  Remove all listeners on scope destroy\r\n                 */\r\n                scope.$on('$destroy', function () {\r\n                    onRowsConfig();\r\n                    onIsActive();\r\n                    onOptionalFieldClick();\r\n                    element.find('.collapsible-header').off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSection/smartSectionTemplate.html'\r\n        };\r\n    }]);\r\n    \r\n    var angular2BootstrapTimeout;\r\n\r\n    angular.module('SMART2').directive('smartSectionItemRenderer', ['$compile', 'formWidgetUtils', '$translate', '$templateCache', '$timeout', function ($compile, formWidgetUtils, $translate, $templateCache, $timeout) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: false,\r\n            link: function (scope, element, attrs) {\r\n                var html = \"\", commonAttributes;\r\n\r\n                if (scope.section) {\r\n                    if (scope.section.controller) {\r\n                        //  Creating dataModel variable so that child controller can access it using $scope.formDataModel\r\n                        scope.formDataModel = scope.$parent.$parent.$parent.modelData;\r\n\r\n                        html += '<div ng-controller=\"' + scope.section.controller + '\">';\r\n                    }\r\n\r\n                    if (scope.section.isLazyLoadEnabled) {\r\n                        scope.section.isActive = false;\r\n                    }\r\n\r\n                    //scope.section.isContentLoaded = !angular.copy(scope.section.isLazyLoadEnabled);\r\n\r\n                    //  Section's primary attribute and can be optional\r\n                    scope.extendedSectionConfig = angular.extend({\r\n                        isMandatory: false,\r\n                        isCollapsible: true,\r\n                        isDraggable: false,\r\n                        isHeader: true,\r\n                        isActive: true,\r\n                        isHidden: true,\r\n                        isSwitchable: false,\r\n                        isFieldPreviewEnabled: false,\r\n                        isSectionDisable: false,\r\n                        isLazyLoadEnabled: false,\r\n                        headerTemplate: ''\r\n                    }, scope.section);\r\n\r\n                    scope.section.isLoading = true;\r\n                    scope.section.isContentLoaded = false; // !angular.copy(scope.section.isLazyLoadEnabled);\r\n\r\n                    var cancelTOut = $timeout(function () {\r\n                        scope.section.isLoading = false;\r\n                        scope.section.isContentLoaded = !angular.copy(scope.section.isLazyLoadEnabled);\r\n                        $timeout.cancel(cancelTOut);\r\n                        cancelTOut = null;\r\n                    }, scope.$index * 500);\r\n\r\n                    commonAttributes = ' label=\"{{section.label | translate}}\" config=\"section\" model=\"modelData\" plain=\"{{section.plain}}\" is-sequential=\"{{isSequential}}\" ' + formWidgetUtils.getAttributesMapping('primary', scope.extendedSectionConfig, scope, true) + ' parent-scope=\"' + (scope.section.controller ? '$parent.$$childTail' : '$parent.$parent.$parent.$parent') + '\" form-widget-id=\"{{formWidgetId}}\" ';\r\n\r\n                    commonAttributes += \"revision-mode=\" + ((!scope.revisionMode || scope.revisionMode == \"false\") ? \"'false'\" : \"'true'\"); // added for revision mode\r\n\r\n                    html += '<smart-section id=' + scope.formWidgetId + '-section-' + scope.$index + ' ' + (scope.enableFieldPreview ? ' enable-field-preview=\"true\" ' : ' ') + commonAttributes + formWidgetUtils.mapEvents([\r\n                        { type: 'on-click', listener: 'onSectionClick(section)' },\r\n                        // { type: 'on-header-click', listener: formWidgetUtils.generateFunctionWithParams(scope.section.onHeaderClick, '$parent.$parent.$parent.$parent', true) },\r\n                        { type: 'on-header-click', listener: 'onSectionHeaderClick(section)' },\r\n                          { type: 'on-click-switchable', listener: formWidgetUtils.generateFunctionWithParams(scope.section.onClickSwitchable, '$parent.$parent.$parent.$parent', true) }\r\n                    ]) + '></smart-section>';\r\n\r\n                    if (scope.section.controller) {\r\n                        html += '</div>';\r\n                    }\r\n                }\r\n                else {\r\n                    var ngModelMapping, optionsMapping;\r\n\r\n\r\n                    if (scope.property.type == 'subsection') {\r\n                        ngModelMapping = 'model-data=\"model.' + scope.property.data + '\"' + 'form-model=\"model\"';\r\n                    }\r\n                    else if (scope.property.type == 'dropdown') {\r\n                        ngModelMapping = 'ng-model=\"model.' + scope.property.data + '\"';\r\n                        if (angular.isDefined(scope.property.optionsData))\r\n                            optionsMapping = 'options=\"model.' + scope.property.optionsData + '\"';\r\n                    }\r\n                    else {\r\n                        ngModelMapping = 'ng-model=\"model.' + scope.property.data + '\"';\r\n\r\n                        try {\r\n                            if (scope.property.attributes.ngModelOptions.getterSetter) {\r\n                                ngModelMapping = 'ng-model=\"parentScope.' + scope.property.data + '\"';\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n\r\n                    var areaType = false;\r\n                    if (typeof scope.property.attributes != 'undefined' && typeof scope.property.attributes.type != 'undefined' && scope.property.attributes.type == 'area')\r\n                    \tareaType = true;\r\n\r\n                    commonAttributes = ' class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + (scope.property.type != 'subsection' ? (scope.property.type == 'textfield' && areaType) ? ' area-height-manager' : ' line-height-manager' : '') + '\" label=\"{{property.label | translate}}\" focus=\"' + (typeof scope.property.focus == 'string' ? 'parentScope.' + scope.property.focus : 'property.focus') + '\" validate=\"' + (typeof scope.property.validate == 'string' ? 'parentScope.' + scope.property.validate : 'property.validate') + '\" ' + ngModelMapping + ' ' + optionsMapping + ' ' + formWidgetUtils.getAttributesMapping('primary', scope.property, scope) + ' parent-element=\"{{formWidgetId}}\" ' + formWidgetUtils.getAttributesMapping('secondary', scope.property.attributes, scope);\r\n\r\n                    switch (scope.property.type) {\r\n                        case 'textfield':\r\n                            var enableFieldPreview = scope.enableFieldPreview == 'true' || scope.enableFieldPreview == true;\r\n\r\n                            if (enableFieldPreview) {\r\n                                scope.isPreviewMode = true;\r\n                                html = '<div style=\"margin-bottom: 15px;\" class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + ' input-field\" smart-placeholder ng-if=\"isPreviewMode\"></div>';\r\n                            }\r\n                            else {\r\n                                html = '';\r\n                            }\r\n\r\n                            html += '<smart-textfield' + (enableFieldPreview ? ' ng-if=\"!isPreviewMode\" ' : ' ') + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-focus', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onFocus, 'parentScope') },\r\n                                { type: 'on-blur', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onBlur, 'parentScope') },\r\n                                { type: 'on-key-up', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyUp, 'parentScope') },\r\n                                { type: 'on-key-down', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyDown, 'parentScope') },\r\n                                { type: 'on-key-press', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyPress, 'parentScope') },\r\n                                { type: 'on-enter', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onEnter, 'parentScope') },\r\n                                { type: 'on-select', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onSelect, 'parentScope') },\r\n                                { type: 'on-date-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDateChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-textfield>';\r\n                            break;\r\n\r\n                        case 'dropdown':\r\n                        case 'select':\r\n                            html = '<smart-select validate=\"property.validate\" ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-select>';\r\n                            break;\r\n\r\n                        case 'radio':\r\n                            html = '<smart-radio gap=\"true\"' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-radio>';\r\n                            break;\r\n\r\n                        case 'checkbox':\r\n                            html = '<smart-checkbox fill=\"true\" min-height=\"50px\" ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-checkbox>';\r\n                            break;\r\n\r\n                        case 'switch':\r\n                            html = '<smart-switch ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-switch>';\r\n                            break;\r\n\r\n                        case 'subsection':\r\n                            /*\r\n                             *  Check if subsection is angular2 enabled i.e. if sub-section should boostrap Angular2 app\r\n                             */\r\n                            if (scope.property.isAngular2Enabled) {\r\n                                html = $templateCache.get(scope.property.templateUrl);\r\n                            }\r\n                            else {\r\n                                /*\r\n                                 *  Convert onLoad function in a way that function name should be converted to subsection controller function\r\n                                 *  and its parameteres should be converted into parent controller's variables\r\n                                 */\r\n                                var onLoadFunction = '';\r\n                                if (scope.property.onLoad == '' || scope.property.onLoad == undefined || scope.property.onLoad == null) {\r\n                                    scope.property.onLoad = '';\r\n                                }\r\n                                if (scope.property.onLoad != '') {\r\n                                    onLoadFunction = formWidgetUtils.generateFunctionWithParams(scope.property.onLoad, 'parentScope');\r\n                                    onLoadFunction = onLoadFunction.replace('parentScope.' + scope.property.onLoad.split('(')[0], '$$$childHead.' + scope.property.onLoad.split('(')[0]);\r\n                                    onLoadFunction = onLoadFunction.replace(',property', '');\r\n                                }\r\n                                html = '<smart-subsection class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + ' padding0\" controller=\"{{property.controller}}\" init=\"{{property.init}}\" template-url=\"{{property.templateUrl}}\" parent-scope=\"parentScope\" widget-scope=\"parentScope.$parent.$parent.$parent\"' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                    { type: 'on-load', listener: onLoadFunction }\r\n                                ]) + '></smart-subsection>';\r\n                            }\r\n                            break;\r\n\r\n                        case 'revision':\r\n                            var revisionAttrs = [\r\n                                \"class = '\" + formWidgetUtils.getColspanClass(scope.property.colspan) + \"'\",\r\n                                \"label='{{::property.label | translate}}'\",\r\n                                \"old-data='::property.attributes.oldData'\",\r\n                                \"new-data='::property.attributes.newData' ng-if='::property.label'\"\r\n                            ].join(\" \");\r\n                            html = '<smart-revision '+ revisionAttrs +'></smart-revision>';\r\n                            break;\r\n                    }\r\n                }\r\n                element.html(html);\r\n\r\n                if (scope.property && scope.property.isAngular2Enabled) {\r\n                    if (angular2BootstrapTimeout) {\r\n                        clearInterval(angular2BootstrapTimeout);\r\n                        angular2BootstrapTimeout = undefined;\r\n                    }\r\n                    angular2BootstrapTimeout = setInterval(function () {\r\n                        //  Angular2 app is ready to be bootstrapped\r\n                        if (window.SmartAngular2) {\r\n                            window.SmartAngular2.bootstrap();\r\n                            clearInterval(angular2BootstrapTimeout);\r\n                        }\r\n                    }, 250);\r\n                }\r\n                else {\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    //angular.module('SMART2').directive('smartSectionPreview', ['$compile', '$translate', function ($compile, $translate) {\r\n    //    return {\r\n    //        restrict: 'AE',            \r\n    //        scope: false,\r\n    //        link: function (scope, element, attrs) {\r\n    //            var html = \"\";\r\n    //            var config = scope.$parent.config;\r\n    //            var model = scope.$parent.model;\r\n                \r\n\r\n    //            function getObjectValue(field, model, dataKey)\r\n    //            {\r\n    //                if (field.type)\r\n    //                {\r\n    //                    switch (field.type)\r\n    //                    {\r\n    //                        case 'textfield':\r\n    //                            if (field.attributes.type)\r\n    //                            {\r\n    //                                if (field.attributes.type == 'autocomplete') {\r\n    //                                    var obj = eval(\"model.\" + field.data);\r\n    //                                    if (obj)\r\n    //                                    {\r\n    //                                        if (field.attributes.displayformat.indexOf('-') > -1)\r\n    //                                        {\r\n    //                                            var splittedDisplayFormat = field.attributes.displayformat.split('-');\r\n    //                                            var result = \"\";\r\n    //                                            for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                                result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                                if (i < splittedDisplayFormat.length - 1)\r\n    //                                                    result += '--';\r\n    //                                            }\r\n    //                                            return (result ? result : '--');\r\n    //                                        }\r\n    //                                        var tVal = eval(\"obj.\" + field.attributes.displayformat.replace('{', '').replace('}', ''));\r\n    //                                        return (tVal ? tVal : '--');\r\n    //                                    }\r\n    //                                    return '--'; //eval(\"model.\" + field.data + \".\" + field.attributes.displayformat.replace('{', '').replace('}', ''));\r\n    //                                }\r\n    //                                else if (field.attributes.type == 'date') {\r\n    //                                    return getFormatedDate( eval(\"model.\" + field.data ), field.attributes.format);\r\n    //                                }\r\n    //                            }\r\n    //                            var tVal = eval(\"model.\" + field.data);\r\n    //                            return (tVal ? tVal : '');\r\n    //                            break;\r\n    //                        case 'dropdown':\r\n    //                            var obj = eval(\"model.\" + field.data);\r\n    //                            if (obj) {\r\n    //                                if (field.attributes.datakey.indexOf('-') > -1) {\r\n    //                                    var splittedDisplayFormat = field.attributes.datakey.split('-');\r\n    //                                    var result = \"\";\r\n    //                                    for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                        result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                        if (i < splittedDisplayFormat.length - 1)\r\n    //                                            result += '--';\r\n    //                                    }\r\n    //                                    return result;\r\n    //                                }\r\n    //                                var tVal = eval(\"obj.\" + field.attributes.datakey.replace('{', '').replace('}', ''));\r\n    //                                return (tVal ? tVal : '--');\r\n    //                            }\r\n    //                            return '--';\r\n    //                            break;\r\n    //                        case 'subsection':\r\n    //                            var obj = eval(\"model.\" + field.data);\r\n    //                            if (obj) {\r\n    //                                if (dataKey) {\r\n    //                                    if (dataKey.indexOf('-') > -1) {\r\n    //                                        var splittedDisplayFormat = dataKey.split('-');\r\n    //                                        var result = \"\";\r\n    //                                        for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                            result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                            if (i < splittedDisplayFormat.length - 1)\r\n    //                                                result += '--';\r\n    //                                        }\r\n    //                                        return result;\r\n    //                                    }\r\n    //                                    var tVal = eval(\"obj.\" + dataKey.replace('{', '').replace('}', ''));\r\n    //                                    return (tVal ? tVal : '--');\r\n    //                                }\r\n    //                            }\r\n    //                            return '--';\r\n    //                            break;\r\n    //                        default:\r\n    //                            return eval(\"model.\" + field.data)\r\n    //                            break;\r\n                                \r\n    //                    }\r\n    //                }\r\n    //                return eval(\"model.\" + field.data)\r\n    //            }\r\n\r\n\r\n    //            function getFormatedDate(dateObj, dateFormate) {\r\n    //                dateFormate = dateFormate.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n    //               return moment(dateObj).format(dateFormate);\r\n    //                //var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n    //                // tmpModel = tmpModel.split('+');\r\n    //                // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n    //                //return moment(tmpModel).format(dateFormate);\r\n    //            }\r\n    //            function GetFieldLabel(field, model)\r\n    //            {\r\n                   \r\n    //                return $translate.instant(field.label);\r\n    //            }\r\n\r\n    //            for (var i = 0; i < config.rows.length; i++)\r\n    //            {\r\n                   \r\n    //                html+= \"<div class=\\\"row\\\" > <div class=\\\"col s12\\\" >\";\r\n    //                var row = config.rows[i];\r\n    //                for (var j = 0; j < row.properties.length; j++)\r\n    //                {\r\n    //                    Textid++;\r\n    //                    var field = row.properties[j];\r\n    //                    if (field.isVisible && !field.isHidden) {\r\n    //                        if (field.type) {\r\n    //                            if (field.type == 'subsection')\r\n    //                            {\r\n    //                                if (field.attributes) {\r\n    //                                    if (field.attributes.previewData) {\r\n    //                                        for (var x = 0; x < field.attributes.previewData.length; x++) {\r\n    //                                            Textid++;\r\n    //                                            var previewField = field.attributes.previewData[x];\r\n    //                                            html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                           \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model, previewField.data) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                           \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(previewField, model) + \"</label></div></div>\";\r\n    //                                        }\r\n    //                                    }\r\n    //                                }\r\n    //                            }\r\n    //                            else\r\n    //                            {\r\n    //                                html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                               \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                               \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(field, model) + \"</label></div></div>\";\r\n    //                            }\r\n    //                        } else {\r\n    //                            html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(field, model) + \"</label></div></div>\";\r\n    //                        }\r\n    //                    }\r\n    //                    }\r\n    //                    html+=\"</div></div>\";\r\n\r\n\r\n    //            }\r\n\r\n\r\n\r\n    //            element.html(html);              \r\n    //            //$compile(element.contents())(scope);\r\n                \r\n    //        }\r\n    //    };\r\n    //}]);\r\n\r\n\r\n    //angular.module('SMART2').directive('smartFieldPreview', ['$compile', '$translate', function ($compile, $translate) {\r\n    //    return {\r\n    //        restrict: 'AE',\r\n    //        scope: false,\r\n    //        link: function (scope, element, attrs) {\r\n    //            var config = scope.config;\r\n    //            var localScope = scope;\r\n\r\n    //            if (config.attributes) {\r\n    //                var unbinedWatcher = scope.$watch(config.attributes.previewWatch, function (val) {\r\n    //                    if (val) {\r\n    //                        if (config.isVisible) {\r\n    //                            var obj = localScope;\r\n    //                            var html = \"\";\r\n    //                            var fields = config.attributes.previewData;\r\n    //                            if (fields) {\r\n    //                                for (var x = 0; x < fields.length; x++) {\r\n    //                                    Textid++;\r\n    //                                    var previewField = fields[x];\r\n    //                                    var lbl = $translate.instant(previewField.label);\r\n    //                                    var val = eval('obj.$parent.' + previewField.data);\r\n    //                                    if (!val) {\r\n    //                                        val = '--';\r\n    //                                    }\r\n    //                                    html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                   \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + val + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                   \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + lbl + \"</label></div></div>\";\r\n    //                                }\r\n    //                                //Textid++;\r\n    //                                //html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                //\"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + val + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                //\"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + scope.$parent.label + \"</label></div></div>\";\r\n\r\n    //                                element.html(html);\r\n    //                            }\r\n    //                        }\r\n    //                        unbinedWatcher();\r\n    //                    }\r\n    //                });\r\n    //            }\r\n    //        }\r\n\r\n    //    };\r\n    //}]);\r\n\r\n})();    ","  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Select\r\n   * @description This directive is useful for creating a select ui element.\r\n   * \r\n   * @attr {String} label\r\n   *    Label to be displayed for identification of this ui element\r\n   * @attr {Array} options\r\n   *    Number of options to be created\r\n   * @attr {Var} ng-model\r\n   *    Default selected option. Please refer example for more details.\r\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\r\n   * @attr {String} datakey\r\n   *    ng-model variable will be updated on the basis of this property. datakey will be used to display an option when displaykey is not set.\r\n   * @attr {String} displaykey\r\n   *    A property of an option to be used to display an option\r\n   * @attr {Boolean} disable\r\n   *    If set to true, none of the options can be selected\r\n   * @attr {Boolean} focus \r\n   *    If set to true, this ui element will be focused\r\n   * @attr {Boolean} validate\r\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n   * @attr {Array} rules \r\n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n   * @attr {String} error-message \r\n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n   * @attr {Boolean} is-mandatory \r\n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n   * @attr {Boolean} is-visible \r\n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-change\r\n   *    Callback function when option is changed\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"currency\": { \"code\": \"€\", \"name\": \"EUR\" }\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"Currency\",\r\n                                        \"type\": \"dropdown\",      //  select will also work\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"currency\",\r\n                                        \"colspan\": 1,\r\n                                        \"onChange\": \"onChange\",  //  controller function\r\n                                        \"attributes\": {\r\n                                            \"options\": [{\r\n                                                \"code\": \"$\",\r\n                                                \"name\": \"USD\"\r\n                                            }, {\r\n                                                \"code\": \"€\",\r\n                                                \"name\": \"EUR\"\r\n                                            }],\r\n                                            \"datakey\": \"name\"\r\n                                        },\r\n                                        \"rules\": [\r\n                                            { \r\n                                                \"rule\": \"this.title == \\\"Option 2\\\"\", \r\n                                                \"error\": \"Invalid selection\" \r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example\r\n   Static:\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\"\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n\r\n   * @example\r\n   Select with disabled state:\r\n   <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" disable=\"true\"></smart-radio> \r\n\r\n   * @example\r\n   Select with ng-model as 'String' (In following example, when an option is selected, ng-model would be either '$' or '€'):\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\"\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = \"$\";\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"code\" displaykey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n\r\n   * @example\r\n   Select with disabled option:\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\",\r\n            \"disable\": true\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var selectId = 0;\r\n    angular.module('SMART2').directive('smartSelect', ['$timeout', '$window', '$translate', 'ScrollTo', 'RuleEngine','smartSelectService',\r\n         (typeof isDirectiveV2enabled !== 'undefined' ? (isDirectiveV2enabled() == true ? smartSelectFunc2 : smartSelectFunc1) : smartSelectFunc1)\r\n    ]);\r\n\r\n    function smartSelectFunc1($timeout, $window, $translate, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModelCopy: '=?ngModel',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                disable: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                displaykey: '@',\r\n                removable: '@',\r\n                preview: '@',\r\n                customoption: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                customMessage: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                //debugger;\r\n                var options, isNgModelWatchAdded = false;\r\n                var onNgModel = function () { };\r\n                scope.selectOptions = [];\r\n                var typeOfNgModel;\r\n\r\n                var isNgModelFunction = typeof scope.ngModelCopy == 'function';\r\n\r\n                // create unique id\r\n                selectId = selectId + 1;\r\n                scope.dropDownId = \"dropdown-\" + selectId;\r\n\r\n                // key to be used to bind options\r\n                scope.dataKey = scope.datakey ? scope.datakey : 'title';\r\n                scope.displayKey = scope.displaykey ? scope.displaykey : scope.dataKey;\r\n\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                if (isNgModelFunction) {\r\n                    try {\r\n                        ngModelCtrl.$render = function () {\r\n                            scope.ngModel = ngModelCtrl.$modelValue;\r\n                            scope.selectedOption = scope.ngModel;\r\n                        };\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                var updateView = function () {\r\n                    if (isNgModelFunction) {\r\n                        try {\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\r\n                /*\r\n                 * Check if new option is added\r\n                 */\r\n                //scope.customOption = \r\n                scope.labelVal = \"\";\r\n                scope.customOptionReset = false;\r\n                var onOptions = scope.$watch('options', function (newOptions) {\r\n                    if (!newOptions) {\r\n                        return;\r\n                    }\r\n                    var optLen = newOptions.length;\r\n                    if (newOptions && optLen > 0) {\r\n                        //if (scope.label && newOptions[0][scope.dataKey] != scope.label) {\r\n                        var selLabel;\r\n                        if (scope.label) {\r\n                            selLabel = scope.label;\r\n                        } else {\r\n                            selLabel = $translate.instant('chooseOptionMsg');\r\n                        }\r\n                        var isDisabledOpt = true;\r\n                        if (scope.customoption) {\r\n                            selLabel = scope.customoption;\r\n                            isDisabledOpt = false;\r\n                            scope.customOptionReset = true;\r\n                        }\r\n                        if (scope.dataKey === scope.displayKey) {\r\n                            options = [{ title: selLabel, disable: isDisabledOpt, id: 'fakeOptionId' }].concat(newOptions);\r\n                            options[0][scope.displayKey] = options[0].title;\r\n                        }\r\n                        else {\r\n                            var firstOption = { disable: isDisabledOpt, id: 'fakeOptionId' };\r\n                            firstOption[scope.dataKey] = selLabel;\r\n                            firstOption[scope.displayKey] = selLabel;\r\n                            options = [firstOption].concat(newOptions)\r\n                        }\r\n\r\n                        //if (scope.$eval(scope.isMandatory)) {\r\n                        //    options = newOptions;\r\n                        //}\r\n                        //else {\r\n\r\n                        //    options = [{ title: selLabel, disable: false, id: 'fakeOptionId' }].concat(newOptions);\r\n                        //    options[0][scope.displayKey] = options[0].title;\r\n                        //}\r\n                        //}\r\n                        //else {\r\n                        //    options = newOptions;\r\n                        //}\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n\r\n                    var optionGroups = [],\r\n                        oldOptLen = options.length;\r\n\r\n                    for (var i = 0; i < oldOptLen; i++) {\r\n                        if (options[i].hasOwnProperty('groupName') && optionGroups.indexOf(options[i].groupName) == -1) {\r\n                            optionGroups.push(options[i].groupName);\r\n                        }\r\n                    }\r\n\r\n                    //if (optionGroups.length > 0) {\r\n                    //    options.splice(0, 1);\r\n                    //}\r\n\r\n                    scope.optionGroups = angular.copy(optionGroups);\r\n\r\n                    scope.selectOptions = options;\r\n\r\n                    //if (!scope.selectedOption) {\r\n                    //    scope.selectedOption = options[0];\r\n                    //}\r\n\r\n                    //try {\r\n                    //    scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                    //}\r\n                    //catch (e) { }\r\n\r\n                    if (!isNgModelWatchAdded) {\r\n                        onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                            if (angular.isUndefined(typeOfNgModel) && (newVal !== '' && newVal != undefined && newVal != null)) {\r\n                                typeOfNgModel = typeof newVal;\r\n                            }\r\n                            var newValueCopy;\r\n\r\n                            if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                for (var i = 0; i < oldOptLen; i++) {\r\n                                    if (newVal == options[i][scope.dataKey]) {\r\n                                        newValueCopy = options[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                newValueCopy = newVal;\r\n                            }\r\n                            scope.selectedOption = angular.copy(newValueCopy);\r\n\r\n                            try {\r\n                                if (!scope.selectedOption) {\r\n                                    scope.selectedOption = angular.copy(options[0]);\r\n                                } else if (!scope.selectedOption[scope.displayKey]) {\r\n                                    scope.selectedOption = angular.copy(options[0]);\r\n                                }\r\n                                scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                                if (options[0] != scope.selectedOption[scope.dataKey]) {\r\n                                    scope.labelVal = scope.selectedOption[scope.dataKey];\r\n                                    if (scope.customoption && scope.customoption != scope.selectedOption[scope.dataKey]) {\r\n                                        scope.customOptionReset = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n\r\n                            var tOut = setTimeout(function () {\r\n                                var el = angular.element(\"#\" + scope.dropDownId);\r\n                                el.material_select();\r\n                                el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                    if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function () {\r\n                                        var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey]== scope.ngModelCopy[scope.dataKey];\r\n                                        }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                        }\r\n                                      }, 0);\r\n                                   }\r\n                                });\r\n                                //el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                //    var _this = $(this);\r\n                                //  scope.ngChange(_this.val());\r\n                                //});\r\n                                clearTimeout(tOut);\r\n                                tOut = null;\r\n                            });\r\n                            // selectFixdd();\r\n\r\n                        }, true);\r\n\r\n                        isNgModelWatchAdded = true;\r\n                    }\r\n                    else { //If options are changes dynamically then again .material_select() will fired to update latest options in materialize select.\r\n                        var selectTout = setTimeout(function () {\r\n                            angular.element(\"#\" + scope.dropDownId).material_select();\r\n                            element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function () {\r\n                                        var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                        listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                        }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                        }\r\n                                    }, 0);\r\n                                            }\r\n                            });\r\n                            clearTimeout(selectTout);\r\n                            selectTout = null;\r\n                        });\r\n                    }\r\n                    var disableTOut = setTimeout(function () {\r\n                        var el = angular.element(\"#\" + scope.dropDownId);\r\n                        el.children().eq(0).attr(\"disabled\", \"disabled\");\r\n                        el.material_select();\r\n                        el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                setTimeout(function () {\r\n                                    var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                    $dropdownDiv.scrollTop(0);\r\n                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                        return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                    }))).offset();\r\n                                    if (listElOffset) {\r\n                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                    }\r\n                                }, 0);\r\n                            }\r\n                        });\r\n                        // el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                        //    var _this = $(this);\r\n                        //    scope.ngChange(_this.val());\r\n                        //});\r\n                        clearTimeout(disableTOut);\r\n                        disableTOut = null;\r\n                    });\r\n\r\n                    // selectFixdd();\r\n\r\n                    /*   function selectFixdd() {\r\n                           setTimeout(function () {\r\n                               if (scope.$eval(attrs.fixed)) {\r\n                                   $(element).find('input.select-dropdown').bind('focus', function (e) {\r\n                                       (function ($t) {\r\n                                           setTimeout(function () {\r\n                                               $(element).find('.dropdown-content').addClass('fixeddd');\r\n                                               var topOffset = $(e.target).offset().top - $(window).scrollTop();\r\n                                               var ddCnt = $t.next('.dropdown-content');\r\n                                               ddCnt.css({\r\n                                                   'left': $(e.target).offset().left + 'px', 'top': topOffset + 'px'\r\n                                               });\r\n                                               ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n\r\n                                               var ddHgt = ddCnt.css('height'),\r\n                                                   winHgt = angular.element(window).height();\r\n                                               if ((parseInt(ddHgt) + topOffset) > winHgt) {\r\n                                                   var diffHgt = (parseInt(ddHgt) + topOffset) - winHgt;\r\n                                                   ddCnt.css('top', (topOffset - diffHgt - 15) + 'px');\r\n                                               }\r\n\r\n                                               angular.element($window).on(\"scroll.smartFixedSmartSelect\", function () {\r\n                                                   if (ddCnt.hasClass('active'))\r\n                                                       ddCnt.hide();\r\n                                               });\r\n                                           });\r\n                                       })($(this));\r\n                                   });\r\n                               }\r\n                           }, 500);\r\n                       }\r\n                       */\r\n                }, true);\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n\r\n                /*\r\n                 * Watch needs to be added on disable since element needs to be updated\r\n                 */\r\n                var sOption = scope.label;\r\n                var onDisable = scope.$watch('disable', function (newVal) {\r\n                    var isDisableTout = setTimeout(function () {\r\n                        var el = angular.element(\"#\" + scope.dropDownId);\r\n                        el.material_select();\r\n                        element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function() {\r\n                                        var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey]== scope.ngModelCopy[scope.dataKey];\r\n                                    }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top -$dropdownDiv.offset().top);\r\n                                            }\r\n                                            }, 0);\r\n                            }\r\n                        });\r\n                        el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                            /*var _this = $(this);\r\n                            if (scope.ngModelCopy != _this.val()) {\r\n                                scope.ngModelCopy = {\r\n                                    title: _this.val()\r\n                                };\r\n                                scope.ngModelCopy[scope.dataKey] = _this.val();\r\n                            }*/\r\n                            scope.validateRules()\r\n                        });\r\n                        clearTimeout(isDisableTout);\r\n                        isDisableTout = null;\r\n                    });\r\n                });\r\n\r\n\r\n\r\n                /*\r\n                 * Focus field when focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate field whene validate is set to true\r\n                 */\r\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    //debugger;\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    if (scope.$eval(scope.isMandatory) && scope.label) {\r\n                        if (!scope.ngModelCopy || scope.ngModelCopy.name === scope.label || (scope.customoption && scope.ngModelCopy.name === scope.customoption) || scope.ngModelCopy[scope.dataKey] === scope.label) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = scope.customMessage ? scope.customMessage : $translate.instant(\"selectOptionErrMsg\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\r\n                            ruleLength = rules.length;\r\n\r\n                        for (var i = 0; i < ruleLength; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                if (!isFoundInvalid) {\r\n                                    RuleEngine.isValid(rules[i], function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                };\r\n                var ch = false;\r\n                scope.ngChange = function (selectedOption, manual) {\r\n                    if (!manual) ch = true;\r\n                    sOption = selectedOption;\r\n                    if (selectedOption == scope.customoption) {\r\n                        scope.customOptionReset = true;\r\n                        //options[0][scope.dataKey] = scope.label;\r\n                    }\r\n                    else {\r\n                        scope.customOptionReset = false;\r\n                    }\r\n\r\n                    var tmpSelectedOption;\r\n                    if (!scope.$eval(scope.isMandatory) && selectedOption == options[0][scope.displayKey] && scope.optionGroups.length == 0) {\r\n                        tmpSelectedOption = '';\r\n                    }\r\n                    else {\r\n                        var optLen = options.length;\r\n                        for (var i = 0; i < optLen; i++) {\r\n                            if (options[i][scope.dataKey] == selectedOption) {\r\n                                tmpSelectedOption = options[i];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isNgModelFunction) {\r\n                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                            scope.ngModel = tmpSelectedOption[scope.dataKey];\r\n                        }\r\n                        else {\r\n                            scope.ngModel = tmpSelectedOption;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                            if (!scope.$eval(scope.isMandatory) && (selectedOption == options[0][scope.displayKey] || selectedOption == undefined || selectedOption == 'fakeOptionId')) {\r\n                                scope.ngModelCopy = '';\r\n                            }\r\n                            else {\r\n                                scope.ngModelCopy = tmpSelectedOption[scope.dataKey];\r\n                            }\r\n                        }\r\n                        else {\r\n                            scope.ngModelCopy = tmpSelectedOption;\r\n                        }\r\n                    }\r\n                    scope.labelVal = \"\";\r\n                    if (selectedOption == scope.label && selectedOption == options[0][scope.displayKey]) {\r\n                        scope.labelVal = selectedOption;\r\n                    }\r\n                    updateView();\r\n                    scope.selectedOption = tmpSelectedOption == '' ? options[0] : angular.copy(tmpSelectedOption);\r\n                    scope.validateRules();\r\n                    var clrTout = $timeout(function () {\r\n                        scope.onChange();\r\n                        $timeout.cancel(clrTout);\r\n                        clrTout = null;\r\n                    });\r\n                };\r\n\r\n\r\n                scope.$on('$destroy', function () {\r\n                    angular.element(\"#\" + scope.dropDownId).material_select('destroy');\r\n                    onOptions();\r\n                    onDisable();\r\n                    onNgModel();\r\n                    onFocus();\r\n                    onValidate();\r\n                    angular.element($window).off(\"scroll.smartFixedSmartSelect\");\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSelect/smartSelectTemplate.html'\r\n        };\r\n    }\r\n\r\n    \r\n    function smartSelectFunc2($timeout, $window, $translate, ScrollTo, RuleEngine, smartSelectService) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModelCopy: '=?ngModel',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                disable: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                displaykey: '@',\r\n                removable: '@',\r\n                preview: '@',\r\n                customoption: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                customMessage: '@'\r\n            },\r\n            compile: function() {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        $(document).ready(function () {// To avoid flicker and timeout\r\n                            // Declare all the vars at the top\r\n                            var options = [],\r\n                                isNgModelWatchAdded = false,\r\n                                 onNgModel = function () { },\r\n                                 typeOfNgModel,\r\n                                isNgModelFunction = typeof scope.ngModelCopy == 'function';\r\n\r\n                            scope.selectOptions = [];\r\n                            // create unique id\r\n                            selectId = selectId + 1;\r\n                            scope.dropDownId = \"dropdown_\" + selectId;\r\n                            // key to be used to bind options\r\n                            scope.dataKey = scope.datakey ? scope.datakey : 'title';\r\n                            scope.displayKey = scope.displaykey ? scope.displaykey : scope.dataKey;\r\n\r\n                            /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                            if (isNgModelFunction) {\r\n                                try {\r\n                                    ngModelCtrl.$render = function () {\r\n                                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                        scope.selectedOption = scope.ngModel;\r\n                                    };\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n                            var updateView = function () {\r\n                                if (isNgModelFunction) {\r\n                                    try {\r\n                                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                    }\r\n                                    catch (e) { }\r\n                                }\r\n                            };\r\n                            /*\r\n                             * Check if new option is added\r\n                             */\r\n                            scope.labelVal = \"\";\r\n                            scope.customOptionReset = false;\r\n\r\n                            //To be triggered if option binding is delayed\r\n                            function watchOptions(a_options) {\r\n                                var optLen = a_options.length;\r\n                                if (a_options && optLen > 0) {\r\n                                    var selLabel,\r\n                                        isDisabledOpt = true;\r\n                                    if (scope.label) {\r\n                                        selLabel = scope.label;\r\n                                    } else {\r\n                                        selLabel = $translate.instant('chooseOptionMsg');\r\n                                    }\r\n\r\n                                    if (scope.customoption) {\r\n                                        selLabel = scope.customoption;\r\n                                        isDisabledOpt = false;\r\n                                        scope.customOptionReset = true;\r\n                                    }\r\n                                    if (scope.dataKey === scope.displayKey) {\r\n                                        options = [{ title: selLabel, disable: isDisabledOpt, id: 'fakeOptionId' }].concat(a_options);\r\n                                        options[0][scope.displayKey] = options[0].title;\r\n                                    }\r\n                                    else {\r\n                                        var firstOption = { disable: isDisabledOpt, id: 'fakeOptionId' };\r\n                                        firstOption[scope.dataKey] = selLabel;\r\n                                        firstOption[scope.displayKey] = selLabel;\r\n                                        options = [firstOption].concat(a_options)\r\n                                    }\r\n                                    scope.selectOptions = options;\r\n                                    var optionGroups = [],\r\n                                        len = options.length;\r\n                                    for (var i = 0; i < len; i++) {\r\n                                        var tmp = options[i];\r\n                                        if (tmp.hasOwnProperty('groupName') && optionGroups.indexOf(tmp.groupName) == -1) {\r\n                                            optionGroups.push(tmp.groupName);\r\n                                        }\r\n                                    }\r\n                                    scope.optionGroups = angular.copy(optionGroups);\r\n                                    watchModel();\r\n                                    smartSelectService.buildOptionsList(scope.optionGroups, scope.selectOptions,scope,element);\r\n                                } else {\r\n                                    return;\r\n                                };\r\n\r\n                            }\r\n\r\n                            // This function watches the selected value from the \r\n                            // dropdown and triggers on selection change\r\n                            function watchModel() {\r\n                                if (!isNgModelWatchAdded) {\r\n                                    onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                                        if (angular.isUndefined(typeOfNgModel) && (newVal !== '' && newVal != undefined && newVal != null)) {\r\n                                            typeOfNgModel = typeof newVal;\r\n                                        }\r\n                                        var newValueCopy;\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            var len = options.length;\r\n                                            for (var i = 0; i < len; i++) {\r\n                                                var tmp = options[i];\r\n                                                if (newVal == tmp[scope.dataKey]) {\r\n                                                    newValueCopy = tmp;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if (typeOfNgModel == 'object') {\r\n                                            scope.ngModel = newValueCopy = newVal;\r\n                                        }\r\n                                        else {\r\n                                            newValueCopy = newVal;\r\n                                        }\r\n                                        scope.selectedOption = angular.copy(newValueCopy);\r\n\r\n                                        try {\r\n                                            if (!scope.selectedOption) {\r\n                                                scope.selectedOption = angular.copy(options[0]);\r\n                                            } else if (!scope.selectedOption[scope.displayKey]) {\r\n                                                scope.selectedOption = angular.copy(options[0]);\r\n                                            }\r\n                                            scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                                            if (options[0] != scope.selectedOption[scope.dataKey]) {\r\n                                                scope.labelVal = scope.selectedOption[scope.dataKey];\r\n                                                if (scope.customoption && scope.customoption != scope.selectedOption[scope.dataKey]) {\r\n                                                    scope.customOptionReset = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        catch (e) { }\r\n                                        smartSelectService.buildOptionsList(scope.optionGroups, scope.selectOptions, scope, element);\r\n                                        smartSelectService.updateLabelTemplate(scope, element);// added for update the label\r\n                                        angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                        element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                                setTimeout(function () {\r\n                                                    var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                                        listElOffset;\r\n                                                    $dropdownDiv.scrollTop(0);\r\n                                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                        return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                                    }))).offset();\r\n                                                    if (listElOffset) {\r\n                                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                    }\r\n                                                }, 0);\r\n                                            }\r\n                                        });\r\n                                        //selectFixdd();\r\n                                        element.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        }); \r\n                                    });\r\n                                    isNgModelWatchAdded = true;\r\n\r\n                                } else { //If options are changes dynamically then again .material_select() will fired to update latest options in materialize select.\r\n                                   var clrTout = setTimeout(function () {\r\n                                       angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                       element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                           if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                            setTimeout(function () {\r\n                                                var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                        listElOffset;\r\n                                                $dropdownDiv.scrollTop(0);\r\n                                                listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                    return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                                }))).offset();\r\n                                                if (listElOffset) {\r\n                                                    $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                }\r\n                                            }, 0);\r\n                                               }\r\n                                        });\r\n                                        element.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        });\r\n                                        clearTimeout(clrTout);\r\n                                        clrTout = null;\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            //watchOptions(scope.options); // onload data binding\r\n                            //To update value incase of late binding\r\n                            var collectionWatch = scope.$watchCollection('options', function (newValue) {\r\n                                if (newValue) {\r\n                                    watchOptions(newValue);\r\n                                }\r\n                            });\r\n\r\n                            /*function selectFixdd() {\r\n                                if (attrs.fixed) {\r\n                                    $(element).find('input.select-dropdown').bind('focus', function (e) {\r\n                                        (function ($t) {\r\n                                            var drpContent = $(element).find('.dropdown-content').addClass('fixeddd');\r\n                                            var topOffset = $(e.target).offset().top - $(window).scrollTop();\r\n                                            var ddCnt = $t.next('.dropdown-content');\r\n                                            ddCnt.css({\r\n                                                'left': $(e.target).offset().left + 'px', 'top': topOffset + 'px'\r\n                                            });\r\n                                            ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n\r\n                                            var ddHgt = ddCnt.css('height'),\r\n                                                winHgt = angular.element(window).height();\r\n                                            if ((parseInt(ddHgt) + topOffset) > winHgt) {\r\n                                                var diffHgt = (parseInt(ddHgt) + topOffset) - winHgt;\r\n                                                ddCnt.css('top', (topOffset - diffHgt - 15) + 'px');\r\n                                            }\r\n\r\n                                            angular.element($window).on(\"scroll.smartFixedSmartSelect\", function () {\r\n                                                if (ddCnt.hasClass('active'))\r\n                                                    ddCnt.hide();\r\n                                            });\r\n                                            drpContent = null;\r\n                                        })($(this));\r\n                                    });\r\n                                }\r\n                            }\r\n                            */\r\n                            scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                            /*\r\n                             * Watch needs to be added on disable since element needs to be updated\r\n                             */\r\n                            var sOption = scope.label;\r\n                            // Use watchgroup to watch all\r\n                            //Below declerations are to make watchGroup work on models\r\n                            scope.disable = (scope.disable) ? scope.disable : 1;\r\n                            scope.validate = (scope.validate) ? scope.validate : 2;\r\n                            var watchGrp = scope.$watchGroup(['disable', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                                if (newVal[0] !== oldVal[0]) {\r\n                                    var el = angular.element(\"#\" + scope.dropDownId);\r\n                                    if ((scope.disable === true && scope.disable !== 1) || (jQuery.type(scope.disable) === \"string\" && (scope.disable === \"true\"))) {\r\n                                        el.prop('disabled', 'disabled');\r\n                                        el.prop(\"readonly\", true);\r\n                                        el.attr('tabindex', -1);\r\n                                        el.material_select();\r\n                                        el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                                setTimeout(function () {\r\n                                                    var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                                    $dropdownDiv.scrollTop(0);\r\n                                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                        return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                                    }))).offset();\r\n                                                    if (listElOffset) {\r\n                                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                    }\r\n                                                }, 0);\r\n                                            }\r\n                                        });\r\n                                        el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        });\r\n                                    }else\r\n                                    {\r\n                                        el.prop('disabled', false);\r\n                                        el.prop(\"readonly\", false);\r\n                                        el.removeAttr('tabindex');\r\n                                    }\r\n                                    angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                    element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                        if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                        setTimeout(function () {\r\n                                            var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                                listElOffset;\r\n                                            $dropdownDiv.scrollTop(0);\r\n                                            listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                            }))).offset();\r\n                                            if (listElOffset) {\r\n                                                $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                            }\r\n                                        }, 0);\r\n                                    }\r\n                                    });\r\n                                }\r\n                                if (newVal[1] !== oldVal[1] || newVal[2] !== oldVal[2]) {\r\n                                    scope.validateRules();\r\n                                }\r\n                                if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                                    if (scope.showinfo || scope.showwarning) {\r\n                                        element.addClass('field-has-icon');\r\n                                    }\r\n                                    else {\r\n                                        element.removeClass('field-has-icon');\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            var onFocus = scope.$watch('focus', function (newVal) {\r\n                                if (newVal) {\r\n                                    ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                                    scope.focus = false;\r\n                                    var clrMe = setTimeout(function () {\r\n                                        element.find('input').focus();\r\n                                        clearTimeout(clrMe);\r\n                                        clrMe = null;\r\n                                    }, 1000);\r\n                                }\r\n                            });\r\n\r\n                            /*\r\n                            * Validate rules\r\n                            */\r\n                            scope.validateRules = function () {\r\n                                scope.validate = false;\r\n                                scope.errorMessage = null;\r\n                                if (scope.$eval(scope.isMandatory) && scope.label && !scope.clienterror) {\r\n                                    if (!scope.ngModelCopy || scope.ngModelCopy.name === scope.label || (scope.customoption && scope.ngModelCopy.name === scope.customoption) || scope.ngModelCopy[scope.dataKey] === scope.label) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = scope.customMessage ? scope.customMessage : $translate.instant(\"selectOptionErrMsg\");\r\n                                        // return;\r\n                                    }\r\n                                }\r\n                                if (scope.clienterror) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                                }\r\n                                if (scope.rules && !scope.clienterror) {\r\n                                    var rules = scope.$eval(scope.rules);\r\n                                    var isFoundInvalid = false,\r\n                                        len = rules.length;\r\n\r\n                                    for (var i = 0; i < len; i++) {\r\n                                        var tmp = rules[i];\r\n                                        if (typeof tmp == 'object') {\r\n                                            if (eval((tmp.rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                                scope.validate = true;\r\n                                                scope.errorMessage = tmp.error;\r\n                                                break;\r\n                                            }\r\n                                        } else {\r\n                                            if (!isFoundInvalid) {\r\n                                                RuleEngine.isValid(tmp, function (e) {\r\n                                                    scope.validate = true;\r\n                                                    scope.errorMessage = e.errorData.error;\r\n                                                    isFoundInvalid = true;\r\n                                                });\r\n                                            }\r\n                                            else {\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                                var containerElm = element;\r\n                                var validateElm = $(element).find('#' + scope.dropDownId + '_validate');\r\n                                if (scope.validate == true && scope.errorMessage != null) {\r\n\r\n                                    if (!containerElm.hasClass('invalid')) {\r\n                                        containerElm.addClass('invalid');\r\n                                        \r\n                                    }\r\n\r\n                                    if (validateElm.length > 0) {\r\n                                        validateElm.html(scope.errorMessage);\r\n                                    }\r\n                                    else {\r\n                                        containerElm.append(smartSelectService.buildValidationTemplate(scope));\r\n                                        validateElm = $(element).find('#' + scope.dropDownId + '_validate');\r\n                                        validateElm.html(scope.errorMessage);\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    if (containerElm.hasClass('invalid')) {\r\n                                        containerElm.removeClass('invalid');\r\n                                    }\r\n\r\n                                    if (validateElm.length > 0) {\r\n                                        validateElm.remove();\r\n                                    }\r\n\r\n                                }\r\n                            };\r\n\r\n                            scope.hideShowField = function () {\r\n                                scope.isVisible = !scope.isVisible;\r\n                            };\r\n\r\n                            var onSelectChange = function (elm) {\r\n                                if (scope.selectOptions && scope.selectOptions.length>0) {\r\n                                    var selectedOption;\r\n                                    var selectedVal = elm.target.options[elm.target.options.selectedIndex].value;// elm.find(\":selected\").val();\r\n\r\n                                    selectedOption = selectedVal;\r\n\r\n                                    sOption = selectedOption;\r\n                                    if (selectedOption == scope.customoption) {\r\n                                        scope.customOptionReset = true;\r\n                                    }\r\n                                    else {\r\n                                        scope.customOptionReset = false;\r\n                                    }\r\n\r\n                                    var tmpSelectedOption;\r\n                                    if (!scope.$eval(scope.isMandatory) && selectedOption == options[0][scope.displayKey] && scope.optionGroups.length == 0) {\r\n                                        tmpSelectedOption = '';\r\n                                    }\r\n                                    else {\r\n                                        var len = options.length;\r\n                                        for (var i = 0; i < len; i++) {\r\n                                            if (typeof options[i][scope.dataKey] == 'string') {\r\n                                                if (options[i][scope.dataKey].replace(/&quot;/g, '\"') == selectedOption) {\r\n                                                    tmpSelectedOption = options[i];\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                if (options[i][scope.dataKey] == selectedOption) {\r\n                                                    tmpSelectedOption = options[i];\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (isNgModelFunction) {\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            scope.ngModel = tmpSelectedOption[scope.dataKey];\r\n                                        }\r\n                                        else {\r\n                                            scope.ngModel = tmpSelectedOption;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            if (!scope.$eval(scope.isMandatory) && (selectedOption == options[0][scope.displayKey] || selectedOption == undefined || selectedOption == 'fakeOptionId')) {\r\n                                                scope.ngModelCopy = '';\r\n                                            }\r\n                                            else {\r\n                                                scope.ngModelCopy = tmpSelectedOption[scope.dataKey];\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            scope.ngModelCopy = tmpSelectedOption;\r\n                                            scope.ngModel = scope.ngModelCopy;\r\n                                        }\r\n                                    }\r\n                                    scope.labelVal = \"\";\r\n                                    if (selectedOption == scope.label && selectedOption == options[0][scope.displayKey]) {\r\n                                        scope.labelVal = selectedOption;\r\n                                    }\r\n                                    updateView();                                    \r\n                                    $(element).find('#' + scope.dropDownId + '_label').html(scope.label);\r\n\r\n                                    scope.selectedOption = tmpSelectedOption == '' ? options[0] : angular.copy(tmpSelectedOption);\r\n                                    scope.validateRules();\r\n                                   var cancelTout =  $timeout(function () {\r\n                                        scope.$apply();\r\n                                        scope.onChange();\r\n                                        $timeout.cancel(cancelTout);\r\n                                        cancelTout = null;\r\n                                    });\r\n                                }\r\n                            };\r\n\r\n                            smartSelectService.buildTemplate(scope, element, onSelectChange);\r\n                            if (scope.clienterror) {\r\n                                scope.validateRules();\r\n                            }\r\n\r\n                            scope.$on('$destroy', function () {\r\n                                angular.element(\"#\" + scope.dropDownId).material_select('destroy');\r\n                                collectionWatch();\r\n                                watchGrp();\r\n                                angular.element($window).off(\"scroll.smartFixedSmartSelect\");\r\n                                $(element).find('input.select-dropdown').unbind('focus');\r\n                                $(element).find('input.select-dropdown').unbind('close');\r\n                            });\r\n                            setTimeout(function(){\r\n                             if(scope.label != '' && scope.label != undefined)\r\n                                 $(element).find('#' + scope.dropDownId + '_label').html(scope.label);\r\n                            },0)\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('SMART2').factory('smartSelectService', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', smartSelectServiceFunc])\r\n    function smartSelectServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile) {\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((scope.isMandatory!= undefined && scope.isMandatory=='false') && scope.isRemovable == true) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.dropDownId + '_opField');\r\n                return optionalField;\r\n            }\r\n            return '';\r\n        };\r\n        var buildSelectTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectOptionTemplate.html');\r\n            html = html.replace('{{id}}', scope.dropDownId);\r\n            return html;\r\n        };\r\n        var buildValidationTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectValidationTemplate.html');\r\n            html = html.replace('{{id}}', scope.dropDownId + '_validate');\r\n            return html;\r\n        };\r\n        var updateLabelTemplate = function (scope, element) {\r\n            var elmLabel = element.find('#' + scope.dropDownId + '_label');\r\n            if (scope.label != scope.labelVal) {\r\n                elmLabel.removeClass('ng-hide');\r\n            } else {\r\n                elmLabel.addClass('ng-hide');\r\n\r\n            }\r\n        };\r\n        var buildLabelTemplate = function (scope) {\r\n            if (scope.label && scope.label != scope.labelVal) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectLabelTemplate.html');\r\n                html = html.replace('{{id}}', scope.dropDownId + '_label');\r\n                html = html.replace('{{dropDownId}}', scope.dropDownId);\r\n                html = html.replace('{{label}}', scope.label);\r\n                html = html.replace('{{title}}', scope.label);\r\n                return html;\r\n            } else {\r\n                return '';\r\n            };\r\n        };\r\n        var buildInfoTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectInfoTemplate.html');;\r\n            //if (scope.showinfo || scope.showwarning) {\r\n                \r\n            //    html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectInfoTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n\r\n        var buildTemplate = function (scope,element, onChangeCallback) {\r\n            var container = element // $('<div/>', { id: scope.dropDownId + '_container' });\r\n            \r\n            var css = 'input-field';\r\n            if ((scope.isMandatory == 'false') && scope.isRemovable == true) {\r\n                css += ' optionalField line-height-manager';\r\n            }\r\n            if (scope.preview === true) {\r\n                css += ' selectPreview';\r\n            }\r\n            if (!scope.customoption) {\r\n                css += ' defaultSelected';\r\n            }\r\n            if (scope.validate === true && scope.errorMessage) {\r\n                css += ' invalid';\r\n            }\r\n            if (scope.showinfo || scope.showwarning){\r\n                css += ' field-has-icon'\r\n            }\r\n            if (scope.showinfo && scope.showwarning) {\r\n                css += ' field-has-two-icons'\r\n            }\r\n            \r\n            container.attr(\"id\", scope.dropDownId + '_container').addClass(css);\r\n\r\n            container.append(buildOptionalFieldTemplate(scope));\r\n            container.append(buildLabelTemplate(scope));\r\n            container.append(buildSelectTemplate(scope));\r\n            container.append(buildValidationTemplate(scope));\r\n            container.append($compile(buildInfoTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.append(container);\r\n            var elm = $(element).find('#' + scope.dropDownId);\r\n            elm.bind(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            var optionalField = $(element).find('#' + scope.dropDownId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0)\r\n            {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n            }\r\n\r\n            if (scope.disable === 'true' || scope.disable === true) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n            }\r\n\r\n        };\r\n\r\n        var buildOptionsList = function (OptionGroups, options,scope,element) {\r\n            var optHtml = '',\r\n                optionLength = options.length;\r\n            if (OptionGroups && OptionGroups.length > 0) {\r\n\r\n            }\r\n            else {\r\n                if (options && optionLength > 0 && scope.dataKey === scope.displayKey) {\r\n                    angular.forEach(options, function (option) {\r\n                        var selected = '';\r\n                        if (angular.equals(option, scope.selectedOption) || angular.equals(scope.ngModel, option) || angular.equals(scope.ngModelCopy, option) || angular.equals(option[scope.dataKey], scope.selectedOptionString)) {\r\n                            selected = ' selected=\"selected\"';\r\n                        }\r\n                        //if (option.name == scope.label) {\r\n                        //    $(element).find('#' + scope.dropDownId + '_label').html('');                            \r\n                        //}\r\n                        optHtml += '<option value=\"' + option[scope.dataKey] + '\"  ' + (option.disable ? 'disabled=\"disabled\"' : '') + ' ' + selected + '>' + option[scope.displayKey] + '</option>'\r\n                    });\r\n                } else if (options && optionLength > 0 && scope.dataKey !== scope.displayKey) {\r\n                    angular.forEach(options, function (option) {\r\n                        var selected = '';\r\n                        if (angular.equals(option, scope.selectedOption) || angular.equals(scope.ngModel, option) || angular.equals(scope.ngModelCopy, option) || angular.equals(option[scope.dataKey], scope.selectedOptionString)) {\r\n                            selected = ' selected=\"selected\"';\r\n                        }\r\n                        optHtml += '<option value=\"' + option[scope.dataKey] + '\"  ' + (option.disable ? 'disabled=\"disabled\"' : '') + ' ' + selected + '>' + option[scope.displayKey] + '</option>'\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (options[0][scope.datakey] == scope.label && options[0].disable && scope.datakey == 'title' && (!scope.selectedOption || options[0] == scope.selectedOption)) {\r\n                $(element).find('#' + scope.dropDownId + '_label').html('');\r\n            }\r\n\r\n            $(element).find('#' + scope.dropDownId).html(optHtml);\r\n        };\r\n\r\n        var service = {\r\n            buildOptionsList: buildOptionsList,\r\n            buildTemplate: buildTemplate,\r\n            buildValidationTemplate: buildValidationTemplate,\r\n            updateLabelTemplate: updateLabelTemplate\r\n        };\r\n        return service;\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('optionalField', ['$timeout', '$translate', function ($timeout, $translate) {\r\n        return {\r\n            restrict: 'A',\n            link: function (scope, element, attrs) {\r\n\n                $timeout(function () {\r\n                    if (attrs.isMandatory !== \"true\") {\r\n                        element.find(\"label\").append('<span class=\"optionalFieldTxt\">' + '(' + $translate.instant('textfieldOptionalLabel') + ')' + '</span>');\r\n                        element.addClass('optionalFieldInPopup');\r\n                    }\r\n\r\n                    if (element.hasClass('hierarchylinktxt')) {\r\n                        element.append('<span class=\"optionalFieldTxt\">' + '(' + $translate.instant('textfieldOptionalLabel') + ')' + '</span>');\r\n                    }\r\n\r\n                }, 500);\r\n            }\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').service('StickyElements',[ function () {\r\n\r\n\t\tvar stickyElementsObj = [];\r\n\r\n\t\tthis.get = function () {\r\n\t\t\tvar stickyElementsHeight = 0;\r\n\t\t\tif (stickyElementsObj.length > 0) {\r\n\t\t\t\tangular.forEach(stickyElementsObj, function (value, key) {\r\n\t\t\t\t\tstickyElementsHeight = stickyElementsHeight + value.height();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\theight: stickyElementsHeight,\r\n\t\t\t\tlistOfElements: stickyElementsObj\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tthis.set = function (obj) {\r\n\t\t\tstickyElementsObj = obj;\r\n\t\t}\r\n    }])\r\n\t.directive('stickyHeader', ['$window', 'StickyElements', function ($window, StickyElements) {\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\tscope: true,\r\n\t\t\tlink: function ($scope, $elem, $attrs) {\r\n\t\t\t\tvar $win = angular.element($window);\r\n\t\t\t\tvar elem = $elem[0];\r\n\r\n\t\t\t\t$scope.scrollType = $attrs.scrollType;\r\n\r\n\t\t\t\tif ($scope.scrollType === \"page\") {\r\n\t\t\t\t\t$win.bind('scroll', function (e) {\r\n\t\t\t\t\t\tif (elem.offsetParent !== null) {\r\n\t\t\t\t\t\t\tvar windowScrollTop = $win[0].scrollY || $win[0].pageYOffset;\r\n\t\t\t\t\t\t\tvar elScrollTop = $(elem).offset().top;\r\n\t\t\t\t\t\t\tvar elScrollTopOriginal = $(elem).offset().top;\r\n\t\t\t\t\t\t\tvar stickyElementHeight = StickyElements.get().height;\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.grid-fixed-container').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.grid-fixed-container').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.alert-bar--fixed-to-nav').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.alert-bar--fixed-to-nav').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.breadcrum-container').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.breadcrum-container').height();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar elemforStick = angular.element($attrs.stickyHeader);\r\n\t\t\t\t\t\t\tif (elemforStick && elemforStick.length > 0) {\r\n\t\t\t\t\t\t\t    stickyElementHeight = stickyElementHeight + elemforStick.height();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar theadHgt = $(elem).find('thead').height();\r\n\r\n\t\t\t\t\t\t\tvar tbodyHgt = $(elem).find('tbody').not('.dummyThead').height();\r\n\t\t\t\t\t\t\tvar $dummyThead = $(elem).find('.dummyThead');\r\n\r\n\t\t\t\t\t\t\tif (windowScrollTop + stickyElementHeight > elScrollTop && windowScrollTop + stickyElementHeight < (elScrollTop + tbodyHgt)) {\r\n\t\t\t\t\t\t\t\telScrollTopOriginal = elScrollTop;\r\n\t\t\t\t\t\t\t\tstickTableHeader(stickyElementHeight, $scope.scrollType);\r\n\t\t\t\t\t\t\t\tif (!$dummyThead.length)\r\n\t\t\t\t\t\t\t\t\t$(\"<tbody class='dummyThead'><tr><td style='height:\" + theadHgt + \"px'></td></tr></tbody>\").insertAfter($(elem).find('thead'));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tangular.element(elem.querySelectorAll('thead')).css({ 'display': '', 'top': '', 'position': '', 'background': '' });\r\n\t\t\t\t\t\t\t\tif ($dummyThead.length)\r\n\t\t\t\t\t\t\t\t\t$dummyThead.remove();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction stickTableHeader(top, scrollType) {\r\n\t\t\t\t\tvar topVal = top;\r\n\t\t\t\t\t// reset display styles so column widths are correct when measured below\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\r\n\r\n\t\t\t\t\t// set widths of columns\r\n\t\t\t\t\tangular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\r\n\t\t\t\t\t     var tdSel = 'tbody tr' + (!$attrs.columnMap ? '' : $attrs.columnMap) + ':first-child td:nth-child(' + (i + 1) + ')',\r\n                           tdElems = elem.querySelector(tdSel);\r\n\r\n\t\t\t\t\t\tvar columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\r\n\r\n\t\t\t\t\t\tif (tdElems) {\r\n\t\t\t\t\t\t\ttdElems.style.width = columnWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (thElem) {\r\n\t\t\t\t\t\t\tthElem.style.width = columnWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('thead')).css({ 'top': topVal, 'position': 'fixed', 'background': '#ffffff', 'z-index': '2' });\r\n\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('tbody')).css({\r\n\t\t\t\t\t\t'height': 'inherit',\r\n\t\t\t\t\t\t'overflow': 'hidden'\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();","  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Sub-section\r\n   * @description This directive is useful for creating subsection with custom behaviour.\r\n   * \r\n   * @attr {Var} ng-model\r\n   *    Data to be passed to subsection controller. ngModel can be accessed as $scope.ngModel.data. Any modifications done on $scope.ngModel.data will reflect in actual data model.\r\n   * @attr {String} template-url\r\n   *    Template to be rendered inside subsection ui element\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-load\r\n   *    Callback function when subsection is rendered. This is expected to be subsection controller function and parameters which are passed are expected to be form-widget controllers variables.\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"location\": {\r\n                    \"address1\": \"Building no. 3, Mindspace IT park\",\r\n                    \"address2\": \"Airoli\",\r\n                    \"city\": \"Navi Mumbai\",\r\n                    \"state\": \"MH\",\r\n                    \"country\": \"India\"\r\n                }\r\n            },\r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"\",\r\n                                        \"type\": \"subsection\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"location\",\r\n                                        \"templateUrl\": \"abc.html\",\r\n                                        \"colspan\": 1\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n    \r\n   * @example\r\n    Static:\r\n    Controller:\r\n        $scope.location = { \"address1\": \"Building no. 3, Mindspace IT park\", \"address2\": \"Airoli\", \"city\": \"Navi Mumbai\", \"state\": \"MH\", \"country\": \"India\" };\r\n       \r\n    Usage:\r\n        <smart-subsection template-url=\"abc.html\" ng-model=\"location\"></smart-subsection> \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var subsectionId = 0;\r\n    \r\n    angular.module('SMART2').directive('smartSubsection', ['$compile', 'ScrollTo', function ($compile, ScrollTo) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                modelData: '=?',\r\n                templateUrl: '@',\r\n                controller: '@',\r\n                isMandatory: '@',\r\n                isVisible: '=',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                parentScope: '=?',\r\n                removable: '@',\r\n                formModel: '=?',\r\n\t\t\t\tinit: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.onLoad = attrs.onLoad;\r\n\r\n                subsectionId = subsectionId + 1;\r\n                scope.subsectionId = 'subsection-' + subsectionId;\r\n\r\n              \r\n\r\n                if (typeof scope.modelData == 'function') {\r\n                    scope.ngModel = {\r\n                        data: scope.modelData()\r\n                    };\r\n                }\r\n                else {\r\n\r\n                    scope.ngModel = {\r\n                        data: scope.modelData\r\n                    };\r\n                    /*\r\n                     *  Listen the changes on model data and update sub-section data\r\n                     */\r\n                    var onModelData = scope.$watch('modelData', function (newVal) {\r\n                        scope.ngModel = {\r\n                            data: newVal\r\n                        };\r\n                    }, true);\r\n\r\n                    /*\r\n                     *  Listen the changes send it to parent scope\r\n                     */\r\n                    var onNgModelData = scope.$watch('ngModel.data', function (newVal) {\r\n                        scope.modelData = newVal;\r\n                    }, true);\r\n\r\n                }           /*\r\n                 * Focus the textfield as soon as the focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                if (scope.controller == '') {\r\n                    element.html('<div ng-class=\"{\\'optionalField\\': isMandatory == \\'false\\' && isRemovable}\"><div class=\"optionalFieldHover highlight\" ng-if=\"isMandatory == \\'false\\' && isRemovable\" ng-include=\"\\'shared/directives/uiElements/commonTemplates/optionalFieldRemoveButton.html\\'\"></div><div ng-include=\"templateUrl\" on-subsection-load></div></div>');\r\n                }\r\n                else {\r\n                \telement.html('<div ng-class=\"{\\'optionalField\\': isMandatory == \\'false\\' && isRemovable}\"><div class=\"optionalFieldHover highlight\" ng-if=\"isMandatory == \\'false\\' && isRemovable\" ng-include=\"\\'shared/directives/uiElements/commonTemplates/optionalFieldRemoveButton.html\\'\"></div><div ng-controller=\"' + scope.controller + '\" ng-init=\"' + scope.init + '\" ng-include=\"templateUrl\" on-subsection-load></div></div>');\r\n                }\r\n                $compile(element.contents())(scope);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onModelData();\r\n                    onNgModelData();\r\n                    onFocus();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('onSubsectionLoad', ['$parse', function ($parse) {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                if (angular.isDefined(scope.onLoad)) {\r\n                    scope.$eval(scope.onLoad);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();    ","  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Switch\n   * @description This directive is useful for creating a switch.\n   *\n   * @attr {String} label\n   *    Label to be displayed for identification of this ui element\n   * @attr {Boolean} ng-model\n   *    Switch's default state (selected or unselected)\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\n   * @attr {Boolean} disable\n   *    If value of this attribute is set to true, switch will not be clickable\n   * @attr {Boolean} focus \n   *    If set to true, this ui element will be focused\n   * @attr {Boolean} validate\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\n   * @attr {Array} rules \n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\n   * @attr {String} error-message \n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\n   * @attr {Boolean} is-mandatory \n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\n   * @attr {Boolean} is-visible \n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\n   * @attr {Number} colspan\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\n   *    Default value is 1.\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\n   * @attr {Function} on-change\n   *    Callback function when switch state is changed \n   * \n   * @example\n   Dynamic:\n   Controller:\n       $scope.config = {\n            \"modelData\": {\n                \"isUrgent\": true\n            }, \n            \"formConfig\": {\n                \"sections\": [\n                    {\n                        \"isMandatory\": true,\n                        \"rows\": [\n                            {\n                                \"properties\": [\n                                    {\n                                        \"label\": \"Urgent\",\n                                        \"type\": \"switch\",\n                                        \"isMandatory\": true,\n                                        \"data\": \"isUrgent\",\n                                        \"colspan\": 1,\n                                        \"onChange\": \"onChange\"  //  controller function ,\n                                        \"rules\": [\n                                            { \n                                                \"rule\": \"this == true\", \n                                                \"error\": \"Checkbox should not be selected\" \n                                            }\n                                        ]\n                                    }\n                                ]    \n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n    Usage:\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\n   \n   * @example\n   Static:\n   Controller:\n       $scope.isUrgent = true;\n       $scope.onChange = function(isUrgent) {\n           console.log(isUrgent);\n       };\n   Usage:\n       <smart-switch label=\"Urgent\" ng-model=\"isUrgent\" on-change=\"onChange(isUrgent)\"></smart-switch>\n       \n   * @example\n   Disabled switch:\n   <smart-switch disable=\"true\"></smart-switch>     \n   */\n  \n(function() {\n    'use strict';\n    \n    angular.module('SMART2').directive('smartSwitch', ['$timeout', 'ScrollTo', 'RuleEngine', function ($timeout, ScrollTo, RuleEngine) {\n        return {\n            restrict: 'E',\n            replace: true,\n            require: '?ngModel',\n            scope: {\r\n                //ngModel: '=?',\n                disable: '@',\n                isMandatory: '@',\n                isVisible: '=?',\n                label: '@',\n                rightLabel: '=?',\n                leftLabel:'=?',\n                minHeight: '@',\n                fill: '@',\n                rules: '@',\n                validate: '=?',\n                focus: '=?',\n                parentElement: '@',\n                errorMessage: '@',\n                onChange: '&',\n                removable: '@',\n                additionaltext: '=additionaltext'\n            },\n            link: function (scope, element, attrs, ngModelCtrl) {\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\n    \n                scope.fill = scope.$eval(scope.fill) == undefined ? true : scope.$eval(scope.fill);\n                scope.leftLbl = \"Off\";\n                scope.rightLbl = \"On\";\n\n                if (typeof scope.leftLabel != \"undefined\")\n                    scope.leftLbl = scope.leftLabel;\n                if (typeof scope.rightLabel!=\"undefined\")\n                    scope.rightLbl = scope.rightLabel;\n\n\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\n\n                \n                /*\n                 * Focus field when focus is set to true\n                 */\n                var onFocus = scope.$watch('focus', function(newVal) {\n                    if(newVal) {\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\n                        scope.focus = false;\n                    }\n                });\n                \n                /*\n                 * Validate field whene validate is set to true\n                 */\n                var onValidate = scope.$watch('validate', function(newValue) {\n                    if(newValue != undefined && newValue) {\n                        scope.validateRules();\n                    }\n                });\n                \n                /*\n                 * Validate rules\n                 */\n                scope.validateRules = function () {\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\n\n                    if (scope.rules) {\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\n\n                        for (var i = 0; i < rules.length; i++) {\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\n                                    scope.errorMessage = rules[i].error;\n                                    break;\r\n                                }\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(rules[i], function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\n                        }\n                    }\n                };\n                \n                scope.ngChange = function () {\n                    updateView();\n                    scope.validateRules();\n                    $timeout(function() {\n                        scope.onChange();\n                    });\n                };\n\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                });\n            },\n            templateUrl: 'shared/directives/uiElements/smartSwitch/smartSwitchTemplate.html'\n        };\n    }]);\n})();    ","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Tabs-control\r\n * @description This directive is useful for creating a tabs control.\r\n *\r\n * @attr {Array} tab-config\r\n *    Tabs config. Please see example for more.\r\n * @attr {String} width\r\n *    Width of tabs holder. Default value is '100%'.\r\n *\r\n * @example\r\n Tabs Config in default case\r\n  $scope.tabsData = [{\r\n \"title\" : \"Tab 1\",\r\n \"contentUrl\" : \"tab1.html\",\r\n \"active\" : true\r\n }, {\r\n \"title\" : \"Tab 2\",\r\n \"contentUrl\" : \"tab2.html\"\r\n }, {\r\n \"title\" : \"Tab 3\",\r\n \"contentUrl\" : \"tab3.html\"\r\n }];\r\n \r\n *@example\r\n Controller in case default tab styling is to be overriden(set htmlmode=true and pass template url in tabsUrl):\r\n $scope.tabsData = [{\r\n \"title\" : \"Tab 1\",\r\n \"contentUrl\" : \"tab1.html\",\r\n \"active\" : true,\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template1.html\"\r\n }, {\r\n \"title\" : \"Tab 2\",\r\n \"contentUrl\" : \"tab2.html\",\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template2.html\"\r\n }, {\r\n \"title\" : \"Tab 3\",\r\n \"contentUrl\" : \"tab3.html\",\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template3.html\"\r\n }];\r\n\r\n Usage:\r\n <smart-tabs tab-config=\"{{tabsData}}\" width=\"60%\" header-template=\"test_template.html\"></smart-tabs>\r\n */\r\n\r\n(function() {\r\n\t'use strict';\r\n\tvar tabsId = 0;\r\n\r\n\tangular.module('SMART2').directive('smartTabs', ['$timeout','$parse','$focusOnField',\r\n\tfunction ($timeout, $parse, $focusOnField) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\treplace : true,\r\n\t\t\tscope: true,\r\n\t\t\tlink: function (scope, element, attrs) {\r\n                if(attrs.showCount == 'true') {\r\n                    scope.showCount = true;\r\n                }\r\n\t\t\t    var d = new Date().getTime();\r\n\t\t\t    scope.uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n\t\t\t        var r = (d + Math.random() * 16) % 16 | 0;\r\n\t\t\t        d = Math.floor(d / 16);\r\n\t\t\t        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n\t\t\t    });\r\n\r\n\t\t\t    var selectionCallback = $parse(attrs.onSelect),\r\n\t\t\t\t    tabWidth = attrs.width,\r\n\t\t\t\t    tabParent = element.find('.tabparent'),\r\n\t\t\t\t    currentTab;\r\n\r\n\t\t\t    scope.revisionMode = ((!attrs.revisionMode || attrs.revisionMode == \"false\") ? false : true);\r\n\t\t\t\ttabParent.css('width', tabWidth);\r\n\t\t\t\tvar timeoutCanel = $timeout(function() {\r\n\t\t\t\t\tvar tabs = element.find('.tabs');\r\n\t\t\t\t\ttabs.tabs();\r\n\t\t\t\t\t$timeout.cancel(timeoutCanel);\r\n\t\t\t\t});\r\n\t\t\t\t//scope.stickTabs = false;\r\n\r\n\t\t\t\tscope.vertical = attrs.vertical;\r\n\t\t\t\tscope.tabPanelHeight = angular.isDefined(attrs.tabPanelHeight) ? scope.vertical == 'true' ? attrs.tabPanelHeight : '100%' : '100%';\r\n\r\n\t\t\t\t//uniqueID\r\n\t\t\t\ttabsId = tabsId + 1;\r\n\t\t\t\tscope.tabId = \"tab-\" + tabsId;\r\n\t\t\t\tvar tabWidthInFloat = parseFloat(tabWidth);\r\n\t\t\t\tvar remainingWidth = (100 - tabWidthInFloat) + \"%\";\r\n\t\t\t\t//var rightHeaderStyle=\"{'background-color':'red';'width':\"+remainingWidth+\";'margin-left'}\";\r\n\t\t\t\tscope.headerStyle = {\r\n\t\t\t\t\t\"width\" : remainingWidth,\r\n\t\t\t\t\t\"margin-left\" : tabWidth,\r\n\t\t\t\t\t\"height\" : '48px'\r\n\t\t\t\t};\r\n\t\t\t\tscope.headerTemplate = attrs.headerTemplate;\r\n\t\t\t\tattrs.$observe('tabConfig', function (value) {\r\n\t\t\t\t    scope.tabConfig = scope.$eval(value);\r\n\t\t\t\t    var activeTabContent = currentTab;\r\n\t\t\t\t    var item = _.find(scope.tabConfig, function (item) { return item.active == true; });\r\n                    if (currentTab && currentTab.htmlmode && item == undefined) {\r\n                        for (var i = 0; i < scope.tabConfig.length; i++) {\r\n                            var tTab = scope.tabConfig[i];\r\n                            if (tTab.title.toLowerCase() === activeTabContent.title.toLowerCase()) {\r\n                                tTab.active = true;\r\n                               }\r\n\t\t\t    \t}\r\n\t\t\t\t    }\r\n\t\t\t\t    currentTab = (_.find(scope.tabConfig, function (tab) {\r\n\t\t\t\t        return tab.active;\r\n\t\t\t\t    }));\r\n\t\t\t\t    if (currentTab) {\r\n\t\t\t\t        currentTab.isLoaded = true;\r\n\t\t\t\t        scope.selectedTabContentUrl = currentTab.contentUrl;\r\n\t\t\t\t        //scope.tabClickCallback(currentTab);\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//attrs.$observe('stickTabs', function (value) {\r\n\t\t\t\t//    scope.stickTabs = scope.$eval(value);\r\n\t\t\t\t//});\r\n\r\n\t\t\t\t//scope.$on('checkTabIsDirty', function (event, data) {\r\n\t\t\t\t//    currentTab.isTabValidate = scope[currentTab.onBeforeTabChange] && scope[currentTab.onBeforeTabChange]();\r\n\t\t\t\t//});\r\n\r\n\t\t\t\tscope.tabClickCallback = function (item) {\r\n\t\t\t\t    var returnObject = angular.copy(item);\r\n\t\t\t\t    returnObject.previousTab = currentTab;\r\n\t\t\t\t    returnObject.previousTab.active = false;\r\n\t\t\t\t    currentTab = item;\r\n\t\t\t\t    item.active = true;\r\n\t\t\t\t    item.isLoaded = true;\r\n                    //returnObject.previousTab.isTabValidate = scope[returnObject.previousTab.onBeforeTabChange] && scope[returnObject.previousTab.onBeforeTabChange]();\r\n\t\t\t\t    if (angular.isFunction(selectionCallback)) {\r\n\t\t\t\t        selectionCallback(scope, { 'e': returnObject });\r\n\t\t\t\t    }\r\n\t\t\t\t    //TWO-6116  fixed.\r\n\t\t\t\t    //$timeout(function () {\r\n\t\t\t\t    //    scope.$broadcast('scrollTopToBottom', element.find('.scroll-container').outerHeight());\r\n\t\t\t\t    //}, 800);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.tabbingOnKeyDown = function (evt, $index, tabType) {\r\n\t\t\t\t    var moveTo;\r\n\t\t\t\t    if (evt.keyCode == 38 && angular.isDefined(tabType) || evt.keyCode == 37 && !angular.isDefined(tabType)) {\r\n\t\t\t\t        moveTo = $index - 1;\r\n\t\t\t\t        if (!(moveTo < 0)) {\r\n\t\t\t\t            element.find('.tab').eq(moveTo).focus();\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 40 && angular.isDefined(tabType) || evt.keyCode == 39 && !angular.isDefined(tabType)) {\r\n\t\t\t\t        moveTo = $index + 1;\r\n\t\t\t\t        if (!(moveTo >= scope.tabConfig.length)) {\r\n\t\t\t\t            element.find('.tab').eq(moveTo).focus();\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 13) {\r\n\t\t\t\t        scope.tabClickCallback(scope.tabConfig[$index]);\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 9) {\r\n\t\t\t\t        var firstFieldFocus = element.find(\"tabContent\").find(\"a, input, textarea, [tabindex]\").first();\r\n\t\t\t\t        $focusOnField(firstFieldFocus);\r\n\t\t\t\t    }\r\n\t\t\t\t    evt.stopPropagation();\r\n\t\t\t\t};\r\n                \r\n\t\t\t\tscope.showTabArrows = false;\r\n\t\t\t\tscope.disableNext = false;\r\n\t\t\t\tscope.disablePrev = true;\r\n\t\t\t\tvar isMovableTabs = true;\r\n\t\t\t\tvar tabHorizontalWidth, tabWrapperWidth, totalTabWidth, def, transValue, tempValue = 0;\r\n\r\n\t\t\t\tfunction setTabs() {\r\n\t\t\t\t    $timeout(function () {\r\n\t\t\t\t        tabHorizontalWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).width();\r\n\t\t\t\t        totalTabWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper\")[0].scrollWidth; //.width() doesn't return overflowed width of child element\r\n\r\n\t\t\t\t        if (totalTabWidth > tabHorizontalWidth) {\r\n\t\t\t\t            scope.showTabArrows = true;\r\n\t\t\t\t        }\r\n\r\n\t\t\t\t        $timeout(function () {\r\n\t\t\t\t            tabWrapperWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper\").width();\r\n\t\t\t\t            def = totalTabWidth - tabWrapperWidth;\r\n\t\t\t\t        });\r\n\t\t\t\t    });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.$on('LastRepeaterElement', function (attrs, elem) {\r\n\t\t\t\t    if (elem.is(\"li\") && isMovableTabs && attrs.nextback) {\r\n\t\t\t\t        setTabs();\r\n\t\t\t\t        isMovableTabs = false;\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.getTabsDimensions = function () {\r\n\t\t\t\t    return {\r\n\t\t\t\t        'w': element.find(\"#tabs-horizontal-\" + scope.uniqueID).width()\r\n\t\t\t\t    };\r\n\t\t\t\t};\r\n\t\t\t\tscope.$watch(scope.getTabsDimensions, function (newValue, oldValue) {\r\n\t\t\t\t    if (newValue.w != oldValue.w && attrs.nextback) {\r\n\t\t\t\t        setTabs();\r\n\t\t\t\t    }\r\n\t\t\t\t}, true);\r\n\r\n\t\t\t\tscope.goRight = function () {\r\n\t\t\t\t    if (!scope.disableNext) {\r\n\t\t\t\t        tempValue = tempValue + 175;\r\n\t\t\t\t        if (tempValue < def) {\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disablePrev = false;\r\n\t\t\t\t        }\r\n\t\t\t\t        else {\r\n\t\t\t\t            tempValue = def;\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disablePrev = false;\r\n\t\t\t\t            scope.disableNext = true;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.goLeft = function () {\r\n\t\t\t\t    if (!scope.disablePrev) {\r\n\t\t\t\t        tempValue = tempValue - 175;\r\n\t\t\t\t        if (tempValue < def && tempValue > 0) {\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disableNext = false;\r\n\t\t\t\t        }\r\n\t\t\t\t        else {\r\n\t\t\t\t            tempValue = 0;\r\n\t\t\t\t            transValue = tempValue;\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disableNext = false;\r\n\t\t\t\t            scope.disablePrev = true;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                \r\n\t\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\t    tabParent = null;\r\n\t\t\t\t    element.remove();\r\n\t\t\t\t    scope = null;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/uiElements/smartTabs/smartTabsTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();\r\n","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Character-restrict\r\n * @description This directive is useful for preventing character from entering in text field .\r\n * \r\n * @attr {String} patternreg\r\n *    Js Regex pattern need to be entered\r\n * \r\n * @example\r\n Dynamic: \r\n  Usage:\r\n      <smart-textfield model-data=\"config.modelData\" smart-character-restrict pattern=\"[^\\w\\s-()]\"></smart-form-widget>\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartCharacterRestrict', function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var keyCheckRe = new RegExp(attrs.patternreg, 'ig'),\r\n                    valueCheckRe = attrs.validationreg ? new RegExp(attrs.validationreg, 'ig') : false,\r\n                    valueRegexPassed,\r\n                    allowCharacterFlag = attrs.allowpaste;\r\n\r\n                element\r\n                    .off('keypress.smartcharacterrestrict')\r\n                    .on('keypress.smartcharacterrestrict', 'input', function (inputValue) {\r\n                        keyCheckRe.compile(attrs.patternreg, 'ig');\r\n                        if (inputValue.key == null) {\r\n                            return ''\r\n                        }\r\n\r\n                        if (keyCheckRe.test(inputValue.key)) {\r\n                            inputValue.preventDefault();\r\n                        }\r\n\r\n                        if (valueCheckRe) {\r\n                            valueCheckRe.compile(attrs.validationreg, 'ig');\r\n                            valueRegexPassed = valueCheckRe.test(inputValue.target.value + inputValue.key)\r\n                            if (valueRegexPassed == false) {\r\n                                inputValue.preventDefault();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                element\r\n                    .off('paste.smartcharacterrestrict')\r\n                    .on('paste.smartcharacterrestrict', 'input', function (inputValue) {\r\n                        if (allowCharacterFlag === 'true') {\r\n\r\n                        } else {\r\n                            return false;\r\n                        }\r\n\r\n                    });\r\n            }\r\n        }\r\n    });\r\n})(angular);","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Textfield\r\n * @description This directive is useful for creating a textfield or a date-picker or a auto-complete ui element depending upon the 'type' passed.\r\n * \r\n * @attr {String} label\r\n *    Label to be displayed for identification of this ui element\r\n * @attr {String} placeholder\r\n *    Hint text to be displayed in textfield\r\n * @attr {String} align\r\n *    Text alignment. Possible values are left, center, right.\r\n * @attr {Boolean} autocomplete \r\n *    This attribute is useful for turning off browser's default autocomplete behaviour\r\n * @attr {Number} maxlength\r\n *    Number of characters allowed in textfield\r\n * @attr {Number} decimalprecision\r\n *    Number of characters allowed after decimal precision in textfield\r\n * @attr {Number} min\r\n *    Minimum value allowed in textfield \r\n * @attr {Number} max\r\n *    Maximum value allowed in textfield\r\n * @attr {Number} minmaxprecision\r\n *    Number of characters that should be visible in number type textfield. Internally filter is applied for the given numbers. Data to be sent in array format with 2 array contents \r\n * @attr {Var} ng-model\r\n *    Default value to be displayed in textfield\r\n * @attr {Object} ng-model-options\r\n *    https://docs.angularjs.org/api/ng/directive/ngModelOptions\r\n * @attr {Boolean} focus \r\n *    If set to true, this ui element will be focused\r\n * @attr {Boolean} validate\r\n *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n * @attr {Array} rules \r\n *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n * @attr {String} error-message \r\n *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n * @attr {Boolean} is-mandatory \r\n *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n * @attr {Boolean} is-visible \r\n *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n * @attr {Number} colspan\r\n *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n *    Default value is 1.\r\n *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n * @attr {String} type \r\n *    Type of textfield. Default value is 'text'. Possible values are area (textarea), number, email, date, autocomplete.\r\n * @attr {Boolean} readonly \r\n *    If set to true, textfield cannot be editable. Textfield's blur and focus events will still be fired (default behaviour).\r\n * @attr {Boolean} disable \r\n *    If set to true, textfield cannot be editable. Textfield's blur and focus events will not be fired (default behaviour).\r\n * @attr {Function} on-focus\r\n *    Callback function when ui element's focus event is fired\r\n * @attr {Function} on-blur\r\n *    Callback function when ui element's blur event is fired\r\n * @attr {Function} on-key-up\r\n *    Callback function when ui element's keyup event is fired\r\n * @attr {Function} on-key-down\r\n *    Callback function when ui element's keydown event is fired\r\n * @attr {Function} on-key-press\r\n *    Callback function when ui element's keypress event is fired\r\n * @attr {Function} on-enter\r\n *    Callback function when ENTER (RETURN) key is pressed\r\n * \r\n * @example\r\n Dynamic:\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"companyName\": \"GEP\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Company name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"isVisible\": false,\r\n                                      \"data\": \"companyName\",\r\n                                      \"colspan\": 1,\r\n                                      \"validate\": false,\r\n                                      \"focus\": false,\r\n                                      \"onFocus\": \"onFocus\",\r\n                                      \"onBlur\": \"onBlur\" \r\n                                      \"onChange\": \"onChange\"\r\n                                      \"onKeyPress\": \"onKeyPress\"\r\n                                      \"onKeyUp\": \"onKeyUp\"\r\n                                      \"onKeyDown\": \"onKeyDown\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"number\"\r\n                                          \"maxlength\": \"\",\r\n                                          \"decimalprecision\": \"\",\r\n                                          \"minmaxprecision\": [2,5],\r\n                                          \"disable\": true,\r\n                                          \"readonly\": true,\r\n                                          \"align\": \"left\",\r\n                                          \"placeholder\": \"\",\r\n                                          \"autocomplete\": false\r\n                                      },\r\n                                      \"rules\": [\r\n                                          { \r\n                                              \"rule\": \"this.length > 10\", \r\n                                              \"errorMessage\": \"Length should not be greater than 10\" \r\n                                          }\r\n                                      ]\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Textfield with ng-model-options. This example is applicable only if one wants to use 'ng-model-options' with 'getterSetter' option. Otherwise VM\r\n does not need to be used as 'ng-model' or 'data'.\r\n Dynamic:\r\n Controller:\r\n     var defaultCompanyName = 'GeP';\r\n     this.companyName = function (val) {\r\n         if (val !== undefined) {\r\n             defaultCompanyName = val;\r\n         }\r\n         return defaultCompanyName;\r\n     };\r\n\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"companyName\": \"GEP\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Company name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"isVisible\": false,\r\n                                      \"data\": \"controllerVM.companyName\",\r\n                                      \"attributes\": {\r\n                                          \"ngModelOptions\": { getterSetter: true }\r\n                                      },\r\n                                      \"rules\": [\r\n                                          { \r\n                                              \"rule\": \"this.length > 10\", \r\n                                              \"errorMessage\": \"Length should not be greater than 10\" \r\n                                          }\r\n                                      ]\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Textfield with ng-model-options. This example is applicable only if one wants to use 'ng-model-options' with 'getterSetter' option. Otherwise VM\r\n does not need to be used as 'ng-model' or 'data'.\r\n Static:\r\n Controller:\r\n     angular.module('SMART2', []).controller('textFieldController', ['$scope', function($scope) {\r\n         var defaultCompanyName = 'GeP';\r\n         this.companyName = function (val) {\r\n             if (val !== undefined) {\r\n                 defaultCompanyName = val;\r\n             }\r\n             return defaultCompanyName;\r\n         };\r\n     }]);\r\n  Usage:\r\n      <div ng-controller=\"textFieldController as textFieldVM\">\r\n        <smart-textfield ng-model=\"textFieldVM.companyName\" ng-model-options=\"{getterSetter: true}\"></smart-textfield>\r\n      </div>\r\n\r\n * @example\r\n Static:\r\n Controller:\r\n      $scope.companyName = \"GEP\";\r\n Usage:\r\n      <smart-textfield label=\"First name\" ng-model=\"companyName\"></smart-textfield>\r\n      \r\n * @example\r\n Textfield with events: \r\n '$event' passed in callback functions in following example is angular event. \r\n  <smart-textfield on-focus=\"onFocus()\" \r\n                   on-blur=\"onBlur()\" \r\n                   on-change=\"onChange($event)\"\r\n                   on-key-press=\"onKeyPress($event)\"\r\n                   on-key-up=\"onKeyUp($event)\"\r\n                   on-key-down=\"onKeyDown($event)\"></smart-textfield>        \r\n */\r\n\r\n\r\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Date-picker\r\n * @description This directive is useful for creating a date picker. This directive is derived from 'textfield' directive. All the attributes of 'textfield' directive are applicable to this directive. Following are some additional attributes.\r\n * \r\n * @attr {String} format \r\n *    Date format. For e.g. dd/MM/yyyy. For more details browse https://docs.angularjs.org/api/ng/filter/date\r\n * @attr {Var} ng-model\r\n *    Default date to be displayed. 'ng-model' is expected to be in milliseconds (timestamp) or javascript date. For e.g. 5656534324368 or \"2014-09-18T10:03:58\" or \"Fri Mar 04 2016 13:10:56 GMT+0530 (IST)\"\r\n * \r\n * @example\r\n Dynamic: (Timestamp)\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"date\": 1457094173954\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Date\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"date\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"date\",\r\n                                          \"format\": \"dd/MM/yyyy\"\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Dynamic: (Javascript date)\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"date\": \"Fri Mar 04 2016 17:50:50 GMT+0530 (IST)\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Date\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"date\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"date\",\r\n                                          \"format\": \"dd/MM/yyyy\"\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Static: (Timestamp)\r\n Controller:\r\n      $scope.date = 1457094173954;\r\n Usage:\r\n      <smart-textfield type=\"date\" label=\"Date\" ng-model=\"date\"><smart-textfield> \r\n      \r\n * @example\r\n Static: (Javascript date)\r\n Controller:\r\n      $scope.date = \"Fri Mar 04 2016 17:50:50 GMT+0530 (IST)\";\r\n Usage:\r\n      <smart-textfield type=\"date\" label=\"Date\" ng-model=\"date\"><smart-textfield>         \r\n */\r\n\r\n\r\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Auto-complete\r\n * @description This directive is useful for creating an auto-complete ui element. This directive is derived from 'textfield' directive. All the attributes of 'textfield' directive are applicable to this directive. Following are some additional attributes.\r\n * \r\n * @attr {Object} ng-model\r\n *    Default value to be displayed in textfield. 'ng-model' is expected to be an object having property (key) set in 'datakey' attribute.\r\n * @attr {Array} filterkeys\r\n *    An array of properties (keys) on which filtering to be applied. Suggestions will get filtered on the basis of properties (keys) passed in array.\r\n * @attr {String} optionformat\r\n *    A single suggestion format (template)\r\n * @attr {String} displayformat\r\n *    A format in which the data in textfield to be displayed\r\n * @attr {Boolean} loading \r\n *    This attribute can be used to display a loader while autosuggest data is being fetched from the server.\r\n * @attr {Function} on-select\r\n *    Callback when a suggestion is selected\r\n * \r\n * @example\r\n Dynamic:\r\n Controller:\r\n     $scope.onChange = function(uiElementConfig) {\r\n          uiElementConfig.attributes.options = [\r\n              {\r\n                  \"UserId\": 28360,\r\n                  \"UserName\": \"SRUser1@outlook.com\",\r\n                  \"FirstName\": \"SR \",\r\n                  \"LastName\": \"User1\"\r\n              }, {\r\n                  \"UserId\": 28977,\r\n                  \"UserName\": \"test1\",\r\n                  \"FirstName\": \"Test\",\r\n                  \"LastName\": \"\"\r\n              }, {\r\n                  \"UserId\": 57950,\r\n                  \"UserName\": \"HShah\",\r\n                  \"FirstName\": \"Harshit\",\r\n                  \"LastName\": \"Shah\"\r\n              }\r\n          ];\r\n     };\r\n     $scope.onSelect = function(autoSuggestData) {\r\n         console.log(autoSuggestData);\r\n         //   autoSuggestData will be updated every time a new suggestion is chosen. Passing 'model' in 'onSelect' is optional.\r\n     };\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"autoSuggestData\": { \"UserId\": 28360, \"UserName\": \"SRUser1@outlook.com\", \"FirstName\": \"SR\", \"LastName\": \"User1\", \"title\": \"SR User1\" }\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Auto complete\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"autoSuggestData\",\r\n                                      \"onChange\": \"onChange\",\r\n                                      \"onSelect\": \"onSelect(autoSuggestData)\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"autocomplete\",\r\n                                          \"options\": [],\r\n                                          \"filterkeys\": [\"FirstName\", \"LastName\"],\r\n                                          \"optionformat\": \"<span>{FirstName} {LastName}</span>\",\r\n                                          \"displayformat\": \"{FirstName} {LastName}\",\r\n                                          \"loading\": false\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n     };\r\n  Usage:\r\n     <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n * @example\r\n Static:\r\n Controller:\r\n     $scope.autoCompleteData = { \"UserId\": 28360, \"UserName\": \"SRUser1@outlook.com\", \"FirstName\": \"SR\", \"LastName\": \"User1\", \"title\": \"SR User1\" };\r\n     $scope.onChange = function(e) {\r\n          //  Textfield's value can be found in e.data[0].value\r\n          //  See console for more\r\n          console.log(e);\r\n          $scope.options = [\r\n              {\r\n                  \"UserId\": 28360,\r\n                  \"UserName\": \"SRUser1@outlook.com\",\r\n                  \"FirstName\": \"SR \",\r\n                  \"LastName\": \"User1\"\r\n              }, {\r\n                  \"UserId\": 28977,\r\n                  \"UserName\": \"test1\",\r\n                  \"FirstName\": \"Test\",\r\n                  \"LastName\": \"\"\r\n              }, {\r\n                  \"UserId\": 57950,\r\n                  \"UserName\": \"HShah\",\r\n                  \"FirstName\": \"Harshit\",\r\n                  \"LastName\": \"Shah\"\r\n              }\r\n          ]; \r\n     };\r\n     $scope.onSelect = function(autoCompleteData) {\r\n         console.log(autoCompleteData);\r\n         //   autoCompleteData will be updated every time a new suggestion is chosen. Passing 'model' in 'onSelect' is optional.\r\n     };\r\n Usage:\r\n     <smart-textfield type=\"autocomplete\" label=\"Auto complete\" ng-model=\"autoCompleteData\" filterkeys=\"['FirstName', 'LastName']\" optionformat=\"<span>{FirstName} {LastName}</span>\" displayformat=\"{FirstName} {LastName}\" options=\"options\" on-change=\"onChange($event)\" on-select=\"onSelect(autoCompleteData)\"></smart-textfield>\r\n */\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n    var textfieldId = 19820116;\r\n    //var directiveV2 = true;\r\n    //var isDirectiveV2enabled = function () { return true; }\r\n    $(function () {\r\n        angular.element('body').off('click').on('click', '.daterangepicker', function (e) {\r\n            e.stopPropagation();\r\n        });\r\n    });\r\n\r\n    angular.module('SMART2').directive('smartTextfield', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'RuleEngine', 'smartTextFieldService', 'smartTextField3Service', '$filter', '$window', 'persistenceService',\r\n        (typeof isDirectiveV2enabled !== 'undefined' ? (isDirectiveV2enabled() === true || isDirectiveV2enabled() === 'V3' ? smartTextField3Func : smartTextFieldFunc) : smartTextFieldFunc)]);\r\n\r\n\r\n    function smartTextFieldFunc($rootScope, $timeout, $translate, ScrollTo, RuleEngine, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                //ngModel: '=?',\r\n                modelOptions: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                scope.modelOptions = scope.modelOptions === false ? {} : !scope.modelOptions ? {\r\n                    updateOn: 'default blur change',\r\n                    debounce: { 'default': 300, 'blur': 0, 'change': 0 }\r\n                } : scope.modelOptions;\r\n                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon\r\n                var timePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker == 'true' ? true : false);\r\n                scope.format = (scope.format ? scope.format : timePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n                scope.count = 0;\r\n                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                var number, rulesValidationEvent;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n\r\n\r\n                if (scope.type == 'number') {\r\n                    element.bind(\"DOMMouseScroll mousewheel onmousewheel\", function (event) {\r\n\r\n                        // for IE\r\n                        event.returnValue = false;\r\n                        // for Chrome and Firefox\r\n                        if (event.preventDefault) {\r\n                            event.preventDefault();\r\n                        }\r\n\r\n                    });\r\n                }\r\n\r\n\r\n                var uniqueIDGenerator = function () {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xx2xxpxxoxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                if (attrs.validateOn) {\r\n                    rulesValidationEvent = attrs.validateOn;\r\n                }\r\n                else {\r\n                    rulesValidationEvent = 'blur';\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\r\n\r\n\r\n                function checkIfActive() {\r\n                    if (scope.readonly == 'true') {\r\n                        return true;\r\n                    }\r\n                    if (scope.type == 'number' && scope.ngModel !== 0 + '' && scope.placeholder === '' && (scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                        return false;\r\n                    }\r\n                    if (scope.type != 'number' && scope.type != 'autocomplete' && scope.placeholder === '' && (scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                        return false;\r\n                    }\r\n                    if (scope.type == 'autocomplete' && scope.placeholder === '' && (scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n\r\n                function setPrecisionLimits() {\r\n                    number = scope.ngModel;\r\n                    if (number != undefined) {\r\n                        var arr = (number.toString()).split('e')\r\n                        if (arr.length > 1 && parseInt(arr[1]) < 0) {\r\n                            number = (number).toFixed(6);\r\n                            scope.ngModel = number;\r\n                        }\r\n                        var tempArr = number.toString().split('.');\r\n                        if (tempArr != undefined && tempArr.length > 1) {\r\n                            var preDecimal = tempArr[0];\r\n                            if (preDecimal != 0 && preDecimal.toString().length > 20) {\r\n                                var tempVal = preDecimal.toString().substring(0, 19);\r\n                                scope.ngModel = parseInt(tempVal);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (number != 0 && number.toString().length > 20) {\r\n                                var tempVal = number.toString().substring(0, 19);\r\n                                scope.ngModel = parseInt(tempVal);\r\n                            }\r\n                        }\r\n                        if (scope.decimalprecision != undefined) {\r\n                            scope.ngModel = parseFloat(parseFloat(scope.ngModel).toFixed(scope.decimalprecision));\r\n                        }\r\n                        else if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length > 2 || splitPrecision.length < 1)\r\n                                return;\r\n                            var lowerPrecisionLimit = splitPrecision[0];\r\n                            var highPrecisionLimit = splitPrecision[1];\r\n\r\n                            var postDecimalNumbers = ((scope.ngModel + \"\").split(\".\")[1] != undefined) ? (scope.ngModel + \"\").split(\".\")[1].length : 0;\r\n\r\n                            if (postDecimalNumbers == 0)\r\n                                return;\r\n\r\n                            if (lowerPrecisionLimit > postDecimalNumbers && postDecimalNumbers < highPrecisionLimit && postDecimalNumbers != 0) {\r\n                                scope.ngModel = parseFloat(parseFloat(scope.ngModel).toFixed(lowerPrecisionLimit));\r\n                            }\r\n                            else if (postDecimalNumbers >= highPrecisionLimit && postDecimalNumbers != 0) {\r\n                                var fixed = Math.pow(10, highPrecisionLimit);\r\n                                scope.ngModel = Math.floor(scope.ngModel * fixed) / fixed;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.isActive = checkIfActive();\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.textfieldId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    textfieldId = uniqueIDGenerator();\r\n                    scope.textfieldId = 'txt-' + textfieldId;\r\n                }\r\n\r\n                scope.labelForTextfieldId = 'label-for-' + scope.textfieldId;\r\n\r\n                /*\r\n                * Skip tab key focus, if the field is readonly\r\n                */\r\n                setTimeout(function () {\r\n                    if (scope.readonly == 'true' && scope.type != 'date') {\r\n                        angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n                    }\r\n\r\n                    try {\r\n                        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n                            scope.$parent.$parent.onEditableRender(scope, element);\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                });\r\n\r\n                /*\r\n                 * Validate the textfield as soon as the validate is set to true\r\n                 */\r\n                var unbindValidate = scope.$watch('validate', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Focus the textfield as soon as the focus is set to true\r\n                 */\r\n                var unbindFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        //  settimeout is added to avoid $digest already in progress\r\n                        setTimeout(function () {\r\n                            var el = angular.element('#' + scope.textfieldId);\r\n                            if (scope.label) {\r\n                                el.trigger('click');\r\n                                el.focus();\r\n                            } else {\r\n                                // if label is undefined or empty then directly focus on input element \r\n                                if (el.is(\"input\")) {\r\n                                    el.focus();\r\n                                } else {\r\n                                    el.find(\"input\").focus();\r\n                                }\r\n                            }\r\n                        }, 100); // increased timer hotfix for focus cell in ui-grid\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n                var checkRule = function () {\r\n                    var rules = scope.$eval(scope.rules);\r\n                    var isFoundInvalid = false;\r\n\r\n                    for (var i = 0; i < rules.length; i++) {\r\n                        if (typeof rules[i] == 'object') {\r\n                            if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                                scope.validate = true;\r\n                                scope.errorMessage = rules[i].error;\r\n                                scope.errorModel = rules[i].error;\r\n                                break;\r\n                            } else {\r\n                                if (scope.type === 'date') {\r\n                                    angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (!isFoundInvalid) {\r\n                                if (typeof scope.ngModel != 'object')\r\n                                    var data = scope.ngModel;\r\n                                else\r\n                                    var data = scope.displayModel;\r\n\r\n                                RuleEngine.isValid(rules[i], function (e) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = e.errorData.error;\r\n                                    scope.errorModel = e.errorData.error;\r\n                                    isFoundInvalid = true;\r\n                                }, data);\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                /*\r\n                 * Validate textfield rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    if (scope.readonly == 'true') {\r\n                        scope.isActive = true;\r\n                        return;\r\n                    }\r\n\r\n                    if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                        if (attrs.noTrim == 'true') {\r\n                            scope.ngModel = scope.ngModel;\r\n                        } else {\r\n                            scope.ngModel = scope.ngModel.trim();\r\n                        }\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n\r\n                    if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && (scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant('enterValueErrMsg');\r\n                        scope.errorModel = $translate.instant('enterValueErrMsg');\r\n                        return;\r\n                    }\r\n\r\n                    if (scope.type == 'number') {\r\n                        if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                            angular.element('#' + scope.textfieldId).val('');\r\n                            return;\r\n                        }\r\n                        if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                            if (scope.rules) {\r\n                                checkRule();\r\n                            }\r\n                            return;\r\n                        }\r\n                        if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                            scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.type == 'date' && !scope.rules) {\r\n                        $('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    scope.errorModel = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    if (typeof scope.ngModel != 'object')\r\n                                        var data = scope.ngModel;\r\n                                    else\r\n                                        var data = scope.displayModel;\r\n\r\n                                    RuleEngine.isValid(rules[i], function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    }, data);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                //  callback events\r\n                var isDateBlank = false;\r\n                scope.ngChange = function (e) {\r\n                    if (scope.type == 'number') {\r\n                        if (scope.ngModel == null || scope.ngModel == undefined)\r\n                            scope.count = 0;\r\n                        setPrecisionLimits();\r\n                    }\r\n                    scope.isActive = checkIfActive();\r\n                    if (rulesValidationEvent == 'change') {\r\n                        scope.validateRules();\r\n                    }\r\n\r\n                    if (scope.type != 'autocomplete') {\r\n                        updateView();\r\n                    }\r\n\r\n                    //  Value of 'e' is undefined in ng-change\r\n                    scope.onChange({\r\n                        $event: {\r\n                            data: angular.element('#' + scope.textfieldId),\r\n                            displayModel: scope.displayModel\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scope.ngFocus = function (e) {\r\n                    if (scope.type === 'autocomplete' || scope.clearListOnFocus === \"true\") {\r\n                        var Obj = element.find('input').devbridgeAutocomplete();\r\n                        if (element.find('input').val() == '' && Obj) {\r\n                            Obj.clear();\r\n                        }\r\n                    }\r\n                    scope.isActive = true;\r\n                    scope.validate = false;\r\n                    if (rulesValidationEvent == 'focus') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onFocus({ $event: e });\r\n                };\r\n\r\n                scope.ngBlur = function (e) {\r\n                    if (scope.type == 'number') {\r\n                        if (scope.min != undefined || scope.min != null) {\r\n                            if (scope.ngModel == undefined || scope.ngModel == null || isNaN(scope.ngModel)) {\r\n                                $('#' + scope.textfieldId).val('');\r\n                            }\r\n                        }\r\n                    }\r\n                    if (scope.type == 'date' && isDateBlank) {\r\n                        $timeout(function () {\r\n                            var targetedEle = document.activeElement;\r\n                            if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                                //  scope.ngModel = null;\r\n                                scope.dateModel = null;\r\n                            }\r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({\r\n                                    $date: scope.ngModel\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                    if (scope.type === 'autocomplete') {\r\n                        if (scope.ngModel && scope.displayformat) {\r\n                            var splittedDisplayFormat = [];\r\n                            if (scope.displayformat.indexOf(\":\") > 0)\r\n                                splittedDisplayFormat = scope.displayformat.split(':');\r\n                            else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                                splittedDisplayFormat = scope.displayformat.split('-');\r\n                            else\r\n                                splittedDisplayFormat = scope.displayformat.split('-');\r\n                            var result = \"\";\r\n                            for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                                result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                                if (i < splittedDisplayFormat.length - 1) {\r\n                                    if (scope.displayformat.indexOf(\"-\") > 0)\r\n                                        result += '-';\r\n                                    else if (scope.displayformat.indexOf(\":\") > 0)\r\n                                        result += ':';\r\n                                }\r\n                            }\r\n                            if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n                                if (result !== scope.displayModel)\r\n                                    scope.displayModel = '';\r\n                            }\r\n                        }\r\n                    }\r\n                    //as debounce is used smartTextField templates for updating model, $timeout is used to keep validateRules() on blur in sync\r\n                    $timeout(function () {\r\n                        if (scope.type == 'date') {\r\n                            if (pickerObj && pickerObj.isShowing) {\r\n                                return;\r\n                            }\r\n                            else {\r\n                                scope.validateRules();\r\n                                scope.isActive = checkIfActive();\r\n                            }\r\n                        }\r\n                        else {\r\n                            scope.validateRules();\r\n                            scope.isActive = checkIfActive();\r\n\r\n                            try {\r\n                                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n                    })\r\n\r\n                    //  had to use jQuery because 'active' class does not get removed sometimes even if scope.isActive's value is false\r\n                    scope.isActive || scope.validate ? angular.element('#' + scope.labelForTextfieldId).addClass('active') : angular.element('#' + scope.labelForTextfieldId).removeClass('active');\r\n\r\n                    //  had to use jQuery because 'invalid' class does not get removed sometimes even if scope.validate's value is false\r\n                    if (attrs.charactercounter) {\r\n                        scope.validate && scope.errorMessage ? angular.element('#' + scope.textfieldId).addClass('invalid') : angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n                    scope.focus = false;\r\n                    scope.onBlur({ $event: e });\r\n                };\r\n\r\n                scope.ngKeyUp = function (e) {\r\n                    if (scope.type == 'date') {\r\n                        if (e.which != 32) {\r\n                            var currentInputValue = $('#' + scope.textfieldId).val();\r\n                            if (currentInputValue == \"\") {\r\n                                scope.ngModel = null;\r\n                                scope.dateModel = \"\";\r\n                                isDateBlank = true;\r\n                                ngModelCtrl.$setViewValue('');\r\n                                if (angular.isFunction(scope.onDateChange)) {\r\n                                    scope.onDateChange({\r\n                                        $date: scope.ngModel\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rulesValidationEvent == 'keyUp') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onKeyUp({ $event: e });\r\n                };\r\n\r\n                scope.ngKeyDown = function (e) {\r\n                    if (rulesValidationEvent == 'keyDown') {\r\n                        scope.validateRules();\r\n                    }\r\n                    //to control number of down arrow,up arrow signs on number fields\r\n                    if (scope.type === \"number\" && (e.keyCode == 38 || e.keyCode == 40))\r\n                        e.preventDefault();\r\n                    scope.onKeyDown({ $event: e });\r\n\r\n                };\r\n\r\n                scope.ngKeyPress = function (e) {\r\n                    if (scope.type == 'number' || attrs.datanumeric) {\r\n                        //to control number of +,-, signs and alphabets on number fields\r\n                        var charCode = e.charCode || e.keyCode,\r\n                        textValue = e.currentTarget.value,\r\n                        decimalDigit = [],\r\n                        cc = String.fromCharCode(charCode),\r\n                        escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                        if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                            e.preventDefault();\r\n                        }\r\n                        // Restrict the 2 dots entering\r\n                        if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                            e.preventDefault();\r\n                        }\r\n\r\n                        if (textValue) {\r\n                            decimalDigit = textValue.toString().split('.');\r\n                        }\r\n                        // Restrict the decimal value from entering\r\n                        if (attrs.decimalprecision) {\r\n                            if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                                e.preventDefault();\r\n                            }\r\n                            if (decimalDigit.length == 2) {\r\n                                if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                                    e.preventDefault();\r\n                                }\r\n                            }\r\n                        }\r\n                        if (scope.min != undefined || scope.min != null) {\r\n                            if (scope.min >= 0 && e.charCode == 45) {\r\n                                e.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (rulesValidationEvent == 'keyPress') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onKeyPress({ $event: e });\r\n                    if (e.charCode == 13) {\r\n                        scope.onEnter({ $event: e });\r\n                    }\r\n\r\n                    // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n                    if (e.target.value.length === attrs.maxlength && e.charCode !== 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                };\r\n\r\n\r\n                /*\r\n                 * This function is required to generate value attribute \r\n                 * and useful when up/down key is pressed\r\n                 */\r\n                function getFormattedData(data) {\r\n                    if (!data || data.length == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{');\r\n                            for (var j = 0; j < parentSplit.length; j++) {\r\n                                var childSplit = parentSplit[j].split('}');\r\n                                for (var k = 0; k < childSplit.length; k++) {\r\n                                    if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n\r\n                /*\r\n                 * Get plain display data\r\n                 */\r\n                function getDisplayData(data) {\r\n                    if (data == undefined || data == null || data == '') {\r\n                        return '';\r\n                    }\r\n                    var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                    try {\r\n                        var parentSplit = str.split('{');\r\n                        for (var j = 0; j < parentSplit.length; j++) {\r\n                            var childSplit = parentSplit[j].split('}');\r\n                            for (var k = 0; k < childSplit.length; k++) {\r\n                                if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                                    evalResult = eval('data.' + childSplit[k]);\r\n                                    evaluatedKeysCounter++;\r\n                                    if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                        evalResult = '';\r\n                                        nullKeysCounter++;\r\n                                    }\r\n                                    str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (evaluatedKeysCounter == nullKeysCounter) {\r\n                            str = '';\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Convert timestamp to UTC timestamp \r\n                 */\r\n                function toUTC(date) {\r\n                    return Date.UTC(\r\n                        date.getFullYear()\r\n                        , date.getMonth()\r\n                        , date.getDate()\r\n                        , date.getHours()\r\n                        , date.getMinutes()\r\n                        , date.getSeconds()\r\n                        , date.getMilliseconds()\r\n                    );\r\n                };\r\n                scope.isValueDateObj = false;\r\n                var doesContainDateString = false;\r\n                var dateFormate = scope.format;\r\n                function getGridFormatToTimestamp(stringdate) {\r\n                    var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                    // tmpModel = tmpModel.split('+');\r\n                    // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n                    return moment(tmpModel).format(dateFormate);\r\n                }\r\n                var pickerObj;\r\n                function createDatePicker() {\r\n                    $timeout(function () {\r\n                        var picker = angular.element('#' + scope.textfieldId);\r\n                        var callApplyFuncFlag = true;\r\n                        function setDateFormate(datePar) {\r\n                            if (doesContainDateString) {\r\n                                scope.ngModel = '\\/Date(' + (datePar.unix() * 1000) + ')\\/';\r\n                            } else {\r\n                                if (scope.isValueDateObj) {\r\n                                    var tempDate = datePar.format();\r\n                                    scope.ngModel = new Date(tempDate);\r\n                                } else {\r\n                                    scope.ngModel = (datePar.unix() * 1000);\r\n                                }\r\n                            }\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                            isDateBlank = false;\r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({ $date: scope.ngModel });\r\n                            }\r\n                        }\r\n                        var minDate = angular.isDefined(scope.min) ? doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(dateFormate) : '';\r\n                        var maxDate = angular.isDefined(scope.max) ? doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(dateFormate) : '';\r\n\r\n                        var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                        var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                        pickerObj = picker.daterangepicker({\r\n                            \"singleDatePicker\": true,\r\n                            \"showDropdowns\": true,\r\n                            \"timePicker\": timePicker,\r\n                            \"timePicker24Hour\": timePicker24Hour,\r\n                            \"timePickerIncrement\": timePickerIncrement,\r\n                            \"autoApply\": false,\r\n                            \"opens\": \"right\",\r\n                            \"drops\": \"down\",\r\n                            \"minDate\": minDate,\r\n                            \"maxDate\": maxDate,\r\n                            \"locale\": {\r\n                                \"format\": dateFormate,\r\n                                'cancelLabel': $translate.instant('cancelBtn'),\r\n                                'applyLabel': $translate.instant('applyBtn')\r\n                            }\r\n                        }, function (start, end, label) {\r\n                            callApplyFuncFlag = false;\r\n                            setDateFormate(end);\r\n                        }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                            var pos = pickerObj.container.offset(),\r\n                                wHeight = window.innerHeight,\r\n                                srTop = $(window).scrollTop();\r\n                            if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                                pickerObj.drops = \"up\";\r\n                                pickerObj.move();\r\n                            } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                                pickerObj.drops = \"down\";\r\n                                pickerObj.move();\r\n                            }\r\n                        }).data(\"daterangepicker\");\r\n\r\n                        picker.on('apply.daterangepicker', function (ev, pickerr) {\r\n                            if (callApplyFuncFlag) {\r\n                                setDateFormate(pickerr.endDate)\r\n                            }\r\n                            callApplyFuncFlag = true;\r\n                        });\r\n\r\n                        if (isDateBlank) {\r\n                            picker.val('');\r\n                            scope.ngModel = \"\";\r\n                            ngModelCtrl.$setViewValue('');\r\n                        };\r\n                    });\r\n                }\r\n\r\n                switch (scope.type) {\r\n                    case 'autocomplete':\r\n                        // key to be used to bind options\r\n                        var filterKeys;\r\n                        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                        }\r\n                        else {\r\n                            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                        }\r\n                        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n                        var displayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n                        /*\r\n                         * Check if the options are updated\r\n                         */\r\n                        var autoCompleteField;\r\n                        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n                            try {\r\n                                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                                    autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                                        filterKeys: filterKeys,\r\n                                        optionFormat: optionFormat,\r\n                                        displayFormat: displayFormat,\r\n                                        lookup: getFormattedData(newOptions),\r\n                                        width: scope.width,\r\n                                        showNoSuggestionNotice: showNoSuggestion,\r\n                                        noSuggestionNotice: noSuggestionNotice,\r\n                                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                                        onSelect: function (suggestion) {\r\n                                            angular.element('#' + scope.labelForTextfieldId).trigger('click');\r\n                                            scope.$evalAsync(function () {\r\n                                                scope.displayModel = getDisplayData(suggestion);\r\n                                                scope.ngModel = suggestion;\r\n                                                updateView();\r\n                                                $timeout(function () {\r\n                                                    scope.onSelect({\r\n                                                        $event: {\r\n                                                            data: suggestion\r\n                                                        }\r\n                                                    });\r\n                                                });\r\n                                            });\r\n                                        }\r\n                                    }).devbridgeAutocomplete();\r\n                                }\r\n                                else {\r\n                                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n                        });\r\n\r\n                        /*\r\n                         * Destroy autocomplete on scope destroy\r\n                         */\r\n                        scope.$on('$destroy', function () {\r\n                            if ($('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                                $('#' + scope.textfieldId).devbridgeAutocomplete().dispose();\r\n                            }\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                    case 'date':\r\n                        /*\r\n                         * Destroy datepicker on scope destroy\r\n                         */\r\n                        scope.$on('$destroy', function () {\r\n                            angular.element('#' + scope.textfieldId + '_root').remove();\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                    case 'text':\r\n                    case 'area':\r\n                    case 'number':\r\n                        scope.$on('$destroy', function () {\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                //Closing the suggestions on scroll to prevent overlapping issue\r\n                angular.element($window).scroll(function (e) {\r\n                    hideAutoOnScroll();\r\n                });\r\n\r\n                angular.element(\".modal, .modal-content\").scroll(function (e) {\r\n                    hideAutoOnScroll();\r\n                });\r\n\r\n                function hideAutoOnScroll() {\r\n                    if (autoCompleteField != undefined) {\r\n                        if (autoCompleteField.visible) {\r\n                            autoCompleteField.hide();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 *  Update 'active' class when textfield's value is updated\r\n                 */\r\n                switch (scope.type) {\r\n                    case 'autocomplete':\r\n                    case 'text':\r\n                    case 'area':\r\n                    case 'number':\r\n                        var unbindNumber = scope.$watch('ngModel', function (newVal) {\r\n                            if (scope.type == 'autocomplete' && angular.isDefined(newVal)) {\r\n                                scope.displayModel = getDisplayData(newVal);\r\n                            }\r\n                            if (scope.type == 'number') {\r\n                                setPrecisionLimits();\r\n                            }\r\n                            if (attrs.decimalprecision && attrs.datanumeric) {\r\n                                setPrecisionLimits();\r\n                            }\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                            if (scope.type == 'area') {\r\n                                $timeout(function () {\r\n                                    angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                                });\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                    case 'date':\r\n                        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                        });\r\n                        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n                            dateFormate = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                            isDateBlank = false;\r\n                            doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                            if (newVal == \"\" || newVal == null) {\r\n                                newVal = Date.now();\r\n                                isDateBlank = true;\r\n                                scope.isValueDateObj = false;\r\n                            } else {\r\n                                if (doesContainDateString) {\r\n                                    var tmpModel = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                                    tmpModel = tmpModel.split('+');\r\n                                    tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                                    scope.dateModel = moment(tmpModel).format(dateFormate);\r\n                                }\r\n                                else {\r\n                                    if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                                        scope.isValueDateObj = true;\r\n                                    } else {\r\n                                        newVal = parseInt(newVal);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //scope.placeholder = scope.format;\r\n                            scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                            if (!isDateBlank) {\r\n                                if (!doesContainDateString) {\r\n                                    scope.dateModel = moment(newVal).format(dateFormate);\r\n                                }\r\n                            } else {\r\n                                scope.dateModel = \"\";\r\n                            }\r\n                            createDatePicker();\r\n                        });\r\n                        var unbindMin = scope.$watch('min', function (n) {\r\n                            createDatePicker();\r\n                        });\r\n                        var unbindMax = scope.$watch('max', function (n) {\r\n                            createDatePicker();\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                if (scope.datanumeric == 'true') {\r\n                    scope.spinner = typeof attrs.spinner == 'undefined' ? 'true' : scope.spinner;\r\n                    scope.step = typeof attrs.step == 'undefined' ? 1 : scope.step;\r\n                    $timeout(function () {\r\n                        angular.element('#' + scope.textfieldId).inputNumber(scope.spinner, scope.step);\r\n                    });\r\n                }\r\n\r\n\r\n                function destroyEverythingElse() {\r\n                    element.off(); // deregister all event handlers\r\n                    $('#' + scope.textfieldId).off();\r\n                    $('#' + scope.labelForTextfieldId).off();\r\n\r\n                    if (unbindValidate)\r\n                        unbindValidate();\r\n                    if (unbindFocus)\r\n                        unbindFocus();\r\n                    if (unbindOptions)\r\n                        unbindOptions();\r\n                    if (unbindNumber)\r\n                        unbindNumber();\r\n                    if (unbindDateModel)\r\n                        unbindDateModel();\r\n                    if (angular.isFunction(scope.onDestroy)) {\r\n                        scope.onDestroy({});\r\n                    }\r\n                    // Removing contents of HTML from DOM\r\n                    $('#' + scope.textfieldId).remove();\r\n                    $('#' + scope.labelForTextfieldId).remove();\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTextfield/smartTextfieldTemplate.html'\r\n        };\r\n    }\r\n\r\n\r\n    function smartTextField2Func($rootScope, $timeout, $translate, ScrollTo, RuleEngine, smartTextFieldService, smartTextField3Service, $filter) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                isTitleVisible: '@'\r\n            },\r\n            compile: function () {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        if (scope.type === undefined || scope.type === 'text' || scope.type === 'area' || scope.type === 'password') {\r\n                            smartTextField_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'date') {\r\n\r\n                            SmartTextField_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'autocomplete') {\r\n\r\n                            SmartTextField_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n\r\n                        }\r\n                        else if (scope.type == 'number') {\r\n                            smartTextField_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate);\r\n                        }\r\n                        else {\r\n                            function SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n                                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n                                scope.count = 0;\r\n                                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                                var number, rulesValidationEvent;\r\n                                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n                                textfieldId++;\r\n                                scope.textfieldId = 'tf_' + textfieldId;\r\n                                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                                if (attrs.validateOn) {\r\n                                    rulesValidationEvent = attrs.validateOn;\r\n                                }\r\n                                else {\r\n                                    rulesValidationEvent = 'blur';\r\n                                }\r\n\r\n\r\n\r\n                                scope.onTextChange = function (e) {\r\n                                    scope.ngModel = e.target.value;\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    // if (rulesValidationEvent == 'change') {\r\n                                    smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                                    //  }\r\n                                    scope.onChange({ $event: e });\r\n                                };\r\n\r\n                                scope.ngBlur = function (e) {\r\n\r\n                                    scope.focus = false;\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n                                    scope.onBlur({ $event: e });\r\n                                }\r\n\r\n                                scope.ngKeyPress = function (e) {\r\n                                    scope.onKeyPress({ $event: e });\r\n                                };\r\n\r\n\r\n\r\n\r\n\r\n                                /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                                //try {\r\n                                //    ngModelCtrl.$render = function () {\r\n                                //        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                //        smartTextFieldService.updateTextValue(scope, element);\r\n                                //    };\r\n                                //}\r\n                                //catch (e) { }\r\n\r\n                                scope.prevModel = scope.ngModel;\r\n                                var updateView = function () {\r\n                                    try {\r\n                                        if (scope.ngModel !== scope.prevModel) {\r\n                                            $timeout(function () {\r\n                                                scope.prevModel = scope.ngModel;\r\n                                            });\r\n\r\n                                        }\r\n                                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                        smartTextFieldService.updateTextValue(scope, element);\r\n                                    }\r\n                                    catch (e) { }\r\n                                };\r\n\r\n\r\n\r\n                                var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                                });\r\n\r\n                                var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n                                    if (newVal[4] != oldVal[4]) {\r\n                                        smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    }\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n                                });\r\n\r\n                                scope.hideShowField = function () {\r\n                                    scope.isVisible = !scope.isVisible;\r\n                                };\r\n\r\n\r\n\r\n                                smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n\r\n                                scope.$on('$destroy', function () {\r\n                                    unbindModelWatcher();\r\n                                    unbindAttributesWatcher();\r\n                                });\r\n                            }\r\n                            SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        //$timeout(function () {\r\n                        //    element.find(\"input\").trigger('blur'); // initiate with initial value\r\n                        //});\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function smartTextField3Func($rootScope, $timeout, $translate, ScrollTo, RuleEngine, smartTextFieldService, smartTextField3Service, $filter, $window, persistenceService) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                regionalFormat: '@',    //  regional date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                isTitleVisible: '@',\r\n                clienterror: '=?',\r\n                id: '@',\r\n                masterData: '@',\r\n                currencySymbol: '=?'\r\n            },\r\n            compile: function () {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        //console.log(scope.id);\r\n                        //console.log(scope.masterData);\r\n                        if (scope.type === undefined || scope.type === 'text' || scope.type === 'area' || scope.type === 'password') {\r\n                            smartTextField3_TextFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'date') {\r\n\r\n                            SmartTextField3_DateFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'autocomplete') {\r\n\r\n                            SmartTextField3_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate, $window, persistenceService);\r\n\r\n                        }\r\n                        else if (scope.type == 'number') {\r\n                            smartTextField3_NumFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $filter, $translate);\r\n                        }\r\n                        else {\r\n                            function SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate) {\r\n                                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n                                scope.count = 0;\r\n                                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                                var number, rulesValidationEvent;\r\n                                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n                                textfieldId++;\r\n                                scope.textfieldId = 'tf_' + textfieldId;\r\n                                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                                if (attrs.validateOn) {\r\n                                    rulesValidationEvent = attrs.validateOn;\r\n                                }\r\n                                else {\r\n                                    rulesValidationEvent = 'blur';\r\n                                }\r\n\r\n\r\n\r\n                                scope.onTextChange = function (e) {\r\n                                    scope.ngModel = e.target.value;\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    // if (rulesValidationEvent == 'change') {\r\n                                    smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n                                    //  }\r\n                                    scope.onChange({ $event: e });\r\n                                };\r\n\r\n                                scope.ngBlur = function (e) {\r\n\r\n                                    scope.focus = false;\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n                                    scope.onBlur({ $event: e });\r\n                                }\r\n\r\n                                scope.ngKeyPress = function (e) {\r\n                                    scope.onKeyPress({ $event: e });\r\n                                };\r\n\r\n\r\n\r\n\r\n\r\n                                /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                                //try {\r\n                                //    ngModelCtrl.$render = function () {\r\n                                //        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                //        smartTextField3Service.updateTextValue(scope, element);\r\n                                //    };\r\n                                //}\r\n                                //catch (e) { }\r\n\r\n                                scope.prevModel = scope.ngModel;\r\n                                var updateView = function () {\r\n                                    try {\r\n                                        if (scope.ngModel !== scope.prevModel) {\r\n                                            $timeout(function () {\r\n                                                scope.prevModel = scope.ngModel;\r\n                                            });\r\n\r\n                                        }\r\n                                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                        smartTextField3Service.updateTextValue(scope, element);\r\n                                    }\r\n                                    catch (e) { }\r\n                                };\r\n\r\n\r\n\r\n                                var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                                    scope.isActive = smartTextField3Service.checkIfActive(scope, element);\r\n\r\n\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n                                });\r\n\r\n                                var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n                                    if (newVal[4] != oldVal[4]) {\r\n                                        smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    }\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n\r\n\r\n                                });\r\n\r\n                                scope.hideShowField = function () {\r\n                                    scope.isVisible = !scope.isVisible;\r\n                                };\r\n\r\n\r\n\r\n                                smartTextField3Service.buildTemplate(scope, element, scope.onTextChange);\r\n\r\n                                scope.$on('$destroy', function () {\r\n                                    unbindModelWatcher();\r\n                                    unbindAttributesWatcher();\r\n                                });\r\n                            }\r\n                            SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        //$timeout(function () {\r\n                        //    element.find(\"input\").trigger('blur'); // initiate with initial value\r\n                        //});\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function smartTextField_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n\r\n            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            scope.focus = false;\r\n            scope.onBlur({ $event: e });\r\n            $timeout(function () {\r\n                //updateView();\r\n\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            if (attrs.onKeyPress) {\r\n                scope.onKeyPress({ $event: e });\r\n            }\r\n            if (attrs.onEnter && e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            scope.validate = false;\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n             scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            scope.onFocus({ $event: e });\r\n        };\r\n\r\n        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n        var updateView = function () {\r\n            try {\r\n                if (smartTextFieldService.modal.getModal(scope, ngModelCtrl) !== scope.prevModel) {\r\n\r\n                    /* Removed $timeout due to ngBlur gets fired before scope.ngModel */\r\n                    $timeout(function () {\r\n                        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n\r\n                        if (typeof scope.ngModel === 'function') {\r\n                            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                        }\r\n                    });\r\n                    //scope.$apply();\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n        var unbindModelWatcher;\r\n        if (typeof scope.ngModel != 'function') {\r\n            unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                if(scope.typing === true) scope.typing = false;\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            });\r\n        } else {\r\n            unbindModelWatcher = scope.$watch(function () { return scope.ngModel(); }, function (newVal, oldVal) {\r\n                if (newVal != oldVal) {\r\n                     scope.typing = false;\r\n                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                    smartTextFieldService.setActiveClass(scope, element);\r\n                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                }\r\n\r\n            }, true);\r\n        }\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n        unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            }\r\n            if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            if (newVal[1] || newVal[1] == \"true\") {\r\n                element.find('input').focus();\r\n            }\r\n        });\r\n\r\n        //function bindOtherWatcher() {\r\n        //    if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n        //        //if (!angular.isDefined(unbindOtherWatcher)) {\r\n\r\n        //        //}\r\n        //    }\r\n        //    else {\r\n        //        if (angular.isDefined(unbindOtherWatcher)) {\r\n        //            unbindOtherWatcher();\r\n        //        }\r\n        //    }\r\n        //}\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        updateView();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //bindOtherWatcher();\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        if (scope.timePicker === 'true') {\r\n            scope.timePicker = true;\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? moment.localeData()._longDateFormat.L : scope.placeholder;\r\n        if (scope.timePicker == true) {\r\n            scope.placeholder = moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n        }\r\n\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        scope.datetimePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker === true ? true : false);\r\n        scope.format = (scope.format ? scope.format : scope.datetimePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        scope.applyClientZone = false;\r\n        scope.isValueDateObj = false;\r\n        scope.doesContainDateString = false;\r\n        scope.dateFormat = scope.format;\r\n        scope.isDateBlank = false;\r\n\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            scope.dateFormat = moment.localeData().longDateFormat('L');\r\n            if (scope.timePicker == true) {\r\n                scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n            }\r\n            scope.format = scope.dateFormat;\r\n        }\r\n        scope.convertIntoUTC = false;\r\n        if (typeof convertIntoUTC != 'undefined') {\r\n            scope.convertIntoUTC = convertIntoUTC;\r\n        }\r\n\r\n        //if (angular.isDefined(scope.$parent.$parent.property)) {\r\n        //    //this property (applyClientZone) comes from Config.js\r\n        //    if (angular.isDefined(scope.$parent.$parent.property.applyClientZone)) {\r\n        //        scope.applyClientZone = scope.$parent.$parent.property.applyClientZone;\r\n        //    }\r\n        //}\r\n\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            // smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            if (scope.isDateBlank) {\r\n                var targetedEle = document.activeElement;\r\n                if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                    //  scope.ngModel = null;\r\n                    scope.dateModel = null;\r\n                }\r\n                if (angular.isFunction(scope.onDateChange)) {\r\n                    scope.onDateChange({\r\n                        $date: scope.ngModel\r\n                    });\r\n                }\r\n            }\r\n\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            if (e.which != 32) {\r\n                var currentInputValue = $('#' + scope.textfieldId).val();\r\n                if (currentInputValue == \"\") {\r\n                    scope.ngModel = null;\r\n                    scope.dateModel = \"\"\r\n                    scope.isDateBlank = true;\r\n                    if (angular.isFunction(scope.onDateChange)) {\r\n                        scope.onDateChange({\r\n                            $date: scope.ngModel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyUp') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            if (rulesValidationEvent == 'keyDown') {\r\n                scope.validateRules();\r\n            }\r\n            ////to control number of down arrow,up arrow signs on number fields\r\n            //if (e.keyCode == 38 || e.keyCode == 40)\r\n            //    e.preventDefault();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyPress = function (e) {\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateDateValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        //var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n\r\n        //});\r\n\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindMin;\r\n        var unbindMax\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMin)) {\r\n                    unbindMin = scope.$watch('min', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMax)) {\r\n                    unbindMax = scope.$watch('max', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n                if (angular.isDefined(unbindMin)) {\r\n                    unbindMin();\r\n                }\r\n                if (angular.isDefined(unbindMax)) {\r\n                    unbindMax();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        smartTextFieldService.updateDateClass(scope, element);\r\n        smartTextFieldService.assignDateEvents(scope, element);\r\n        bindOtherWatcher();\r\n        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n            if (newVal) {\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                if (rulesValidationEvent == 'change') {\r\n                    scope.validateRules();\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n        });\r\n        var timeOffset = 20; // this is a fixed number in-case of timeZoneOffset is not defined.\r\n        scope.updatingDateModel = function (dateObj) {\r\n            if (typeof timeZoneOffset != 'undefined') {\r\n                timeOffset = timeZoneOffset;\r\n            }\r\n\r\n            if (timeOffset == 20) {\r\n                var adjustTimeZone = 0;\r\n                if (moment().zone() == -720) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n                scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n            }\r\n            else {\r\n                var adjustTimeZone = 0;\r\n                if (timeOffset == -12) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n\r\n                if (typeof dateObj == 'object') {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).add(timeOffset * 60, 'minute').add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                } else {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).utc().zone(timeOffset * -1).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    //scope.dateModel = moment(dateObj).zone(timeOffset * -1).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                }\r\n            }\r\n\r\n        }\r\n        // should be modified to discard UTC Convertion \r\n        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n            if (scope.timePicker === 'true') {\r\n                scope.timePicker = true;\r\n            }\r\n            if (!scope.dateModifiedbyUser) {\r\n                scope.dateFormat = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                    if (scope.timePicker == true) {\r\n                        scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                    }\r\n                    scope.format = scope.dateFormat;\r\n                }\r\n\r\n                scope.isDateBlank = false;\r\n                scope.doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                if (newVal == \"\" || newVal == null || typeof newVal == 'function') {\r\n                    newVal = Date.now();\r\n                    scope.isDateBlank = true;\r\n                    scope.isValueDateObj = false;\r\n                } else {\r\n                    if (scope.doesContainDateString) {\r\n                        var dateStr = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                        var tmpModel = dateStr;\r\n                        if (dateStr.indexOf('Date') <= -1) {\r\n                            tmpModel = tmpModel.split('+');\r\n                            tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                        }\r\n                        scope.updatingDateModel(tmpModel);\r\n                        //scope.dateModel = moment(tmpModel).format(scope.dateFormat);\r\n                        //smartTextFieldService.updateDateValue(scope, element);\r\n                    }\r\n                    else {\r\n                        if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                            scope.isValueDateObj = true;\r\n                        } else if (Object.prototype.toString.call(newVal) === '[object String]' && newVal.indexOf('T') > 0) {\r\n                            //scope.isValueDateObj = true;\r\n                        } else {\r\n                            newVal = parseInt(newVal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.placeholder = scope.format;\r\n                //scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                if (!scope.isDateBlank) {\r\n                    if (!scope.doesContainDateString) {\r\n                        //if (scope.applyClientZone) {\r\n                        //    scope.dateModel = moment(newVal).parseZone().format(scope.dateFormat);\r\n                        //}\r\n                        //else {\r\n                        scope.updatingDateModel(newVal);\r\n                        //scope.dateModel = moment(newVal).format(scope.dateFormat);\r\n                        //}\r\n                    }\r\n                } else {\r\n                    scope.dateModel = \"\";\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n                smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n            }\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n            scope.dateModifiedbyUser = false;\r\n\r\n            //smartTextFieldService.updateDateValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n        });\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            //unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindNgModel();\r\n            unbindDateModel();\r\n            if (angular.isDefined(unbindMin)) {\r\n                unbindMin();\r\n            }\r\n            if (angular.isDefined(unbindMax)) {\r\n                unbindMax();\r\n            }\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            console.log(scope.displayModel);\r\n\r\n            //updateView();\r\n\r\n            //console.log(scope.displayModel);\r\n            scope.onChange({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: scope.displayModel\r\n                }\r\n            });\r\n\r\n            ////scope.ngModel = e.target.value;\r\n            //smartTextFieldService.updateAutocompleteValue (scope, element);\r\n            //smartTextFieldService.setActiveClass(scope, element);\r\n            //// if (rulesValidationEvent == 'change') {\r\n            //smartTextFieldService.validateRules(scope, ngModelCtrl, element);\r\n            //smartTextFieldService.updateTextFieldClass(scope, element);\r\n            ////  }\r\n            ////scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n\r\n\r\n            if (scope.ngModel && scope.displayformat) {\r\n                var splittedDisplayFormat = [];\r\n                if (scope.displayformat.indexOf(\":\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split(':');\r\n                else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                else\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                var result = \"\";\r\n                for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                    result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                    if (i < splittedDisplayFormat.length - 1) {\r\n                        if (scope.displayformat.indexOf(\"-\") > 0)\r\n                            result += '-';\r\n                        else if (scope.displayformat.indexOf(\":\") > 0)\r\n                            result += ':';\r\n                    }\r\n                }\r\n\r\n                // P2P-16866\r\n                if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n\r\n                    if (e.target.value.trim() == '' || result !== scope.displayModel) {\r\n                        scope.displayModel = '';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            scope.focus = false;\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            $timeout(function () {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            });\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n            try {\r\n                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                }\r\n            }\r\n            catch (e) { }\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            ////var val = e.target.value;\r\n\r\n            //scope.displayModel = e.target.value;\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n\r\n        };\r\n        scope.elmVal = null;\r\n        scope.ngKeyUp = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            //if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n            //    scope.elmVal = e.target.value;\r\n            //    scope.onChange({\r\n            //        $event: {\r\n            //            data: element.find('#' + scope.textfieldId),\r\n            //            displayModel: e.target.value\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n        scope.search = function (e) {\r\n            if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n                scope.elmVal = e.target.value;\r\n                scope.onChange({\r\n                    $event: {\r\n                        data: element.find('#' + scope.textfieldId),\r\n                        displayModel: e.target.value\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            var Obj = elm.devbridgeAutocomplete();\r\n            if (elm.val() == '' && Obj) {\r\n                Obj.clear();\r\n                scope.elmVal = '';\r\n            }\r\n            scope.onFocus({ $event: e });\r\n        }\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateAutocompleteValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.displayModel = smartTextFieldService.getDisplayData(newVal, scope);\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['focus', 'isRemovable'], function (newVal, oldVal) {\r\n                        smartTextFieldService.setActiveClass(scope, element);\r\n                        smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var unbindValidationWatcher = scope.$watchGroup(['isMandatory', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[1] != oldVal[1] || newVal[2] != oldVal[2]) {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // key to be used to bind options\r\n        var filterKeys;\r\n        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n        }\r\n        else {\r\n            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n        }\r\n        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n        scope.ndisplayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n        /*\r\n         * Check if the options are updated\r\n         */\r\n        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n            try {\r\n                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                        filterKeys: filterKeys,\r\n                        optionFormat: optionFormat,\r\n                        displayFormat: scope.ndisplayFormat,\r\n                        lookup: smartTextFieldService.getFormattedData(newOptions, scope),\r\n                        width: scope.width,\r\n                        showNoSuggestionNotice: showNoSuggestion,\r\n                        noSuggestionNotice: noSuggestionNotice,\r\n                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                        onSelect: function (suggestion) {\r\n                            angular.element(document).trigger('click');\r\n                            scope.$evalAsync(function () {\r\n                                scope.displayModel = smartTextFieldService.getDisplayData(suggestion, scope);\r\n                                scope.ngModel = suggestion;\r\n                                updateView();\r\n                                $timeout(function () {\r\n                                    scope.onSelect({\r\n                                        $event: {\r\n                                            data: suggestion\r\n                                        }\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(smartTextFieldService.getFormattedData(newOptions, scope));\r\n                }\r\n            }\r\n            catch (e) { }\r\n        });\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        smartTextFieldService.assignAutocompleteEvents(scope, element);\r\n        bindOtherWatcher();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindOptions();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n            unbindValidationWatcher();\r\n        });\r\n    }\r\n\r\n    function smartTextField_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            // if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    scope.ngModel = parseFloat(e.target.value);\r\n            //}\r\n            updateView();\r\n            //scope.ngModel = parseFloat(e.target.value);\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    var num = e.target.value;\r\n            //    if (num.trim() != '') {\r\n            //        scope.ngModel = parseFloat(num);\r\n            //    }\r\n            //    else {\r\n            //        scope.ngModel = null;\r\n            //    }\r\n            //}\r\n            updateView();\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            if (scope.type == 'number' || attrs.datanumeric) {\r\n                //to control number of +,-, signs and alphabets on number fields\r\n                var charCode = e.charCode || e.keyCode,\r\n                textValue = e.currentTarget.value,\r\n                decimalDigit = [],\r\n                cc = String.fromCharCode(charCode),\r\n                escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                    e.preventDefault();\r\n                }\r\n                // Restrict the 2 dots entering\r\n                if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                if (textValue) {\r\n                    decimalDigit = textValue.toString().split('.');\r\n                }\r\n                // Restrict the decimal value from entering\r\n                if (attrs.decimalprecision) {\r\n                    if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                    if (decimalDigit.length == 2) {\r\n                        if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.min != undefined || scope.min != null) {\r\n                    if (scope.min >= 0 && e.charCode == 45) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n            // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n            if (angular.isDefined(attrs.maxlength) && e.target.value.length == attrs.maxlength && e.charCode !== 0) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element);\r\n                //smartTextFieldService.updateTextValue(scope, element);\r\n                if (scope.ngModel != null) {\r\n                    var min = 0;\r\n                    var max = 0;\r\n                    if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                        if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                            min = 0;\r\n                            max = 0;\r\n                        }\r\n                        else {\r\n                            min = MinPrecessionValue;//global default\r\n                            max = MaxPrecessionValue;//global default\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length == 2) {\r\n                                min = splitPrecision[0];\r\n                                max = splitPrecision[1];\r\n                            }\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (scope.minmaxprecision) {\r\n                            min = JSON.parse(scope.minmaxprecision)[0];\r\n                            max = JSON.parse(scope.minmaxprecision)[1];\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                    element.find('#' + scope.textfieldId).val($filter('minPrecisionHandler')(scope.ngModel, min, max, false))\r\n                    if (!scope.ngModel) {\r\n                        var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n                        if (num != '') {\r\n                            scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        else {\r\n                            scope.ngModel = null;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.ngModel !== scope.prevModel) {\r\n                        $timeout(function () {\r\n                            scope.prevModel = scope.ngModel;\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            updateView();\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                    mDec: 0,\r\n                    aPad: false,\r\n                    aSep: thousandSep,\r\n                    aDec: decimalSep,\r\n                    vMin: Number.NEGATIVE_INFINITY,\r\n                    vMax: Number.POSITIVE_INFINITY\r\n                });\r\n            } else {\r\n                element.find('#' + scope.textfieldId).autoNumeric();\r\n            }\r\n        } else {\r\n            var thousandSep = ',';\r\n            var decimalSep = '.';\r\n            var highPrecisionLimit = 0;\r\n            if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                if (splitPrecision.length == 2) {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    highPrecisionLimit = splitPrecision[1];\r\n                }\r\n            }\r\n            element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                mDec: highPrecisionLimit,\r\n                aPad: false,\r\n                aSep: thousandSep,\r\n                aDec: decimalSep,\r\n                vMin: Number.NEGATIVE_INFINITY,\r\n                vMax: Number.POSITIVE_INFINITY,\r\n            });\r\n        }\r\n        bindOtherWatcher();\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    function smartTextField3_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n        scope.typing = false;\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n        if (scope.type === 'area') {\r\n            $timeout(function () {\r\n                angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n            });\r\n        }\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n\r\n            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            $timeout(function () {\r\n                //updateView();\r\n                scope.focus = false;\r\n                scope.typing = false;\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n                scope.onBlur({ $event: e });\r\n                if (scope.type == \"area\" && scope.ngModel == \"\") {\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"hidden\");\r\n                }\r\n            });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            if (attrs.onKeyPress) {\r\n                scope.onKeyPress({ $event: e });\r\n            }\r\n            if (attrs.onEnter && e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n        var viewTimeout;\r\n        scope.ngKeyUp = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            clearInterval(viewTimeout);\r\n            viewTimeout=setInterval(function(){\r\n\t\t\t\tclearInterval(viewTimeout);\r\n\t\t\t\tupdateView();\r\n\t\t\t},1500);\r\n            scope.onKeyUp({ $event: e });\r\n            if (scope.type == \"area\") {\r\n                if ($(angular.element('#' + scope.textfieldId)).height() < 64)\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"hidden\");\r\n                else\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"auto\");\r\n            }\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            scope.onFocus({ $event: e });\r\n        };\r\n\r\n        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n        var updateView = function () {\r\n            try {\r\n                if (smartTextFieldService.modal.getModal(scope, ngModelCtrl) !== scope.prevModel) {\r\n\r\n                    /* Removed $timeout due to ngBlur gets fired before scope.ngModel */\r\n                    $timeout(function () {\r\n                        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n\r\n                        if (typeof scope.ngModel === 'function') {\r\n                            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                        }\r\n                    });\r\n                    //scope.$apply();\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n        var unbindModelWatcher;\r\n        if (typeof scope.ngModel != 'function') {\r\n            unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                if (scope.type === 'area') {\r\n                    $timeout(function () {\r\n                        angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            unbindModelWatcher = scope.$watch(function () { return scope.ngModel(); }, function (newVal, oldVal) {\r\n                if (newVal != oldVal) {\r\n                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                    smartTextFieldService.setActiveClass(scope, element);\r\n                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    if (scope.type === 'area') {\r\n                        $timeout(function () {\r\n                            angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }, true);\r\n        }\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                if(scope.type === 'area'){\r\n                    smartTextFieldService.buildTemplate(scope, element, scope.onTextChange,attrs);\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                }\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n        unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            }\r\n            if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            if (newVal[1] || newVal[1] == \"true\") {\r\n                element.find('input').focus();\r\n            }\r\n        });\r\n\r\n        //function bindOtherWatcher() {\r\n        //    if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n        //        //if (!angular.isDefined(unbindOtherWatcher)) {\r\n\r\n        //        //}\r\n        //    }\r\n        //    else {\r\n        //        if (angular.isDefined(unbindOtherWatcher)) {\r\n        //            unbindOtherWatcher();\r\n        //        }\r\n        //    }\r\n        //}\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        updateView();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //bindOtherWatcher();\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField3_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        if (scope.timePicker === 'true') {\r\n            scope.timePicker = true;\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? moment.localeData()._longDateFormat.L : scope.placeholder;\r\n        if (scope.timePicker == true) {\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                scope.placeholder = scope.regionalFormat ? scope.regionalFormat : moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n            }\r\n            else {\r\n                scope.placeholder = moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n            }\r\n        }\r\n\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        scope.datetimePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker === true ? true : false);\r\n        scope.format = (scope.format ? scope.format : scope.datetimePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        scope.applyClientZone = false;\r\n        scope.isValueDateObj = false;\r\n        scope.doesContainDateString = false;\r\n        scope.dateFormat = scope.format;\r\n        scope.isDateBlank = false;\r\n\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.regionalFormat) {\r\n                scope.dateFormat = scope.regionalFormat;\r\n            }\r\n            else {\r\n                if (scope.timePicker == true) {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                }\r\n                else {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                }\r\n            }\r\n            scope.format = scope.dateFormat;\r\n        }\r\n\r\n        scope.convertIntoUTC = false;\r\n        if (typeof convertIntoUTC != 'undefined') {\r\n            scope.convertIntoUTC = convertIntoUTC;\r\n        }\r\n\r\n        //if (angular.isDefined(scope.$parent.$parent.property)) {\r\n        //    //this property (applyClientZone) comes from Config.js\r\n        //    if (angular.isDefined(scope.$parent.$parent.property.applyClientZone)) {\r\n        //        scope.applyClientZone = scope.$parent.$parent.property.applyClientZone;\r\n        //    }\r\n        //}\r\n\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            // smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            if (scope.isDateBlank) {\r\n                var targetedEle = document.activeElement;\r\n                if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                    //  scope.ngModel = null;\r\n                    scope.dateModel = null;\r\n                }\r\n                if (angular.isFunction(scope.onDateChange)) {\r\n                    scope.onDateChange({\r\n                        $date: scope.ngModel\r\n                    });\r\n                }\r\n            }\r\n\r\n            var selectedDate = smartTextFieldService.getSelectedDate();\r\n            if (selectedDate == '') {\r\n                $('#' + scope.textfieldId).val('');\r\n            }\r\n            if ($('#' + scope.textfieldId).find('input').daterangepicker())\r\n                $('#' + scope.textfieldId).find('input').daterangepicker().daterangepicker();\r\n            if (angular.isDefined(selectedDate) && scope.datetimePicker && selectedDate.indexOf('Date(') <= -1)\r\n                $('#' + scope.textfieldId).val(smartTextFieldService.getPreviousDate());\r\n            smartTextFieldService.setSelectedDate(undefined);\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            if (e.which != 32) {\r\n                var currentInputValue = $('#' + scope.textfieldId).val();\r\n                smartTextFieldService.setSelectedDate($('#' + scope.textfieldId).val());\r\n                if (currentInputValue == \"\") {\r\n                    scope.ngModel = null;\r\n                    scope.dateModel = \"\"\r\n                    scope.isDateBlank = true;\r\n                    if (angular.isFunction(scope.onDateChange)) {\r\n                        scope.onDateChange({\r\n                            $date: scope.ngModel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyUp') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            if (rulesValidationEvent == 'keyDown') {\r\n                scope.validateRules();\r\n            }\r\n            ////to control number of down arrow,up arrow signs on number fields\r\n            //if (e.keyCode == 38 || e.keyCode == 40)\r\n            //    e.preventDefault();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyPress = function (e) {\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateDateValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        //var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n\r\n        //});\r\n\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindMin;\r\n        var unbindMax\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMin)) {\r\n                    unbindMin = scope.$watch('min', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMax)) {\r\n                    unbindMax = scope.$watch('max', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n                if (angular.isDefined(unbindMin)) {\r\n                    unbindMin();\r\n                }\r\n                if (angular.isDefined(unbindMax)) {\r\n                    unbindMax();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        smartTextFieldService.updateDateClass(scope, element);\r\n        smartTextFieldService.assignDateEvents(scope, element);\r\n        bindOtherWatcher();\r\n        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n            if (newVal) {\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                if (rulesValidationEvent == 'change') {\r\n                    scope.validateRules();\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n        });\r\n        var timeOffset = 20; // this is a fixed number in-case of timeZoneOffset is not defined.\r\n        scope.updatingDateModel = function (dateObj) {\r\n            if (typeof timeZoneOffset != 'undefined') {\r\n                timeOffset = timeZoneOffset;\r\n            }\r\n\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable && scope.regionalFormat) {\r\n                timeOffset = 0;\r\n            }\r\n\r\n            if (timeOffset == 20) {\r\n                var adjustTimeZone = 0;\r\n                if (moment().zone() == -720) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n                scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n            }\r\n            else {\r\n                var adjustTimeZone = 0;\r\n                if (timeOffset == -12) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n\r\n                if (typeof dateObj == 'object') {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).add(timeOffset * 60, 'minute').add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                } else {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).utc().zone(timeOffset * -1).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    //scope.dateModel = moment(dateObj).zone(timeOffset * -1).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                }\r\n            }\r\n\r\n        }\r\n        // should be modified to discard UTC Convertion \r\n        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n            if (scope.timePicker === 'true') {\r\n                scope.timePicker = true;\r\n            }\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable && scope.regionalFormat) {\r\n                $timeout(function () {\r\n                    scope.dateModel = element.find('input').val();\r\n                }, 250);\r\n            }\r\n            if (!scope.dateModifiedbyUser) {\r\n                if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                    if (scope.regionalFormat) {\r\n                        scope.dateFormat = scope.regionalFormat;\r\n                    }\r\n                    else {\r\n                        if (scope.timePicker == true) {\r\n                            scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                        }\r\n                        else {\r\n                            scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                        }\r\n                    }\r\n                    scope.dateFormat = scope.dateFormat.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                    scope.format = scope.dateFormat;\r\n                }\r\n                else {\r\n                    scope.dateFormat = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                }\r\n\r\n                scope.isDateBlank = false;\r\n                scope.doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                if (newVal == \"\" || newVal == null || typeof newVal == 'function') {\r\n                    newVal = Date.now();\r\n                    scope.isDateBlank = true;\r\n                    scope.isValueDateObj = false;\r\n                } else {\r\n                    if (scope.doesContainDateString) {\r\n                        var dateStr = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                        var tmpModel = dateStr;\r\n                        if (dateStr.indexOf('Date') <= -1) {\r\n                            tmpModel = tmpModel.split('+');\r\n                            tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                        }\r\n                        scope.updatingDateModel(tmpModel);\r\n                        //scope.dateModel = moment(tmpModel).format(scope.dateFormat);\r\n                        //smartTextFieldService.updateDateValue(scope, element);\r\n                    }\r\n                    else {\r\n                        if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                            scope.isValueDateObj = true;\r\n                        } else if (Object.prototype.toString.call(newVal) === '[object String]' && newVal.indexOf('T') > 0) {\r\n                            //scope.isValueDateObj = true;\r\n                        } else {\r\n                            newVal = parseInt(newVal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.placeholder = scope.format;\r\n                //scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                if (!scope.isDateBlank) {\r\n                    if (!scope.doesContainDateString) {\r\n                        //if (scope.applyClientZone) {\r\n                        //    scope.dateModel = moment(newVal).parseZone().format(scope.dateFormat);\r\n                        //}\r\n                        //else {\r\n                        scope.updatingDateModel(newVal);\r\n                        //scope.dateModel = moment(newVal).format(scope.dateFormat);\r\n                        //}\r\n                    }\r\n                } else {\r\n                    scope.dateModel = \"\";\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n                smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n            }\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n            scope.dateModifiedbyUser = false;\r\n\r\n            //smartTextFieldService.updateDateValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n        });\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            //unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindNgModel();\r\n            unbindDateModel();\r\n            if (angular.isDefined(unbindMin)) {\r\n                unbindMin();\r\n            }\r\n            if (angular.isDefined(unbindMax)) {\r\n                unbindMax();\r\n            }\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    function SmartTextField3_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate, $window, persistenceService) {\r\n        if (typeof scope.id != 'undefined' && typeof scope.masterData != 'undefined') {\r\n            scope.masterData = JSON.parse(scope.masterData);\r\n            if (scope.masterData.hasOwnProperty('parentId')) {\r\n                persistenceService.setDocumentFields(scope.masterData.parentId, scope.id);\r\n            }\r\n            else {\r\n                persistenceService.setDocumentFields(null, scope.id);\r\n            }\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            console.log(scope.displayModel);\r\n\r\n            //updateView();\r\n\r\n            //console.log(scope.displayModel);\r\n            scope.onChange({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: scope.displayModel\r\n                }\r\n            });\r\n\r\n            ////scope.ngModel = e.target.value;\r\n            //smartTextFieldService.updateAutocompleteValue (scope, element);\r\n            //smartTextFieldService.setActiveClass(scope, element);\r\n            //// if (rulesValidationEvent == 'change') {\r\n            //smartTextFieldService.validateRules(scope, ngModelCtrl, element);\r\n            //smartTextFieldService.updateTextFieldClass(scope, element);\r\n            ////  }\r\n            ////scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n\r\n\r\n            if (scope.ngModel && scope.displayformat) {\r\n                var splittedDisplayFormat = [];\r\n                if (scope.displayformat.indexOf(\":\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split(':');\r\n                else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                else\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                var result = \"\";\r\n                for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                    result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                    if (i < splittedDisplayFormat.length - 1) {\r\n                        if (scope.displayformat.indexOf(\"-\") > 0)\r\n                            result += '-';\r\n                        else if (scope.displayformat.indexOf(\":\") > 0)\r\n                            result += ':';\r\n                    }\r\n                }\r\n\r\n                // P2P-16866\r\n                if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n\r\n                    if (e.target.value.trim() == '' || result !== scope.displayModel) {\r\n                        scope.displayModel = '';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            scope.focus = false;\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            $timeout(function () {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            });\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n            try {\r\n                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                }\r\n            }\r\n            catch (e) { }\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            ////var val = e.target.value;\r\n\r\n            //scope.displayModel = e.target.value;\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n\r\n        };\r\n        scope.elmVal = null;\r\n        scope.ngKeyUp = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            //if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n            //    scope.elmVal = e.target.value;\r\n            //    scope.onChange({\r\n            //        $event: {\r\n            //            data: element.find('#' + scope.textfieldId),\r\n            //            displayModel: e.target.value\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n        scope.search = function (e) {\r\n            scope.checkMasterFlag = false;\r\n            if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n                scope.elmVal = e.target.value;\r\n                scope.onChange({\r\n                    $event: {\r\n                        data: element.find('#' + scope.textfieldId),\r\n                        displayModel: e.target.value\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                if (typeof scope.id != 'undefined') {\r\n                    getMasterDataList(scope.id, scope.masterData);\r\n                }\r\n            }\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            var Obj = elm.devbridgeAutocomplete();\r\n            if (elm.val() == '' && Obj) {\r\n                scope.checkMasterFlag = true;\r\n                Obj.clear();\r\n                scope.elmVal = '';\r\n            }\r\n\r\n            if (typeof scope.id != 'undefined' && elm.val() == '') {\r\n                getMasterDataList(scope.id, scope.masterData);\r\n            }\r\n\r\n            scope.onFocus({ $event: e });\r\n        }\r\n\r\n\r\n\r\n\r\n        function getMasterDataList(id, masterDataConfig)\r\n        {\r\n            if (typeof masterDataConfig == 'string') {\r\n                masterDataConfig = JSON.parse(masterDataConfig);\r\n                scope.masterData = masterDataConfig;\r\n            }\r\n            try {\r\n                if (persistenceService.masterPersistenceService.getAutoSuggestList(id, masterDataConfig).length > 0) {\r\n                    if (!$('#' + scope.textfieldId).devbridgeAutocomplete() || $('#' + scope.textfieldId).devbridgeAutocomplete() && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.filterKeys != filterOptions.filterKeys) && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.displayFormat != filterOptions.displayFormat) && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.optionFormat != filterOptions.optionFormat)) {\r\n                        if ($('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                            $('#' + scope.textfieldId).devbridgeAutocomplete('dispose');\r\n                            $('#' + scope.textfieldId).devbridgeAutocomplete();\r\n\r\n                        }\r\n                        filterOptions.lookup = persistenceService.masterPersistenceService.getAutoSuggestList(id, masterDataConfig)\r\n\r\n                        autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete(filterOptions).devbridgeAutocomplete();\r\n\r\n                    }\r\n\r\n\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(persistenceService.masterPersistenceService.getAutoSuggestList(id, masterDataConfig));\r\n                    if ($('#' + scope.textfieldId).devbridgeAutocomplete().options.lookup != [] && $('#' + scope.textfieldId).val().length == 0) {\r\n                        var elm = $(element).find('#' + scope.textfieldId);\r\n                        elm.off('change', false);\r\n                        elm.off(\"blur\", false);\r\n                        scope.checkMasterFlag = true;\r\n                    }\r\n                    else {\r\n                        var elm = $(element).find('#' + scope.textfieldId);\r\n                        elm.on(\"change\", function (el) {\r\n                            //console.log(el);\r\n                            //onChangeCallback(el);\r\n                        });\r\n                        elm.on(\"blur\", scope.ngBlur);\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateAutocompleteValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.displayModel = smartTextFieldService.getDisplayData(newVal, scope);\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);     \r\n            if (scope.id) {\r\n                persistenceService.masterPersistenceService.setSelectedValue(scope.id, scope.masterData, newVal);\r\n            }\r\n\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['focus', 'isRemovable'], function (newVal, oldVal) {\r\n                        smartTextFieldService.setActiveClass(scope, element);\r\n                        smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var unbindValidationWatcher = scope.$watchGroup(['isMandatory', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[1] != oldVal[1] || newVal[2] != oldVal[2]) {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // key to be used to bind options\r\n        var filterKeys;\r\n        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n        }\r\n        else {\r\n            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n        }\r\n        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n        scope.ndisplayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n        /*\r\n         * Check if the options are updated\r\n         */\r\n        var autoCompleteField;\r\n        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n            try {\r\n                var checkobj = {};\r\n                if (typeof scope.id != 'undefined') {\r\n                    var key = scope.id;\r\n\r\n                    checkobj = scope.masterData;//persistenceService.masterPersistenceService.getPersistenceConfig(key);\r\n\r\n                }\r\n\r\n                if (scope.checkMasterFlag) {\r\n\r\n                    var suggestedObjs = _.filter(newOptions, function (option) {\r\n                        return option[checkobj.filterKey] == scope.suggestedObject.filterKey\r\n\r\n                    });\r\n                    if (suggestedObjs.length > 0) {\r\n                        var suggestObj = suggestedObjs[0];\r\n                        angular.element(document).trigger('click');\r\n                        scope.$evalAsync(function () {\r\n                            scope.displayModel = scope.suggestedObject.displayKey;\r\n                            scope.ngModel = suggestObj;\r\n                            updateView();\r\n                            $timeout(function () {\r\n                                scope.onSelect({\r\n                                    $event: {\r\n                                        data: suggestObj\r\n                                    }\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    if (!$('#' + scope.textfieldId).devbridgeAutocomplete() || $('#' + scope.textfieldId).devbridgeAutocomplete() && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.filterKeys != searchOptions.filterKeys) && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.displayFormat != searchOptions.displayFormat)) {\r\n                        if ($('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                            $('#' + scope.textfieldId).devbridgeAutocomplete('dispose');\r\n                            $('#' + scope.textfieldId).devbridgeAutocomplete();\r\n\r\n                        }\r\n                        searchOptions.lookup = smartTextFieldService.getFormattedData(newOptions, scope);\r\n                        autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete(searchOptions).devbridgeAutocomplete();\r\n\r\n                    }\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(smartTextFieldService.getFormattedData(newOptions, scope));\r\n                }\r\n            }\r\n            catch (e) { }\r\n        });\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        smartTextFieldService.assignAutocompleteEvents(scope, element);\r\n        bindOtherWatcher();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //Closing the suggestions on scroll to prevent overlapping issue\r\n        angular.element($window).scroll(function (e) {\r\n            hideAutoOnScroll();\r\n        });\r\n\r\n        angular.element(\".modal, .modal-content\").scroll(function (e) {\r\n            hideAutoOnScroll();\r\n        });\r\n\r\n        function hideAutoOnScroll() {\r\n            if (autoCompleteField != undefined) {\r\n                if (autoCompleteField.visible) {\r\n                    autoCompleteField.hide();\r\n                }\r\n            }\r\n        }\r\n\r\n        var checkMasterFlag = false;\r\n\r\n\r\n        var searchOptions = {\r\n            filterKeys: filterKeys,\r\n            optionFormat: optionFormat,\r\n            displayFormat: scope.ndisplayFormat,\r\n            //lookup: smartTextFieldService.getFormattedData(newOptions, scope),\r\n            width: scope.width,\r\n            showNoSuggestionNotice: showNoSuggestion,\r\n            noSuggestionNotice: noSuggestionNotice,\r\n            minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n            onSelect: function (suggestion) {\r\n                angular.element(document).trigger('click');\r\n                scope.$evalAsync(function () {\t\t\r\n                    scope.suggestedObject = suggestion;\r\n                    scope.displayModel = smartTextFieldService.getDisplayData(suggestion, scope);\r\n                    scope.ngModel = suggestion;\r\n                    updateView();\r\n                    $timeout(function () {\t\r\n                        if (scope.id) {\r\n                            persistenceService.masterPersistenceService.saveMasterDataForRootField(scope.id, scope.masterData, scope.suggestedObject);\r\n                        }\r\n                        scope.onSelect({\r\n                            $event: {\r\n                                data: suggestion\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        };\r\n        var filterOptions = {\r\n            filterKeys: '[displayKey]',\r\n            optionFormat: '{displayKey}',\r\n            displayFormat: '{displayKey}',\r\n            //lookup: persistenceService.masterPersistenceService.getAutoSuggestList(id),//smartTextFieldService.getFormattedData(newOptions, scope),\r\n            width: scope.width,\r\n            showNoSuggestionNotice: showNoSuggestion,\r\n            noSuggestionNotice: noSuggestionNotice,\r\n            minChars: 0,\r\n            onSelect: function (suggestion) {\r\n                angular.element(document).trigger('click');\r\n                scope.$evalAsync(function () {\r\n\r\n                    scope.suggestedObject = suggestion;\r\n\r\n                    $timeout(function () {\r\n                        persistenceService.masterPersistenceService.saveMasterDataForRootField(scope.id, scope.masterData, scope.suggestedObject);\r\n                        scope.onChange({\r\n\r\n                            $event: {\r\n                                data: element.find('#' + scope.textfieldId),\r\n                                displayModel: element.find('#' + scope.textfieldId).val()\r\n\r\n                            }\r\n                        });\r\n                        element.find('#' + scope.textfieldId).focus();\r\n                        scope.checkMasterFlag = true;\r\n\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindOptions();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n            unbindValidationWatcher();\r\n        });\r\n    }\r\n        \r\n    function smartTextField3_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            // if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    scope.ngModel = parseFloat(e.target.value);\r\n            //}\r\n            updateView();\r\n            //scope.ngModel = parseFloat(e.target.value);\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    var num = e.target.value;\r\n            //    if (num.trim() != '') {\r\n            //        scope.ngModel = parseFloat(num);\r\n            //    }\r\n            //    else {\r\n            //        scope.ngModel = null;\r\n            //    }\r\n            //}\r\n            updateView();\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            if (scope.type == 'number' || attrs.datanumeric) {\r\n                //to control number of +,-, signs and alphabets on number fields\r\n                var charCode = e.charCode || e.keyCode,\r\n                    textValue = e.currentTarget.value,\r\n                    decimalDigit = [],\r\n                    cc = String.fromCharCode(charCode),\r\n                    escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                    e.preventDefault();\r\n                }\r\n                // Restrict the 2 dots entering\r\n                if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                if (textValue) {\r\n                    decimalDigit = textValue.toString().split('.');\r\n                }\r\n                // Restrict the decimal value from entering\r\n                if (attrs.decimalprecision) {\r\n                    if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                    if (decimalDigit.length == 2) {\r\n                        if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.min != undefined || scope.min != null) {\r\n                    if (scope.min >= 0 && e.charCode == 45) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n            // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n            if (angular.isDefined(attrs.maxlength) && e.target.value.length == attrs.maxlength && e.charCode !== 0) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element);\r\n                //smartTextFieldService.updateTextValue(scope, element);\r\n                if (scope.ngModel != null) {\r\n                    var min = 0;\r\n                    var max = 0;\r\n                    if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                        if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                            min = 0;\r\n                            max = 0;\r\n                        }\r\n                        else {\r\n                            min = MinPrecessionValue;//global default\r\n                            max = MaxPrecessionValue;//global default\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length == 2) {\r\n                                min = splitPrecision[0];\r\n                                max = splitPrecision[1];\r\n                            }\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (scope.minmaxprecision) {\r\n                            min = JSON.parse(scope.minmaxprecision)[0];\r\n                            max = JSON.parse(scope.minmaxprecision)[1];\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                    var valueToModel;\r\n                    if (scope.ngModel === '') {\r\n                        valueToModel = scope.ngModel;\r\n                    }else if (scope.currencySymbol) {\r\n                        valueToModel = scope.currencySymbol + $filter('minPrecisionHandler')(scope.ngModel, min, max, false);\r\n                    }else {\r\n                        valueToModel = $filter('minPrecisionHandler')(scope.ngModel, min, max, false);\r\n                    }\r\n                    element.find('#' + scope.textfieldId).val(valueToModel);\r\n                    if (!scope.ngModel) {\r\n                        var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n                        if (num != '') {\r\n                            scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        else {\r\n                            scope.ngModel = null;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.ngModel !== scope.prevModel) {\r\n                        $timeout(function () {\r\n                            scope.prevModel = scope.ngModel;\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            updateView();\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                    aSign: scope.currencySymbol,\r\n                    mDec: 0,\r\n                    aPad: false,\r\n                    aSep: thousandSep,\r\n                    aDec: decimalSep,\r\n                    vMin: Number.NEGATIVE_INFINITY,\r\n                    vMax: Number.POSITIVE_INFINITY\r\n                });\r\n            } else {\r\n                element.find('#' + scope.textfieldId).autoNumeric();\r\n            }\r\n        }\r\n        else {\r\n            var thousandSep = ',';\r\n            var decimalSep = '.';\r\n            var highPrecisionLimit = 0;\r\n            if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                if (splitPrecision.length == 2) {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    highPrecisionLimit = splitPrecision[1];\r\n                }\r\n            }\r\n            element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                aSign: scope.currencySymbol,\r\n                mDec: highPrecisionLimit,\r\n                aPad: false,\r\n                aSep: thousandSep,\r\n                aDec: decimalSep,\r\n                vMin: Number.NEGATIVE_INFINITY,\r\n                vMax: Number.POSITIVE_INFINITY,\r\n            });\r\n        }\r\n        bindOtherWatcher();\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    angular.module('SMART2').factory('smartTextFieldService', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', '$translate', '$timeout', smartTextFieldServiceFunc])\r\n    function smartTextFieldServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile, $translate, $timeout) {\r\n        var checkIfActive = function (scope) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                return true;\r\n            }\r\n            if (scope.type == 'number' && scope.ngModel !== 0 + '' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n            }\r\n            if (scope.type != 'number' && scope.type != 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n            }\r\n            if (scope.type == 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        var setActiveClass = function (scope, element, eventType) {\r\n            scope.active = checkIfActive(scope);\r\n            var el = element.find('#' + scope.textfieldId + '_label');\r\n\r\n            if ((typeof scope.active !== 'undefined' && scope.active == true) || (typeof scope.validate !== 'undefined' && scope.validate == true)) {\r\n                if (!el.hasClass('active')) {\r\n                    el.addClass('active');\r\n                }\r\n            } else {\r\n                if (el.hasClass('active')) {\r\n                    el.removeClass('active');\r\n                }\r\n            }\r\n        }\r\n\r\n        var updateTextFieldClass = function (scope, element) {\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            var elmContainer = $(element).find('#' + scope.textfieldId + '_container');\r\n            var lbl = $(element).find('#' + scope.textfieldId + '_label');\r\n            if (typeof scope.validate !== 'undefined' && scope.validate == true && typeof scope.errorMessage !== 'undefined' && scope.errorMessage) {\r\n                if (!elm.hasClass('invalid')) {\r\n                    elm.addClass('invalid');\r\n                    lbl.attr('data-error', $translate.instant(scope.errorMessage));\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n                }\r\n            }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'right') {\r\n                if (!elm.hasClass('right-align')) {\r\n                    elm.addClass('right-align');\r\n                }\r\n                if (!lbl.hasClass('right-align')) {\r\n                    lbl.addClass('right-align');\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('right-align')) {\r\n                    elm.removeClass('right-align');\r\n                }\r\n                if (lbl.hasClass('right-align')) {\r\n                    lbl.removeClass('right-align');\r\n                }\r\n            }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'left') {\r\n                if (!elm.hasClass('left-align')) {\r\n                    elm.addClass('left-align');\r\n                }\r\n                if (!lbl.hasClass('left-align')) {\r\n                    lbl.addClass('left-align');\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('left-align')) {\r\n                    elm.removeClass('left-align');\r\n                }\r\n                if (lbl.hasClass('left-align')) {\r\n                    lbl.removeClass('left-align');\r\n                }\r\n            }\r\n\r\n            if ((typeof scope.readonly !== 'undefined' && (scope.readonly == true || scope.readonly == 'true')) || (typeof scope.disable !== 'undefined' && (scope.disable === 'true' || scope.disable === true))) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n                elmContainer.addClass('readOnlyField');\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n                }\r\n            }\r\n            else {\r\n                elm.prop(\"readonly\", false);\r\n                elm.attr(\"disabled\", false);\r\n                elm.removeAttr('tabindex');\r\n                elmContainer.removeClass('readOnlyField');\r\n            }\r\n\r\n\r\n            if (typeof scope.autocomplete != 'undefiend' && (scope.autocomplete == 'true' || scope.autocomplete == true))// \"{{autocomplete?'on':'off'}}\")\r\n            {\r\n\r\n            }\r\n            else {\r\n                // elm.autocomplete().disable();\r\n            }\r\n\r\n            //if (typeof scope.disable !== 'undefined' && scope.disable == true) {\r\n            //    elm.attr(\"disabled\", \"disabled\")\r\n            //}\r\n            //else {\r\n            //    elm.attr(\"disabled\", false);\r\n            //}\r\n\r\n\r\n            if (!elm.hasClass('ng-valid')) {\r\n                elm.addClass('ng-pristine ng-valid ng-scope ng-touched');\r\n            }\r\n\r\n\r\n            if (typeof scope.placeholder !== 'undefined' && scope.placeholder != '') {\r\n                elm.attr(\"placeholder\", scope.placeholder)\r\n            }\r\n\r\n            //Optional Field\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory == false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var container = $(element).find('#' + scope.textfieldId + '_container');\r\n                if (typeof optionalField == 'undefiend' || (typeof optionalField !== 'undefiend' && optionalField.length == 0)) {\r\n                    container.append(buildOptionalFieldTemplate(scope));\r\n                    optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n                    if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                        optionalField.bind(\"click\", scope.hideShowField);\r\n                    }\r\n                }\r\n                if (!container.hasClass('optionalField')) {\r\n                    container.addClass('optionalField');\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (typeof optionalField !== 'undefiend' && optionalField.length > 0) {\r\n                    optionalField.remove();\r\n                }\r\n            }\r\n\r\n            if (scope.type === 'text' || scope.type === 'number' || scope.type === 'area') {\r\n                if (typeof scope.maxlength != 'undefined') {\r\n                    if (parseInt(scope.maxlength) > -1) {\r\n                        elm.attr('maxlength', parseInt(scope.maxlength));\r\n                    }\r\n                }\r\n            }\r\n\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                className = className.replace('ng-hide', \"\");\r\n                element.removeClass(className);\r\n            }\r\n            elmContainer.addClass(className);\r\n        }\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory === false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.textfieldId + '_opField');\r\n                return optionalField;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildPrefixiconTemplate = function (scope) {\r\n            if (typeof scope.prefixicon !== 'undefined' && scope.prefixicon) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldprefixiconTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_prefixicon');\r\n                html = html.replace('{{prefixicon}}', scope.prefixicon);\r\n                return html;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildSpinnerTemplate = function (scope) {\r\n            if (!scope.type == 'autocomplete' && typeof scope.loading !== 'undefined' && scope.loading == true) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldSpinnerTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_spinner');\r\n                return html;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildTextFieldTemplate = function (scope) {\r\n            var html = '';\r\n\r\n            if (scope.type === 'area' && scope.readonly === 'true') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaReadonlyElementTemplate.html');\r\n            } else if (scope.type === 'area') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaElementTemplate.html');\r\n            }\r\n            else {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldElementTemplate.html');\r\n            }\r\n            if (scope.type === 'password') {\r\n                html = html.replace('type=\"text\"', 'type=\"password\"');\r\n            }\r\n            html = html.replace('{{id}}', scope.textfieldId);\r\n            html = html.replace('{{showHideReadMoreContent}}', 'showHideReadMoreContent' + scope.textfieldId);\r\n            html = html.replace('{{showLessContent}}', $translate.instant('showLess'));\r\n            html = html.replace('{{showMoreContent}}', $translate.instant('showMoreContent'));\r\n            return html;\r\n        };\r\n\r\n        var buildInfoIconTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //if (scope.showwarning || scope.showinfo) {\r\n            //    html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        //var buildWarningIconTemplate = function (scope) {\r\n        //    var html = '';\r\n        //    if (scope.showwarning || scope.showinfo) {\r\n        //        html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldwarningiconTemplate.html');\r\n        //    }\r\n        //    return html;\r\n        //};\r\n\r\n        var buildLabelTemplate = function (scope) {\r\n            var html = '';\r\n            //if (typeof scope.label !== 'undefined' && scope.label.trim() != '') {\r\n            html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldLabelTemplate.html');\r\n            html = html.replace('{{id}}', scope.textfieldId + '_label');\r\n            html = html.replace('{{textfieldId}}', scope.textfieldId);\r\n            html = html.replace('{{label}}', typeof scope.label === 'undefined' ? '' : scope.label);\r\n            if (!scope.label) {\r\n                html = html.replace('class=\"\"', 'class=\"empty-label\"');\r\n            }\r\n\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        var buildTemplate = function (scope, element, onChangeCallback, attrs) {\r\n            var container = $('<div/>', { id: scope.textfieldId + '_container' });// document.createElement('div');\r\n\r\n            var css = '';\r\n            if ((scope.isMandatory === false || scope.isMandatory === 'false') && scope.isRemovable === true) {\r\n                css += ' optionalField';\r\n            }\r\n            if (scope.showinfo || scope.showwarning) {\r\n                css += ' field-has-icon';\r\n                //if (scope.showinfo && scope.showwarning) {\r\n                //    css += ' field-has-two-icons';\r\n                //}\r\n            }\r\n            if (scope.readonly === 'true' || scope.disable === 'true') {\r\n                css += ' readOnlyField';\r\n            }\r\n            //if (!scope.customoption) {\r\n            //    css += ' defaultSelected';\r\n            //}\r\n            //if (scope.validate === true && scope.errorMessage) {\r\n            //    css += ' invalid';\r\n            //}\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                element.removeClass(className);\r\n            }\r\n            container.addClass(className + ' input-field ' + css);\r\n\r\n\r\n            container.append('<div class=\"elements-include\">' + buildOptionalFieldTemplate(scope) + buildPrefixiconTemplate(scope) + buildSpinnerTemplate(scope) + buildTextFieldTemplate(scope) + buildLabelTemplate(scope) + '</div>');\r\n            container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.html(container);\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            elm.on(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            elm.on(\"blur\", scope.ngBlur);\r\n\r\n            if (scope.type != undefined && scope.type == 'number') {\r\n                // elm.attr('type', 'number');\r\n\r\n                if (scope.min != undefined && scope.min != null) {\r\n                    if ($.isNumeric(scope.min)) {\r\n                        elm.attr('min', scope.min);\r\n                    }\r\n                }\r\n                if (scope.max != undefined && scope.max != null) {\r\n                    if ($.isNumeric(scope.max)) {\r\n                        elm.attr('max', scope.max);\r\n                    }\r\n                }\r\n\r\n                elm.bind('keypress', scope.ngKeyPress);\r\n\r\n\r\n\r\n            } else if (scope.type != undefined && scope.type == 'autocomplete') {\r\n                elm.on(\"focus\", scope.ngFocus);\r\n\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n                }\r\n            } else if (scope.type != undefined && (scope.type == 'area' || scope.type == 'text')) {\r\n\r\n                // Need to add debounce for updating the ngModel\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n                }\r\n                //if (attrs.onKeyUp) {\r\n                //    elm.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n                //}\r\n                if (attrs.onKeyDown) {\r\n                    elm.bind('keydown', debounce(scope.ngKeyDown, 250));\r\n                }\r\n                if (attrs.onFocus) {\r\n                    elm.bind('focus', scope.ngFocus);\r\n                }\r\n                // Need to optimize this line, post finding of better approach. It is required for filtering ng-repeat\r\n                elm.bind('keyup', scope.ngKeyUp);\r\n            }\r\n\r\n\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n            }\r\n            updateTextFieldClass(scope, element);\r\n            setActiveClass(scope, element);\r\n\r\n            if (angular.isDefined(scope.charactercounter) && scope.charactercounter == 'true') {\r\n                elm.attr('length', scope.maxlength);\r\n                elm.characterCounter();\r\n            }\r\n\r\n        };\r\n\r\n        var updateTextValue = function (scope, element, ngModelCtrl) {\r\n            var elm = element.find('#' + scope.textfieldId),\r\n                addClassElem = element.find('#showHideReadMoreContent' + scope.textfieldId),\r\n                showLessContent = element.find('.readOnlyshowLess'),\r\n                showMoreContent = element.find('.readOnlyShowMore');\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n\r\n                if ((modal.getModal(scope, ngModelCtrl)).length < 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.hide();\r\n                } else if ((modal.getModal(scope, ngModelCtrl)).length > 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.show();\r\n                }\r\n            }\r\n\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n\r\n                addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n            }\r\n            if (scope.type === 'area' && scope.readonly === 'true') {\r\n\r\n                if (elm.text() !== modal.getModal(scope, ngModelCtrl)) { elm.text(modal.getModal(scope, ngModelCtrl)); }\r\n                //addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n                $(showLessContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showMoreContent).show();\r\n                    $(addClassElem).removeClass('areareadOnlyContentPara2');\r\n                    $(addClassElem).addClass('ellipsis areareadOnlyContentPara1');\r\n                });\r\n                $(showMoreContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showLessContent).show();\r\n                    $(addClassElem).removeClass('ellipsis areareadOnlyContentPara1');\r\n                    $(addClassElem).addClass('areareadOnlyContentPara2');\r\n\r\n                });\r\n            }\r\n            else {\r\n                if (elm.val() !== modal.getModal(scope, ngModelCtrl) && !scope.typing) {\r\n                    elm.val(modal.getModal(scope, ngModelCtrl));\r\n                }\r\n                if (scope.showTitle) {\r\n                    elm.attr('title', modal.getModal(scope, ngModelCtrl));\r\n                }\r\n                if (modal.getModal(scope, ngModelCtrl) === '') {\r\n                    elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                } else {\r\n                    elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                }\r\n\r\n                /* Adding class truncate to input*/\r\n                if (!elm.hasClass('materialize-textarea') && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                    elm.addClass('truncate');\r\n                } else {\r\n                    elm.removeClass('truncate')\r\n                };\r\n            }\r\n        \r\n        }\r\n        var modal = {\r\n            getModal: function (scope, ngModelCtrl) {\r\n                return typeof scope.ngModel == \"function\" ? ngModelCtrl.$modelValue : scope.ngModel;\r\n            },\r\n            setModal: function (scope, value, ngModelCtrl) {\r\n\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    ngModelCtrl.$setViewValue(value)\r\n                    ngModelCtrl.$render()\r\n                } else {\r\n                    scope.ngModel = value;\r\n                }\r\n            }\r\n        };\r\n\r\n        var updateDateValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.dateModel);\r\n            elm.attr('title', scope.dateModel);\r\n        }\r\n\r\n        var updateAutocompleteValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.displayModel);\r\n            elm.attr('title', scope.displayModel);\r\n        }\r\n\r\n\r\n        var checkRule = function (scope, element) {\r\n            var rules = scope.$eval(scope.rules);\r\n            var isFoundInvalid = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n                if (typeof rules[i] == 'object') {\r\n                    if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = rules[i].error;\r\n                        scope.errorModel = rules[i].error;\r\n                        break;\r\n                    } else {\r\n                        if (scope.type === 'date') {\r\n                            angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (!isFoundInvalid) {\r\n                        if (typeof scope.ngModel != 'object')\r\n                            var data = scope.ngModel;\r\n                        else\r\n                            var data = scope.displayModel;\r\n\r\n                        RuleEngine.isValid(rules[i], function (e) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = e.errorData.error;\r\n                            scope.errorModel = rules[i].error;\r\n                            isFoundInvalid = true;\r\n                        }, data);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var validateRules = function (scope, ngModelCtrl, element, attrs) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                scope.isActive = true;\r\n                return;\r\n            }\r\n\r\n            if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                if (attrs.noTrim == 'true') {\r\n                    //scope.ngModel = scope.ngModel;\r\n                } else {\r\n                    //scope.ngModel = scope.ngModel.trim();\r\n                    modal.setModal(scope, modal.getModal(scope, ngModelCtrl).trim(), ngModelCtrl);\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n            }\r\n\r\n            if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (typeof scope.ngModel === 'undefined' || scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (scope.clienterror) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (scope.type == 'number') {\r\n                if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                    angular.element('#' + scope.textfieldId).val('');\r\n                    return;\r\n                }\r\n                if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                    if (scope.rules) {\r\n                        checkRule(scope, element);\r\n                    }\r\n                    return;\r\n                }\r\n                //if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                //    scope.validate = true;\r\n                //    scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                //    scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                //    return;\r\n                //}\r\n\r\n            }\r\n\r\n            // CON-5898\r\n            if (scope.type == 'date' && !scope.rules) {\r\n                $('#' + scope.textfieldId).removeClass('invalid');\r\n            }\r\n\r\n            scope.validate = false;\r\n            scope.errorMessage = null;\r\n            scope.errorModel = null;\r\n\r\n            if (scope.rules) {\r\n                checkRule(scope, element);\r\n            }\r\n        };\r\n\r\n        var debounce = function (func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n        var updateDateClass = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            if (scope.type == 'date') {\r\n                if (!el.hasClass('datepicker')) {\r\n                    el.addClass('datepicker');\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        var assignDateEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.bind('keydown', scope.ngKeyDown);\r\n            el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', scope.ngKeyUp);\r\n\r\n        }\r\n\r\n        var assignAutocompleteEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            //el.bind('keydown', scope.ngKeyDown);\r\n            //el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n            el.on('input', debounce(scope.search, 250));\r\n\r\n        }\r\n\r\n        /*\r\n          * This function is required to generate value attribute \r\n          * and useful when up/down key is pressed\r\n          */\r\n        var getFormattedData = function (data, scope) {\r\n            if (!data || data.length == 0) {\r\n                return [];\r\n            }\r\n            for (var i = 0; i < data.length; i++) {\r\n                var str = scope.ndisplayFormat;\r\n                try {\r\n                    var parentSplit = str.split('{');\r\n                    for (var j = 0; j < parentSplit.length; j++) {\r\n                        var childSplit = parentSplit[j].split('}');\r\n                        for (var k = 0; k < childSplit.length; k++) {\r\n                            if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) { }\r\n                data[i].value = str.trim();\r\n            }\r\n            return data;\r\n        };\r\n        /*\r\n            *  Convert timestamp to UTC timestamp \r\n            */\r\n        var toUTC = function (date) {\r\n            return Date.UTC(\r\n                date.getFullYear()\r\n                , date.getMonth()\r\n                , date.getDate()\r\n                , date.getHours()\r\n                , date.getMinutes()\r\n                , date.getSeconds()\r\n                , date.getMilliseconds()\r\n            );\r\n        };\r\n\r\n        var getGridFormatToTimestamp = function (scope, stringdate) {\r\n            var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n            // tmpModel = tmpModel.split('+');\r\n            // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n            //if (scope.applyClientZone) {\r\n            //    return moment(tmpModel).parseZone().format(scope.dateFormat);\r\n            //}\r\n            //else {\r\n            return moment(tmpModel).format(scope.dateFormat);\r\n            //}\r\n        }\r\n\r\n        var updateNgModel = function (scope, timestamp) {\r\n            scope.dateModifiedbyUser = true;\r\n            if (scope.timePicker == true) {\r\n                if (scope.convertIntoUTC || timeZoneOffset != 20) {\r\n                    // that means the date will be saved in UTC Format\r\n                    scope.ngModel = moment(timestamp * 1000).add((timeZoneOffset * -60), 'minute').format('YYYY-MM-DDTHH:mm:ss');  //'\\/Date(' + ((timestamp - (moment().zone() * 60)) * 1000) + ')\\/';\r\n                } else {\r\n                    //This case is applied for Sourcing. because of the converstion happed before saving.\r\n                    scope.ngModel = '\\/Date(' + (timestamp * 1000) + ')\\/';\r\n                }\r\n            }\r\n            else {\r\n                // hooking a fixed time to fix the flipping issues.\r\n                // if (scope.convertIntoUTC) {\r\n                //scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                //}else\r\n                //{\r\n                //    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                //}\r\n\r\n                if (timeZoneOffset != 20) {\r\n                    scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                } else {\r\n                    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var createDatePicker = function (scope, element, ngModelCtrl) {\r\n            setTimeout(function () {\r\n                var picker = element.find('#' + scope.textfieldId);\r\n                var callApplyFuncFlag = true;\r\n                function setDateFormate(datePar) {\r\n                    updateNgModel(scope, datePar.unix());\r\n                    $timeout(function () {\r\n                        // if (scope.doesContainDateString) {\r\n\r\n                        //} else {\r\n                        //    if (scope.isValueDateObj) {\r\n                        //        var tempDate = datePar.format();\r\n                        //        scope.ngModel = new Date(tempDate);\r\n                        //    } else {\r\n                        //        scope.ngModel = (datePar.unix() * 1000);\r\n                        //    }\r\n                        //}\r\n                        // ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        scope.isDateBlank = false;\r\n                        if (angular.isFunction(scope.onDateChange)) {\r\n                            scope.onDateChange({ $event: { date: scope.ngModel }});\r\n                        }\r\n\r\n                    })\r\n                }\r\n                var minDate = angular.isDefined(scope.min) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(scope.dateFormat) : '';\r\n                var maxDate = angular.isDefined(scope.max) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(scope.dateFormat) : '';\r\n\r\n                var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                var pickerObj = picker.daterangepicker({\r\n                    \"singleDatePicker\": true,\r\n                    \"showDropdowns\": true,\r\n                    \"timePicker\": scope.datetimePicker,\r\n                    \"timePicker24Hour\": timePicker24Hour,\r\n                    \"timePickerIncrement\": timePickerIncrement,\r\n                    \"autoApply\": false,\r\n                    \"opens\": \"right\",\r\n                    \"drops\": \"down\",\r\n                    \"minDate\": minDate,\r\n                    \"maxDate\": maxDate,\r\n                    \"autoUpdateInput\": false,\r\n                    \"locale\": {\r\n                        \"format\": scope.dateFormat,\r\n                        'cancelLabel': $translate.instant('cancelBtn'),\r\n                        'applyLabel': $translate.instant('applyBtn')\r\n                    }\r\n                }, function (start, end, label) {\r\n                    callApplyFuncFlag = false;\r\n                    setDateFormate(start);\r\n                }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                    var pos = pickerObj.container.offset(),\r\n                        wHeight = window.innerHeight,\r\n                        srTop = $(window).scrollTop();\r\n                    if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                        pickerObj.drops = \"up\";\r\n                        pickerObj.move();\r\n                    } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                        pickerObj.drops = \"down\";\r\n                        pickerObj.move();\r\n                    }\r\n                }).data(\"daterangepicker\");\r\n\r\n                picker.on('apply.daterangepicker', function (ev, pickerObj) {\r\n                    if (callApplyFuncFlag) {\r\n                        setDateFormate(pickerObj.startDate)\r\n                    }\r\n                    callApplyFuncFlag = true;\r\n                    pickerObj.autoUpdateInput = true;\r\n                    pickerObj.updateElement();\r\n                    pickerObj.autoUpdateInput = false;\r\n                });\r\n\r\n                if (scope.isDateBlank) {\r\n                    picker.val('');\r\n                    scope.ngModel = \"\";\r\n                    // WS-2072\r\n                    //ngModelCtrl.$setViewValue('');\r\n\r\n                };\r\n            });\r\n        }\r\n\r\n        var getDisplayData = function (data, scope) {\r\n            if (data == undefined || data == null || data == '') {\r\n                return '';\r\n            }\r\n            var str = scope.ndisplayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                            evalResult = eval('data.' + childSplit[k]);\r\n                            evaluatedKeysCounter++;\r\n                            if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                evalResult = '';\r\n                                nullKeysCounter++;\r\n                            }\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                        }\r\n                    }\r\n                }\r\n                if (evaluatedKeysCounter == nullKeysCounter) {\r\n                    str = '';\r\n                }\r\n            }\r\n            catch (e) { }\r\n            return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n        }\r\n\r\n        function debounce(func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n\r\n        var service = {\r\n            buildTemplate: buildTemplate,\r\n            setActiveClass: setActiveClass,\r\n            updateTextFieldClass: updateTextFieldClass,\r\n            checkIfActive: checkIfActive,\r\n            validateRules: validateRules,\r\n            checkRule: checkRule,\r\n            updateTextValue: updateTextValue,\r\n            debounce: debounce,\r\n            updateDateClass: updateDateClass,\r\n            assignDateEvents: assignDateEvents,\r\n            getFormattedData: getFormattedData,\r\n            toUTC: toUTC,\r\n            getGridFormatToTimestamp: getGridFormatToTimestamp,\r\n            createDatePicker: createDatePicker,\r\n            updateDateValue: updateDateValue,\r\n            updateAutocompleteValue: updateAutocompleteValue,\r\n            getDisplayData: getDisplayData,\r\n            assignAutocompleteEvents: assignAutocompleteEvents,\r\n            modal: modal\r\n        };\r\n\r\n        return service;\r\n    }\r\n\r\n    angular.module('SMART2').factory('smartTextField3Service', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', '$translate', '$timeout', smartTextField3ServiceFunc])\r\n        function smartTextField3ServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile, $translate, $timeout) {\r\n        var _selectedDate, _previousDate;\r\n        var getSelectedDate = function () {\r\n            return _selectedDate;\r\n        };\r\n        var setSelectedDate = function (date) {\r\n            _selectedDate = date;\r\n        };\r\n        var getPreviousDate = function () {\r\n            return _previousDate;\r\n        };\r\n        var setPreviousDate = function (date) {\r\n            _previousDate = date;\r\n        };\r\n        var checkIfActive = function (scope) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                return true;\r\n        }\r\n            if (scope.type == 'number' && scope.ngModel !== 0 + '' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n        }\r\n            if (scope.type != 'number' && scope.type != 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n        }\r\n            if (scope.type == 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                return false;\r\n        }\r\n            return true;\r\n        }\r\n\r\n        var setActiveClass = function (scope, element, eventType) {\r\n            scope.active = checkIfActive(scope);\r\n            var el = element.find('#' + scope.textfieldId + '_label');\r\n\r\n            if ((typeof scope.active !== 'undefined' && scope.active == true) || (typeof scope.validate !== 'undefined' && scope.validate == true)) {\r\n                if (!el.hasClass('active')) {\r\n                    el.addClass('active');\r\n            }\r\n            } else {\r\n                if (el.hasClass('active')) {\r\n                    el.removeClass('active');\r\n            }\r\n        }\r\n        }\r\n\r\n        var updateTextFieldClass = function (scope, element) {\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            var elmContainer = $(element).find('#' + scope.textfieldId + '_container');\r\n            var lbl = $(element).find('#' + scope.textfieldId + '_label');\r\n            if (typeof scope.validate !== 'undefined' && scope.validate == true && typeof scope.errorMessage !== 'undefined' && scope.errorMessage) {\r\n                if (!elm.hasClass('invalid')) {\r\n                    elm.addClass('invalid');\r\n                    lbl.attr('data-error', $translate.instant(scope.errorMessage));\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n            }\r\n        }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'right') {\r\n                if (!elm.hasClass('right-align')) {\r\n                    elm.addClass('right-align');\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('right-align')) {\r\n                    elm.removeClass('right-align');\r\n            }\r\n        }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'left') {\r\n                if (!elm.hasClass('left-align')) {\r\n                    elm.addClass('left-align');\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('left-align')) {\r\n                    elm.removeClass('left-align');\r\n            }\r\n        }\r\n\r\n            if ((typeof scope.readonly !== 'undefined' && (scope.readonly == true || scope.readonly == 'true')) || (typeof scope.disable !== 'undefined' && (scope.disable === 'true' || scope.disable === true))) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n                elmContainer.addClass('readOnlyField');\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n            }\r\n            }\r\n            else {\r\n                elm.prop(\"readonly\", false);\r\n                elm.attr(\"disabled\", false);\r\n                elm.removeAttr('tabindex');\r\n                elmContainer.removeClass('readOnlyField');\r\n        }\r\n\r\n\r\n            if (typeof scope.autocomplete != 'undefiend' && (scope.autocomplete == 'true' || scope.autocomplete == true))// \"{{autocomplete?'on':'off'}}\")\r\n            {\r\n\r\n            }\r\n            else {\r\n                // elm.autocomplete().disable();\r\n        }\r\n\r\n            //if (typeof scope.disable !== 'undefined' && scope.disable == true) {\r\n            //    elm.attr(\"disabled\", \"disabled\")\r\n            //}\r\n            //else {\r\n            //    elm.attr(\"disabled\", false);\r\n            //}\r\n\r\n\r\n            if (!elm.hasClass('ng-valid')) {\r\n                elm.addClass('ng-pristine ng-valid ng-scope ng-touched');\r\n        }\r\n\r\n\r\n            if (typeof scope.placeholder !== 'undefined' && scope.placeholder != '') {\r\n                elm.attr(\"placeholder\", scope.placeholder)\r\n        }\r\n\r\n            //Optional Field\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory == false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var container = $(element).find('#' + scope.textfieldId + '_container');\r\n                if (typeof optionalField == 'undefiend' || (typeof optionalField !== 'undefiend' && optionalField.length == 0)) {\r\n                    container.append(buildOptionalFieldTemplate(scope));\r\n                    optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n                    if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                        optionalField.bind(\"click\", scope.hideShowField);\r\n                }\r\n            }\r\n                if (!container.hasClass('optionalField')) {\r\n                    container.addClass('optionalField');\r\n            }\r\n\r\n            }\r\n            else {\r\n                if (typeof optionalField !== 'undefiend' && optionalField.length > 0) {\r\n                    optionalField.remove();\r\n            }\r\n        }\r\n\r\n            if (scope.type === 'text' || scope.type === 'number' || scope.type === 'area') {\r\n                if (typeof scope.maxlength != 'undefined') {\r\n                    if (parseInt(scope.maxlength) > -1) {\r\n                        elm.attr('maxlength', parseInt(scope.maxlength));\r\n                }\r\n            }\r\n        }\r\n\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                className = className.replace('ng-hide', \"\");\r\n                element.removeClass(className);\r\n        }\r\n            elmContainer.addClass(className);\r\n        }\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory === false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.textfieldId + '_opField');\r\n                return optionalField;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildPrefixiconTemplate = function (scope) {\r\n            if (typeof scope.prefixicon !== 'undefined' && scope.prefixicon) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldprefixiconTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_prefixicon');\r\n                html = html.replace('{{prefixicon}}', scope.prefixicon);\r\n                return html;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildSpinnerTemplate = function (scope) {\r\n            if (!scope.type == 'autocomplete' && typeof scope.loading !== 'undefined' && scope.loading == true) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldSpinnerTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_spinner');\r\n                return html;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildTextFieldTemplate = function (scope) {\r\n            var html = '';\r\n            if (scope.type === 'area' && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaReadonlyElementTemplate.html');\r\n            } else if (scope.type === 'area') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaElementTemplate.html');\r\n            } else {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldElementTemplate.html');\r\n        }\r\n            if (scope.type === 'password') {\r\n                html = html.replace('type=\"text\"', 'type=\"password\"');\r\n        }\r\n            html = html.replace('{{id}}', scope.textfieldId);\r\n            html = html.replace('{{showHideReadMoreContent}}', 'showHideReadMoreContent' + scope.textfieldId);\r\n            html = html.replace('{{showLessContent}}', $translate.instant('showLess'));\r\n            html = html.replace('{{showMoreContent}}', $translate.instant('showMoreContent'));\r\n            return html;\r\n        };\r\n\r\n        var buildInfoIconTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //if (scope.showwarning || scope.showinfo) {\r\n            //    html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n            //var buildWarningIconTemplate = function (scope) {\r\n            //    var html = '';\r\n            //    if (scope.showwarning || scope.showinfo) {\r\n            //        html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldwarningiconTemplate.html');\r\n            //    }\r\n            //    return html;\r\n            //};\r\n\r\n        var buildLabelTemplate = function (scope) {\r\n            var html = '';\r\n            //if (typeof scope.label !== 'undefined' && scope.label.trim() != '') {\r\n            html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldLabelTemplate.html');\r\n            html = html.replace('{{id}}', scope.textfieldId + '_label');\r\n            html = html.replace('{{textfieldId}}', scope.textfieldId);\r\n            html = html.replace('{{label}}', typeof scope.label === 'undefined' ? '' : scope.label);\r\n            if (!scope.label) {\r\n                html = html.replace('class=\"\"', 'class=\"empty-label\"');\r\n        }\r\n\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        var buildTemplate = function (scope, element, onChangeCallback, attrs) {\r\n            var container = $('<div/>', { id: scope.textfieldId + '_container' });// document.createElement('div');\r\n\r\n            var css = '';\r\n            if ((scope.isMandatory === false || scope.isMandatory === 'false') && scope.isRemovable === true) {\r\n                css += ' optionalField';\r\n        }\r\n            if (scope.showinfo || scope.showwarning) {\r\n                css += ' field-has-icon';\r\n                //if (scope.showinfo && scope.showwarning) {\r\n                //    css += ' field-has-two-icons';\r\n                //}\r\n        }\r\n            if (scope.readonly === 'true' || scope.disable === 'true') {\r\n                css += ' readOnlyField';\r\n        }\r\n            //if (!scope.customoption) {\r\n            //    css += ' defaultSelected';\r\n            //}\r\n            //if (scope.validate === true && scope.errorMessage) {\r\n            //    css += ' invalid';\r\n            //}\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                element.removeClass(className);\r\n                if (className) {\r\n                    scope.className = className;\r\n                }\r\n            }\r\n            container.addClass(scope.className + ' input-field ' + css);\r\n\r\n\r\n            container.append('<div class=\"elements-include\">' + buildOptionalFieldTemplate(scope) + buildPrefixiconTemplate(scope) + buildSpinnerTemplate(scope) + buildTextFieldTemplate(scope) + buildLabelTemplate(scope) + '</div>');\r\n            container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.html(container);\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            elm.on(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            elm.on(\"blur\", scope.ngBlur);\r\n\r\n            if (scope.type != undefined && scope.type == 'number') {\r\n                // elm.attr('type', 'number');\r\n\r\n                if (scope.min != undefined && scope.min != null) {\r\n                    if ($.isNumeric(scope.min)) {\r\n                        elm.attr('min', scope.min);\r\n                }\r\n            }\r\n                if (scope.max != undefined && scope.max != null) {\r\n                    if ($.isNumeric(scope.max)) {\r\n                        elm.attr('max', scope.max);\r\n                }\r\n            }\r\n\r\n                elm.bind('keypress', scope.ngKeyPress);\r\n\r\n\r\n\r\n            } else if (scope.type != undefined && scope.type == 'autocomplete') {\r\n                elm.on(\"focus\", scope.ngFocus);\r\n\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n            }\r\n            } else if (scope.type != undefined && (scope.type == 'area' || scope.type == 'text')) {\r\n\r\n                // Need to add debounce for updating the ngModel\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n            }\r\n                //if (attrs.onKeyUp) {\r\n                //    elm.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n                //}\r\n                if (attrs.onKeyDown) {\r\n                    elm.bind('keydown', debounce(scope.ngKeyDown, 250));\r\n            }\r\n                if (attrs.onFocus) {\r\n                    elm.bind('focus', scope.ngFocus);\r\n            }\r\n                // Need to optimize this line, post finding of better approach. It is required for filtering ng-repeat\r\n                elm.bind('keyup', scope.ngKeyUp);\r\n            }\r\n\r\n\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n        }\r\n            updateTextFieldClass(scope, element);\r\n            setActiveClass(scope, element);\r\n\r\n            if (angular.isDefined(scope.charactercounter) && scope.charactercounter == 'true') {\r\n                elm.attr('length', scope.maxlength);\r\n                elm.characterCounter();\r\n        }\r\n\r\n        };\r\n\r\n        var updateTextValue = function (scope, element, ngModelCtrl) {\r\n            var elm = element.find('#' + scope.textfieldId),\r\n                addClassElem = element.find('#showHideReadMoreContent' + scope.textfieldId),\r\n                showLessContent = element.find('.readOnlyshowLess'),\r\n                showMoreContent = element.find('.readOnlyShowMore');\r\n                showLessContent.hide();\r\n                showMoreContent.hide();\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n                if (modal.getModal(scope, ngModelCtrl) && modal.getModal(scope, ngModelCtrl).length < 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.hide();\r\n                } else if (modal.getModal(scope, ngModelCtrl) && modal.getModal(scope, ngModelCtrl).length > 150) {\r\n                    addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n                    showLessContent.hide();\r\n                    showMoreContent.show();\r\n            }\r\n        }\r\n         \r\n            if (scope.type === 'area' && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                elm.text(modal.getModal(scope, ngModelCtrl));\r\n                $(showLessContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showMoreContent).show();\r\n                    $(addClassElem).removeClass('areareadOnlyContentPara2');\r\n                    $(addClassElem).addClass('ellipsis areareadOnlyContentPara1');\r\n                });\r\n                $(showMoreContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showLessContent).show();\r\n                    $(addClassElem).removeClass('ellipsis areareadOnlyContentPara1');\r\n                    $(addClassElem).addClass('areareadOnlyContentPara2');\r\n                });\r\n            }\r\n            else {\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    $timeout(function () {\r\n                        elm = element.find('#' + scope.textfieldId);\r\n                        var gm = modal.getModal(scope, ngModelCtrl);\r\n                        if (elm.val() !== gm) {\r\n                            elm.val(gm);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', gm);\r\n                        }\r\n                        if (gm === '' || typeof gm == 'undefined') {\r\n                            elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                            elm.attr('title', '');\r\n                        } else {\r\n                             angular.element('#' + scope.textfieldId+\"_label\").addClass(\"active\");\r\n                             elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                        }\r\n                    });\r\n                }else if (scope.type == 'number') {\r\n                    var modelVal = modal.getModal(scope, ngModelCtrl)\r\n                    if (typeof elm.autoNumeric == 'function') {\r\n                        if (elm.autoNumeric('get') != modelVal) {\r\n                            elm.autoNumeric('set', modelVal);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', elm.autoNumeric('get'));\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (elm.val() !== modelVal) {\r\n                            elm.val(modelVal);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', modelVal);\r\n                        }\r\n                    }\r\n                   \r\n                    if (modelVal === null && scope.placeholder === \"\") {\r\n                        elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                    } else {\r\n                        elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                    }\r\n                }\r\n                else {\r\n                    if (elm.val() !== modal.getModal(scope, ngModelCtrl)) {\r\n                        if (scope.typing) {\r\n                            smartTextFieldService.modal.setModal(scope, elm.val(), ngModelCtrl);\r\n                        } else {\r\n                            elm.val(modal.getModal(scope, ngModelCtrl));\r\n                        }\r\n\r\n                    }\r\n                    if (scope.showTitle) {\r\n                        elm.attr('title', modal.getModal(scope, ngModelCtrl));\r\n                    }\r\n                    if (modal.getModal(scope, ngModelCtrl) === '') {\r\n                        elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                    } else {\r\n                        elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                    }\r\n                }\r\n\r\n                /* Adding class truncate to input*/\r\n                if (!elm.hasClass('materialize-textarea') && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                    elm.addClass('truncate');\r\n                } else {\r\n                    elm.removeClass('truncate')\r\n            };\r\n        }\r\n            if (scope.type === 'area') {\r\n                    $timeout(function(){\r\n                         angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                    });\r\n            }\r\n       }\r\n\r\n        var modal = {\r\n                getModal: function (scope, ngModelCtrl) {\r\n                return typeof scope.ngModel == \"function\" ? ngModelCtrl.$modelValue : scope.ngModel;\r\n        },\r\n                setModal: function (scope, value, ngModelCtrl) {\r\n\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    ngModelCtrl.$setViewValue(value)\r\n                    ngModelCtrl.$render()\r\n                } else {\r\n                    scope.ngModel = value;\r\n                }\r\n        }\r\n        };\r\n\r\n        var updateDateValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.dateModel);\r\n            elm.attr('title', scope.dateModel);\r\n        }\r\n\r\n        var updateAutocompleteValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.displayModel);\r\n            elm.attr('title', scope.displayModel);\r\n        }\r\n\r\n\r\n        var checkRule = function (scope, element) {\r\n            var rules = scope.$eval(scope.rules);\r\n            var isFoundInvalid = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n                if (typeof rules[i] == 'object') {\r\n                    if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = rules[i].error;\r\n                        scope.errorModel = rules[i].error;\r\n                        break;\r\n                    } else {\r\n                        if (scope.type === 'date') {\r\n                            angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n                }\r\n                }\r\n                else {\r\n                    if (!isFoundInvalid) {\r\n                        if (typeof scope.ngModel != 'object')\r\n                            var data = scope.ngModel;\r\n                        else\r\n                            var data = scope.displayModel;\r\n\r\n                        RuleEngine.isValid(rules[i], function (e) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = e.errorData.error;\r\n                            scope.errorModel = rules[i].error;\r\n                            isFoundInvalid = true;\r\n                        }, data);\r\n                    }\r\n                    else {\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n        var validateRules = function (scope, ngModelCtrl, element, attrs) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                scope.isActive = true;\r\n                return;\r\n        }\r\n\r\n            if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                if (attrs.noTrim == 'true') {\r\n                    //scope.ngModel = scope.ngModel;\r\n                } else {\r\n                    //scope.ngModel = scope.ngModel.trim();\r\n                    var tempString = modal.getModal(scope, ngModelCtrl);\r\n                    if (tempString.trim().length <= 0) {\r\n                        modal.setModal(scope, tempString.trim(), ngModelCtrl);\r\n                    } else {\r\n                        modal.setModal(scope, tempString, ngModelCtrl);\r\n                }\r\n            }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n        }\r\n\r\n            if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (typeof scope.ngModel === 'undefined' || scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n\r\n                return;\r\n        }\r\n\r\n            if (scope.clienterror) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                return;\r\n        }\r\n\r\n            if (scope.type == 'number') {\r\n                if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                    angular.element('#' + scope.textfieldId).val('');\r\n                    return;\r\n            }\r\n                if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                    if (scope.rules) {\r\n                        checkRule(scope, element);\r\n                }\r\n                    return;\r\n            }\r\n                //if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                //    scope.validate = true;\r\n                //    scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                //    scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                //    return;\r\n                //}\r\n\r\n        }\r\n\r\n            // CON-5898\r\n            if (scope.type == 'date' && !scope.rules) {\r\n                $('#' + scope.textfieldId).removeClass('invalid');\r\n        }\r\n\r\n            scope.validate = false;\r\n            scope.errorMessage = null;\r\n            scope.errorModel = null;\r\n\r\n            if (scope.rules) {\r\n                checkRule(scope, element);\r\n        }\r\n        };\r\n\r\n        var debounce = function (func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n            };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n        };\r\n        };\r\n\r\n        var updateDateClass = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            if (scope.type == 'date') {\r\n                if (!el.hasClass('datepicker')) {\r\n                    el.addClass('datepicker');\r\n            }\r\n        }\r\n\r\n\r\n        }\r\n        var assignDateEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.bind('keydown', scope.ngKeyDown);\r\n            el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', scope.ngKeyUp);\r\n\r\n        }\r\n\r\n        var assignAutocompleteEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            //el.bind('keydown', scope.ngKeyDown);\r\n            //el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n            el.on('input', debounce(scope.search, 250));\r\n\r\n        }\r\n\r\n            /*\r\n              * This function is required to generate value attribute \r\n              * and useful when up/down key is pressed\r\n              */\r\n        var getFormattedData = function (data, scope) {\r\n            if (!data || data.length == 0) {\r\n                return [];\r\n        }\r\n            for (var i = 0; i < data.length; i++) {\r\n                var str = scope.ndisplayFormat;\r\n                try {\r\n                    var parentSplit = str.split('{');\r\n                    for (var j = 0; j < parentSplit.length; j++) {\r\n                        var childSplit = parentSplit[j].split('}');\r\n                        for (var k = 0; k < childSplit.length; k++) {\r\n                            if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n                catch (e) { }\r\n                data[i].value = str.trim();\r\n        }\r\n            return data;\r\n        };\r\n            /*\r\n                *  Convert timestamp to UTC timestamp \r\n                */\r\n        var toUTC = function (date) {\r\n            return Date.UTC(\r\n                date.getFullYear()\r\n                , date.getMonth()\r\n                , date.getDate()\r\n                , date.getHours()\r\n                , date.getMinutes()\r\n                , date.getSeconds()\r\n                , date.getMilliseconds()\r\n            );\r\n        };\r\n\r\n        var getGridFormatToTimestamp = function (scope, stringdate) {\r\n            var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n            // tmpModel = tmpModel.split('+');\r\n            // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n            //if (scope.applyClientZone) {\r\n            //    return moment(tmpModel).parseZone().format(scope.dateFormat);\r\n            //}\r\n            //else {\r\n            return moment(tmpModel).format(scope.dateFormat);\r\n            //}\r\n        }\r\n\r\n        var updateNgModel = function (scope, timestamp) {\r\n            scope.dateModifiedbyUser = true;\r\n            if (scope.timePicker == true) {\r\n                if (scope.convertIntoUTC || timeZoneOffset != 20) {\r\n                    // that means the date will be saved in UTC Format\r\n                    scope.ngModel = moment(timestamp * 1000).add((timeZoneOffset * -60), 'minute').format('YYYY-MM-DDTHH:mm:ss');  //'\\/Date(' + ((timestamp - (moment().zone() * 60)) * 1000) + ')\\/';\r\n                } else {\r\n                    //This case is applied for Sourcing. because of the converstion happed before saving.\r\n                    scope.ngModel = '\\/Date(' + (timestamp * 1000) + ')\\/';\r\n            }\r\n            }\r\n            else {\r\n                // hooking a fixed time to fix the flipping issues.\r\n                // if (scope.convertIntoUTC) {\r\n                //scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                //}else\r\n                //{\r\n                //    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                //}\r\n\r\n                if (timeZoneOffset != 20) {\r\n                    scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                } else {\r\n                    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n            }\r\n        }\r\n        }\r\n\r\n\r\n        var createDatePicker = function (scope, element, ngModelCtrl) {\r\n            setTimeout(function () {\r\n                var picker = element.find('#' + scope.textfieldId);\r\n                var callApplyFuncFlag = true;\r\n                function setDateFormate(datePar) {\r\n                    updateNgModel(scope, datePar.unix());\r\n                    ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    scope.$apply();\r\n                    $timeout(function () {\r\n                        // if (scope.doesContainDateString) {\r\n\r\n                        //} else {\r\n                        //    if (scope.isValueDateObj) {\r\n                        //        var tempDate = datePar.format();\r\n                        //        scope.ngModel = new Date(tempDate);\r\n                        //    } else {\r\n                        //        scope.ngModel = (datePar.unix() * 1000);\r\n                        //    }\r\n                        //}\r\n                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        scope.isDateBlank = false;                        \r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({ $event: { date: scope.ngModel } });\r\n                    }\r\n                        \r\n                    })\r\n            }\r\n                var minDate = angular.isDefined(scope.min) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(scope.dateFormat) : '';\r\n                var maxDate = angular.isDefined(scope.max) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(scope.dateFormat) : '';\r\n\r\n                var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                var pickerObj = picker.daterangepicker({\r\n                    \"singleDatePicker\": true,\r\n                    \"showDropdowns\": true,\r\n                    \"timePicker\": scope.datetimePicker,\r\n                    \"timePicker24Hour\": timePicker24Hour,\r\n                    \"timePickerIncrement\": timePickerIncrement,\r\n                    \"autoApply\": false,\r\n                    \"opens\": \"right\",\r\n                    \"drops\": \"down\",\r\n                    \"minDate\": minDate,\r\n                    \"maxDate\": maxDate,\r\n                    \"autoUpdateInput\": false,\r\n                    \"locale\": {\r\n                        \"format\": scope.dateFormat,\r\n                        'cancelLabel': $translate.instant('cancelBtn'),\r\n                        'applyLabel': $translate.instant('applyBtn')\r\n                        }\r\n                        }, function (start, end, label) {\r\n                    callApplyFuncFlag = false;\r\n                    setDateFormate(start);\r\n                }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                    setPreviousDate(pickerObj.element.val());\r\n                    var pos = pickerObj.container.offset(),\r\n                        wHeight = window.innerHeight,\r\n                        srTop = $(window).scrollTop();\r\n                    if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                        pickerObj.drops = \"up\";\r\n                        pickerObj.move();\r\n                    } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                        pickerObj.drops = \"down\";\r\n                        pickerObj.move();\r\n                }\r\n                }).data(\"daterangepicker\");\r\n\r\n                picker.on('apply.daterangepicker', function (ev, pickerObj) {\r\n                    if (callApplyFuncFlag) {\r\n                        setDateFormate(pickerObj.startDate)\r\n                }\r\n                    callApplyFuncFlag = true;\r\n                    pickerObj.autoUpdateInput = true;\r\n                    pickerObj.updateElement();\r\n                    pickerObj.autoUpdateInput = false;\r\n                    setPreviousDate(pickerObj.element.val());\r\n                    setSelectedDate('\\/Date(' + ((pickerObj.startDate.unix() * 1000) + 43200000) + ')\\/');\r\n                });\r\n\r\n                if (scope.isDateBlank) {\r\n                    picker.val('');\r\n                    scope.ngModel = \"\";\r\n                    // WS-2072\r\n                    //ngModelCtrl.$setViewValue('');\r\n\r\n            };\r\n            });\r\n        }\r\n\r\n        var getDisplayData = function (data, scope) {\r\n            if (data == undefined || data == null || data == '') {\r\n                return '';\r\n        }\r\n            var str = scope.ndisplayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                            evalResult = eval('data.' + childSplit[k]);\r\n                            evaluatedKeysCounter++;\r\n                            if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                evalResult = '';\r\n                                nullKeysCounter++;\r\n                        }\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                    }\r\n                }\r\n            }\r\n                if (evaluatedKeysCounter == nullKeysCounter) {\r\n                    str = '';\r\n            }\r\n        }\r\n            catch (e) { }\r\n            return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n        }\r\n\r\n            function debounce(func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n            };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n\r\n        var service = {\r\n                buildTemplate: buildTemplate,\r\n                setActiveClass: setActiveClass,\r\n                updateTextFieldClass: updateTextFieldClass,\r\n                checkIfActive: checkIfActive,\r\n                validateRules: validateRules,\r\n                checkRule: checkRule,\r\n                updateTextValue: updateTextValue,\r\n                debounce: debounce,\r\n                updateDateClass: updateDateClass,\r\n                assignDateEvents: assignDateEvents,\r\n                getFormattedData: getFormattedData,\r\n                toUTC: toUTC,\r\n                getGridFormatToTimestamp: getGridFormatToTimestamp,\r\n                createDatePicker: createDatePicker,\r\n                updateDateValue: updateDateValue,\r\n                updateAutocompleteValue: updateAutocompleteValue,\r\n                getDisplayData: getDisplayData,\r\n                assignAutocompleteEvents: assignAutocompleteEvents,\r\n                modal: modal,\r\n                setSelectedDate: setSelectedDate,\r\n                getSelectedDate: getSelectedDate,\r\n                setPreviousDate: setPreviousDate,\r\n                getPreviousDate: getPreviousDate\r\n        };\r\n\r\n        return service;\r\n    }\r\n\r\n    (function ($) {\r\n\r\n        $.extend({\r\n\r\n                debounce: function (fn, timeout, invokeAsap, ctx) {\r\n\r\n                if (arguments.length == 3 && typeof invokeAsap != 'boolean') {\r\n                    ctx = invokeAsap;\r\n                    invokeAsap = false;\r\n                }\r\n\r\n                var timer;\r\n\r\n                return function () {\r\n\r\n                    var args = arguments;\r\n                    ctx = ctx || this;\r\n\r\n                    invokeAsap && !timer && fn.apply(ctx, args);\r\n\r\n                    clearTimeout(timer);\r\n\r\n                    timer = setTimeout(function () {\r\n                        !invokeAsap && fn.apply(ctx, args);\r\n                        timer = null;\r\n                    }, timeout);\r\n\r\n                };\r\n\r\n        },\r\n\r\n                throttle: function (fn, timeout, ctx) {\r\n\r\n                var timer, args, needInvoke;\r\n\r\n                return function () {\r\n\r\n                    args = arguments;\r\n                    needInvoke = true;\r\n                    ctx = ctx || this;\r\n\r\n                    if (!timer) {\r\n                        (function () {\r\n                            if (needInvoke) {\r\n                                fn.apply(ctx, args);\r\n                                needInvoke = false;\r\n                                timer = setTimeout(arguments.callee, timeout);\r\n                            }\r\n                            else {\r\n                                timer = null;\r\n                        }\r\n                        })();\r\n                }\r\n\r\n                };\r\n\r\n        }\r\n\r\n        });\r\n\r\n    })(jQuery);\r\n    angular.module('SMART2').directive('smartCharacterCount', [function () {\r\n        return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                if (parseInt(attrs.smartCharacterCount) > -1) {\r\n                    element.attr('length', attrs.smartCharacterCount);\r\n                    element.characterCounter();\r\n                }\r\n        }\r\n    }\r\n    }]);\r\n\r\n})();","/**\r\n*  Ajax Autocomplete for jQuery, version 1.2.24\r\n*  (c) 2015 Tomas Kirda\r\n*\r\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\r\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\r\n*/\r\n\r\n/*jslint  browser: true, white: true, plusplus: true, vars: true */\r\n/*global define, window, document, jQuery, exports, require */\r\n\r\n// Expose plugin as an AMD module if AMD loader is present:\r\n(function (factory) {\r\n    'use strict';\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(['jquery'], factory);\r\n    } else if (typeof exports === 'object' && typeof require === 'function') {\r\n        // Browserify\r\n        factory(require('jquery'));\r\n    } else {\r\n        // Browser globals\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n\r\n    var getCompiledOption = function (str, option) {\r\n        try {\r\n            //var keys = Object.keys(suggestion);\r\n\r\n            //for(var i=0; i<keys.length; i++) {\r\n            //    if(suggestion.hasOwnProperty(keys[i])) {\r\n            //        str = str.replace(new RegExp(\"{\"+keys[i]+\"}\", \"ig\"), suggestion[keys[i]]);\r\n            //    }\r\n            //}\r\n\r\n            var parentSplit = str.split('{');\r\n            for (var i = 0; i < parentSplit.length; i++) {\r\n                var childSplit = parentSplit[i].split('}');\r\n                for (var j = 0; j < childSplit.length; j++) {\r\n                    if (childSplit[j].indexOf('.') > 0 || option.hasOwnProperty(childSplit[j])) {\r\n                        str = str.replace(new RegExp(\"{\" + childSplit[j] + \"}\", \"ig\"), eval('option.' + childSplit[j]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch(e) {}\r\n        return str;\r\n    };\r\n\r\n    var\r\n        utils = (function () {\r\n            return {\r\n                escapeRegExChars: function (value) {\r\n                    return value.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n                },\r\n                createNode: function (containerClass) {\r\n                    var div = document.createElement('div');\r\n                    div.className = containerClass;\r\n                    div.style.position = 'absolute';\r\n                    div.style.display = 'none';\r\n                    div.onclick = \"event.stopPropagation()\";\r\n                    div.addEventListener('click', function () {\r\n                        event.stopPropagation();\r\n                    });\r\n                    return div;\r\n                }\r\n            };\r\n        }()),\r\n\r\n        keys = {\r\n            ESC: 27,\r\n            TAB: 9,\r\n            RETURN: 13,\r\n            LEFT: 37,\r\n            UP: 38,\r\n            RIGHT: 39,\r\n            DOWN: 40\r\n        };\r\n\r\n    function Autocomplete(el, options) {\r\n        var noop = function () { },\r\n            that = this,\r\n            defaults = {\r\n                ajaxSettings: {},\r\n                autoSelectFirst: false,\r\n                appendTo: document.body,\r\n                serviceUrl: null,\r\n                lookup: null,\r\n                onSelect: null,\r\n                width: 'auto',\r\n                minChars: 1,\r\n                maxHeight: 300,\r\n                deferRequestBy: 0,\r\n                params: {},\r\n                formatResult: Autocomplete.formatResult,\r\n                delimiter: null,\r\n                zIndex: 9999,\r\n                type: 'GET',\r\n                noCache: false,\r\n                onSearchStart: noop,\r\n                onSearchComplete: noop,\r\n                onSearchError: noop,\r\n                preserveInput: false,\r\n                containerClass: 'autocomplete-suggestions',\r\n                tabDisabled: false,\r\n                dataType: 'text',\r\n                currentRequest: null,\r\n                triggerSelectOnValidInput: true,\r\n                preventBadQueries: true,\r\n                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {\r\n                    //  Added by Sushant\r\n                    try {\r\n                        var str = '';\r\n                        for (var i = 0; i < that.filterKeys.length; i++) {\r\n                            str = str + eval('suggestion.' + that.filterKeys[i]).toLowerCase().trim() + ' ';\r\n                        }\r\n                        str = str.trim();\r\n                    }\r\n                    catch (e) { }\r\n                    return str.indexOf(queryLowerCase) > -1;\r\n                },\r\n                paramName: 'query',\r\n                transformResult: function (response) {\r\n                    return typeof response === 'string' ? $.parseJSON(response) : response;\r\n                },\r\n                showNoSuggestionNotice: false,\r\n                noSuggestionNotice: 'No results',\r\n                orientation: 'bottom',\r\n                forceFixPosition: false,\r\n                multiselect: false,\r\n                showLookup: false,\r\n                addnew: false,\r\n                loading: false\r\n            };\r\n\r\n        // Shared variables:\r\n        that.element = el;\r\n        that.el = $(el);\r\n        that.suggestions = [];\r\n        that.badQueries = [];\r\n        that.selectedIndex = -1;\r\n        that.currentValue = that.element.value;\r\n        that.intervalId = 0;\r\n        that.cachedResponse = {};\r\n        that.onChangeInterval = null;\r\n        that.onChange = null;\r\n        that.isLocal = false;\r\n        that.suggestionsContainer = null;\r\n        that.noSuggestionsContainer = null;\r\n        that.options = $.extend({}, defaults, options);\r\n        that.classes = {\r\n            selected: 'autocomplete-selected',\r\n            suggestion: 'autocomplete-suggestion'\r\n        };\r\n        that.hint = null;\r\n        that.hintValue = '';\r\n        that.selection = null;\r\n\r\n        //  Added by Sushant\r\n        that.displayKey = options.displayKey ? options.displayKey : 'value';\r\n        that.filterKeys = options.filterKeys ? options.filterKeys : [that.displayKey];\r\n        that.optionFormat = options.optionFormat ? options.optionFormat : '{' + that.displayKey + '}';\r\n\r\n        that.setLookup = function (lookup) {\r\n            that.options.lookup = lookup;\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n            }\r\n        };\r\n        that.setLoading = function (flag) {\r\n            that.options.loading = flag;\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n            }\r\n        };\r\n\r\n        // Initialize and set options:\r\n        that.initialize();\r\n        that.setOptions(options);\r\n\r\n        //if (!that.options.addnew && !that.options.showLookup) {\r\n        //    that.onValueChange();\r\n        //}\r\n        if ($(that.element).is(\":focus\")) {\r\n            that.onValueChange();\r\n            that.suggest();\r\n        }\r\n    }\r\n\r\n    Autocomplete.utils = utils;\r\n    function isHTML(str) {\r\n        var a = document.createElement('div');\r\n        a.innerHTML = str;\r\n        for (var c = a.childNodes, i = c.length; i--;) {\r\n            if (c[i].nodeType == 1) return true;\r\n        }\r\n        return false;\r\n    }\r\n    $.Autocomplete = Autocomplete;\r\n    Autocomplete.formatResult = function (suggestion, currentValue, optionFormat) {\r\n        var str = suggestion.optionFormat ? suggestion.optionFormat : optionFormat;\r\n        str = getCompiledOption(str, suggestion);\r\n        if (isHTML(str)) {\r\n            return str;\r\n        }\r\n        var reg = new RegExp(currentValue, 'gi');\r\n        return str.replace(reg, function (val) { return '<strong>' + val + '</strong>' });\r\n    };\r\n\r\n    Autocomplete.prototype = {\r\n\r\n        killerFn: null,\r\n\r\n        initialize: function () {\r\n            var that = this,\r\n                suggestionSelector = '.' + that.classes.suggestion,\r\n                selected = that.classes.selected,\r\n                options = that.options,\r\n                container;\r\n\r\n            // Remove autocomplete attribute to prevent native suggestions:\r\n            that.element.setAttribute('autocomplete', 'off');\r\n\r\n            that.killerFn = function (e) {\r\n                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {\r\n                    that.killSuggestions();\r\n                    that.disableKillerFn();\r\n                }\r\n            };\r\n\r\n            // html() deals with many types: htmlString or Element or Array or jQuery\r\n            that.noSuggestionsContainer = $('<div class=\"autocomplete-no-suggestion\"></div>')\r\n                                          .html(this.options.noSuggestionNotice).get(0);\r\n\r\n            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\r\n\r\n            container = $(that.suggestionsContainer);\r\n\r\n            container.appendTo(options.appendTo);\r\n\r\n            // Only set width if it was provided:\r\n            if (options.width !== 'auto') {\r\n                container.width(options.width);\r\n            }\r\n\r\n            // Listen for mouse over event on suggestions list:\r\n            container.on('mouseover.autocomplete', suggestionSelector, function () {\r\n                that.activate($(this).data('index'));\r\n            });\r\n\r\n            // Deselect active element when mouse leaves suggestions container:\r\n            container.on('mouseout.autocomplete', function () {\r\n                that.selectedIndex = -1;\r\n                container.children('.' + selected).removeClass(selected);\r\n            });\r\n\r\n            // Listen for click event on suggestions list:\r\n            container.on('click.autocomplete', suggestionSelector, function () {\r\n                that.select($(this).data('index'));\r\n               // $(that.element).focus(); comment this line due to text overwrapping issue in autocomplete.\r\n            });\r\n\r\n            that.fixPositionCapture = function () {\r\n                if (that.visible) {\r\n                    that.fixPosition();\r\n                }\r\n            };\r\n\r\n            $(window).on('resize.autocomplete', that.fixPositionCapture);\r\n\r\n            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });\r\n            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('blur.autocomplete', function () { that.onBlur(); });\r\n            that.el.on('focus.autocomplete', function (e) { that.onFocus(); });\r\n            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('input.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('click.autocomplete', function (e) { e.stopPropagation(); });\r\n        },\r\n\r\n        onFocus: function () {\r\n            var that = this;\r\n            that.fixPosition();\r\n            //if (that.options.minChars === 0 && that.el.val().length === 0) {\r\n            //    that.onValueChange();\r\n            //}\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n                that.suggest();\r\n            }\r\n        },\r\n\r\n        onBlur: function () {\r\n            if ($(document.activeElement).hasClass('scroll-inner-wrapp')) {\r\n                return;\r\n            }\r\n            var that = this;\r\n            //if(that.suggestions.length > 0 && that.suggestions[0].value.toLowerCase() === that.el.val().toLowerCase().trim()) {\r\n            //    that.hide();\r\n            //    that.onSelect(0);\r\n            //}\r\n            if (that.selectedIndex === -1) {\r\n                that.hide();\r\n         //       return;\r\n           }\r\n            this.enableKillerFn();\r\n        },\r\n        \r\n        abortAjax: function () {\r\n            var that = this;\r\n            if (that.currentRequest) {\r\n                that.currentRequest.abort();\r\n                that.currentRequest = null;\r\n            }\r\n        },\r\n\r\n        setOptions: function (suppliedOptions) {\r\n            var that = this,\r\n                options = that.options;\r\n\r\n            $.extend(options, suppliedOptions);\r\n\r\n            that.isLocal = $.isArray(options.lookup);\r\n\r\n            if (that.isLocal) {\r\n                options.lookup = that.verifySuggestionsFormat(options.lookup);\r\n            }\r\n\r\n            options.orientation = that.validateOrientation(options.orientation, 'bottom');\r\n\r\n            // Adjust height, width and z-index:\r\n            $(that.suggestionsContainer).css({\r\n                'max-height': options.maxHeight + 'px',\r\n                'width': options.width + 'px',\r\n                'z-index': options.zIndex\r\n            });\r\n        },\r\n        \r\n        clearCache: function () {\r\n            this.cachedResponse = {};\r\n            this.badQueries = [];\r\n        },\r\n\r\n        clear: function () {\r\n            this.clearCache();\r\n            this.currentValue = '';\r\n            this.suggestions = [];\r\n        },\r\n\r\n        disable: function () {\r\n            var that = this;\r\n            that.disabled = true;\r\n            clearInterval(that.onChangeInterval);\r\n            that.abortAjax();\r\n        },\r\n\r\n        enable: function () {\r\n            this.disabled = false;\r\n        },\r\n\r\n        fixPosition: function () {\r\n            // Use only when container has already its content\r\n\r\n            var that = this,\r\n                $container = $(that.suggestionsContainer),\r\n                containerParent = $container.parent().get(0);\r\n            // Fix position automatically when appended to body.\r\n            // In other cases force parameter must be given.\r\n            if (containerParent !== document.body && !that.options.forceFixPosition) {\r\n                return;\r\n            }\r\n\r\n            // Choose orientation\r\n            var orientation = that.options.orientation,\r\n                containerHeight = $container.outerHeight(),\r\n                height = that.el.outerHeight(),\r\n                offset = that.el.offset(),\r\n                styles = { 'top': offset.top, 'left': offset.left };\r\n\r\n            if (orientation === 'auto') {\r\n                var viewPortHeight = $(window).height(),\r\n                    scrollTop = $(window).scrollTop(),\r\n                    topOverflow = -scrollTop + offset.top - containerHeight,\r\n                    bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);\r\n\r\n                orientation = (Math.max(topOverflow, bottomOverflow) === topOverflow) ? 'top' : 'bottom';\r\n            }\r\n\r\n            if (orientation === 'top') {\r\n                styles.top += -containerHeight;\r\n            } else {\r\n                styles.top += height;\r\n            }\r\n\r\n            // If container is not positioned to body,\r\n            // correct its position using offset parent offset\r\n            if(containerParent !== document.body) {\r\n                var opacity = $container.css('opacity'),\r\n                    parentOffsetDiff;\r\n\r\n                    if (!that.visible){\r\n                        $container.css('opacity', 0).show();\r\n                    }\r\n\r\n                parentOffsetDiff = $container.offsetParent().offset();\r\n                styles.top -= parentOffsetDiff.top;\r\n                styles.left -= parentOffsetDiff.left;\r\n\r\n                if (!that.visible){\r\n                    $container.css('opacity', opacity).hide();\r\n                }\r\n            }\r\n\r\n            // -2px to account for suggestions border.\r\n            if (that.options.width === 'auto') {\r\n                styles.width = (that.el.outerWidth() - 2) + 'px';\r\n            }\r\n\r\n            $container.css(styles);\r\n        },\r\n\r\n        enableKillerFn: function () {\r\n            var that = this;\r\n            $(document).on('click.autocomplete', that.killerFn);\r\n        },\r\n\r\n        disableKillerFn: function () {\r\n            var that = this;\r\n            $(document).off('click.autocomplete', that.killerFn);\r\n        },\r\n\r\n        killSuggestions: function () {\r\n            var that = this;\r\n            that.stopKillSuggestions();\r\n            that.intervalId = window.setInterval(function () {\r\n                if (that.visible) {\r\n                    that.el.val(that.currentValue);\r\n                    that.hide();\r\n                }\r\n                \r\n                that.stopKillSuggestions();\r\n            }, 50);\r\n        },\r\n\r\n        stopKillSuggestions: function () {\r\n            window.clearInterval(this.intervalId);\r\n        },\r\n\r\n        isCursorAtEnd: function () {\r\n            var that = this,\r\n                valLength = that.el.val().length,\r\n                selectionStart = that.element.selectionStart,\r\n                range;\r\n\r\n            if (typeof selectionStart === 'number') {\r\n                return selectionStart === valLength;\r\n            }\r\n            if (document.selection) {\r\n                range = document.selection.createRange();\r\n                range.moveStart('character', -valLength);\r\n                return valLength === range.text.length;\r\n            }\r\n            return true;\r\n        },\r\n\r\n        onKeyPress: function (e) {\r\n            var that = this;\r\n\r\n            // If suggestions are hidden and user presses arrow down, display suggestions:\r\n            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\r\n                that.suggest();\r\n                return;\r\n            }\r\n\r\n            if (that.disabled || !that.visible) {\r\n                return;\r\n            }\r\n\r\n            switch (e.which) {\r\n                case keys.ESC:\r\n                    that.el.val(that.currentValue);\r\n                    that.hide();\r\n                    break;\r\n                case keys.RIGHT:\r\n                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\r\n                        that.selectHint();\r\n                        break;\r\n                    }\r\n                    return;\r\n                case keys.TAB:\r\n                    if (that.hint && that.options.onHint) {\r\n                        that.selectHint();\r\n                        return;\r\n                    }\r\n                    if (that.suggestions.length > 0 && that.currentValue.length >= that.options.minChars && that.selectedIndex === -1 && that.currentValue.length > 0) {\r\n                        that.selectedIndex = 0;\r\n                    }\r\n                    if (that.selectedIndex === -1) {\r\n                        that.hide();\r\n                        return;\r\n                    }\r\n                    that.select(that.selectedIndex);\r\n                    if (that.options.tabDisabled === false) {\r\n                        return;\r\n                    }\r\n                    break;\r\n                case keys.RETURN:\r\n                    if (that.selectedIndex === -1) {\r\n                        that.hide();\r\n                        return;\r\n                    }\r\n                    that.select(that.selectedIndex);\r\n                    break;\r\n                case keys.UP:\r\n                    that.moveUp();\r\n                    break;\r\n                case keys.DOWN:\r\n                    that.moveDown();\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            // Cancel event if function did not return:\r\n            e.stopImmediatePropagation();\r\n            e.preventDefault();\r\n        },\r\n\r\n        onKeyUp: function (e) {\r\n            var that = this;\r\n\r\n            if (that.disabled) {\r\n                return;\r\n            }\r\n\r\n            switch (e.which) {\r\n                case keys.UP:\r\n                case keys.DOWN:\r\n                    return;\r\n            }\r\n\r\n            clearInterval(that.onChangeInterval);\r\n\r\n            if (that.currentValue !== that.el.val()) {\r\n                that.findBestHint();\r\n                if (that.options.deferRequestBy > 0) {\r\n                    // Defer lookup in case when value changes very quickly:\r\n                    that.onChangeInterval = setInterval(function () {\r\n                        that.onValueChange();\r\n                    }, that.options.deferRequestBy);\r\n                } else {\r\n                    that.onValueChange();\r\n                }\r\n            }\r\n        },\r\n\r\n        onValueChange: function () {\r\n            var that = this,\r\n                options = that.options,\r\n                value = that.el.val(),\r\n                query = that.getQuery(value);\r\n\r\n            if (that.selection && that.currentValue !== query) {\r\n                that.selection = null;\r\n                (options.onInvalidateSelection || $.noop).call(that.element);\r\n            }\r\n\r\n            clearInterval(that.onChangeInterval);\r\n            that.currentValue = value;\r\n            that.selectedIndex = -1;\r\n\r\n            // Check existing suggestion for the match before proceeding:\r\n            if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {\r\n                that.select(0);\r\n                return;\r\n            }\r\n\r\n            if (query.length < options.minChars) {\r\n                //Suggestion will not hide \r\n                if (!(that.options.showLookup || that.options.addnew))\r\n                    that.hide();\r\n            } else {\r\n                that.getSuggestions(query);\r\n            }\r\n        },\r\n\r\n        isExactMatch: function (query) {\r\n            return false;\r\n        },\r\n\r\n        getQuery: function (value) {\r\n            var delimiter = this.options.delimiter,\r\n                parts;\r\n\r\n            if (!delimiter) {\r\n                return value;\r\n            }\r\n            parts = value.split(delimiter);\r\n            return $.trim(parts[parts.length - 1]);\r\n        },\r\n\r\n        getSuggestionsLocal: function (query) {\r\n            var that = this,\r\n                options = that.options,\r\n                queryLowerCase = query.toLowerCase(),\r\n                filter = options.lookupFilter,\r\n                limit = parseInt(options.lookupLimit, 10),\r\n                data;\r\n\r\n            data = {\r\n                suggestions: $.grep(options.lookup, function (suggestion) {\r\n                    //  If suggestion is set to filterable false, it will not get filtered\r\n                    if ((suggestion.filterable != null || suggestion.filterable != undefined) && suggestion.filterable === false) {\r\n                        return true;\r\n                    }\r\n                    return filter(suggestion, query, queryLowerCase);\r\n                })\r\n            };\r\n            \r\n            if (limit && data.suggestions.length > limit) {\r\n                data.suggestions = data.suggestions.slice(0, limit);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        getSuggestions: function (q) {\r\n            var response,\r\n                that = this,\r\n                options = that.options,\r\n                serviceUrl = options.serviceUrl,\r\n                params,\r\n                cacheKey,\r\n                ajaxSettings;\r\n\r\n            options.params[options.paramName] = q;\r\n            params = options.ignoreParams ? null : options.params;\r\n\r\n            if (options.onSearchStart.call(that.element, options.params) === false) {\r\n                return;\r\n            }\r\n\r\n            if ($.isFunction(options.lookup)){\r\n                options.lookup(q, function (data) {\r\n                    that.suggestions = data.suggestions;\r\n                    that.suggest();\r\n                    options.onSearchComplete.call(that.element, q, data.suggestions);\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (that.isLocal) {\r\n                response = that.getSuggestionsLocal(q);\r\n            } else {\r\n                if ($.isFunction(serviceUrl)) {\r\n                    serviceUrl = serviceUrl.call(that.element, q);\r\n                }\r\n                cacheKey = serviceUrl + '?' + $.param(params || {});\r\n                response = that.cachedResponse[cacheKey];\r\n            }\r\n\r\n            if (response && $.isArray(response.suggestions)) {\r\n                that.suggestions = response.suggestions;\r\n                that.suggest();\r\n                options.onSearchComplete.call(that.element, q, response.suggestions);\r\n            } else if (!that.isBadQuery(q)) {\r\n                that.abortAjax();\r\n\r\n                ajaxSettings = {\r\n                    url: serviceUrl,\r\n                    data: params,\r\n                    type: options.type,\r\n                    dataType: options.dataType\r\n                };\r\n\r\n                $.extend(ajaxSettings, options.ajaxSettings);\r\n\r\n                that.currentRequest = $.ajax(ajaxSettings).done(function (data) {\r\n                    var result;\r\n                    that.currentRequest = null;\r\n                    result = options.transformResult(data, q);\r\n                    that.processResponse(result, q, cacheKey);\r\n                    options.onSearchComplete.call(that.element, q, result.suggestions);\r\n                }).fail(function (jqXHR, textStatus, errorThrown) {\r\n                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\r\n                });\r\n            } else {\r\n                options.onSearchComplete.call(that.element, q, []);\r\n            }\r\n        },\r\n\r\n        isBadQuery: function (q) {\r\n            if (!this.options.preventBadQueries){\r\n                return false;\r\n            }\r\n\r\n            var badQueries = this.badQueries,\r\n                i = badQueries.length;\r\n\r\n            while (i--) {\r\n                if (q.indexOf(badQueries[i]) === 0) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        hide: function () {\r\n            var that = this,\r\n                container = $(that.suggestionsContainer);\r\n\r\n            if ($.isFunction(that.options.onHide) && that.visible) {\r\n                that.options.onHide.call(that.element, container);\r\n            }\r\n\r\n            that.visible = false;\r\n                that.selectedIndex = -1;\r\n                clearInterval(that.onChangeInterval);\r\n                $(that.suggestionsContainer).hide();\r\n            that.signalHint(null);\r\n        },\r\n\r\n        suggest: function () {\r\n            //Skip condition when showlookup and addNew flag true\r\n            if (!(this.options.showLookup || this.options.addnew)) {\r\n                if (this.suggestions.length === 0) {\r\n                    if (this.options.showNoSuggestionNotice) {\r\n                        this.noSuggestions();\r\n                    } else {\r\n                        this.hide();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            var that = this,\r\n                options = that.options,\r\n                groupBy = options.groupBy,\r\n                formatResult = options.formatResult,\r\n                value = that.getQuery(that.currentValue),\r\n                className = that.classes.suggestion,\r\n                classSelected = that.classes.selected,\r\n                container = $(that.suggestionsContainer),\r\n                noSuggestionsContainer = $(that.noSuggestionsContainer),\r\n                beforeRender = options.beforeRender,\r\n                html = '',\r\n                category,\r\n                formatGroup = function (suggestion, index) {\r\n                        var currentCategory = suggestion.data[groupBy];\r\n\r\n                        if (category === currentCategory){\r\n                            return '';\r\n                        }\r\n\r\n                        category = currentCategory;\r\n\r\n                        return '<div class=\"autocomplete-group\"><strong>' + category + '</strong></div>';\r\n                    };\r\n\r\n            if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {\r\n                that.select(0);\r\n                return;\r\n            }\r\n\r\n\r\n            var formattedResult, formattedTitle;\r\n\r\n            //Loader HTMLs\r\n            var loaderHtmls = (that.options.loading && that.options.minChars <= that.currentValue.length) ? '<div class=\"autocomplete-suggestion center\">\\\r\n                    <div class=\"preloader-wrapper x-small field-suffix-loader active\">\\\r\n                        <div class=\"spinner-layer spinner-blue-only\">\\\r\n                            <div class=\"circle-clipper circle-clipper--x left\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                            <div class=\"gap-patch\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                            <div class=\"circle-clipper circle-clipper--x right\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                        </div>\\\r\n                    </div>\\\r\n                </div>':'';\r\n\r\n            // Build suggestions inner HTML:\r\n            var totalIndex = 0;\r\n            var innerWrapMaxHeight = (that.options.addnew == true || that.options.showLookup == true) ? that.options.maxHeight - 40 : that.options.maxHeight - 2;\r\n            html += \"<div class='scroll-inner-wrapp' style='max-height:\" + innerWrapMaxHeight + \"px;'>\";\r\n            if (!that.options.loading) {\r\n                $.each(that.suggestions, function (i, suggestion) {\r\n                    if (groupBy) {\r\n                        html += formatGroup(suggestion, value, i);\r\n                    }\r\n                    formattedResult = formatResult(suggestion, value, that.optionFormat);\r\n                    try {\r\n                        formattedTitle = escape(formattedResult);\r\n                        formattedTitle = unescape(formattedTitle.replace(/%28/g, 'openingroundbracket').replace(/%29/g, 'closingroundbracket'));\r\n                        //formattedTitle = $(formattedTitle).text() ? $(formattedTitle).text() : formattedTitle;\r\n                        formattedTitle = formattedTitle.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '');\r\n                    }\r\n                    catch (e) { }\r\n                    formattedTitle = formattedTitle.replace(/openingroundbracket/g, '(').replace(/closingroundbracket/g, ')');\r\n                    html += '<div class=\"' + className + '\" data-index=\"' + i + '\" title=\"' + unescape(formattedTitle) + '\">' + formattedResult + '</div>';\r\n                    totalIndex = i + 1;\r\n                });\r\n            } else {\r\n                html += loaderHtmls;\r\n            }\r\n            html += \"</div>\";\r\n\r\n            var noSuggestionsMessage = (that.suggestions.length < 1 && that.options.showNoSuggestionNotice && that.options.minChars <= that.currentValue.length) ? $('<i></i>').append(that.noSuggestionsContainer).html() : '';\r\n            if (that.options.addnew == true && that.options.showLookup == true) {\r\n                html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                html += '<div class=\"typeaHeade-add-new blue-text autocomplete-suggestion-half ' + className + '\" data-index=\"' + totalIndex + '\" title=\"' + that.options.addNewKey + '\"><i class=\"icon icon-fix-overlay iconSmall\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"' + that.options.addNewKey + '\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i></div>';\r\n                html += '<div class=\"typeaHeade-open-lookup autocomplete-suggestion-half ' + className + '\" data-index=\"' + ++totalIndex + '\"><a href=\"javascript:void(0)\" class=\"waves-effect waves-light\">' + that.options.showLookupKey + '</a></div>';\r\n            } else {\r\n                if (that.options.addnew == true) {\r\n                    html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                    html += '<div class=\"typeaHeade-add-new width-adj-to blue-text ' + className + '\" data-index=\"' + totalIndex + '\" title=\"' + that.options.addNewKey + '\"><i class=\"icon icon-fix-overlay iconSmall\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"' + that.options.addNewKey + '\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i></div>';\r\n            \t}\r\n                if (that.options.showLookup == true) {\r\n                    html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                    html += '<div class=\"typeaHeade-open-lookup width-adj-to ' + className + '\" data-index=\"' + ++totalIndex + '\"><a href=\"javascript:void(0)\" class=\"waves-effect waves-light\">' + that.options.showLookupKey + '</a></div>';\r\n            \t}\r\n            }\r\n            \r\n            this.adjustContainerWidth();\r\n\r\n            noSuggestionsContainer.detach();\r\n            container.html(html);\r\n\r\n            if ($.isFunction(beforeRender)) {\r\n                beforeRender.call(that.element, container);\r\n            }\r\n\r\n            that.fixPosition();\r\n            container.show();\r\n\r\n            // Select first value by default:\r\n            if (options.autoSelectFirst) {\r\n                that.selectedIndex = 0;\r\n                container.scrollTop(0);\r\n                container.children('.' + className).first().addClass(classSelected);\r\n            }\r\n\r\n            that.visible = true;\r\n            that.findBestHint();\r\n        },\r\n\r\n        noSuggestions: function() {\r\n             var that = this,\r\n                 container = $(that.suggestionsContainer),\r\n                 noSuggestionsContainer = $(that.noSuggestionsContainer);\r\n\r\n            this.adjustContainerWidth();\r\n\r\n            // Some explicit steps. Be careful here as it easy to get\r\n            // noSuggestionsContainer removed from DOM if not detached properly.\r\n            noSuggestionsContainer.detach();\r\n            container.empty(); // clean suggestions if any\r\n            container.append(noSuggestionsContainer);\r\n\r\n            that.fixPosition();\r\n\r\n            container.show();\r\n            that.visible = true;\r\n        },\r\n\r\n        adjustContainerWidth: function() {\r\n            var that = this,\r\n                options = that.options,\r\n                width,\r\n                container = $(that.suggestionsContainer);\r\n\r\n            // If width is auto, adjust width before displaying suggestions,\r\n            // because if instance was created before input had width, it will be zero.\r\n            // Also it adjusts if input width has changed.\r\n            // -2px to account for suggestions border.\r\n            if (options.width === 'auto') {\r\n                width = that.el.outerWidth() - 2;\r\n                container.width(width > 0 ? width : 300);\r\n            }\r\n        },\r\n\r\n        findBestHint: function () {\r\n            var that = this,\r\n                value = that.el.val().toLowerCase(),\r\n                bestMatch = null;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            $.each(that.suggestions, function (i, suggestion) {\r\n                var str = suggestion.optionFormat ? suggestion.optionFormat : that.optionFormat;\r\n                str = getCompiledOption(str, suggestion);\r\n                var foundMatch = str.toLowerCase().indexOf(value) === 0;\r\n                if (foundMatch) {\r\n                    bestMatch = suggestion;\r\n                }\r\n                return !foundMatch;\r\n            });\r\n\r\n            that.signalHint(bestMatch);\r\n        },\r\n\r\n        signalHint: function (suggestion) {\r\n            var hintValue = '',\r\n                that = this;\r\n            if (suggestion) {\r\n                var str = suggestion.optionFormat ? suggestion.optionFormat : that.optionFormat;\r\n                str = getCompiledOption(str, suggestion);\r\n                hintValue = that.currentValue + str.substr(that.currentValue.length);\r\n            }\r\n            if (that.hintValue !== hintValue) {\r\n                that.hintValue = hintValue;\r\n                that.hint = suggestion;\r\n                (this.options.onHint || $.noop)(hintValue);\r\n            }\r\n        },\r\n\r\n        verifySuggestionsFormat: function (suggestions) {\r\n            // If suggestions is string array, convert them to supported format:\r\n            if (suggestions.length && typeof suggestions[0] === 'string') {\r\n                return $.map(suggestions, function (value) {\r\n                    return { value: value, data: null };\r\n                });\r\n            }\r\n\r\n            return suggestions;\r\n        },\r\n\r\n        validateOrientation: function(orientation, fallback) {\r\n            orientation = $.trim(orientation || '').toLowerCase();\r\n\r\n            if($.inArray(orientation, ['auto', 'bottom', 'top']) === -1){\r\n                orientation = fallback;\r\n            }\r\n\r\n            return orientation;\r\n        },\r\n\r\n        processResponse: function (result, originalQuery, cacheKey) {\r\n            var that = this,\r\n                options = that.options;\r\n\r\n            result.suggestions = that.verifySuggestionsFormat(result.suggestions);\r\n\r\n            // Cache results if cache is not disabled:\r\n            if (!options.noCache) {\r\n                that.cachedResponse[cacheKey] = result;\r\n                if (options.preventBadQueries && result.suggestions.length === 0) {\r\n                    that.badQueries.push(originalQuery);\r\n                }\r\n            }\r\n\r\n            // Return if originalQuery is not matching current query:\r\n            if (originalQuery !== that.getQuery(that.currentValue)) {\r\n                return;\r\n            }\r\n\r\n            that.suggestions = result.suggestions;\r\n            that.suggest();\r\n        },\r\n\r\n        activate: function (index) {\r\n            var that = this,\r\n                activeItem,\r\n                selected = that.classes.selected,\r\n                container = $(that.suggestionsContainer),\r\n                children = container.find('.' + that.classes.suggestion);\r\n\r\n            container.find('.' + selected).removeClass(selected);\r\n\r\n            that.selectedIndex = index;\r\n\r\n            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\r\n                activeItem = children.get(that.selectedIndex);\r\n                $(activeItem).addClass(selected);\r\n                return activeItem;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        selectHint: function () {\r\n            var that = this,\r\n                i = $.inArray(that.hint, that.suggestions);\r\n\r\n            that.select(i);\r\n        },\r\n\r\n        select: function (i) {\r\n            var that = this;\r\n            if(!that.options.multiselect) //prevent hiding suggetions for multiselect\r\n                that.hide();\r\n            that.onSelect(i);\r\n        },\r\n\r\n        moveUp: function () {\r\n            var that = this;\r\n\r\n            if (that.selectedIndex === -1) {\r\n                return;\r\n            }\r\n\r\n            if (that.selectedIndex === 0) {\r\n                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\r\n                that.selectedIndex = -1;\r\n                that.el.val(that.currentValue);\r\n                that.findBestHint();\r\n                return;\r\n            }\r\n\r\n            that.adjustScroll(that.selectedIndex - 1);\r\n        },\r\n\r\n        moveDown: function () {\r\n            var that = this;\r\n\r\n            if (that.selectedIndex === (that.suggestions.length - 1)) {\r\n                return;\r\n            }\r\n\r\n            that.adjustScroll(that.selectedIndex + 1);\r\n        },\r\n\r\n        adjustScroll: function (index) {\r\n            var that = this,\r\n                activeItem = that.activate(index);\r\n\r\n            if (!activeItem) {\r\n                return;\r\n            }\r\n\r\n            var offsetTop,\r\n                upperBound,\r\n                lowerBound,\r\n                heightDelta = $(activeItem).outerHeight();\r\n\r\n            offsetTop = activeItem.offsetTop;\r\n            upperBound = $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop();\r\n            lowerBound = upperBound + that.options.maxHeight - heightDelta;\r\n\r\n            if (offsetTop < upperBound) {\r\n                $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop(offsetTop);\r\n            } else if (offsetTop > lowerBound) {\r\n                $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop(offsetTop - that.options.maxHeight + heightDelta);\r\n            }\r\n\r\n            if (!that.options.preserveInput) {\r\n                that.el.val(that.getValue(that.suggestions[index].value));\r\n            }\r\n            that.signalHint(null);\r\n        },\r\n\r\n        onSelect: function (index) {\r\n            var that = this;\r\n            //Added new callback for show lookup and Add New\r\n            var getTotalSuggested = that.suggestions.length;\r\n            if (index > getTotalSuggested && that.options.showLookup == true) {\r\n                that.hide();\r\n                if ($.isFunction(that.options.onClickShowLookup)) {\r\n                    that.options.onClickShowLookup.call(that.element, \"ShowLookup\");\r\n                    return;\r\n                }\r\n            }\r\n            if (index == getTotalSuggested && that.options.addnew == true) {\r\n                that.hide();\r\n                if ($.isFunction(that.options.onClickAddNew)) {\r\n                    that.options.onClickAddNew.call(that.element, \"AddNEW\");\r\n                    return;\r\n                }\r\n            }\r\n            var onSelectCallback = that.options.onSelect,\r\n                suggestion = that.suggestions[index];\r\n\r\n            that.currentValue = suggestion.value ? that.getValue(suggestion.value) : that.getValue(suggestion[that.options.displayFormat.slice(1, that.options.displayFormat.length - 1)]);\r\n\r\n            if (that.currentValue !== that.el.val() && !that.options.preserveInput) {\r\n                that.el.val(that.currentValue);\r\n            }\r\n\r\n            that.signalHint(null);\r\n            that.suggestions = [];\r\n            that.selection = suggestion;\r\n\r\n            if ($.isFunction(onSelectCallback)) {\r\n                onSelectCallback.call(that.element, suggestion);\r\n            }\r\n        },\r\n\r\n        getValue: function (value) {\r\n            var that = this,\r\n                delimiter = that.options.delimiter,\r\n                currentValue,\r\n                parts;\r\n\r\n            if (!delimiter) {\r\n                return value;\r\n            }\r\n\r\n            currentValue = that.currentValue;\r\n            parts = currentValue.split(delimiter);\r\n\r\n            if (parts.length === 1) {\r\n                return value;\r\n            }\r\n\r\n            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\r\n        },\r\n\r\n        dispose: function () {\r\n            var that = this;\r\n            that.el.off('.autocomplete').removeData('autocomplete');\r\n            that.disableKillerFn();\r\n            $(window).off('resize.autocomplete', that.fixPositionCapture);\r\n            $(that.suggestionsContainer).remove();\r\n        }\r\n    };\r\n\r\n    // Create chainable jQuery plugin:\r\n    $.fn.autocomplete = $.fn.devbridgeAutocomplete = function (options, args) {\r\n        var dataKey = 'autocomplete';\r\n        // If function invoked without argument return\r\n        // instance of the first matched element:\r\n        if (arguments.length === 0) {\r\n            return this.first().data(dataKey);\r\n        }\r\n\r\n        return this.each(function () {\r\n            var inputElement = $(this),\r\n                instance = inputElement.data(dataKey);\r\n\r\n            if (typeof options === 'string') {\r\n                if (instance && typeof instance[options] === 'function') {\r\n                    instance[options](args);\r\n                }\r\n            } else {\r\n                // If instance already exists, destroy it:\r\n                if (instance && instance.dispose) {\r\n                    instance.dispose();\r\n                }\r\n                instance = new Autocomplete(this, options);\r\n                inputElement.data(dataKey, instance);\r\n            }\r\n        });\r\n    };\r\n    $(document).on('click', function (e) {\r\n        if ($('.autocomplete-suggestions').is(':visible')) {\r\n            $('.autocomplete-suggestions').hide();\r\n        }\r\n    });\r\n}));","(function () {\r\n    'use strict';\r\n    var smartTimeLineID = 0;\r\n    angular.module('SMART2').directive('smartTimeline', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', 'APPCONSTANTS', function ($rootScope, $timeout, $translate, ScrollTo, lookup, APPCONSTANTS) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                readonly: '@',\r\n                dateFormat: '@',\r\n                selectable: '@',\r\n                showCurrentTime: '@',\r\n                zoomMin: '@',\r\n                zoomMax: '@',\r\n                marginSpace: '@',\r\n                onSelect: '&',\r\n                onLoad: '&',\r\n                groupOrder: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var cultureCode = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n                var readonly = (scope.readonly == null || scope.readonly == \"undefined\") ? false : (scope.readonly == 'true') ? true : false;\r\n                var selectable = (scope.selectable == null || scope.selectable == \"undefined\") ? true : (scope.selectable == 'true') ? true : false;\r\n                var showCurrentTime = (angular.isDefined(scope.showCurrentTime)) ? (scope.showCurrentTime == 'true') ? true : false : true;\r\n                scope.ngModel = scope.ngModel ? scope.ngModel : null;\r\n                var defaultMin = 1000 * 60 * 60 * 24, defaultMax = 1000 * 60 * 60 * 24 * 31 * 3;\r\n                var zoomMin = angular.isDefined(scope.zoomMin) ? (scope.zoomMin != \"\") ? parseInt(scope.zoomMin) : defaultMin : defaultMin; // Default 1Day\r\n                var zoomMax = angular.isDefined(scope.zoomMax) ? (scope.zoomMax != \"\") ? parseInt(scope.zoomMax) : defaultMax : defaultMax;  // Default 3Month\r\n                var marginSpace = (scope.marginSpace == null || scope.marginSpace == \"undefined\") ? 20 : parseInt(scope.marginSpace, 10);\r\n                var timeline = null;\r\n                var groupOrderFunc = function (a, b) {\r\n                    if (angular.isDefined(attrs.groupOrder)) {\r\n                        return scope.groupOrder({ $a: a, $b: b });\r\n                    } else {\r\n                        if (angular.isDefined(scope.ngModel[a.id]) && angular.isDefined(scope.ngModel[b.id])) {\r\n                            return scope.ngModel[a.id].lines[0].start - scope.ngModel[b.id].lines[0].start;\r\n                        }\r\n                    }\r\n                };\r\n                scope.timelineID = \"TimeLineId-\" + smartTimeLineID;\r\n                smartTimeLineID++;\r\n                function isTodayInBetween(s, e) {\r\n                    s = parseInt(s);\r\n                    e = parseInt(e);\r\n                    var d = new Date();\r\n                    var c = d.getTime();\r\n                    if (s < c && c < e) { // running \r\n                        return 0;\r\n                    }\r\n                    if (e < c) { // ended\r\n                        return -1;\r\n                    }\r\n                    if (c < s) { // not started\r\n                        return 1;\r\n                    }\r\n                }\r\n                function getAngularDateFormat(format) {\r\n                    return format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                }\r\n                scope.$watch(\"ngModel\", function (newVal) {\r\n                    scope.ngModel = newVal;\r\n                    //var dateFormat = scope.dateFormat ? scope.dateFormat : 'dd/MM/yyyy';\r\n                    scope.getCultureCode = function (culturecode) {\r\n                        switch (culturecode) {\r\n                            case 'en-US':\r\n                                return 'MM/dd/yyyy hh:mm a';\r\n                                break;\r\n                            case 'zh-CN':\r\n                                return 'yyyy-MM-dd hh:mm a';\r\n                                break;\r\n                            case 'zh-CHT':\r\n                                return 'yyyy-MM-dd hh:mm a';\r\n                                break;\r\n                            case 'da-DK':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'de-DE':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'en-AU':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'es-ES':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'fr-FR':\r\n                                return 'yyyy/MM/dd hh:mm a';\r\n                                break;\r\n                            case 'it-IT':\r\n                                return 'yyyy/MM/dd hh:mm a';\r\n                                break;\r\n                            case 'ja-JP':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'ko-KR':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'nl-NL':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'pl-PL':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'pt-PT':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'ru-RU':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'sv-SE ':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'th-TH ':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            default:\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                        }\r\n                    };\r\n\r\n                    var dateFormat = scope.getCultureCode(cultureCode) ? scope.getCultureCode(cultureCode) : 'dd/MM/yyyy hh:mm a';\r\n                    dateFormat = getAngularDateFormat(dateFormat);\r\n                    var groups = [];\r\n                    var items = [];\r\n                    var groupItemPeer = [];\r\n                    function formateData() {\r\n                        moment.locale(cultureCode);\r\n                        groups = [];\r\n                        items = [];\r\n                        var k = 0;\r\n                        for (var i = 0; i < scope.ngModel.length; i++) {\r\n                            groups.push({\r\n                                id: i,\r\n                                content: scope.ngModel[i].title,\r\n                                className: (typeof scope.ngModel[i].className === 'undefined') ? \"\" : scope.ngModel[i].className,\r\n                                style: (typeof scope.ngModel[i].style === 'undefined') ? \"\" : scope.ngModel[i].style\r\n                            });\r\n\r\n                            for (var j = 0; j < scope.ngModel[i].lines.length; j++) {\r\n                                var obj = {\r\n                                    id: k,\r\n                                    group: i\r\n                                }\r\n                                groupItemPeer[k] = j;\r\n                                var flagS = false, flagE = false;\r\n                                var classNamee = \"vis-timeline-cstyle-\" + (i % 10);\r\n                                if (scope.ngModel[i].lines[j].start != null && scope.ngModel[i].lines[j].start != \"\" && typeof scope.ngModel[i].lines[j].start != \"undefined\") {\r\n                                    obj.start = new Date(scope.ngModel[i].lines[j].start * 1);\r\n                                    obj.startFormated = moment.unix(scope.ngModel[i].lines[j].start / 1000).format(dateFormat);\r\n                                    flagS = true;\r\n                                }\r\n                                if (scope.ngModel[i].lines[j].end != null && scope.ngModel[i].lines[j].end != \"\" && typeof scope.ngModel[i].lines[j].end != \"undefined\") {\r\n                                    obj.end = new Date(scope.ngModel[i].lines[j].end * 1);\r\n                                    obj.endFormated = moment.unix(scope.ngModel[i].lines[j].end / 1000).format(dateFormat);\r\n                                    flagE = true;\r\n                                }\r\n                                if (flagS && flagE) {\r\n                                    var respo = isTodayInBetween(obj.start.getTime(), obj.end.getTime());\r\n                                    if (respo == -1) {\r\n                                        classNamee = classNamee + \" line-ended\";\r\n                                    }\r\n                                    if (respo == 1) {\r\n                                        classNamee = classNamee + \" line-not-started\";\r\n                                    }\r\n                                }\r\n                                var passedClassName = (typeof scope.ngModel[i].lines[j].className === 'undefined') ? \"\" : scope.ngModel[i].lines[j].className;\r\n                                classNamee = classNamee + \" \" + passedClassName;\r\n                                obj.className = classNamee;\r\n                                var barStyle = (typeof scope.ngModel[i].lines[j].style === 'undefined') ? \"\" : scope.ngModel[i].lines[j].style;\r\n                                obj.style = barStyle;\r\n                                if (typeof scope.ngModel[i].lines[j].content === 'undefined') {\r\n                                    obj.content = \"<div class='padding5' smart-tooltip title='\" + obj.startFormated + \" - \" + obj.endFormated + \"' position='top' delay='500' message= \" + $translate.instant('tooltipMsg') + \"></div>\";\r\n                                } else {\r\n                                    obj.content = scope.ngModel[i].lines[j].content;\r\n                                }\r\n                                items.push(obj);\r\n                                k++;\r\n                            }\r\n                        }\r\n                    }\r\n                    formateData();\r\n                    $timeout(function () {\r\n                        var groupSet = new vis.DataSet(groups);\r\n                        var itemSet = new vis.DataSet(items);\r\n                        var container = document.getElementById(scope.timelineID);\r\n                        if (timeline == null) {\r\n                            timeline = new vis.Timeline(container);\r\n                            container.addEventListener(\"touchmove\", function (e) {\r\n                                // to avoid original touch device (iPad, tablet) effects like pinch to zoom in/out. \r\n                                e.preventDefault();\r\n                            });\r\n                        }\r\n                        timeline.setGroups(groupSet);\n                        timeline.setItems(itemSet);\r\n                        var options = {\r\n                            editable: readonly,\r\n                            groupOrder: groupOrderFunc,\r\n                            selectable: selectable,\r\n                            showCurrentTime: showCurrentTime,\r\n                            zoomMin: zoomMin,\r\n                            zoomMax: zoomMax,\r\n                            margin: { item: marginSpace },\r\n                            locales: {},\r\n                            locale: cultureCode,\r\n                            format: {\r\n                            \tminorLabels: {\r\n                            \t\tmillisecond: 'SSS',\r\n                            \t\tsecond: 's',\r\n                            \t\tminute: 'hh:mm a',\r\n                            \t\thour: 'hh:mm a',\r\n                            \t\tweekday: 'ddd D',\r\n                            \t\tday: 'D',\r\n                            \t\tmonth: 'MMM',\r\n                            \t\tyear: 'YYYY'\r\n                            \t},\r\n                            \tmajorLabels: {\r\n                            \t\tmillisecond: 'hh:mm:ss a',\r\n                            \t\tsecond: 'D MMMM hh:mm a',\r\n                            \t\tminute: 'ddd D MMMM',\r\n                            \t\thour: 'ddd D MMMM',\r\n                            \t\tweekday: 'MMMM YYYY',\r\n                            \t\tday: 'MMMM YYYY',\r\n                            \t\tmonth: 'YYYY',\r\n                            \t\tyear: ''\r\n                            \t}\r\n                            }\r\n                        };\r\n                        options.locales[cultureCode] = {\r\n                            current: $translate.instant('labelCurrent'),\r\n                            time: $translate.instant('labelTime')\r\n                        };\r\n                        timeline.setOptions(options);\r\n                        if (attrs.fittobound === 'true') {\r\n                            timeline.fit(options);\r\n                        }\n                        $timeout(function () {\r\n                            if (angular.isFunction(scope.onLoad)) {\r\n                                scope.onLoad();\r\n                            }\r\n                        }, 2000);\r\n                        $(timeline.currentTime.bar).append('<span class=\"timelineLabelToday\">' + $translate.instant('timelineLabelToday') + '</span>');\r\n                        timeline.on('select', function (obj) {\r\n                            var props = timeline.getEventProperties(obj.event);\r\n                            var groupObj = (props.group != null) ? scope.ngModel[props.group] : null;\r\n                            var itemObj = (props.item != null) ? scope.ngModel[props.group].lines[groupItemPeer[props.item]] : null;\r\n                            var returnObj = {\r\n                                item: itemObj,\r\n                                group: groupObj,\r\n                                properties: props\r\n                            }\r\n\r\n                            if (angular.isFunction(scope.onSelect)) {\r\n                                scope.onSelect({\r\n                                    $res: returnObj\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }, true);\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTimeline/smartTimelineTemplate.html'\r\n        };\r\n    }]);\r\n})();","  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Tooltip\n   * @description This directive is useful for creating a tooltip.\n   * \n   * @attr {String} position\n   *    Tooltip position. Possible values are left, right, top, bottom. Default value is 'left'.\n   * @attr {Number} delay\n   *    Tooltip delay. Default value is '250'.\n   * @attr {String} tooltip\n   *    Tooltip message\n   * \n   * @example\n   Usage:\n   <span smart-tooltip position=\"top\" delay=\"500\" message=\"Tooltip message\"></span>\n   */\n\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartTooltip', [function () {\r\n        return {\r\n            restrict: 'A',\n            replace: true,\n            scope: {\r\n                customStyle: \"=\"\r\n            },\n            link: function (scope, element, attrs) {\r\n                var onMessage = attrs.$observe('message', function (value) {\r\n                    element.attr('data-tooltip', value);\r\n                });\n                element.attr('data-position', attrs.position ? attrs.position : 'left');\n                element.attr('data-delay', attrs.delay ? attrs.delay : '50');\n                element.attr('data-tooltip', attrs.message ? attrs.message : '');\n                element.addClass('tooltipped');\n                if (typeof scope.customStyle != \"undefined\") {\r\n                    var optionsObject = {\r\n                        \"customStyle\": scope.customStyle\r\n                    };\r\n                }\n                element.tooltip(optionsObject);\n                element.on('click', function () {\r\n                    element.trigger('mouseleave');\r\n                });\n                //  Destroy tooltip on scope destroy\n                scope.$on('$destroy', function () {\r\n                    element.tooltip('remove');\r\n                    onMessage();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Typeahead\r\n * @description This directive is used for creating a typeahead component ie Type and search plus select.\r\n * \r\n * @attr {String} label\r\n *    Label to be displayed for identification of this ui element\r\n * @attr {String} placeholder\r\n *    Hint text to be displayed\r\n * @attr {String} info-icon\r\n *    To show a custom icon\r\n * @attr {Array} ng-model\r\n *    Default values to be displayed (Note: Pass array only if multiselect is set to true. Else pass an object.)\r\n *  @attr {Array} options\r\n *    Values to be shown in suggestions\r\n * @attr {Boolean} multiselect\r\n *    To allow/disallow multiple selections\r\n * @attr {Boolean} addnew\r\n *    To allow add new option\r\n * @attr {Boolean} show-lookup\r\n *    To make autocomplete plus lookup available\r\n * @attr {Boolean} focus \r\n *    If set to true, this ui element will be focused\r\n * @attr {Boolean} validate\r\n *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n * @attr {Array} rules \r\n *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n * @attr {String} error-message \r\n *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n * @attr {Boolean} is-mandatory \r\n *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n * @attr {Boolean} disable \r\n *    If set to true, field cannot be edited. Blur and focus events will not be fired (default behaviour).\r\n * @attr {Function} on-focus\r\n *    Callback function when ui element's focus event is fired\r\n * @attr {Function} on-blur\r\n *    Callback function when ui element's blur event is fired\r\n * @attr {Function} on-key-up\r\n *    Callback function when ui element's keyup event is fired\r\n * @attr {Function} on-key-down\r\n *    Callback function when ui element's keydown event is fired\r\n * @attr {Function} on-key-press\r\n *    Callback function when ui element's keypress event is fired\r\n * @attr {Function} on-select\r\n *    Callback function when a value is selected \r\n * @attr {Function} callback-on-iconclick\r\n *    Callback function for icon on the right side\r\n * @attr {Function} call-addnew\r\n *    Callback function for add new icon\r\n * \r\n *    \r\n * @example\r\n Static:\r\n Controller:\r\n      $scope.options = [\r\n\t\t{\r\n\t\t\t\"UserId\": 28360,\r\n\t\t\t\"UserName\": \"SRUser1@outlook.com\",                  \r\n\t\t\t\"FirstName\": \"SR\",                  \r\n\t\t\t\"LastName\": \"User1\"\r\n\t\t}, {                 \r\n\t\t\t\"UserId\": 28977,                  \r\n\t\t\t\"UserName\": \"SRUser1@outlook.com11\",\r\n\t\t\t\"FirstName\": \"Test\",\r\n\t\t\t\"LastName\": \"TestLastName\"    \r\n\t\t}, {                  \r\n\t\t\t\"UserId\": 57900,                  \r\n\t\t\t\"UserName\": \"SRUser1@outlook.com234\",                  \r\n\t\t\t\"FirstName\": \"Test23\",                  \r\n\t\t\t\"LastName\": \"test23lastname\"                 \r\n\t\t}\r\n\t]; \r\n\t$scope.selected = [{            \r\n\t\t\"UserId\": 28360,               \r\n\t\t\"UserName\": \"SRUser1@outlook.com\",               \r\n\t\t\"FirstName\": \"SR\",               \r\n\t\t\"LastName\": \"User1\"              \r\n\t}];  \r\n Usage:\r\n      <smart-typeahead class=\"col s2\" multiselect=\"true\" addnew=\"true\" showlookup=\"true\" placeholder=\"Place Holder\" ng-model=\"selected\" options=\"options\" filterkeys=\"['FirstName', 'LastName']\" optionformat=\"<span>{FirstName} {LastName}</span>\" displayformat=\"{FirstName} {LastName}\" label=\"{{typeaheadLabel}}\" callback-on-iconclick=\"callAfterClickedOnRightSideIcon(e)\" info-icon=\"#icon_CirclePlus\" call-addnew=\"callAfterAddNewFuncClick(e)\"></smart-typeahead>       \r\n */\r\n(function () {\r\n    'use strict';\r\n    var typeaheadId = 0;\r\n    angular.module('SMART2').directive('smartTypeahead', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', 'RuleEngine', '$window', function ($rootScope, $timeout, $translate, ScrollTo, lookup, RuleEngine, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: 'ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                callbackOnIconClick: '&',\r\n                callAddNew: '&',\r\n                lookupOpen: '&',\r\n                lookupHide: '&',\r\n                onScrollEnd: '&',\r\n                onScrollTop: '&',\r\n                onScrollInProgress: '&',\r\n                searchtextKeyUp: '&',\r\n                errorMessage: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                align: '@',\r\n                format: '@',    //  date format\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                maxlength: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                desckey: '@',\r\n                multiselect: '@',\r\n                showLookup: '@',\r\n                infoIcon: '@',\r\n                infoIconTooltip: '@',\r\n                addnew: '@',\r\n                titleofmodel: '@',\r\n                selecttypeoption: '=?',\r\n                showInfoIcon: '=?',\r\n                isSupplier: '=?',\r\n                defaultselectoption: '@',\r\n                defaultselectiontext: '=?',\r\n                width: '@',\r\n                height: '@',\r\n                isDefaultMandatory: '@',\r\n                minCharForTrigger: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                errorModel: '=?',\r\n                loading: '=?',\r\n                minMultiselect: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                isLazyLoadingEnabled: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModel) {\r\n                scope.placeholder = (scope.placeholder == undefined || scope.placeholder == null) ? '' : scope.placeholder;\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                scope.label = (scope.label == undefined || scope.label == null) ? '' : scope.label;\r\n                scope.textAlign = (scope.align == undefined || scope.align == null) ? 'left' : scope.align;\r\n                scope.infoIconFlag = (scope.infoIcon == undefined || scope.infoIcon == null) ? false : true;\r\n                scope.titleofmodel = (scope.titleofmodel == undefined || scope.titleofmodel == null) ? $translate.instant('titleOfModel') : scope.titleofmodel;\r\n                scope.infoIconTooltip = (scope.infoIconTooltip == undefined || scope.infoIconTooltip == null) ? '' : scope.infoIconTooltip;\r\n                scope.isLazyLoadingEnabled = angular.isDefined(scope.isLazyLoadingEnabled) ? scope.isLazyLoadingEnabled : false;\r\n                var multiselect = (scope.multiselect == undefined || scope.multiselect == null) ? false : scope.multiselect == \"true\" ? true : false;\r\n                var minMultiselect = (scope.minMultiselect == undefined || scope.minMultiselect == null) ? { event: false } : { event: true, value: scope.minMultiselect };\r\n                var showLookup = (scope.showLookup == undefined || scope.showLookup == null) ? true : scope.showLookup == \"true\" ? true : false;\r\n                var addnew = (scope.addnew == undefined || scope.addnew == null) ? false : scope.addnew == \"true\" ? true : false;\r\n                var readonly = (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false;\r\n                var minCharForTrigger = scope.minCharForTrigger ? parseInt(scope.minCharForTrigger) : 3;\r\n                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                var loading = angular.isDefined(scope.loading) ? scope.loading : false;\r\n                if (noSuggestionNotice == '') {\r\n                    showNoSuggestion = false;\r\n                }\r\n                //showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                var number, rulesValidationEvent;\r\n                var showLookupKey = $translate.instant('showLookupLabel'),\r\n                    addNewKey = $translate.instant('addNew');\r\n                scope.disabled = \"\";\r\n                scope.showInfoIcon = (scope.showInfoIcon == undefined || scope.showInfoIcon == null) ? false : scope.showInfoIcon;\r\n                var isInfoTipEnable = attrs.showInfoTip == 'true' ? true : false,\r\n                    checkInfoToolTip = function () {\r\n                        if (isInfoTipEnable) {\r\n                            scope.infotipData = scope.displayModel.replace(/,/g, '  ').trim().replace(/  /g, '<br>');\r\n                        } else {\r\n                            scope.infotipData = \"\";\r\n                        }\r\n                    };\r\n\r\n                var selectedArr = [], newOptionsSelected = [], newArr = [], copyArray = [], selectedArrIndex;\r\n                if (readonly) {\r\n                    scope.disabled = \"disabled\";\r\n                }\r\n                var uniqueIDGenerator = function () {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xx2xxpxxoxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                function checkIfActive() {\r\n                    if (scope.placeholder === '' && (scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                scope.isActive = checkIfActive();\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.typeaheadId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    var typeaheadId = uniqueIDGenerator();\r\n                    scope.typeaheadId = 'typeahead-' + typeaheadId;\r\n                }\r\n                scope.labelFortypeaheadId = 'label-for-' + scope.typeaheadId;\r\n\r\n                /*\r\n\t\t\t\t* Skip tab key focus, if field is readonly\r\n\t\t\t\t*/\r\n               var cancelMe =  setTimeout(function () {\r\n                    if (readonly) {\r\n                        angular.element('#' + scope.typeaheadId).attr('tabindex', -1);\r\n                    }\r\n                    clearTimeout(cancelMe);\r\n                    cancelMe = null;\r\n                });\r\n\r\n                var unbindFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        var clrTout = setTimeout(function () {\r\n                            angular.element('#' + scope.labelFortypeaheadId).trigger('click');\r\n                            clearTimeout(clrTout);\r\n                            clrTout = null;\r\n                        });\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                var changeTimeout, keyUpTimeout, keyDownTimeout, keyPressTimeout;\r\n                scope.ngChange = function (e) {\r\n                    scope.isActive = checkIfActive();\r\n\r\n                    if (changeTimeout) {\r\n                        $timeout.cancel(changeTimeout);\r\n                    }\r\n                    changeTimeout = $timeout(function () {\r\n                        scope.onChange({\r\n                            $event: {\r\n                                data: angular.element('#' + scope.typeaheadId)\r\n                            }\r\n                        });\r\n                    }, 500);\r\n                };\r\n                scope.ngFocus = function (e) {\r\n                    scope.isActive = true;\r\n                    scope.onFocus({ $event: e });\r\n                    autoCompleteField.suggestions.length = 0;\r\n                };\r\n                scope.ngBlur = function (e) {\r\n                    var model = getModel();\r\n                    setValues(model);\r\n\r\n                    if (multiselect && model.length > 0) {\r\n                        scope.multiselectFlag = true;\r\n                    }\r\n\r\n                    scope.isActive = checkIfActive();\r\n                    scope.onBlur({ $event: e });\r\n                    if (model == undefined || model == null || model == '' || Object.getOwnPropertyNames(model).length === 0) {\r\n                        scope.showInfoIcon = false;\r\n                    } else {\r\n                        scope.showInfoIcon = true;\r\n                    }\r\n\r\n                    // Needed to add $timeout for not showing error message before show lookup open.\r\n                    var tout = $timeout(function () {\r\n                        if (!showLookupTrigger) {\r\n                            scope.validateRules();\r\n                        } else {\r\n                            showLookupTrigger = false;\r\n                        }\r\n                        $timeout.cancel(tout);\r\n                        tout = null;\r\n                    }, 200);\r\n                };\r\n                var preventKeyArray = [37, 38, 39, 40];\r\n                var showLookupTrigger = false;\r\n                scope.ngKeyUp = function (e) {\r\n                    if (multiselect && e.target.value == \"\") {\r\n                        setModel([]);\r\n                    }\r\n                    if (!multiselect && e.target.value == \"\") {\r\n                        setModel(null);\r\n                    }\r\n                    scope.showInfoIcon = false;\r\n                    if (keyUpTimeout) {\r\n                        $timeout.cancel(keyUpTimeout);\r\n                    }\r\n                    keyUpTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyUp({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                    DuplicateData(scope.displayModel, e);\r\n                };\r\n                scope.ngKeyDown = function (e) {\r\n                    scope.showInfoIcon = false;\r\n                    if (keyDownTimeout) {\r\n                        $timeout.cancel(keyDownTimeout);\r\n                    }\r\n                    keyDownTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyDown({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                    var formattedData = getFormattedData(newOptionsSelected);\r\n                    copyArray = angular.copy(formattedData).map(function (data) { return data.value.toLowerCase(); });\r\n                    DuplicateData(scope.displayModel, e);\r\n                };\r\n                scope.ngKeyPress = function (e) {\r\n                    if (keyPressTimeout) {\r\n                        $timeout.cancel(keyPressTimeout);\r\n                    }\r\n                    keyPressTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyPress({ $event: e });\r\n                        }\r\n\r\n                        if (e.charCode == 13) {\r\n                            scope.onEnter({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                   DuplicateData(scope.displayModel, e);\r\n                };\r\n\r\n                scope.clickedOnIcon = function (e) {\r\n                    scope.callbackOnIconClick({ $event: e });\r\n                };\r\n\r\n                scope.validateRules = function () {\r\n                    var model = getModel();\r\n                    if (scope.readonly == 'true') {\r\n                        scope.isActive = true;\r\n                        return;\r\n                    }\r\n                    if (scope.$eval(scope.isMandatory) && !scope.clienterror && (Object.keys(model).length == 0 || model == null || model == undefined || model == '' || model.id == 0)) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                        scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n                        return;\r\n                    }\r\n                    if (scope.clienterror) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                        scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                        return;\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    scope.errorModel = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\r\n                            ruleLlen = rules.length;\r\n                        for (var i = 0; i < ruleLlen; i++) {\r\n                            var tRule = rules[i];\r\n                            if (typeof tRule == 'object') {\r\n                                if (eval((tRule.rule).replace(/this/g, 'scope.displayModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = tRule.error;\r\n                                    scope.errorModel = tRule.error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    RuleEngine.isValid(tRule, function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = $translate.instant(e.errorData.error);\r\n                                        scope.errorModel = $translate.instant(e.errorData.error);\r\n                                        isFoundInvalid = true;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var unbindValidate = scope.$watchGroup(['validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                    if (newVal[0] || newVal[1] != oldVal[1]) {\r\n                        scope.validateRules();\r\n                    }\r\n\r\n                    if (newVal[2] != oldVal[2] || newVal[3] != oldVal[3]) {\r\n                        if (scope.showinfo || scope.showwarning) {\r\n                            element.hasClass('input-field').addClass('field-has-icon');\r\n                        }\r\n                        else {\r\n                            element.hasClass('.input-field').removeClass('field-has-icon');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (scope.clienterror) {\r\n                    scope.validateRules();\r\n                }\r\n\r\n                function setModel(value, mode) {\r\n                    value = !value ? (multiselect ? [] : {}) : value;\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        if (multiselect && mode == \"autocomplete\") {\r\n                            var v = value;\r\n                            value = ngModel.$modelValue;\r\n                            value.push(v);\r\n                        };\r\n                        ngModel.$setViewValue(value);\r\n                        ngModel.$render();\r\n                        if (mode != \"autocomplete\") {\r\n                            setValues(value);\r\n                        };\r\n                    } else {\r\n                        if (multiselect && mode == \"autocomplete\") {\r\n                            scope.ngModel.push(value)\r\n                        } else if (multiselect === true) {\r\n                            if (typeof scope.ngModel == \"string\") {\r\n                                scope.ngModel = value;\r\n                            } else {\r\n                                if (scope.ngModel == value) {\r\n                                    value = angular.copy(value);\r\n                                }\r\n                                scope.ngModel.length = 0;\r\n                                [].push.apply(scope.ngModel, value);\r\n                            };\r\n                        } else {\r\n                            scope.ngModel = value;\r\n                        }\r\n                        setValues(scope.ngModel);\r\n                    }\r\n                };\r\n\r\n                function getModel() {\r\n                    var model;\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        model = ngModel.$modelValue;\r\n                    } else {\r\n                        model = scope.ngModel;\r\n                    }\r\n                    return model;\r\n                }\r\n\r\n                function DuplicateData(editTest, event) {\r\n\r\n                    var newArrLen = '';\r\n                    if (editTest || event.keyCode == 188 || event.type == \"keyup\") {\r\n                        var str_array = editTest.split(','),\r\n                            strLen = str_array.length;\r\n                        for (var i = 0; i < strLen; i++) {\r\n                            str_array[i] = str_array[i].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\r\n                        }\r\n                        angular.forEach(str_array, function (val) {\r\n                            var indexabc = copyArray.indexOf(val.toLowerCase());\r\n                            selectedArrIndex = newOptionsSelected.map(function (data) { return data.value.toLowerCase(); }).indexOf(val.toLowerCase());\r\n\r\n                            if (selectedArrIndex != -1 && newArr.indexOf(val) == -1) {\r\n                                selectedArr.push(selectedArrIndex);\r\n                                var ab = newOptionsSelected.splice(selectedArrIndex, 1)[0];\r\n                                newArr.push(ab);\r\n                                ab._$index = indexabc;\r\n                            }\r\n                        });\r\n                        if (event) {\r\n                            if (event.keyCode == 8 || event.keyCode == 46 || editTest.length == 3) {\r\n                            angular.forEach(str_array, function (val, v1, v2) {\r\n                                var isPresent = newArr.map(function (data) { return data.value; }).indexOf(val);\r\n                                if (isPresent == -1) {\r\n                                    newArrLen = newArr.length;\r\n                                    for (var i = 0 ; i < newArrLen; i++) {\r\n                                        var tNewArr = newArr[i];\r\n                                        if (newOptionsSelected.indexOf(tNewArr) == -1 && v2.indexOf(tNewArr.value) == -1) {\r\n                                            newOptionsSelected.splice(tNewArr._$index, 0, tNewArr);\r\n                                            newArr.splice(i, 1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                        }\r\n                    }\r\n                    else {\r\n                        newArrLen = newArr.length;\r\n                        for (var i = 0 ; i < newArrLen; i++) {\r\n                            if (newOptionsSelected.indexOf(newArr[i]) == -1) {\r\n                                newOptionsSelected.splice(newArr[i]._$index, 0, newArr[i]);\r\n                                newArr.splice(i, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                function getFormattedData(data) {\r\n                    var dataLength = data.length;\r\n                    if (!data || dataLength == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < dataLength; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{'),\r\n                                parentSplitLen = parentSplit.length;\r\n                            for (var j = 0; j < parentSplitLen; j++) {\r\n                                var childSplit = parentSplit[j].split('}'),\r\n                                    childSplitLen = childSplit.length;\r\n                                for (var k = 0; k < childSplitLen; k++) {\r\n                                    var childObj = childSplit[k];\r\n                                    if (childObj.indexOf('.') > 0 || data[i].hasOwnProperty(childObj)) {\r\n                                        str = str.replace(new RegExp(\"{\" + childObj + \"}\", \"ig\"), eval('data[i].' + childObj));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n                var filterKeys;\r\n                if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                    filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                }\r\n                else {\r\n                    filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                }\r\n\r\n                //set optionFormat displayFormat related to filterKeys incase undefined\r\n                scope.filterKeys = scope.$eval(scope.filterkeys);\r\n                function getOpFormate() {\r\n                    var opFor = \"\",\r\n                        filterKeyLen = filterKeys.length;\r\n                    for (var i = 0; i < filterKeyLen; i++) {\r\n                        opFor = opFor + \"{\" + filterKeys[i] + \"} \";\r\n                    }\r\n                    if (opFor == \"\") {\r\n                        return \"{title}\";\r\n                    }\r\n                    opFor.trim();\r\n                    return opFor;\r\n                }\r\n\r\n                function getDispFormate() {\r\n                    var opDisp = \"<span>\",\r\n                        filterKeyLen = filterKeys.length;\r\n                    for (var i = 0; i < filterKeyLen; i++) {\r\n                        opDisp = opDisp + \"{\" + filterKeys[i] + \"} \";\r\n                    }\r\n                    if (opDisp == \"<span>\") {\r\n                        return \"{title}\";\r\n                    }\r\n                    opDisp.trim();\r\n                    opDisp = opDisp + \"</span>\";\r\n                    return opDisp;\r\n                }\r\n\r\n                var optionFormat = scope.optionformat ? scope.optionformat : getDispFormate();\r\n                var displayFormat = scope.displayformat ? scope.displayformat : getOpFormate();\r\n\r\n                function getDisplayData(data) {\r\n                    if (data == undefined || data == null || data == '') {\r\n                        return '';\r\n                    }\r\n                    var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                    try {\r\n                        var parentSplit = str.split('{'),\r\n                            parentSplitLen = parentSplit.length;\r\n                        for (var j = 0; j < parentSplitLen; j++) {\r\n                            var childSplit = parentSplit[j].split('}'),\r\n                                childSplitLen = childSplit.length;\r\n                            for (var k = 0; k < childSplitLen; k++) {\r\n                                var tChild = childSplit[k];\r\n                                if (tChild.indexOf('.') > 0 || data.hasOwnProperty(tChild)) {\r\n                                    evalResult = eval('data.' + tChild);\r\n                                    evaluatedKeysCounter++;\r\n                                    if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                        evalResult = '';\r\n                                        nullKeysCounter++;\r\n                                    }\r\n                                    str = str.replace(new RegExp(\"{\" + tChild + \"}\", \"ig\"), evalResult);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (evaluatedKeysCounter == nullKeysCounter) {\r\n                            str = '';\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                    return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                }\r\n                //Function return the array of proprrties Input:\"{abc} {dfg}\"; Output:[\"abc\",\"dfg\"]\r\n                function getFormatedArray(formatString) {\r\n                    var str = formatString.trim();\r\n                    try {\r\n                        var parentSplit = str.split('{'), propArray = [],\r\n                            tLen = parentSplit.length;\r\n                        for (var j = 0; j < tLen; j++) {\r\n                            var childSplit = parentSplit[j].split('}');\r\n                            if (j != 0) {\r\n                                propArray.push(childSplit[0].trim());\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    return propArray === undefined || propArray === null || propArray === 'undefined' || propArray === 'null' ? '' : propArray;\r\n                };\r\n                var formatedArray = getFormatedArray(displayFormat);\r\n                \r\n                var delimiterVal = null;\r\n                if (multiselect == true) {\r\n                    delimiterVal = /(,|;)\\s*/;\r\n                }\r\n                var unbindOptions, autoCompleteField;\r\n               var toutOptions =  $timeout(function () {\r\n                    unbindOptions = scope.$watch('options', function (newOptions) {\r\n                        try {\r\n                            newOptionsSelected = newOptions;\r\n                            var formattedData = getFormattedData(newOptionsSelected);\r\n                            copyArray = angular.copy(formattedData).map(function (data) { return data.value.toLowerCase(); });\r\n                            if (!readonly) {\r\n                                if (!$('#' + scope.typeaheadId).devbridgeAutocomplete()) {\r\n                                    autoCompleteField = $('#' + scope.typeaheadId).devbridgeAutocomplete({\r\n                                        filterKeys: filterKeys,\r\n                                        optionFormat: optionFormat,\r\n                                        displayFormat: displayFormat,\r\n                                        lookup: formattedData,\r\n                                        width: scope.width,\r\n                                        maxHeight: scope.height,\r\n                                        multiselect: multiselect,\r\n                                        showLookup: showLookup,\r\n                                        addnew: addnew,\r\n                                        minChars: minCharForTrigger,\r\n                                        delimiter: delimiterVal,\r\n                                        showNoSuggestionNotice: showNoSuggestion,\r\n                                        noSuggestionNotice: noSuggestionNotice,\r\n                                        loading: loading,\r\n                                        minMultiselect: minMultiselect,\r\n                                        showLookupKey: showLookupKey,\r\n                                        addNewKey: addNewKey,\r\n                                        onSelect: function (suggestion) {\r\n                                            angular.element('#' + scope.labelFortypeaheadId).trigger('click');\r\n                                            scope.$evalAsync(function () {\r\n                                                if (multiselect == true) {\r\n                                                    scope.displayModel = \"\";\r\n                                                    setModel(suggestion, 'autocomplete');\r\n                                                    angular.forEach(getModel(), function (val) {\r\n                                                        scope.displayModel = scope.displayModel + val.value + ', ';\r\n                                                    });\r\n                                                    DuplicateData(scope.displayModel);\r\n                                                } else {\r\n                                                    scope.displayModel = getDisplayData(suggestion);\r\n                                                    setModel(suggestion, 'autocomplete');\r\n                                                }\r\n                                                var tOutTemp = $timeout(function () {\r\n                                                    scope.onSelect(suggestion);\r\n                                                    $timeout.cancel(tOutTemp);\r\n                                                    tOutTemp = null;\r\n                                                });\r\n                                            });\r\n                                        },\r\n                                        onClickAddNew: function (e) {\r\n                                            if (addnew) {\r\n                                                scope.callAddNew({ $event: e });\r\n                                                document.body.style.height = document.body.scrollHeight + 2 + \"px\";\r\n                                                var tTout = setTimeout(function () {\r\n                                                    window.scrollTo(0, (document.body.scrollTop + 1));\r\n                                                    window.scrollTo(0, (document.body.scrollTop - 1));\r\n                                                    document.body.style.height = \"\";\r\n                                                    clearTimeout(tTout);\r\n                                                    tTout = null;\r\n                                                });\r\n                                            }\r\n                                        },\r\n                                        onClickShowLookup: function (e) {\r\n                                            if (showLookup) {\r\n                                                scope.openLookup();\r\n                                            }\r\n                                        }\r\n                                    }).devbridgeAutocomplete();\r\n\r\n                                    $(autoCompleteField.element).focus(function (e) {\r\n                                        alignLookUp.call(this, e, autoCompleteField);\r\n                                        var drp = $window.lastOpenedDropdownConfig;\r\n                                        if (drp && !drp.activates.is(\":hidden\") && !angular.element(this).closest(drp.activates).length) { // focused textBox shuld not be within the Materlized dropDown thenonly close the Materlized dropDown.\r\n                                            //Materlized dropdown should be closed on focus on autoComplatetextbox\r\n                                            drp.origin.trigger('close');\r\n                                        }\r\n                                    }).keyup(function (e) {\r\n                                        alignLookUp.call(this, e, autoCompleteField);\r\n                                    });\r\n\r\n                                    //Closing the suggestions on scroll to prevent overlapping issue\r\n                                    angular.element($window).scroll(function (e) {\r\n                                        if (autoCompleteField.visible) {\r\n                                            autoCompleteField.hide();\r\n                                        }\r\n                                    });\r\n                                    //End of closing the suggestions on scroll to prevent overlapping issue\r\n\r\n                                  \r\n                                } else {\r\n                                    $('#' + scope.typeaheadId).devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    });\r\n                    var unbindLoading = scope.$watch('loading', function (newVal, oldVal) {\r\n                        if (newVal == true || newVal == false) {\r\n                            $('#' + scope.typeaheadId).devbridgeAutocomplete().setLoading(newVal);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function alignLookUp(e) {\r\n                    var _this = $(this),\r\n                        scrollTop = $(\"html\").scrollTop() || $(\"body\").scrollTop(),\r\n                        elPosition = _this.offset(),\r\n                        elHeight = _this.outerHeight(),\r\n                        lookup = $(autoCompleteField.suggestionsContainer),\r\n                        lookupPosition = lookup.offset(),\r\n                        lookupHeight = lookup.outerHeight(),\r\n                        isOutOfBound = ((elPosition.top - scrollTop) + elHeight + lookupHeight) > window.innerHeight;\r\n\r\n                    lookup.css(\"opacity\", 0);\r\n                    if (isOutOfBound) { // if lookup list is going out of window\r\n                        if (autoCompleteField.options.orientation != \"top\") {\r\n                            autoCompleteField.options.orientation = \"top\";\r\n                            autoCompleteField.fixPosition();\r\n                        }\r\n                    } else {\r\n                        if (autoCompleteField.options.orientation == \"top\") {\r\n                            autoCompleteField.options.orientation = \"bottom\";\r\n                            autoCompleteField.fixPosition();\r\n                        }\r\n                    }\r\n                    lookup.css(\"opacity\", 1);\r\n                };\r\n                scope.openLookup = function () {\r\n                    showLookupTrigger = true;\r\n                    var len = newArr.length;\r\n                    for (var i = 0 ; i < len; i++) {\r\n                        var tItem = newArr[i];\r\n                        if (newOptionsSelected.indexOf(tItem) == -1) {\r\n                            newOptionsSelected.splice(tItem._$index, 0, tItem);\r\n                            newArr.splice(i, 1);\r\n                        }\r\n                    }\r\n                    if (scope.readonly === 'true' && !scope.mutiselectVal[1]) return false;\r\n\r\n                    if ($.isFunction(scope.lookupOpen)) {\r\n                        scope.lookupOpen();\r\n                    }\r\n                    var lookupConfig = {\r\n                        modelData: lookup.getTempModel() || getModel(),\r\n                        config: {\r\n                            mutliselect: multiselect,\r\n                            displayProperties: formatedArray,\r\n                            options: scope.options,\r\n                            descriptionKey: scope.desckey,\r\n                            addnew: addnew,\r\n                            onKeyUp: attrs.searchtextKeyUp ? scope.searchtextKeyUp : '',\r\n                            titleOfModel: scope.titleofmodel,\r\n                            defaultSelectOption: scope.defaultselectoption,\r\n                            defaultSelectionText: scope.defaultselectiontext,\r\n                            selectTypeOption: scope.selecttypeoption,\r\n                            readonly: (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false,\r\n                            isMandatory: scope.isMandatory,\r\n                            isDefaultMandatory: scope.isDefaultMandatory,\r\n                            errorModel: scope.errorModel,\r\n                            minMultiselect: minMultiselect,\r\n                            label: scope.label,\r\n                            searchFilterKey: scope.$eval(scope.filterkeys),\r\n                            isLazyLoadingEnabled: scope.isLazyLoadingEnabled\r\n                        }\r\n                    }\r\n                    var lookupTout = $timeout(function () {\r\n                        lookup.open(lookupConfig, function (response) {\r\n                            if (response.addnew) {\r\n                                if ($.isFunction(scope.callAddNew)) {\r\n                                    scope.callAddNew();\r\n                                }\r\n                            }\r\n                            setModel(response.result);\r\n                            scope.defaultselectiontext = response.defaultSelectionText;\r\n                            scope.selecttypeoption = response.selectTypeOption;\r\n                            scope.errorModel = response.errorModel;\r\n                            scope.validateRules();\r\n                            if ($.isFunction(scope.lookupHide)) {\r\n                                scope.lookupHide({ data: response });\r\n                            }\r\n                        });\r\n                        lookup.onScrollEnd(function () {\r\n                            scope.onScrollEnd({});\r\n                        });\r\n                        lookup.onScrollTop(function () {\r\n                            scope.onScrollTop({});\r\n                        });\r\n                        lookup.onScrollInProgress(function () {\r\n                            scope.onScrollInProgress({});\r\n                        });\r\n                        $timeout.cancel(lookupTout);\r\n                        lookupTout = null;\r\n                    });\r\n                }\r\n                scope.$on('$destroy', function () {\r\n                    if ($('#' + scope.typeaheadId).devbridgeAutocomplete()) {\r\n                        $('#' + scope.typeaheadId).devbridgeAutocomplete().dispose();\r\n                    }\r\n                    destroyEverythingElse();\r\n                });\r\n\r\n                scope.multiselectFlag = false;\r\n\r\n                function setValues(newVal) {\r\n                     scope.mutiselectVal = [\"\"];\r\n                    if (angular.isDefined(newVal) && newVal != null) {\r\n                        var valuee = \"\",\r\n                        totalEl = newVal.length;\r\n                        if (multiselect == true) {\r\n                            if (totalEl > 0) {\r\n\r\n                                if (minMultiselect.event) {\r\n                                    if ((totalEl == minMultiselect.value) && (getModel().length == minMultiselect.value)) {\r\n                                        scope.validateRules();\r\n                                    }\r\n                                }\r\n\r\n                                if (showLookup) {\r\n                                    scope.multiselectFlag = true;\r\n                                }\r\n                                if (scope.defaultselectoption) {\r\n                                    if (!scope.defaultselectiontext) {\r\n                                        scope.defaultselectiontext = getDisplayData(newVal[0]).replace(/(^\\s*)|(\\s*$)/gi, \"\");\r\n                                        scope.mutiselectVal = [scope.defaultselectiontext + \" (Default)\"];\r\n                                    }\r\n                                    for (var i = 0; i < totalEl; i++) {\r\n                                        if (newVal[i].name === scope.defaultselectiontext) {\r\n                                            scope.mutiselectVal = [getDisplayData(newVal[i]) + \" (Default)\"]; break;\r\n                                        }\r\n                                    }\r\n\r\n                                } else {\r\n                                    scope.mutiselectVal = [getDisplayData(newVal[0])];\r\n                                }\r\n\r\n                                if (totalEl > 1) {\r\n                                    scope.mutiselectVal.push(\"+\" + (totalEl - 1) + \" More\");\r\n                                }\r\n                            } else {\r\n                                scope.multiselectFlag = false;\r\n                            }\r\n                            for (var i = 0; i < totalEl; i++) {\r\n                                if (valuee && totalEl > 1) {\r\n                                    valuee += \",\" + getDisplayData(newVal[i]);\r\n                                }\r\n                                else {\r\n                                    valuee += getDisplayData(newVal[i])\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        else {\r\n                            valuee = getDisplayData(newVal);\r\n                            scope.showInfoIcon = (valuee == '' || scope.isSupplier) ? false: true;\r\n                        }\r\n                        scope.displayModel = valuee.trim();\r\n                    }\r\n                    scope.isActive = checkIfActive();\r\n                    checkInfoToolTip();\r\n                }\r\n\r\n                var unbindNumber = scope.$watch(\"ngModel\", function (newVal) {\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        setValues(ngModel.$modelValue);\r\n                    } else {\r\n                        setValues(newVal);\r\n                    }\r\n                });\r\n                function destroyEverythingElse() {\r\n                    element.off(); // deregister all event handlers\r\n                    $('#' + scope.typeaheadId).off();\r\n                    $('#' + scope.labelFortypeaheadId).off();\r\n                    if (unbindFocus)\r\n                        unbindFocus();\r\n                    if (angular.isFunction(unbindOptions))\r\n                        unbindOptions();\r\n                    if (unbindNumber)\r\n                        unbindNumber();\r\n                    // Removing contents of HTML from DOM\r\n                    $('#' + scope.typeaheadId).remove();\r\n                    $('#' + scope.labelFortypeaheadId).remove();\r\n                    $timeout.cancel(toutOptions);\r\n\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTypeahead/smartTypeaheadTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartUiGrid', ['$timeout', '$filter', 'gridConfigProvider', 'APPCONSTANTS', 'httpService', 'uiGridConstants', '$injector',\n    function ($timeout, $filter, gridConfigProvider, APPCONSTANTS, httpService, uiGridConstants, $injector) {\r\n        return {\r\n            restrict: 'AE',\n            scope: {\r\n                colDef: '@',\n                model: '=',\n                callback: '&',\n                focusRowCol: '@',\n                validationService: '@',\n                searchTerm: '@',\n                otherGridOptions: '@',\n                api: '=',\n                onRenderingStart: '&',\n                onRenderingFinish: '&',\n                dynamicPaginationPageSizes: '=',\r\n                dynamicItemTotal: '='\r\n\n            },\n            link: function (scope, element, attr) {\r\n\n                var paginationOptions = {\r\n                    pageNumber: 1,\n                    pageSize: 12,\n                    sort: null\r\n                };\n\n                if (scope.validationService != undefined) {\r\n                    var service = $injector.get(scope.validationService);\n                    scope.$parent[scope.validationService] = service;\n                    scope.cellClassFunction = scope.validationService + \".validateGridRow\";\n                    scope.cellEditableConditionFunction = scope.validationService + \".isEditableGridRow\";\r\n                }\n                var gridInstance;\n                var defaultGridOptions = {\r\n                    paginationPageSizes: scope.dynamicPaginationPageSizes ? scope.dynamicPaginationPageSizes : [10, 25, 50, 75],\n                    paginationPageSize: scope.dynamicPaginationPageSizes && scope.dynamicPaginationPageSizes[0] ? scope.dynamicPaginationPageSizes[0] : 10,\n                    useExternalPagination: scope.dynamicPaginationCallback ? true : false,\n                    enableCellEditOnFocus: true,\n                    enableFiltering: true,\n                    enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,\n                    treeRowHeaderAlwaysVisible: false,\n                    showTreeExpandNoChildren: false\r\n                };\n                var callback = scope.$eval(scope.callback);\n                var cellClassFunction = scope.$parent.$eval(scope.cellClassFunction);\n                var cellEditableConditionFunction = scope.$parent.$eval(scope.cellEditableConditionFunction);\n\n                scope.gridConfig = defaultGridOptions;\n                var modifiedColDef;\n\n                if (scope.api) {\r\n                    scope.api.getActiveColumns = function () {\r\n                        return scope.gridConfig.columnDefs;\r\n                    };\r\n                }\n\n                scope.$watch('focusRowCol', function (n, o) {\r\n                    if(n){\r\n                        gridInstance.cellNav.scrollToFocus(n.row.entity,n.col.colDef)\r\n                    }\r\n                });\n\n                scope.$watch('scope.dynamicItemTotal', function (n, o) {\r\n                    scope.gridConfig.totalItems = scope.dynamicItemTotal;\r\n                });\n\n                scope.$watch('searchTerm', function (n, o) {\r\n                    if (n && typeof n == 'string') {\r\n                        gridInstance.grid.refresh();\r\n                    }\r\n                });\n\n                scope.$watch('colDef', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        modifiedColDef = gridConfigProvider.getMassagedGirdConfig(scope.$eval(n), scope, cellClassFunction, cellEditableConditionFunction);\n                        _.each(modifiedColDef, function (def, idx, defs) {\r\n                            if (def.customTreeAggregationFinalizerFn) {\r\n                                def.customTreeAggregationFinalizerFn = eval(\"(\" + def.customTreeAggregationFinalizerFn + \")\");\r\n                            }\n                            if (def.customTreeAggregationFn) {\r\n                                def.customTreeAggregationFn = eval(\"(\" + def.customTreeAggregationFn + \")\");\r\n                            }\r\n                        });\n                        scope.gridConfig.columnDefs = null;\n                        scope.gridConfig.columnDefs = modifiedColDef;\n\n                        var groupingCol = _.filter(scope.gridConfig.columnDefs, function (col) { return col.isGrouped;})\n                        if (groupingCol && groupingCol.length > 0 && gridInstance) {\r\n                            gridInstance.grouping.clearGrouping();\n                            _.each(groupingCol, function (col) {\r\n                                gridInstance.grouping.groupColumn(col.field);\r\n                            });\r\n                        }\r\n                    }\r\n                });\n\n                scope.$watch('otherGridOptions', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        var modifiedOtherGridOptions = angular.merge({}, scope.gridConfig, scope.$eval(n));\n                        _.each(modifiedOtherGridOptions.appScopeProvider, function (prop, i, props) {\r\n                            modifiedOtherGridOptions.appScopeProvider[i] = eval(prop);\r\n                        });\n                        scope.gridConfig = null;\n                        scope.gridConfig = modifiedOtherGridOptions;\r\n                    }\r\n                });\n\n                scope.$watch('model', function (newModel) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (!newModel) {\r\n                        scope.gridConfig.data = [];\n                        return;\r\n                    }\n                    var treeColumns = treeViewColumnsToBeCreated(scope.gridConfig.columnDefs);\n                    if (treeColumns.length > 0) {\r\n                        scope.gridConfig = angular.extend(scope.gridConfig, {\r\n                            showTreeRowHeader: true,\n                            enableRowHeaderSelection: true, // Display checkboxes on every row when it's true\n                            showTreeExpandNoChildren: false\r\n                        });\n                        scope.gridConfig.data = assignTreeLevel($filter('orderBy')(newModel, treeColumns[0].field), treeColumns[0].field);\r\n                    }\n                    else {\r\n                        scope.gridConfig.data = newModel;\r\n                    }\r\n                });\r\n\r\n\r\n                if (!gridInstance) {\r\n                    scope.gridConfig.onRegisterApi = getGridInstanceCallback;\r\n                }\n\n\n                /*\n                 *  This function will check and return an array of columns for tree view\n                 */\n                var treeViewColumnsToBeCreated = function (colDefs) {\r\n                    return _.filter(colDefs, function (col) {\r\n                        return col.isTree;\r\n                    });\r\n                };\n\n                /*\n                 *  Sort grid data\n                 */\n                var sortData = function (data, key) {\r\n                    return data.slice(0).sort(function (a, b) {\r\n                        return (eval('a.' + key) > eval('b.' + key)) ? 1 : (eval('a.' + key) < eval('b.' + key)) ? -1 : 0;\r\n                    });\r\n                };\n\n                /*\n                 *  Assign tree view since it is required to create a tree view\n                 */\n                var assignTreeLevel = function (data, key) {\r\n                    var loopedItems = [];\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i].$$treeLevel = 0;\n                        if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                            data[i].$$treeLevel = 1;\r\n                        }\n                        if (eval('data[i].' + key).toString().indexOf('.') > -1) {\r\n                            var SplitLevelArr = eval('data[i].' + key).toString().split('.');\n                            data[i].$$treeLevel = SplitLevelArr.length - 1;\n                            if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                                data[i].$$treeLevel = parseInt(data[i].$$treeLevel) + 1;\r\n                            }\r\n                        }\n                        loopedItems.push(eval('data[i].' + key));\r\n                    }\n                    return data;\r\n                };\n\n                function getCellValue(row, col) {\r\n                    var data = gridInstance.grid.getCellDisplayValue(row, col);\n                    return data ? data.toString() : \"\";\r\n                };\n\n                function outerSearchCallback(rows, cols) {\r\n                    if (scope.searchTerm && typeof scope.searchTerm == 'string' && scope.searchTerm.length > 0) {\r\n                        _.each(rows, function (row, rowIndex) {\r\n                            var match = false;\n                            _.each(cols, function (col) {\r\n                                var cellValue = $filter('translate')(getCellValue(row, col));\n                                if (col.colDef.attributes && col.colDef.attributes.type && col.colDef.attributes.type.toLowerCase() == \"date\") {\r\n                                    var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\n                                    formattedDate = formattedDate.split('+');\n                                    formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\n                                    var month = formattedDate.getMonth() + 1 + '';\n                                    if (month.length === 1) {\r\n                                        month = 0 + '' + month;\r\n                                    }\n                                    formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\n                                    var decession = formattedDate.toLowerCase().trim().indexOf(escape(scope.searchTerm).replace(/%5C/g, '').trim()) > -1;\n                                    if (decession) {\r\n                                        match = true;\r\n                                    }\r\n                                }\n                                else if (cellValue.match(new RegExp(scope.searchTerm, \"i\"))) {\r\n                                    match = true;\r\n                                }\r\n                            });\n                            row.visible = match;\r\n                        });\r\n                    };\n                    return rows;\r\n                };\n\n                function onCheckboxSelect(row) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridCheckBoxDispatcher', {\r\n                            \"row\": row\r\n                        });\r\n                    }\r\n                }\n\n                //  this timeout prevents rows rendered callback being fired multiple times\n                var rowsRenderedTimeout;\n                function getGridInstanceCallback(instance) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('gridInstance', instance);\r\n                    }\n                    gridInstance = instance;\n                    if (typeof scope.api != undefined && scope.api != null && scope.api.rowSelectionCallback) {\r\n                        scope.gridConfig.isRowSelectable = scope.api.rowSelectionCallback;\n                        //gridInstance.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                    }\n                    gridInstance.grid.registerRowsProcessor(outerSearchCallback, 200);\n                    gridInstance.core.on.rowsRendered(scope, function (row) {\r\n                        if (rowsRenderedTimeout) {\r\n                            $timeout.cancel(rowsRenderedTimeout);\n                            rowsRenderedTimeout = undefined;\r\n                        }\n                        rowsRenderedTimeout = $timeout(function () {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridRowsRenderedDispatcher', {\r\n                                    \"row\": row\r\n                                });\r\n                            }\n                            setHeightForGrid();\n                            angular.isFunction(scope.onRenderingFinish) && scope.onRenderingFinish();\r\n                        }, 500);\r\n                    });\n\n\n                    gridInstance.selection.on.rowSelectionChanged(scope, onCheckboxSelect);\n                    gridInstance.cellNav.on.navigate(scope, function (newRowcol, oldRowCol) {\r\n                        if (newRowcol.col.colDef.isRegFocusCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridFocusColumnDispatcher', {\r\n                                    \"focusedRowColObj\": newRowcol,\r\n                                    \"bluredRowColObj\": oldRowCol,\r\n                                    \"instance\": gridInstance\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n                    gridInstance.edit.on.afterCellEdit(scope, function (rowEntity, colDef) {\n                        //if (colDef.isRegUpdateCol) {\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridUpdateColumnDispatcher', {\r\n                                \"rowModel\": rowEntity,\n                                \"colDef\": colDef,\n                                \"instance\": gridInstance\r\n                            });\r\n                        }\n                        // }\n                    });\n                    gridInstance.edit.on.beginCellEdit(scope, function (rowEntity, colDef) {\n                        //var focusedCell = gridInstance.cellNav.getFocusedCell();\n                        //if (!focusedCell.col.cellClass) {\n                        //    gridInstance.cellNav.scrollToFocus(rowEntity, colDef);\n                        //}\n\n                        switch (colDef.uiType) {\r\n                            case \"dropdown\":\n                                if (colDef.attributes.serviceObj && colDef.attributes.options.length == 0) {\r\n                                    getDataFolDropDown(colDef, rowEntity)\r\n                                } else {\r\n                                    colDef.attributes.options.map(function (x) { x[colDef.attributes.dataKey] = $filter('translate')(x[colDef.attributes.dataKey]) });\n                                    scope.dropDownOptions = colDef.attributes.options;\r\n                                }\n                                break;\r\n                        };\n\n                        if (colDef.isRegBeginEditCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridBeginEditColumnDispatcher', {\r\n                                    \"rowModel\": rowEntity,\n                                    \"colDef\": colDef\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n\n                    gridInstance.pagination.on.paginationChanged(scope, function (newPage, pageSize) {\n                        //alert(newPage+\"\");\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridDynamicPaginationCallback', {\r\n                                \"gridConfig\": scope.gridConfig,\n                                \"index\": newPage,\n                                \"pageSize\": pageSize\r\n                            });\r\n                        }\r\n                    });\r\n                };\n\n                function setHeightForGrid() {\r\n                    var rowCount = gridInstance.core.getVisibleRows(gridInstance.grid).length;\n                    var height;\n                    if (rowCount == 0) return;\n                    if (scope.gridConfig.rowHeight > 0) {\r\n                        height = ((rowCount + 1) * scope.gridConfig.rowHeight) + 54;\r\n                    } else {\r\n                        height = (rowCount * 35) + 54;\r\n                    }\n                    $($('.ui-grid')[0]).css({ 'width': '100%', 'height': height });\n                    $($('.ui-grid')[0]).find('ui-grid-header-canvas').css(\"width\", \"100%\");\n                    //gridInstance.core.handleWindowResize();\n                };\n\n\n                //*****************************************************autoSuggest bindings START*********************************************\n                scope.autoSuggestOptions = [];\n                scope.autoSuggestOnChange = function (e, col, row) {\r\n                    if (angular.isUndefined(e.data) || e.data.length == 0) {\r\n                        return;\r\n                    }\n                    callback('composedGridAutoSuggestChange', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": (e.data[0] !== undefined ? e.data[0].value : e.displayModel)\r\n                    });\r\n                    //logic to clear split entities autosuggest at grid level, needs to be handled further to make common for other autosuggests\r\n                 \r\n                    if (e.data[0].value == \"\")   {\r\n                        var obj = row.entity[col.colDef.field.split(\".\")[0]];\r\n                        var index;\r\n                        if (obj != null && obj != undefined && col.colDef.field.indexOf('split') >= 0) {\r\n                            if (row.entity.id > 0)\r\n                                index = _.findIndex(scope.model, { id: row.entity.id });\r\n                            else {\r\n                                _.each(scope.model, function (data, indexFound) {\r\n                                    if (_.isEqual(data, row.entity)) {\r\n                                        index = indexFound;\n                                        return;\r\n                                    }\r\n                                });\r\n                            }\n                            scope.model[index][col.colDef.field.split(\".\")[0]] = {\r\n                                \"entityType\": obj.entityType, \"fieldId\": obj.fieldId, \"splitEntityId\": obj.splitEntityId, \"code\": 0, \"entityCode\": null, \"name\": null, \"title\": null\r\n                            };\r\n                        }\r\n                    }\n\n                    var serviceObj = col.colDef.attributes.serviceObj;\n                    if (serviceObj != undefined) {\r\n                        var req = {\r\n                            type: serviceObj.method === \"POST\" ?\"POST\": \"GET\",\n                            url: serviceObj.url,\n                            params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value)),\n                            timeout: 120000,\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\n                                \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                            }\r\n                        };\n                        if (req.type === \"POST\")\r\n                        {\r\n                            req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value));\n                            delete req.params;\r\n                        }\n                        httpService.directhttp(req).then(function (response) {\r\n                            if (serviceObj.CallbackObj) {\r\n                                response = serviceObj.CallbackObj(response, col.colDef.name)\r\n                            }\n                            var resp = [];\n                            if (typeof response === \"string\")\n                                response = JSON.parse(response);\n                            if (serviceObj.isFlatArray) {\r\n                                _.each(response, function (x, index) {\r\n                                    var obj = {};\n                                    obj[\"name\"] = x;\n                                    obj[\"code\"] = x;\n                                    resp.push(obj);\r\n                                });\r\n                            }\n                            else {\r\n                                _.each(response, function (obj) {\r\n                                    var mapperObj = {};\n                                    _.each(serviceObj.mapper, function (mapper) {\r\n                                        var mapperstri = '';\n                                        if (angular.isArray(mapper['toBeMapped'])) {\r\n                                            _.each(mapper['toBeMapped'], function (res) {\r\n                                                mapperstri += obj[res] + \" \";\r\n                                            });\n                                            mapperstri.trim();\r\n                                        }\n                                        else\n                                            mapperstri = obj[mapper['toBeMapped']];\n\n                                        mapperObj[mapper['key']] = mapperstri;\r\n\n                                    });\n                                    _.each(serviceObj.staticValues, function (item) {\r\n                                        mapperObj[item['key']] = item['value'];\r\n                                    });\n                                    resp.push(mapperObj);\r\n                                });\r\n                            }\n                            scope.autoSuggestOptions = resp;\n\n                            //for item number and item description autosuggest\n                            if (serviceObj.responseRequired) {\r\n                                callback('composedGridParseItemMasterData', {\r\n                                    \"rowModel\": row,\n                                    \"colDef\": col,\n                                    \"response\": response,\n                                    \"value\": e.data[0].value\r\n                                });\r\n                            }\r\n                        }, function () {   /* Failure case here */ });\r\n                    }\n                    else {\r\n                        return;\r\n                    }\r\n\n                };\n                scope.autoSuggestOnSelect = function (event, autoSuggestModel, row, col) {\r\n                    autoSuggestModel = event.data;\n                    callback('composedGridSelectItemMasterData', {\r\n                        \"data\": autoSuggestModel,\n                        \"row\": row,\n                        \"col\": col,\r\n                        \"isModified\":true\r\n                    });\r\n                };\n                //*****************************************************autoSuggest bindings END***********************************************\n\n                //*****************************************************dropDOwn bindings START***********************************************\n                scope.isObject = function (val) {\r\n                    return typeof val == 'object';\r\n                }\n\n                scope.dropDownOnChange = function (row, col, val) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridDropDownOnSelectDispatcher', {\r\n                            \"row\": row,\n                            \"col\": col,\n                            \"val\": val\r\n                        });\r\n                    }\r\n                };\n\n                scope.dropDownOptions = [];\n                function getDataFolDropDown(col, row) {\r\n                    var serviceObj = col.attributes.serviceObj;\n                    var req = {\r\n                        method: \"GET\",\n                        url: serviceObj.url,\n                        params: serviceObj.param,\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\n                            \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                        }\r\n                    };\n                    httpService.directhttp(req).then(function (response) {\r\n                        if (typeof row[col.field] != 'object') {\r\n                            var resp = [];\n                            _.each(response, function (x, index) {\r\n                                var obj = {};\n                                obj[col.attributes.dataKey] = $filter('translate')(x);\n                                obj[col.attributes.idKey] = index;\n                                resp.push(obj);\r\n                            });\n                            col.attributes.options = resp;\r\n                        } else {\r\n                            col.attributes.options = response;\r\n                        }\n                        scope.dropDownOptions = col.attributes.options;\r\n                    }, function () {\r\n                    });\r\n                };\n                //*****************************************************dropDOwn bindings END***********************************************\n                //*****************************************************popup bindings START***********************************************\n\n\n                scope.popUpButtonClickCallback = function (row, col) {\n                    // segregate the splitpopup callback function based on config.js \n                    if (angular.isFunction(callback)) {\r\n                        if (col.colDef.isChargesGrid) {\r\n                            callback('composedChargesGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\n                        else {\r\n                            callback('composedGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\r\n                    }\r\n\n                };\n\n                //*****************************************************popup bindings END***********************************************\n\n                //*****************************************************checkBox bindings START***********************************************\n                scope.checkBoxOnChange = function (row, col, val) {\r\n                    callback('composedGridCheckBoxOnChangeDispatcher', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": val\r\n                    });\r\n                };\n                //*****************************************************checkBox bindings END***********************************************\n\n                //*****************************************************text & number keyup bindings START***********************************************\n                scope.textOrNumberKeyUp = function (e, col, row) {\r\n                    callback('composedGridTextKeyUp', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": e.target.value\r\n                    });\r\n                }\n                //*****************************************************text & number keyup bindings END***********************************************\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartUiGrid/smartUiGrid.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartUiTable', ['$timeout', '$filter', 'gridConfigProvider', 'APPCONSTANTS', 'httpService', 'uiGridConstants', '$injector',\n    function ($timeout, $filter, gridConfigProvider, APPCONSTANTS, httpService, uiGridConstants, $injector) {\r\n        return {\r\n            restrict: 'AE',\n            scope: {\r\n                colDef: '@',\n                model: '=',\n                callback: '&',\n                focusRowCol: '@',\n                validationService: '@',\n                searchTerm: '@',\n                otherGridOptions: '@',\n                api: '=',\n                onRenderingStart: '&',\n                onRenderingFinish: '&',\n                dynamicPaginationPageSizes: '=',\r\n                dynamicItemTotal: '='\r\n\n            },\n            link: function (scope, element, attr) {\r\n\n                var paginationOptions = {\r\n                    pageNumber: 1,\n                    pageSize: 12,\n                    sort: null\r\n                };\n\n                if (scope.validationService != undefined) {\r\n                    var service = $injector.get(scope.validationService);\n                    scope.$parent[scope.validationService] = service;\n                    scope.cellClassFunction = scope.validationService + \".validateGridRow\";\n                    scope.cellEditableConditionFunction = scope.validationService + \".isEditableGridRow\";\r\n                }\n                var gridInstance;\n                var defaultGridOptions = {\r\n                    paginationPageSizes: scope.dynamicPaginationPageSizes ? scope.dynamicPaginationPageSizes : [10, 25, 50, 75],\n                    paginationPageSize: scope.dynamicPaginationPageSizes && scope.dynamicPaginationPageSizes[0] ? scope.dynamicPaginationPageSizes[0] : 10,\n                    useExternalPagination: scope.dynamicPaginationCallback ? true : false,\n                    enableCellEditOnFocus: true,\n                    enableFiltering: true,\n                    enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,\n                    treeRowHeaderAlwaysVisible: false,\n                    showTreeExpandNoChildren: false,\r\n                    enableRowSelection: true\r\n                };\n                var callback = scope.$eval(scope.callback);\n                var cellClassFunction = scope.$parent.$eval(scope.cellClassFunction);\n                var cellEditableConditionFunction = scope.$parent.$eval(scope.cellEditableConditionFunction);\n\n                scope.gridConfig = defaultGridOptions;\n                var modifiedColDef;\n\n                if (scope.api) {\r\n                    scope.api.getActiveColumns = function () {\r\n                        return scope.gridConfig.columnDefs;\r\n                    };\r\n                }\n\n                scope.$watch('focusRowCol', function (n, o) {\r\n                    if(n){\r\n                        gridInstance.cellNav.scrollToFocus(n.row.entity,n.col.colDef)\r\n                    }\r\n                });\n\n                scope.$watch('scope.dynamicItemTotal', function (n, o) {\r\n                    scope.gridConfig.totalItems = scope.dynamicItemTotal;\r\n                });\n\n                scope.$watch('searchTerm', function (n, o) {\r\n                    if (n && typeof n == 'string') {\r\n                        gridInstance.grid.refresh();\r\n                    }\r\n                });\n\n                scope.$watch('colDef', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        modifiedColDef = gridConfigProvider.getMassagedGirdConfig(scope.$eval(n), scope, cellClassFunction, cellEditableConditionFunction);\n                        _.each(modifiedColDef, function (def, idx, defs) {\r\n                            if (def.customTreeAggregationFinalizerFn) {\r\n                                def.customTreeAggregationFinalizerFn = eval(\"(\" + def.customTreeAggregationFinalizerFn + \")\");\r\n                            }\n                            if (def.customTreeAggregationFn) {\r\n                                def.customTreeAggregationFn = eval(\"(\" + def.customTreeAggregationFn + \")\");\r\n                            }\r\n                        });\n                        scope.gridConfig.columnDefs = null;\n                        scope.gridConfig.columnDefs = modifiedColDef;\n\n                        var groupingCol = _.filter(scope.gridConfig.columnDefs, function (col) { return col.isGrouped;})\n                        if (groupingCol && groupingCol.length > 0 && gridInstance) {\r\n                            gridInstance.grouping.clearGrouping();\n                            _.each(groupingCol, function (col) {\r\n                                gridInstance.grouping.groupColumn(col.field);\r\n                            });\r\n                        }\r\n                    }\r\n                });\n\n                scope.$watch('otherGridOptions', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        var modifiedOtherGridOptions = angular.merge({}, scope.gridConfig, scope.$eval(n));\n                        _.each(modifiedOtherGridOptions.appScopeProvider, function (prop, i, props) {\r\n                            modifiedOtherGridOptions.appScopeProvider[i] = eval(prop);\r\n                        });\n                        scope.gridConfig = null;\n                        scope.gridConfig = modifiedOtherGridOptions;\r\n                    }\r\n                });\n\n                scope.$watch('model', function (newModel) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (!newModel) {\r\n                        scope.gridConfig.data = [];\n                        return;\r\n                    }\n                    var treeColumns = treeViewColumnsToBeCreated(scope.gridConfig.columnDefs);\n                    if (treeColumns.length > 0) {\r\n                        scope.gridConfig = angular.extend(scope.gridConfig, {\r\n                            showTreeRowHeader: true,\n                            enableRowHeaderSelection: true, // Display checkboxes on every row when it's true\n                            showTreeExpandNoChildren: false\r\n                        });\n                        scope.gridConfig.data = assignTreeLevel($filter('orderBy')(newModel, treeColumns[0].field), treeColumns[0].field);\r\n                    }\n                    else {\r\n                        scope.gridConfig.data = newModel;\r\n                    }\r\n                });\n\n\n\n                if (!gridInstance) {\r\n                    scope.gridConfig.onRegister = getGridInstanceCallback;\r\n                }\n\n\n                /*\n                 *  This function will check and return an array of columns for tree view\n                 */\n                var treeViewColumnsToBeCreated = function (colDefs) {\r\n                    return _.filter(colDefs, function (col) {\r\n                        return col.isTree;\r\n                    });\r\n                };\n\n                /*\n                 *  Sort grid data\n                 */\n                var sortData = function (data, key) {\r\n                    return data.slice(0).sort(function (a, b) {\r\n                        return (eval('a.' + key) > eval('b.' + key)) ? 1 : (eval('a.' + key) < eval('b.' + key)) ? -1 : 0;\r\n                    });\r\n                };\n\n                /*\n                 *  Assign tree view since it is required to create a tree view\n                 */\n                var assignTreeLevel = function (data, key) {\r\n                    var loopedItems = [];\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i].$$treeLevel = 0;\n                        if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                            data[i].$$treeLevel = 1;\r\n                        }\n                        if (eval('data[i].' + key).toString().indexOf('.') > -1) {\r\n                            var SplitLevelArr = eval('data[i].' + key).toString().split('.');\n                            data[i].$$treeLevel = SplitLevelArr.length - 1;\n                            if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                                data[i].$$treeLevel = parseInt(data[i].$$treeLevel) + 1;\r\n                            }\r\n                        }\n                        loopedItems.push(eval('data[i].' + key));\r\n                    }\n                    return data;\r\n                };\n\n                function getCellValue(row, col) {\r\n                    var data = gridInstance.grid.getCellDisplayValue(row, col);\n                    return data ? data.toString() : \"\";\r\n                };\n\n                function outerSearchCallback(rows, cols) {\r\n                    if (scope.searchTerm && typeof scope.searchTerm == 'string' && scope.searchTerm.length > 0) {\r\n                        _.each(rows, function (row, rowIndex) {\r\n                            var match = false;\n                            _.each(cols, function (col) {\r\n                                var cellValue = $filter('translate')(getCellValue(row, col));\n                                if (col.colDef.attributes && col.colDef.attributes.type && col.colDef.attributes.type.toLowerCase() == \"date\") {\r\n                                    var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\n                                    formattedDate = formattedDate.split('+');\n                                    formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\n                                    var month = formattedDate.getMonth() + 1 + '';\n                                    if (month.length === 1) {\r\n                                        month = 0 + '' + month;\r\n                                    }\n                                    formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\n                                    var decession = formattedDate.toLowerCase().trim().indexOf(escape(scope.searchTerm).replace(/%5C/g, '').trim()) > -1;\n                                    if (decession) {\r\n                                        match = true;\r\n                                    }\r\n                                }\n                                else if (cellValue.match(new RegExp(scope.searchTerm, \"i\"))) {\r\n                                    match = true;\r\n                                }\r\n                            });\n                            row.visible = match;\r\n                        });\r\n                    };\n                    return rows;\r\n                };\n\n                function onCheckboxSelect(row) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridCheckBoxDispatcher', {\r\n                            \"row\": row\r\n                        });\r\n                    }\r\n                }\n\n                //  this timeout prevents rows rendered callback being fired multiple times\n                var rowsRenderedTimeout;\n                function getGridInstanceCallback(instance) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('gridInstance', instance);\r\n                    }\n                    gridInstance = instance;\n                    if (typeof scope.api != undefined && scope.api != null && scope.api.rowSelectionCallback) {\r\n                        scope.gridConfig.isRowSelectable = scope.api.rowSelectionCallback;\n                        //gridInstance.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                    }\n                    //gridInstance.grid.registerRowsProcessor(outerSearchCallback, 200);\n                    //gridInstance.core.on.rowsRendered(scope, function (row) {\r\n                    //    if (rowsRenderedTimeout) {\r\n                    //        $timeout.cancel(rowsRenderedTimeout);\n                    //        rowsRenderedTimeout = undefined;\r\n                    //    }\n                    //    rowsRenderedTimeout = $timeout(function () {\r\n                    //        if (angular.isFunction(callback)) {\r\n                    //            callback('composedGridRowsRenderedDispatcher', {\r\n                    //                \"row\": row\r\n                    //            });\r\n                    //        }\n                    //        setHeightForGrid();\n                    //        angular.isFunction(scope.onRenderingFinish) && scope.onRenderingFinish();\r\n                    //    }, 500);\r\n                    //});\n\n\n                    gridInstance.selection.on.rowSelectionChanged(scope, onCheckboxSelect);\n                    //gridInstance.cellNav.on.navigate(scope, function (newRowcol, oldRowCol) {\r\n                    //    if (newRowcol.col.colDef.isRegFocusCol) {\r\n                    //        if (angular.isFunction(callback)) {\r\n                    //            callback('composedGridFocusColumnDispatcher', {\r\n                    //                \"focusedRowColObj\": newRowcol,\n                    //                \"bluredRowColObj\": oldRowCol\r\n                    //            });\r\n                    //        }\r\n                    //    }\r\n                    //});\n                    gridInstance.edit.on.afterCellEdit(scope, function (rowEntity, colDef) {\n                        //if (colDef.isRegUpdateCol) {\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridUpdateColumnDispatcher', {\r\n                                \"rowModel\": rowEntity,\n                                \"colDef\": colDef,\n                                \"instance\": gridInstance\r\n                            });\r\n                        }\n                        // }\n                    });\n                    gridInstance.edit.on.beginCellEdit(scope, function (rowEntity, colDef) {\n                        //var focusedCell = gridInstance.cellNav.getFocusedCell();\n                        //if (!focusedCell.col.cellClass) {\n                        //    gridInstance.cellNav.scrollToFocus(rowEntity, colDef);\n                        //}\n\n                        switch (colDef.uiType) {\r\n                            case \"dropdown\":\n                                if (colDef.attributes.serviceObj && colDef.attributes.options.length == 0) {\r\n                                    getDataFolDropDown(colDef, rowEntity)\r\n                                } else {\r\n                                    colDef.attributes.options.map(function (x) { x[colDef.attributes.dataKey] = $filter('translate')(x[colDef.attributes.dataKey]) });\n                                    scope.dropDownOptions = colDef.attributes.options;\r\n                                }\n                                break;\r\n                        };\n\n                        if (colDef.isRegBeginEditCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridBeginEditColumnDispatcher', {\r\n                                    \"rowModel\": rowEntity,\n                                    \"colDef\": colDef\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n\n                    \n                    gridInstance.cell.on.click(scope, function (row, col) {\r\n                        callback('smartTableClick', {\r\n                            row: row,\n                            col: col\r\n                        });\n                    });\n\n                    //gridInstance.pagination.on.paginationChanged(scope, function (newPage, pageSize) {\n                    //    //alert(newPage+\"\");\n                    //    if (angular.isFunction(callback)) {\r\n                    //        callback('composedGridDynamicPaginationCallback', {\r\n                    //            \"gridConfig\": scope.gridConfig,\n                    //            \"index\": newPage,\n                    //            \"pageSize\": pageSize\r\n                    //        });\r\n                    //    }\r\n                    //});\r\n                };\n\n                function setHeightForGrid() {\r\n                    var rowCount = gridInstance.core.getVisibleRows(gridInstance.grid).length;\n                    var height;\n                    if (rowCount == 0) return;\n                    if (scope.gridConfig.rowHeight > 0) {\r\n                        height = ((rowCount + 1) * scope.gridConfig.rowHeight) + 54;\r\n                    } else {\r\n                        height = (rowCount * 35) + 54;\r\n                    }\n                    $($('.ui-grid')[0]).css({ 'width': '100%', 'height': height });\n                    $($('.ui-grid')[0]).find('ui-grid-header-canvas').css(\"width\", \"100%\");\n                    //gridInstance.core.handleWindowResize();\n                };\n\n\n                //*****************************************************autoSuggest bindings START*********************************************\n                scope.autoSuggestOptions = [];\n                scope.autoSuggestOnChange = function (e, col, row) {\r\n                    if (angular.isUndefined(e.data) || e.data.length == 0) {\r\n                        return;\r\n                    }\n                    callback('composedGridAutoSuggestChange', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": (e.data[0] !== undefined ? e.data[0].value : e.displayModel)\r\n                    });\n                    //logic to clear split entities autosuggest at grid level, needs to be handled further to make common for other autosuggests\n                    if (e.data[0].value == \"\")\r\n                    {\r\n                        var obj = row.entity[col.colDef.field.split(\".\")[0]];\n                        var index;\n                        if (obj != null && obj != undefined && col.colDef.field.indexOf('split') >= 0)\r\n                        {\r\n                            if (row.entity.id > 0)\n                                index = _.findIndex(scope.model, { id: row.entity.id });\n                            else\r\n                            {\r\n                                _.each(scope.model, function (data, indexFound) {\r\n                                    if (_.isEqual(data, row.entity)) {\r\n                                        index = indexFound;\n                                        return;\r\n                                    }\r\n                                });\r\n                            }\n                            scope.model[index][col.colDef.field.split(\".\")[0]] = {\r\n                                \"entityType\": obj.entityType, \"fieldId\": obj.fieldId, \"splitEntityId\": obj.splitEntityId, \"code\": 0, \"entityCode\": null, \"name\": null, \"title\": null\r\n                            };\r\n                        }\r\n                    }\n\n                    var serviceObj = col.colDef.attributes.serviceObj;\n                    if (serviceObj != undefined) {\r\n                        var req = {\r\n                            type: serviceObj.method === \"POST\" ?\"POST\": \"GET\",\n                            url: serviceObj.url,\n                            params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value)),\n                            timeout: 120000,\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\n                                \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                            }\r\n                        };\n                        if (req.type === \"POST\")\r\n                        {\r\n                            req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value));\n                            delete req.params;\r\n                        }\n                        httpService.directhttp(req).then(function (response) {\r\n                            if (serviceObj.CallbackObj) {\r\n                                response = serviceObj.CallbackObj(response, col.colDef.name)\r\n                            }\n                            var resp = [];\n                            if (typeof response === \"string\")\n                                response = JSON.parse(response);\n                            if (serviceObj.isFlatArray) {\r\n                                _.each(response, function (x, index) {\r\n                                    var obj = {};\n                                    obj[\"name\"] = x;\n                                    obj[\"code\"] = x;\n                                    resp.push(obj);\r\n                                });\r\n                            }\n                            else {\r\n                                _.each(response, function (obj) {\r\n                                    var mapperObj = {};\n                                    _.each(serviceObj.mapper, function (mapper) {\r\n                                        var mapperstri = '';\n                                        if (angular.isArray(mapper['toBeMapped'])) {\r\n                                            _.each(mapper['toBeMapped'], function (res) {\r\n                                                mapperstri += obj[res] + \" \";\r\n                                            });\n                                            mapperstri.trim();\r\n                                        }\n                                        else\n                                            mapperstri = obj[mapper['toBeMapped']];\n\n                                        mapperObj[mapper['key']] = mapperstri;\r\n\n                                    });\n                                    _.each(serviceObj.staticValues, function (item) {\r\n                                        mapperObj[item['key']] = item['value'];\r\n                                    });\n                                    resp.push(mapperObj);\r\n                                });\r\n                            }\n                            scope.autoSuggestOptions = resp;\n\n                            //for item number and item description autosuggest\n                            if (serviceObj.responseRequired) {\r\n                                callback('composedGridParseItemMasterData', {\r\n                                    \"rowModel\": row,\n                                    \"colDef\": col,\n                                    \"response\": response,\n                                    \"value\": e.data[0].value\r\n                                });\r\n                            }\r\n                        }, function () {   /* Failure case here */ });\r\n                    }\n                    else {\r\n                        return;\r\n                    }\r\n\n                };\n                scope.autoSuggestOnSelect = function (event, autoSuggestModel, row, col) {\r\n                    autoSuggestModel = event.data;\n                    callback('composedGridSelectItemMasterData', {\r\n                        \"data\": autoSuggestModel,\n                        \"row\": row,\n                        \"col\": col,\r\n                        \"isModified\":true\r\n                    });\r\n                };\n                //*****************************************************autoSuggest bindings END***********************************************\n\n                //*****************************************************dropDOwn bindings START***********************************************\n                scope.isObject = function (val) {\r\n                    return typeof val == 'object';\r\n                }\n\n                scope.dropDownOnChange = function (row, col, val) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridDropDownOnSelectDispatcher', {\r\n                            \"row\": row,\n                            \"col\": col,\n                            \"val\": val\r\n                        });\r\n                    }\r\n                };\n\n                scope.dropDownOptions = [];\n                function getDataFolDropDown(col, row) {\r\n                    var serviceObj = col.attributes.serviceObj;\n                    var req = {\r\n                        method: \"GET\",\n                        url: serviceObj.url,\n                        params: serviceObj.param,\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\n                            \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                        }\r\n                    };\n                    httpService.directhttp(req).then(function (response) {\r\n                        if (typeof row[col.field] != 'object') {\r\n                            var resp = [];\n                            _.each(response, function (x, index) {\r\n                                var obj = {};\n                                obj[col.attributes.dataKey] = $filter('translate')(x);\n                                obj[col.attributes.idKey] = index;\n                                resp.push(obj);\r\n                            });\n                            col.attributes.options = resp;\r\n                        } else {\r\n                            col.attributes.options = response;\r\n                        }\n                        scope.dropDownOptions = col.attributes.options;\r\n                    }, function () {\r\n                    });\r\n                };\n                //*****************************************************dropDOwn bindings END***********************************************\n                //*****************************************************popup bindings START***********************************************\n\n\n                scope.popUpButtonClickCallback = function (row, col) {\n                    // segregate the splitpopup callback function based on config.js \n                    if (angular.isFunction(callback)) {\r\n                        if (col.colDef.isChargesGrid) {\r\n                            callback('composedChargesGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\n                        else {\r\n                            callback('composedGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\r\n                    }\r\n\n                };\n\n                //*****************************************************popup bindings END***********************************************\n\n                //*****************************************************checkBox bindings START***********************************************\n                scope.checkBoxOnChange = function (row, col, val) {\r\n                    callback('composedGridCheckBoxOnChangeDispatcher', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": val\r\n                    });\r\n                };\n                //*****************************************************checkBox bindings END***********************************************\n\n                //*****************************************************text & number keyup bindings START***********************************************\n                scope.textOrNumberKeyUp = function (e, col, row) {\r\n                    callback('composedGridTextKeyUp', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": e.target.value\r\n                    });\r\n                }\n                //*****************************************************text & number keyup bindings END***********************************************\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartUiTable/smartUiTable.html'\r\n        };\r\n    }]);\r\n})();","(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').service('trackStatusService', ['$http', '$q', function ($http, $q) {\r\n        var self = this;\r\n        // Watch the change of main object\r\n        self.statusDataChange = { 'dataChange': '' };\r\n        self.legendChange = {'dataChange' : ''};\r\n        self.dataChange = function () {\r\n            self.statusDataChange['dataChange'] = new Date().getTime();\r\n        }\r\n        self.getChange = function () {\r\n            return self.statusDataChange['dataChange'];\r\n        }\r\n        self.legendChange = function () {\r\n            self.legendChange['dataChange'] = new Date().getTime();\r\n        }\r\n        self.getLegendChange = function () {\r\n            return self.legendChange['dataChange'];\r\n        }\r\n    }]);\r\n})(angular);\r\n\r\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartTrackStatus', ['trackStatusService', '$filter', '$translate',\r\n        function (trackStatusService, $filter, $translate) {\r\n        \r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                data: \"=trackstatusData\",\r\n                onTabChange: \"=onTabChange\",\r\n                cycleChange: \"=onCycleChange\",\r\n                statusLegend: \"=statusLegend\",\r\n                approverLegend: \"=approverLegend\",\r\n                fileDownloadCallback: \"=fileDownloadCallback\",\r\n                scrollToStatus: \"=scrollToStatus\",\r\n                downloadAllAttachment : \"=downloadAllAttachment\"\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/trackStatus/popupNewTrackStatus.html',\r\n            link: function (scope, elem, attr) {\r\n                scope.trackStatusService = trackStatusService;\r\n\t\t        \r\n                // translate the static labels\r\n                scope.headerLable = $translate.instant('TRACK_STATUS'); // header\r\n                scope.tsDocName = $translate.instant('TRACK_STATUS_DOC_NAME');\r\n                //scope.tsCreatedOn = $translate.instant('CREATED_ON');\r\n                scope.tsCreatedOn = attr.trackStatusType === 'milestone' ? $translate.instant('ACHIEVED_ON') : $translate.instant('CREATED_ON');\r\n                scope.tsCurrStatus = $translate.instant('CURRENT_STATUS');\r\n                scope.labelOn = $translate.instant('ON');\r\n                scope.legend = $translate.instant('Legend');\r\n                scope.by = $translate.instant('By');\r\n                scope.defContentCommentLen = 60; // 60 chars to be displayed in case of longer comments.\r\n                \r\n                // HTML page map for tabs\r\n                var htmlForDetail = 'shared/directives/uiElements/trackStatus/trackStatusDetail.html';\r\n                var dateFormat;\r\n                //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                //    dateFormat = moment.localeData().longDateFormat('L');\r\n                //} else\r\n                if (attr.dateFormat && attr.dateFormat != '') {\r\n                    dateFormat = attr.dateFormat;\r\n                } else {\r\n                    dateFormat = 'DD/MM/YYYY';\r\n                }\r\n                // Utility methods\r\n                scope.getDate = function (date) {\r\n                    //return $filter('date')(date, dateFormat);\r\n                    return moment(parseInt(date)).format(dateFormat);\r\n                }\r\n                function dataChanged(a_data) {\r\n                    scope.data = a_data;\r\n                }\r\n                function statusListData(a_data) {\r\n                    scope.statusLists = a_data.datailedData;\r\n                }\r\n                scope.tabClicked = function (e) {\r\n                    scope.onTabChange(e);\r\n                }\r\n                scope.changeCycle = function (model) {\r\n                    scope.cycleChange(model);\r\n                }\r\n                statusListData(scope.data);\r\n                // To update cycles\r\n                scope.cycleObject = [];\r\n                function selectCycle(a_data) {\r\n                    var cycles = a_data.cycles,\r\n                        len = cycles.length;\r\n                    scope.cycleObject = cycles;\r\n                    for(var indx = 0; indx < len; indx++) {\r\n                        if (cycles[indx].selected === true) {\r\n                            scope.selectedCycle = cycles[indx];\r\n                        }\r\n                    }\r\n                }\r\n                selectCycle(scope.data);\r\n\r\n                // update tabs\r\n                scope.trackStatusTabs = [];\r\n                function updateTabs(a_data) {\r\n                    var tabs = a_data.trackStatusTabs,\r\n                        len = tabs.length;\r\n                    for (var t = 0; t < len; t++) {\r\n                        var tobj = tabs[t];\r\n                        if (tobj.active === true) {\r\n                            tobj.contentUrl = htmlForDetail;\r\n                        }\r\n                    }\r\n                    scope.trackStatusTabs = tabs;\r\n                }\r\n                updateTabs(scope.data);\r\n                \r\n                // update doc name, created on and by, doc curr status\r\n                function updateHeaderData(a_data) {\r\n                    scope.headerSecData = a_data;\r\n                    scope.headerSecData.Comments.date = scope.getDate(a_data.Comments.date);\r\n                    scope.docCreatedOn = scope.getDate(a_data.createdOn);\r\n                }\r\n                updateHeaderData(scope.data.projectStatus);\r\n\r\n                // check if comment exists\r\n                scope.hasComments = function (a_comment) {\r\n                    var flag = (a_comment !== \"\" && a_comment) ? true : false;\r\n                    return flag;\r\n                }\r\n                // show more less comments\r\n                scope.showLess = {};\r\n                scope.showMore = {};\r\n                scope.showMoreLess = function (id, arg) {\r\n                    if(arg === \"less\") {\r\n                        scope.showMore[id] = true;\r\n                        scope.showLess[id] = false;\r\n                    } else if (arg === \"more\") {\r\n                        scope.showLess[id] = true;\r\n                        scope.showMore[id] = false;\r\n                    }\r\n                }\r\n                // init show more\r\n                scope.showMoreComment = {};\r\n                scope.initShowModel = function (id) {\r\n                    scope.showMore[id] = true;\r\n                    scope.showLess[id] = false;\r\n                }\r\n                // Watch for any update in data change\r\n                scope.$watch('trackStatusService.getChange()', function (newVal, oldVal) {\r\n                    if (newVal !== oldVal && newVal) {\r\n                        // Data changed\r\n                        //dataChanged(scope.data);\r\n                        statusListData(scope.data);\r\n                        selectCycle(scope.data);\r\n                        updateTabs(scope.data);\r\n                        setTimeout(function () {\r\n                            scrollToLatestStatus();\r\n                        }, 1000);\r\n                    }\r\n\r\n                });\r\n                // Get string to be displayed for comments\r\n                scope.getString = function (a_str, a_count) {\r\n                    var strLen = a_str.length,\r\n                        str = \"\";\r\n                    if(strLen > a_count) {\r\n                        str = a_str.substr(0, a_count) +'...';\r\n                    } else {\r\n                        str = a_str.substr(0, a_count);\r\n                    }\r\n                        \r\n                    return str;\r\n                }\r\n                scope.applyStatusColor = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'approved':\r\n                        case 'accepted':\r\n                        case 'approval':\r\n                        case 'auto_approved':\r\n                            return 'color-approved';\r\n                            break;\r\n                        case 'approval pending':\r\n                        case 'delegated':\r\n                        case 'withdrawn':\r\n                        case 'approval withdrawn':\r\n                        case 'withdraw':\r\n                        case 'approval withdraw':\r\n                            return 'color-approved-pending';\r\n                            break;\r\n                        case 'rejected':\r\n                            return 'color-rejected';\r\n                            break;\r\n                        case 'pending':\r\n                            return 'color-approved-pending';\r\n                            break;\r\n                        case 'budget overriden':\r\n                            return 'color-bud-overrid';\r\n                        default:\r\n                            return 'grey-text';\r\n                    }\r\n                };\r\n                scope.IconStatus = function (ele) {\r\n                    var iconMap = {\r\n                        'pending': '',\r\n                        'approval': '',\r\n                        'rejected': '',\r\n                        'accepted': '',\r\n                        'approved': '',\r\n                        'auto_approved': '',\r\n                        'approval pending': '',\r\n                        'approval withdrawn': '',\r\n                        'withdrawn': '',\r\n                        'approval withdraw': '',\r\n                        'withdraw': ''\r\n                    }\r\n                    if (ele && iconMap.hasOwnProperty([ele.toLowerCase()])) {\r\n                        return '#icon_TSHexOutlin';\r\n                    } else {\r\n                        return '#icon_Info_i';\r\n                    }\r\n                };\r\n                scope.InnerIconStatus = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'pending':\r\n                        case 'approval pending' : \r\n                            return '#icon_TSPending';\r\n                            break;\r\n                        case 'approval':\r\n                        case 'accepted':\r\n                        case 'approved':\r\n                            return '#icon_TSAccepted';\r\n                            break;\r\n                        case 'rejected':\r\n                            return '#icon_TSRejected';\r\n                            break;\r\n                        case 'auto_approved':\r\n                            return '#Icon_AppAuto';\r\n                            break;\r\n                        case 'approval withdrawn':\r\n                        case 'withdrawn':\r\n                        case 'approval withdraw':\r\n                        case 'withdraw':\r\n                            return 'icon_TSWithdrawn';\r\n                            break;\r\n                        default:\r\n                            return '#icon_Info';\r\n                    }\r\n                };\r\n\r\n                // Currently not being used\r\n                scope.approvalGroupType = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'pool approval':\r\n                            return 'a-g-pool-approval';\r\n                            break;\r\n                        case 'parallel approval':\r\n                            return 'a-g-parallel-approval';\r\n                            break;\r\n                        case 'hr approval':\r\n                            return 'a-g-HR-approval';\r\n                            break;\r\n                        case 'group approval':\r\n                            return 'a-g-group-approval';\r\n                            break;\r\n                        default:\r\n                            return false;\r\n                    }\r\n                };\r\n                scope.slideDetailsTS = function (id) {\r\n                    var detailDataCopy = scope.data.datailedData,\r\n                        len = detailDataCopy.length;\r\n                    for (var indx = 0; indx < len; indx++) {\r\n                        if (detailDataCopy[indx].uniqueId === id) {\r\n                            detailDataCopy[indx].isDetailShow = !detailDataCopy[indx].isDetailShow;\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t\tscope.changeScreenSize = function (e) {\r\n\t\t\t\t\tscope.isFullscreen = !scope.isFullscreen;\r\n\t\t\t\t}\r\n\r\n                // add unique id to each actioner items\r\n                function addUniqueId() {\r\n                    var pItems = scope.data.datailedData,\r\n                        pLen = pItems.length;\r\n                    for (var indx = 0 ; indx < pLen; indx++) {\r\n                        var cArr = pItems[indx].actionerDetails,\r\n                            cLen = cArr.length;\r\n                        for (var c = 0; c < cLen; c++) {\r\n                            cArr[c].uniqueId = c +'-'+ uniqueIDGenerator();\r\n                        }\r\n                        pItems[indx].uniqueId = \"details\" + uniqueIDGenerator() + '-' + indx;\r\n                    }\r\n                }\r\n                addUniqueId();\r\n                // Unique id generator\r\n                function uniqueIDGenerator() {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                // Watch the legend change\r\n                scope.$watch('trackStatusService.getLegendChange()', function (newVal, oldVal) {\r\n                    if (newVal !== oldVal && newVal) {\r\n                        displayLegend(); // if legend changed\r\n                    }\r\n\r\n                });\r\n                // Approver legend\r\n                var defApproverLegend = [\r\n        \t        {\r\n        \t            \"icon\": \"#icon_AppOne\",\r\n        \t            \"color\": \"color-approved-pending\",\r\n        \t            \"text\": $translate.instant(\"POOL_APP_ATLEAST_ONE\")\r\n        \t        },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppAll\",\r\n\t                    \"color\": \"color-approved-pending\",\r\n\t                    \"text\": $translate.instant(\"PARALLEL_APPROVAL_FORALL\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppSingle\",\r\n\t                    \"color\": \"color-approved-pending\",\r\n\t                    \"text\": $translate.instant(\"INDIVIDUAL_MUST_APPROVE\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#Icon_AppAuto\",\r\n\t                    \"color\": \"color-approved\",\r\n\t                    \"text\": $translate.instant(\"AUTO_SYSTEM_APPROVE\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppHoc\",\r\n\t                    \"color\": \"color-add-Hoc\",\r\n\t                    \"text\": $translate.instant(\"ADHOC_APPROVER\")\r\n\t                }\r\n                ];\r\n                var defStatusLegend = [\r\n                        {\r\n                            \"icon\": \"#icon_TSAccepted\",\r\n                            \"color\": \"color-approved\",\r\n                            \"text\": $translate.instant(\"APPROVED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSRejected\",\r\n                            \"color\": \"color-rejected\",\r\n                            \"text\": $translate.instant(\"REJECTED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPartialAc\",\r\n                            \"color\": \"color-approved\",\r\n                            \"text\": $translate.instant(\"PARTIALLY_APPROVED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPartialRe\",\r\n                            \"color\": \"color-rejected\",\r\n                            \"text\": $translate.instant(\"PARTIALLY_REJECTED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPending\",\r\n                            \"color\": \"color-approved-pending\",\r\n                            \"text\": $translate.instant(\"PENDING\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSWithdrawn\",\r\n                            \"color\": \"color-approved-pending\",\r\n                            \"text\": $translate.instant(\"Approval Withdrawn\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_Info_i\",\r\n                            \"color\": \"grey-text\",\r\n                            \"text\": $translate.instant(\"INFORMATION\")\r\n                        }\r\n\r\n                ];\r\n                function displayLegend() {\r\n                    var statusLegend = (scope.statusLegend) ? scope.statusLegend : false; // status legend\r\n                    var approverLegend = (scope.approverLegend) ? scope.approverLegend : false;// approver legend\r\n                    scope.approverLegend = (!approverLegend) ? defApproverLegend : scope.approverLegend;                    \r\n                    scope.statusLegend = (!statusLegend) ? defStatusLegend : statusLegend;\r\n                };\r\n                displayLegend(); // will execute on load case\r\n                scope.isFullscreen = false; // default not full screen\r\n\t\t\t\tscope.changeScreenSize = function (e) {\r\n\t\t\t\t    scope.isFullscreen = !scope.isFullscreen;\r\n\t\t\t\t    if (scope.isFullscreen) {\r\n\t\t\t\t        scope.defContentCommentLen = 95;\r\n\t\t\t\t    } else {\r\n\t\t\t\t        scope.defContentCommentLen = 60;\r\n\t\t\t\t    }\r\n\t\t\t\t    return;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                // set scroll to latest status\r\n\t\t\t\tattr.$observe('focusLatest', function (newVal) {\r\n\t\t\t\t    if (newVal == \"true\") {\r\n\t\t\t\t        setTimeout(function () {\r\n\t\t\t\t            scrollToLatestStatus();\r\n\t\t\t\t        }, 200);\r\n\t\t\t\t        \r\n\t\t\t\t    } else {\r\n\t\t\t\t        //$('.scrollbar-outer').animate({ scrollTop: 0}, \"slow\");\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n                // Set z-index and position relative for tabs to pass content within shadow\r\n\t\t\t\tfunction setTabCss() {\r\n\t\t\t\t    var tabDiv = $('#trackStatusTabId').children(\":first\");\r\n\t\t\t\t    if (tabDiv.hasClass('borderBtmGray')) {\r\n\t\t\t\t        tabDiv.css({\r\n\t\t\t\t            'z-index': 2,\r\n\t\t\t\t            'position': 'relative'\r\n\t\t\t\t        });\r\n\t\t\t\t    }\r\n\t\t\t\t    \r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction scrollToLatestStatus() {\r\n\t\t\t\t    var idToSetScroll = \"\",\r\n                        $target = \"\",\r\n                        len = scope.data.datailedData.length,\r\n                        scrollIndex = (scope.scrollToStatus && scope.scrollToStatus != \"\") ? Number(scope.scrollToStatus) : (len - 1),\r\n\t\t\t\t        uniqueid = scope.data.datailedData[scrollIndex].uniqueId;// get the last element id and set the scroll\r\n\r\n\t\t\t\t    setTabCss();\r\n\t\t\t\t    \r\n\t\t\t\t    $target = $('[uniqueid=' + uniqueid + ']');\r\n\t\t\t\t    var scrollPosition = $('#scroll-8').scrollTop() + $target.parent().position().top;\r\n\t\t\t\t    $('.scrollbar-outer').animate({ scrollTop: scrollPosition }, \"slow\", 'swing');\r\n\t\t\t\t    return false;\r\n\t\t\t\t}\r\n            }\r\n            ,\r\n            controller: ['$scope', function ($scope) {\r\n                this.getFDownloadCallback = function () {\r\n                    return $scope.fileDownloadCallback;\r\n                },\r\n                this.getDownloadAllAttchment = function () {\r\n                    return $scope.downloadAllAttachment;\r\n                }\r\n            }]\r\n        }\r\n        }])\r\n\r\n        // To show attachments attached and downaloadable\r\n    .directive('attachmentsCallout', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict : 'EA',\r\n            scope: {\r\n                attachments: '=attachments',\r\n                identifier: '=identifier',\r\n                id: '=id'\r\n            },\r\n            require: '^smartTrackStatus',\r\n            templateUrl: 'shared/directives/uiElements/trackStatus/attachmentsDownload.html',\r\n            link: function (scope, elem, attr, cntrl) {\r\n                scope.downloadFile = cntrl.getFDownloadCallback();\r\n                scope.showDownloadAllAttachment = cntrl.getDownloadAllAttchment();\r\n                scope.filedownload = function (a_data) {\r\n                    scope.downloadFile(a_data);\r\n                }\r\n            }\r\n        }\r\n    }]);\r\n})(angular);","(function() {\r\n\r\n    /*\r\n     *  Prevent document's default scroll behaviour on space\r\n     */\r\n    window.onkeydown = function(e) {\r\n        if (e.keyCode == 32 && $(e.target).hasClass('ui-grid-focuser')) {\r\n            e.preventDefault();\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n    angular.module('SMART2')\r\n        .directive(\"uigridCompatible\", ['uiGridConstants', 'uiGridEditConstants', '$rootScope', uigridCompatibleFunc]);\r\n\r\n    function uigridCompatibleFunc(uiGridConstants, uiGridEditConstants, $rootScope) {\r\n        return {\r\n            require: ['?^uiGrid', '?^uiGridRenderContainer'],\r\n            restrict: 'A',\r\n            link: function(scope, element, attrs, controllers) {\r\n                var uiGridCtrl = controllers[0];\r\n                var renderContainerCtrl = controllers[1];\r\n\r\n                var isFocused = false;\r\n                var isSelectElement = false;\r\n\r\n                /*\r\n                 *  Remove previous cell scope if any\r\n                 */\r\n                if (window.lastRenderedElementScope) {\r\n                    try {\r\n                        window.lastRenderedElementScope.stopEdit();\r\n                        window.lastRenderedElementScope = undefined;\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                window.lastRenderedElementScope = scope;\r\n\r\n                /*\r\n                 *  On popup close listener\r\n                 */\r\n                var onPopupClosed = $rootScope.$on(\"popupClosed\", function () {\r\n                    uiGridCtrl.focus();\r\n                });\r\n\r\n                /*\r\n                *  On date component close listener\r\n                */\r\n                var onDatePopupClosed = $rootScope.$on(\"closedPopup\", function () {\r\n                    uiGridCtrl.focus();\r\n                });\r\n\r\n                /*\r\n                 *  On popup open listener\r\n                 */\r\n                var onPopupOpened = $rootScope.$on(\"popupOpened\", function () {\r\n                    document.activeElement.blur();\r\n                });\r\n\r\n                /*\r\n                 *  Viewport keydown broadcast listener\r\n                 */\r\n                var onViewPortKeyDown = uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown(scope, function (e, rowCol) {\r\n                    var inputText = element.find(\"input\");\r\n                    var anchor = element.find(\"a\");\r\n\r\n                    switch (e.keyCode) {\r\n                        case 32:\r\n                            if (anchor.length > 0) {\r\n                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                                anchor.trigger(\"click\");\r\n                            }\r\n                            else if (inputText.length > 0 && !isFocused) {\r\n                                inputText.focus();\r\n                                isFocused = true;\r\n                            }\r\n                            else if (isSelectElement) {\r\n                                select.focus();\r\n                            }\r\n                            break;\r\n                        case 9:\r\n                            scope.stopEdit();\r\n                            break;\r\n                        default:\r\n                            if (element.attr(\"type\") !== \"date\") {\r\n                                inputText.focus();\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 *  Stop cell editing and destroy the scope\r\n                 */\r\n                scope.stopEdit = function (e) {\r\n                    if (isSelectElement) {\r\n                        select.blur();\r\n                    }\r\n                    scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Element key down handler\r\n                 */\r\n                var onElementKeyDown = function (e) {\r\n                    switch (e.keyCode) {\r\n                        case 32:\r\n                            var inputText = element.find(\"input\");\r\n                            var anchor = element.find(\"a\");\r\n\r\n                            if (anchor.length > 0) {\r\n                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                                anchor.trigger(\"click\");\r\n                            }\r\n                            else if (isSelectElement) {\r\n                                select.focus();\r\n                            }\r\n                            break;\r\n                        case uiGridConstants.keymap.ESC:\r\n                            e.stopPropagation();\r\n                            scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);\r\n                            break;\r\n                    }\r\n                    if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {\r\n                        e.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;\r\n                        if (uiGridCtrl.cellNav.handleKeyDown(e) !== null) {\r\n                            scope.stopEdit(e);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //handle enter and tab for editing not using cellNav\r\n                        switch (e.keyCode) {\r\n                            case uiGridConstants.keymap.ENTER: // Enter (Leave Field)\r\n                            case uiGridConstants.keymap.TAB:\r\n                                scope.stopEdit(e);\r\n                                break;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                element.on('keydown', onElementKeyDown);\r\n\r\n\r\n                //  Focus select element\r\n                var select = element.find(\"select\");\r\n                isSelectElement = select.length > 0;\r\n                if (isSelectElement) {\r\n                    setTimeout(function () {\r\n                        select.focus();\r\n                    });\r\n                }\r\n\r\n\r\n\r\n                //  Trigger anchor tag's click event if cell clicked\r\n                if (window.isCellClicked) {\r\n                    setTimeout(function () {\r\n                        var anchor = element.find(\"a\");\r\n                        if (anchor.length > 0) {\r\n                            window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                            anchor.trigger('click');\r\n                        }\r\n                    });\r\n                    window.isCellClicked = false;\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Destroy broadcast listeners on scope destroy\r\n                 */\r\n                scope.$on('$destroy', function () {\r\n                    onPopupClosed();\r\n                    onDatePopupClosed();\r\n                    onPopupOpened();\r\n                    onViewPortKeyDown();\r\n                    element.off('keydown', onElementKeyDown);\r\n                });\r\n            }\r\n        };\r\n    };\r\n})();\r\n","//Body\r\n(function () {\r\n    angular.module('SMART2').directive('body', function () {\r\n        return {\r\n            restrict: 'E',\r\n            link: function postLink(scope, elem, attrs) {\r\n                function _wheelDelta(a) {\r\n                    if (a.originalEvent.wheelDelta == undefined) {\r\n                        return a.originalEvent.deltaY;\r\n                    } else {\r\n                        return -a.originalEvent.wheelDelta;\r\n                    }\r\n                }\r\n                IEscroll = function (event) {\r\n                    if ($(event.target).closest(\".dropdown-content\").length == 0 && $(event.target).closest(\"smart-scroll\").length == 0 && $(event.target).closest(\".scroll-inner-wrapp\").length == 0) {\r\n                        var dy = _wheelDelta(event);\r\n                        if ($(\"body\").css(\"overflow\") == \"hidden\") {\r\n                            return;\r\n                        };\r\n                        var evDelta = function () {\r\n                            if (dy < 0) {\r\n                                return dy < -90 ? 60 : 40;\r\n                            } else {\r\n                                return dy > 90 ? 60 : 40;\r\n                            }\r\n                        }();\r\n                        event.preventDefault();\r\n                        var wheelDelta = dy < 0 ? dy - evDelta : dy + evDelta;\r\n                        var currentScrollPosition = window.pageYOffset;\r\n                        $(this).scrollTop(currentScrollPosition + wheelDelta);\r\n                        \r\n                    }\r\n                }\r\n\r\n                //function IEscrollfn() {\r\n                //    if (attrs.customWheelForie == \"true\") {\r\n                //        $('html,body').bind(\"mousewheel\", IEscroll);\r\n                //    } else {\r\n                //        $('html,body').unbind(\"mousewheel\", IEscroll);\r\n                //    }\r\n                //};\r\n\r\n                if (navigator.appName == 'Microsoft Internet Explorer' || !!(navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/rv:11/)) || (typeof $.browser !== \"undefined\" && $.browser.msie == 1)) {\r\n                    $('html,body').bind(\"mousewheel\", IEscroll);\r\n\r\n                    //attrs.$observe(\"customWheelForie\", function () {\r\n                    //    IEscrollfn();\r\n                    //});\r\n                };\r\n            }\r\n        }\r\n    });\r\n})();\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('ckEditor', ['APPCONSTANTS', function (APPCONSTANTS) {\r\n        return {\r\n            require: '?ngModel',\r\n            link: function (scope, elm, attr, ngModel) {\r\n                var lang = \"en\";\r\n                if (APPCONSTANTS.userPreferences.UserBasicDetails.Culture) {\r\n                    lang = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n                }\r\n                var ckeditor = CKEDITOR.replace(\r\n\t\t\t\t\telm[0],\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    \"toolbar\": \"Basic\",\r\n\t\t\t\t\t    \"language\": lang\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n                if (!ngModel)\n                    return;\n\n                var updateModel = false;\n                ckeditor.on('instanceReady', function () {\r\n                    ckeditor.setData(ngModel.$viewValue);\r\n                });\n\n                function update() {\r\n                    if (updateModel) {\r\n                        ngModel.$setViewValue(ckeditor.getData());\r\n                    }\r\n                };\n\n                ngModel.$render = function (value) {\r\n                    ckeditor.setData(ngModel.$viewValue);\r\n                };\n\n                ckeditor.on('change', update);\n                ckeditor.on('focus', function (event) {\r\n                    updateModel = true;\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                \tckeditor.removeAllListeners();\r\n                \tCKEDITOR.remove(ckeditor);\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n\t'use strict';\r\n\r\n\tangular.module('SMART2').directive('colorPicker', ['$parse', '$timeout', function ($parse, $timeout) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\ttransclude: true,\r\n\t\t\tscope: {\r\n\t\t\t\tonSelect: '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tvar $colorPicker = $(element).find('.colorPicker');\r\n\t\t\t\t$colorPicker.on(\"change.color\", function (event, color) {\r\n\t\t\t\t\tif (color) {\r\n\t\t\t\t\t\tscope.$apply(function () {\r\n\t\t\t\t\t\t\tscope.onSelect({\r\n\t\t\t\t\t\t\t\t$event: { color: color }\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$colorPicker.colorpicker({\r\n\t\t\t\t\tshowOn: \"button\",\r\n\t\t\t\t\thistory: false\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$(element).bind('click', function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t$(this).find(\".colorPicker\").colorpicker(\"showPalette\");\r\n\t\t\t\t});\r\n\r\n\t\t\t\tattrs.$observe('color', function (value) {\r\n\t\t\t\t\t$colorPicker.colorpicker('val', value);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/colorPicker/colorPickerTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();\nangular.module('SMART2')\r\n.directive(\"sidenav\", [sideNavFunc])\r\n.directive(\"tabs\", [tabsFunc])\r\n.directive(\"dropdown\", [\"$compile\", \"$timeout\", dropdownFunc])\r\n.directive('inputDate', [\"$compile\", \"$timeout\", inputDateFunc])\r\n.directive(\"modal\", [\"$compile\", \"$timeout\", modal])\r\n.directive(\"slideToggle\", [slideToggleFunc])\r\n.directive(\"collapsible\", [collapsibleFunc]);\r\n\r\n/*side nav*/\r\nfunction sideNavFunc() {\r\n    return {\r\n        scope: {\r\n            menuwidth: \"@\",\r\n            closeonclick: \"@\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            \r\n            element.sideNav({\r\n                menuWidth: (angular.isDefined(scope.menuwidth)) ? scope.menuwidth : undefined,\r\n                edge: attrs.sidenav ? attrs.sidenav : \"left\",\r\n                closeOnClick: (angular.isDefined(scope.closeonclick)) ? scope.closeonclick == \"true\" : undefined\r\n            });\r\n        }\r\n    };\r\n}\r\n/*tabs*/\r\nfunction tabsFunc() {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.tabs();\r\n            \r\n        }\r\n    };\r\n}\r\n\r\nfunction dropdownFunc($compile, $timeout) {\r\n    return {\r\n        scope: {\r\n            inDuration: \"@\",\r\n            outDuration: \"@\",\r\n            constrainWidth: \"@\",\r\n            hover: \"@\",\r\n            alignment: \"@\",\r\n            gutter: \"@\",\r\n            belowOrigin: \"@\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            var dropdownCode;\r\n            $timeout(function () {\r\n                $compile(element.contents())(scope);\r\n                dropdownCode = element.attr(\"data-activates\");\r\n                element.dropdown({\r\n                    inDuration: (angular.isDefined(scope.inDuration)) ? scope.inDuration : undefined,\r\n                    outDuration: (angular.isDefined(scope.outDuration)) ? scope.outDuration : undefined,\r\n                    constrain_width: (angular.isDefined(scope.constrainWidth)) ? scope.constrainWidth : undefined,\r\n                    hover: (angular.isDefined(scope.hover)) ? scope.hover : undefined,\r\n                    alignment: (angular.isDefined(scope.alignment)) ? scope.alignment : undefined,\r\n                    gutter: (angular.isDefined(scope.gutter)) ? scope.gutter : undefined,\r\n                    belowOrigin: (angular.isDefined(scope.belowOrigin)) ? scope.belowOrigin : undefined\r\n                });\r\n            });\r\n            \r\n            scope.$on('closeDropdown', function(e, obj){\r\n                  if(obj.ddname===dropdownCode){\r\n                    element.trigger(\"close\");  \r\n                  }\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nfunction inputDateFunc($compile, $timeout) {\r\n   \r\n    var style = $('<style>#inputCreated_root {outline: none;}</style>');\r\n    $('html > head').append(style);\r\n\r\n    var dateFormat = function () {\r\n\r\n        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\r\n            timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\r\n            timezoneClip = /[^-+\\dA-Z]/g,\r\n            pad = function (val, len) {\r\n                val = String(val);\r\n                len = len || 2;\r\n                while (val.length < len) {\r\n                    val = \"0\" + val;\r\n                }\r\n                return val;\r\n            };\r\n\r\n        return function (date, mask, utc) {\r\n\r\n            var dF = dateFormat;\r\n\r\n            if (arguments.length === 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\r\n                mask = date;\r\n                date = undefined;\r\n            }\r\n\r\n                    \r\n            date = date ? new Date(date) : new Date();\r\n            if (isNaN(date)) throw SyntaxError(\"invalid date\");\r\n\r\n            mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\r\n\r\n             \r\n            if (mask.slice(0, 4) == \"UTC:\") {\r\n                mask = mask.slice(4);\r\n                utc = true;\r\n            }\r\n\r\n            var _ = utc ? \"getUTC\" : \"get\",\r\n                d = date[_ + \"Date\"](),\r\n                D = date[_ + \"Day\"](),\r\n                m = date[_ + \"Month\"](),\r\n                y = date[_ + \"FullYear\"](),\r\n                H = date[_ + \"Hours\"](),\r\n                M = date[_ + \"Minutes\"](),\r\n                s = date[_ + \"Seconds\"](),\r\n                L = date[_ + \"Milliseconds\"](),\r\n                o = utc ? 0 : date.getTimezoneOffset(),\r\n                flags = {\r\n                    d: d,\r\n                    dd: pad(d),\r\n                    ddd: dF.i18n.dayNames[D],\r\n                    dddd: dF.i18n.dayNames[D + 7],\r\n                    m: m + 1,\r\n                    mm: pad(m + 1),\r\n                    mmm: dF.i18n.monthNames[m],\r\n                    mmmm: dF.i18n.monthNames[m + 12],\r\n                    yy: String(y).slice(2),\r\n                    yyyy: y,\r\n                    h: H % 12 || 12,\r\n                    hh: pad(H % 12 || 12),\r\n                    H: H,\r\n                    HH: pad(H),\r\n                    M: M,\r\n                    MM: pad(M),\r\n                    s: s,\r\n                    ss: pad(s),\r\n                    l: pad(L, 3),\r\n                    L: pad(L > 99 ? Math.round(L / 10) : L),\r\n                    t: H < 12 ? \"a\" : \"p\",\r\n                    tt: H < 12 ? \"am\" : \"pm\",\r\n                    T: H < 12 ? \"A\" : \"P\",\r\n                    TT: H < 12 ? \"AM\" : \"PM\",\r\n                    Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\r\n                    o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\r\n                    S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\r\n                };\r\n\r\n            return mask.replace(token, function ($0) {\r\n                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\r\n            });\r\n        };\r\n    }();\r\n\r\n\r\n    dateFormat.masks = {\r\n        \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\r\n        shortDate: \"m/d/yy\",\r\n        mediumDate: \"mmm d, yyyy\",\r\n        longDate: \"mmmm d, yyyy\",\r\n        fullDate: \"dddd, mmmm d, yyyy\",\r\n        shortTime: \"h:MM TT\",\r\n        mediumTime: \"h:MM:ss TT\",\r\n        longTime: \"h:MM:ss TT Z\",\r\n        isoDate: \"yyyy-mm-dd\",\r\n        isoTime: \"HH:MM:ss\",\r\n        isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\r\n        isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\r\n    };\r\n\r\n        \r\n    dateFormat.i18n = {\r\n        dayNames: [\r\n            \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\r\n            \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n        ],\r\n        monthNames: [\r\n            \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\r\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ]\r\n    };\r\n\r\n       \r\n    Date.prototype.format = function (mask, utc) {\r\n        return dateFormat(this, mask, utc);\r\n    };\r\n\r\n       \r\n    var isValidDate = function (date) {\r\n        if (Object.prototype.toString.call(date) === '[object Date]') {\r\n            return !isNaN(date.getTime());\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return {\r\n        require: 'ngModel',\r\n        scope: {\r\n            container: \"@\",\r\n            format: \"@\",\r\n            formatSubmit: \"@\",\r\n            monthsFull: \"@\",\r\n            monthsShort: \"@\",\r\n            weekdaysFull: \"@\",\r\n            weekdaysLetter: \"@\",\r\n            firstDay: \"=\",\r\n            disable: \"=\",\r\n            today: \"=\",\r\n            clear: \"=\",\r\n            close: \"=\",\r\n            selectYears: \"=\",\r\n            onStart: \"&\",\r\n            onRender: \"&\",\r\n            onOpen: \"&\",\r\n            onClose: \"&\",\r\n            onSet: \"&\",\r\n            onStop: \"&\",\r\n            ngReadonly: \"=?\",\r\n            max: \"@\",\r\n            min: \"@\"\r\n        },\r\n        link: function (scope, element, attrs, ngModelCtrl) {\r\n\r\n            ngModelCtrl.$formatters.unshift(function (modelValue) {\r\n                if (modelValue) {\r\n                    var date = new Date(modelValue);\r\n                    return (angular.isDefined(scope.format)) ? date.format(scope.format) : date.format('d mmmm, yyyy');\r\n        }\r\n                return null;\r\n            });\r\n\r\n            var monthsFull = (angular.isDefined(scope.monthsFull)) ? scope.$eval(scope.monthsFull) : undefined,\r\n                monthsShort = (angular.isDefined(scope.monthsShort)) ? scope.$eval(scope.monthsShort) : undefined,\r\n                weekdaysFull = (angular.isDefined(scope.weekdaysFull)) ? scope.$eval(scope.weekdaysFull) : undefined,\r\n                weekdaysLetter = (angular.isDefined(scope.weekdaysLetter)) ? scope.$eval(scope.weekdaysLetter) : undefined;\r\n\r\n\r\n            $compile(element.contents())(scope);\r\n            if (!(scope.ngReadonly)) {\r\n                $timeout(function () {\r\n                    var pickadateInput = element.pickadate({\r\n                        container: (angular.isDefined(scope.container)) ? scope.container : 'body',\r\n                        format: (angular.isDefined(scope.format)) ? scope.format : undefined,\r\n                        formatSubmit: (angular.isDefined(scope.formatSubmit)) ? scope.formatSubmit : undefined,\r\n                        monthsFull: (angular.isDefined(monthsFull)) ? monthsFull : undefined,\r\n                        monthsShort: (angular.isDefined(monthsShort)) ? monthsShort : undefined,\r\n                        weekdaysFull: (angular.isDefined(weekdaysFull)) ? weekdaysFull : undefined,\r\n                        weekdaysLetter: (angular.isDefined(weekdaysLetter)) ? weekdaysLetter : undefined,\r\n                        firstDay: (angular.isDefined(scope.firstDay)) ? scope.firstDay : 0,\r\n                        disable: (angular.isDefined(scope.disable)) ? scope.disable : undefined,\r\n                        today: (angular.isDefined(scope.today)) ? scope.today : undefined,\r\n                        clear: (angular.isDefined(scope.clear)) ? scope.clear : undefined,\r\n                        close: (angular.isDefined(scope.close)) ? scope.close : undefined,\r\n                        selectYears: (angular.isDefined(scope.selectYears)) ? scope.selectYears : undefined,\r\n                        onStart: (angular.isDefined(scope.onStart)) ? function () { scope.onStart(); } : undefined,\r\n                        onRender: (angular.isDefined(scope.onRender)) ? function () { scope.onRender(); } : undefined,\r\n                        onOpen: (angular.isDefined(scope.onOpen)) ? function () { scope.onOpen(); } : undefined,\r\n                        onClose: (angular.isDefined(scope.onClose)) ? function () { scope.onClose(); } : undefined,\r\n                        onSet: (angular.isDefined(scope.onSet)) ? function () { scope.onSet(); } : undefined,\r\n                        onStop: (angular.isDefined(scope.onStop)) ? function () { scope.onStop(); } : undefined\r\n                    });\r\n                 \r\n                    var picker = pickadateInput.pickadate('picker');\r\n\r\n            \r\n                    scope.$watch('max', function (newMax) {\r\n                        if (picker) {\r\n                            var maxDate = new Date(newMax);\r\n                            picker.set({ max: isValidDate(maxDate) ? maxDate : false });\r\n                        }\r\n                    });\r\n                    scope.$watch('min', function (newMin) {\r\n                        if (picker) {\r\n                            var minDate = new Date(newMin);\r\n                            picker.set({ min: isValidDate(minDate) ? minDate : false });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    };\r\n};\r\n/*modal*/\r\nvar modalCounter = 0;\r\n\r\n\r\nfunction modal($compile, $timeout) {\r\n    return {\r\n        restrict: 'E',\r\n        scope: {},\r\n        link: function (scope, element, attrs) {\r\n            scope.templateUrl = attrs.templateUrl;\r\n            scope.title = attrs.title;\r\n            modalCounter = modalCounter + 1;\r\n            scope.modalCounter = modalCounter;\r\n\r\n            setTimeout(function () {\r\n                angular.element('#modalButton' + modalCounter).leanModal();\r\n            });\r\n        },\r\n        template: '<div><a id=\"modalButton{{modalCounter}}\" class=\"waves-effect waves-light btn modal-trigger\" href=\"#modal{{modalCounter}}\" modal>{{title}}</a><div id=\"modal{{modalCounter}}\" class=\"modal modal-sm\" ng-include=\"templateUrl\"></div>'\r\n    };\r\n}\r\n\r\nfunction slideToggleFunc() {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {},\r\n        controller: function ($scope) { },\r\n        link: function (scope, element, attr) {\r\n            element.bind('click', function () {\r\n                var $slideBox = angular.element(attr.slideToggle);\r\n                var slideDuration = parseInt(attr.slideToggleDuration, 10) || 200;\r\n                $slideBox.stop().slideToggle(slideDuration);\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\n/*tabs*/\r\nfunction collapsibleFunc() {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            element.collapsible();\r\n        }\r\n    };\r\n}\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('notification', [function () {\r\n        var Obj = {};\r\n        Obj.show = false;\r\n        Obj.onCallback = undefined;\r\n\r\n        Obj.on = function (callback) {\r\n            Obj.onCallback = callback;\r\n        };\r\n\r\n        Obj.notify = function (config, callback) {\r\n            this.show = true;\r\n            this.config = config;\r\n            this.broadcastItem();\r\n            this.resultCallBack = function (result) {\r\n                if (typeof (callback) == 'function') {\r\n                    setTimeout(function () {\r\n                        callback(result);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n\r\n        Obj.broadcastItem = function () {\r\n            angular.isFunction(Obj.onCallback) && Obj.onCallback();\r\n        };\r\n\r\n        return Obj;\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartNotification', ['$rootScope', 'notification', '$translate', '$sce', '$timeout', '$focusOnField', 'browserSniffing', function ($rootScope, notification, $translate, $sce, $timeout, $focusOnField, browserSniffing) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            scope: {\r\n                showN: \"@\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var topPositionBeforeModalOpen = 0;\r\n                scope.isChrome = (navigator.userAgent.indexOf(\"Chrome\") != -1) ? \"remindMeOption\" : \"\";\r\n                /*\r\n                 *  Unbind window keyup listener and assign tabindex back to .picker elements\r\n                 */\r\n                var reset = function () {\r\n                    $(window).off('keyup', onWindowKeyUp);\r\n                    angular.element('.picker').attr(\"tabindex\", 0);\r\n                    angular.element(document).scrollTop(topPositionBeforeModalOpen);\r\n                };\r\n\r\n                /*\r\n                 *  window on key up event listener\r\n                 */\r\n                var onWindowKeyUp = function (e) {\r\n                    if (angular.element(e.target).closest('.modal').length == 0 && e.keyCode == 9) {\r\n                        angular.element(element.find(':focusable')[0]).focus();\r\n                    }\r\n                };\r\n\r\n                /*\r\n                 *  hide notification pop up when route changed\r\n                 */\r\n\r\n                scope.$on('$stateChangeSuccess', function () {\r\n                    if (scope.showN && !(scope.config.type == \"unsupportedBrowserVersion\" || scope.config.type == \"unsupportedBrowser\")) {\r\n                        scope.showN = false;\r\n                        cleanUpNotificationPopup();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 *  On notification listener\r\n                 */\r\n                scope.dismissible = true;\r\n                notification.on(function () {\r\n                    scope.dismissible = angular.isDefined(notification.config.dismissible) ? notification.config.dismissible : true;\r\n                    scope.config = notification.config;\r\n                    scope.buttons = scope.config.buttons;\r\n                    switch (scope.config.type) {\r\n                        case \"success\":\r\n                            scope.notifyClass = 'notify-success';\r\n                            scope.title = $translate.instant(\"notificationSuccessMsg\");\r\n                            scope.icon = \"#icon_CircleCheck\";\r\n                            break;\r\n                        case \"error\":\r\n                            scope.notifyClass = 'notify-error';\r\n                            scope.title = $translate.instant(\"notificationErrorMsg\");\r\n                            scope.icon = \"#icon_Exclamation\";\r\n                            break;\r\n                        case \"warning\":\r\n                            scope.notifyClass = 'notify-warning';\r\n                            scope.icon = \"#icon_Warning\";\r\n                            scope.title = $translate.instant(\"notificationWarningMsg\");\r\n                            break;\r\n                        case \"confirm\":\r\n                            scope.notifyClass = 'notify-confirm';\r\n                            scope.icon = \"#icon_Help\";\r\n                            scope.title = $translate.instant(\"notificationConfirmationMsg\");\r\n                            break;\r\n                        case \"inform\":\r\n                            scope.notifyClass = 'notify-information';\r\n                            scope.icon = \"#icon_Info\";\r\n                            scope.title = $translate.instant(\"notificationInformationMsg\");\r\n                            break;\r\n                        case \"sessionTimeOut\":\r\n                            scope.notifyClass = 'notify-session-timeout';\r\n                            scope.icon = \"#icon_AlertTimer\";\r\n                            scope.title = $translate.instant(\"notificationSessionTimeOut\");\r\n                            scope.dismissible = false;\r\n                            break;\r\n                        case \"sessionExpire\":\r\n                            scope.notifyClass = 'notify-session-expire';\r\n                            scope.icon = \"#icon_AlertTimer\";\r\n                            scope.title = $translate.instant(\"notificationSessionExpiredMsg\");\r\n                            scope.dismissible = false;\r\n                            break;\r\n                        case \"unsupportedBrowserVersion\":\r\n                            scope.notifyClass = \"notify-unsupported-browser-version\";\r\n                            scope.titleTextColor = \"browser-version-header-text\";\r\n                            scope.title = $translate.instant(\"notificationUnsupportedBrowserVersionMsg\");\r\n                            break;\r\n                        case \"unsupportedBrowser\":\r\n                            scope.notifyClass = \"notify-unsupported-browser\";\r\n                            scope.titleTextColor = \"browser-unsupported-header-text\";\r\n                            scope.title = $translate.instant(\"notificationUnsupportedBrowserMsg\");\r\n                    };\r\n\r\n                    scope.onChange = function (remindMeDate) {\r\n                        scope.showN = false;\r\n                        scope.$digest();\r\n                    };\r\n\r\n\r\n                    //scope.dismissible = (typeof notification.config.dismissible != \"undefined\")?(notification.config.dismissible) ? true : false : scope.dismissible;\r\n                    scope.message = $sce.trustAsHtml(scope.config.message);\r\n                    scope.checkboxText = scope.config.checkMessage;\r\n                    scope.customTemplate = false;\r\n                    if (typeof scope.config[\"isMultipleCheck\"] != \"undefined\" && scope.config[\"isMultipleCheck\"]) {\r\n                        scope.customTemplate = true;\r\n                        if (typeof scope.config.modalType == \"undefined\") {\r\n                            scope.config.modalType = \"small\"\r\n                        }\r\n                        for (var i in scope.config.multipleCheckList) {\r\n                            scope.config.multipleCheckList[i].model = {};\r\n                            scope.config.multipleCheckList[i].model.modelName = scope.config.multipleCheckList[i][\"checkContext\"];\r\n                            switch (scope.config.multipleCheckList[i].type) {\r\n                                case \"check\":\r\n                                    scope.config.multipleCheckList[i].model.isCheck = false;\r\n                                    break;\r\n                                case \"radio\":\r\n                                    scope.config.multipleCheckList[i].model.isCheck = {\r\n                                        \"title\": \"\"\r\n                                    };\r\n                                case \"select\":\r\n                                    if (typeof scope.config.multipleCheckList[i].preSelected != \"undefined\") {\r\n                                        scope.config.multipleCheckList[i].model.isCheck = scope.config.multipleCheckList[i].preSelected;\r\n                                    } else {\r\n                                        scope.config.multipleCheckList[i].model.isCheck = {\r\n                                            \"title\": \"\"\r\n                                        };\r\n                                    }\r\n                                    break;\r\n                            }\r\n                            if (typeof scope.config.multipleCheckList[i][\"header\"] != \"undefined\" && typeof scope.config.multipleCheckList[i][\"header\"] == \"string\") {\r\n                                scope.config.multipleCheckList[i][\"header\"] = $sce.trustAsHtml(scope.config.multipleCheckList[i][\"header\"]);\r\n                            }\r\n                            if (typeof scope.config.multipleCheckList[i][\"label\"] == \"string\") {\r\n                                scope.config.multipleCheckList[i][\"label\"] = $sce.trustAsHtml(scope.config.multipleCheckList[i][\"label\"]);\r\n                            }\r\n                        }\r\n                        for (var i in scope.config.buttons) {\r\n                            if (typeof scope.config.buttons[i].disableBtn != \"undefined\") {\r\n                                scope.config.buttons[i].disableBtn = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.isCheckSelect = false;\r\n                    if (typeof scope.config.isCheckSelect != 'undefined') {\r\n                        scope.isCheckSelect = scope.config.isCheckSelect;\r\n                    }\r\n                    scope.showN = notification.show;\r\n\r\n                    angular.element('body').css('overflow', 'hidden');\r\n                    $timeout(function () {\r\n                        var $firstField = element.find(':focusable')[0];\r\n                        $focusOnField($firstField);\r\n                        $(window).on('keyup', onWindowKeyUp);\r\n                        //  remove picker tabindex when popup to avoid focus on picker element\r\n                        angular.element('.picker').removeAttr(\"tabindex\");\r\n                        scope.notifyClass = scope.notifyClass + ' notificationanimate--active';\r\n                    }, 250);\r\n                    topPositionBeforeModalOpen = angular.element(document).scrollTop();\r\n                });\r\n\r\n                scope.showN = false;\r\n                scope.bindforTab = false;\r\n                scope.overlayCLicked = function () {\r\n                    if (scope.dismissible) {\r\n                        //scope.showN = false;\r\n                        //cleanUpNotificationPopup();\r\n                    }\r\n                }\r\n                scope.$on('LastRepeaterElement', function () {\r\n                    scope.bindforTab = true;\r\n                });\r\n                scope.onChangeNotification = function () {\r\n                    var cnt = 0;\r\n                    for (var i in scope.config.multipleCheckList) {\r\n                        if (scope.config.multipleCheckList[i].model.isCheck) {\r\n                            cnt++;\r\n                        }\r\n                    }\r\n                    for (var i in scope.config.buttons) {\r\n                        if (typeof scope.config.buttons[i].disableBtn != \"undefined\") {\r\n                            if (cnt > 0) {\r\n                                scope.config.buttons[i].disableBtn = false;\r\n                            } else {\r\n                                scope.config.buttons[i].disableBtn = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n                scope.clickCallbackFunction = function (e) {\r\n                    $timeout(function () {\r\n                        scope.showN = false;\r\n                        scope.bindforTab = false;\r\n                        var responceObj = {\r\n                            \"result\": e\r\n                        };\r\n                        if (scope.customTemplate) {\r\n                            for (var i in scope.config.multipleCheckList) {\r\n                                responceObj[scope.config.multipleCheckList[i].model.modelName] = scope.config.multipleCheckList[i].model.isCheck\r\n                            }\r\n                        } else {\r\n                            responceObj[\"isChecked\"] = scope.isCheckSelect;\r\n                        }\r\n                        cleanUpNotificationPopup();\r\n                        notification.resultCallBack(responceObj);\r\n                        $rootScope.$broadcast(\"closedPopup\");\r\n                    });\r\n                };\r\n                function cleanUpNotificationPopup() { // empty 'scope.buttons' object to avoid getting display multiple notification buttons\r\n                    scope.notifyClass = '';\r\n                    scope.buttons = [];\r\n                    angular.element('body').css('overflow', '');\r\n                    angular.element('.notification-massage .modal-content').css('display', 'none');\r\n                    angular.element('.notification-massage .modal-footer').css('display', 'none');\r\n                }\r\n                scope.$on('$destroy', function () {\r\n                    reset();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/notification/notificationTemplate.html',\r\n        }\r\n    }]);\r\n})();\n(function() {\r\n\t'use strict';\r\n\tangular\r\n    .module('SMART2')\r\n    .directive('onCaptureClick', ['$parse', function ($parse) {\r\n      return {\r\n        restrict: 'A',\r\n        compile: function(element, attrs) {\r\n          var fn = $parse(attrs.onCaptureClick);\r\n          return function(scope, element) {\r\n            element[0].addEventListener('click', function(event) {\r\n              scope.$apply(function() {\r\n                fn(scope, {\r\n                  $event: event\r\n                });\r\n              });\r\n            }, true);\r\n          };\r\n        }\r\n      }\r\n    }]);\r\n})(angular);\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('onLoad', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            scope: {\r\n                onLoadCallback: '&',\r\n            },\n            link: function (scope, element, attrs) {\r\n                (scope.onLoadCallback) ? scope.onLoadCallback = scope.$eval(scope.onLoadCallback) : null;\n                if (angular.isFunction(scope.onLoadCallback)) {\r\n                    $timeout(function () {\r\n                        scope.onLoadCallback();\r\n                    }, 0);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();\n\n    (function() {\r\n    \t'use strict';        \r\n    \tangular.module('SMART2').directive('profilePic', ['notification', '$translate', function (notification, $translate) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.isProfilePicEditable = false;\r\n            scope.isUserProfile = false;\r\n            if (attrs.circular == 'true') {\r\n                scope.isUserProfile = true;\r\n            }\r\n            if (attrs.editable == 'true') {\r\n                scope.isProfilePicEditable = true;\r\n            }\r\n            scope.dummyimg = false;\r\n            if (attrs.dummyimg == 'true') {\r\n                scope.dummyimg = true;\r\n            }\r\n     \r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? 'shared/resources/images/dummyImage.jpg' : attrs.imgsrc;\r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? scope.dummyimg = true : scope.dummyimg = false;\r\n            //var dummySrc = typeof attrs.dummysrc === 'undefined' ? 'shared/resources/images/user_default_BIG.PNG' : attrs.dummysrc;\r\n            //scope.dummyimg = typeof attrs.dummyimg === 'undefined' ? false : attrs.dummyimg;\r\n            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n            //debugger;\r\n            if (scope.isUserProfile == true) {\r\n                if (!scope.dummyimg) {\r\n                    scope.imgsrc = 'shared/resources/images/dummyImage.jpg';\r\n                    //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n                }\r\n            }\r\n            else {\r\n                if (!scope.dummyimg) {\r\n                    scope.imgsrc = 'shared/resources/images/kelloggs_logo.png';\r\n                }\r\n            }\r\n            var readURL = function (input) {\r\n                if (input.files && input.files[0]) {\r\n                    var reader = new FileReader();\r\n                    reader.onload = function (e) {\r\n                        angular.element('.user-profile').addClass('is-profile-pic');\r\n                        scope.dummyimg = false;\r\n                        scope.imgsrc = e.target.result;\r\n                        scope.$apply();\r\n                    }\r\n                    reader.readAsDataURL(input.files[0]);\r\n                }\r\n            }\r\n\r\n            element.find(\"#callFileFOrProfile\").on('change', function () {\r\n                readURL(this);\r\n            });\r\n\r\n            scope.profilePicEdit = function () {\r\n               element.find(\"#callFileFOrProfile\").get(0).click();\r\n            }\r\n\r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? 'shared/resources/images/dummyImage.jpg' : attrs.imgsrc;\r\n            // var imgsrc = typeof attrs.imgsrc === 'undefined' ? scope.dummyimg = true : scope.dummyimg = false;\r\n            //var dummySrc = typeof attrs.dummysrc === 'undefined' ? 'shared/resources/images/user_default_BIG.PNG' : attrs.dummysrc;\r\n            //scope.dummyimg = typeof attrs.dummyimg === 'undefined' ? false : attrs.dummyimg;\r\n            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n            // scope.isDeleted = false;\r\n\r\n            scope.clearProfilePicEdit = function () {\r\n            \tvar confi = {\r\n            \t\ttype: \"confirm\",\r\n            \t\tmessage: \"<p class='left-align'>\" + $translate.instant(\"confirmationMsg\") + \"</p>\",\r\n            \t\t//checkMessage: \"Do not show again.\",\r\n            \t\tbuttons: [\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t    \"title\": $translate.instant(\"notificationButtonYes\"),\r\n\t\t    \t\t\t\t\"result\": \"yes\"\r\n\t\t    \t\t\t},\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t    \"title\": $translate.instant(\"cancelBtn\"),\r\n\t\t    \t\t\t\t\"result\": \"no\"\r\n\t\t    \t\t\t}\r\n            \t\t]\r\n            \t};\r\n            \tnotification.notify(confi, function (responce) {\r\n            \t\tif (responce.result == \"yes\") {\r\n            \t\t\tangular.element('.overL').prev().toggleClass('changeImage');\r\n            \t\t\t\r\n\r\n            \t\t\t//if (angular.element('.overL').prev().hasClass(\"changeImage\") == true) {\r\n            \t\t\t//    scope.imgsrc = imgsrc;\r\n            \t\t\t\t\r\n            \t\t\t//\t//scope.isDeleted = true;\r\n            \t\t\t//}\r\n            \t\t\tif (angular.element('.user-profile img').hasClass(\"changeImage\")) {\r\n            \t\t\t    scope.imgsrc = false;\r\n            \t\t\t   element.find(\"#callFileFOrProfile\").val('');\r\n            \t\t\t    scope.dummyimg = true;\r\n            \t\t\t    //scope.isDeleted = true;\r\n            \t\t\t    if (scope.isUserProfile == true) {            \t\t\t       \r\n            \t\t\t        scope.imgsrc = 'shared/resources/images/user_default_BIG.PNG';\r\n            \t\t\t        angular.element('.user-profile').removeClass('is-profile-pic');\r\n            \t\t\t            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;            \t\t\t        \r\n            \t\t\t    }\r\n            \t\t\t}\r\n            \t\t\telse {\r\n            \t\t\t\tscope.imgsrc = dummySrc;\r\n            \t\t\t\tscope.isDeleted = false;\r\n            \t\t\t\tangular.element('.user-profile').addClass('is-profile-pic');\r\n            \t\t\t\t//console.log(isDeleted)\r\n            \t\t\t}\r\n            \t\t} else {\r\n            \t\t\treturn;\r\n            \t\t}\r\n            \t});\r\n            }\r\n        },\r\n        templateUrl: 'shared/components/directives/profilePic/profilePic.html'\r\n    };\r\n}]);\r\n    })();\nangular.module('SMART2').directive('progressMeter', ['$timeout', function ($timeout) {\r\n\treturn {\r\n\t\trestrict: 'EA',\r\n\t\treplace: true,\r\n\t\tscope: {\r\n\t\t\tpercent: \"=?\"\r\n\t\t},\r\n\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\tvar unbindPercent = scope.$watch('percent', function (newVal, oldVal) {\r\n\t\t\t\t//if (newVal) {\r\n\t\t\t\t\tgetMeter();\r\n\t\t\t\t//}\r\n\t\t\t});\r\n\r\n\t\t\tfunction getMeter() {\r\n\t\t\t\tscope.value = parseInt(scope.percent);\r\n\t\t\t\tif (scope.value) {\r\n\t\t\t\t\tscope.c = Math.PI * (25 * 2);\r\n\t\t\t\t\tscope.pct = 156;\r\n\t\t\t\t\tif (scope.value < 0)\r\n\t\t\t\t\t\tscope.value = 0;\r\n\t\t\t\t\tif (scope.value > 100)\r\n\t\t\t\t\t\tscope.value = 100;\r\n\t\t\t\t\t$timeout(function () {\r\n\t\t\t\t\t\tscope.pct = ((100 - scope.value) / 100) * scope.c;\r\n\t\t\t\t\t\tscope.strokeStyle = { \"stroke-dashoffset\": scope.pct }\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\tunbindPercent();\r\n\t\t\t});\r\n\t\t},\r\n\t\ttemplateUrl: 'shared/directives/progressMeter/progressMeterTemplate.html'\r\n\t}\r\n}]);\n//div resizer\r\nangular.module('SMART2').directive('isResizable', function () {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            'handle': '@',\r\n            'onresize': '&',\r\n            'onstart': '&',\r\n            'onstop': '&'\r\n        },\r\n        link: function postLink(scope, elem, attrs) {\r\n            elem.resizable({\r\n                handles: scope.handle,\r\n                resize: function (event, ui) {\r\n                    scope.onresize({ event: event, ui: ui })\r\n                },\r\n                start: function (event, ui) {\r\n                    scope.onstart({ event: event, ui: ui });\r\n                }\r\n                 ,\r\n                stop: function (event, ui) {\r\n\r\n                    scope.onstop({ event: event, ui: ui });\r\n                }\r\n            });\r\n\r\n            if (attrs.maxheight != undefined) {\r\n                attrs.$observe('maxheight', function () {\r\n                    elem.resizable(\"option\", \"maxHeight\", attrs.maxheight);\r\n                });\r\n            }\r\n            if (attrs.minheight != undefined) {\r\n                attrs.$observe('minheight', function () {\r\n                    elem.resizable(\"option\", \"minHeight\", attrs.minheight);\r\n                });\r\n\r\n            }\r\n            if (attrs.maxwidth != undefined) {\r\n                attrs.$observe('maxwidth', function () {\r\n                    elem.resizable(\"option\", \"maxWidth\", attrs.maxwidth);\r\n                });\r\n            }\r\n            if (attrs.minwidth != undefined) {\r\n                attrs.$observe('minwidth', function () {\r\n                    elem.resizable(\"option\", \"minWidth\", attrs.minwidth);\r\n                });\r\n\r\n            }\r\n            if (attrs.alsoResizeRevert != undefined) {\r\n                elem.resizable(\"option\", \"alsoResizeReverse\", attrs.alsoResizeRevert);\r\n            }\r\n            if (attrs.alsoResize != undefined) {\r\n                elem.resizable(\"option\", \"alsoResize\", attrs.alsoResizeRevert);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n//window resizer\r\nangular.module('SMART2').directive('smartWindowResizer', ['$window', function ($window) {\r\n    return {\r\n        restrict: 'AE',\r\n        replace:false,\r\n        scope: {\r\n            'pageHeight': '@'\r\n        },\r\n        link: function postLink(scope, elem, attrs) {\r\n            \r\n            scope.pageHeight = ($window.innerHeight - 114) + 'px';\r\n            elem.css('height', scope.pageHeight);\r\n\r\n            angular.element($window).bind('resize', function (e) {\r\n                if (scope.fixedSubHeader) {\r\n                    scope.pageHeight = ($window.innerHeight - 50) + 'px';\r\n                }\r\n                else {\r\n                    scope.pageHeight = ($window.innerHeight - 114) + 'px';\r\n                }\r\n\r\n                scope.$apply();\r\n                console.log(scope.pageHeight);\r\n                elem.css('height', scope.pageHeight);\r\n            });\r\n\r\n        }\r\n    };\r\n}]);\nangular.module('SMART2').directive('scrollContent', ['$window', '$filter', '$rootScope', 'scrollPosition', function ($window, $filter, $rootScope, scrollPosition) {\r\n\treturn {\r\n\t\trestrict: 'A',\r\n\t\tscope: true,\r\n\t\tlink: function ($scope, elem, $attrs) {\r\n\t\t\t$rootScope.$on('$locationChangeSuccess', function() {\r\n\t\t\t\tif (scrollPosition.getEnableScroll() == true) {\r\n\t\t\t\t\tvar foundItem = $filter('filter')(scrollPosition.get(), { 'currentUrl': $window.location.hash }, true)[0];\r\n\t\t\t\t\tif(foundItem)\r\n\t\t\t\t\t\tscrollPosition.performScroll(scrollPosition.get()[scrollPosition.get().indexOf(foundItem)].scroll, 500);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tangular.element($window).bind('scroll', function (e) {\r\n\t\t\t\tvar windowScrollTop = this.scrollY || this.pageYOffset;\r\n\t\t\t\tif (windowScrollTop > 0)\r\n\t\t\t\tscrollPosition.set(windowScrollTop, $window.location.hash);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}]);\n  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Sliding-menu\n   * @description This directive is useful for creating a sliding menu.\n   * \n   * @attr {Number} right\n   *    Menu's right position\n   * @attr {Number} top\n   *    Menu's top position\n   * @attr {Boolean} show\n   *    Sliding menu will toggle as soon as value of this attribute changes\n   * @attr {Boolean} modify-parent-style\n   *    This attribute is useful when parent does not need to animated. For e.g. Default behaviour is when 'show' is set to true, \n   *    parent element gets resized depending upon the width of sliding-menu.\n   * @attr {Boolean} detach-default-class\n   *    If this attribute is set to true, default class will not be applied to directive's template\n   * @attr {String} include-template\n   *    Template to be used\n   * @attr {Object} tabData\n   *    used for two-way communication based on this property\n   *\n   * @example\n   Usage:\n   <smart-sliding-menu>\n        //  Contents will go here\n   </smart-sliding-menu>\n   */\n\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartSlidingMenu', ['RuleEngine', '$timeout', '$compile', '$translate', '$rootScope', function (RuleEngine, $timeout, $compile, $translate, $rootScope) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            transclude: true,\n            scope: {\r\n                right: '@',\n                top: '@',\n                show: '=',\n                detachDefaultClass: '@',\n                includeTemplate: '@',\n                model: '@',\n                modifyParentStyle: '@',\r\n                tabData: '='\r\n            },\n            link: function (scope, $element, $attrs, controller) {\r\n                scope.getModel = function () {\r\n                    return JSON.parse(scope.model);\r\n                };\n                scope.logoutSession = function () {\r\n                    requestClicked.navCircle(\"request\", '#', null);\r\n                };\n                if (scope.detachDefaultClass) {\r\n                    if (scope.detachDefaultClass.toLowerCase() === \"true\") {\r\n                    } else {\r\n                        $element.addClass('secondary-navigation white');\r\n                    }\r\n                } else {\r\n                    $element.addClass('secondary-navigation white');\r\n                }\n\n                scope.slidingMenuId = 'sliding-menu-' + new Date().getTime();\n                scope.rightPos = scope.right ? scope.right : 0;\n                scope.leftPos = window.innerWidth - scope.rightPos;\n\n                scope.$watch('show', function (newValue, oldValue) {\r\n                    if (newValue != undefined || newValue != null) {\r\n                        if (newValue) {\r\n                            if (scope.modifyParentStyle) {\r\n                                if (scope.modifyParentStyle.toLowerCase() !== 'false') {\r\n                                    $element.parent().css({\r\n                                        width: 'calc(100% - ' + $element.outerWidth(true) + 'px)'\r\n                                    });\r\n                                }\r\n                            }\n                            $element.css({\r\n                                transform: 'translateX(-' + ($element.outerWidth(true) - scope.rightPos) + 'px)'\r\n                            });\r\n                            $('body').addClass('is-overflowHidden');\r\n                        }\n                        else {\r\n                            if (scope.modifyParentStyle) {\r\n                                if (scope.modifyParentStyle.toLowerCase() !== 'false') {\r\n                                    $element.parent().css({\r\n                                        width: 'calc(100% - ' + scope.rightPos + 'px)'\r\n                                    });\r\n                                }\r\n                            }\n                            $element.css({\r\n                                transform: 'translateX(0px)'\r\n                            });\r\n                            $('body').removeClass('is-overflowHidden');\r\n                        }\r\n                    }\r\n                });\r\n            },\n            templateUrl: 'shared/directives/slidingMenu/slidingMenuTemplate.html'\r\n        };\r\n    }]);\r\n})();\n\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartAccordion', ['$timeout','$parse','$rootScope', function ($timeout,$parse,$rootScope) {\r\n        return {\r\n            restrict: 'EA',\r\n            transclude: true,\r\n            replace: true,\r\n            scope: true,\r\n            link: function (scope, elem, attr) {\r\n                var accordian = {\r\n                    target: elem.find('.accordion-header'),\r\n                    content: elem.find('.accordion-content')\r\n                }, onChange = $parse(attr.onChange);\r\n\r\n                accordian.target.data('isOpen', false);\r\n                accordian.content.hide(0).slideUp(0);\r\n\r\n                attr.$observe('show', function (a, b) {\r\n                    showHideAccordian.call(accordian.target, a == 'true' ? true : false);\r\n                });\r\n\r\n                accordian.target.click(function () {\r\n                    showHideAccordian.call(this, !$(this).data('isOpen'));\r\n                    accEvents();\r\n                    scope.$digest();\r\n                });\r\n                function accEvents() {\r\n                    onChange(scope, {\r\n                        e: {\r\n                            isOpen: accordian.target.data('isOpen')\r\n                        }\r\n                    });\r\n                   \r\n                }\r\n                function showHideAccordian(val) {\r\n                    var _this = $(this),\r\n                        _isOpen = _this.data(\"isOpen\");\r\n                    if (val && !_isOpen) {\r\n                        _this.data(\"isOpen\", true);\r\n                        accordian.content.slideDown();\r\n                    } else if (!val && _isOpen) {\r\n                        _this.data(\"isOpen\", false);\r\n                        accordian.content.slideUp();\r\n                    };\r\n                };\r\n            },\r\n            template: \"<div class='smart-accordion-container' ng-transclude></div>\"\r\n        }\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartAccumulator', ['$timeout', function ($timeout) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\tscope: {\r\n\t\t\t\tngModel: '=?',\r\n\t\t\t\toptions: '=',\r\n\t\t\t\tisSearch: '=',\r\n\t\t\t\tleftLoader: '=',\r\n\t\t\t\trightLoader: '=',\r\n\t\t\t\tmodelCount: '=?',\r\n\t\t\t\toptionCount: '=?',\r\n\t\t\t\tcolumnMappingError: '=',\r\n\t\t\t\tselectionCallback: '&',\r\n\t\t\t\tsearchCallback: '&',\r\n\t\t\t\tmaxLimit: '=',\r\n\t\t\t\tscrollEndRightCallback: '&',\r\n\t\t\t\tscrollEndLeftCallback: '&'\r\n                },\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\t\t\t    scope.label = attrs.label;\r\n\t\t\t    scope.optionCount = angular.isDefined(scope.optionCount) ? scope.optionCount : true;\r\n\t\t\t    scope.modelCount = angular.isDefined(scope.modelCount) ? scope.modelCount : true;\r\n\t\t\t    scope.iconInfo = scope.$eval(attrs.iconInfo);\r\n\t\t\t\tscope.accumulatorHeight = attrs.height + 'px';\r\n\t\t\t\tscope.accumulatorLeftScrollHeight = (attrs.height - 48) + 'px';\r\n\t\t\t    scope.loaderFlag = {\r\n\t\t\t\t    plain: true,\r\n\t\t\t\t    center: true,\r\n\t\t\t\t    message:\"\",\r\n\t\t\t\t    top:'50',\r\n                    left:'131'\r\n\t\t\t\t};\r\n\t\t\t\t//if (scope.isSearch) {\r\n\t\t\t\t//\tscope.accumulatorLeftScrollHeight = (attrs.height - 48) + 'px';            \t\t\r\n\t\t\t\t//}           \t\r\n\t\t\t\tscope.focusAccumulatorSearch = false;\r\n\t\t\t\tscope.isAccumulatorSearchActive = false;\r\n\t\t\t\tscope.showAccumulatorSearch = false;\r\n\t\t\t\tscope.accumulatorSearchModel = \"\";\r\n\t\t\t\tscope.showAccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isAccumulatorSearchActive = true;\r\n\t\t\t\t\tscope.focusAccumulatorSearch = true;\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t    $(\"#searchLeftTextbox\").find(\"input\").focus();\r\n\t\t\t\t}, 500);\r\n\t\t\t\t\t//scope.showMe = true;\r\n\t\t\t\t\tscope.hideAccumulatorSearchClose = true;\r\n\t\t\t\t}\r\n\t\t\t\tscope.hideAcccumulatorSearch = function () {\r\n\t\t\t\t    scope.leftCheckedCount = 0;\r\n\t\t\t\t\tif (scope.accumulatorSearchModel != \"\") {\r\n\t\t\t\t\t    scope.accumulatorSearchModel = \"\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t    scope.isAccumulatorSearchActive = false;\r\n\t\t\t\t\t    scope.focusAccumulatorSearch = false;\r\n\t\t\t\t\t    scope.hideAccumulatorSearchClose = false;\r\n\t\t\t\t\t    $(\"#accumulatorLeftShowSearch\").focus();\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($.isFunction(scope.searchCallback)) {\r\n\t\t\t\t\t    scope.searchCallback({ $data: { text: scope.accumulatorSearchModel, type: \"close\" } });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t    // Right side Search\r\n\t\t\t\tscope.smartScrollLeftEnd = function () {\r\n\t\t\t\t    if ($.isFunction(scope.scrollEndLeftCallback)) {\r\n\t\t\t\t        scope.scrollEndLeftCallback();\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.smartScrollRightEnd = function () {\r\n\t\t\t\t    if ($.isFunction(scope.scrollEndRightCallback)) {\r\n\t\t\t\t        scope.scrollEndRightCallback();\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.focusRightAccumulatorSearch = false;\r\n\t\t\t\tscope.isRightAccumulatorSearchActive = false;\r\n\t\t\t\tscope.showRightAccumulatorSearch = false;\r\n\t\t\t\tscope.showRightAccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isRightAccumulatorSearchActive = true;\r\n\t\t\t\t\tscope.focusRightAccumulatorSearch = true;\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t    $(\"#searchRightTextbox\").find(\"input\").focus();\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t\t//scope.showMe = true;\r\n\t\t\t\t\tscope.hideRightAccumulatorSearchClose = true;\r\n\t\t\t\t}\r\n\t\t\t\tscope.hideRightAcccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isRightAccumulatorSearchActive = false;\r\n\t\t\t\t\tscope.focusRightAccumulatorSearch = false;\r\n\t\t\t\t\tscope.hideRightAccumulatorSearchClose = false;\r\n\t\t\t\t\t$(\"#accumulatorRightShowSearch\").focus();\r\n\r\n\t\t\t\t}\r\n\t\t\t\tscope.searchTextKeyUpFn = function (e) {\r\n\t\t\t\t    if ($.isFunction(scope.searchCallback)) {\r\n\t\t\t\t        scope.searchCallback({ $data: { text: e.target.value, type: \"textfield\", \"e\": e } });\r\n\t\t\t\t    }\r\n\t\t\t\t    scope.leftCheckedCount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\tscope.leftCheckedCount = 0;\r\n\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\tscope.leftBoxListCheck = function (arg) {\r\n\t\t\t\t    if (arg.isChecked)\r\n\t\t\t\t        scope.leftCheckedCount++;\r\n\t\t\t\t    else\r\n\t\t\t\t        scope.leftCheckedCount--;\r\n\r\n\t\t\t\t    for (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t        if (((scope.leftCheckedCount + scope.ngModel.length >= scope.maxLimit) && !scope.options[i].isChecked) || (scope.maxLimit == scope.leftCheckedCount && !scope.options[i].isChecked)) {\r\n\t\t\t\t            scope.options[i].isDisabled = true;\r\n\t\t\t\t        } else {\r\n\t\t\t\t            if (scope.ngModel.length >= scope.maxLimit && scope.options[i].$$hashKey == arg.$$hashKey)\r\n\t\t\t\t                scope.options[i].isChecked = false;\r\n\t\t\t\t                 scope.options[i].isDisabled = false;\r\n\t\t\t\t        }\r\n\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\tscope.rightBoxListCheck = function () {\r\n\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\tfor (var i = 0; i < scope.ngModel.length; i++) {\r\n\t\t\t\t\t\tif (!scope.ngModel[i].isDisabled) {\r\n\t\t\t\t\t\t\tif (scope.ngModel[i].isChecked) {\r\n\t\t\t\t\t\t\t\tscope.rightCheckedCount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            function generateKey(obj) {\r\n\t\t\t\t\tvar getProperty = \"\";\r\n\t\t\t\t\tvar getKey = \"\";\r\n\t\t\t\t\tvar addedKeys = scope.$eval(attrs.addKeys);\r\n\t\t\t\t\tfor (var i = 0; i < addedKeys.length; i++) {\r\n\t\t\t\t\t\tgetProperty = addedKeys[i];\r\n\t\t\t\t\t\tgetKey = getKey + \" \" + obj[getProperty];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn getKey;\r\n\t\t\t\t}\r\n\t\t\t\tscope.$watch('options', function (newOptions) {\r\n\t\t\t\t\tscope.options = newOptions;\r\n\t\t\t\t\tfor (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t\t\tif (scope.options[i].isGroup) {\r\n\t\t\t\t\t\t\tfor (var j = 0; j < scope.options[i].group.length; j++) {\r\n\t\t\t\t\t\t\t\tscope.options[i].group[j].optionKey = generateKey(scope.options[i].group[j]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tscope.options[i].optionKey = generateKey(scope.options[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true);\r\n\t\t\t\t\r\n\t\t\t\t// move the selected item to the right\r\n\t\t\t\tscope.moveRight = function (accData) {\r\n\t\t\t\t\tvar selectedOptions = [];\r\n\t\t\t\t\tif (scope.leftCheckedCount > 0) {\r\n\t\t\t\t\t\tfor (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t\t\t\tif (scope.options[i].isChecked) {\r\n\t\t\t\t\t\t\t\tif (scope.options[i].isGroup) {\r\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < scope.options[i].group.length; j++) {\r\n\t\t\t\t\t\t\t\t\t\tscope.ngModel.push(scope.options[i].group[j]);\r\n\t\t\t\t\t\t\t\t\t\tscope.options[i].group[j].isChecked = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tscope.options[i].isChecked = true;\r\n\t\t\t\t\t\t\t\t\tselectedOptions.push(scope.options[i]);\r\n\t\t\t\t\t\t\t\t\tscope.ngModel.push(scope.options[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// get the add objects\r\n\t\t\t\t\t\t\t\t//scope.addscope.push(scope.leftBoxList[i]);\r\n\t\t\t\t\t\t\t\tvar index = scope.options.indexOf(scope.options[i]);\r\n\t\t\t\t\t\t\t\tscope.options.splice(index, 1);\r\n\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($.isFunction(scope.selectionCallback)) {\r\n\t\t\t\t\t\t\tscope.selectionCallback({ e: selectedOptions, direction: 'LTR' });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.rightBoxListCheck();\r\n\t\t\t\t\tscope.leftCheckedCount = 0;\r\n\t\t\t\t    //scope.leftSelectAll = false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// move the selected item to the left\r\n\t\t\t\tvar selectedOptions = [];\r\n\t\t\t\tscope.moveLeft = function (accData) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (scope.rightCheckedCount > 0) {\r\n\t\t\t\t\t\tfor (var i = 0; i < scope.ngModel.length; i++) {\r\n\t\t\t\t\t\t\tif (!scope.ngModel[i].isDisabled) {\r\n\t\t\t\t\t\t\t\tif (scope.ngModel[i].isChecked) {\r\n\r\n\t\t\t\t\t\t\t\t\tscope.ngModel[i].isChecked = false;\r\n\t\t\t\t\t\t\t\t\tscope.options.push(scope.ngModel[i]);\r\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < scope.options.length; j++) {\r\n\t\t\t\t\t\t\t\t\t    scope.options[j].isDisabled = false;\r\n\t\t\t\t\t\t\t\t\t    scope.rightCheckedCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tselectedOptions.push(scope.ngModel[i]);\r\n\r\n\t\t\t\t\t\t\t\t\t// get the remove objects\r\n\t\t\t\t\t\t\t\t\t//scope.removescope.push(scope.rightBoxList[i]);\r\n\t\t\t\t\t\t\t\t\tvar index = scope.ngModel.indexOf(scope.ngModel[i]);\r\n\t\t\t\t\t\t\t\t\tscope.ngModel.splice(index, 1);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($.isFunction(scope.selectionCallback)) {\r\n\t\t\t\t\t\t\tscope.selectionCallback({ e: selectedOptions, direction: 'RTL' });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\t//scope.rightSelectAll = false;\r\n\t\t\t\t};\r\n\t\t\t\tscope.$watch('ngModel', function (newModel) {\r\n\t\t\t\t    scope.accumulatorSearchModel = \"\";\r\n\t\t\t\t    scope.accumulatorRightSearchModel = \"\";\r\n\t\t\t\t\tscope.ngModel = newModel;\r\n\t\t\t\t\tif (scope.ngModel.length <= 0) {\r\n\t\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tscope.$watch('rightLoader', function (rightLoaderUpdate) {\r\n\t\t\t\t    scope.rightLoader = rightLoaderUpdate;\r\n\t\t\t\t});\r\n\t\t\t\tscope.$watch('leftLoader', function (leftLoaderUpdate) {\r\n\t\t\t\t    scope.leftLoader = leftLoaderUpdate;\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/smartAccumulator/smartAccumulatorTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartCarousel', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                \"apiObj\": \"=\",\r\n                \"carouselArr\": \"=\",\r\n                \"arrowClick\": \"&\",\r\n                \"getItem\": \"&\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var margin = 0;\r\n                var marginToChange = \"margin-left\";\r\n                var dimensionToChange = \"width\";\r\n                var textAlign = \"left\";\r\n                var stepSize = 94;\r\n\r\n                scope.scrollBarClass = \"scrollBarClass \" + scope.carouselArr.classes;\r\n                scope.arrowClass = \"icon iconMedium reqNavArrow \" + scope.carouselArr.arrow;\r\n\r\n                if (scope.carouselArr.type === \"horizontal\" && scope.carouselArr.id === \"leftBar\") {\r\n                    textAlign = \"right\";\r\n                }\r\n\r\n                if (scope.carouselArr.type == \"vertical\") {\r\n                    marginToChange = \"margin-top\";\r\n                    dimensionToChange = \"height\";\r\n                    textAlign = \"top\";\r\n                    stepSize = 94;\r\n                }\r\n\r\n                scope.internalAPIObj = scope.apiObj || {};\r\n                scope.internalAPIObj.arrowClick = function (item) {\r\n                    scope.arrowClick(scope, {\r\n                        e: item\r\n                    });\r\n                };\r\n\r\n                scope.getClickedItem = function (item) {\r\n                    scope.getItem({ e: item });\r\n                }\r\n                scope.animate = false;\r\n\r\n                scope.internalAPIObj.resetUI = function (availableLength, addAnimation) {\r\n                    var collectionEle = angular.element(element.children()[1]);\r\n\r\n                    var length = scope.carouselArr.items.length * stepSize;\r\n\r\n                    scope.animate = true;\r\n\r\n                    if (dimensionToChange == \"height\") {\r\n                        collectionEle.css(\"height\", availableLength);\r\n                    } else {\r\n                        collectionEle.css(\"width\", \"100%\");\r\n                    }\r\n\r\n                    if ((availableLength) <= length) {\r\n\r\n                        if (scope.carouselArr.id === \"topBar\") {\r\n                            collectionEle.removeClass('topBarOverflow').addClass('topBarOverflowHidden');\r\n                        }\r\n                        scope.carouselArr.showArrow = true;\r\n                    } else {\r\n\r\n                        if (scope.carouselArr.id === \"topBar\") {\r\n                            collectionEle.removeClass('topBarOverflowHidden').addClass('topBarOverflow');\r\n                        }\r\n                        scope.carouselArr.showArrow = false;\r\n                    }\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/smartCarousel/smartCarousel.html'\r\n        };\r\n    }]);\r\n})();\r\n\n(function () {\r\n\t'use strict';\r\n\r\n\tangular.module('SMART2').directive('countdown', ['$interval', function ($interval) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\ttransclude: true,\r\n\t\t\tscope: {\r\n\t\t\t    date: '@',\r\n                timeoutCallback: '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tvar from = new Date(attrs.date);\r\n\r\n\t\t\t\tfunction timer(t) {\r\n\t\t\t\t\tvar days = Math.floor(t / 86400);\r\n\t\t\t\t\tt -= days * 86400;\r\n\t\t\t\t\tvar hours = Math.floor(t / 3600) % 24;\r\n\t\t\t\t\tt -= hours * 3600;\r\n\t\t\t\t\tvar minutes = Math.floor(t / 60) % 60;\r\n\t\t\t\t\tt -= minutes * 60;\r\n\t\t\t\t\tvar seconds = t % 60;\r\n\t\t\t\t\tif (!days && !hours && !minutes && !seconds) {\r\n\t\t\t\t\t\tif (angular.isDefined(timerObj)) {\r\n\t\t\t\t\t\t\t$interval.cancel(timerObj);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (attrs.timeoutCallback && angular.isFunction(scope.timeoutCallback)) {\r\n\t\t\t\t\t\t    scope.timeoutCallback();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn days + 'd ' + hours + 'h ' + minutes + 'm ' + seconds + 's';\r\n\t\t\t\t}\r\n\t\t\t\tvar timerObj = $interval(function () {\r\n\t\t\t\t\tvar diff = Math.floor((from.getTime() - new Date().getTime()) / 1000);\r\n\t\t\t\t\t$(element).text(timer(diff));\r\n\t\t\t\t}, 1000)\r\n\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartDocSlider', ['$parse', '$focusOnField', function ($parse, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n             scope: true,\r\n            link: function (scope, element, attrs) {\r\n\r\n                var onHide = $parse(attrs.onHide);\r\n                scope.commonSelectedOptionInside = { title: '' };\r\n\r\n                attrs.$observe(\"slideObj\", function (value) {\r\n                    if (attrs.slideObj) {\r\n\r\n                        var slideObj = JSON.parse(attrs.slideObj);\r\n                        scope.src = slideObj.src;\r\n                        scope.list = slideObj.list;\r\n                        scope.index = slideObj.index;\r\n                        scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                        scope.updateTheIndexInController = function (obj) {\r\n                            scope.index = scope.list.indexOf(obj);\r\n                            scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                            scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                            var listLength = scope.list.length;\r\n                            if (scope.index == 0) {\r\n                                scope.prevIndex = listLength - 1;\r\n                            }\r\n                            else if (scope.index == listLength - 1) {\r\n                                scope.nextIndex = 0;\r\n                            }\r\n\r\n                        }\r\n\r\n                        scope.nextIndex = angular.copy(scope.index);\r\n                        scope.prevIndex = angular.copy(scope.index);\r\n\r\n                        var listLength = scope.list.length;\r\n\r\n                        if (scope.index == 0) {\r\n                            scope.nextIndex++;\r\n                            scope.prevIndex = listLength - 1;\r\n                        }\r\n                        else if (scope.index == listLength - 1) {\r\n                            scope.nextIndex = 0;\r\n                            scope.prevIndex--;\r\n                        }\r\n                        else if (scope.index < listLength - 1) {\r\n                            scope.nextIndex++;\r\n                            scope.prevIndex--;\r\n                        }\r\n                    }\r\n                });\r\n                scope.tabbingFocus = false;\r\n                //Need to change the code\r\n                scope.$watch(attrs.ngShow, function (value) {\r\n                    if (value) {\r\n                        angular.element('body').css('overflow', 'hidden');\r\n                        angular.element(document.activeElement).addClass(\"sliderDocTrigger\");\r\n                        setTimeout(function () { firstFieldFocused();}, 500);\r\n                      \r\n                    } else {\r\n                        angular.element('body').css('overflow', '');\r\n                        angular.element('.sliderDocTrigger').focus().removeClass('sliderDocTrigger');\r\n                        scope.tabbingFocus = false;\r\n                    }\r\n                });\r\n\r\n                scope.next = function () {\r\n                    scope.tabbingFocus = false;\r\n                    var listLength = scope.list.length;\r\n                    var modal = angular.element('.slide-view-modal');\r\n\r\n                    modal.css('left', '-50%');\r\n\r\n                    if (scope.index < listLength - 1)\r\n                        scope.index++;\r\n                    else if (scope.index == listLength - 1)\r\n                        scope.index = 0;\r\n\r\n                    if (scope.index == 0) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = listLength - 1;\r\n                    }\r\n                    else if (scope.index == listLength - 1) {\r\n                        scope.nextIndex = 0;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    else if (scope.index < listLength - 1) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    setTimeout(function () {\r\n                        modal.css('transition', 'none');\r\n                        modal.css('display', 'none');\r\n                        modal.css('left', '150%');\r\n                        modal.css('display', 'block');\r\n                    }, 350);\r\n                    setTimeout(function () {\r\n                        modal.css('transition', '0.5s ease-in-out');\r\n                        modal.css('left', '50%');\r\n                        firstFieldFocused();\r\n                    }, 370);\r\n                    scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                 \r\n                }\r\n\r\n                scope.prev = function () {\r\n                    scope.tabbingFocus = false;\r\n                    var listLength = scope.list.length;\r\n                    var modal = angular.element('.slide-view-modal');\r\n\r\n                    modal.css('left', '150%');\r\n\r\n                    if (scope.index > 0)\r\n                        scope.index--;\r\n                    else if (scope.index == 0)\r\n                        scope.index = listLength - 1;\r\n\r\n                    if (scope.index == 0) {\r\n                        scope.prevIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = listLength - 1;\r\n                    }\r\n                    else if (scope.index == listLength - 1) {\r\n                        scope.prevIndex = 0;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    else if (scope.index < listLength - 1) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    setTimeout(function () {\r\n                        modal.css('transition', 'none');\r\n                        modal.css('display', 'none');\r\n                        modal.css('left', '-50%');\r\n                        modal.css('display', 'block');\r\n                    }, 350);\r\n                    setTimeout(function () {\r\n                        modal.css('transition', '0.7s ease-in-out');\r\n                        modal.css('left', '50%');\r\n                        firstFieldFocused();\r\n                    \r\n                    }, 370);\r\n                    scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                   \r\n                };\r\n\r\n\r\n                scope.close = function () {\r\n\r\n                    if (angular.isFunction(onHide)) {\r\n                        //scope.$apply(function () {\r\n                        onHide(scope, { e: \"\" });\r\n                        //});\r\n                    };\r\n                    scope.tabbingFocus = false;\r\n                };\r\n\r\n                var firstFieldFocused = function () {\r\n                    scope.tabbingFocus = true;\r\n                    var $fistField = angular.element('.docSlider-content').find(\"a, input, button, textarea\").first();\r\n                    $focusOnField($fistField);\r\n                };\r\n\r\n                scope.funcOnKeyDown = function (e) {\r\n                    if (e.keyCode == 27) {\r\n                        scope.close();\r\n                    } else if (e.keyCode == 37) {\r\n                        scope.prev()\r\n                    } else if (e.keyCode == 39) {\r\n                        scope.next()\r\n                    }\r\n                };\r\n              \r\n            },\r\n            templateUrl: 'shared/directives/smartDocSlider/smartDocSlider.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('httpLoaderInterceptor', ['$rootScope', '$timeout', function ($rootScope, $timeout) {\r\n\r\n        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n            $rootScope.pageLoaderFlagController = true;\r\n        });\r\n\r\n        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\r\n            //$timeout(function () {\r\n                $rootScope.pageLoaderFlagController = false;\r\n            //}, 2000);\r\n        });\r\n\r\n        var requestCount = 0;\r\n        function startRequest(config) {\r\n            if (!requestCount) {\r\n                //$rootScope.pageLoaderFlagController = true;\r\n            }\r\n            requestCount++;\r\n            return config;\r\n        }\r\n        function endRequest(arg) {\r\n            if (!requestCount)\r\n                return;\r\n            requestCount--;\r\n            if (!requestCount) {\r\n                //$rootScope.pageLoaderFlagController = false;\r\n            }\r\n            return arg;\r\n        }\r\n        return {\r\n            'request': startRequest,\r\n            'requestError': endRequest,\r\n            'response': endRequest,\r\n            'responseError': endRequest\r\n        };\r\n    }]);\r\n\r\n    angular.module('SMART2').config(['$httpProvider', function ($httpProvider) {\r\n        $httpProvider.interceptors.push('httpLoaderInterceptor');\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartGlobalLoader', ['$timeout', '$translate', function ($timeout, $translate) {\r\n        return {\r\n            restrict: 'AE',\r\n            replace: true,\r\n            scope: {\r\n                isFixed: '=?',\r\n                config: '=?',\r\n                onCancel: \"&\",\r\n            },\r\n            link: function (scope, element, attrs) {\r\n            \tvar message = $translate.instant(\"loadingMsg\");\r\n            \t\r\n                scope.conf = angular.extend({\r\n                    message: message,\r\n                    center: false,\r\n                    plain: false,\r\n                    bgwhite: false,\r\n                    top: undefined,\r\n                    left: undefined\r\n                }, scope.config);\r\n                scope.messageArray = scope.conf.message.split(\"\\n\");\r\n                //Count left\r\n                $timeout(function () {\r\n                    var widthCount = angular.element(element[0].querySelector('.relative-loader-container')).width();\r\n                    var heightCount = angular.element(element[0].querySelector('.relative-loader-container')).height();\r\n                    scope.leftTopCount = {\r\n                        left: (scope.conf.left == undefined || scope.conf.left == null || scope.conf.left == '') ? \"calc(50% - \" + widthCount / 2 + \"px)\" : scope.conf.left + \"px\",\r\n                        top: (scope.conf.top == undefined || scope.conf.top == null || scope.conf.top == '') ? \"calc(50% - \" + heightCount / 2 + \"px)\" : scope.conf.top+\"px\"\r\n                    };\r\n                });\r\n\t\t\t\t\n                if (angular.isDefined(attrs.onCancel)) {\r\n                \tscope.cancelBtn = { title: $translate.instant(\"cancelBtn\") };\r\n                \tscope.conf.isCancel = true;\n                }\n\n                scope.cancelCallback = function (e) {\r\n                \tscope.onCancel({ $event: e });\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/smartGlobalLoader/smartGlobalLoader.html'\r\n        };\r\n    }]);\r\n})();\nangular\r\n    .module(\"SMART2\")\r\n    .directive(\"smartHeight\", [\"$timeout\", smartHeightFun]);\r\n\r\nfunction smartHeightFun($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        link: function (scope, element, attrs) {\r\n            var config = {\r\n                relativeTo: returnVal(attrs.relativeTo, \"relativeTo\"),\r\n                plusThis: returnVal(attrs.plusThis, \"plusThis\"),\r\n                minusThis: returnVal(attrs.minusThis, \"minusThis\")\r\n            };\r\n            var height = function () {\r\n                var h = 0, m = 0, p = 0;\r\n                if (config.relativeTo == window) {\r\n                    h = window.innerHeight;\r\n                } else {\r\n                    h = $(config.relativeTo).get(0).outerHeight;\r\n                }\r\n                if (config.plusThis) {\r\n                    p = normalizeNumber(config.plusThis);\r\n                    h += p;\r\n                } else {\r\n                    m = normalizeNumber(config.minusThis);\r\n                    h -= m;\r\n                }\r\n                return h;\r\n            }();\r\n\r\n            element.css(\"height\", height);\r\n\r\n            function normalizeNumber(val) {\r\n                var v = 0;\r\n                if (val) {\r\n                    if (Number(val) == NaN) {\r\n                        if (val.indecOf(',') > -1) {\r\n                            $(val).each(function () {\r\n                                v += this.outerHeight;\r\n                            });\r\n                        } else {\r\n                            v = $(val).get(0).outerHeight;\r\n                        }\r\n                    } else {\r\n                        v = Number(val)\r\n                    }\r\n                } else {\r\n                    v = 0;\r\n                }\r\n                return v;\r\n            }\r\n\r\n            function returnVal(val, attribute) {\r\n                var r;\r\n                switch (attribute) {\r\n                    case \"relativeTo\":\r\n                        if (!val) r = window\r\n                        else r = val;\r\n                        break;\r\n                    case \"plusThis\":\r\n                        if (!val) r = false;\r\n                        else r = val;\r\n                        break;\r\n                    case \"minusThis\":\r\n                        if (!val) r = false;\r\n                        else r = val;\r\n                        break;\r\n                }\r\n\r\n                return r;\r\n            };\r\n        }\r\n    };\r\n}\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name SmartHierarchy\r\n * @description This directive is useful for creating hierarchical structure.\r\n * \r\n * @attr {Object} config\r\n *    Config object is expected to decide the behaviour of the component.\r\n * @attr {Function} callback\r\n *    Callback function when selections are done in component\r\n * \r\n * @example\r\nController : \r\n    config :\r\n     $scope.treeComponentConfig = {\r\n                selectedNodes: \"\", // Coma seperated codes string given to component for pre selection, \r\n                \t\t\t\t   // so the default selections can be shown selected when the component \r\n                \t\t\t\t   // in initialized.\r\n                isRadio: false, // Boolean values to toggle between checkBox & radioButton\r\n                getHierarchyOnSelection: true, // If set to true , selection hierarchy\r\n                                               // (uptil the relevent parent) also will be recieved \r\n                                               // in selection callback.\r\n                isLazyLoad: true, // If set to true, data would be fetched from the server on demand \r\n                                  // (lazyLoading on scroll & node expansion)\r\n                data: null, // Custom data can also be passed to component, representation would be in hierarchical manner.\r\n                disableLevelSelection: '', // comma seperated string values of levels to be shown disabled eg. \"1,2,3\".\r\n                title: 'Category', // Title of the component.\r\n                getSelections: false, // On setting it true, it will call the callback function \r\n                                      // provided to the component with seleted values in the ouput.\r\n                clearCache: false, // On setting it true, it will clear the Java script heap \r\n                                   // runtime memory which will reduce the memory foot print of the web page.\r\n                height: '328px', // Height can be set to the component.\r\n                isSearchEnabled : true, // Bollean value to toggle the visibility of search bar.\r\n                requestParameter: { // Request parameter is expected to fetch the data from the server. \r\n                    navigationContext: \"PAS\",\r\n                    userExecutionContext: '{\"ClientName\":\"abc,....}',\r\n                    documentCode: null,\r\n                    contactCode: null,\r\n                }\r\n            };\r\n    callback :\r\n         $scope.treeComponentCallback = function (e) {\r\n                console.log(e);\r\n\r\n                // Un comment the below logic to see admin use case.\r\n                // TODO : getHierarchyOnSelection:true (in tree config)\r\n\r\n                // var obj = { 'PASList': [] };\r\n                // var levelData = _.groupBy(_.flatten(e.selectionHierarchy), \"Level\");\r\n                // _.each(levelData, function (data, key) {\r\n                    // _.each(data, function (n) {\r\n                        // n['selection'] = \"0\";\r\n                    // });\r\n                    // obj['PASList'].push({\r\n                        // \"Level\": key,\r\n                        // \"PASDetails\": data\r\n                    // });\r\n                // });\r\n                // $scope.treeComponentConfig.isRadio = true;\r\n                // $scope.treeComponentConfig.data = obj;\r\n                // $scope.treeComponentConfig.selectedNodes = e.selections[0]['ID'].toString();\r\n         }\r\n  Usage:\r\n      <smart-hierarchy-component config=\"treeComponentConfig\" callback=\"treeComponentCallback\"></smart-hierarchy-component>\r\n      */\r\n(function (angular) {\r\n    'use strict';\r\n    var hierarchyCounter = 0;\r\n    angular.module('smartHierarchyComponent', [])\r\n    .directive('smartHierarchyComponent', ['$timeout', 'RESTApi', '$q', '$rootScope', 'APPCONSTANTS', '$translate',\r\n      function ($timeout, RESTApi, $q, $rootScope, APPCONSTANTS, $translate) {\r\n          return {\r\n              restrict: 'E',\r\n              replace: true,\r\n              scope: {\r\n                  config: '=',\r\n                  callback: '&'\r\n              },\r\n              link: function (scope, element, attrs) {\r\n                  /*config for the directive*/\r\n                  scope.hierarchyCounter = hierarchyCounter++;\r\n                  scope.treeConfig = scope.config;\r\n                  scope.searchFieldVal = '';\r\n                  scope.cancelTitle = scope.searchFieldVal == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                  scope.checkCondForTemplate = function (a_data) {\r\n                      var boolTemplate = false;\r\n                      if (scope.searchFieldVal.length <= 2 && !scope.treeConfig.isReadOnly) {\r\n                          boolTemplate = true;\r\n                      } else if (scope.searchFieldVal.length <= 2 && scope.treeConfig.isReadOnly && a_data.selection != '0' && !scope.treeConfig.selectAllToggle) {\r\n                          boolTemplate = true;\r\n                      } else if (scope.searchFieldVal.length <= 2 && scope.treeConfig.isReadOnly && scope.treeConfig.selectAllToggle) {\r\n                          boolTemplate = true;\r\n                      }\r\n                      return boolTemplate;\r\n                  }\r\n                  scope.templateCheck2 = function (a_category) {\r\n                      var boolTemplate = false;\r\n                      if (scope.treeConfig.isReadOnly && a_category.selection != '0') {\r\n                          boolTemplate = true;\r\n                      } else if(!scope.treeConfig.isReadOnly) {\r\n                          boolTemplate = true;\r\n                      }\r\n                      return boolTemplate;\r\n                  }\r\n                  scope.secondaryLinkCallback = function () {\r\n                      scope.treeConfig.secondaryLink.callback();\r\n                  }\r\n                  scope.treeConfig.isSelectedOnly = false;\r\n                  scope.noRecordsFound = false;\r\n                  if (!scope.treeConfig.hasOwnProperty('modalButtonShow')) {\r\n                      scope.treeConfig.modalButtonShow = false;\r\n                  }\r\n\r\n                  if (!scope.treeConfig.hasOwnProperty('isMandatory')) {\r\n                      scope.treeConfig.isMandatory = true;\r\n                  }\r\n                  if (!scope.treeConfig.hasOwnProperty('listIcon')) {\r\n                      scope.treeConfig.listIcon = null;\r\n                  }\r\n                  if (!scope.treeConfig.hasOwnProperty('selectAllToggle')) {\r\n                      scope.treeConfig.selectAllToggle = false;\r\n                  }\r\n\r\n\r\n                  var doneCallback = scope.$eval(scope.callback);\r\n\r\n                  scope.config.refreshConfig = function (newData) {\r\n                      scope.treeConfig = newData;\r\n                      resetValue(scope.treeConfig);\r\n\r\n                  }\r\n\r\n                  var resetValue = function (data) {\r\n                      if (scope.treeConfig.isRadio) {\r\n\r\n                          scope.uniqueRadioGroupName = uniqueIDGenerator();\r\n                      }\r\n\r\n                      if (scope.treeConfig.clearCache) {\r\n                          resetDataSourcesAndPromises();\r\n                          scope.isLoading = false;\r\n                          scope.treeConfig.clearCache = false;\r\n                      }\r\n\r\n                      dataRecievedCallPromise;\r\n                      preselectionRecievedPromise;\r\n                      promises = [];\r\n\r\n                      /*Local variables*/\r\n                      navContext = scope.treeConfig.navigationContext;\r\n                      isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                      dataSet;\r\n                      searchBucket = 50;\r\n                      lazyLoadingBucket = 50;\r\n                      maxLevel = 1;\r\n                      lazyLoadOffset;\r\n                      lazyLoadMarker = [];\r\n                      levelKey = 'level';\r\n\r\n                      //levelWiseData = {};\r\n                      parentStringConstant = \"parentString\";\r\n                      parentCodeStringConstant = \"parentCodeString\";\r\n                      preselection;\r\n                      isInitialServiceCalled = false;\r\n                      searchCategories = [];\r\n                      baseLevelExpectNode = [];\r\n\r\n                      nodeExpandingCodeProperty;\r\n                      dataProperty;\r\n                      levelWiseDataProperty;\r\n                      searchProperty;\r\n                      modelProperty;\r\n\r\n                      //scope.totalSelection = 0;\r\n                      //totalID = [];\r\n                      //totalName = [];\r\n\r\n                      selectAllBool = false;\r\n\r\n                      scope.getUserSelectionArray = [];\r\n                      scope.selectionAndCountOptions = false;\r\n\r\n                      scope.treeType = scope.treeConfig.treeType;\r\n\r\n                      scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                      scope.isDisabled = scope.treeConfig.isDisabled;\r\n                      scope.isSingleSelect = scope.treeConfig.isRadio ? scope.treeConfig.isRadio : false;\r\n\r\n\r\n\r\n                      // if(scope.treeConfig.requestParameter)\r\n                      // {\r\n\r\n                      //           //scope.treeConfig.requestParameter = n;\r\n                      //           RESTApi.setDocumentId(scope.treeConfig.requestParameter.documentCode);\r\n                      //           RESTApi.setContactCode(scope.treeConfig.requestParameter.contactCode);\r\n                      //           RESTApi.setUserContext(scope.treeConfig.requestParameter.userExecutionContext);\r\n                      //           RESTApi.setEnvironment(scope.treeConfig.requestParameter.environment);\r\n                      //           RESTApi.setRequestObject(scope.treeConfig.requestParameter.requestObject);\r\n                      //           setKeysAsPerNavigationContext(scope.treeConfig.requestParameter.navigationContext);\r\n                      //           navContext = scope.treeConfig.requestParameter.navigationContext;\r\n\r\n                      //         init();\r\n\r\n                      // }\r\n\r\n                      scope.showSelectAll = scope.treeConfig.showSelectAll;\r\n                      scope.showClearSelection = scope.treeConfig.showClearSelection;\r\n                      scope.showSelectionCount = scope.treeConfig.showSelectionCount;\r\n                      scope.enableLastLevelSelection = scope.treeConfig.enableLastLevelSelection;\r\n\r\n                  };\r\n\r\n\r\n                  /* scope.$watch('config', function (n, o) {\r\n                    if (n) {\r\n                      scope.treeConfig = null;\r\n                      scope.treeConfig = scope.config;\r\n                      clearAllsearch();\r\n                     \r\n                      dataRecievedCallPromise;\r\n                      preselectionRecievedPromise;\r\n                      promises = [];\r\n                     \r\n                      navContext = scope.treeConfig.navigationContext;\r\n                      isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                      dataSet;\r\n                      searchBucket = 50;\r\n                      lazyLoadingBucket = 50;\r\n                      maxLevel = 1;\r\n                      lazyLoadOffset;\r\n                      lazyLoadMarker = [];\r\n                      levelKey = 'level';\r\n                      levelWiseData = {};\r\n                      parentStringConstant = \"parentString\";\r\n                      parentCodeStringConstant = \"parentCodeString\";\r\n                      preselection;\r\n                      isInitialServiceCalled = false;\r\n                      searchCategories = [];\r\n                      baseLevelExpectNode = [];\r\n                      nodeExpandingCodeProperty;\r\n                      dataProperty;\r\n                      levelWiseDataProperty;\r\n                      searchProperty;\r\n                      modelProperty;\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n                      selectAllBool = false;\r\n                      scope.getUserSelectionArray =[];\r\n                      scope.treeType = scope.treeConfig.treeType;\r\n                      scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                      scope.isDisabled = scope.treeConfig.isDisabled;\r\n                    }\r\n                  });*/\r\n\r\n                  function clearAllsearch() {\r\n                      serverSearchVal = \"\";\r\n                      scope.searchResults.length = 0;\r\n                      searchDataYetToBeDisplayed.length = 0;\r\n                      searchWithContainsHitResult.length = 0;\r\n                      scope.searchText = '';\r\n                      scope.searchFieldVal = '';\r\n                  }\r\n\r\n\r\n                  /*scope.$watch('config.clearCache', function (n, o) {\r\n                    if (n) {\r\n                     resetDataSourcesAndPromises();\r\n                     scope.isLoading = false;\r\n                     scope.config.clearCache = false;\r\n                   }\r\n                });*/\r\n\r\n\r\n                  var deregisterConfigSelection = scope.$watch('config.getSelections', function (n, o) {\r\n                      if (n) {\r\n                          getSelections();\r\n                          scope.config.getSelections = false;\r\n                      }\r\n                  });\r\n\r\n\r\n                  var deregReqContactCode = scope.$watch('config.requestParameter.contactCode', function (n, o) {\r\n                      if (n != o) {\r\n                          RESTApi.setContactCode(n);\r\n                          init();\r\n                      }\r\n                  });\r\n                  var deregReqParam = scope.$watch('config.requestParameter', function (n, o) {\r\n                      //if (!scope.treeConfig.data && n) {\r\n                      if (n) {\r\n                          scope.treeConfig.requestParameter = n;\r\n\r\n                          RESTApi.setDocumentId(n.documentCode);\r\n                          RESTApi.setContactCode(n.contactCode);\r\n                          RESTApi.setUserContext(n.userExecutionContext);\r\n                          RESTApi.setEnvironment(APPCONSTANTS.userPreferences.URLs.AppURL);\r\n                          RESTApi.setRequestObject(n.requestObject);\r\n\r\n                          setKeysAsPerNavigationContext(n.navigationContext);\r\n                          navContext = n.navigationContext;\r\n\r\n                          if (n.hasOwnProperty('url')) {\r\n                              RESTApi.setUrl(n.url);\r\n                          }\r\n\r\n                          //request params than it must go in \r\n                          //if (!isInitialServiceCalled)\r\n                          init();\r\n                      }\r\n                      //scope.treeConfig.requestParameter = null;\r\n                  });\r\n                  scope.selectOptions = [{\r\n                      \"code\": 1,\r\n                      \"name\": \"Select All\"\r\n                  }, {\r\n                      \"code\": 0,\r\n                      \"name\": \"Single Select\"\r\n                  }];\r\n\r\n                  scope.selectType = { \"code\": 0, \"name\": \"Single Select\" };\r\n\r\n                  var initSelectallModel = function () {\r\n                      //----SelectAllToggle----//\r\n                      scope.onSelectTypeChange = function (selectType) {\r\n                          scope.selectType = selectType;\r\n\r\n                          if (selectType.code == 1) {\r\n                              scope.clearAllSelection();\r\n                              //scope.treeConfig.isReadOnly = true;\r\n                          }\r\n                      }\r\n                      if (scope.treeConfig.selectType === 1) {\r\n                          scope.clearAllSelection();\r\n                          scope.selectType = { \"code\": 1, \"name\": \"Select All\" };\r\n                      } else {\r\n                          scope.selectType = { \"code\": 0, \"name\": \"Single Select\" };\r\n                      }\r\n                  }\r\n\r\n                  var deregConfigData = scope.$watch('config.data', function (n, o) {\r\n                      if (n) {\r\n                          initSelectallModel();\r\n                          if (scope.config.selectedNodes && scope.selectedData.length > 0) {\r\n                              scope.config.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : !scope.treeConfig.isRadio;\r\n                          } else if (!scope.config.selectedNodes || !scope.config.selectedNodes) {\r\n                              scope.config.isReadOnly = false;\r\n                          }\r\n                          setKeysAsPerNavigationContext(scope.treeConfig.navigationContext);\r\n                          navContext = scope.treeConfig.navigationContext;\r\n                          resetDataSourcesAndPromises(true);\r\n                          createLevelWiseDataSet(_.sortBy(n[dataProperty], 'Level'));\r\n                          dataRecievedCallPromise.resolve();\r\n                          renderLevels();\r\n                      }\r\n                      scope.config.data = null;\r\n                  });\r\n\r\n                  var deregSelectedNodes = scope.$watch('config.selectedNodes', function (n, o) {\r\n                      if (n) {\r\n                          preselection = n.split(',');\r\n                          if (preselection && preselection.length == 0) {\r\n                              scope.treeConfig.isReadOnly = false;\r\n                          }\r\n                          if (preselectionRecievedPromise)\r\n                              preselectionRecievedPromise.resolve();\r\n                      }\r\n                      scope.config.selectedNodes = null;\r\n                  });\r\n\r\n\r\n\r\n                  /*scope.$watch('config.isRadio', function(n, o) {\r\n                    scope.isSingleSelect = n;\r\n                    if (scope.isSingleSelect) {\r\n                     scope.uniqueRadioGroupName = uniqueIDGenerator();\r\n                   }\r\n                   scope.config.isRadio = false;\r\n                 });*/\r\n\r\n\r\n\r\n\r\n\r\n                  var navContext;\r\n                  /*promise*/\r\n                  var dataRecievedCallPromise;\r\n                  var preselectionRecievedPromise;\r\n                  var promises = [];\r\n                  var selectAllBool = false;\r\n                  /*Local variables*/\r\n                  var isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                  var dataSet;\r\n                  var searchBucket = 50;\r\n                  var lazyLoadingBucket = 50;\r\n                  var maxLevel = 1;\r\n                  var lazyLoadOffset;\r\n                  var lazyLoadMarker = [];\r\n                  var levelKey = 'level';\r\n                  var levelWiseData = {};\r\n                  var parentStringConstant = \"parentString\";\r\n                  var parentCodeStringConstant = \"parentCodeString\";\r\n                  var preselection;\r\n                  var isInitialServiceCalled = false;\r\n                  var searchCategories = [];\r\n                  var baseLevelExpectNode = [];\r\n                  var nodeExpandingCodeProperty;\r\n                  var dataProperty;\r\n                  var levelWiseDataProperty;\r\n                  var searchProperty;\r\n                  var modelProperty;\r\n                  var treeTypeObject = \"Generic\";\r\n                  scope.codeProperty = 'ID';\r\n                  scope.titleProperty = 'Name';\r\n                  scope.levelProperty = 'Level';\r\n                  scope.parentProperty = 'ParentID';\r\n                  scope.getUserSelectionArray = [];\r\n                  scope.treeType = \"Generic\";\r\n                  scope.totalSelection = 0;\r\n\r\n                  scope.isReadOnly = false;\r\n                  scope.isDisabled = false;\r\n\r\n                  scope.showSelectAll = false;\r\n                  scope.showClearSelection = false;\r\n                  scope.showSelectionCount = false;\r\n                  scope.enableLastLevelSelection = false;\r\n\r\n\r\n\r\n\r\n                  scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                  scope.isDisabled = scope.treeConfig.isDisabled;\r\n                  scope.isSingleSelect = scope.treeConfig.isRadio;\r\n\r\n                  scope.showSelectAll = scope.treeConfig.showSelectAll;\r\n                  scope.showClearSelection = scope.treeConfig.showClearSelection;\r\n                  scope.showSelectionCount = scope.treeConfig.showSelectionCount;\r\n                  scope.enableLastLevelSelection = scope.treeConfig.enableLastLevelSelection;\r\n\r\n\r\n                  scope.selectionAndCountOptions = false;\r\n\r\n                  scope.closeButton = { title: $translate.instant(\"closeBtn\") };\r\n                  scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                  scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n                  scope.resetButton = { title: $translate.instant(\"resetButton\") };\r\n                  scope.editButton = { title: $translate.instant(\"editButton\") };\r\n                  scope.isPartiallySelected = false;\r\n\r\n                  var totalID = [];\r\n                  var totalName = [];\r\n\r\n                  function setKeysAsPerNavigationContext(mode) {\r\n                      switch (mode) {\r\n                          case 'PAS':\r\n                              nodeExpandingCodeProperty = 'PASCodes';\r\n                              dataProperty = 'PASList';\r\n                              levelWiseDataProperty = 'PASDetails';\r\n                              searchProperty = 'PAS_SearchList';\r\n                              scope.codeProperty = 'ID';\r\n                              scope.titleProperty = 'Name';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentID';\r\n                              modelProperty = 'SelectedPasCodeList';\r\n                              break;\r\n                          case 'REG':\r\n                              nodeExpandingCodeProperty = 'RegionId';\r\n                              levelWiseDataProperty = 'RegionDetails';\r\n                              dataProperty = 'RegionList';\r\n                              searchProperty = 'Region_SearchList';\r\n                              scope.codeProperty = 'ID';\r\n                              scope.titleProperty = 'Name';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentID';\r\n                              modelProperty = 'SelectedRegionList';\r\n                              break;\r\n                          case 'ORG':\r\n                              nodeExpandingCodeProperty = 'EntityDetailCode';\r\n                              levelWiseDataProperty = 'EntityDetails';\r\n                              dataProperty = 'Org_DetailsList';\r\n                              searchProperty = 'Org_SearchList';\r\n                              scope.codeProperty = 'EntityDetailCode';\r\n                              scope.titleProperty = 'EntityDisplayName';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentEntityDetailCode';\r\n                              modelProperty = 'SelectedORGList';\r\n                              break;\r\n                      };\r\n                  };\r\n\r\n                  scope.selectedData = [];\r\n\r\n                  /*Local member fuctions*/\r\n\r\n                  function resetDataSourcesAndPromises(isPromiseInit) {\r\n                      levelWiseData = {};\r\n                      scope.categories = [];\r\n                      lazyLoadMarker = [];\r\n                      scope.isLoading = true;\r\n                      scope.isError = false;\r\n\r\n                      scope.selectedData = [];\r\n                      scope.getUserSelectionArray = [];\r\n\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n\r\n                      if (isPromiseInit) initializePromise(true, true);\r\n                  };\r\n\r\n                  function init() {\r\n                      initSelectallModel();\r\n                      scope.isError = false;\r\n                      scope.noRecordsFound = false;\r\n                      scope.selectionAndCountOptions = false;\r\n                      scope.isPartiallySelected = false;\r\n                      //scope.treeConfig.isReadOnly = typeof scope.config.isReadOnly !== 'undefined' ? scope.config.isReadOnly : false;\r\n                      scope.treeConfig.isReadOnly = function () {\r\n                          var isReadOnly, sn;\r\n                          if (scope.selectedData.length == 0 || scope.config.selectedNodes === null) {\r\n                              isReadOnly = false;\r\n                          } else {\r\n                              isReadOnly = scope.config.isReadOnly\r\n                          }\r\n\r\n                          if (!scope.treeConfig.selectAllToggle) {\r\n                              //.requestParameter.requestObject.selectedNodes\r\n                              sn = scope.treeConfig.requestParameter.requestObject && scope.treeConfig.requestParameter.requestObject.selectedNodes && scope.treeConfig.requestParameter.requestObject.selectedNodes.length;\r\n                              if (sn) {\r\n                                  isReadOnly = true;\r\n                              } else {\r\n                                  isReadOnly = false;\r\n                              }\r\n                          }\r\n\r\n                          return isReadOnly;\r\n                      }();\r\n                      isInitialServiceCalled = true;\r\n                      resetDataSourcesAndPromises(true);\r\n                      RESTApi.getData(navContext,\r\nfunction (response) {\r\n                          var respData = response.data,\r\n                              data = respData.data;\r\n                          isInitialServiceCalled = false;\r\n                          if (response.action == 'success' && (respData && respData.status != 404)) {\r\n                              scope.noRecordsFound = !data[dataProperty] || data[dataProperty].length <= 0;\r\n                              if (!scope.noRecordsFound) {\r\n                                  if (isLazyLoadServerData) {\r\n                                      //setLevelWiseData(response.data.data);\r\n                                      setLevelWiseDataSource(data);\r\n                                  } else {\r\n                                      createLevelWiseDataSet(_.sortBy(data[dataProperty], 'Level'));\r\n                                  }\r\n                                  if (data[modelProperty] && data[modelProperty].length > 0) {\r\n                                      scope.treeConfig.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : true;\r\n                                  }\r\n                                  renderLevels();\r\n\r\n                                  //createSelectedModelIfRecieved(response.data.data.SelectedPasCodeList);\r\n                                  createSelectedModelIfRecieved(data[modelProperty]);\r\n                                  dataRecievedCallPromise.resolve();\r\n\r\n                                  if (scope.treeType == treeTypeObject) {\r\n                                  } else { //working perfect in porject team case\r\n                                      scope.totalSelection = scope.selectedData.length;\r\n                                  }\r\n                              }\r\n                              else {\r\n                                  scope.isLoading = false;\r\n                              }\r\n\r\n                          } else {\r\n                              if (scope.isLoading) scope.isLoading = false;\r\n                              if (!scope.categories.length) scope.isError = true;\r\n                          }\r\n                      }, (isLazyLoadServerData) ? {\r\n                          \"LevelAt\": \"1\",\r\n                          \"PageNumber\": 1,\r\n                          \"PageSize\": lazyLoadingBucket\r\n                      } : {},false, scope.treeType);\r\n                  };\r\n\r\n                  scope.getSelectAllBool = function () {\r\n                      if (scope.categories && scope.categories.length > 0) {\r\n                          var selectedNodes = _.filter(scope.categories, function (node) {\r\n                              return (node.selection == \"1\" || node.disabled == true)\r\n                          });\r\n                          if (scope.categories.length > 0 && selectedNodes.length == scope.categories.length) {\r\n                              selectAllBool = true;\r\n                          } else {\r\n                              selectAllBool = false;\r\n                          }\r\n\r\n                      } else {\r\n                          selectAllBool = false;\r\n                      }\r\n                      return selectAllBool;\r\n                  }\r\n\r\n                  scope.doneClickHandler = function () {\r\n                      scope.treeConfig.getSelections = true;\r\n\r\n                      // timeout required for delaying the $digest cycle\r\n                      var cancelTimer = $timeout(function () {\r\n                          scope.treeConfig.isReadOnly = false;\r\n                          $timeout.cancel(cancelTimer);\r\n                          cancelTimer = null;\r\n                      }, 10);\r\n                  }\r\n                  function createSelectedModelIfRecieved(data) {\r\n\r\n                      if (data && data.length > 0) {\r\n                          scope.selectedData = getLeafNodeWithParentHierarchy(data);\r\n                          scope.treeConfig.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : true;\r\n                      }\r\n                  };\r\n\r\n                  function renderLevels() {\r\n                      if (levelWiseData[levelKey + '1'] != undefined) {\r\n                          scope.categories = !scope.treeConfig.isReadOnly ? levelWiseData[levelKey + '1'].slice(0, lazyLoadingBucket) : levelWiseData[levelKey + '1'];\r\n                          if (!scope.treeConfig.isReadOnly && scope.categories.length % lazyLoadingBucket == 0)\r\n                              lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                          scope.isLoading = false;\r\n                          if (scope.categories.length > 0) {\r\n                              scope.selectionAndCountOptions = true;\r\n                          }\r\n                      }\r\n                      scope.config.levelWiseData = levelWiseData;\r\n                  };\r\n\r\n\r\n                  function initializePromise(dataRievedPromiseBool, preselectionRecievedPromiseBool) {\r\n                      dataRecievedCallPromise = null;\r\n                      preselectionRecievedPromise = null;\r\n                      promises.length = 0;\r\n                      if (dataRievedPromiseBool) {\r\n                          dataRecievedCallPromise = $q.defer();\r\n                          promises.push(dataRecievedCallPromise.promise);\r\n                      }\r\n                      if (preselectionRecievedPromiseBool) {\r\n                          preselectionRecievedPromise = $q.defer();\r\n                          promises.push(preselectionRecievedPromise.promise);\r\n                      }\r\n                      $q.all(promises).then(promiseResolved);\r\n                  }\r\n\r\n\r\n\r\n                  function promiseResolved() {\r\n                      initatePreSelection();\r\n                      initializePromise(false, true);\r\n                  }\r\n\r\n                  function createLevelWiseDataSet(dataSet) {\r\n                      if (dataSet.length > 0) {\r\n                          var level = 1;\r\n                          var parentNodes = dataSet[level - 1][levelWiseDataProperty];\r\n                          insertParentHierarchyForFlatStrucure(parentNodes);\r\n                          while (parentNodes) {\r\n                              var instance = levelWiseData[levelKey + level];\r\n                              levelWiseData[levelKey + level] = (instance) ? _.map(_.groupBy(_.union(instance, parentNodes), function (doc) {\r\n                                  return doc[scope.codeProperty];\r\n                              }), function (grouped) {\r\n                                  return grouped[0];\r\n                              }) : parentNodes;\r\n                              if (dataSet[level]) {\r\n                                  insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet);\r\n                              };\r\n                              maxLevel = level;\r\n                              level = level + 1;\r\n                              if (typeof (scope.treeConfig.to) !== 'undefined') {\r\n                                  if (level > scope.treeConfig.to) {\r\n                                      var len = parentNodes.length;\r\n                                      for (var levelDataIndex = 0; levelDataIndex < len; levelDataIndex++) {\r\n                                          parentNodes[levelDataIndex].ChildCount = 0;\r\n                                      }\r\n                                      parentNodes = null;\r\n                                  } else {\r\n                                      parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                                  }\r\n                              } else {\r\n                                  parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                              }\r\n                          };\r\n                      }\r\n                  };\r\n\r\n                  function insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet) {\r\n                      var fetchedData = (level) ? _.groupBy(dataSet[level][levelWiseDataProperty], scope.parentProperty) : null;\r\n                      _.each(parentNodes, function (parent) {\r\n                          var childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n                          if (childForParent) {\r\n                              _.each(childForParent, function (node, index) {\r\n                                  node[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n                                  node[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n                                  node['isExpanded'] = false;\r\n                                  var nodeSelection = node.selection,\r\n                                      isNodeSelected = node.IsSelected;\r\n                                  node['selection'] = (node && nodeSelection && (nodeSelection == \"1\" || nodeSelection == \"0\") /*&& !scope.isSingleSelect*/) ? nodeSelection : (isNodeSelected == false || isNodeSelected == null || isNodeSelected) ? getSelectionState(isNodeSelected) : '0',\r\n                                  //checkDisableForPartialNode(node);\r\n                                  node['index'] = index;\r\n\r\n                                  if (nodeSelection == \"1\") {\r\n\r\n                                      var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                      if (index > -1) {\r\n                                      } else {\r\n                                          totalID.push(node[scope.codeProperty]);\r\n                                          totalName.push(node[scope.titleProperty]);\r\n                                          scope.totalSelection++;\r\n                                      }\r\n                                  }\r\n\r\n\r\n                              });\r\n                          }\r\n                      });\r\n                  };\r\n\r\n\r\n\r\n                  function checkDisableForPartialNode(node) {\r\n                      if (scope.treeConfig.requestParameter) {\r\n                          if (!scope.treeConfig.requestParameter.getComplete && scope.treeConfig.requestParameter.contactCode && node.selection == '2') {\r\n\r\n                              node.disabled = true;\r\n\r\n                          } else {\r\n                              node.disabled = false;\r\n                          }\r\n                      } else {\r\n                          node.disabled = false;\r\n                      }\r\n\r\n                  };\r\n\r\n                  function setLevelWiseDataSource(data, parent) {\r\n                      _.each(data[dataProperty], function (n) {\r\n                          _.each(n[levelWiseDataProperty], function (d) {\r\n                              d.selection = (parent && parent.selection && (parent.selection == \"1\" || parent.selection == \"0\") /*&& !scope.isSingleSelect*/) ? parent.selection : (d.IsSelected == false || d.IsSelected == null || d.IsSelected) ? getSelectionState(d.IsSelected) : '0';\r\n                              //checkDisableForPartialNode(d);\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };\r\n                  function setLevelWiseData(data, parent) {\r\n                      _.each(data[dataProperty], function (n) {\r\n                          _.each(n[levelWiseDataProperty], function (d) {\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  var parentSelection = parent.selection,\r\n                                      dIsSelected = d.IsSelected;\r\n                                  d.selection = (parent && parentSelection && (parentSelection == \"1\" || parentSelection == \"0\") /*&& !scope.isSingleSelect*/) ? parent.selection : (dIsSelected == false || dIsSelected == null || dIsSelected) ? getSelectionState(dIsSelected) : '0';\r\n\r\n                              }\r\n                              else {\r\n                                  d.selection = '0';\r\n                              }\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  if (isLazyLoadServerData) {\r\n                                      totalID.push(d[scope.codeProperty]);\r\n                                      totalName.push(d[scope.titleProperty]);\r\n                                      scope.totalSelection++;\r\n                                  }\r\n                              }\r\n\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };\r\n\r\n                  /*function createLevelWiseDataSet(dataSet) {\r\n                      var level = 1;\r\n                      var parentNodes = dataSet[level - 1][levelWiseDataProperty];\r\n                      insertParentHierarchyForFlatStrucure(parentNodes);\r\n                      while (parentNodes) {\r\n                          levelWiseData[levelKey + level] = parentNodes;\r\n                          if (dataSet[level]) {\r\n                              insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet);\r\n                          };\r\n                          maxLevel = level;\r\n                          level = level + 1;\r\n                          parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                      };\r\n                  };\r\n      \r\n                  function insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet) {\r\n                      var fetchedData = (level) ? _.groupBy(dataSet[level][levelWiseDataProperty], scope.parentProperty) : null;\r\n                      _.each(parentNodes, function(parent) {\r\n                          var childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n                          if (childForParent) {\r\n                              _.each(childForParent, function(node, index) {\r\n                                  node[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n                                  node[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n                                  node['isExpanded'] = false;\r\n                                  node['selection'] = node['selection'] ? node['selection'] : \"0\";\r\n                                  node['index'] = index;\r\n                              });\r\n                          }\r\n                      });\r\n                  };\r\n      \r\n                  function setLevelWiseData(data, parent) {\r\n                      _.each(data[dataProperty], function(n) {\r\n                          _.each(n[levelWiseDataProperty], function(d) {\r\n                              d.selection = (parent && parent.selection && (parent.selection == \"1\" || parent.selection == \"0\") && !scope.isSingleSelect) ? parent.selection : (d.IsSelected == false || d.IsSelected == null || d.IsSelected) ? getSelectionState(d.IsSelected) : '0';\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n      \r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };*/\r\n\r\n                  function getSelectionState(val) {\r\n                      if (val) {\r\n                          return '1';\r\n                      } else if (val == false) {\r\n                          return '2';\r\n                      } else if (val == null) {\r\n                          return '0';\r\n                      }\r\n                  };\r\n\r\n                  function resetSelectionState() {\r\n                      _.each(scope.selectedData, function (_node) {\r\n                          scope.selectNode(_node, '0');\r\n                      });\r\n                  };\r\n\r\n                  function initatePreSelection() {\r\n                      resetSelectionState();\r\n                      _.each(preselection, function (preselectionNode) {\r\n                          var searchLevel = 1;\r\n                          while (searchLevel <= maxLevel) {\r\n                              var foundNode = _.groupBy(levelWiseData[levelKey + searchLevel], scope.codeProperty)[preselectionNode];\r\n                              if (foundNode) {\r\n                                  scope.selectNode(foundNode[0], '1');\r\n                                  break;\r\n                              }\r\n                              searchLevel = searchLevel + 1;\r\n                          }\r\n                      });\r\n                  };\r\n\r\n                  function getNodesFromServer(parent, level, bucket, pageIndex, callback) {\r\n                      scope.isLoading = true;\r\n                      if (scope.isError) scope.isError = false;\r\n                      if (parent)\r\n                          parent.childLoading = true;\r\n\r\n                      var reqPayLoad = {\r\n                          \"LevelAt\": level,\r\n                          \"PageNumber\": (!parent) ? pageIndex : null,\r\n                          \"PageSize\": (!parent) ? bucket : null\r\n                      };\r\n                      reqPayLoad[nodeExpandingCodeProperty] = (parent) ? parent[scope.codeProperty] : null;\r\n                      //RESTApi.getData(scope.treeConfig.navigationContext, function (responseData) {\r\n                      //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function (responseData) {\r\n                      RESTApi.getData(navContext,\r\n                          function (responseData) {\r\n                          if (responseData.action == 'success') {\r\n                              scope.isLoading = false;\r\n                          } else {\r\n                              scope.isError = true;\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          var level = (responseData.data.data[dataProperty] && responseData.data.data[dataProperty].length > 0) ? responseData.data.data[dataProperty][0].Level : null;\r\n                          maxLevel = (level && maxLevel < level) ? level : maxLevel;\r\n                          callback(parent, responseData, true, bucket, pageIndex);\r\n                      }, reqPayLoad, false, scope.treeType);\r\n                  };\r\n\r\n\r\n                  function getRequestedDataFromCache(parent, bucket, pageIndex) {\r\n                      var childSearchLevel = (parent) ? parent[scope.levelProperty] + 1 : 1;\r\n                      var parentCodeStringIterator;\r\n                      var result = (parent) ? _.groupBy(levelWiseData[levelKey + childSearchLevel], scope.parentProperty)[parent[scope.codeProperty]] : levelWiseData[levelKey + childSearchLevel];\r\n                      if (scope.treeConfig.isReadOnly) {\r\n                          result = result ? result : [];\r\n                          return {\r\n                              \"data\": result,\r\n                              \"searchLevel\": childSearchLevel\r\n                          };\r\n                      }\r\n                      var startIndex = (pageIndex - 1) * bucket;\r\n                      var bucketData = (bucket && result) ? result.slice(startIndex, startIndex + bucket) : (result) ? result : [];\r\n                      return {\r\n                          \"data\": bucketData,\r\n                          \"searchLevel\": childSearchLevel\r\n                      };\r\n                  };\r\n\r\n                  function getChildsForParentAsPerBucket(parent, bucket, pageIndex, callback) {\r\n                      if (parent != undefined) {\r\n                          if (parent.ChildCount != undefined && parent.ChildCount > 0) {\r\n                              bucket = parent.ChildCount;\r\n                          }\r\n                      }\r\n                      var cachedDataSet = getRequestedDataFromCache(parent, bucket, pageIndex);\r\n                      var bucketData = cachedDataSet.data;\r\n                      var searchLevel = cachedDataSet.searchLevel;\r\n\r\n                      if (bucketData.length > 0) {\r\n                          callback(parent, bucketData, false, bucket, pageIndex);\r\n                      } else {\r\n                          getNodesFromServer(parent, searchLevel, bucket, pageIndex, callback);\r\n                      }\r\n                  };\r\n\r\n                  function lazyLoadLevelWiseData(markerNode) {\r\n                      var parentSearchLevel = markerNode[scope.levelProperty] - 1;\r\n                      var markerNodeParent = markerNode[scope.parentProperty];\r\n                      var parent = _.find(levelWiseData[levelKey + parentSearchLevel], function (node) {\r\n                          return node[scope.codeProperty] == markerNodeParent;\r\n                      });\r\n\r\n                      if (parent && parent.children && parent.children.length % lazyLoadingBucket != 0) {\r\n                          return;\r\n                      };\r\n\r\n                      getChildsForParentAsPerBucket(parent, lazyLoadingBucket, (parent) ? (parent.children.length / lazyLoadingBucket) + 1 : (scope.categories.length / lazyLoadingBucket) + 1, createTreeStructure);\r\n                  };\r\n\r\n                  var searchString = \"\";\r\n                  var searchLevel;\r\n                  var searchDataYetToBeDisplayed = [];\r\n                  var searchWithContainsHitResult = [];\r\n                  scope.searchResults = [];\r\n\r\n                  function searchAsPerBucketSize(searchStr, bucket, isMaintainSearchPointer) {\r\n                      if (!isMaintainSearchPointer) {\r\n                          if (searchString != searchStr) {\r\n                              searchString = searchStr;\r\n                              searchLevel = maxLevel;\r\n                              searchDataYetToBeDisplayed.length = 0;\r\n                              searchWithContainsHitResult.length = 0;\r\n                              scope.searchResults.length = 0;\r\n                          };\r\n                      }\r\n                      var searchData = getDataAsPerBucketSize(searchStr, bucket);\r\n                      if (!isMaintainSearchPointer && searchData.length == 0 && scope.searchResults.length === 0) {\r\n                          scope.noRecordsFound = true;\r\n                      } else {\r\n                          scope.noRecordsFound = false;\r\n                      }\r\n\r\n                      var cancelTout = $timeout(function () {\r\n                          scope.searchResults = scope.searchResults.concat(searchData);\r\n                          if (scope.searchResults.length > 0) {\r\n                              scope.noRecordsFound = false;\r\n                          } else {\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          $timeout.cancel(cancelTout);\r\n                          cancelTout = null;\r\n                      });\r\n                  };\r\n\r\n                  function getOffsetSearchData(bucket) {\r\n                      var partitionedData = _.partition(searchDataYetToBeDisplayed, function (data, index) {\r\n                          return index > (bucket - 1);\r\n                      });\r\n                      searchDataYetToBeDisplayed = partitionedData[0];\r\n                      return partitionedData[1];\r\n                  };\r\n\r\n                  function getOffsetSearchDataForContainsSearch(bucket) {\r\n                      var partitionedData = _.partition(searchWithContainsHitResult, function (data, index) {\r\n                          return index > (bucket - 1);\r\n                      });\r\n                      searchWithContainsHitResult = partitionedData[0];\r\n                      return partitionedData[1];\r\n                  };\r\n\r\n                  function getDataAsPerBucketSize(searchStr, bucket) {\r\n                      var bucketData = [];\r\n                      while (bucketData.length < bucket && searchLevel > 0) {\r\n                          var offsetSearchData = getOffsetSearchData(bucket);\r\n                          if (offsetSearchData.length == bucket) {\r\n                              bucketData = offsetSearchData;\r\n                              break;\r\n                          }\r\n                          var searchData = _.filter(levelWiseData[levelKey + searchLevel], function (node) {\r\n                              return -1 != node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n                          });\r\n\r\n                          var containsSarchResult = _.filter(levelWiseData[levelKey + searchLevel], function (node) {\r\n                              return new RegExp(\"(\" + _.compact(searchString.split(' ')).join('|') + \")\", \"gi\").test(node[scope.titleProperty]) && -1 == node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n                          });\r\n                          searchWithContainsHitResult = searchWithContainsHitResult.concat(containsSarchResult);\r\n                          var qumulativeData = offsetSearchData.concat(searchData);\r\n                          var partitionedData = _.partition(qumulativeData, function (data, index) {\r\n                              return index > (bucket - 1);\r\n                          });\r\n                          searchDataYetToBeDisplayed = searchDataYetToBeDisplayed.concat(partitionedData[0]);\r\n                          bucketData = bucketData.concat(partitionedData[1]);\r\n                          searchLevel = searchLevel - 1;\r\n                      }\r\n                      if (searchLevel == 0) {\r\n                          while (bucketData.length < bucket) {\r\n                              var containsSearchDataToBeAppended = getOffsetSearchDataForContainsSearch(bucket);\r\n                              if (containsSearchDataToBeAppended.length > 0) {\r\n                                  bucketData = bucketData.concat(containsSearchDataToBeAppended);\r\n                              } else {\r\n                                  break;\r\n                              }\r\n                          }\r\n                      }\r\n                      return bucketData;\r\n                  };\r\n\r\n                  function closeChildsForParent(parent) {\r\n                      getChildsForParentAsPerBucket(parent, null, null, function (parent, data) {\r\n                          var childs = _.filter(data, function (childNode) {\r\n                              return childNode.isExpanded;\r\n                          });\r\n                          _.each(childs, function (child) {\r\n                              child.isExpanded = false;\r\n                              child.children = [];\r\n                              closeChildsForParent(child);\r\n                          });\r\n                      });\r\n\r\n                  };\r\n\r\n                  scope.searchText = '';\r\n                  scope.searchFieldVal = '';\r\n\r\n                  scope.expandNode = function (node, index) {\r\n                      node.isExpanded = !node.isExpanded;\r\n                      if (node.isExpanded) {\r\n                          getChildsForParentAsPerBucket(node, lazyLoadingBucket, 1, createTreeStructure);\r\n                      } else {\r\n                          node.children = [];\r\n                          removeMarkerForParent(node);\r\n                      }\r\n                  };\r\n\r\n                  var createTreeStructure = function (node, data, isService, bucket, pageIndex) {\r\n                      if (isService) {\r\n                          if (node) {\r\n                              node.childLoading = false;\r\n                              node.lazyLoading = false;\r\n                          }\r\n                          if (data.action == 'success') {\r\n                              setLevelWiseData(data.data.data, node);\r\n                              if (node && data.data.data[dataProperty][0]) {\r\n                                  if (!node.children) {\r\n                                      node.children = getRequestedDataFromCache(node, bucket, pageIndex).data;\r\n                                  } else {\r\n                                      node.children = node.children.concat(getRequestedDataFromCache(node, bucket, pageIndex).data);\r\n                                  }\r\n                                  if (node.children.length % lazyLoadingBucket == 0) {\r\n                                      lazyLoadMarker.push(node.children[node.children.length - 1]);\r\n                                  }\r\n                              } else {\r\n                                  scope.categories[scope.categories.length - 1].lazyLoading = false;\r\n                                  scope.categories = scope.categories.concat(data.data.data[dataProperty][0][levelWiseDataProperty]);\r\n                                  if (scope.categories.length % lazyLoadingBucket == 0) {\r\n                                      lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                                  }\r\n                              }\r\n                          } else {\r\n                              console.log('service failure');\r\n                          }\r\n                      } else {\r\n                          var toutCancel = $timeout(function () {\r\n                              if (node) {\r\n                                  if (node && node.children && node.children.length > 0)\r\n                                      node.children[node.children.length - 1].lazyLoading = false;\r\n                                  //node.children = (node.children) ? node.children.concat(data) : data;\r\n                                  node.children = (node.children) ? ((scope.treeConfig.getAllLazyLoadedData) ? data : node.children.concat(data)) : data;\r\n\r\n                                  if ((!scope.treeConfig.isReadOnly) && (node.children.length % lazyLoadingBucket == 0)) {\r\n                                      lazyLoadMarker.push(node.children[node.children.length - 1]);\r\n                                  }\r\n                              } else {\r\n                                  scope.categories[scope.categories.length - 1].lazyLoading = false;\r\n                                  scope.categories = scope.categories.concat(data);\r\n                                  if ((!scope.treeConfig.isReadOnly) && (scope.categories.length % lazyLoadingBucket == 0)) {\r\n                                      lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                                  }\r\n                              }\r\n                              $timeout.cancel(toutCancel);\r\n                              toutCancel = null;\r\n                          });\r\n                      }\r\n                  };\r\n\r\n                  function removeMarkerForParent(parent) {\r\n                      var childMarkers = _.filter(lazyLoadMarker, function (node, index) {\r\n                          return -1 != node[parentCodeStringConstant].indexOf(parent[scope.codeProperty]);\r\n                      });\r\n                      lazyLoadMarker = _.difference(lazyLoadMarker, childMarkers);\r\n                      closeChildsForParent(parent);\r\n                  };\r\n\r\n                  var filterTextTimeout;\r\n                  scope.searchAndSelectNode = function (e) {\r\n                      \r\n                      //scope.$apply();\r\n                      //if (filterTextTimeout) {\r\n                          //$timeout.cancel(filterTextTimeout);\r\n                          //filterTextTimeout = null;\r\n                      //}\r\n                      //if (scope.searchFieldVal.length <= 2) {\r\n                         // scope.noRecordsFound = false;\r\n                          //serverSearchVal = \"\";\r\n                         // scope.searchResults.length = 0;\r\n                          //searchDataYetToBeDisplayed.length = 0;\r\n                          //searchWithContainsHitResult.length = 0;\r\n                      //} else {\r\n                          //scope.noRecordsFound = false;\r\n                      var filterTextTimeout = $timeout(function () {\r\n                          scope.noRecordsFound = false;\r\n                              if (scope.searchFieldVal.length <= 2) {\r\n                                  // scope.noRecordsFound = false;\r\n                                  serverSearchVal = \"\";\r\n                                  // scope.searchResults.length = 0;\r\n                                  searchDataYetToBeDisplayed.length = 0;\r\n                                  searchWithContainsHitResult.length = 0;\r\n                              } else if (scope.searchFieldVal.length >= 3) {\r\n                                  if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket, false);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal);\r\n                              }\r\n                              }\r\n                              $timeout.cancel(filterTextTimeout);\r\n                              filterTextTimeout = null;\r\n                              scope.cancelTitle = e.target.value == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                          }, 500);\r\n                      //}\r\n                  };\r\n\r\n\r\n                  scope.selectAll = function () {\r\n                      scope.isPartiallySelected = false;\r\n                      if (selectAllBool) {\r\n                          for (var key in levelWiseData) {\r\n                              _.each(levelWiseData[key], function (data, n) {\r\n                                  //if (data.disabled == false) {\r\n                                      data.selection = \"0\";\r\n                                  //}\r\n                                  scope.selectedData = (key == (levelKey + '1')) ? [] : [];\r\n                              });\r\n                          }\r\n                          scope.getUserSelectionArray = [];\r\n                          scope.totalSelection = 0;\r\n                          totalID = [];\r\n                          totalName = [];\r\n                      } else {\r\n                          for (var key in levelWiseData) {\r\n                              _.each(levelWiseData[key], function (data, n) {\r\n                                  if (data.disabled != true) {\r\n                                      data.selection = \"1\";\r\n                                  }\r\n                                  scope.selectedData = (key == (levelKey + '1')) ? levelWiseData[levelKey + '1'] : scope.selectedData;\r\n                                  var index = totalID.indexOf(data[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                  } else {\r\n                                      totalID.push(data[scope.codeProperty]);\r\n                                      totalName.push(data[scope.titleProperty]);\r\n                                      scope.totalSelection++;\r\n                                  }\r\n                              });\r\n                          }\r\n                      }\r\n                  }\r\n\r\n                  scope.clearAllSelection = function () {\r\n                      for (var key in levelWiseData) {\r\n                          _.each(levelWiseData[key], function (data, n) {\r\n                              data.selection = \"0\";\r\n                              //scope.selectedData = (key == (levelKey + '1'))  ? [] : [];\r\n                              //scope.getUserSelectionArray = [];\r\n                          });\r\n                      }\r\n                      scope.selectedData = [];\r\n                      scope.getUserSelectionArray = [];\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n                      scope.isPartiallySelected = false;\r\n                  }\r\n\r\n\r\n                  scope.selectNode = function (node, selectionState, byPassIsLazyLoadCheck, recursive, siblingNods) {\r\n                      if (isLazyLoadServerData && scope.searchFieldVal.length > 0 && !byPassIsLazyLoadCheck) {\r\n                          completeModelFromServerIfNeeded(node);\r\n                          if (scope.config.useAs == 'inline') {\r\n                              getSelections();\r\n                          }\r\n                          return;\r\n                      }\r\n\r\n                      //updateSelectionObject(node, selectionState);\r\n                      if (scope.isSingleSelect) {\r\n                          if (scope.selectedData.length > 0 && scope.selectedData[0][scope.codeProperty] == node[scope.codeProperty]) {\r\n                              if (scope.config.useAs == 'inline') {\r\n                                  getSelections();\r\n                              }\r\n                              return;\r\n                          }\r\n                          if (scope.selectedData.length > 0 && scope.selectedData[0][scope.codeProperty] != node[scope.codeProperty]) {\r\n                              scope.clearAllSelection();\r\n                          };\r\n                          node.selection = selectionState;\r\n                          scope.selectedData = [node];\r\n                          scope.totalSelection = scope.selectedData.length;\r\n                      } else {\r\n                          node.selection = selectionState;\r\n                          updateSelectionObject(node, selectionState);\r\n                          updateChildsForNode(node, selectionState);\r\n                      }\r\n                      //updateChildsForNode(node, selectionState);\r\n                      updateParentForNode(node, selectionState, recursive);\r\n                      updateUserSelection(node, selectionState);\r\n                      if (scope.treeType == treeTypeObject) {\r\n                      } else {\r\n                          //working perfect in project team\r\n                          scope.totalSelection = scope.selectedData.length;\r\n                      }\r\n\r\n                      if (scope.config.useAs == 'inline') {\r\n                          getSelections();\r\n                      }\r\n\r\n                      if (scope.totalSelection == 0) {\r\n                          scope.isPartiallySelected = false;\r\n                      } else {\r\n                          scope.isPartiallySelected = !scope.getSelectAllBool();\r\n                      }\r\n                  };\r\n                  function getInsSelectedNode(siblingNods) {\r\n                      var r,\r\n                          len = siblingNods.length;\r\n                      for (var x = 0; x < len; x++) {\r\n                          var selection = siblingNods[x].selection;\r\n                          if (selection == \"1\" || selection == \"2\") {\r\n                              r = siblingNods[x];\r\n                              break;\r\n                          }\r\n                      }\r\n                      return r;\r\n                  };\r\n                  function updateSelectionObject(node, selectionState) {\r\n                      switch (selectionState) {\r\n                          case '0':\r\n                              //scope.selectedData = _.without(scope.selectedData, node);\r\n                              scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                  return data[scope.codeProperty] != node[scope.codeProperty];\r\n                              });\r\n                              scope.totalSelection = scope.totalSelection - 1;\r\n                              var index = totalID.indexOf(node[scope.codeProperty]);\r\n                              if (index > -1) {\r\n                                  totalID.splice(index, 1);\r\n                                  totalName.splice(index, 1);\r\n                              }\r\n                              break;\r\n                          case '1':\r\n                              scope.selectedData.push(node);\r\n                              scope.totalSelection = scope.totalSelection + 1;\r\n                              totalID.push(node[scope.codeProperty]);\r\n                              totalName.push(node[scope.titleProperty]);\r\n                              break;\r\n                      }\r\n                  };\r\n                  function updateUserSelection(node, selectionState) {\r\n                      switch (selectionState) {\r\n                          case '0':\r\n                              scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });//_.without(scope.getUserSelectionArray, node);\r\n                              break;\r\n                          case '1':\r\n                              scope.getUserSelectionArray.push(node);\r\n                              break;\r\n                      }\r\n                  }\r\n\r\n                  /*function updateParentForNode(node, selectionState) {\r\n                   var depthLevel = node[scope.levelProperty] - 1;\r\n                   var immediateParentCode = node[scope.parentProperty].toString();\r\n                   while (depthLevel > 0) {\r\n                    var parent = _.find(levelWiseData[levelKey + depthLevel], function(node) {\r\n                     return node[scope.codeProperty] == immediateParentCode;\r\n                   });\r\n                    if (!parent && depthLevel == 1) {\r\n                     baseLevelExpectNode[node[parentCodeStringConstant].split('>')[0]] = true;\r\n                     parent = {};\r\n                     parent[scope.codeProperty] = node[parentCodeStringConstant].split('>')[0];\r\n                     parent[scope.levelProperty] = 1;\r\n                     parent[scope.parentProperty] = parent[scope.codeProperty];\r\n                   }\r\n                   if (parent) {\r\n                     immediateParentCode = parent[scope.parentProperty].toString();\r\n                     if (!parent['isExpanded']) {\r\n                      scope.expandNode(parent);\r\n                    }\r\n                    if (!scope.isSingleSelect) {\r\n                      parent.selection = getStateForNode(parent);\r\n                    }\r\n                  }\r\n                  depthLevel = depthLevel - 1;\r\n                }\r\n              };*/\r\n\r\n                  function updateParentForNode(node, selectionState, recursive) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] - 1;\r\n                      var immediateParentCode = node[scope.parentProperty].toString();\r\n\r\n                      while (depthLevel > 0) {\r\n                          var parent = _.find(levelWiseData[levelKey + depthLevel], function (node) {\r\n                              return node[scope.codeProperty] == immediateParentCode;\r\n                          });\r\n                          if (!parent && depthLevel == 1) {\r\n                              baseLevelExpectNode[node[parentCodeStringConstant].split('>')[0]] = true;\r\n                              parent = {};\r\n                              parent[scope.codeProperty] = node[parentCodeStringConstant].split('>')[0];\r\n                              parent[scope.levelProperty] = 1;\r\n                              parent[scope.parentProperty] = parent[scope.codeProperty];\r\n                          }\r\n                          //if (parent && !parent.disabled) {\r\n                          if (parent && !parent.disabled) {\r\n                              immediateParentCode = parent[scope.parentProperty].toString();\r\n                              if (!parent['isExpanded']) {\r\n                                  scope.expandNode(parent);\r\n                              }\r\n                              //if (!scope.isSingleSelect) {\r\n                              parent.selection = getStateForNode(parent, parent.selection);\r\n                              //}\r\n                          } else {\r\n                              immediateParentCode = parent[scope.parentProperty].toString();\r\n                              if (!parent['isExpanded']) {\r\n                                  scope.expandNode(parent);\r\n                              }\r\n                              //if (!scope.isSingleSelect) {\r\n                              var tempSelection = getStateForNode(parent, parent.selection);\r\n                              parent.selection = \"2\";\r\n                              //}\r\n                          }\r\n                          depthLevel = depthLevel - 1;\r\n\r\n                          immediateParentCode = parent[scope.parentProperty].toString();\r\n                      }\r\n                  };\r\n\r\n                  function getStateForNode(node, parentSelection) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] + 1;\r\n                      var parentCode = node[scope.codeProperty];\r\n                      var groupByData = _.groupBy(levelWiseData[levelKey + depthLevel], scope.parentProperty);\r\n                      var childCount = groupByData[parentCode].length;\r\n                      var selectedChild = _.filter(groupByData[parentCode], function (node) {\r\n                          return node.selection == '1';\r\n                      });\r\n                      var partiallySelectedChild = _.filter(groupByData[parentCode], function (node) {\r\n                          return node.selection == '2';\r\n                      });\r\n\r\n\r\n                      /*\r\n                        if (childCount == selectedChild.length) {\r\n                          //scope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n                          //JJ Add Later\r\n                          scope.selectedData = _.filter(scope.selectedData,function(data,n)\r\n                          {\r\n                            return data[scope.parentProperty] !=parentCode;\r\n                          });\r\n                      \r\n                          scope.selectedData.push(node);\r\n                          return \"1\";\r\n                        } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n                         scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                      \r\n                         scope.selectedData = _.uniq(scope.selectedData,function(item,jey,a) {\r\n                          return item[scope.codeProperty]; \r\n                        });\r\n                         //scope.selectedData = _.without(scope.selectedData, node);\r\n                         scope.selectedData = _.filter(scope.selectedData,function(data,n)\r\n                         {\r\n                          return data[scope.codeProperty] != node[scope.codeProperty];\r\n                        });\r\n                      \r\n                         return \"2\";\r\n                       } else {\r\n                         scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                         scope.selectedData = _.filter(scope.selectedData, function(data)\r\n                         {\r\n                          return data[scope.codeProperty] != node[scope.codeProperty];\r\n                        });\r\n                         //scope.selectedData = _.without(scope.selectedData, node);\r\n                         return \"0\";\r\n                       }\r\n                       */\r\n\r\n                      if (scope.isSingleSelect) {\r\n                          return \"0\";\r\n                      } else {\r\n                          if (scope.treeType == treeTypeObject) {\r\n                              if (childCount == selectedChild.length) {\r\n\r\n                                  ///scope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.parentProperty] != parentCode;\r\n                                  });\r\n\r\n                                  scope.selectedData.push(node);\r\n                                  //Manage Total Selection and TotalName nd ID  \r\n                                  scope.totalSelection = scope.totalSelection + 1;\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                  } else {\r\n                                      totalID.push(node[scope.codeProperty]);\r\n                                      totalName.push(node[scope.titleProperty]);\r\n                                  }//Ends\r\n\r\n                                  return \"1\";\r\n\r\n                              } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.uniq(scope.selectedData, function (item, key, a) {\r\n                                      return item[scope.codeProperty];\r\n                                  });\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != node[scope.codeProperty]\r\n                                  }); //_.without(scope.selectedData, node);\r\n\r\n\r\n\r\n                                  //Manage Total Selection and TotalName nd ID\r\n                                  if (parentSelection != \"0\" && parentSelection != \"2\") {\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                  }\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                      totalID.splice(index, 1);\r\n                                      totalName.splice(index, 1);\r\n                                  }\r\n                                  //Ends\r\n\r\n\r\n                                  return \"2\";\r\n                              } else {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != node[scope.codeProperty]\r\n                                  });\r\n\r\n                                  //_.without(scope.selectedData, node);\r\n\r\n                                  //Manage Total Selection and TotalName nd ID\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                      totalID.splice(index, 1);\r\n                                      totalName.splice(index, 1);\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                  }//Ends\r\n                                  return \"0\";\r\n                              }\r\n                          } else {\r\n\r\n                              //Non Generic Tree management\r\n                              //it will not having parent selection full means 1 even if all childs are selected.\r\n                              if (childCount == selectedChild.length) {\r\n                                  //scope.selectedData = selectedChild;\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                                  return \"2\";\r\n\r\n                              } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.uniq(scope.selectedData, function (item, key, a) {\r\n                                      return item[scope.codeProperty];\r\n                                  });\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });\r\n                                  //_.without(scope.selectedData, node);\r\n                                  return \"2\";\r\n                              } else {\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });//_.without(scope.selectedData, node);\r\n                                  return \"0\";\r\n                              }\r\n                          }\r\n                      }\r\n\r\n\r\n                  };\r\n\r\n\r\n\r\n                  /*\r\n                  function updateChildsForNode(node, selectionState) {\r\n                    var depthLevel = node[scope.levelProperty] + 1;\r\n                    var parentCode = node[scope.codeProperty].toString();\r\n                    while (depthLevel <= maxLevel) {\r\n                     var childs = _.filter(levelWiseData[levelKey + depthLevel], function(node) {\r\n                      return -1 != node[parentCodeStringConstant].indexOf(parentCode);\r\n                    });\r\n                     _.each(childs, function(child) {\r\n                      child.selection = selectionState;\r\n                      if (selectionState == \"1\") {\r\n                       //scope.selectedData = _.without(scope.selectedData, child);\r\n                       scope.selectedData =_.filter(scope.selectedData,function(data)\r\n                       {\r\n                        return data[scope.codeProperty] != child[scope.codeProperty];\r\n                      });\r\n                     };\r\n                   });\r\n                     depthLevel = depthLevel + 1;\r\n                   }\r\n                   if (isLazyLoadServerData) {\r\n                     updateChildsForSelectedData(node);\r\n                   }\r\n                  }*/\r\n\r\n                  function updateChildsForNode(node, selectionState) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] + 1;\r\n                      var parentCode = node[scope.codeProperty].toString();\r\n                      var tempNode = node;\r\n                      while (depthLevel <= maxLevel) {\r\n                          var childs = _.filter(levelWiseData[levelKey + depthLevel], function (node) {\r\n                              //return -1 != node[parentCodeString].indexOf(parentCode)\r\n                              var parentCodesofNode = node[parentCodeStringConstant].split(\">\");\r\n                              return -1 != parentCodesofNode.indexOf(parentCode);\r\n                          });\r\n\r\n\r\n                          _.each(childs, function (child) {\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  var codeProp = child[scope.codeProperty];\r\n                                  if (selectionState == \"1\") {\r\n                                      //Work in laziloading false\r\n                                      scope.totalSelection = (child.selection == \"1\") ? scope.totalSelection : scope.totalSelection + 1;\r\n                                      scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                          return data[scope.codeProperty] != codeProp;\r\n                                      });\r\n                                      //closed//_.without(scope.selectedData, child);\r\n                                      var index = totalID.indexOf(codeProp);\r\n                                      if (index > -1) {\r\n                                      } else {\r\n                                          totalID.push(codeProp);\r\n                                          totalName.push(codeProp);\r\n                                      }\r\n                                  } else {\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                      var index = totalID.indexOf(codeProp);\r\n                                      if (index > -1) {\r\n                                          totalID.splice(index, 1);\r\n                                          totalName.splice(index, 1);\r\n                                      }\r\n                                  }\r\n\r\n                                  if (!(selectionState == \"1\" && scope.isSingleSelect)) {\r\n                                      child.selection = selectionState;\r\n                                  }\r\n\r\n                                  scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray, function (data) {\r\n                                      return data[scope.codeProperty] != child[scope.codeProperty]\r\n                                  });//_.without(scope.selectedData, child);\r\n                                  //jayesh add\r\n                              } else {\r\n                                  child.selection = \"0\";\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != child[scope.codeProperty]\r\n                                  });//_.without(scope.selectedData, child);\r\n                              }\r\n                              /*scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray,function(data){\r\n                              \r\n                                return data[scope.codeProperty] != child[scope.codeProperty]\r\n                              });//_.without(scope.selectedData, child);*/\r\n                          });\r\n\r\n                          depthLevel = depthLevel + 1;\r\n                      }\r\n                      //if (isLazyLoadServerData) {\r\n                      updateChildsForSelectedData(node);\r\n                      //}\r\n                  }\r\n\r\n\r\n\r\n                  function updateChildsForSelectedData(node) {\r\n                      var searchHits = [];\r\n                      _.each(scope.selectedData, function (data) {\r\n                          if (-1 != data[parentCodeStringConstant].indexOf(node[scope.codeProperty].toString())) {\r\n                              searchHits.push(data);\r\n                          }\r\n                      });\r\n                      _.each(searchHits, function (hits) {\r\n\r\n                          //scope.selectedData = _.without(scope.selectedData, hits);\r\n                          scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                              return data[scope.codeProperty] != hits[scope.codeProperty];\r\n                          });\r\n\r\n\r\n                      });\r\n                  }\r\n\r\n                  var uniqueIDGenerator = function () {\r\n                      var d = new Date().getTime();\r\n                      var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                          var r = (d + Math.random() * 16) % 16 | 0;\r\n                          d = Math.floor(d / 16);\r\n                          return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                      });\r\n                      return uniqueID;\r\n                  };\r\n                  var cancelToutOnScroll;\r\n                  scope.scroll = function () {\r\n                      if (cancelToutOnScroll) {\r\n                          $timeout.cancel(cancelToutOnScroll);\r\n                          cancelToutOnScroll = null;\r\n                      }\r\n                      cancelToutOnScroll = $timeout(function () {\r\n                          if (!lazyLoadOffset) {\r\n                              //lazyLoadOffset = angular.element(\"#treeComponentContainer-\" + scope.hierarchyCounter)[0].getBoundingClientRect().bottom;\r\n                              var link = (angular.element(\"#treeComponentContainer\"));\r\n                              var position = link.position();\r\n                              var right = $(window).width();\r\n                              lazyLoadOffset = $(window).height();\r\n                          };\r\n                          var lazyLoadLen = lazyLoadMarker.length;\r\n                          if (lazyLoadLen > 0 && scope.searchFieldVal.length == 0) {\r\n                              var markerNode = lazyLoadMarker[lazyLoadLen - 1],\r\n                                  markerNodeSelect = angular.element(\"#\" + markerNode[scope.codeProperty]);\r\n                              if ((markerNodeSelect.length > 0) && markerNodeSelect[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n                                  markerNode.lazyLoading = true;\r\n                                  lazyLoadMarker.length = (lazyLoadLen > 0) ? lazyLoadLen - 1 : 0;\r\n                                  lazyLoadLevelWiseData(markerNode);\r\n                              }\r\n                          }\r\n                      }, 20);                      \r\n                  };\r\n                  var scrollEndTout;\r\n                  scope.scrollEnd = function () {\r\n                      if (scrollEndTout) {\r\n                          $timeout.cancel(scrollEndTout);\r\n                          scrollEndTout = null;\r\n                      }\r\n                      scrollEndTout = $timeout(function () {\r\n                          if (scope.searchFieldVal.length > 2) {\r\n                              if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket, true);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal, true);\r\n                              }\r\n                           }                              \r\n                      }, 20);\r\n                      \r\n                  };\r\n\r\n                  /*lazyLoadOffset = angular.element(\"#treeComponentContainer\")[0].getBoundingClientRect().bottom;\r\n                  console.log(lazyLoadOffset);\r\n                  angular.element('.scrollbar-outer').scrollbar({\r\n                      onScroll : function(y, x) {\r\n                          //console.log('marker length -- '+lazyLoadMarker.length);\r\n                          if (lazyLoadMarker.length > 0 && scope.searchFieldVal.length == 0) {\r\n                              var markerNode = lazyLoadMarker[lazyLoadMarker.length - 1];\r\n                              if (angular.element(\"#\"+markerNode[scope.codeProperty])[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n                                  console.log(markerNode);\r\n                                  markerNode.lazyLoading = true;\r\n                                  lazyLoadMarker.length = (lazyLoadMarker.length > 0) ? lazyLoadMarker.length - 1 : 0;\r\n                                  lazyLoadLevelWiseData(markerNode);\r\n                                  console.log(lazyLoadMarker.length);\r\n                              }\r\n                          }\r\n                          if (y.maxScroll > 0 && y.scroll == y.maxScroll && scope.searchFieldVal.length > 0) {\r\n                              if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal, true);\r\n                              }\r\n                          }\r\n                      }\r\n                  });*/\r\n\r\n                  var massageSelectedData = function (data) {\r\n                      _.each(data, function (e) {\r\n                          if (e['children'])\r\n                              delete e['children'];\r\n                      });\r\n                      return data;\r\n                  };\r\n\r\n\r\n                  var newtotalID = [];\r\n                  var newtotalName = [];\r\n\r\n\r\n                  var getSelections = function () {\r\n\r\n                      _.each(scope.selectedData, function (node) {\r\n                          if (node.disabled) {\r\n                              scope.selectedData = _.without(scope.selectedData, node);\r\n                          }\r\n                      });\r\n\r\n                      newtotalID = [];\r\n                      newtotalName = [];\r\n\r\n                      var tCancel = $timeout(function () {\r\n                          scope.treeConfig.selectType = scope.selectType.code;\r\n                          var outPutObject = {\r\n                              'selectType': scope.selectType.code,\r\n                              'selections': massageSelectedData(scope.selectedData)\r\n                          };\r\n\r\n                          _.each(outPutObject.selections, function (data) {\r\n                              newtotalID.push(data[scope.codeProperty]);\r\n                              newtotalName.push(data[scope.titleProperty]);\r\n                          });\r\n\r\n                          outPutObject[\"selectionIds\"] = newtotalID;\r\n                          outPutObject[\"selectionNames\"] = newtotalName;\r\n                          if (scope.treeType == treeTypeObject) {\r\n                              outPutObject[\"selectionAllIds\"] = totalID;\r\n                              outPutObject[\"selectionAllNames\"] = totalName;\r\n                          }\r\n\r\n                          var hierarchyCollection = [];\r\n                          _.each(scope.selectedData, function (node) {\r\n                              if (node[scope.levelProperty] > 1) {\r\n                                  var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                                  var parentTraversalArray = [];\r\n                                  _.each(parentHierarchy, function (parentNode, index) {\r\n                                      var found = _.clone(_.find(levelWiseData[levelKey + (index + 1)], function (data) {\r\n                                          return data[scope.codeProperty] == parentNode;\r\n                                      }));\r\n                                      if (found && found['children'])\r\n                                          delete found['children'];\r\n                                      parentTraversalArray.push(found);\r\n                                  });\r\n                                  hierarchyCollection.push(parentTraversalArray);\r\n                              } else {\r\n                                  hierarchyCollection.push([node]);\r\n                              }\r\n                          });\r\n\r\n                          /*if(scope.treeConfig.getHierarchyOnSelection)\r\n                          {\r\n                            outPutObject['selectionHierarchy'] =  massageSelectedData(hierarchyCollection);\r\n                          }\r\n                          if(scope.treeConfig.getAllLazyLoadedData)\r\n                          {\r\n                            outPutObject['allLazyLoadedData'] = levelWiseData;\r\n                          }*/\r\n\r\n\r\n                          if (scope.treeConfig.getHierarchyOnSelection && (scope.treeType == treeTypeObject)) {\r\n                              outPutObject['selectionHierarchy'] = massageSelectedData(hierarchyCollection);\r\n                          }\r\n                          if (scope.treeConfig.getUserSelection && (scope.treeType == treeTypeObject)) {\r\n                              outPutObject['userSelection'] = massageSelectedData(scope.getUserSelectionArray);\r\n                          }\r\n                          if (scope.treeConfig.getAllLazyLoadedData) {\r\n                              outPutObject['allLazyLoadedData'] = levelWiseData;\r\n                          }\r\n                          if (scope.isActive) {\r\n                              scope.searchFieldVal = '';\r\n                              scope.hideSearch();\r\n                          }\r\n\r\n                          doneCallback(outPutObject);\r\n                          $timeout.cancel(tCancel);\r\n                          tCancel = null;\r\n                      });\r\n                  };\r\n\r\n                  /** seacrh for server **/\r\n\r\n                  var searchResultPageNumber = 0;\r\n                  var serverSearchVal = \"\";\r\n                  var isLazyLoadingNode;\r\n                  var ongoingService;\r\n                  function getSearchDataFromServer(searchBucket, callback, searchVal, isLazyLoad) {\r\n                      if (searchVal != serverSearchVal) {\r\n                          serverSearchVal = searchVal;\r\n                          searchResultPageNumber = 0;\r\n                          scope.searchResults.length = 0;\r\n                      }\r\n\r\n                      scope.isLoading = true;\r\n                      if (scope.isError) scope.isError = false;\r\n\r\n                      if (scope.searchResults.length > 0) {\r\n                          isLazyLoadingNode = scope.searchResults[scope.searchResults.length - 1];\r\n                          isLazyLoadingNode.lazyLoading = true;\r\n                      }\r\n\r\n                      if (ongoingService && !isLazyLoad) {\r\n                          RESTApi.abort(ongoingService);\r\n                      }\r\n\r\n                      ongoingService = {\r\n                          \"PageNumber\": searchResultPageNumber = searchResultPageNumber + 1,\r\n                          \"PageSize\": searchBucket,\r\n                          \"SearchText\": scope.searchFieldVal\r\n                      };\r\n\r\n                      //RESTApi.getData(scope.treeConfig.navigationContext, function(responseData) {\r\n                      //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function(responseData) {\r\n                      RESTApi.getData(navContext,\r\n                          function (responseData) {\r\n                          ongoingService = null;\r\n                          if (responseData.action == 'success') {\r\n                              scope.isLoading = false;\r\n                          } else {\r\n                              scope.isError = true;\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          callback(responseData);\r\n                      }, ongoingService, false, scope.treeType);\r\n                  }\r\n\r\n                  function createModelForSearchData(data) {\r\n                      if (isLazyLoadingNode)\r\n                          isLazyLoadingNode.lazyLoading = false;\r\n                      scope.searchResults = scope.searchResults.concat(getLeafNodeWithParentHierarchy(data.data.data[searchProperty]));\r\n                  };\r\n\r\n                  function getLeafNodeWithParentHierarchy(data) {\r\n                      var searchList = data;\r\n                      var searchDataCollection = [];\r\n                      var selectedData = _.groupBy(scope.selectedData, scope.codeProperty);\r\n                      _.each(searchList, function (searchData) {\r\n                          var searchDataHierarchy = searchData[levelWiseDataProperty];\r\n                          var sortedLevelSearchedData = _.sortBy(searchDataHierarchy, 'Level');\r\n                          var searchHitNode = sortedLevelSearchedData[sortedLevelSearchedData.length - 1];\r\n                          var parentString = \"\";\r\n                          var parentCodeString = \"\";\r\n\r\n                          _.each(sortedLevelSearchedData, function (data) {\r\n                              parentString = (parentString.length > 0) ? parentString + ' > ' + data[scope.titleProperty] : data[scope.titleProperty];\r\n                              parentCodeString = (parentCodeString.length > 0) ? parentCodeString + '>' + data[scope.codeProperty].toString() : data[scope.codeProperty].toString();\r\n                              data[parentStringConstant] = parentString;\r\n                              data[parentCodeStringConstant] = parentCodeString;\r\n                              data.selection = getSelectionFromLevelWiseData(data);\r\n                          });\r\n\r\n                          //searchHitNode.serverData = _.groupBy(sortedLevelSearchedData, scope.codeProperty);\r\n                          searchDataCollection.push(searchHitNode);\r\n                      });\r\n                      return searchDataCollection;\r\n                  };\r\n\r\n                  function resetSelectionForSearchNodes(node) {\r\n                      _.each(scope.searchResults, function (searchNode) {\r\n                          if (node[scope.codeProperty] != searchNode[scope.codeProperty] && searchNode[parentCodeStringConstant].indexOf((node[parentCodeStringConstant].length > 0) ? node[parentCodeStringConstant] : node[scope.codeProperty].toString()) != -1) {\r\n                              searchNode.selection = node.selection;\r\n                          } else {\r\n                              searchNode.selection = getSelectionFromLevelWiseData(searchNode);\r\n                          }\r\n                      });\r\n                  };\r\n\r\n                  function getSelectionFromLevelWiseData(node) {\r\n                      var searchLevel = node[scope.levelProperty];\r\n                      var groupedLevelData = _.groupBy(levelWiseData[levelKey + searchLevel], scope.codeProperty);\r\n                      var selectionState = (groupedLevelData[node[scope.codeProperty]]) ? groupedLevelData[node[scope.codeProperty]][0].selection : isPresentInInternalHierarchy(node) ? '1' : (node.IsSelected == false || node.IsSelected == null || node.IsSelected) ? getSelectionState(node.IsSelected) : '0';\r\n                      return selectionState;\r\n                  };\r\n\r\n                  function isPresentInInternalHierarchy(searchNode) {\r\n                      var retVal = false,\r\n                          len = scope.selectedData.length;\r\n                      for (var i = 0; i < len; i++) {\r\n                          var node = scope.selectedData[i];\r\n                          if (searchNode[parentCodeStringConstant].indexOf((node[parentCodeStringConstant].length > 0) ? node[parentCodeStringConstant] : node[scope.codeProperty].toString()) != -1) {\r\n                              retVal = true;\r\n                              break;\r\n                          }\r\n                      }\r\n                      return retVal;\r\n                  };\r\n\r\n                  /*function completeModelFromServerIfNeeded(node) {\r\n                      var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                      var dataRetrivalCount = parentHierarchy.length;\r\n                      parentHierarchy.length = dataRetrivalCount - 1;\r\n                      var recievedData = [];\r\n                      if (parentHierarchy.length > 0) {\r\n                          _.each(parentHierarchy, function(PASCode, index) {\r\n                              getChildsForParentAsPerBucket(node.serverData[PASCode][0], lazyLoadingBucket, 1, function(_node, data, isService, bucket, pageIndex) {\r\n                                  if (isService) {\r\n                                      if (data.action == 'success')\r\n                                          setLevelWiseData(data.data.data, _node);\r\n                                  };\r\n                                  dataRetrivalCount = dataRetrivalCount - 1;\r\n                                  if (dataRetrivalCount == 1) {\r\n                                      updateSelectionInDataSource(node);\r\n                                  }\r\n                              });\r\n                          });\r\n                      } else {\r\n                          updateSelectionInDataSource(node);\r\n                      }\r\n                  }*/\r\n\r\n                  function completeModelFromServerIfNeeded(node) {\r\n\r\n                      var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                      var levelNumber = node['Level'];\r\n                      var recievedData = [];\r\n\r\n                      if (!(levelWiseData[levelKey + node[scope.levelProperty]] && _.find(levelWiseData[levelKey + node[scope.levelProperty]], function (data) {\r\n                          return node[scope.codeProperty] == data[scope.codeProperty];\r\n                      }))) {\r\n                          var reqObj = {};\r\n                          reqObj[nodeExpandingCodeProperty] = [parseInt(parentHierarchy[parentHierarchy.length - 1])];\r\n\r\n                          //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function(responseData) {\r\n                          RESTApi.getData(navContext,\r\n                              function (responseData) {\r\n                              if (responseData.action == 'success') {\r\n                                  var allResultData = responseData.data.data.PAS_SearchList[0][levelWiseDataProperty];\r\n                                  var result = _.groupBy(allResultData, \"Level\");\r\n                                  var level = 1;\r\n                                  var levelData = [];\r\n                                  while (level) {\r\n                                      var obj = {};\r\n                                      obj[levelWiseDataProperty] = result[level];\r\n                                      obj['Level'] = level;\r\n                                      levelData.push(obj);\r\n                                      level = level + 1;\r\n                                      if (!result[level])\r\n                                          break;\r\n                                  };\r\n                                  createLevelWiseDataSet(levelData);\r\n                                  updateSelectionInDataSource(node);\r\n                              } else {\r\n                                  console.log('error');\r\n                              }\r\n                          }, reqObj, true, scope.treeType);\r\n                      } else {\r\n                          updateSelectionInDataSource(node);\r\n                      }\r\n                  }\r\n\r\n                  function updateSelectionInDataSource(node) {\r\n                      scope.selectNode(_.find(levelWiseData[levelKey + node.Level], function (data) {\r\n                          return data[scope.codeProperty] == node[scope.codeProperty];\r\n                      }), (node.selection == \"1\") ? \"0\" : \"1\", true);\r\n                      resetSelectionForSearchNodes(node);\r\n                  };\r\n\r\n                  scope.focusSearch = false;\r\n                  scope.isActive = false;\r\n                  scope.showMe = false;\r\n                  scope.showSearch = function () {\r\n                      scope.isActive = true;\r\n                      scope.showMe = true;\r\n                      scope.hideClose = true;\r\n                      $timeout(function () {\r\n                          scope.focusSearch = true;\r\n                      }, 100); \r\n                  }\r\n\r\n                  scope.hideSearch = function () {\r\n                    if(scope.searchFieldVal != \"\")\r\n                    {\r\n                        scope.searchFieldVal = \"\";    \r\n                        scope.noRecordsFound = false;\r\n                    }\r\n                    else\r\n                    {\r\n                            scope.searchFieldVal = \"\";\r\n                            scope.isActive = false;\r\n                            scope.focusSearch = false;\r\n                            scope.hideClose = false;\r\n                            scope.noRecordsFound = false;\r\n                            $(\"#SearchBtn\").focus();\r\n                    }\r\n                    scope.cancelTitle = scope.searchFieldVal == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                  }\r\n                  scope.editCallback = function () {\r\n\r\n                      scope.treeConfig.isReadOnly = false;\r\n                      scope.categories = [];\r\n                      lazyLoadMarker = [];\r\n                      scope.isLoading = true;\r\n                      scope.isError = false;\r\n                      totalID = [];\r\n                      totalName = [];\r\n\r\n                      initializePromise(true, true);\r\n                      renderLevels();\r\n                  }\r\n\r\n                  if (scope.config.useAs == \"inline\" && scope.config.export) {\r\n                      var exportLen = scope.config.export.length;\r\n                      for (var ex = 0; ex < exportLen; ex++) {\r\n                          setExport(scope.config.export[ex]);\r\n                      };\r\n                  }\r\n\r\n                  function setExport(key) { // setExport allow to access the isolated scope's functionality outside of directive\r\n                      if (scope.config.useAs != \"inline\") return; // if not useAs inline;\r\n                      !scope.config._export && (scope.config._export = {});\r\n                      if (key !== undefined) {\r\n                          scope.config._export[key] = typeof scope[key] == \"function\" ? function () {\r\n                              scope[key]()\r\n                          } : function () { return scope[key]; };\r\n                      }\r\n                  };\r\n\r\n                  scope.$on('$destroy', function () {\r\n                      deregisterConfigSelection();\r\n                      deregReqParam();\r\n                      deregReqContactCode();\r\n                      deregConfigData();\r\n                      deregSelectedNodes();\r\n                  });\r\n              },\r\n              templateUrl: 'shared/directives/smartHierarchy/smartHierarchyTemplate.html'\r\n          };\r\n      }])\r\n    .directive('myTemplate', function () {\r\n            return {\r\n                restrict: 'EA',\r\n                templateUrl: function (elem, attr) {\r\n                    return attr.type;\r\n                }\r\n            };\r\n        })\r\n.directive('ngIndeterminate', [\"$compile\", function ($compile) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attributes) {\r\n            scope.$watch(attributes['ngIndeterminate'], function (value) {\r\n                element.prop('indeterminate', value);\r\n            });\r\n        }\r\n    };\r\n}])\r\n.directive('ngHighlight', ['$compile', 'hilitor', function ($compile, hilitor) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attributes) {\r\n            scope.$watch(attributes['ngHighlight'], function (value) {\r\n                new Hilitor(\"treeComponentContainer-\" + scope.hierarchyCounter).apply(value);\r\n            });\r\n        }\r\n    };\r\n}])\r\n.service('RESTApi', ['$http', '$q','APPCONSTANTS',\r\nfunction ($http, $q, APPCONSTANTS) {\r\n    var baseUrl;\r\n    var documenttype='';\r\n    if (APPCONSTANTS != undefined) {\r\n        if (APPCONSTANTS.userPreferences.OrderData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.OrderData.type.id;\r\n        }\r\n        if (APPCONSTANTS.userPreferences.RequisitionData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.RequisitionData.type.id;\r\n        }\r\n        if (APPCONSTANTS.userPreferences.ProcurementProfileData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.ProcurementProfileData.type.id;\r\n        }\r\n\r\n    }\r\n    var callbackTracker = [];\r\n    var userExecutionContext;\r\n    var documentId;\r\n    var contactCode;\r\n    var requestObjectToBeExtended = null;\r\n    var customeURL;\r\n\r\n    /*if(windows.location.origin.indexOf('smartdev') > -1 || windows.location.origin.indexOf('127') > -1)\r\n    {\r\n      env = \"DEV\";\r\n    }else if(windows.location.origin.indexOf('smartqc') > -1)\r\n    {\r\n      env = \"QC\";\r\n    }else if(windows.location.origin.indexOf('smartuat') > -1)\r\n    {\r\n      env = \"UAT\";\r\n    }else\r\n    {\r\n      env = \"PROD\";\r\n    }*/\r\n\r\n    /*this.setEnvironment = function(env)\r\n    {\r\n      switch(env) {\r\n        case \"DEV\":\r\n        baseUrl = 'https://gepdevsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"QC\":\r\n        baseUrl = 'https://gepqcsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"UAT\":\r\n        baseUrl = 'https://gepuatsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"PROD\":\r\n        baseUrl = 'https://gepsmart-rest.servicebus.windows.net/PortalRestService/';\r\n      }\r\n    }*/\r\n    this.setEnvironment = function (newURL) {\r\n        baseUrl = newURL + \"PortalRestService/\";\r\n    };\r\n    //baseUrl = APPCONSTANTS.userPreferences.URLs.AppURL;\r\n\r\n    this.setDocumentId = function (val) {\r\n        documentId = val;\r\n    };\r\n    this.setContactCode = function (val) {\r\n        contactCode = val;\r\n    };\r\n    this.setUserContext = function (val) {\r\n        userExecutionContext = val;\r\n    };\r\n    this.setRequestObject = function (val) {\r\n        requestObjectToBeExtended = val;\r\n    };\r\n    this.setUrl = function (val) {\r\n        customeURL = val;\r\n    };\r\n    function createRequest(mode, data, isOverrideInputPayload, treeType) {\r\n        var contactPasMappingMethod,\r\n             bpcCode ='&c=' + APPCONSTANTS.userPreferences.EncryptedBPC,\r\n            getPasDetailsMethod,\r\n            inputParameterKey,\r\n            getParentForNodeUrl;\r\n        if (!baseUrl) {\r\n            return null;\r\n        }\r\n        switch (mode) {\r\n            case \"PAS\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactPASMappingDetilsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactPASMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetPASDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'PASInputParam_Levels';\r\n                getParentForNodeUrl = \"GetPASLevelDetailsByPASCodes?oloc=218\" + bpcCode;\r\n                break;\r\n            case \"REG\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactRegionMappingDetailsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactRegionMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetRegionDetails?oloc=218' + bpcCodes;\r\n                inputParameterKey = 'RegionInputParam_Levels';\r\n                getParentForNodeUrl = \"GetREGIONLevelDetailsByRegionIds\";\r\n                break;\r\n\r\n            case \"ORG\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactORGMappingDetailsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactOrgMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetORGDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'ORG_InputParams';\r\n                getParentForNodeUrl = \"GetOrgEntityLevelDetailsByEntityDetailCodes\";\r\n                break;\r\n        }\r\n\r\n\r\n        var propmiseForThisInstance = $q.defer();\r\n        var requestObject = {\r\n            'url': baseUrl,\r\n            'headers': {\r\n                'Content-Type': 'application/json',\r\n                'UserExecutionContext': null\r\n            },\r\n            'data': {},\r\n            'method': 'POST',\r\n            'timeout': propmiseForThisInstance.promise\r\n        };\r\n        requestObject['data'][inputParameterKey] = {\r\n            'ContactCode': null,\r\n            'DocumentCode': null\r\n        };\r\n        if (mode != undefined) {\r\n            if (mode.toLowerCase() == 'pas' && (documenttype == '8' || documenttype == '7' || documenttype == '38')) {\r\n                var userRestrictCategoryTree = _.where(APPCONSTANTS.userPreferences.CommonSettings.lstSettings, { \"FieldName\": \"RestrictUserMappedCategorySelection\" });\r\n                if (userRestrictCategoryTree != undefined && userRestrictCategoryTree.length > 0) {\r\n                    if (userRestrictCategoryTree[0].FieldValue.toLowerCase() == 'false') {\r\n                        contactCode = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isOverrideInputPayload == true) {\r\n            requestObject.url = requestObject.url + getParentForNodeUrl;\r\n            requestObject.data = data;\r\n        } else {\r\n            if (contactCode) {\r\n                requestObject.data[inputParameterKey].ContactCode = contactCode;\r\n                requestObject.url = requestObject.url + contactPasMappingMethod;\r\n            } else {\r\n                requestObject.data[inputParameterKey].ContactCode = null;\r\n                requestObject.url = requestObject.url + getPasDetailsMethod;\r\n            }\r\n            requestObject.data[inputParameterKey].DocumentCode = (documentId) ? documentId : null;\r\n\r\n        }\r\n\r\n        if (customeURL) {\r\n            requestObject.url = customeURL;\r\n            //getPasDetailsMethod = 'GetORGDetails';\r\n            //inputParameterKey = 'ORG_InputParams';\r\n            //getParentForNodeUrl = \"GetOrgEntityLevelDetailsByEntityDetailCodes\";\r\n        }\r\n        requestObject.headers.UserExecutionContext = userExecutionContext;\r\n        requestObject.promise = propmiseForThisInstance;\r\n        if (requestObjectToBeExtended == null && contactCode == null) {\r\n            requestObject.data[inputParameterKey] = _.extend(requestObject.data[inputParameterKey], data);\r\n        } else {\r\n            requestObject.data[inputParameterKey] = _.extend(_.extend(requestObject.data[inputParameterKey], data), requestObjectToBeExtended)\r\n        }\r\n        return requestObject;\r\n    };\r\n    this.abort = function (reqParam) {\r\n        var dataFoundOnIndex;\r\n        var promise = _.find(callbackTracker, function (reqObj, index) {\r\n            dataFoundOnIndex = index;\r\n            return _.isEqual(reqParam, reqObj.data);\r\n        }).promise;\r\n        if (promise) {\r\n            promise.resolve();\r\n            console.log('canceled - ' + reqParam);\r\n        }\r\n    };\r\n\r\n    this.getData = function (mode, callback, data, isOverrideInputPayload, treeType) {\r\n        var requestObject = new createRequest(mode, data, isOverrideInputPayload, treeType);\r\n        if (!(_.isEmpty(requestObject))) {\r\n            callbackTracker.push({\r\n                'key': JSON.stringify(requestObject.data),\r\n                'callback': callback,\r\n                'promise': requestObject.promise,\r\n                'data': data\r\n            });\r\n            serviceCall(requestObject);\r\n        }\r\n    };\r\n\r\n    function serviceCall(req) {\r\n        $http(req).then(function (response) {\r\n            var dataFoundOnIndex;\r\n            var Callback = _.find(callbackTracker, function (reqObj, index) {\r\n                dataFoundOnIndex = index;\r\n                return _.isEqual(JSON.parse(reqObj.key), req.data);\r\n            }).callback;\r\n            callbackTracker.splice(dataFoundOnIndex, 1);\r\n            Callback({\r\n                'action': 'success',\r\n                'data': response\r\n            });\r\n        }, function (error) {\r\n            var dataFoundOnIndex;\r\n            var Callback = _.find(callbackTracker, function (reqObj, index) {\r\n                dataFoundOnIndex = index;\r\n                return _.isEqual(JSON.parse(reqObj.key), req.data);\r\n            }).callback;\r\n            callbackTracker.splice(dataFoundOnIndex, 1);\r\n            Callback({\r\n                'action': 'failure',\r\n                'data': error\r\n            });\r\n        });\r\n    };\r\n}]);\r\n\r\n})(angular);\n// Original JavaScript code by Chirp Internet: www.chirp.com.au\n// Please acknowledge use of this code by including this header.\n// 2/2013 jon: modified regex to display any match, not restricted to word boundaries.\n\n// License at http://www.the-art-of-web.com/copyright.html\n\n(function ( window, factory ) {\n\n  if ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n    // Expose a factory as module.exports in loaders that implement the Node\n    // module pattern (including browserify).\n    // This accentuates the need for a real window in the environment\n    // e.g. var jQuery = require(\"jquery\")(window);\n    module.exports = function( w ) {\n      w = w || window;\n      if ( !w.document ) {\n        throw new Error(\"Hilitor requires a window with a document\");\n      }\n      return factory( w.document );\n    };\n  } else {\n    if ( typeof define === \"function\" && define.amd ) {\n      // AMD. Register as a named module.\n      define( [], function() {\n        return factory(document);\n      });\n    } else {\n        // Browser globals\n        window.Hilitor = factory(document);\n    }\n  }\n\n// Pass this, window may not be defined yet\n}(this, function ( document, undefined ) {\n\n\nfunction Hilitor(id, tag, options)\n{\n  var targetNode = document.getElementById(id) || document.body;\n  var hiliteTag = tag || \"EM\";\n  var skipTags = new RegExp(\"^(?:SCRIPT|FORM|INPUT|TEXTAREA|IFRAME|VIDEO|AUDIO)$\");\n  var colors = [\"#ff6\"];\n  var wordColor = [];\n  var colorIdx = 0;\n  var matchRegex = \"\";\n  var openLeft = true;\n  var openRight = true;\n  options = options || {};\n  if (typeof options.onStart !== 'function') {\n    options.onStart = function () { /* return FALSE when you want to abort */ };\n  }\n  if (typeof options.onFinish !== 'function') {\n    options.onFinish = function () { /* What you return here is returned by Hilitor.apply() */ return true; };\n  }\n  if (typeof options.onDoOne !== 'function') {\n    options.onDoOne = function (node) { /* return FALSE when you want to skip the highlighting change for this node */ };\n  }\n\n  this.setMatchType = function(type)\n  {\n    switch(type)\n    {\n    case \"left\":\n      openLeft = false;\n      openRight = true;\n      break;\n    case \"right\":\n      openLeft = true;\n      openRight = false;\n      break;\n    default:\n    case \"open\":\n      openLeft = openRight = true;\n      break;\n    case \"complete\":\n      openLeft = openRight = false;\n      break;\n    }\n  };\n\n  this.setRegex = function (input)\n  {\n    input = input.replace(/^[^\\w]+|[^\\w]+$/g, \"\").replace(/[^\\w'\\-]+/g, \"|\");\n    var re = \"(\" + input + \")\";\n    if(!openLeft) re = \"\\\\b\" + re;\n    if(!openRight) re = re + \"\\\\b\";\n    matchRegex = new RegExp(re, \"i\");\n  };\n\n  this.getRegex = function ()\n  {\n    var retval = matchRegex.toString();\n    retval = retval.replace(/^\\/(\\\\b)?|(\\\\b)?\\/i$/g, \"\");\n    retval = retval.replace(/\\|/g, \" \");\n    return retval;\n  };\n\n  // recursively apply word highlighting\n  this.hiliteWords = function (node)\n  {\n    var i;\n\n    if(!node)\n      return;\n    if(!matchRegex)\n      return;\n    if(skipTags.test(node.nodeName))\n       return;\n    if(node.nodeName === hiliteTag && node.className === \"hilitor\")\n      return;\n\n    if(node.hasChildNodes()) {\n      for(i = 0; i < node.childNodes.length; i++) {\n        this.hiliteWords(node.childNodes[i]);\n      }\n    }\n    if(node.nodeType === 3) { // NODE_TEXT\n      if((nv = node.nodeValue) && (regs = matchRegex.exec(nv))) {\n        if (false !== options.onDoOne.call(this, node)) {\n          if(!wordColor[regs[0].toLowerCase()]) {\n            wordColor[regs[0].toLowerCase()] = colors[colorIdx++ % colors.length];\n          }\n\n          var match = document.createElement(hiliteTag);\n          match.appendChild(document.createTextNode(regs[0]));\n          match.className = \"hilitor\";\n          match.style.backgroundColor = wordColor[regs[0].toLowerCase()];\n          match.style.fontStyle = \"inherit\";\n          match.style.color = \"#000\";\n\n          var after = node.splitText(regs.index);\n          after.nodeValue = after.nodeValue.substring(regs[0].length);\n          node.parentNode.insertBefore(match, after);\n        }\n      }\n    }\n  };\n\n  // remove highlighting\n  this.remove = function ()\n  {\n    var arr, i;\n    do {\n      arr = document.querySelectorAll(hiliteTag + \".hilitor\");\n      i = 0;\n      while (i < arr.length && (el = arr[i])) {\n        // store the reference to the parent of the hilite tag as that node itself, \n        // and all its links, is invalidated in the next .replaceChild() call:\n        var parentNode = el.parentNode;\n        if (!parentNode) {\n          i++;      \n          // this entry would otherwise crash in the code below; we can however improve \n          // on the total run-time costs by cutting back on the number of times we trigger\n          // the outer loop (which serves as a recovery mechanism anyway) by continuing\n          // with this querySelectorAll()'s results, but at it's higher indexes, which\n          // are very probably still valid/okay. This saves a number of outer loops and \n          // thus a number of querySelectorAll calls.\n          continue;\n        }\n        // Note that this stuff can crash (due to the parentNode being nuked) when multiple\n        // snippets in the same text node sibling series are merged. That's what the\n        // parentNode check is for. Ugly. Even while the .querySelectorAll() 'array' is updated\n        // automatically, which would imply that this never occurs, yet: it does. :-(\n        parentNode.replaceChild(el.firstChild, el);\n        // and merge the text snippets back together again.\n        parentNode.normalize();\n      }\n    } while (arr.length > 0);\n  };\n\n  // start highlighting at target node\n  this.apply = function (input)\n  {\n    // always remove all highlight markers which have been done previously\n    this.remove();\n    if(!input) {\n      return false;\n    }\n    this.setRegex(input);\n    var rv = options.onStart.call(this);\n    if (rv === false) {\n      return rv;\n    }\n    // ensure all text node series are merged, etc. so that we don't have to bother with fragmented texts in the search/scan.\n    targetNode.normalize();\n    this.hiliteWords(targetNode);\n    return options.onFinish.call(this);\n  };\n}\n\n\n  return Hilitor;\n}));\n\n(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartLastRepeaterElement', function () {\r\n\t\treturn function (scope, element, attrs) {\r\n\t\t    if (attrs.callbackOnItem === 'true') {\r\n\t\t        scope.$emit('AllRepeaterElement', element, attrs);\r\n\t\t    }\r\n\t\t    if (scope.$last) {\r\n\t\t        scope.$emit('LastRepeaterElement', element, attrs);\r\n\t\t    }\r\n\t\t};\r\n\t});\r\n})(angular);\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartMaps', [\"$compile\", \"$sce\", \"$templateRequest\", \"$timeout\", \"$translate\", function ($compile, $sce, $templateRequest, $timeout, $translate) {\r\n        return {\r\n            restrict: 'E',\r\n            template: '<div><div ng-if=\"!mapLoaded\" class=\"row\"><div class=\"mapinfocontainer center-align\"> <i class=\"icon grey-text\"><svg><use xlink:href=\"#icon_Info\"></use></svg></i> <span class=\"center-align displayBlock\">' + $translate.instant('couldNotLoadMap') + '</span> <span class=\"center-align displayBlock\">' + $translate.instant('checkAccessPermission') + '<a href=\"javascript:void(0)\" ng-click=\"viewSwitcher()\">' + $translate.instant('tableView') + '</a>.</span></div></div></div>',\r\n            scope: true,\r\n            replace: true,\r\n            link: function (scope, element, attrs) {\r\n\r\n                //scope.locations = scope[attrs.locations];\r\n                var locationsOpt = scope.$eval(attrs.locations);\r\n                scope.locations = scope[locationsOpt[0]][locationsOpt[1]];\r\n\r\n                scope.mapLoaded = true;\r\n                if (typeof window.google !== 'object' || typeof window.google.maps !== 'object') {\r\n                    scope.mapLoaded = false;\r\n                    scope.viewSwitcher = function () {\r\n                        scope.locations.viewSwitcherFlag.flag = false;\r\n                    };\r\n                    return false;\r\n                }\r\n\r\n                var myLatLng = new google.maps.LatLng(21, 78);\r\n                var mapOptions = {\r\n                    center: myLatLng,\r\n                    maxZoom: 14,\r\n                    minZoom: 2,\r\n                    streetViewControl: false,\r\n                    mapTypeControl: false,\r\n                    mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n                    styles: [\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"elementType\": \"labels.text.fill\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                               {\r\n                                   \"visibility\": \"on\"\r\n                               },\r\n                               {\r\n                                   \"color\": \"#6fa4e4\",\r\n                                   \"font-weight\": \"normal\"\r\n                               }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t   {\r\n\t\t\t\t\t\t       \"elementType\": \"labels.text.stroke\",\r\n\t\t\t\t\t\t       \"stylers\": [\r\n                                 {\r\n                                     \"visibility\": \"off\"\r\n                                 }\r\n\t\t\t\t\t\t       ]\r\n\t\t\t\t\t\t   },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.fill\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.stroke\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"labels\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#6fa4e4\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.land_parcel\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.locality\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                              {\r\n                                  \"color\": \"#6fa4e4\",\r\n                                  \"font-weight\": \"normal\"\r\n                              },\r\n                               {\r\n                                   \"visibility\": \"simplified\"\r\n                               }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.neighborhood\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"e6ebf1\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.stroke\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"elementType\": \"labels\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#6fa4e4\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.man_made\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"on\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural.landcover\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural.terrain\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"poi\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"road\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.airport\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.bus\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.rail\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"water\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#ffffff\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t }\r\n                    ]\r\n                };\r\n                element.height(480);\r\n\r\n                var map = new google.maps.Map(document.getElementById(attrs.id), mapOptions);\r\n\r\n                var mcOptions = { gridSize: 50, maxZoom: 14, imagePath: scope.locations.baseImgUrl + 'm' };\r\n\r\n                var infowindow = new google.maps.InfoWindow({\r\n                    maxWidth: 360\r\n                });\r\n                var latlngbounds = new google.maps.LatLngBounds();\r\n                var markers = [];\r\n                var img;\r\n                var key;\r\n                var mapDataLeng = scope.locations.locData.length,\r\n                    dataGeoDataTemp,\r\n\t\t\t        markerCluster;\r\n\r\n                markerCluster = new MarkerClusterer(map, markers, mcOptions);\r\n                markerCluster.styles_.forEach(function (val, ind) {\r\n                    val.textColor = \"white\";\r\n                });\r\n\r\n                // onClickZoom OVERRIDE\r\n                markerCluster.onClickZoom = function (event) { return multiChoice(markerCluster, event); };\r\n                scope.locationClusterMarker = {};\r\n                for (key = 0; key < mapDataLeng; key++) {\r\n                    var geocoder = new google.maps.Geocoder();\r\n                    (function (value, key) {\r\n                        mapGeocodeFn(value, key, mapDataLeng)\r\n\r\n                    })(scope.locations.locData[key], key);\r\n                };\r\n\r\n                function infoWindowStyle() {\r\n\r\n                    var iwOuter = $('.gm-style-iw');\r\n                    var iwBackground = iwOuter.prev();\r\n                    var $infoWin = iwOuter.parent('div').parent('div').parent('div');\r\n\r\n                    $infoWin.css({ visibility: 'hidden' });\r\n                    iwOuter.next().css('display', 'none');\r\n                    iwOuter.children(':nth-child(1)').css({ 'overflow': 'visible' });\r\n                    iwBackground.children(':nth-child(2)').css({ 'display': 'none' });\r\n                    iwBackground.children(':nth-child(4)').css({ 'display': 'none' });\r\n                    iwOuter.parent().css({ width: '360px' });\r\n                    iwOuter.css({ 'z-index': '-1' });\r\n                    $infoWin.css({ visibility: 'visible' });\r\n\r\n                }\r\n\r\n                function mapGeocodeFn(value, key, mapDataLeng) {\r\n                    var addressData = value.countryInfo ? value.countryInfo.CountryCode.toString() : value.state ? value.state.toString() : '',\r\n                        zipcode = value.zipcode ? value.zipcode.toString() : '';\r\n                    geocoder.geocode({\r\n                        componentRestrictions: {\r\n                            country: addressData,\r\n                            postalCode: zipcode\r\n                        }\r\n                    }, function (results, status) {\r\n                        if (status == google.maps.GeocoderStatus.OK) {\r\n\r\n                            if (key >= 7) {\r\n                                img = key % 7;\r\n                            } else {\r\n                                img = key;\r\n                            }\r\n\r\n                            var marker = new google.maps.Marker({\r\n                                position: new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()),\r\n                                map: map,\r\n                                title: value.state,\r\n                                id: key,\r\n                                //animation: google.maps.Animation.DROP,\r\n                                icon: scope.locations.baseImgUrl + \"cmarker\" + img + \".png\"\r\n                            });\r\n                            marker.setMap(map);\r\n                            markers.push(marker);\r\n\r\n                            markerCluster.addMarkers(markers);\r\n\r\n                            google.maps.event.addListener(marker, 'click', function () {\r\n                                var marker = this;\r\n                                //infowindow.setContent($compile(linker)(scope)[0]);\r\n                                scope.locations.id = marker.id;\r\n                                infowindow.open(map, marker);\r\n                                infoWindowStyle();\r\n                            });\r\n\r\n                            //AutoZoom map to fit all markers\r\n                            latlngbounds.extend(new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()));\r\n                            map.fitBounds(latlngbounds);\r\n                        }\r\n                        dataGeoDataTemp = markers.length ? false : true;\r\n                        if (dataGeoDataTemp != scope.locations.dataGeoData) {\r\n                            scope.$apply(function () {\r\n                                scope.locations.dataGeoData = dataGeoDataTemp;\r\n                            });\r\n                        }\r\n\r\n                        if (dataGeoDataTemp && scope.locations.viewSwitcherFlag.flag) {\r\n                            scope.$apply(function () {\r\n                                scope.locations.viewSwitcherFlag.flag = false;\r\n                            });\r\n                        }\r\n                    });\r\n                };\r\n                function multiChoice(mc, event) {\r\n\r\n                    scope.locationClusterMarker = event.cluster_;\r\n\r\n                    //map.panTo(event.cluster_.markers_[0].position);\r\n\r\n                    var clusterDom = '<ul id=\"dropdown1\" class=\"dropdown-content clusterDomContainer\"><li ng-click=\"clusterListFn(marker)\" ng-repeat=\"marker in locationClusterMarker.markers_\"><a href=\"javascript:void(0)\" class=\"grey-text text-darken-4\">{{locations.locData[marker.id].locname}}</a></li></ul>';\r\n                    clusterDom = $compile(clusterDom)(scope);\r\n                    if (!angular.element(event.div_).hasClass('clusterDomContainer-dropdown-button')) {\r\n                        angular.element(event.div_).addClass('clusterDomContainer-dropdown-button').attr({ 'data-activates': 'dropdown1', 'data-stoppropagation': true }).append(clusterDom);\r\n                        setTimeout(function () {\r\n                            var $dropBtn = angular.element('.clusterDomContainer-dropdown-button');\r\n                            $dropBtn.dropdown({\r\n                                constrain_width: false\r\n                            });\r\n                            $dropBtn.trigger('click');\r\n\r\n                        }, 10)\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                var unbindWatch = scope.$watch('locations.mapReinit', function (val) {\r\n                    if (val.reinit) {\r\n                        mapDataLeng = scope.locations.locData.length;\r\n                        infowindow.close();\r\n                        if (markerCluster) {\r\n                            markerCluster.clearMarkers();\r\n                            markers = [];\r\n                        }\r\n                        for (key = 0; key < mapDataLeng; key++) {\r\n                            var geocoder = new google.maps.Geocoder();\r\n                            (function (value, key) {\r\n                                mapGeocodeFn(value, key, mapDataLeng);\r\n                            })(scope.locations.locData[key], key);\r\n                        };\r\n                    }\r\n\r\n                    if (val.refresh) {\r\n                        setTimeout(function () {\r\n                            google.maps.event.trigger(map, \"resize\");\r\n                            map.fitBounds(latlngbounds);\r\n                            var zoom = map.getZoom();\r\n                            map.setZoom(zoom > 14 ? 14 : zoom);\r\n                        }, 100);\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    unbindWatch();\r\n                    scope.dataOption = null;\r\n                    infowindow = null;\r\n                    latlngbounds = null;\r\n                    markers = null;\r\n                    mapOptions = null;\r\n                    map = null;\r\n                    geocoder = null;\r\n                });\r\n\r\n                scope.clusterListFn = function (data) {\r\n                    var marker = data;\r\n                    $timeout(function () {\r\n                        scope.locations.id = marker.id;\r\n                        infowindow.setPosition(marker.position);\r\n                        infowindow.open(map);\r\n                        infoWindowStyle();\r\n                    }, 10);\r\n                };\r\n\r\n                google.maps.event.addListener(map, 'click', function (event) {\r\n                    if (infowindow) {\r\n                        var $locationCardDropdown = angular.element('.mapdropdownbtn');\r\n                        if ($locationCardDropdown.hasClass('active')) {\r\n                            $locationCardDropdown.trigger('click');\r\n                        }\r\n                        infowindow.close();\r\n                    }\r\n                });\r\n                var templateUrl = $sce.getTrustedResourceUrl(scope.locations.infoTemplateURL);\r\n                var linker;\r\n                $templateRequest(templateUrl).then(function (template) {\r\n                    linker = template;\r\n                    infowindow.setContent($compile(linker)(scope)[0]);\r\n                });\r\n                google.maps.event.addDomListener(map, 'zoom_changed', function () {\r\n                    if (infowindow) {\r\n                        var $locationCardDropdown = angular.element('.mapdropdownbtn');\r\n                        if ($locationCardDropdown.hasClass('active')) {\r\n                            $locationCardDropdown.trigger('click');\r\n                        }\r\n                        infowindow.close();\r\n                    }\r\n                    angular.element('#dropdown1').remove();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})(angular);\n(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartMetadataChips', ['debouncer', function (debouncer) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\tscope: {\r\n\t\t\t\t\"smartmetadata\": \"=metadata\",\r\n\t\t\t\t\"metadatatitle\": \"@\",\r\n\t\t\t\t\"maxlength\": \"@\",\r\n\t\t\t\t\"callBack\": \"&\"\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tscope.fieldClass = typeof attrs.fieldClass === 'undefined' ? 's4' : attrs.fieldClass;\r\n\t\t\t\tscope.itemTotal = typeof attrs.itemTotal === 'undefined' ? 3 : (parseInt(attrs.itemTotal, 10) <= 0 ? 0 : parseInt(attrs.itemTotal, 10));\r\n\t\t\t\tscope.fieldkey = typeof attrs.fieldkey === 'undefined' ? 'name' : attrs.fieldkey;\r\n\t\t\t\tscope.showMoreChips = 0;\r\n\r\n\t\t\t\tattrs.$observe('optionId', function () {\r\n\t\t\t\t\tscope.optionId = attrs.optionId;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.$on('LastRepeaterElement', function (scope, element, attrs) {\r\n\t\t\t\t\tdebouncer.add(function () {\r\n\t\t\t\t\t\tvar $chipsActiceContainer;\r\n\t\t\t\t\t\t$chipsActiceContainer = typeof $chipsActiceContainer !== 'undefined' ? $chipsActiceContainer : angular.element('#' + scope.targetScope.$parent.optionId + '-chips-0');\r\n\t\t\t\t\t\tif ($chipsActiceContainer) {\r\n\t\t\t\t\t\t\t$chipsActiceContainer.css({ 'transition': 'all .5s ease-in-out', 'background': '#e4e4e4', 'color': '#000' });\r\n\t\t\t\t\t\t\t$chipsActiceContainer.find('.chips-icon').css({ 'transition': 'all .5s ease-in-out', 'color': '#9e9e9e' });\r\n\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\t$chipsActiceContainer.css('transition', 'none').find('.chips-icon').css('transition', 'none');\r\n\t\t\t\t\t\t\t}, 500);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 100);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.metadataAdd = function (data, $e) {\r\n\t\t\t\t\tvar metadataContainer = angular.element('#' + scope.optionId).width() - 200,\r\n\t\t\t\t\t\t$chipsActiceContainer,\r\n\t\t\t\t\t\tfieldKey = scope.fieldkey;\r\n\t\t\t\t\tif (angular.isString(data.displayfield.title)) {\r\n\t\t\t\t\t    data.displayfield.title = data.displayfield.title.trim();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!data.displayfield.title) {\r\n\t\t\t\t\t    data.displayfield.isfocus = true;\r\n\t\t\t\t\t    return 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$chipsActiceContainer = angular.element('#' + scope.optionId + '-chips-0');\r\n\t\t\t\t\tif ($chipsActiceContainer) {\r\n\t\t\t\t\t\t$chipsActiceContainer.css({ 'transition': 'none', 'background': '#159dfc', 'color': '#fff' });\r\n\t\t\t\t\t\t$chipsActiceContainer.find('.chips-icon').css({ 'transition': 'none', 'color': '#fff' });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.options.unshift({});\r\n\t\t\t\t\tdata.options[0][fieldKey] = data.displayfield.title;\r\n\t\t\t\t\tdata.displayfield.title = \"\";\r\n\t\t\t\t\tdata.displayfield.isfocus = true;\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataCheck = function (data, $e) {\r\n\t\t\t\t\tvar char = $e.which || $e.keyCode,\r\n\t\t\t\t\t\tcharReq = [13, 188, 186],\r\n\t\t\t\t\t\tcharReqLength = charReq.length,\r\n\t\t\t\t\t\tcharReqKey,\r\n\t\t\t\t\t\ti;\r\n\r\n\t\t\t\t\tif (data.displayfield.title) {\r\n\t\t\t\t\t\tfor (i = 0; i < charReqLength; i++) {\r\n\t\t\t\t\t\t\tif (char === charReq[i]) {\r\n\t\t\t\t\t\t\t\tcharReqKey = charReq[i] === 188 ? ',' : charReq[i] === 186 ? ';' : '';\r\n\t\t\t\t\t\t\t\tif (charReqKey) {\r\n\t\t\t\t\t\t\t\t\tdata.displayfield.title = data.displayfield.title.replace(charReqKey, '');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tangular.element($e.currentTarget).blur();\r\n\t\t\t\t\t\t\t\tscope.metadataAdd(data, $e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar beforeDelete = function (obj) {\r\n\t\t\t\t    scope.callBack({\r\n\t\t\t\t        data: {\r\n\t\t\t\t            'data': obj.data.chipData.options[obj.data.index],\r\n\t\t\t\t            'type': 'delete', callback: deleteCallback\r\n\t\t\t\t        }\r\n\t\t\t\t    });\r\n\t\t\t\t    function deleteCallback(a) {\r\n\t\t\t\t        if (a) { obj.success() }\r\n\t\t\t\t        else { obj.reject() }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.metadataDelete = function (data, ind) {\r\n\t\t\t\t    if (attrs.callBack) {\r\n\t\t\t\t        beforeDelete({\r\n\t\t\t\t            data: { chipData: data, index: ind },\r\n\t\t\t\t            success: function () {\r\n\t\t\t\t                // user wants to delete\r\n\t\t\t\t                data.options.splice(ind, 1);\r\n\t\t\t\t                scope.$apply();\r\n\t\t\t\t            },\r\n\t\t\t\t            reject: function () {\r\n\t\t\t\t                // deletion rejected!\r\n\t\t\t\t            }\r\n\t\t\t\t        });\r\n\t\t\t\t    } else {\r\n\t\t\t\t        data.options.splice(ind, 1);\r\n\t\t\t\t    }\r\n\t\t\t\t};\r\n\t\t\t\tscope.smartmetachipTitleClick = function (data, ind) {\r\n\t\t\t\t\tangular.isFunction(scope.callBack) && scope.callBack({ data: { 'data': data.options[ind], 'type': 'add' } });\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataShowMore = function (cont) {\r\n\t\t\t\t\tangular.element('#' + cont).css('transition', '1s ease-in-out');\r\n\t\t\t\t\tdebouncer.add(function () {\r\n\t\t\t\t\t\tscope.showMoreChips = 1;\r\n\t\t\t\t\t}, 10);\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataLessMore = function (cont) {\r\n\t\t\t\t\tangular.element('#' + cont).css('transition', 'none');\r\n\t\t\t\t\tscope.showMoreChips = 0;\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/smartMetadataChips/smartMetadataChipsTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})(angular);\n(function () {\r\n\t'use strict';\r\n\tangular.module('SMART2').value('uiSliderConfig', {}).directive('smartRangeSlider', ['uiSliderConfig', '$timeout', function (uiSliderConfig, $timeout) {\r\n\t\tuiSliderConfig = uiSliderConfig || {};\r\n\t\treturn {\r\n\t\t\trequire: 'ngModel',\r\n\t\t\tcompile: function () {\r\n\t\t\t\tvar preLink = function (scope, elm, attrs, ngModel) {\r\n\r\n\t\t\t\t\tfunction parseNumber(n, decimals) {\r\n\t\t\t\t\t\treturn (decimals) ? parseFloat(n) : parseInt(n, 10);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar directiveOptions = angular.copy(scope.$eval(attrs.uiSlider));\r\n\t\t\t\t\tvar options = angular.extend(directiveOptions || {}, uiSliderConfig);\r\n\t\t\t\t\t// Object holding range values\r\n\t\t\t\t\tvar prevRangeValues = {\r\n\t\t\t\t\t\tmin: null,\r\n\t\t\t\t\t\tmax: null\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// convenience properties\r\n\t\t\t\t\tvar properties = ['min', 'max', 'step', 'lowerBound', 'upperBound'];\r\n\t\t\t\t\tvar useDecimals = (!angular.isUndefined(attrs.useDecimals)) ? true : false;\r\n\t\t\t\t\tvar updateOn = (angular.isDefined(options['updateOn'])) ? options['updateOn'] : 'slide'\r\n\r\n\t\t\t\t\tvar init = function () {\r\n\t\t\t\t\t\t// When ngModel is assigned an array of values then range is expected to be true.\r\n\t\t\t\t\t\t// Warn user and change range to true else an error occurs when trying to drag handle\r\n\t\t\t\t\t\tif (angular.isArray(ngModel.$viewValue) && options.range !== true) {\r\n\t\t\t\t\t\t\tconsole.warn('Change your range option of ui-slider. When assigning ngModel an array of values then the range option should be set to true.');\r\n\t\t\t\t\t\t\toptions.range = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Ensure the convenience properties are passed as options if they're defined\r\n\t\t\t\t\t\t// This avoids init ordering issues where the slider's initial state (eg handle\r\n\t\t\t\t\t\t// position) is calculated using widget defaults\r\n\t\t\t\t\t\t// Note the properties take precedence over any duplicates in options\r\n\t\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\t\tif (angular.isDefined(attrs[property])) {\r\n\t\t\t\t\t\t\t\toptions[property] = parseNumber(attrs[property], useDecimals);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\telm.slider(options);\r\n\t\t\t\t\t\tinit = angular.noop;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Find out if decimals are to be used for slider\r\n\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\t// support {{}} and watch for updates\r\n\t\t\t\t\t\tattrs.$observe(property, function (newVal) {\r\n\t\t\t\t\t\t\tif (!!newVal) {\r\n\t\t\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\t\t\toptions[property] = parseNumber(newVal, useDecimals);\r\n\t\t\t\t\t\t\t\telm.slider('option', property, parseNumber(newVal, useDecimals));\r\n\t\t\t\t\t\t\t\tngModel.$render();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\tattrs.$observe('disabled', function (newVal) {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\telm.slider('option', 'disabled', !!newVal);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Watch ui-slider (byVal) for changes and update\r\n\t\t\t\t\tscope.$watch(attrs.uiSlider, function (newVal) {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\tif (newVal !== undefined) {\r\n\t\t\t\t\t\t\telm.slider('option', newVal);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\t// Late-bind to prevent compiler clobbering\r\n\t\t\t\t\t$timeout(init, 0, true);\r\n\r\n\t\t\t\t\t// Update model value from slider\r\n\t\t\t\t\telm.bind(updateOn, function (event, ui) {\r\n\t\t\t\t\t\tvar valuesChanged;\r\n\r\n\t\t\t\t\t\tif (ui.values) {\r\n\t\t\t\t\t\t\tvar boundedValues = ui.values.slice();\r\n\r\n\t\t\t\t\t\t\tif (options.lowerBound && boundedValues[0] < options.lowerBound) {\r\n\t\t\t\t\t\t\t\tboundedValues[0] = Math.max(boundedValues[0], options.lowerBound);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (options.upperBound && boundedValues[1] > options.upperBound) {\r\n\t\t\t\t\t\t\t\tboundedValues[1] = Math.min(boundedValues[1], options.upperBound);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (boundedValues[0] !== ui.values[0] || boundedValues[1] !== ui.values[1]) {\r\n\t\t\t\t\t\t\t\tvaluesChanged = true;\r\n\t\t\t\t\t\t\t\tui.values = boundedValues;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar boundedValue = ui.value;\r\n\r\n\t\t\t\t\t\t\tif (options.lowerBound && boundedValue < options.lowerBound) {\r\n\t\t\t\t\t\t\t\tboundedValue = Math.max(boundedValue, options.lowerBound);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (options.upperBound && boundedValue > options.upperBound) {\r\n\t\t\t\t\t\t\t\tboundedValue = Math.min(boundedValue, options.upperBound);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (boundedValue !== ui.value) {\r\n\t\t\t\t\t\t\t\tvaluesChanged = true;\r\n\t\t\t\t\t\t\t\tui.value = boundedValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tngModel.$setViewValue(ui.values || ui.value);\r\n\t\t\t\t\t\t$(ui.handle).find('.ui-slider-tip').text(ui.value);\r\n\t\t\t\t\t\tscope.$apply();\r\n\r\n\t\t\t\t\t\tif (valuesChanged) {\r\n\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\telm.slider('value', ui.values || ui.value);\r\n\t\t\t\t\t\t\t}, 0);\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Update slider from model value\r\n\t\t\t\t\tngModel.$render = function () {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\tvar method = options.range === true ? 'values' : 'value';\r\n\r\n\t\t\t\t\t\tif (options.range !== true && isNaN(ngModel.$viewValue) && !(ngModel.$viewValue instanceof Array)) {\r\n\t\t\t\t\t\t\tngModel.$viewValue = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (options.range && !angular.isDefined(ngModel.$viewValue)) {\r\n\t\t\t\t\t\t\tngModel.$viewValue = [0, 0];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Do some sanity check of range values\r\n\t\t\t\t\t\tif (options.range === true) {\r\n\t\t\t\t\t\t\t// previously, the model was a string b/c it was in a text input, need to convert to a array.\r\n\t\t\t\t\t\t\t// make sure input exists, comma exists once, and it is a string.\r\n\t\t\t\t\t\t\tif (ngModel.$viewValue && angular.isString(ngModel.$viewValue) && (ngModel.$viewValue.match(/,/g) || []).length === 1) {\r\n\t\t\t\t\t\t\t\t// transform string model into array.\r\n\t\t\t\t\t\t\t\tvar valueArr = ngModel.$viewValue.split(',');\r\n\t\t\t\t\t\t\t\tngModel.$viewValue = [Number(valueArr[0]), Number(valueArr[1])];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Check outer bounds for min and max values\r\n\t\t\t\t\t\t\tif (angular.isDefined(options.min) && options.min > ngModel.$viewValue[0]) {\r\n\t\t\t\t\t\t\t\tngModel.$viewValue[0] = options.min;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(options.max) && options.max < ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\tngModel.$viewValue[1] = options.max;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check min and max range values\r\n\t\t\t\t\t\t\tif (ngModel.$viewValue[0] > ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\t// Min value should be less to equal to max value\r\n\t\t\t\t\t\t\t\tif (prevRangeValues.min >= ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\t\tngModel.$viewValue[1] = prevRangeValues.min;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Max value should be less to equal to min value\r\n\t\t\t\t\t\t\t\tif (prevRangeValues.max <= ngModel.$viewValue[0]) {\r\n\t\t\t\t\t\t\t\t\tngModel.$viewValue[0] = prevRangeValues.max;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Store values for later user\r\n\t\t\t\t\t\t\tprevRangeValues.min = ngModel.$viewValue[0];\r\n\t\t\t\t\t\t\tprevRangeValues.max = ngModel.$viewValue[1];\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telm.slider(method, ngModel.$viewValue);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tscope.$watch(attrs.ngModel, function () {\r\n\t\t\t\t\t\tif (options.range === true) {\r\n\t\t\t\t\t\t\tngModel.$render();\r\n\r\n\t\t\t\t\t\t\t$(elm).find('.ui-slider-tip').each(function (i, tipElm) {\r\n\t\t\t\t\t\t\t\t$(tipElm).text(ngModel.$viewValue[i]);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$(elm).find('.ui-slider-tip').text(ngModel.$viewValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\tfunction destroy() {\r\n\t\t\t\t\t\tif (elm.hasClass('ui-slider')) {\r\n\t\t\t\t\t\t\telm.slider('destroy');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.$on(\"$destroy\", destroy);\r\n\t\t\t\t\telm.one('$destroy', destroy);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar postLink = function (scope, element, attrs, ngModel) {\r\n\t\t\t\t\t// Add tick marks if 'tick' and 'step' attributes have been setted on element.\r\n\t\t\t\t\t// Support horizontal slider bar so far. 'tick' and 'step' attributes are required.\r\n\t\t\t\t\tvar options = angular.extend({}, scope.$eval(attrs.uiSlider));\r\n\t\t\t\t\tvar properties = ['min', 'max', 'step', 'tick', 'tip'];\r\n\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\tif (angular.isDefined(attrs[property])) {\r\n\t\t\t\t\t\t\toptions[property] = attrs[property];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (angular.isDefined(options['tick']) && angular.isDefined(options['step'])) {\r\n\t\t\t\t\t\tvar total = parseInt((parseInt(options['max']) - parseInt(options['min'])) / parseInt(options['step']));\r\n\t\t\t\t\t\tfor (var i = total; i >= 0; i--) {\r\n\t\t\t\t\t\t\tvar left = ((i / total) * 100) + '%';\r\n\t\t\t\t\t\t\t$(\"<div/>\").addClass(\"ui-slider-tick\").appendTo(element).css({ left: left });\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (angular.isDefined(options['tip'])) {\r\n\t\t\t\t\t\t$timeout(function () {\r\n\t\t\t\t\t\t\tvar handles = element.find('.ui-slider-handle');\r\n\t\t\t\t\t\t\tif (handles && handles.length > 1 && ngModel.$viewValue && angular.isArray(ngModel.$viewValue)) {\r\n\t\t\t\t\t\t\t\t$(handles[0]).append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue[0] + '</div>');\r\n\t\t\t\t\t\t\t\t$(handles[1]).append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue[1] + '</div>');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\telement.find('.ui-slider-handle').append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue + '</div>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 10);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpre: preLink,\r\n\t\t\t\t\tpost: postLink\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();\n(function (angular,$) {\r\n    /*\r\n        :: directive attributes\r\n                onResize    :   & // fires when element changes size\r\n          onHeightChange    :   & // fires when element's height change\r\n           onWidthChange    :   & // fires when element's width change\r\n    */\r\n    \"use strict\";\r\n    angular.module(\"SMART2\")\r\n        .directive(\"smartResize\", [\"$timeout\", \"$parse\", smartResizeDir]);\r\n\r\n    function smartResizeDir($timeout, $parse) {\r\n        return {\r\n            link: function (scope, element, attrs) {\r\n                var callbacks = {\r\n                    onResize: attrs.onResize ? $parse(addArguments(attrs.onResize)) : null,\r\n                    onHeightChange: attrs.onHeightChange ? $parse(addArguments(attrs.onHeightChange)) : null,\r\n                    onWidthChange: attrs.onWidthChange ? $parse(addArguments(attrs.onWidthChange)) : null\r\n                };\r\n                function addArguments(fn) {\r\n                    return fn.replace(/\\(\\)/, '(e)');\r\n                }\r\n                $timeout(function () {\r\n                    resizeElement({\r\n                        element: element.get(0),\r\n                        onResize: function (a) {\r\n                            callbacks.onResize(scope, { e: a });\r\n                        },\r\n                        onHeightChange: function (a) {\r\n                            callbacks.onHeightChange(scope, { e: a });\r\n                        },\r\n                        onWidthChange: function (a) {\r\n                            callbacks.onWidthChange(scope, { e: a });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function resizeElement(config) {\r\n                    var config = $.extend({\r\n                        element: null, // html element :: accepts Html Element not selector\r\n                        onResize: null, // callback fires after changed size of element :: accepts function\r\n                        onHeightChange: null, // callback fires after changed height of element :: accepts function\r\n                        onWidthChange: null // callback fires after changed width of element :: accepts function\r\n                    }, config),\r\n                        resizeSensorCss = 'width:100%;height:100%;position:absolute;left:0;top:0;z-index:-1;',\r\n                        sensorCss = 'position:absolute;left:0;top:0;overflow:hidden;height:100%;width:100%;',\r\n                        sensorElementCss = 'position:relative;top:0;',\r\n                        html = '<div class=\"resize-sensor\" style=\"' + resizeSensorCss + '\"><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"shrink\"><div class=\"sensor-element-shrink\" style=\"' + sensorElementCss + '\"></div></div><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"expand\"><div class=\"sensor-element-expand\" style=\"' + sensorElementCss + '\"></div></div></div>';\r\n\r\n                    var el = $(config.element),\r\n                        PD = { height: 0, width: 0 },\r\n                        PDC = { height: 0, width: 0 };\r\n                    if (el.length > 0) {\r\n                        var mainSensor = $(html);\r\n                        el.css(\"position\", \"relative\").append(mainSensor);\r\n                        mainSensor.find(\".sensor\").each(function () {\r\n                            var sensor = $(this);\r\n                            if (sensor.data(\"el\") == \"expand\") {\r\n                                sensor.find(\".sensor-element-expand\")\r\n                                    .css({ width: el.outerWidth() * 2, height: el.outerHeight() * 2 });\r\n                            } else if (sensor.data(\"el\") == \"shrink\") {\r\n                                sensor.find(\".sensor-element-shrink\")\r\n                                    .css({ width: \"200%\", height: \"200%\" });\r\n                            }\r\n                            sensor.scrollLeft(el.outerWidth() * 2);\r\n                            sensor.scrollTop(el.outerHeight() * 2);\r\n                        }).each(function () {\r\n                            var sensor = $(this);\r\n                            sensor.scroll(function (e) {\r\n                                var _this = $(this);\r\n                                if ((el.outerWidth() != PD.width || el.outerHeight() != PD.height) && (PD.height != 0 && PD.width != 0)) {\r\n                                    PD.height = el.outerHeight();\r\n                                    PD.width = el.outerWidth()\r\n                                    if (_this.data(\"el\") == \"shrink\") {\r\n                                        mainSensor\r\n                                            .find(\".sensor-element-expand\")\r\n                                            .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2);\r\n\r\n                                    } else if (_this.data(\"el\") == \"expand\") {\r\n                                        mainSensor\r\n                                            .find(\".sensor-element-shrink\")\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2)\r\n                                            .next()\r\n                                            .find(\".sensor-element-expand\")\r\n                                            .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2);\r\n                                    }\r\n\r\n                                    initHandlers(PD, PDC); // invoke callbacks\r\n                                } else {\r\n                                    PD.height = el.outerHeight();\r\n                                    PD.width = el.outerWidth();\r\n\r\n                                    PDC.height = PD.height;\r\n                                    PDC.width = PD.width;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    function initHandlers(size, previousSize) {\r\n                        if (callbacks.onResize) {\r\n                            config.onResize.call(config.element, size); // execute resize callback\r\n                        }\r\n\r\n                        if (size.height != previousSize.height && callbacks.onHeightChange) {\r\n                            config.onHeightChange.call(config.element, size); // execute height resize callback\r\n                        } else if (size.width != previousSize.width && callbacks.onWidthChange) {\r\n                            config.onWidthChange.call(config.element, size); // execute width resize callback\r\n                        }\r\n\r\n                        // save new dimention\r\n                        previousSize.height = size.height;\r\n                        previousSize.width = size.width;\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    $.fn.resizeSensor = function (setting) {\r\n\r\n        var resizeSensorCss = 'width:100%;height:100%;position:absolute;left:0;top:0;z-index:-1;',\r\n            sensorCss = 'position:absolute;left:0;top:0;overflow:hidden;height:100%;width:100%;',\r\n            sensorElementCss = 'position:relative;top:0;',\r\n            html = '<div class=\"resize-sensor\" style=\"' + resizeSensorCss + '\"><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"shrink\"><div class=\"sensor-element-shrink\" style=\"' + sensorElementCss + '\"></div></div><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"expand\"><div class=\"sensor-element-expand\" style=\"' + sensorElementCss + '\"></div></div></div>',\r\n         defaultConfig = {\r\n             onResize: null, // callback fires after changed size of element :: accepts function\r\n             onHeightChange: null, // callback fires after changed height of element :: accepts function\r\n             onWidthChange: null // callback fires after changed width of element :: accepts function\r\n         };\r\n\r\n        return this.each(function () {\r\n\r\n            var config = $.extend(defaultConfig, setting),\r\n                el = $(this),\r\n                    PD = { height: 0, width: 0 },\r\n                    PDC = { height: 0, width: 0 };\r\n            if (el.length > 0) {\r\n                var mainSensor = $(html);\r\n                if (el.css('position') === 'static') {\r\n                    el.css(\"position\", \"relative\")\r\n                }\r\n                el.append(mainSensor);\r\n\r\n                mainSensor.find(\".sensor\").each(function () {\r\n                    var sensor = $(this);\r\n                    if (sensor.data(\"el\") == \"expand\") {\r\n                        sensor.find(\".sensor-element-expand\")\r\n                            .css({ width: el.outerWidth() * 2, height: el.outerHeight() * 2 });\r\n                    } else if (sensor.data(\"el\") == \"shrink\") {\r\n                        sensor.find(\".sensor-element-shrink\")\r\n                            .css({ width: \"200%\", height: \"200%\" });\r\n                    }\r\n                    sensor.scrollLeft(el.outerWidth() * 2);\r\n                    sensor.scrollTop(el.outerHeight() * 2);\r\n                }).each(function () {\r\n                    var sensor = $(this);\r\n                    sensor.scroll(function (e) {\r\n                        var _this = $(this);\r\n                        if ((el.outerWidth() != PD.width || el.outerHeight() != PD.height) && (PD.height != 0 && PD.width != 0)) {\r\n                            PD.height = el.outerHeight();\r\n                            PD.width = el.outerWidth()\r\n                            if (_this.data(\"el\") == \"shrink\") {\r\n                                mainSensor\r\n                                    .find(\".sensor-element-expand\")\r\n                                    .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2);\r\n\r\n                            } else if (_this.data(\"el\") == \"expand\") {\r\n                                mainSensor\r\n                                    .find(\".sensor-element-shrink\")\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2)\r\n                                    .next()\r\n                                    .find(\".sensor-element-expand\")\r\n                                    .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2);\r\n                            }\r\n\r\n                            initHandlers(sensor, PD, PDC); // invoke callbacks\r\n                        } else {\r\n                            PD.height = el.outerHeight();\r\n                            PD.width = el.outerWidth();\r\n\r\n                            PDC.height = PD.height;\r\n                            PDC.width = PD.width;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function initHandlers(sensor, size, previousSize) {\r\n                    if (config.onResize) {\r\n                        config.onResize.call(sensor, size); // execute resize callback\r\n                    }\r\n\r\n                    if (size.height != previousSize.height && config.onHeightChange) {\r\n                        config.onHeightChange.call(sensor, size); // execute height resize callback\r\n                    } else if (size.width != previousSize.width && config.onWidthChange) {\r\n                        config.onWidthChange.call(sensor, size); // execute width resize callback\r\n                    }\r\n\r\n                    // save new dimention\r\n                    previousSize.height = size.height;\r\n                    previousSize.width = size.width;\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    };\r\n})(angular, jQuery);\r\n\n(function (angular) {\r\n    \"use strict\";\r\n    angular.module(\"SMART2\")\r\n        .directive(\"smartRevision\", [\"$timeout\", \"$sce\", \"$translate\", smartRevisionDir]);\r\n\r\n    function smartRevisionDir($timeout, $sce, $translate) {\r\n        return {\r\n            restrict: \"E\",\r\n            replace: true,\r\n            transclude: {\r\n                oldData: \"?span\",\r\n                newData:\"?div\"\r\n            },\r\n            scope: {\r\n                align: \"@\",\r\n                oldData: \"=?\",\r\n                newData: \"=?\",\r\n                label: \"@\",\r\n                type: \"@\",\r\n                imgDimention: \"@\",\r\n                treeCallback: \"&\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var value = {\r\n                    image: \"image\",\r\n                    normal: \"normal\",\r\n                    defaultDimention: 150,\r\n                    tree: \"tree\"\r\n                };\r\n                scope.type = scope.type || value.normal;\r\n                scope.align = scope.align ? scope.align : \"left\";\r\n                scope.treemode = attrs.treemode;\r\n                //scope.oldData = scope.oldData ? scope.oldData : attrs.oldData;\r\n                //scope.newData = scope.newData ? scope.newData : attrs.newData;\r\n\r\n                scope.closeButton = { title: $translate.instant(\"closeBtn\") };\r\n\r\n                scope.multiRows = function (data) {\r\n                    var ismultiRows = false;\r\n                    if (data) {\r\n                        var type = data.constructor.toString().match(/function ([A-Za-z]+)/)[1];\r\n                        if (type == \"Array\") {\r\n                            ismultiRows = true;\r\n                        }\r\n                    }\r\n                    return ismultiRows;\r\n                }(scope.oldData || scope.newData);\r\n                if (!scope.oldData && !scope.newData) { // for transclude element\r\n                    scope.transclude = true;\r\n                    $timeout(function () {\r\n                        element\r\n                            .find(\"[old-data]\")\r\n                            .addClass(\"revision-old-val\")\r\n                            .wrap(\"<span>\")\r\n                            .parent()\r\n                            .addClass(\"revision-old-data\");\r\n                        element\r\n                            .find(\"[new-data]\")\r\n                            .wrap(\"<span>\")\r\n                            .parent()\r\n                            .addClass(\"revision-new-data\");\r\n                    });\r\n                } else if (scope.oldData && scope.newData) {\r\n                    scope.isChanged = true;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.oldDataHtml = $sce.trustAsHtml(scope.oldData);\r\n                        scope.newDataHtml = $sce.trustAsHtml(scope.newData);\r\n                    }\r\n                } else if (scope.oldData && !scope.newData) {\r\n                    scope.isChanged = false;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.oldDataHtml = $sce.trustAsHtml(scope.oldData);\r\n                    }\r\n                } else if (!scope.oldData && scope.newData) {\r\n                    scope.isChanged = true;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.newDataHtml = $sce.trustAsHtml(scope.newData);\r\n                    }\r\n                }\r\n                if (scope.type == value.image) {\r\n                    if (scope.imgDimention) {\r\n                        scope.diagonal = {}\r\n                    } else {\r\n                        var diagonalWidth = calculateRectdiagonal(value.defaultDimention, value.defaultDimention);\r\n                        scope.diagonal = {\r\n                            width: diagonalWidth,\r\n                            left: -(diagonalWidth / 2 - value.defaultDimention / 2)\r\n                        }\r\n                    }\r\n                } else if (scope.type == value.tree) {\r\n                    scope.popup = {\r\n                        url: \"shared/directives/smartRevision/treeviewChanges.html\",\r\n                        show: false,\r\n                        callback: function (a) {\r\n                            scope.popup.show = false;\r\n                            if (attrs.treeCallback) {\r\n                                scope.treeCallback({\r\n                                    data: {\r\n                                        'oldData': scope.oldData,\r\n                                        'newData': scope.newData,\r\n                                        'type': 'close',\r\n                                        'label': scope.label\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                scope.treeChange = function () {\r\n                    if (attrs.treeCallback) {\r\n                        scope.treeCallback({\r\n                            data: {\r\n                                'oldData': scope.oldData,\r\n                                'newData': scope.newData,\r\n                                'type': 'open',\r\n                                'label': scope.label\r\n                            }\r\n                        });\r\n                    }\r\n                    scope.popup.show = true;\r\n                }\r\n            },\r\n            templateUrl: \"shared/directives/smartRevision/smartRevisionTemplate.html\"\r\n        }\r\n    }\r\n    function calculateRectdiagonal(w, h) {\r\n        return Math.sqrt(w * w + h * h);\r\n    }\r\n    function checkJson(a) {\r\n        if (a) {\r\n            try{\r\n                a = JSON.parse(a);\r\n            }catch(e){}\r\n        }\r\n\r\n        return a;\r\n    }\r\n})(angular);\n(function() {\r\n    'use strict';\r\n    angular.module('SMART2')\r\n        .directive('smartSavedViewPopup', ['notification', 'cacheHelperService', 'smartSavedViewPopupCollection', '$translate', smartSavedViewPopupFunc])\r\n        .service(\"smartSavedViewPopupCollection\", function () {\r\n            this.collection = [];\r\n            this.set = function (x) {\r\n                this.collection.push(x);\r\n            }\r\n            this.get = function (x) {\r\n                return this.collection;\r\n            }\r\n        });\r\n\r\n    function smartSavedViewPopupFunc(notification, cacheHelperService, smartSavedViewPopupCollection, $translate) {\r\n        return {\r\n            restrict: 'E',\r\n            transclude: true,\r\n            scope: {\r\n                show: '=',\r\n                hide: '&',\r\n                loader: '=',\r\n                model: '=ngModel',\r\n                config: '=',\r\n                isApplyFilters: \"=\",\r\n                isSavedView: \"=\",\r\n                isSavedViewModified: \"=\",\r\n                openPopupSavedView: \"=\",\r\n                api: \"=\",\r\n                setTitle: '@',\r\n                callbackFunc: \"&\"\r\n            },\r\n            controller: [\"$scope\", \"$http\", \"$timeout\", \"smartSavedViewPopupCollection\", function ($scope, $http, $timeout, smartSavedViewPopupCollection) {\r\n                //  $scope.collection = smartSavedViewPopupCollection.get(\"all\").length;\r\n                smartSavedViewPopupCollection.set($scope);\r\n                $scope.popupInc = smartSavedViewPopupCollection.get().length;\r\n                \r\n                $scope.disableDoneButton = true;\r\n                $scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n                $scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                $scope.uncheckMarkAsDefault;\r\n                /*for Done button disabled*/\r\n                var handleDoneButtonVisibility = function () {\r\n                    var isDefaultSelected = _.find($scope.config, { \"isDefault\": true });\r\n                    if (isDefaultSelected) {\r\n                        $scope.disableDoneButton = false;\r\n                    } else {\r\n                        $scope.disableDoneButton = true;\r\n                    }\r\n                }\r\n                handleDoneButtonVisibility();\r\n                $scope.defaultCheckUncheck = true;\r\n                var handleMarkAsDefault = function () {\r\n                    $scope.isMarkAsDefault.check = false;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].isDefault && $scope.config[i].isDefaultTxt) {\r\n                            $scope.isMarkAsDefault.check = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                $scope.setDefaultFiler = function (isDefaultTrue) {\r\n                    $scope.defaultCheckUncheck = true;\r\n                    if (isDefaultTrue) {\r\n                        $scope.uncheckMarkAsDefault = false;\r\n                    } else {\r\n                        $scope.uncheckMarkAsDefault = true;\r\n                    }\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].isDefault && $scope.config[i].isDefaultTxt) {\r\n                            $scope.defaultCheckUncheck = isDefaultTrue;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                $scope.showSavedViewPopup = true;\r\n                $scope.showSaveView = true;\r\n                $scope.radioChangeCallback = function (index, currentItem) {\r\n                    var view = _.find($scope.config, { \"index\": $scope.model.name });\r\n                    if (!view) {\r\n                        view = _.find($scope.config, { \"index\": $scope.model.index });\r\n                    }\r\n                    $scope.selectedFilter = view;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        $scope.config[i].isDefault = false;\r\n                    }\r\n                    \r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if (currentItem) {\r\n                            if ($scope.config[i].index === currentItem.index) {\r\n                                $scope.config[i].isDefault = true;\r\n                            }\r\n                        } else {\r\n                            if ($scope.config[i].index === (view && view.index)) {\r\n                                $scope.config[i].isDefault = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    handleDoneButtonVisibility();\r\n                    handleMarkAsDefault();\r\n                }\r\n                $scope.currentDefault;\r\n                $scope.showSavedView = function () {\r\n                    $scope.currentDefault = _.find($scope.config, { \"isDefaultTxt\": true });\r\n                    var currentCheck = $scope.defaultCheckUncheck;\r\n                    $scope.isSavedView = true;\r\n                    $scope.isSavedFilter = true;\r\n                    if ($scope.uncheckMarkAsDefault && $scope.uncheckMarkAsDefault != undefined) {\r\n                        for (var i = 0; i < $scope.config.length; i++) {\r\n                            $scope.config[i].isDefaultTxt = false;\r\n                        }\r\n                    }\r\n                    $scope.uncheckMarkAsDefault = false;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.isMarkAsDefault.check == true) {\r\n                            $scope.config[i].isDefaultTxt = false;\r\n                            if ($scope.config[i].isDefault == true) {\r\n                                $scope.config[i].isDefaultTxt = true;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!$scope.selectedFilter.name) {\r\n                        $scope.selectedFilter.name = $scope.api.currentViewApplied.name;\r\n                    }\r\n                    if ($scope.api) {\r\n                        $scope.api.currentViewApplied = _.find($scope.config, { index: $scope.selectedFilter.index });\r\n                        if ($scope.api.currentViewApplied == null) {\r\n                            cacheHelperService.setFilterDef('{\"defaultFilterType\":3,\"filters\":[]}');\r\n                        }\r\n                        if ($scope.api.currentViewApplied != undefined) {\r\n                            cacheHelperService.setFilterDef($scope.api.currentViewApplied.Filters);\r\n                        }\r\n                        $scope.api.selectedSavedview = { \"name\": $scope.selectedFilter.name };\r\n                        $scope.api.selectedFilterView = { \"name\": $scope.selectedFilter.name };\r\n                        if ($scope.currentDefault != undefined) {\r\n                            if ($scope.currentDefault.index != $scope.api.currentViewApplied.index) {\r\n                                $scope.currentDefault.isDefault = currentCheck;\r\n                                SaveResetOrMarkAsDefault($scope.currentDefault);\r\n                            }\r\n                        }\r\n                        if ($scope.isMarkAsDefault.check == true) {\r\n                            $scope.api.currentViewApplied.isDefault = true;\r\n                            SaveResetOrMarkAsDefault($scope.api.currentViewApplied);\r\n                            $scope.isMarkAsDefault.check = false;\r\n                        } else {\r\n                            $scope.api.currentViewApplied.isDefault = false;\r\n                            SaveResetOrMarkAsDefault($scope.api.currentViewApplied);\r\n                        }\r\n                        if($scope.setTitle != \"SAVED FILTERS\")\r\n                            $scope.api.applyViewOnGrid();\r\n                    }\r\n                    $scope.callbackFunc({\r\n                        e: {\r\n                            'model': $scope.selectedFilter,\r\n                            'currOperation': 'applyFilter'\r\n                        }\r\n                    });\r\n\r\n                };\r\n\r\n                $scope.Reset = function() {\r\n                    var sysDefault = _.find($scope.config, { IsSystemDefault: true });\r\n                    sysDefault.isDefault = true;\r\n                    $scope.api.currentViewApplied = sysDefault;\r\n                    var req = {\r\n                        method: 'POST',\r\n                        url: $scope.api.UpdateSavedViewURL,\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        }\r\n                    };\r\n                    _.each($scope.config, function(n) {\r\n                        if (!n.IsSystemDefault) {\r\n                            if (n.isDefault) {\r\n                                req.data = n;\r\n                                $http(req).then(function(response) {}).catch(function (errorCallback) {\r\n                                    console.log(errorCallback.statusText);\r\n                                });\r\n                            }\r\n                            n.isDefault = false;\r\n                        }\r\n                    })\r\n                    if($scope.setTitle != \"SAVED FILTERS\")\r\n                        $scope.api.applyViewOnGrid();\r\n                };\r\n\r\n                $scope.isMarkAsDefault = { 'check': false };\r\n                $scope.SystemAsDefault = { 'check': false };\r\n                $scope.showSavedViewPopup = false;\r\n                $scope.showSaveView = false;\r\n                $scope.focusSearch = false;\r\n                $scope.isActive = false;\r\n                $scope.showMe = false;\r\n\r\n                $scope.showSearch = function() {\r\n                    $scope.isActive = true;\r\n                    $scope.focusSearch = true;\r\n                    $scope.showMe = true;\r\n                    $scope.hideClose = true;\r\n                }\r\n\r\n                $scope.hideSearch = function() {\r\n                    $scope.isActive = false;\r\n                    $scope.focusSearch = false;\r\n                    $scope.hideClose = false;\r\n                }\r\n\r\n                var msg = {\r\n                    type: \"inform\",\r\n                    buttons: [{\r\n                        \"title\": $translate.instant('notificationButtonOk'),\r\n                        \"result\": \"true\"\r\n                    }]\r\n                }\r\n\r\n                $scope.deleteItem = function(index, currentItem, currOperation) {\r\n                    if (currentItem.IsSystemDefault && $scope.setTitle != \"SAVED FILTERS\") {\r\n                        msg.message = $translate.instant('deleteSystemDefaultMsg');\r\n                        notification.notify(msg, function(result) {});\r\n                    } else if (currentItem.isDefault == true && $scope.setTitle != \"SAVED FILTERS\") {\r\n                        msg.message = \"You can not delete a saved view when it is marked as default.\";\r\n                        notification.notify(msg, function(result) {});\r\n                    } else {\r\n                        var config = {\r\n                            type: \"warning\",\r\n                            message: $translate.instant('deleteMessage'),\r\n                            buttons: [{\r\n                                \"title\": $translate.instant('notificationButtonYes'),\r\n                                \"result\": \"true\"\r\n                            }, {\r\n                                \"title\": $translate.instant('notificationButtonNo'),\r\n                                \"result\": \"false\"\r\n                            }]\r\n                        };\r\n                        var alterView = cacheHelperService.getDefaultSavedView($scope.config, false) || cacheHelperService.getDefaultSavedView($scope.config, true);\r\n                        notification.notify(config, function(result) {\r\n                            if (result.result == \"true\") {\r\n                                var deletedView;\r\n                                for (var i = 0; i < $scope.config.length; i++) {\r\n                                    if ($scope.config[i].index === currentItem.index) {\r\n                                        deletedView = $scope.config.splice(i, 1);\r\n                                    }\r\n                                }\r\n\r\n                                handleDoneButtonVisibility();\r\n                                handleMarkAsDefault();\r\n                                $scope.callbackFunc({\r\n                                    e: {\r\n                                        'index': currentItem.index,\r\n                                        'currentItem': currentItem,\r\n                                        'currOperation': currOperation\r\n                                    }\r\n                                });\r\n                                var req = {\r\n                                    method: 'DELETE',\r\n                                    url: $scope.api.deleteSavedViewURL,\r\n                                    data: { \"data\": { \"savedViewId\": deletedView[0].ViewId } },\r\n                                    headers: {\r\n                                        \"Content-Type\": \"application/json\"\r\n                                    }\r\n                                };\r\n                                $http(req).then(function(response) {\r\n                                    if (response.data != null) {\r\n                                        if(alterView){\r\n                                            $scope.api.currentViewApplied = alterView;\r\n                                            $scope.selectedFilter.name = alterView.name;\r\n                                            $scope.api.applyViewOnGrid();\r\n                                            console.log(\"Saved View Deleted\");\r\n                                        }\r\n                                    }\r\n                                }).catch(function(errorCallback) {\r\n                                    console.log(errorCallback.statusText);\r\n                                });\r\n                            }\r\n\r\n                        });\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.showEditor = false;\r\n\r\n                $scope.editCurrentViewName = function (index, currentItem) {\r\n                    var _this = $scope;\r\n                    angular.forEach(_this.config, function (key, value) {\r\n                        if (_this.config[value].showCurrentItemEditor == true) {\r\n                            _this.config[value].showCurrentItemEditor = false;\r\n                        }\r\n                    });\r\n                    if (!currentItem.IsSystemDefault) {\r\n                        //$scope.config[index].showCurrentItemEditor = true;\r\n                        //$scope.getEditedviewName.name = $scope.config[index].name;\r\n\r\n                        for (var i = 0; i < _this.config.length; i++) {\r\n                            if (_this.config[i].index === currentItem.index) {\r\n                                _this.config[i].showCurrentItemEditor = true;\r\n                            }\r\n                        }\r\n                        _this.getEditedviewName.name = currentItem.name;\r\n                    } else {\r\n                        msg.message = $translate.instant('renameSystemDefaultMsg');\r\n                        notification.notify(msg, function(result) {});\r\n                    }\r\n                    $timeout(function() {\r\n                        _this.getEditedviewName.isFocus = true;\r\n                    }, 900);\r\n                }\r\n\r\n                $scope.getEditedviewName = { \"name\": \"\", isFocus: false };\r\n\r\n                $scope.updateViewName = function (index, currentItem, currOperation) {\r\n                    $scope.closeEditPanel(index, currentItem);\r\n                    $scope.callbackFunc({\r\n                        e: {\r\n                            'index': currentItem.index,\r\n                            'currentItem': currentItem,\r\n                            'currOperation': currOperation,\r\n                            'editedName': $scope.getEditedviewName.name\r\n                        }\r\n                    });\r\n                    if ($scope.getEditedviewName.name.length == 0) {\r\n                        keepPopupOpen();\r\n                        return false;\r\n                    }\r\n                    var duplicateItem = $scope.config.filter(function(view) {\r\n                        return (view.name === $scope.getEditedviewName.name && view.ViewId !== $scope.config[index].ViewId)\r\n                    });\r\n                    if (duplicateItem.length != 0) {\r\n                        showAlertMessage($scope.api.duplicateErrorMessage);\r\n                    } else if (greaterThanMaxCharacterLength($scope.getEditedviewName.name)) {\r\n                        showAlertMessage($scope.api.maxCharacterLength);\r\n                    } else {\r\n                        $scope.config[currentItem.index].name = $scope.getEditedviewName.name;\r\n                        $scope.config[currentItem.index].showCurrentItemEditor = false;\r\n                        var obj = {\r\n                            'ViewName': $scope.config[currentItem.index].name || $scope.config[currentItem.index].ViewName,\r\n                            'IsDefaultView': $scope.config[currentItem.index].isDefault,\r\n                            'IsSystemDefault': $scope.config[currentItem.index].IsSystemDefault,\r\n                            'SortColumn': $scope.config[currentItem.index].SortColumn,\r\n                            'SortOrder': $scope.config[currentItem.index].SortOrder,\r\n                            'ViewId': $scope.config[currentItem.index].ViewId,\r\n                            'GroupColumn': $scope.config[currentItem.index].GroupColumn,\r\n                            'Filters': $scope.config[currentItem.index].Filters,\r\n                            'DocumentTypeCode': $scope.config[currentItem.index].DocumentTypeCode,\r\n                            'ContactCode': $scope.config[currentItem.index].ContactCode,\r\n                            'ColumnList': $scope.config[currentItem.index].ColumnList\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.UpdateSavedViewURL,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n                        $http(req).then(function(response) {\r\n                            if (response.data != null) {\r\n                                console.log($scope.api.updateMessage);\r\n                            }\r\n                        }).catch(function(errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.closeEditPanel = function (index, currentItem) {\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].index === currentItem.index) {\r\n                            $scope.config[i].showCurrentItemEditor = false;\r\n                        }\r\n                    }\r\n                    currentItem.validate = false;\r\n                };\r\n\r\n                $scope.viewObject = {};\r\n                $scope.viewObject.SaveViewName = \"\";\r\n\r\n                $scope.saveCurrentView = function(passData) {\r\n                    if (passData != '') {\r\n                        if (isNameDuplicate(passData)) {\r\n                            showAlertMessage($scope.api.duplicateErrorMessage);\r\n                        } else if (greaterThanMaxCharacterLength(passData)) {\r\n                            showAlertMessage($scope.api.maxCharacterLength);\r\n                        } else {\r\n                            $scope.isApplyFilters = false;\r\n\r\n                            $scope.model = { 'name': passData, 'isDefault': false, 'showCurrentItemEditor': false };\r\n\r\n                            var req = {\r\n                                method: 'POST',\r\n                                url: $scope.api.insertSavedViewURL,\r\n                                data: {\r\n                                    \"ViewId\": 0,\r\n                                    \"ViewName\": passData,\r\n                                    \"ContactCode\": $scope.api.contactCode,\r\n                                    \"ColumnList\": cacheHelperService.getColDef() || \"\",\r\n                                    \"Filters\": cacheHelperService.getFilterDef() || \"\",\r\n                                    \"SortColumn\": \"NeedByDate\",\r\n                                    \"SortOrder\": \"Ascending\",\r\n                                    \"GroupColumn\": cacheHelperService.getGroupDef() || \"\",\r\n                                    \"IsDefaultView\": false,\r\n                                    \"IsSystemDefault\": false,\r\n                                    \"DocumentTypeCode\": $scope.api.documentTypeCode\r\n                                },\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                }\r\n                            };\r\n                            $http(req).then(function(response) {\r\n                                if (response.data != null) {\r\n                                    $scope.isSavedView = true;\r\n                                    $scope.config.push({\r\n                                        \"ViewId\": response.data,\r\n                                        \"ViewName\": passData,\r\n                                        \"ContactCode\": $scope.api.contactCode,\r\n                                        \"ColumnList\": cacheHelperService.getColDef() || \"\",\r\n                                        \"Filters\": cacheHelperService.getFilterDef() || \"\",\r\n                                        \"SortColumn\": \"NeedByDate\",\r\n                                        \"SortOrder\": \"Ascending\",\r\n                                        \"GroupColumn\": cacheHelperService.getGroupDef() || \"\",\r\n                                        \"IsDefaultView\": false,\r\n                                        \"IsSystemDefault\": false,\r\n                                        \"DocumentTypeCode\": $scope.api.documentTypeCode,\r\n                                        \"showCurrentItemEditor\": false,\r\n                                        \"name\": passData,\r\n                                        \"isDefault\": false\r\n                                    });\r\n                                    $scope.api.currentViewApplied = _.find($scope.config, { name: $scope.selectedFilter.name });\r\n                                    console.log(\"Saved View Created\");\r\n                                }\r\n                            }).catch(function(errorCallback) {\r\n                                console.log(errorCallback.statusText);\r\n                            });\r\n                            $scope.isSavedFilter = true;\r\n                            $scope.viewObject.SaveViewName = '';\r\n\r\n\r\n                        }\r\n                    } else {\r\n                        keepPopupOpen();\r\n                    }\r\n                }\r\n\r\n                function keepPopupOpen(e) {\r\n                    if (!e) {\r\n                        var e = window.event;\r\n                    }\r\n                    e.cancelBubble = true;\r\n                    if (e.stopPropagation) {\r\n                        e.stopPropagation();\r\n                    }\r\n                }\r\n\r\n                function isNameDuplicate(editedSavedName) {\r\n                    var duplicateName = \"\";\r\n                    duplicateName = _.find($scope.config, { name: editedSavedName });\r\n                    if (typeof duplicateName === 'undefined') {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                function greaterThanMaxCharacterLength(editedSavedName) {\r\n                    if (editedSavedName.length > $scope.api.viewNameLength) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                function showAlertMessage(alertMessage) {\r\n                    notification.notify(alertMessage, function(result) { });\r\n                }\r\n                $scope.$watch('show', function(n, o) {\r\n                    angular.forEach($scope.config, function(key, value) {\r\n                        if ($scope.config[value].showCurrentItemEditor == true) {\r\n                            $scope.config[value].showCurrentItemEditor = false;\r\n                        }\r\n                    }); //clearing if anything in edit state\r\n                    if ($scope.openPopupSavedView == true && n == true) {\r\n                        $scope.showPopUp = true;\r\n                        $scope.showSavedViewPopup = true;\r\n                        $scope.showSaveView = false;\r\n                        $scope.hideSearch();\r\n                    } else if ($scope.openPopupSavedView != true && n == true) {\r\n                        $scope.showSavedViewPopup = false;\r\n                        $scope.showSaveView = true;\r\n                    } else {\r\n                        $scope.showSavedViewPopup = false;\r\n                        $scope.showSaveView = false;\r\n                        $scope.show = false;\r\n                        $scope.showPopUp = false;\r\n                    }\r\n                    $timeout(function () {\r\n                        angular.element('.searchWithHiddenTextField input').blur();\r\n                        angular.element('.savedFiltersPopUpLists').find(angular.element('input[checked=\"checked\"]')).prop('checked', true);\r\n                    }, 1000);\r\n                    $scope.radioChangeCallback();\r\n                });\r\n\r\n\r\n                $scope.loaderFlag = {\r\n                    plain: true,\r\n                    message: $translate.instant('loadingMsg'),\r\n                    center: true\r\n                };\r\n\r\n                $scope.$watch('setTitle', function (value) {\r\n                    if (value == 'SAVED FILTERS') {\r\n                        $scope.title = $translate.instant('savedFilters');\r\n                    }\r\n                    if (value == 'SAVED VIEWS') {\r\n                        $scope.title = $translate.instant('savedViews');\r\n                    }\r\n                    \r\n                });\r\n\r\n                function SaveResetOrMarkAsDefault(currentViewApplied) {\r\n                    if ($scope.setTitle == \"SAVED FILTERS\") {\r\n                        console.log(currentViewApplied);\r\n\r\n                        var obj =\r\n                        {\r\n                            \"rowKey\": currentViewApplied.rowKey,\r\n                            \"moduleName\": currentViewApplied.module,\r\n                            \"removeDefaultFilter\": currentViewApplied.isDefault ? false : true\r\n\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.MarkasDefault,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n\r\n                        $http(req).then(function (response) {\r\n                            if (response.data != null) {\r\n\r\n                                /*if (currentViewApplied.isDefault) {\r\n                                    for (var i = 0; i < $scope.config.length; i++) {\r\n                                        if ($scope.config[i].rowKey != currentViewApplied.rowKey && $scope.config[i].isDefault) {\r\n                                            $scope.config[i].isDefault = false; \r\n                                        }\r\n                                    }\r\n                                }*/\r\n\r\n                                var view = _.find($scope.config, { \"name\": $scope.selectedFilter.name || $scope.api.currentViewApplied.name });\r\n                                if (view) {\r\n                                    if (view.isDefault) {\r\n                                        $scope.isMarkAsDefault.check = true;\r\n                                    } else {\r\n                                        $scope.isMarkAsDefault.check = false;\r\n                                    }\r\n                                }\r\n\r\n                                for (var i = 0; i < $scope.config.length; i++) {\r\n                                    $scope.config[i].isDefault = false;\r\n                                }\r\n\r\n                                view.isDefault = true;\r\n                            }\r\n                        }).catch(function (errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n\r\n                    } else {\r\n                        var obj = {\r\n                            \"ViewId\": currentViewApplied.ViewId,\r\n                            \"ViewName\": currentViewApplied.name,\r\n                            \"ContactCode\": currentViewApplied.ContactCode,\r\n                            \"ColumnList\": currentViewApplied.ColumnList,\r\n                            \"Filters\": currentViewApplied.Filters,\r\n                            \"SortColumn\": \"NeedByDate\",\r\n                            \"SortOrder\": \"Ascending\",\r\n                            \"GroupColumn\": currentViewApplied.GroupColumn,\r\n                            \"IsDefaultView\": currentViewApplied.isDefault,\r\n                            \"IsSystemDefault\": currentViewApplied.IsSystemDefault,\r\n                            \"DocumentTypeCode\": currentViewApplied.DocumentTypeCode\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.UpdateSavedViewURL,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n                        $http(req).then(function(response) {\r\n                            if (response.data != null) {\r\n                                console.log($scope.api.updateMessage);\r\n                                if (currentViewApplied.isDefault) {\r\n                                    for (var i = 0; i < $scope.config.length; i++) {\r\n                                        if ($scope.config[i].ViewId != currentViewApplied.ViewId && $scope.config[i].isDefault) {\r\n                                            $scope.config[i].isDefault = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }).catch(function(errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n                    }\r\n                }\r\n                $scope.search_data = $scope.config;\r\n                var b = [];\r\n                $scope.search_savedpopup = function(e) {\r\n                    $scope.config = [];\r\n\r\n                    if (e.data[0].value != null && e.data[0].value != \"\") {\r\n\r\n                        b = [];\r\n                        for (var i = 0; i < $scope.search_data.length; i++) {\r\n                            var lowerStr = ($scope.search_data[i].name + \"\").toLowerCase();\r\n                            var s = lowerStr.indexOf(e.data[0].value.toLowerCase()) === 0;\r\n                            if (s) {\r\n                                if (b.indexOf($scope.search_data[i].name) == -1) {\r\n                                    b.push({ 'name': $scope.search_data[i].name, 'isDefault': $scope.search_data[i].isDefault, 'showCurrentItemEditor': $scope.search_data[i].showCurrentItemEditor });\r\n                                }\r\n                            }\r\n                        }\r\n                        $scope.config = b;\r\n                    } else {\r\n                        b = [];\r\n                        $scope.config = $scope.search_data;\r\n                    }\r\n                }\r\n\r\n                $scope.onHide = function() {\r\n                    $scope.viewObject.SaveViewName = '';\r\n                    $scope.hide();\r\n                };\r\n\r\n            }],\r\n            templateUrl: 'shared/directives/smartSavedViewPopup/smartSavedViewPopupTemplate.html'\r\n        };\r\n    }\r\n})();\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartSearch', ['httpService', '$timeout', 'APPCONSTANTS', '$translate', function (httpService, $timeout, APPCONSTANTS, $translate) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            transclude: true,\n            scope: {\r\n                type: '@'\r\n            },\n            link: function (scope, element, attrs) {\r\n                var scopeValues = { \"RFX\": { \"value\": \"0\", \"string\": \"RFX\", \"SubAppCodes\": 103 }, \"RFP\": { \"value\": \"1\", \"string\": \"RFP\", \"SubAppCodes\": 103 }, \"RFQ\": { \"value\": \"2\", \"string\": \"RFQ\", \"SubAppCodes\": 103 }, \"RFI\": { \"value\": \"3\", \"string\": \"RFI\", \"SubAppCodes\": 103 }, \"Auction\": { \"value\": \"4\", \"string\": \"Auction\", \"SubAppCodes\": 103 }, \"Contract\": { \"value\": \"5\", \"string\": \"Contract\", \"SubAppCodes\": 104 }, \"Catalog\": { \"value\": \"6\", \"string\": \"Catalog\", \"SubAppCodes\": 108 }, \"Requisition\": { \"value\": \"7\", \"string\": \"Requisition\", \"SubAppCodes\": 107 }, \"PO\": { \"value\": \"8\", \"string\": \"PO\", \"SubAppCodes\": 107 }, \"Order\": { \"value\": \"8\", \"string\": \"Order\", \"SubAppCodes\": 107 }, \"Invoice\": { \"value\": \"9\", \"string\": \"Invoice\", \"SubAppCodes\": 107 }, \"Receipts\": { \"value\": \"10\", \"string\": \"Receipt\", \"SubAppCodes\": 107 }, \"Forms\": { \"value\": \"11\", \"string\": \"Forms\", \"SubAppCodes\": 105 }, \"Scorecards\": { \"value\": \"12\", \"string\": \"Scorecards\", \"SubAppCodes\": 105 }, \"Workbench\": { \"value\": \"13\", \"string\": \"Workbench\", \"SubAppCodes\": 110 }, \"InvoiceReconciliation\": { \"value\": \"14\", \"string\": \"InvoiceReconciliation\", \"SubAppCodes\": 107 }, \"Items\": { \"value\": \"20\", \"string\": \"Items\" }, \"Templates\": { \"value\": \"15\", \"string\": \"Templates\", \"SubAppCodes\": 111 }, \"Partners\": { \"value\": \"19\", \"string\": \"Partners\", \"SubAppCodes\": 105 }, \"ContractRequest\": { \"value\": \"16\", \"string\": \"ContractRequest\" }, \"RFxRequest\": { \"value\": \"17\", \"string\": \"RFxRequest\" }, \"AuctionRequest\": { \"value\": \"18\", \"string\": \"AuctionRequest\" }, \"PaymentRequest\": { \"value\": \"27\", \"string\": \"PaymentRequest\" }, \"Project\": { \"value\": \"21\", \"string\": \"Project\", \"SubAppCodes\": 113 }, \"CreditMemo\": { \"value\": \"22\", \"string\": \"CreditMemo\", \"SubAppCodes\": 107 }, \"ReturnNote\": { \"value\": \"20\", \"string\": \"ReturnNote\", \"SubAppCodes\": 107 }, \"ActionPlan\": { \"value\": \"23\", \"string\": \"ActionPlan\", \"SubAppCodes\": 105 }, \"Blanket\": { \"value\": \"30\", \"string\": \"Blanket\", \"SubAppCodes\": 104 }, \"CategoryWorkbench\": { \"value\": \"28\", \"string\": \"CategoryWorkbench\", \"SubAppCodes\": 116 }, \"ProjectDashboard\": { \"value\": \"101\", \"string\": \"ProjectDashboard\", \"SubAppCodes\": 113 } };\r\n\r\n                /*\r\n                 *  Get current module scope\r\n                 */\r\n                var getCurrentModuleScope = function () {\r\n                    var selectedModules = scope.selectedModule.FilterKey.split(',');\r\n                    var moduleScopeString = \"\";\r\n\r\n                    for (var i = 0; i < selectedModules.length; i++) {\r\n                        switch (selectedModules[i]) {\r\n                            case (scopeValues.RFI.value):\r\n                                moduleScopeString += scopeValues.RFI.string + \",\";\r\n                                break;\r\n                            case (scopeValues.RFP.value):\r\n                                moduleScopeString += scopeValues.RFP.string + \",\";\r\n                                break;\r\n                            case (scopeValues.RFQ.value):\r\n                                moduleScopeString += scopeValues.RFQ.string + \",\";\r\n                                break;\r\n                            case (scopeValues.Auction.value):\r\n                                moduleScopeString += scopeValues.Auction.string + \",\";\r\n                                break;\r\n                            case scopeValues.Workbench.value:\r\n                                moduleScopeString += scopeValues.Workbench.string + \",\";\r\n                                break;\r\n                            case scopeValues.Contract.value:\r\n                                moduleScopeString += scopeValues.Contract.string + \",\";\r\n                                break;\r\n                            case scopeValues.Scorecards.value:\r\n                                moduleScopeString += scopeValues.Scorecards.string + \",\";\r\n                                break;\r\n                            case scopeValues.Forms.value:\r\n                                moduleScopeString += scopeValues.Forms.string + \",\";\r\n                                break;\r\n                            case scopeValues.Requisition.value:\r\n                                moduleScopeString += scopeValues.Requisition.string + \",\";\r\n                                break;\r\n                            case scopeValues.Order.value:\r\n                                moduleScopeString += scopeValues.Order.string + \",\";\r\n                                break;\r\n                            case scopeValues.Invoice.value:\r\n                                moduleScopeString += scopeValues.Invoice.string + \",\";\r\n                                break;\r\n                            case scopeValues.InvoiceReconciliation.value:\r\n                                moduleScopeString += scopeValues.InvoiceReconciliation.string + \",\";\r\n                                break;\r\n                            case scopeValues.Receipts.value:\r\n                                moduleScopeString += scopeValues.Receipts.string + \",\";\r\n                                break;\r\n                            case scopeValues.AuctionRequest.value:\r\n                                moduleScopeString += scopeValues.AuctionRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.RFxRequest.value:\r\n                                moduleScopeString += scopeValues.RFxRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.ContractRequest.value:\r\n                                moduleScopeString += scopeValues.ContractRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.PaymentRequest.value:\r\n                                moduleScopeString += scopeValues.PaymentRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.Partners.value:\r\n                                moduleScopeString += scopeValues.Partners.string + \",\";\r\n                                break;\r\n                            case scopeValues.Templates.value:\r\n                                moduleScopeString += scopeValues.Templates.string + \",\";\r\n                                break;\r\n                            case scopeValues.Catalog.value:\r\n                                moduleScopeString += scopeValues.Catalog.string + \",\";\r\n                                break;\r\n                                //PPST\r\n                            case scopeValues.Project.value:\r\n                                moduleScopeString += scopeValues.Project.string + \",\";\r\n                                break;\r\n                            case scopeValues.CreditMemo.value:\r\n                                moduleScopeString += scopeValues.CreditMemo.string + \",\";\r\n                                break;\r\n                            case scopeValues.ReturnNote.value:\r\n                                moduleScopeString += scopeValues.ReturnNote.string + \",\";\r\n                                break;\r\n                            case scopeValues.ActionPlan.value:\r\n                                moduleScopeString += scopeValues.ActionPlan.string + \",\";\r\n                                break;\r\n                            case scopeValues.Blanket.value:\r\n                                moduleScopeString += scopeValues.Blanket.string + \",\";\r\n                                break;\r\n                            case scopeValues.CategoryWorkbench.value:\r\n                                moduleScopeString += scopeValues.CategoryWorkbench.string + \",\";\r\n                                break;\r\n                            case scopeValues.ProjectDashboard.value:\r\n                                moduleScopeString += scopeValues.ProjectDashboard.string + \",\";\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    //if ModuleScope is 'RFI,RFQ & RFP' than it should be RFx\r\n                    if ((moduleScopeString.indexOf(scopeValues.RFI.string) !== -1) ||\r\n                        (moduleScopeString.indexOf(scopeValues.RFP.string) !== -1) ||\r\n                        (moduleScopeString.indexOf(scopeValues.RFQ.string) !== -1)) {\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFI.string + \",\", '');\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFP.string + \",\", '');\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFQ.string + \",\", '');\r\n                        moduleScopeString += scopeValues.RFX.string;\r\n                    }\r\n\r\n                    // Remove last comma from modulescopestring\r\n                    var lastChar = moduleScopeString.slice(-1);\r\n                    if (lastChar == ',') {\r\n                        moduleScopeString = moduleScopeString.slice(0, -1);\r\n                    }\r\n\r\n                    return moduleScopeString;\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Get search navigation url\r\n                 */\r\n                scope.getSearchNavigateURL = function (moduleScope, fieldKey) {\r\n                    var redirectURL = generateUrl(moduleScope);\r\n                    if (fieldKey) {\r\n                        redirectURL += \"&fieldkey=\" + fieldKey;\r\n                    }\r\n                    return redirectURL;\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Get scope from module type\r\n                 */\r\n                var getScopeFromModuleType = function (moduleType) {\r\n                    var scope = '';\r\n                    var array = $.makeArray(\"16,17,18,27\".split(','), moduleType.split(',')[0]);\r\n\r\n                    if (moduleType == \"1,2,3\") {\r\n                        scope = scopeValues.RFX.string.toLowerCase();\r\n                    }\r\n                    else if (array == \"16\" || array == \"17\" || array == \"18\" || array == \"27\") {\r\n                        scope = \"request\";\r\n                    }\r\n                    else {\r\n                        for (var key in scopeValues) {\r\n                            if (scopeValues[key].value == moduleType) {\r\n                                scope = scopeValues[key].string.toLowerCase();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    return scope;\r\n                };\r\n\r\n                var getModuleTypeFromScope = function (moduleScope) {\r\n                    var type = '';\r\n                    for (var key in scopeValues) {\r\n                        if (scopeValues[key].string.toLowerCase() == moduleScope) {\r\n                            type = scopeValues[key].value;\r\n                            break;\r\n                        }\r\n                    }\r\n                    return type;\r\n                };\r\n\r\n                var IsAdvanceSearchEnabled = function (moduleScope) {\r\n                    var productsArray = getAdvanceSearchEnabledProducts();\r\n                    var type = getModuleTypeFromScope(moduleScope);\r\n                    if (productsArray.length > 0) {\r\n                        if (productsArray.indexOf(type) != -1)\r\n                            return true;\r\n                        else\r\n                            return false;\r\n                    }\r\n                };\r\n\r\n                var getAdvanceSearchEnabledProducts = function () {\r\n                    var productsArray = scope.advancedSearchDocTypes != null ? scope.advancedSearchDocTypes.split(\",\") : [];\r\n                    return productsArray;\r\n                };\r\n\r\n                /*\r\n                 *  Create redirection url\r\n                 */\r\n                var generateUrl = function (moduleScope) {\r\n                    var searchText = scope.searchText.trim();\r\n                    var url = '';\r\n                    if (IsAdvanceSearchEnabled(moduleScope)) {\r\n                        url = searchConstants.portalURL + 'Portal/Dashboard/Documents?scope=' + moduleScope + '&q=' + searchText + '&oloc=' + searchConstants.documentTypeCodes;\r\n                    }\r\n                    else {\r\n                        url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&oloc=' + searchConstants.documentTypeCodes;\r\n                    }\r\n\r\n                    switch (moduleScope.toLowerCase()) {\r\n                        case scopeValues.Catalog.string.toLowerCase():\r\n                            url = searchConstants.portalURL + '/Catalog/Manage/Navigation?bpc=' + searchConstants.encryptedBPC + '&navTo=1&q=' + searchText + '&scope=' + moduleScope + '&' + searchConstants.catalogQueryString + '&oloc=' + scopeValues.Catalog.SubAppCodes;\r\n                            break;\r\n                        case scopeValues.Order.string.toLowerCase():\r\n                            url += '&' + searchConstants.orderQueryString;\r\n                            break;\r\n                        case scopeValues.Invoice.string.toLowerCase():\r\n                            url += '&' + searchConstants.invoiceQueryString;\r\n                            break;\r\n                        case scopeValues.Receipts.string.toLowerCase():\r\n                            url += '&' + searchConstants.receiptQueryString;\r\n                            break;\r\n                        case scopeValues.Requisition.string.toLowerCase():\r\n                            url += '&' + searchConstants.requisitionQueryString;\r\n                            break;\r\n                        case scopeValues.InvoiceReconciliation.string.toLowerCase():\r\n                            url += '&' + searchConstants.invoiceReconcillationQueryString;\r\n                            break;\r\n                        case scopeValues.CreditMemo.string.toLowerCase():\r\n                            url += '&' + searchConstants.creditMemoQuerystring;\r\n                            break;\r\n                        case scopeValues.Blanket.string.toLowerCase():\r\n                            url += '&' + searchConstants.blanketQueryString;\r\n                            break;\r\n                        case scopeValues.CategoryWorkbench.string.toLowerCase():\r\n                            url += '&' + searchConstants.categoryWorkbenchQueryString;\r\n                            break;\r\n                        case scopeValues.Partners.string.toLowerCase():\r\n                            url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&' + searchConstants.partnersQueryString + '&oloc=' + searchConstants.documentTypeCodes;\r\n                            break;\r\n                        case scopeValues.Forms.string.toLowerCase():\r\n                            url += '&' + searchConstants.formQueryString;\r\n                            break;\r\n                        case scopeValues.Scorecards.string.toLowerCase():\r\n                            url += '&' + searchConstants.assessmentQueryString;\r\n                            break;\r\n                        case scopeValues.Workbench.string.toLowerCase():\r\n                            url += '&' + searchConstants.workBenchQueryString;\r\n                            break;\r\n                        case scopeValues.RFX.string.toLowerCase():\r\n                        case scopeValues.RFP.string.toLowerCase():\r\n                        case scopeValues.RFQ.string.toLowerCase():\r\n                        case scopeValues.RFI.string.toLowerCase():\r\n                            url += '&' + searchConstants.rfxQueryString;\r\n                            break;\r\n                        case scopeValues.Auction.string.toLowerCase():\r\n                            url += '&' + searchConstants.auctionQueryString;\r\n                            break;\r\n                        case scopeValues.ActionPlan.string.toLowerCase():\r\n                            url += '&' + searchConstants.actionPlanQueryString;\r\n                            break;\r\n                        case scopeValues.Contract.string.toLowerCase():\r\n                            url += '&' + searchConstants.contractQueryString;\r\n                            break;\r\n                        case scopeValues.Templates.string.toLowerCase():\r\n                            url += '&' + searchConstants.catalogQueryString;\r\n                            break;\r\n                        case \"request\":\r\n                            moduleScope = scopeValues.RFxRequest.string.toLowerCase() + \",\" + scopeValues.AuctionRequest.string.toLowerCase() + \",\" + scopeValues.ContractRequest.string.toLowerCase() + \",\" + scopeValues.PaymentRequest.string.toLowerCase();\r\n                            url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&oloc=' + searchConstants.documentTypeCodes;\r\n                            break;\r\n                        case \"returnnote\":\r\n                            url += '&' + searchConstants.returnNoteQuerystring;\r\n                            break;\r\n                        case scopeValues.Project.string.toLowerCase():\r\n                            url = searchConstants.portalURL + 'PPST/Project/ProjectHome?oloc=113&q=' + searchText + '&' + searchConstants.projectQueryString;\r\n                            break;\r\n                        default:\r\n                            if ((moduleScope.toLowerCase().indexOf(scopeValues.AuctionRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.RFxRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.ContractRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.PaymentRequest.string.toLowerCase()) !== -1)) {\r\n                                url += '&' + searchConstants.auctionQueryString;\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    if (APPCONSTANTS.userPreferences.UserBasicDetails.IsSupplier) {\r\n                        url = url + \"&dd=\" + searchConstants.encryptedBPC;\r\n                    }\r\n\r\n                    return url;\r\n                };\r\n\r\n\r\n                scope.searchText = '';\n\n                var request, searchConstants, lastSearchedText;\n\n                /*\n                 *  Get search constants from .net controller\n                 */\n                if (APPCONSTANTS && APPCONSTANTS.userPreferences && APPCONSTANTS.userPreferences.constantURLAndQueryStringValue)\n                    searchConstants = APPCONSTANTS.userPreferences.constantURLAndQueryStringValue;\n                else {\r\n                    request = {\r\n                        method: 'GET',\r\n                        url: '/' + APPCONSTANTS.userPreferences.AreaName + '/GetConstantURLAndQueryStringValues?oloc=216'\r\n                    };\r\n\r\n                    httpService.directhttp(request).then(function (result) {\r\n                        searchConstants = result;\r\n                    }, function (errorData) {\r\n                        searchConstants = {};\r\n                    });\r\n                }\n\n                request = {\r\n                    method: 'GET',\r\n                    url: '/' + APPCONSTANTS.userPreferences.AreaName + '/GetAllowedModulesList?oloc=216&BuyerPartnerCode=' + APPCONSTANTS.userPreferences.UserBasicDetails.BuyerPartnerCode\r\n                };\n\n                function setAllowedModuleListData(result) {\r\n                    var modules = result.Output;\n                    var orderIndex = -1;\n                    for (var i = 0; i < modules.length; i++) {\r\n                        if (modules[i].FilterKey == 8) {\r\n                            orderIndex = i;\r\n                            break;\r\n                        }\r\n                    }\n                    if (orderIndex > -1) {\r\n                        var quickSearchItem = modules.splice(orderIndex, 1);\r\n                        modules.splice(1, 0, quickSearchItem[0]);\r\n                    }\n                    scope.modules = angular.copy(modules);\n                    scope.selectedModule = scope.modules[0];\r\n                    scope.advancedSearchDocTypes = result.AdvancedSearchDocTypes;\r\n                };\n\n                if (APPCONSTANTS.userPreferences.allowedModulesList){\n                    setAllowedModuleListData(APPCONSTANTS.userPreferences.allowedModulesList);\n                }else{\n                    httpService.directhttp(request).then(function (result) {\r\n                        setAllowedModuleListData(result);\r\n                    }, function (errorData) { });\r\n                }\n                \n                /*\n                 *  On module item click handler\n                 */\n                scope.onModuleClick = function (module) {\r\n                    scope.selectedModule = module;\r\n                    scope.showFilterList = false;\r\n                    scope.recentSearches = null;\r\n                    scope.searchResult = null;\r\n                };\n\n\n                /*\n                 *  Get recent searches\n                 */\n                var getRecentSearches = function () {\r\n                    if (scope.recentSearches) {\r\n                        scope.recentSearches = scope.recentSearches.splice(0, 5);\r\n                        scope.showRecentSearches = true;\r\n                        return;\r\n                    }\r\n\r\n                    scope.recentSearches = null;\r\n\r\n                    scope.isRecentSearchesLoading = true;\r\n\r\n                    request = {\r\n                        method: 'GET',\r\n                        url: '/Controls/HeaderBar/GetRecentSearches?oloc=101&moduleType=' + (scope.selectedModule.IsAllMenu ? 0 : scope.selectedModule.FilterKey.split(',')[0]) + '&fieldKey=' + (scope.selectedModule.FieldKey != undefined ? scope.selectedModule.FieldKey : 0)\r\n                    };\r\n\r\n                    httpService.directhttp(request).then(function (result) {\r\n                        scope.showRecentSearches = true;\r\n                        scope.isRecentSearchesLoading = false;\r\n                        try {\r\n                            scope.recentSearches = JSON.parse(result.RecentSearches).splice(0, 5);\r\n                        }\r\n                        catch (e) {\r\n                            scope.recentSearches = [];\r\n                        }\r\n                    }, function (errorData) {\r\n                        scope.isRecentSearchesLoading = false;\r\n                    });\r\n                };\n\n\n                /*\n                 *  Get search results\n                 */\n                scope.onSearchTextChange = function (event) {\r\n                    if (event.keyCode === 13 && scope.searchText.trim().length > 2) {\r\n                        if (!scope.selectedModule.IsAllMenu) {\r\n                            window.location.href = scope.getSearchNavigateURL(getScopeFromModuleType(scope.selectedModule.FilterKey), scope.selectedModule.FieldKey);\r\n                            return;\r\n                        }\r\n\r\n                        scope.showRecentSearches = false;\r\n                        scope.showFilterList = false;\r\n                        scope.showSearchResult = true;\r\n                        scope.isSearchResultLoading = true;\r\n\r\n                        //  If user has recently searched for the text entered, do not hit the service\r\n                        if (lastSearchedText === scope.searchText.trim() && scope.searchResult) {\r\n                            scope.isSearchResultLoading = false;\r\n                            return;\r\n                        }\r\n\r\n                        if (!scope.recentSearches) {\r\n                            getSearchResults();\r\n                            return;\r\n                        }\r\n\r\n                        var recentSearches = [{ \"Sequence\": 0, \"SearchText\": scope.searchText.trim() }];\r\n\r\n                        //  Remove duplicate entries from recent searches and generate recent search sequence\r\n                        for (var i = 0; i < scope.recentSearches.length; i++) {\r\n                            if (scope.recentSearches[i].SearchText != scope.searchText.trim()) {\r\n                                recentSearches.push({\r\n                                    \"Sequence\": recentSearches.length,\r\n                                    \"SearchText\": scope.recentSearches[i].SearchText\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        scope.recentSearches = angular.copy(recentSearches);\r\n\r\n                        request = {\r\n                            method: 'POST',\r\n                            url: '/Controls/HeaderBar/SaveRecentSearches?oloc=101',\r\n                            data: {\r\n                                \"recentSearches\": JSON.stringify(recentSearches),\r\n                                \"moduleType\": scope.selectedModule.IsAllMenu ? 0 : scope.selectedModule.FilterKey.split(\",\")[0],\r\n                                \"fieldKey\": scope.selectedModule.FieldKey != undefined ? scope.selectedModule.FieldKey : 0\r\n                            }\r\n                        };\r\n\r\n                        httpService.directhttp(request).then(function (result) {\r\n                            getSearchResults();\r\n                        }, function (errorData) {\r\n                            getSearchResults();\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (scope.searchText.trim().length == 0) {\r\n                            scope.showSearchResult = false;\r\n                            getRecentSearches();\r\n                        }\r\n                    }\r\n                };\n\n\n                var getSearchResults = function () {\r\n                    lastSearchedText = angular.copy(scope.searchText.trim());\r\n\r\n                    scope.searchResult = null;\r\n\r\n                    request = {\r\n                        method: 'POST',\n                        url: '/Controls/BaseSearch/GetSearchResultForWeb?oloc=101',\r\n                        data: {\r\n                            \"searchKeyword\": scope.searchText.trim(),\r\n                            \"Filters\": [\"searchScope:All\", \"pageNumber:1\", \"isGlobalSearch:true\", \"module:all\", \"moduleScope:\" + getCurrentModuleScope(), \"noOfRecords:0\"]\r\n                        }\r\n                    };\n\n                    if (scope.selectedModule.FieldKey) {\r\n                        request.data.Filters.push(\"fieldkey:\" + scope.selectedModule.FieldKey);\r\n                    }\n\n                    httpService.directhttp(request).then(function (result) {\r\n                        scope.isSearchResultLoading = false;\r\n                        if (result.DataSearchResult.GroupTotal.TotalCount > 0) {\r\n                            scope.searchResult = result.DataSearchResult.GroupTotal;\r\n                        }\r\n                        else {\r\n                            scope.searchResult = [];\r\n                        }\r\n                    }, function (errorData) {\r\n                        scope.isSearchResultLoading = false;\r\n                    });\r\n                };\n\n\n                /*\n                 *  On search-text focus\n                 */\n                scope.onSearchTextFocus = function (e) {\r\n                    if (scope.searchText.trim().length == 0) {\r\n                        scope.showSearchResult = false;\r\n                        getRecentSearches();\r\n                    }\r\n                };\n\n\n                /*\n                 *  On recent search item click handler\n                 */\n                scope.onRecentSearchItemClick = function (text) {\r\n                    scope.searchText = text;\r\n                    scope.onSearchTextChange({ keyCode: 13 });\r\n                };\n\n\n                /*\n                 *  Get translated label\n                 */\n                scope.getTranslatedLabel = function (label) {\r\n                    return $translate.instant(label);\r\n                };\n\n\n                /*\n                 *  On document click handler\n                 */\n                var onDocumentClick = function () {\r\n                    $timeout(function () {\r\n                        scope.showRecentSearches = false;\n                        scope.showFilterList = false;\r\n                        scope.showSearchResult = false;\r\n                        try {\r\n                            httpService.abort(request);\r\n                        }\r\n                        catch (e) { }\r\n                    });\r\n                };\n\n                $(document).on('click', onDocumentClick);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    $(document).off('click', onDocumentClick);\r\n                })\r\n            },\n            templateUrl: 'shared/directives/smartSearch/smartSearchTemplate.html'\r\n        };\r\n    }]);\r\n})();\n/*\r\n    ::attributes {\r\n        getCheckboxInfo : & (callback for getting selected items and total length of set)\r\n                   data : @ (takes pipe \"|\" sepereted values like eg. \"dataset|selector\")\r\n            checkerFlag : @\r\n            disableFlag : @\r\n    }\r\n*/\r\n\r\n(function (angular) {\r\n    \"use strict\";\r\n    angular\r\n        .module(\"SMART2\")\r\n        .directive(\"smartSelectall\", [\"$parse\", \"$timeout\", smartSelectallFun]);\r\n\r\n    function smartSelectallFun($parse, $timeout) {\r\n        return {\r\n            restrict: \"A\",\r\n            require: \"ngModel\",\r\n            link: function (scope, element, attrs, ngModel) {\r\n                var getCheckboxInfo = attrs.getCheckboxInfo ? $parse(attrs.getCheckboxInfo.replace(/\\(\\)/, '(selected, length)')) : false, // callback for to get checkbox selection status info\r\n                    config = function () {\r\n                        var a = attrs.data.split(\"|\"),\r\n                        scopeDeep = a[0] ? a[0].replace(/\\s+/ig, '') : null,\r\n                        checkboxSelector = a[1] ? a[1].replace(/\\s+/ig, '') : null,\r\n                        checkerFlag = attrs.checkerFlag ? attrs.checkerFlag : \"checked\",\r\n                        disableFlag = attrs.disableFlag ? attrs.disableFlag : \"disable\",\r\n                        //checkerStyle = attrs.checkerFlag.indexOf(\"{\") == 0 ? \"eval\" : \"flag\",\r\n                        disableStyle = disableFlag.indexOf(\"{\") == 0 ? \"eval\" : \"flag\",\r\n                        sc = getScope(scope, scopeDeep);\r\n\r\n                        return {\r\n                            checkerFlag: checkerFlag,\r\n                            //checkerStyle: checkerStyle,\r\n                            disableFlag: disableFlag,\r\n                            disableStyle: disableStyle,\r\n                            scopeDeep: scopeDeep,\r\n                            scopeData: sc, // set of list items\r\n                            selector: checkboxSelector,\r\n                            selected: 0,\r\n                            length: sc.length\r\n                        };\r\n                    }(),\r\n                    mainCheckbox = element.find(\"input[type=checkbox]\");\r\n\r\n                if (scope.__selectallExoprt) {\r\n                    !scope.__selectallExoprt && (scope.__selectallExoprt = {});\r\n                    scope.__selectallExoprt.selectall = function (check) {\r\n                        mainCheckbox.prop('checked', check).change();\r\n                    };\r\n                };\r\n\r\n                mainCheckbox.change(function (e) {\r\n                    var el = $(this),\r\n                        _scope = scope,\r\n                        isChecked = el.prop(\"checked\");\r\n\r\n                    config.scopeData.forEach(function (a) {\r\n                        var isDisabled = function () {\r\n                            var r;\r\n                            if (config.disableStyle == \"flag\") {\r\n                                r = a[config.disableFlag];\r\n                            } else if (config.disableStyle == \"eval\") {\r\n                                r = eval(config.disableFlag.replace(/(\\{|\\})/ig, '').replace(/this/ig, 'a'));\r\n                            }\r\n                            return r;\r\n                        }();\r\n                        if (!isDisabled) {\r\n                            a[config.checkerFlag] = isChecked;\r\n                        }\r\n                    });\r\n                    element.removeClass(\"filled-partial\");\r\n                    config.selected = isChecked ? config.scopeData.length : 0;\r\n                    if (getCheckboxInfo)\r\n                        scope.$apply(function () {\r\n                            getCheckboxInfo(scope, getInfo());\r\n                        });\r\n                });\r\n\r\n\r\n                scope.$watchCollection(config.scopeData, function () {\r\n                    refresh();\r\n                });\r\n\r\n                scope.$watch(config.scopeDeep + \".length\", function () {\r\n                    refresh();\r\n                });\r\n\r\n                initCheckbox(); // applying events to checkbox\r\n\r\n\r\n                function initCheckbox() {\r\n                    $timeout(function () {\r\n                        initCheckboxItem();\r\n                    });\r\n                }\r\n                function initCheckboxItem() {\r\n                    var allCheckbox = $(config.selector).find(\"input[type=checkbox]\");\r\n                    if (allCheckbox && allCheckbox.length > 0) {\r\n                        allCheckbox.unbind(\"change\").change(function (e) {\r\n                            var el = $(this),\r\n                                isChecked = el.prop(\"checked\");\r\n\r\n                            config.selected = isChecked ? config.selected += 1 : config.selected -= 1;\r\n                            if (config.selected < config.length) {\r\n                                config.selected == 0 ? element.removeClass(\"filled-partial\") : element.addClass(\"filled-partial\");\r\n                                ngModel.$setViewValue(false);\r\n                                ngModel.$render();\r\n                            } else if (config.selected == config.length) {\r\n                                element.removeClass(\"filled-partial\");\r\n                                ngModel.$setViewValue(true);\r\n                                ngModel.$render();\r\n                            }\r\n                            if (getCheckboxInfo)\r\n                                scope.$apply(function () {\r\n                                    getCheckboxInfo(scope, getInfo());\r\n                                });\r\n                        });\r\n                    }\r\n                }\r\n                function resetConfig() {\r\n                    var selected = 0;\r\n                    config.scopeData = getScope(scope, config.scopeDeep);\r\n                    config.scopeData.forEach(function (a) {\r\n                        if (a[config.checkerFlag]) selected++;\r\n                    });\r\n\r\n                    config.selected = selected;\r\n                    config.length = config.scopeData.length;\r\n\r\n                    if (config.selected < config.length) {\r\n                        config.selected == 0 ? element.removeClass(\"filled-partial\") : element.addClass(\"filled-partial\");\r\n                        ngModel.$setViewValue(false);\r\n                        ngModel.$render();\r\n                    } else if (config.selected == config.length) {\r\n                        element.removeClass(\"filled-partial\");\r\n                        ngModel.$setViewValue(true);\r\n                        ngModel.$render();\r\n                    }\r\n\r\n                    if (getCheckboxInfo)\r\n                        scope.$applyAsync(function () {\r\n                            getCheckboxInfo(scope, getInfo());\r\n                        });\r\n                }\r\n                function getScope(scope, deep) {\r\n                    var a, b = deep.split(\".\");\r\n                    if (b.length > 1) {\r\n                        a = scope;\r\n                        for (var i = 0; i < b.length; i++) {\r\n                            a = a[b[i]];\r\n                        }\r\n                    } else {\r\n                        a = scope[deep];\r\n                    }\r\n                    return a;\r\n                }\r\n                function refresh() {\r\n                    initCheckbox();\r\n                    resetConfig();\r\n                }\r\n                function getInfo() {\r\n                    return {\r\n                        selected: config.selected,\r\n                        length: config.length\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n})(angular);\nangular.module('SMART2').directive('smartSort', function () {\r\n    return {\r\n        restrict: 'E',\r\n       \ttransclude: true,\r\n       \ttemplate:'<a href=\\\"javascript:void(0)\\\" class=\"waves-circle waves-effect waves-grey\" ng-click=\\\"ascDescToggler()\\\">\\n<i ng-if=\"currentCell != sortBy\" class=\\\"icon iconSmall grey-text\\\" smart-tooltip position=\\\"bottom\\\" delay=\\\"50\\\" message=\\\"{{ \\'Sort By \\' | translate }}\\\">\\n<svg>\\n<use xlink:href=\\\"{{ \\'#icon_Sort\\' }}\\\"><\\/use>\\n<\\/svg><\\/i><i class=\\\"icon iconSmall grey-text\\\" ng-if=\"currentCell == sortBy\" ng-class=\\\" { \\'s-dd-icon-wth-color\\':  currentCell == sortBy }\\\"  smart-tooltip position=\\\"bottom\\\" delay=\\\"50\\\" message=\\\"{{ iconWithTooltip.tooltip | translate }}\\\">\\n<svg>\\n<use xlink:href=\\\"{{ iconWithTooltip.sortbyIcon }}\\\"><\\/use>\\n<\\/svg><\\/i><\\/a>',\r\n       \tscope:{\r\n       \t\tsortBy:\"=\",\r\n       \t\tsortReverse:\"=\",\r\n\t\t\tcurrentCell:\"@\"\r\n       \t},\r\n       \tlink:function($scope, $element, $attrs){\r\n\r\n       \t\t$scope.iconWithTooltip = {\r\n\t\t\t\tsortbyIcon : \"\",\r\n       \t\t\ttooltip\t:\t\"\"\r\n\r\n       \t\t}\r\n\r\n       \t\t\r\n\t       \t\t$scope.ascDescToggler = function(){\r\n              \r\n       \t\t\t$scope.sortBy = $scope.currentCell;\r\n\t       \t\t\t$scope.sortReverse = !$scope.sortReverse;\r\n\r\n\t       \t\t\tif($scope.sortBy == $scope.currentCell && $scope.sortReverse == false ){\r\n\t\t\t\t\t\t\t$scope.iconWithTooltip.sortbyIcon = \"#icon_SortDescending\";\r\n\t       \t\t\t\t\t$scope.iconWithTooltip.tooltip\t=\t\"Descending\";\r\n\t       \t\t\t}\r\n\t       \t\t\telse if($scope.sortBy == $scope.currentCell && $scope.sortReverse == true ){\r\n\t\t\t\t\t\t\t$scope.iconWithTooltip.sortbyIcon = \"#icon_SortAscending\";\r\n\t       \t\t\t\t\t$scope.iconWithTooltip.tooltip\t=\t\"Ascending\";\r\n\t       \t\t\t}\r\n\t       \t\t\t\r\n       \t\t\t};\r\n       \t\t\r\n       \t}\r\n       \r\n    }\r\n});\nvar isRegionalSettingEnabled = typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable;\r\n(function () {\r\n    'use strict';\r\n\r\n    var app = angular.module('SMART2');\r\n\r\n\r\n    window.onmousedown = function (e) {\r\n        if ($(e.target).closest('.smart-table-cell-template').length > 0) {\r\n            window.isSmartTableCellClicked = true;\r\n        }\r\n\r\n        //\tIf autosuggest option is not clicked, allow scope to be cleared\r\n        if (window.lastActiveCellScope && ($(e.target).closest('.daterangepicker').length > 0 || $(e.target).closest('.autocomplete-suggestion').length > 0 ||\r\n        $(e.target).closest('.autocomplete-suggestions').length > 0 || $(e.target).closest('.modal').length > 0 || $(e.target).closest('.lean-overlay').length > 0)) {\r\n            return;\r\n        }\r\n\r\n        //\tClear and update last rendered cell when selection or tree icon is clicked\r\n        if ($(e.target).closest('.smart-table-row-cell').length == 0 || $(e.target).closest('.smart-table-icon-holder').length > 0) {\r\n            if (window.lastActiveCellScope) {\r\n                window.lastActiveCellScope.stopEdit();\r\n                window.lastActiveCellScope = undefined;\r\n            }\r\n            return;\r\n        }\r\n    };\r\n\r\n\r\n    window.focusHandler = function (element) {\r\n        element.focus(function () {\r\n            setTimeout((function (el) {\r\n                var strLength = el.value.length;\r\n                return function () {\r\n                    if (el.setSelectionRange !== undefined) {\r\n                        el.setSelectionRange(strLength, strLength);\r\n                    }\r\n                    else {\r\n                        $(el).val(el.value);\r\n                    }\r\n                }\r\n            }(this)), 0);\r\n        });\r\n    };\r\n\r\n\r\n    //  To handle date picker control issue\r\n    setTimeout(function () {\r\n        window.onkeydown = function (e) {\r\n            if ($(e.target).is('body') && window.lastActiveCellScope &&\r\n                window.lastActiveCellScope.column.attributes && window.lastActiveCellScope.column.attributes.type == 'date') {\r\n                window.lastActiveCellScope.onElementKeyDown(e);\r\n                return false;\r\n            }\r\n        };\r\n    }, 500);\r\n\r\n\r\n    function getObjectValue(obj, keys) {\r\n        try {\r\n            var arr = keys.split('.');\r\n            while (arr.length) {\r\n                obj = obj[arr.shift()];\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return obj;\r\n    };\r\n\r\n    function getObjectValueForAutoSuggest(obj, keys) {\r\n        var arr = keys.split('.');\r\n        if (arr.length > 1) {\r\n            arr.splice(arr.length - 1, 1);\r\n            return getObjectValue(obj, arr.join('.'));\r\n        }\r\n        return obj[arr[0]];\r\n    };\r\n\r\n    function setObjectValue(obj, keys, value) {\r\n        try {\r\n            var arr = keys.split('.');\r\n            if (arr.length == 1) {\r\n                obj[arr[0]] = value;\r\n            }\r\n            else {\r\n                var obj = obj[arr[0]];\r\n                arr.shift();\r\n                var keys = arr.join('.');\r\n                setObjectValue(obj, keys, value);\r\n            }\r\n        }\r\n        catch (e) { }\r\n    };\r\n\r\n    function updateCell(obj, keys, value) {\r\n        if (!angular.isObject(value)) {\r\n            setObjectValue(obj, keys, value);\r\n            return;\r\n        }\r\n        else if (!angular.isObject(obj[keys.split('.')[0]]) && angular.isObject(value)) {\r\n            setObjectValue(obj, keys, value[keys.split('.')[0]]);\r\n            return;\r\n        }\r\n        angular.extend(obj[keys.split('.')[0]], value);\r\n    };\r\n\r\n    function getFormattedData(data, displayFormat) {\r\n        if (!data || data.length == 0) {\r\n            return [];\r\n        }\r\n        for (var i = 0; i < data.length; i++) {\r\n            var str = displayFormat;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) { }\r\n            data[i].value = str.trim();\r\n        }\r\n        return data;\r\n    };\r\n\r\n    function getDisplayData(data, displayFormat) {\r\n        if (data == undefined || data == null || data == '') {\r\n            return '';\r\n        }\r\n        var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n        try {\r\n            var parentSplit = str.split('{');\r\n            for (var j = 0; j < parentSplit.length; j++) {\r\n                var childSplit = parentSplit[j].split('}');\r\n                for (var k = 0; k < childSplit.length; k++) {\r\n                    if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                        evalResult = eval('data.' + childSplit[k]);\r\n                        evaluatedKeysCounter++;\r\n                        if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                            evalResult = '';\r\n                            nullKeysCounter++;\r\n                        }\r\n                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                    }\r\n                }\r\n            }\r\n            if (evaluatedKeysCounter == nullKeysCounter) {\r\n                str = '';\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n    };\r\n\r\n    function convertNumberToFixed(number, minPrecision, maxPrecision) {\r\n        var arrTmpInputValue, tmpStrAfterPrecision;\r\n        arrTmpInputValue = (number + '').split('.');\r\n\r\n        if (arrTmpInputValue.length > 1) {\r\n            tmpStrAfterPrecision = arrTmpInputValue[arrTmpInputValue.length - 1];\r\n            if (maxPrecision > 0 && tmpStrAfterPrecision.length >= maxPrecision) {\r\n                return number.toString().match(new RegExp('^-?\\\\d+(?:\\.\\\\d{0,' + (maxPrecision || -1) + '})?'))[0];\r\n            }\r\n            else if (minPrecision > 0 && tmpStrAfterPrecision.length <= minPrecision) {\r\n                return Number(Math.round(number + 'e' + minPrecision) + 'e-' + minPrecision);\r\n            }\r\n            else {\r\n                return number;\r\n            }\r\n        }\r\n        else {\r\n            return Number(Math.round(number + 'e' + minPrecision) + 'e-' + minPrecision);\r\n        }\r\n    };\r\n\r\n    function sortSmartTableData(data, column, isAscending, translate) {\r\n        return data.sort(function (a, b) {\r\n            var strOne = getObjectValue(a, column.field);\r\n            var strTwo = getObjectValue(b, column.field);\r\n\r\n            var intOne = parseFloat(strOne);\r\n            var intTwo = parseFloat(strTwo);\r\n\r\n            if (isNaN(intOne) && isNaN(intTwo)) {\r\n                try {\r\n                    if (column.enableTranslation) {\r\n                        strOne = translate.instant(strOne);\r\n                        strTwo = translate.instant(strTwo);\r\n                    }\r\n                    strOne = strOne.toLowerCase();\r\n                    strTwo = strTwo.toLowerCase();\r\n                }\r\n                catch (e) { }\r\n                return strOne > strTwo ? (isAscending ? -1 : 1) : (strOne < strTwo ? (isAscending ? 1 : -1) : 0);\r\n            }\r\n            else if (isNaN(intOne)) {\r\n                return isAscending ? -1 : 1;\r\n            }\r\n            else if (isNaN(intTwo)) {\r\n                return isAscending ? 1 : -1;\r\n            }\r\n            else {\r\n                return intOne > intTwo ? (isAscending ? -1 : 1) : (intOne < intTwo ? (isAscending ? 1 : -1) : 0);\r\n            }\r\n        });\r\n    };\r\n\r\n    app.filter('smartTableFilter', ['$filter', '$translate', 'smartTableUtils', function ($filter, $translate, smartTableUtils) {\r\n        var isParentRowToBeDisplayed = function (data, index, filters) {\r\n            var result = false;\r\n\r\n            for (var i = index + 1; i < data.length; i++) {\r\n                if (data[i].$$treeLevel == 0) {\r\n                    break;\r\n                }\r\n                else {\r\n                    for (var j = 0; j < filters.length; j++) {\r\n                        if (((getObjectValue(data[i], filters[j].filterKey) + \"\").toLowerCase()).indexOf((filters[j].filterText + \"\").toLowerCase()) > -1) {\r\n                            result = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        var getChildrenNodes = function (data, nodeIndex) {\r\n            var tmpRows = $filter('filter')(data, function (row, i) {\r\n                return row.$$treeLevel > 0 && row.$$nodeIndex == nodeIndex;\r\n            });\r\n            tmpRows = $filter('orderBy')(tmpRows, '$$treeLevel', false);\r\n            return tmpRows;\r\n        };\r\n\r\n        return function (data, filters, sortState, enableTreeView, showTreeView, offset, limit, useExternalPagination, smartTableId) {\r\n            var outputData;\r\n            if (filters.length == 0) {\r\n                if (data) {\r\n                    if (enableTreeView) {\r\n                        var nodeIndex = -1;\r\n                        var parentIndex = -1;\r\n\r\n                        outputData = $filter('filter')(data, function (row, index) {\r\n                            if (row.$$treeLevel == 0) {\r\n                                nodeIndex++;\r\n                                parentIndex = index;\r\n                                row.$$enableTreeView = false;\r\n                            }\r\n                            else {\r\n                                try {\r\n                                    data[parentIndex].$$enableTreeView = true;\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n\r\n                            row.$$nodeIndex = nodeIndex;\r\n                            row.$$index = (useExternalPagination ? offset : 0) + index;\r\n                            row.$$parentIndex = parentIndex;\r\n                            row.$$isExpanded = data[parentIndex].$$isExpanded || !showTreeView;\r\n                            row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n\r\n                            return row.$$treeLevel == 0 || row.$$isExpanded;\r\n                        });\r\n                    }\r\n                    else {\r\n                        outputData = $filter('filter')(data, function (row, index) {\r\n                            row.$$index = (useExternalPagination ? offset : 0) + index;\r\n                            row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                            return true;\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    outputData = [];\r\n                }\r\n            }\r\n            else {\r\n                var keysMatchCounter = 0;\r\n                var nodeIndex = -1;\r\n                var parentIndex = -1;\r\n                var cellValue;\r\n\r\n                if (enableTreeView) {\r\n                    outputData = $filter('filter')(data, function (row, index) {\r\n                        if (row.$$treeLevel == 0) {\r\n                            nodeIndex++;\r\n                            parentIndex = index;\r\n                            row.$$enableTreeView = false;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                data[parentIndex].$$enableTreeView = true;\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n\r\n                        row.$$nodeIndex = nodeIndex;\r\n                        row.$$index = index;\r\n                        row.$$parentIndex = parentIndex;\r\n                        row.$$isExpanded = data[parentIndex].$$isExpanded || !showTreeView;\r\n                        row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                        keysMatchCounter = 0;\r\n\r\n                        for (var j = 0; j < filters.length; j++) {\r\n                            cellValue = (filters[j].colDef.enableTranslation && $translate.instant(getObjectValue(row, filters[j].filterKey) + '')) || getObjectValue(row, filters[j].filterKey) + '';\r\n\r\n                            if ((cellValue.toLowerCase()).indexOf((filters[j].filterText + '').toLowerCase()) > -1 ||\r\n                            (angular.isFunction(filters[j].condition) && filters[j].condition(filters[j].filterText, row, filters[j].colDef))) {\r\n                                keysMatchCounter++;\r\n                            }\r\n                        }\r\n\r\n                        return (row.$$treeLevel == 0 && keysMatchCounter == filters.length) ||\r\n                            (row.$$treeLevel != 0 && row.$$isExpanded && keysMatchCounter == filters.length) ||\r\n                            (row.$$treeLevel == 0 && isParentRowToBeDisplayed(data, index, filters));\r\n                    });\r\n                }\r\n                else {\r\n                    outputData = $filter('filter')(data, function (row, index) {\r\n                        row.$$index = index;\r\n                        row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                        keysMatchCounter = 0;\r\n\r\n                        for (var j = 0; j < filters.length; j++) {\r\n                            cellValue = (filters[j].colDef.enableTranslation && $translate.instant(getObjectValue(row, filters[j].filterKey) + '')) || getObjectValue(row, filters[j].filterKey) + '';\r\n\r\n                            if ((cellValue.toLowerCase()).indexOf((filters[j].filterText + '').toLowerCase()) > -1 ||\r\n                            (angular.isFunction(filters[j].condition) && filters[j].condition(filters[j].filterText, row, filters[j].colDef))) {\r\n                                keysMatchCounter++;\r\n                            }\r\n                        }\r\n\r\n                        return keysMatchCounter == filters.length;\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (sortState) {\r\n                if (enableTreeView) {\r\n                    //\treorder tree data\r\n                    var arrParentNodes = $filter('filter')(outputData, function (row) {\r\n                        return row.$$treeLevel == 0;\r\n                    });\r\n                    if (sortState.order > -1) {\r\n                        if (angular.isFunction(sortState.condition)) {\r\n                            arrParentNodes = sortState.condition(arrParentNodes, sortState.column, sortState.order == 0 ? false : true);\r\n                        }\r\n                        else {\r\n                            arrParentNodes = sortSmartTableData(arrParentNodes, sortState.column, sortState.order == 0 ? false : true, $translate);\r\n                        }\r\n                    }\r\n                    var arrOrderedData = [];\r\n                    angular.forEach(arrParentNodes, function (row) {\r\n                        arrOrderedData = arrOrderedData.concat([row]).concat(getChildrenNodes(outputData, row.$$nodeIndex));\r\n                    });\r\n                    outputData = arrOrderedData;\r\n                }\r\n                else {\r\n                    if (sortState.order > -1) {\r\n                        if (angular.isFunction(sortState.condition)) {\r\n                            outputData = sortState.condition(outputData, sortState.column, sortState.order == 0 ? false : true);\r\n                        }\r\n                        else {\r\n                            outputData = sortSmartTableData(outputData, sortState.column, sortState.order == 0 ? false : true, $translate);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!useExternalPagination) {\r\n                //\tUpdate total number of pages\r\n                smartTableUtils.broadcast('dataChange', { totalRecords: outputData.length, smartTableId: smartTableId });\r\n\r\n                outputData = outputData.slice(offset, limit);\r\n\r\n                //\tUpdate currently displayed records count\r\n                smartTableUtils.broadcast('pageIndexChanged', { currentPageDataLength: outputData.length, smartTableId: smartTableId });\r\n            }\r\n\r\n            return outputData;\r\n        }\r\n    }]);\r\n\r\n\r\n    app.directive('smartTable', ['$filter', '$timeout', '$templateCache', 'smartTableUtils', function ($filter, $timeout, $templateCache, smartTableUtils) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                smartTable: '=?'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var areEventListenersAdded = false, arrSelectedRowsIndexes = [], smartTableState;\r\n                var pageIndex = 0;\r\n                var recordsFetchedCount = 0;\r\n                var totalPages;\r\n                var apis;\r\n\r\n                var sortOrder = 1;  //  1 = descending, 0 = ascending, -1 = reset\r\n                scope.filters = [];\r\n                scope.enableRowSelection = false;\r\n                scope.enableTreeView = false;\r\n                scope.showTreeView = false;\r\n                scope.arrRowsPerPageOptions = [10, 20, 30, 40, 50];\r\n                scope.rowsPerPage = \"10\";\r\n                scope.useExternalPagination = false;\r\n                scope.smartTableId = 'smart-table-' + (new Date().getTime());\r\n\r\n                scope.listeners = {};\r\n\r\n                var limit = parseInt(scope.rowsPerPage);\r\n\r\n                var addEventListeners = function (smartTable) {\r\n                    apis = {\r\n                        core: {\r\n                            getActiveColumns: function () {\r\n                                return scope.smartTableConfig.columnDefs;\r\n                            },\r\n                            getColDefs: function () {\r\n                                return scope.smartTableConfig.columnDefs;\r\n                            },\r\n                            notifyColumnChange: function () {\r\n                                init('columnChange');\r\n                            },\r\n                            notifyRowDataChange: function (rowIndex) {\r\n                                smartTableUtils.broadcast('rowDataChange', { rowIndex: rowIndex, smartTableId: scope.smartTableId });\r\n                            },\r\n                            notifyDataChange: function (isToBeRefreshed) {\r\n                                if (isToBeRefreshed) {\r\n                                    init('refresh');\r\n                                }\r\n                                else {\r\n                                    smartTableUtils.broadcast('dataChange', { smartTableId: scope.smartTableId, updateCell: true });\r\n                                }\r\n                            },\r\n                            refresh: function () {\r\n                                scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                                scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                                scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                                scope.useExternalPagination = scope.smartTableConfig.useExternalPagination ? true : false;\r\n                                init('refresh');\r\n                                angular.isFunction(smartTable.onRefresh) && smartTable.onRefresh(apis);\r\n                            },\r\n                            update: function () {\r\n                                init('dataChange');\r\n                            },\r\n                            stopEdit: function () {\r\n                                if (window.lastActiveCellScope) {\r\n                                    window.lastActiveCellScope.stopEdit();\r\n                                    window.lastActiveCellScope = undefined;\r\n                                }\r\n                            },\r\n                            pagination: {\r\n                                on: {\r\n                                    nextButtonClick: function (scopeRef, onNextButtonClick) {\r\n                                        scope.listeners['nextButtonClick'] = onNextButtonClick;\r\n                                    },\r\n                                    previousButtonClick: function (scopeRef, onPreviousButtonClick) {\r\n                                        scope.listeners['previousButtonClick'] = onPreviousButtonClick;\r\n                                    },\r\n                                    sort: function (scopeRef, onSort) {\r\n                                        scope.listeners['sort'] = onSort;\r\n                                    },\r\n                                    filter: function (scopeRef, onFilter) {\r\n                                        scope.listeners['filter'] = onFilter;\r\n                                    }\r\n                                },\r\n                                setDataLength: function (totalItemsCount) {\r\n                                    scope.displayedRecords = totalItemsCount;\r\n                                },\r\n                                setData: function (items) {\r\n                                    scope.smartTableConfig.data = items;\r\n                                    scope.currentPageDataLength = items.length;\r\n                                },\r\n                                setOffset: function (offset) {\r\n                                    scope.offset = offset;\r\n                                },\r\n                                setLimit: function (limit) {\r\n                                    scope.limit = limit;\r\n                                },\r\n                                getOffset: function () {\r\n                                    return scope.offset;\r\n                                },\r\n                                getRowsPerPage: function () {\r\n                                    return scope.rowsPerPage;\r\n                                }\r\n                            },\r\n                            on: {\r\n                                columnRefresh: function (scopeRef, onColumnRefresh) {\r\n                                    scope.listeners['columnRefresh'] = onColumnRefresh;\r\n                                }\r\n                            }\r\n                        },\r\n                        cell: {\r\n                            on: {\r\n                                click: function (scopeRef, onCellClick) {\r\n                                    scope.listeners['cellClick'] = onCellClick;\r\n                                },\r\n                                change: function (scopeRef, onCellChange) {\r\n                                    scope.listeners['cellChange'] = onCellChange;\r\n                                },\r\n                                optionsChange: function (scopeRef, onOptionsChange) {\r\n                                    scope.listeners['optionsChange'] = onOptionsChange;\r\n                                },\r\n                                optionSelect: function (scopeRef, onOptionSelect) {\r\n                                    scope.listeners['optionSelect'] = onOptionSelect;\r\n                                }\r\n                            }\r\n                        },\r\n                        cellNav: {\r\n                            scrollToFocus: function (rowIndex, colField) {\r\n                                var columnIndex, toBeFocused = true;\r\n\r\n                                for (var i = 0; i < scope.colDefs.length; i++) {\r\n                                    if (scope.colDefs[i].field == colField) {\r\n                                        columnIndex = i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n\r\n                                if (scope.enableTreeView && scope.showTreeView && !scope.smartTableConfig.data[scope.smartTableConfig.data[rowIndex].$$parentIndex].$$isExpanded) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.smartTableConfig.data[scope.smartTableConfig.data[rowIndex].$$parentIndex].$$isExpanded = true;\r\n                                    toBeFocused = false;\r\n                                }\r\n\r\n                                //  Load next page\r\n                                if (rowIndex > (scope.limit > scope.displayedRecords ? scope.displayedRecords : scope.limit) - 1) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.updatePagination(true, false);\r\n                                }\r\n                                    //  Load previous page\r\n                                else if (rowIndex < scope.offset) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.updatePagination(false, false);\r\n                                }\r\n                                else if (toBeFocused) {\r\n                                    scope.pendingFocus = undefined;\r\n                                    $('#' + scope.smartTableId + '-smart-table-cell-' + ((scope.pinnedColumns.length + scope.unpinnedColumns.length) * (rowIndex - scope.offset) + columnIndex)).focus();\r\n                                    //smartTableUtils.broadcast('focusCell', { rowIndex: rowIndex - scope.offset, colField: colField, smartTableId: scope.smartTableId });\r\n                                }\r\n\r\n                                document.getSelection().removeAllRanges();\r\n                            }\r\n                        },\r\n                        edit: {\r\n                            on: {\r\n                                beginCellEdit: function (scopeRef, onBeginCellEdit) {\r\n                                    scope.listeners['beginCellEdit'] = onBeginCellEdit;\r\n                                },\r\n                                endCellEdit: function (scopeRef, onEndCellEdit) {\r\n                                    scope.listeners['endCellEdit'] = onEndCellEdit;\r\n                                },\r\n                                afterCellEdit: function (scopeRef, onAfterCellEdit) {\r\n                                    scope.listeners['afterCellEdit'] = onAfterCellEdit;\r\n                                }\r\n                            }\r\n                        },\r\n                        saveState: {\r\n                            save: function () {\r\n                                var columnsState = [];\r\n                                var tmpColDefs = getReOrderedColumnDefsForState(scope.smartTableConfig.columnDefs);\r\n\r\n                                for (var i = 0; i < tmpColDefs.length; i++) {\r\n                                    columnsState.push({\r\n                                        displayKey: tmpColDefs[i].displayKey,\r\n                                        displayName: tmpColDefs[i].displayName,\r\n                                        field: tmpColDefs[i].field,\r\n                                        width: tmpColDefs[i].width,\r\n                                        visible: tmpColDefs[i].visible\r\n                                    });\r\n                                }\r\n\r\n                                return {\r\n                                    columns: JSON.stringify(columnsState),\r\n                                    filters: scope.filters,\r\n                                    sort: scope.sortState,\r\n                                    enableRowSelection: scope.enableRowSelection,\r\n                                    enableTreeView: scope.enableTreeView,\r\n                                    showTreeView: scope.showTreeView,\r\n                                    pagination: {\r\n                                        pageIndex: pageIndex,\r\n                                        limit: limit,\r\n                                        paginationCurrentPage: 1,\r\n                                        paginationPageSize: 10\r\n                                    },\r\n                                    timestamp: new Date(),\r\n                                    documentURL: window.location.href,\r\n                                    isSmartTable: true\r\n                                };\r\n                            },\r\n                            restore: function (scopeRef, state) {\r\n                                //\trestore table state\r\n                                if (state.isSmartTable) {\r\n                                    scope.enableRowSelection = state.enableRowSelection ? true : false;\r\n                                    scope.enableTreeView = state.enableTreeView ? true : false;\r\n                                    scope.showTreeView = state.showTreeView ? true : false;\r\n\r\n                                    if (state.filters && !scope.useExternalPagination) {\r\n                                        scope.filters = state.filters;\r\n                                    }\r\n                                    if (angular.isDefined(state.columns)) {\r\n                                        scope.smartTableConfig.columnDefs = getReOrderedColumnDefs(state.columns);\r\n                                    }\r\n                                    if (!scope.useExternalPagination) {\r\n                                        if (state.pagination) {\r\n                                            pageIndex = state.pagination.limit > 10 ? 0 : state.pagination.pageIndex;\r\n                                            limit = 10; // state.pagination.limit;\r\n                                            scope.offset = pageIndex * limit;\r\n                                            scope.limit = (pageIndex * limit) + limit;\r\n                                            scope.rowsPerPage = \"10\";\r\n                                        }\r\n                                        if (state.sort) {\r\n                                            scope.sortState = state.sort;\r\n                                            sortOrder = state.sort.order;\r\n                                        }\r\n                                    }\r\n                                    refreshColumns();\r\n                                    angular.isFunction(smartTable.onRefresh) && smartTable.onRefresh(apis);\r\n                                }\r\n                                else {\r\n                                    scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                                    scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                                    scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                                    init('refresh');\r\n                                }\r\n                            }\r\n                        },\r\n                        selection: {\r\n                            clearSelectedRows: function () {\r\n                                for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                                    scope.smartTableConfig.data[i].$$isSelected = false;\r\n                                }\r\n                                arrSelectedRowsIndexes = [];\r\n                                scope.isAllRowSelected = false;\r\n                            },\r\n                            getSelectedRows: function () {\r\n                                var tmpSelectedRows = [], tmpRow, arrDeletedIndexes = [];\r\n                                for (var i = 0; i < arrSelectedRowsIndexes.length; i++) {\r\n                                    tmpRow = angular.copy(scope.smartTableConfig.data[arrSelectedRowsIndexes[i]]);\r\n                                    if (tmpRow) {\r\n                                        tmpRow.$$isSelected = false;\r\n                                        tmpSelectedRows.push({ entity: tmpRow, index: arrSelectedRowsIndexes[i] });\r\n                                    }\r\n                                    else {\r\n                                        arrDeletedIndexes.push(i);\r\n                                    }\r\n                                }\r\n                                for (var i = arrDeletedIndexes.length - 1; i >= 0; i--) {\r\n                                    arrSelectedRowsIndexes.splice(arrDeletedIndexes[i], 1);\r\n                                }\r\n                                return tmpSelectedRows;\r\n                            },\r\n                            on: {\r\n                                rowSelectionChanged: function (scopeRef, onRowSelectedChanged) {\r\n                                    scope.listeners['rowSelectionChanged'] = onRowSelectedChanged;\r\n                                }\r\n                            }\r\n                        },\r\n                        options: scope.smartTableConfig\r\n                    };\r\n                    angular.isFunction(smartTable.onRegister) && smartTable.onRegister(apis);\r\n                };\r\n\r\n\r\n                var onSmartTableConfigChange = scope.$watch('smartTable', function (newConfig) {\r\n                    if (!newConfig) {\r\n                        return;\r\n                    }\r\n\r\n                    scope.smartTableConfig = newConfig;\r\n                    scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                    scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                    scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                    scope.useExternalPagination = scope.smartTableConfig.useExternalPagination ? true : false;\r\n\r\n                    scope.smartTableConfig.columnDefs = newConfig.columnDefs ? newConfig.columnDefs : [];\r\n                    scope.smartTableConfig.data = newConfig.data ? newConfig.data : [];\r\n\r\n                    init('refresh');\r\n\r\n                    if (!areEventListenersAdded) {\r\n                        addEventListeners(scope.smartTable);\r\n                        areEventListenersAdded = true;\r\n                    }\r\n                });\r\n\r\n\r\n                var getColumnDef = function (srcConfig, colField) {\r\n                    for (var i = 0; i < srcConfig.length; i++) {\r\n                        if (srcConfig[i].field == colField) {\r\n                            return srcConfig[i];\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n\r\n\r\n                var getColumFilterText = function (colField) {\r\n                    for (var i = 0; i < scope.filters.length; i++) {\r\n                        if (scope.filters[i].filterKey == colField) {\r\n                            return scope.filters[i].filterText;\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n\r\n\r\n                var getReOrderedColumnDefs = function (colDefs) {\r\n                    colDefs = typeof colDefs == 'string' ? JSON.parse(colDefs) : colDefs;\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        if (angular.isUndefined(getColumnDef(colDefs, scope.smartTableConfig.columnDefs[i].field))) {\r\n                            return scope.smartTableConfig.columnDefs;\r\n                        }\r\n                    }\r\n                    var reOrderedColumns = [];\r\n                    var colDef;\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        colDef = getColumnDef(scope.smartTableConfig.columnDefs, colDefs[i].field);\r\n                        if (angular.isUndefined(colDef)) {\r\n                            return scope.smartTableConfig.columnDefs;\r\n                        }\r\n                        reOrderedColumns.push(angular.extend(colDef, {\r\n                            width: colDefs[i].width,\r\n                            visible: angular.isUndefined(colDefs[i].visible) ? colDef.visible : colDefs[i].visible,\r\n                            filterText: getColumFilterText(colDefs[i].field)\r\n                        }));\r\n                    }\r\n                    return reOrderedColumns;\r\n                };\r\n\r\n\r\n                var getReOrderedColumnDefsForState = function (colDefs) {\r\n                    var pinnedColumns = [];\r\n                    var unpinnedColumns = [];\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    return pinnedColumns.concat(unpinnedColumns);\r\n                };\r\n\r\n\r\n                var refreshColumns = function () {\r\n                    var pinnedColumns = [];\r\n                    var unpinnedColumns = [];\r\n                    var pinnedContainerWidth = 0;\r\n\r\n                    var colDefs = angular.copy(scope.smartTableConfig.columnDefs);\r\n                    var tmpColDefs = [];\r\n                    var leftPos = (scope.enableRowSelection ? 40 : 0) + (scope.enableTreeView && scope.showTreeView ? 40 : 0);\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].visible == false) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            colDefs[i].pinnedLeft = false;\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    colDefs = pinnedColumns.concat(unpinnedColumns);\r\n                    pinnedColumns = [];\r\n                    unpinnedColumns = [];\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].visible == false) {\r\n                            continue;\r\n                        }\r\n\r\n                        colDefs[i].left = leftPos;\r\n\r\n                        leftPos = leftPos + colDefs[i].width;\r\n\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedContainerWidth = pinnedContainerWidth + (colDefs[i].visible ? (colDefs[i].width ? colDefs[i].width : '100') : 0);\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    tmpColDefs = pinnedColumns.concat(unpinnedColumns);\r\n\r\n                    scope.colDefs = angular.copy(tmpColDefs);\r\n\r\n                    $(element.find('.smart-table-unpinned-container')).css('margin-left', pinnedContainerWidth + (scope.enableRowSelection ? 40 : 0) + (scope.enableTreeView && scope.showTreeView ? 40 : 0));\r\n\r\n                    scope.pinnedColumns = pinnedColumns;\r\n                    scope.unpinnedColumns = unpinnedColumns;\r\n\r\n                    scope.updateSmartTableColumnResizer = true;\r\n                    scope.updateSmartTableColumnSorter = true;\r\n                };\r\n\r\n\r\n                var init = function (eventType) {\r\n                    switch (eventType) {\r\n                        case 'refresh':\r\n                            pageIndex = 0;\r\n                            scope.rowsPerPage = \"10\";\r\n                            limit = parseInt(scope.rowsPerPage); // 10;\r\n                            recordsFetchedCount = 0;\r\n\r\n                            sortOrder = 1;\r\n\r\n                            for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                                scope.smartTableConfig.columnDefs[i].filterText = \"\";\r\n                            }\r\n\r\n                            scope.filters = [];\r\n                            scope.sortState = undefined;\r\n\r\n                            scope.isRowSelectionEnabled = true;\r\n                            scope.isAllRowSelected = false;\r\n\r\n                            refreshColumns();\r\n\r\n                            scope.updatePagination(false, true);\r\n                            break;\r\n\r\n                        case 'columnChange':\r\n                        case 'dataChange':\r\n                            refreshColumns();\r\n                            break;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.updatePagination = function (isNextButtonClicked, isRefresh) {\r\n                    if (scope.useExternalPagination) {\r\n                        if (isNextButtonClicked) {\r\n                            angular.isFunction(scope.listeners.nextButtonClick) && scope.listeners.nextButtonClick();\r\n                        }\r\n                        else {\r\n                            angular.isFunction(scope.listeners.previousButtonClick) && scope.listeners.previousButtonClick();\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (isRefresh) {\r\n                        scope.offset = 0;\r\n                        scope.limit = parseInt(scope.rowsPerPage); // 10\r\n                        pageIndex = 0;\r\n                    }\r\n                    else {\r\n                        if (isNextButtonClicked && pageIndex < totalPages) {\r\n                            pageIndex++;\r\n                        }\r\n                        else if (!isNextButtonClicked && pageIndex > 0) {\r\n                            pageIndex--;\r\n                        }\r\n                        scope.offset = pageIndex * limit;\r\n                        scope.limit = (pageIndex * limit) + limit;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.onRowsPerPageOptionChange = function (rowsPerPage) {\r\n                    limit = parseInt(rowsPerPage);\r\n                    scope.updatePagination(false, true);\r\n                };\r\n\r\n\r\n                scope.filterData = function (column) {\r\n                    for (var i = 0; i < scope.filters.length; i++) {\r\n                        if (scope.filters[i].filterKey == column.field) {\r\n                            if (column.filterText.trim() == '') {\r\n                                scope.filters.splice(i, 1);\r\n                            }\r\n                            else {\r\n                                scope.filters[i].filterText = column.filterText;\r\n                            }\r\n                            scope.updatePagination(false, true);\r\n                            return;\r\n                        }\r\n                    }\r\n                    scope.filters.push({\r\n                        filterKey: column.field,\r\n                        filterText: column.filterText,\r\n                        colDef: column,\r\n                        condition: column.hasOwnProperty('filter') && column.filter.condition\r\n                    });\r\n                    scope.updatePagination(false, true);\r\n                };\r\n\r\n\r\n                scope.sortData = function (column) {\r\n                    smartTableUtils.debounce.add(function () {\r\n                        //\tIf new column needs to be sorted, then reset sort flag\r\n                        if (scope.sortState && scope.sortState.column.field != column.field || sortOrder < -1) {\r\n                            sortOrder = 1;\r\n                        }\r\n                        refreshColumns();\r\n                        scope.updatePagination(false, true);\r\n                        scope.sortState = {\r\n                            column: column,\r\n                            order: sortOrder,\r\n                            condition: column.sortCondition\r\n                        };\r\n                        sortOrder--;\r\n                    }, 250);\r\n                };\r\n\r\n\r\n                scope.selectRow = function (row, rowIndex, shouldSelectedAllRows) {\r\n                    if (shouldSelectedAllRows) {\r\n                        scope.isAllRowSelected = !scope.isAllRowSelected;\r\n                        if (scope.isAllRowSelected) {\r\n                            arrSelectedRowsIndexes = [];\r\n                        }\r\n                        for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                            scope.smartTableConfig.data[i].$$isSelected = scope.smartTableConfig.data[i].$$isSelectable && scope.isAllRowSelected;\r\n                            if (scope.isAllRowSelected && scope.smartTableConfig.data[i].$$isSelected) {\r\n                                arrSelectedRowsIndexes.push(i);\r\n                            }\r\n                        }\r\n                        if (!scope.isAllRowSelected) {\r\n                            arrSelectedRowsIndexes = [];\r\n                        }\r\n                    }\r\n                    else {\r\n                        row.$$isSelected = row.$$isSelectable && !row.$$isSelected;\r\n                        if (row.$$isSelected) {\r\n                            arrSelectedRowsIndexes.push(rowIndex);\r\n                        }\r\n                        else {\r\n                            if (arrSelectedRowsIndexes.indexOf(rowIndex) > -1) {\r\n                                arrSelectedRowsIndexes.splice(arrSelectedRowsIndexes.indexOf(rowIndex), 1);\r\n                            }\r\n                        }\r\n                        scope.isAllRowSelected = arrSelectedRowsIndexes.length == scope.smartTableConfig.data.length;\r\n                    }\r\n\r\n                    if (/*rowIndex > -1 &&*/ angular.isFunction(scope.listeners.rowSelectionChanged)) {\r\n                        scope.listeners.rowSelectionChanged({\r\n                            row: {\r\n                                entity: row,\r\n                                index: rowIndex,\r\n                                isSelected: scope.isAllRowSelected || (row && row.$$isSelected)\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n\r\n                scope.expandRow = function (row, rowIndex, shouldExpandAllRows) {\r\n                    if (shouldExpandAllRows) {\r\n                        for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                            if (scope.smartTableConfig.data[i].$$treeLevel == 0) {\r\n                                scope.smartTableConfig.data[i].$$isExpanded = !scope.isAllRowExpanded\r\n                            }\r\n                        }\r\n                        scope.isAllRowExpanded = !scope.isAllRowExpanded;\r\n                        scope.updatePagination(false, true);\r\n                    }\r\n                    else {\r\n                        if (row.$$treeLevel > 0) {\r\n                            return;\r\n                        }\r\n                        row.$$isExpanded = !row.$$isExpanded;\r\n                        scope.isAllRowExpanded = false;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.onColumnSort = function (e) {\r\n                    var activeColDefs = angular.copy(scope.colDefs);\r\n                    var startIndex, endIndex, toBeSorted;\r\n\r\n                    var startCol = activeColDefs[e.startIndex];\r\n                    var endCol = activeColDefs[e.endIndex];\r\n\r\n                    if (startCol.pinnedLeft != endCol.pinnedLeft || startCol.field == endCol.field) {\r\n                        return;\r\n                    }\r\n\r\n                    scope.$apply(function () {\r\n                        for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                            if (scope.smartTableConfig.columnDefs[i].field == startCol.field) {\r\n                                startIndex = i;\r\n                                if (angular.isDefined(endIndex)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (scope.smartTableConfig.columnDefs[i].field == endCol.field) {\r\n                                endIndex = i;\r\n                                if (angular.isDefined(startIndex)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var tmpColDefs = angular.copy(scope.smartTableConfig.columnDefs);\r\n                        var item = tmpColDefs.splice(startIndex, 1);\r\n                        tmpColDefs.splice(endIndex, 0, item[0]);\r\n                        scope.smartTableConfig.columnDefs = angular.copy(tmpColDefs);\r\n                        tmpColDefs = null;\r\n\r\n                        init('columnChange');\r\n                        angular.isFunction(scope.listeners.columnRefresh) && scope.listeners.columnRefresh(scope.colDefs);\r\n                    });\r\n                };\r\n\r\n\r\n                scope.onColumnResize = function (e) {\r\n                    var activeColDefs = angular.copy(scope.colDefs);\r\n                    var colToBeResized;\r\n\r\n                    for (var i = 0; i < activeColDefs.length; i++) {\r\n                        if (e.columnIndex == i) {\r\n                            colToBeResized = activeColDefs[i];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        if (scope.smartTableConfig.columnDefs[i].field == colToBeResized.field) {\r\n                            scope.smartTableConfig.columnDefs[i].width = e.width;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    init('columnChange');\r\n                    angular.isFunction(scope.listeners.columnRefresh) && scope.listeners.columnRefresh(scope.colDefs);\r\n                };\r\n\r\n\r\n                var watchers;\r\n\r\n                scope.onSmartTableRenderingStart = function () {\r\n                    watchers = scope.$$watchers;\r\n                    scope.$$watchers = [];\r\n                    // window.startTime = performance.now();\r\n                    // console.log('rendering start');\r\n                };\r\n\r\n                scope.onSmartTableRenderingDone = function () {\r\n                    if (watchers) {\r\n                        scope.$$watchers = watchers;\r\n                    }\r\n                    // discard our copy of the watchers\r\n                    watchers = void 0;\r\n                    // console.log('rendering done in => ' + ((performance.now() - window.startTime) / 1000) + ' seconds');\r\n                };\r\n\r\n                var onDataChange = smartTableUtils.on('dataChange', function (e) {\r\n                    if (angular.isDefined(e.totalRecords) && e.smartTableId == scope.smartTableId) {\r\n                        totalPages = Math.ceil(e.totalRecords / limit) - 1;\r\n                        scope.displayedRecords = e.totalRecords;\r\n                    }\r\n                });\r\n\r\n                var onPageIndexChanged = smartTableUtils.on('pageIndexChanged', function (e) {\r\n                    if (e.smartTableId == scope.smartTableId) {\r\n                        scope.currentPageDataLength = e.currentPageDataLength;\r\n                    }\r\n                });\r\n\r\n                var onSmartTableCurrentPageDataLength = scope.$watch('currentPageDataLength', function (newLength) {\r\n                    if (newLength == 0 && pageIndex > 0) {\r\n                        scope.updatePagination(false, false);\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onSmartTableConfigChange();\r\n                    onPageIndexChanged();\r\n                    onSmartTableCurrentPageDataLength();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/smartTable/smartTableTemplate.html'\r\n        };\r\n    }]);\r\n\r\n    app.service('smartTableUtils', ['$timeout', function ($timeout) {\r\n        var _this = this;\r\n\r\n        /*\r\n         *  Alternative of broadcast event\r\n         */\r\n        var arrEvents = [];\r\n        var eventCounter = 0;\r\n\r\n\r\n        /*\r\n         *  Deregister an event or events\r\n         */\r\n        this.removeEventListener = function (event) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (arrEvents[i].eventName == event.eventName && arrEvents[i].eventId == event.eventId) {\r\n                    arrEvents[i].callback = null;\r\n                    arrEvents.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n         *  Register a listener\r\n         */\r\n        this.on = function (eventName, callback) {\r\n            eventCounter++;\r\n            arrEvents.push({\r\n                eventName: eventName,\r\n                callback: callback,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            });\r\n            var objEvent = {\r\n                eventName: eventName,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            };\r\n            return function () {\r\n                _this.removeEventListener(objEvent);\r\n            };\r\n        };\r\n\r\n\r\n        /*\r\n         *  Fire an event\r\n         */\r\n        this.broadcast = function (eventName, data) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (eventName == arrEvents[i].eventName) {\r\n                    angular.isFunction(arrEvents[i].callback) && arrEvents[i].callback(data);\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n\t     *\tDebouncer logic\r\n\t\t */\r\n        var functionTimeout, isAngularTimeout;\r\n\r\n        this.debounce = {\r\n            add: function (callback, duration, isDigestCycleToBeTriggered) {\r\n                if (functionTimeout) {\r\n                    if (angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false) {\r\n                        clearTimeout(functionTimeout);\r\n                    }\r\n                    else {\r\n                        $timeout.cancel(functionTimeout);\r\n                    }\r\n                }\r\n                functionTimeout = angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false ? setTimeout(function () {\r\n                    angular.isFunction(callback) && callback();\r\n                }, duration ? duration : 1000) : $timeout(function () {\r\n                    angular.isFunction(callback) && callback();\r\n                }, duration ? duration : 1000);\r\n                isAngularTimeout = !angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false;\r\n            },\r\n            cancel: function () {\r\n                if (isAngularTimeout) {\r\n                    $timeout.cancel(functionTimeout);\r\n                }\r\n                else {\r\n                    clearTimeout(functionTimeout);\r\n                }\r\n                functionTimeout = null;\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableCellStyle', ['$compile', '$timeout',\r\n\tfunction () {\r\n\t    return {\r\n\t        restrict: 'A',\r\n\t        link: function (scope, element, attrs) {\r\n\t            //\tto watch the rendering changes e.g. sort or filter\r\n\t            var onColumnConfigChange = scope.$watch('column', function (n) {\r\n\t                init();\r\n\t            });\r\n\r\n\t            var init = function () {\r\n\t                element.removeClass('smart-table-pinned-column smart-table-unpinned-column');\r\n\t                if (scope.column.pinnedLeft) {\r\n\t                    element.addClass('smart-table-pinned-column');\r\n\t                    element.css('left', scope.column.left);\r\n\t                    element.css('width', scope.column.width);\r\n\t                }\r\n\t                else {\r\n\t                    element.addClass('smart-table-unpinned-column');\r\n\t                }\r\n\t            };\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                onColumnConfigChange();\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t}]);\r\n\r\n    app.directive('smartTableHeaderCellTextContainer', ['$compile', '$timeout',\r\n\tfunction () {\r\n\t    return {\r\n\t        restrict: 'C',\r\n\t        link: function (scope, element, attrs) {\r\n\t            //\tto watch the rendering changes e.g. sort or filter\r\n\t            var onColumnConfigChange = scope.$watch('column', function (n) {\r\n\t                init();\r\n\t            });\r\n\r\n\t            var init = function () {\r\n\t                element.css('width', scope.column.width - (scope.column.pinnedLeft ? 12 : 0));\r\n\t            };\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                onColumnConfigChange();\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t}]);\r\n\r\n    app.directive('smartTableColumnResizer', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var isMouseDown, canBeResized, resizer, leftPosLimit = 0, columnIndex, maxWidth, width, newWidth;\r\n\r\n                var onMouseMove = function (e) {\r\n                    if (isMouseDown) {\r\n                        if (e.clientX > leftPosLimit && (angular.isUndefined(maxWidth) || (angular.isDefined(maxWidth) && e.clientX - leftPosLimit < maxWidth))) {\r\n                            resizer.css({\r\n                                left: e.clientX\r\n                            });\r\n                        }\r\n                        document.getSelection().removeAllRanges();\r\n                    }\r\n                    else {\r\n                        if (e.offsetX > (($(this).outerWidth(true) - 2) - 5) && e.offsetX < (($(this).outerWidth(true) - 2))) {\r\n                            $(this).css('cursor', 'col-resize');\r\n                        }\r\n                        else {\r\n                            $(this).css('cursor', 'default');\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var onMouseUp = function (e) {\r\n                    if (isMouseDown) {\r\n                        resizer.off('mousemove', onMouseMove);\r\n                        resizer.off('mouseup', onMouseUp);\r\n                        resizer.remove();\r\n                        canBeResized = false;\r\n                        isMouseDown = false;\r\n                        newWidth = (angular.isDefined(maxWidth) && e.clientX - leftPosLimit > maxWidth) ? maxWidth : e.clientX - leftPosLimit;\r\n\r\n                        if (Math.abs(newWidth - width) > 5) {\r\n                            scope.$apply(function () {\r\n                                scope.onColumnResize({\r\n                                    columnIndex: columnIndex,\r\n                                    width: newWidth < 20 ? 20 : newWidth\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var onMouseDown = function (e) {\r\n                    if (e.offsetX >= (($(this).outerWidth(true) - 2) - 5) && e.offsetX < (($(this).outerWidth(true) - 2))) {\r\n                        $(this).css('cursor', 'col-resize');\r\n                        leftPosLimit = $(this).offset().left;\r\n                        resizer = $(document.createElement('div'));\r\n                        columnIndex = parseInt($(this).attr('column-index'));\r\n                        maxWidth = scope.colDefs[columnIndex].maxWidth;\r\n                        width = scope.colDefs[columnIndex].width;\r\n\r\n                        resizer.css({\r\n                            position: 'absolute',\r\n                            left: $(this).offset().left + $(this).outerWidth(true),\r\n                            top: $(this).offset().top,\r\n                            width: '1px',\r\n                            height: $(this).closest('table').outerHeight(true),\r\n                            'z-index': 1000,\r\n                            border: 'dotted'\r\n                        });\r\n\r\n                        resizer.on('mousemove', onMouseMove);\r\n                        resizer.on('mouseup', onMouseUp);\r\n\r\n                        $(document.body).append(resizer);\r\n\r\n                        isMouseDown = true;\r\n                    }\r\n                    else {\r\n                        $(this).css('cursor', 'default');\r\n                    }\r\n                };\r\n\r\n                var bindEvents = function () {\r\n                    setTimeout(function () {\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousemove', onMouseMove);\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousemove', onMouseMove);\r\n                    }, 250);\r\n                };\r\n\r\n                scope.$watch('updateSmartTableColumnResizer', function (newValue) {\r\n                    if (newValue) {\r\n                        bindEvents();\r\n                        scope.updateSmartTableColumnResizer = false;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableColumnSorter', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var isMouseDown, startX, offsetX, isPinnedColumn, clone, mouseDownTimeout;\r\n\r\n                var onMouseMove = function (e) {\r\n                    if (isMouseDown) {\r\n                        $(clone).css({\r\n                            left: e.clientX - offsetX\r\n                        });\r\n                        document.getSelection().removeAllRanges();\r\n                    }\r\n                };\r\n\r\n                var onMouseUp = function (e) {\r\n                    $(clone).off('mousemove', onMouseMove);\r\n                    $(clone).off('mouseup', onMouseUp);\r\n                    $(clone).off('mouseleave', onMouseUp);\r\n                    $(clone).remove();\r\n\r\n                    if (isMouseDown && e.type == 'mouseup') {\r\n                        var startIndex, endIndex;\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').each(function (index, th) {\r\n                            if (angular.isUndefined(startIndex) && startX > $(th).offset().left && startX < $(th).offset().left + $(th).outerWidth(true)) {\r\n                                startIndex = index;\r\n                            }\r\n                            else if (angular.isUndefined(endIndex) && e.clientX > $(th).offset().left && e.clientX < $(th).offset().left + $(th).outerWidth(true)) {\r\n                                endIndex = index;\r\n                            }\r\n                        });\r\n\r\n                        if (angular.isDefined(startIndex) && angular.isDefined(endIndex)) {\r\n                            scope.onColumnSort({\r\n                                startIndex: startIndex,\r\n                                endIndex: endIndex,\r\n                                isPinnedColumn: isPinnedColumn\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    isMouseDown = false;\r\n\r\n                    if (mouseDownTimeout) {\r\n                        clearTimeout(mouseDownTimeout);\r\n                        mouseDownTimeout = undefined;\r\n                    }\r\n                };\r\n\r\n                var onMouseDown = function (e) {\r\n                    if ($(e.target).closest('.smart-table-search-container').length > 0 || e.offsetX >= $(this).outerWidth(true) - 20) {\r\n                        return;\r\n                    }\r\n\r\n                    var $this = this;\r\n\r\n                    mouseDownTimeout = setTimeout(function () {\r\n                        startX = e.clientX;\r\n                        offsetX = e.offsetX;\r\n                        isMouseDown = true;\r\n\r\n                        isPinnedColumn = $(e.target).closest('.smart-table-pinned-column').length > 0;\r\n                        clone = $($this).clone();\r\n\r\n                        $(clone).on('mousemove', onMouseMove);\r\n                        $(clone).on('mouseup', onMouseUp);\r\n                        $(clone).on('mouseleave', onMouseUp);\r\n\r\n                        $(clone).css({\r\n                            position: 'absolute',\r\n                            left: $($this).offset().left,\r\n                            top: $($this).offset().top,\r\n                            width: $($this).outerWidth(true),\r\n                            height: $($this).outerHeight(true),\r\n                            'z-index': 1000,\r\n                            border: 'dotted'\r\n                        });\r\n\r\n                        $(document.body).append(clone);\r\n\r\n                        mouseDownTimeout = undefined;\r\n                    }, 500);\r\n                };\r\n\r\n                var bindEvents = function () {\r\n                    setTimeout(function () {\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousemove', onMouseMove);\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousemove', onMouseMove);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mouseup', onMouseUp);\r\n                    }, 250);\r\n                };\r\n\r\n                scope.$watch('updateSmartTableColumnSorter', function (newValue) {\r\n                    if (newValue) {\r\n                        bindEvents();\r\n                        scope.updateSmartTableColumnSorter = false;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableCell', ['$rootScope', '$compile', '$timeout', 'smartTableUtils', '$filter', '$translate', 'APPCONSTANTS', 'httpService',\r\n\tfunction ($rootScope, $compile, $timeout, smartTableUtils, $filter, $translate, APPCONSTANTS, httpService) {\r\n\t    return {\r\n\t        restrict: 'EA',\r\n\t        replace: true,\r\n\t        link: function (scope, element, attrs) {\r\n\t            var tabIndex, oldCellValue, oldCellClass, tmpCellValue, tmpInputValue, tmpValueForAutoSuggest;\r\n\t            var isInEditMode = false, selectedOption, selectedDate;\r\n\r\n\t            var templateContainer, cellClassElement = $(element.closest('.smart-table-row-cell'));\r\n\t            var hasStopEditCalled = false, isLineNumberAssigned = false, isInputFieldFocused = false, isRenderingToBeSkipped = false, isFocusToBeSkipped = false;\r\n\r\n\t            var appScope = scope.$parent.$parent.$parent;\r\n\t            var smartTableScope = scope.$parent.$parent;\r\n\r\n\t            //\tto watch the rendering changes e.g. sort or filter, col def change\r\n\t            var onCellDataAndColDefChange = scope.$watchGroup(['value', 'column'], function (n) {\r\n\t                tabIndex = (scope.pinnedColumns.length + scope.unpinnedColumns.length) * scope.$parent.$index + scope.$index;\r\n\t                element.attr('id', smartTableScope.smartTableId + '-smart-table-cell-' + tabIndex);\r\n\t                element.attr('tabindex', tabIndex);\r\n\t                oldCellClass = undefined;\r\n\t                init(false, true);\r\n\t                if (angular.isDefined(smartTableScope.pendingFocus) && (smartTableScope.pendingFocus.rowIndex - smartTableScope.offset) == scope.rowIndex && smartTableScope.pendingFocus.columnIndex == scope.columnIndex) {\r\n\t                    element.trigger('focus');\r\n\t                    scope.pendingFocus = undefined;\r\n\t                }\r\n\t            });\r\n\r\n\t            var init = function (isRowDataUpdated, toBeTranslated) {\r\n\t                scope.row = {\r\n\t                    entity: scope.value\r\n\t                };\r\n\r\n\t                if (angular.isDefined(scope.column) && scope.column.uiType == 'editable' && scope.column.attributes.type == 'date' && isRegionalSettingEnabled) {\r\n\t                    scope.column.attributes.format = moment.localeData().longDateFormat('L').toLowerCase().replace(/m/g, 'M');\r\n\t                }\r\n\r\n\t                scope.enableCellEdit = angular.copy(scope.column.enableCellEdit);\r\n\r\n\t                cellClassElement.removeClass('smart-table-row-cell-invalid smart-table-row-cell-disabled smart-table-row-cell-canceled');\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css({\r\n\t                    border: '',\r\n\t                    width: scope.column.width + (scope.column.pinnedLeft ? -2 : 10)\r\n\t                });\r\n\r\n\t                if (!isRowDataUpdated) {\r\n\t                    //\trendering start callback\r\n\t                    if (!smartTableScope.hasSmartTableRenderingStarted) {\r\n\t                        scope.onSmartTableRenderingStart();\r\n\t                        smartTableScope.hasSmartTableRenderingStarted = true;\r\n\t                    }\r\n\r\n\t                    scope.pinned = attrs.pinned == 'true';\r\n\r\n\t                    scope.rowIndex = scope.$parent.$index;\r\n\t                    scope.columnIndex = scope.$index;\r\n\r\n\t                    if (scope.column.autoIncrement && !smartTableScope.useExternalPagination) {\r\n\t                        if (angular.isDefined(scope.row.entity.$$nodeIndex)) {\r\n\t                            updateCell(scope.row.entity, scope.column.field, scope.row.entity.$$nodeIndex + 1);\r\n\t                        }\r\n\t                        else {\r\n\t                            updateCell(scope.row.entity, scope.column.field, scope.row.entity.$$index + 1);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (angular.isDefined(scope.column.attributes) && scope.column.attributes.type == \"autocomplete\" &&\r\n                    angular.isDefined(scope.column.attributes.displayformat) && angular.isDefined(scope.column.field)) {\r\n\t                    tmpValueForAutoSuggest = getObjectValueForAutoSuggest(scope.row.entity, scope.column.field);\r\n\t                    if (angular.isObject(tmpValueForAutoSuggest)) {\r\n\t                        //scope.COL_FIELD = getDisplayData(getObjectValue(scope.row.entity, scope.column.field.split('.')[0]), scope.column.attributes.displayformat);\r\n\t                        scope.COL_FIELD = getDisplayData(tmpValueForAutoSuggest, scope.column.attributes.displayformat);\r\n\t                    }\r\n\t                    else {\r\n\t                        scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                }\r\n\r\n\t                if (angular.isFunction(scope.column.cellClass) /*&& oldCellValue != scope.COL_FIELD*/) {\r\n\t                    var tmpClass = scope.column.cellClass({}, { entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex, value: getObjectValue(scope.row.entity, scope.column.field) });\r\n\t                    if (angular.isObject(tmpClass)) {\r\n\t                        if (cellClassElement.find('.smart-table-row-cell-info-icon').length == 0) {\r\n\t                            var iconTemplate = '';\r\n\t                            switch (tmpClass.type) {\r\n\t                                case 'smart-table-row-cell-info':\r\n\t                                    iconTemplate += '<svg><use xlink:href=\"#icon_Info\"></use></svg>';\r\n\t                                    break;\r\n\t                                default:\r\n\t                                    iconTemplate += '<svg><use xlink:href=\"#icon_Info\"></use></svg>';\r\n\t                                    break;\r\n\t                            }\r\n\t                            cellClassElement.find('.smart-table-cell-text').append('<i class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + tmpClass.message + '\">' + iconTemplate + '</i>');\r\n\t                        }\r\n\t                        cellClassElement.addClass(tmpClass.class);\r\n\t                    }\r\n\t                    else {\r\n\t                        cellClassElement.addClass(tmpClass);\r\n\t                    }\r\n\t                    oldCellClass = tmpClass;\r\n\t                }\r\n\r\n\t                if (angular.isFunction(scope.column.cellEditableCondition)) {\r\n\t                    scope.enableCellEdit = scope.column.cellEditableCondition({ row: scope.row, index: scope.rowIndex, col: { colDef: scope.column, index: scope.columnIndex }, grid: { rows: smartTableScope.smartTableConfig.data } });\r\n\t                }\r\n\r\n\t                updateCellTemplate(true, toBeTranslated);\r\n\r\n\t                if (!isRowDataUpdated) {\r\n\t                    //\trendering done callback\r\n\t                    if (scope.$parent.$last && scope.$last) {\r\n\t                        scope.onSmartTableRenderingDone();\r\n\t                        smartTableScope.hasSmartTableRenderingStarted = false;\r\n\t                    }\r\n\t                }\r\n\t            };\r\n\r\n\t            // init();\r\n\r\n\r\n\t            //  Update date\r\n\t            var updateDate = function (tmpDate) {\r\n\t                if (selectedDate == '/Date(' + ((tmpDate.unix() * 1000) + 43200000) + '+0000)/') {\r\n\t                    return;\r\n\t                }\r\n\t                selectedDate = '/Date(' + ((tmpDate.unix() * 1000) + 43200000) + '+0000)/';\r\n\t                element.find('input').val($filter('smartDateFormat')(selectedDate, scope.column.attributes.format));\r\n\t                if (scope.column.isRegUpdateCol) {\r\n\t                    //\tcell change listener\r\n\t                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: selectedDate });\r\n\t                }\r\n\t            };\r\n\r\n\r\n\t            //  Pop-up listeners\r\n\t            var onPopupOpened, onPopupClosed;\r\n\r\n\t            var addPopupListeners = function () {\r\n\t                var oldCellModel, newCellModel;\r\n\r\n\t                onPopupOpened = $rootScope.$on(\"popupOpened\", function () {\r\n\t                    oldCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                });\r\n\r\n\t                onPopupClosed = $rootScope.$on(\"popupClosed\", function () {\r\n\t                    if (angular.isDefined(scope.column.debounce) && scope.column.debounce > 0) {\r\n\t                        setTimeout(function () {\r\n\t                            newCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                            updateCellValueForPopup(oldCellModel, newCellModel);\r\n\t                        }, scope.column.debounce);\r\n\t                    }\r\n\t                    else {\r\n\t                        newCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                        updateCellValueForPopup(oldCellModel, newCellModel);\r\n\t                    }\r\n\r\n\t                    element.trigger('focus');\r\n\t                });\r\n\t            };\r\n\r\n\r\n\t            var updateCellValueForPopup = function (oldCellModel, newCellModel) {\r\n\t                if (!angular.equals(oldCellModel, newCellModel)) {\r\n\t                    scope.COL_FIELD = newCellModel;\r\n\t                    updateCellTemplate(true, true);\r\n\t                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }\r\n\t            };\r\n\r\n\r\n\t            var removePopupListeners = function () {\r\n\t                angular.isFunction(onPopupOpened) && onPopupOpened();\r\n\t                angular.isFunction(onPopupClosed) && onPopupClosed();\r\n\t            };\r\n\r\n\t            function triggerTaxesPopup() {\r\n\t                element.trigger(\"blur\");\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t            }\r\n\t            function triggerAdhocPopup() {\r\n\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t                event.stopPropagation();\r\n\t                event.preventDefault();\r\n\t            }\r\n\t            function triggerSupplierCardPopup() {\r\n\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t                event.stopPropagation();\r\n\t                event.preventDefault();\r\n\t            }\r\n\t            var updateCellTemplate = function (toBeFiltered, toBeTranslated) {\r\n\t                if (angular.isFunction(scope.column.cellTemplate)) {\r\n\t                    tmpCellValue = scope.column.cellTemplate({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                    if (scope.column.uiType == 'popup' && angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\t                    element.find('.smart-table-cell-template').html((scope.column.uiType == 'popup' ? '<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' : '<span>') + tmpCellValue + (scope.column.uiType == 'popup' ? '</a>' : '</span>'));\r\n\t                    element.parent().attr('title', tmpCellValue);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (scope.column.uiType == 'editable') {\r\n\t                    switch (scope.column.attributes.type) {\r\n\t                        case 'number':\r\n\t                            if (toBeFiltered && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        case 'date':\r\n\t                            if (toBeFiltered) {\r\n\t                                scope.COL_FIELD = scope.COL_FIELD == '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : $filter('smartDateFormat')(scope.COL_FIELD, scope.column.attributes.format);\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        default:\r\n\t                            if (toBeTranslated && scope.column.enableTranslation) {\r\n\t                                scope.COL_FIELD = $translate.instant(scope.COL_FIELD);\r\n\t                            }\r\n\t                            if (toBeFiltered && angular.isDefined(scope.column.attributes.maxlength) && angular.isDefined(scope.COL_FIELD)) {\r\n\t                                scope.COL_FIELD = scope.COL_FIELD.substr(0, scope.column.attributes.maxlength);\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                    tmpCellValue = (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD);\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                    if (scope.column.uiType == \"editable\" && scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Common_AddAdhocLocation\") + '\"><svg><use xlink:href=\"#icon_Location\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerAdhocPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\r\n\t                    }\r\n\t                    else if (scope.column.uiType == \"editable\" && scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Req_SupplierName\") + '\"><svg><use xlink:href=\"#icon_ContactCard\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerSupplierCardPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\r\n\t                    }\r\n\t                    if (scope.row.entity.RequisitionSource != undefined && scope.row.entity.RequisitionSource == 3 && scope.column.uiType == \"editable\" && scope.column.Changereq && scope.column.Changereq === \"Changereq\") {\r\n\t                        if (scope.row.entity.IsAddedFromRequistion != undefined) {\r\n\t                            if (scope.row.entity.IsAddedFromRequistion == true) {\r\n\t                            }\r\n\t                            else {\r\n\t                                var icon = $('<i  style=\"float: right\" class=\"icon small red-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"\"><svg><use xlink:href=\"#icon_AddToDefault \"></use></svg></i>')\r\n\t                                element.find('.smart-table-cell-template').append(icon);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else if (scope.column.uiType == 'popup') {\r\n\t                    tmpCellValue = (scope.COL_FIELD === '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null) ? (scope.column.placeHolder ? scope.column.placeHolder : $translate.instant('P2P_Common_Add')) : scope.COL_FIELD;\r\n\t                    if (angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\t                    element.find('.smart-table-cell-template').html('<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' + tmpCellValue + '</a>');\r\n\t                }\r\n\t                else if (scope.column.uiType == 'dropdown') {\r\n\t                    tmpCellValue = toBeTranslated && scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : scope.COL_FIELD;\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                }\r\n\t                else if (scope.column.uiType == 'taxesPopup') {\r\n\t                    tmpCellValue = scope.row.entity[scope.column.field];\r\n\r\n\t                    if (angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\r\n\t                    element.find('.smart-table-cell-template').html('<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' + tmpCellValue + '</a>');\r\n\t                    if (scope.row.entity.isTaxExempt) {\r\n\t                        var taxExempt = $('<a>' + $translate.instant(\"P2P_Common_Exempt\") + '</a>');\r\n\t                        taxExempt.mousedown(function () {\r\n\t                            triggerTaxesPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').html(taxExempt);\r\n\t                    }\r\n\t                    var icon = $('<i style=\"float: right\" class=\"icon iconSmall tooltipped\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"ADD\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i>')\r\n\t                    icon.mousedown(function () {\r\n\t                        triggerTaxesPopup();\r\n\t                    })\r\n\t                    element.find('.smart-table-cell-template').append(icon);\r\n\t                    element.parent().attr('title', tmpCellValue);\r\n\t                }\r\n\t                else {\r\n\t                    if (toBeFiltered && scope.column.attributes && scope.column.attributes.type == 'number' && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                        scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                    }\r\n\t                    tmpCellValue = toBeTranslated && scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD);\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                }\r\n\t                element.parent().attr('title', tmpCellValue);\r\n\t            };\r\n\r\n\r\n\t            var getEditableTemplate = function () {\r\n\t                var template = '<div>';\r\n\t                switch (scope.column.uiType) {\r\n\t                    case 'editable':\r\n\t                        switch (scope.column.attributes.type) {\r\n\t                            case 'number':\r\n\t                                tmpInputValue = parseFloat(getObjectValue(scope.row.entity, scope.column.field));\r\n\r\n\t                                if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                    tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1])\r\n\t                                }\r\n\r\n\t                                template += '<input type=\"number\" autocomplete=\"off\" value=\"' + (tmpInputValue == 0 ? '' : tmpInputValue) + '\">';\r\n\t                                break;\r\n\r\n\t                            case 'date':\r\n\t                                template += '<input type=\"text\" autocomplete=\"off\" value=\"' + (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD) + '\" placeholder=\"' + (scope.column.attributes.format ? (scope.column.attributes.format).toUpperCase() : 'MM/DD/YYYY') + '\">';\r\n\t                                break;\r\n\r\n\t                            default:\r\n\t                                template += '<input type=\"text\" autocomplete=\"off\" value=\"' + (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD) + '\"' + (angular.isDefined(scope.column.attributes.maxlength) ? 'maxlength=\"' + scope.column.attributes.maxlength : '\"') + '>';\r\n\t                                break;\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'dropdown':\r\n\t                    case 'select':\r\n\t                        template += '<select style=\"display: block !important;\">';\r\n\t                        for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                            template += '<option ' + ($translate.instant(scope.column.attributes.options[i][scope.column.attributes.dataKey] + '') == $translate.instant(scope.COL_FIELD + '') ? 'selected' : '') + ' value=\"' + $translate.instant(scope.column.attributes.options[i][scope.column.attributes.idKey] + '') + '\">' + $translate.instant(scope.column.attributes.options[i][scope.column.attributes.dataKey] + '') + '</option>';\r\n\t                        }\r\n\t                        template += '</select>';\r\n\t                        break;\r\n\r\n\t                        //case 'popup':\r\n\t                        //    template += '<div><a>' + ((scope.COL_FIELD === '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null) ? (scope.column.placeHolder ? scope.column.placeHolder : 'ADD') : scope.COL_FIELD) + '</a></div>';\r\n\t                        //    break;\r\n\t                }\r\n\t                return template + '</div>'\r\n\t            };\r\n\r\n\r\n\t            var onElementKeyDown = function (e) {\r\n\t                window.lastKeyPressed = e.keyCode;\r\n\t                switch (e.keyCode) {\r\n\t                    //\tspace key\r\n\t                    case 32:\r\n\t                        if (scope.column.uiType == 'editable' && element.find('input').length > 0) {\r\n\t                            if (element.find('input:focus').length > 0) {\r\n\t                                isInputFieldFocused = true;\r\n\t                            }\r\n\t                            if (scope.column.attributes.type == 'date') {\r\n\t                                element.find('input').focus();\r\n\t                                e.stopPropagation();\r\n\t                                return false;\r\n\t                            }\r\n\t                            else {\r\n\t                                if (!isInputFieldFocused) {\r\n\t                                    isInputFieldFocused = true;\r\n\r\n\t                                    //if (element.find('input:focus').length == 0) {\r\n\t                                    tmpInputValue = element.find('input').val();\r\n\t                                    element.find('input').focus().val('').val(tmpInputValue);\r\n\t                                    //if (element.find('input').val().trim().length == 0) {\r\n\t                                    e.stopPropagation();\r\n\t                                    return false;\r\n\t                                    //}\r\n\t                                    //}\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'dropdown' && element.find('select').length > 0) {\r\n\t                            element.find('select').focus();\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'popup' && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }) && scope.column.isRegClickCol) {\r\n\t                            smartTableUtils.debounce.add(function () {\r\n\t                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                                //\tcell click listener\r\n\t                                angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                            }, 100);\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        else {\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                        //\tarrow keys\r\n\t                    case 37:\r\n\t                        if (!isInputFieldFocused) {\r\n\t                            if (element.find('input:focus').length > 0) {\r\n\t                                isInputFieldFocused = true;\r\n\t                                return;\r\n\t                            }\r\n\r\n\t                            if (scope.rowIndex == 0 && scope.columnIndex == 0) { }\r\n\t                            else {\r\n\t                                $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) - 1)).focus();\r\n\t                                scope.stopEdit();\r\n\t                            }\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                    case 39:\r\n\t                    case 9:\r\n\t                        if (e.keyCode == 39) {\r\n\t                            if (!isInputFieldFocused) {\r\n\t                                if (element.find('input:focus').length > 0) {\r\n\t                                    isInputFieldFocused = true;\r\n\t                                    return;\r\n\t                                }\r\n\r\n\t                                if (scope.$parent.$last && scope.$last) {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-0').focus();\r\n\t                                }\r\n\t                                else {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) + 1)).focus();\r\n\t                                }\r\n\t                                scope.stopEdit();\r\n\t                                e.stopPropagation();\r\n\t                                return false;\r\n\t                            }\r\n\t                        }\r\n\t                        else {\r\n\t                            if (e.shiftKey) {\r\n\t                                if (scope.rowIndex == 0 && scope.columnIndex == 0) {\r\n\t                                }\r\n\t                                else {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) - 1)).focus();\r\n\t                                    scope.stopEdit();\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) + 1)).focus();\r\n\t                                scope.stopEdit();\r\n\t                            }\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                    case 38:\r\n\t                        // if(!$(e.target).is('select')) {\r\n\t                        if (scope.rowIndex > 0) {\r\n\t                            var cellIndexFocus = parseInt(tabIndex) - (smartTableScope.pinnedColumns.length + smartTableScope.unpinnedColumns.length);\r\n\t                            $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + cellIndexFocus).focus();\r\n\t                            scope.stopEdit();\r\n\t                        }\r\n\t                        e.stopPropagation();\r\n\t                        return false;\r\n\t                        // }\r\n\t                        break;\r\n\t                    case 40:\r\n\t                    case 13:\r\n\t                        // if(!$(e.target).is('select')) {\r\n\t                        if (scope.rowIndex < smartTableScope.currentPageDataLength - 1) {\r\n\t                            var cellIndexFocus = parseInt(tabIndex) + (smartTableScope.pinnedColumns.length + smartTableScope.unpinnedColumns.length);\r\n\t                            $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + cellIndexFocus).focus();\r\n\t                            scope.stopEdit();\r\n\t                        }\r\n\t                        e.stopPropagation();\r\n\t                        return false;\r\n\t                        // }\r\n\t                        break;\r\n\t                        //  escape key\r\n\t                    case 27:\r\n\t                        if ((scope.column.uiType == 'editable' || scope.column.uiType == 'dropdown') && (scope.column.attributes.type != 'autocomplete' || (scope.column.attributes.type == 'autocomplete' &&\r\n                            scope.column.isFreeText && !selectedOption))) {\r\n\t                            isInputFieldFocused = false;\r\n\r\n\t                            if (scope.column.attributes.type == 'number') {\r\n\t                                tmpInputValue = parseFloat(oldCellValue);\r\n\t                                if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                    tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1]);\r\n\t                                }\r\n\t                                element.find('input').val(tmpInputValue == 0 ? '' : tmpInputValue).blur();\r\n\t                                if (isRegionalSettingEnabled) {\r\n\t                                    try {\r\n\t                                        element.find('input').autoNumeric('get');\r\n\t                                    }\r\n\t                                    catch (e) { }\r\n\t                                }\r\n\t                                updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                            }\r\n\t                            else if (scope.column.attributes.type == 'date') {\r\n\t                                element.find('input').val($filter('smartDateFormat')(oldCellValue, scope.column.attributes.format)).blur();\r\n\t                                updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                                selectedDate = undefined;\r\n\t                            }\r\n\t                            else {\r\n\t                                if (scope.column.uiType == 'dropdown') {\r\n\t                                    var tmpPreviousSelectedDropdownObj;\r\n\t                                    for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                        if (oldCellValue == scope.column.attributes.options[i][scope.column.attributes.dataKey]) {\r\n\t                                            tmpPreviousSelectedDropdownObj = scope.column.attributes.options[i];\r\n\t                                            updateCell(scope.row.entity, scope.column.field, scope.column.attributes.options[i]);\r\n\t                                            break;\r\n\t                                        }\r\n\t                                    }\r\n\t                                    element.find('select').val(tmpPreviousSelectedDropdownObj[scope.column.attributes.idKey]).blur();\r\n\t                                }\r\n\t                                else {\r\n\t                                    element.find('input').val(oldCellValue).blur();\r\n\t                                    updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                                }\r\n\t                            }\r\n\r\n\t                            isRenderingToBeSkipped = true;\r\n\t                            isFocusToBeSkipped = true;\r\n\t                            element.focus();\r\n\r\n\t                            if (scope.column.attributes.type == 'number' && scope.column.isRegUpdateCol) {\r\n\t                                smartTableUtils.debounce.add(function () {\r\n\t                                    //\tcell change listener\r\n\t                                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                    smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                }, 250, false);\r\n\t                            }\r\n\t                            else if (scope.column.attributes.type == 'date') {\r\n\t                                if (scope.column.isRegUpdateCol) {\r\n\t                                    //\tcell change listener\r\n\t                                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: selectedDate });\r\n\t                                }\r\n\t                            }\r\n\t                            else if (scope.column.uiType == 'dropdown') {\r\n\t                                // Options change listener\r\n\t                                angular.isFunction(smartTableScope.listeners.optionSelect) && smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpPreviousSelectedDropdownObj });\r\n\t                            }\r\n\t                        }\r\n\t                        break;\r\n\t                    default:\r\n\t                        //  disable focus on function and filter keys\r\n\t                        if ((e.keyCode >= 112 && e.keyCode <= 123) || [16, 20, 255, 17, 91, 18, 33, 34, 144, 45, 19, 145, 93, 173, 174, 175].indexOf(e.keyCode) > -1) {\r\n\t                            e.preventDefault();\r\n\t                            return false;\r\n\t                        }\r\n\t                        if ((scope.column.uiType == 'editable' || scope.column.uiType == 'taxesPopup') && element.find('input').length > 0) {\r\n\t                            //  HOME and END keys\r\n\t                            if (!isInputFieldFocused && [35, 36].indexOf(e.keyCode) > -1) {\r\n\t                                e.preventDefault();\r\n\t                                return false;\r\n\t                            }\r\n\t                            if (!isInputFieldFocused) {\r\n\t                                isInputFieldFocused = true;\r\n\r\n\t                                if (element.find('input:focus').length == 0) {\r\n\t                                    //tmpInputValue = element.find('input').val();\r\n\t                                    //element.find('input').focus().val('').val(tmpInputValue);\r\n\t                                    element.find('input').focus().val('');\r\n\r\n\t                                    if (scope.column.attributes.type == 'number' && !isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        var arrDecimalSplits = element.find('input').val().split('.');\r\n\r\n\t                                        if (arrDecimalSplits.length > 1) {\r\n\t                                            if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                                e.preventDefault();\r\n\t                                                return false;\r\n\t                                            }\r\n\t                                        }\r\n\t                                        else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                            e.preventDefault();\r\n\t                                            return false;\r\n\t                                        }\r\n\t                                    }\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'dropdown' && element.find('select').length > 0) {\r\n\t                            element.find('select').focus();\r\n\t                        }\r\n\t                        if (e.keyCode == 8 && element.find('input').length == 0) {\r\n\t                            e.preventDefault();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                }\r\n\t            };\r\n\r\n\t            scope.onElementKeyDown = onElementKeyDown;\r\n\r\n\t            element.on('keydown', onElementKeyDown);\r\n\r\n\r\n\t            scope.stopEdit = function (isWindowClickFired) {\r\n\t                isRenderingToBeSkipped = false;\r\n\t                isFocusToBeSkipped = false;\r\n\r\n\t                //  prevent stop edit \r\n\t                if (isWindowClickFired && scope.column.uiType == 'popup') {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                //\tscroll container to left\r\n\t                if (scope.$last && window.lastKeyPressed != 37 && !window.isSmartTableCellClicked && (window.shiftKey && window.lastKeyPressed == 9)) {\r\n\t                    $(element.closest('.smart-table-unpinned-container')).scrollLeft(0);\r\n\t                }\r\n\r\n\t                if ((scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup' || (scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") || (scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\")) && scope.column.isRegClickCol) {\r\n\t                    removePopupListeners();\r\n\t                }\r\n\r\n\t                if (hasStopEditCalled) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                isInEditMode = false;\r\n\t                isInputFieldFocused = false;\r\n\r\n\t                //\tIf cell is editable\r\n\t                if (scope.column.enableCellEdit && (angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }))) {\r\n\t                    switch (scope.column.uiType) {\r\n\t                        case 'editable':\r\n\t                            switch (scope.column.attributes.type) {\r\n\t                                case 'number':\r\n\t                                    if (isRegionalSettingEnabled) {\r\n\t                                        try {\r\n\t                                            scope.COL_FIELD = element.find('input').autoNumeric('get') * 1;\r\n\t                                        }\r\n\t                                        catch (error) {\r\n\t                                            console.log(error);\r\n\t                                            console.log(\"Error in number get. \" + scope.column.field);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = parseFloat($(element.find('input')).val());\r\n\t                                    }\r\n\t                                    scope.COL_FIELD = isNaN(scope.COL_FIELD) ? 0 : scope.COL_FIELD;\r\n\t                                    updateCell(scope.row.entity, scope.column.field, angular.copy(scope.COL_FIELD));\r\n\t                                    if (angular.isDefined(scope.column.attributes) && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                                    }\r\n\t                                    break;\r\n\r\n\t                                case 'autocomplete':\r\n\t                                    if (element.find('input').devbridgeAutocomplete()) {\r\n\t                                        element.find('input').devbridgeAutocomplete().dispose();\r\n\t                                    }\r\n\t                                    if (selectedOption) {\r\n\t                                        scope.COL_FIELD = angular.isDefined(scope.column.attributes.displayformat) ? getDisplayData(selectedOption, scope.column.attributes.displayformat) : $(element.find('input')).val();\r\n\t                                        updateCell(scope.row.entity, scope.column.field, selectedOption);\r\n\t                                        selectedOption = undefined;\r\n\t                                    }\r\n\t                                    else if (scope.column.isFreeText) {\r\n\t                                        scope.COL_FIELD = $(element.find('input')).val();\r\n\t                                        updateCell(scope.row.entity, scope.column.field, scope.COL_FIELD);\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                                    }\r\n\t                                    break;\r\n\r\n\t                                case 'date':\r\n\t                                    if (element.find('input').daterangepicker()) {\r\n\t                                        element.find('input').daterangepicker().daterangepicker();\r\n\t                                    }\r\n\t                                    if (selectedDate == '') {\r\n\t                                        scope.COL_FIELD = '';\r\n\t                                        updateCell(scope.row.entity, scope.column.field, null);\r\n\t                                    }\r\n\t                                    else if (angular.isDefined(selectedDate) && selectedDate.indexOf('Date') > -1) {\r\n\t                                        scope.COL_FIELD = $filter('smartDateFormat')(selectedDate, scope.column.attributes.format);\r\n\t                                        updateCell(scope.row.entity, scope.column.field, selectedDate);\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = $filter('smartDateFormat')(getObjectValue(scope.row.entity, scope.column.field), scope.column.attributes.format);\r\n\t                                    }\r\n\t                                    selectedDate = undefined;\r\n\t                                    break;\r\n\r\n\t                                default:\r\n\t                                    scope.COL_FIELD = $(element.find('input')).val();\r\n\t                                    updateCell(scope.row.entity, scope.column.field, scope.COL_FIELD);\r\n\t                                    break;\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        case 'dropdown':\r\n\t                        case 'select':\r\n\t                            for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                if ($(element.find('select')).val() == scope.column.attributes.options[i][scope.column.attributes.idKey]) {\r\n\t                                    scope.COL_FIELD = scope.column.attributes.options[i][scope.column.attributes.dataKey];\r\n\t                                    updateCell(scope.row.entity, scope.column.field, scope.column.attributes.options[i]);\r\n\t                                    break;\r\n\t                                }\r\n\t                            }\r\n\t                            scope.COL_FIELD = scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : scope.COL_FIELD;\r\n\t                            break;\r\n\t                        case 'taxesPopup':\r\n\t                            if (isRegionalSettingEnabled) {\r\n\t                                try {\r\n\t                                    if (element.find('input').length > 0) {\r\n\t                                        scope.COL_FIELD = element.find('input').autoNumeric('get') * 1;\r\n\t                                    }\r\n\t                                }\r\n\t                                catch (error) {\r\n\t                                    console.log(error);\r\n\t                                    console.log(\"Error in number get. \" + scope.column.field);\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                scope.COL_FIELD = parseFloat($(element.find('input')).val());\r\n\t                            }\r\n\t                            scope.COL_FIELD = isNaN(scope.COL_FIELD) ? 0 : scope.COL_FIELD;\r\n\t                            updateCell(scope.row.entity, scope.column.field, angular.copy(scope.COL_FIELD));\r\n\t                            if (angular.isDefined(scope.column.attributes) && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                    updateCellTemplate();\r\n\t                }\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css('border', '');\r\n\t                templateContainer && templateContainer.empty();\r\n\r\n\t                if (scope.column.enableCellEdit && oldCellValue != scope.COL_FIELD) {\r\n\t                    if (oldCellValue != scope.COL_FIELD) {\r\n\t                        angular.isFunction(smartTableScope.listeners.afterCellEdit) && smartTableScope.listeners.afterCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\r\n\t                        smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                    }\r\n\r\n\t                    //\tend cell edit listener\r\n\t                    angular.isFunction(smartTableScope.listeners.endCellEdit) && smartTableScope.listeners.endCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }\r\n\r\n\t                if (scope.column.enableCellEdit && (scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup')) {\r\n\t                    smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                }\r\n\r\n\t                hasStopEditCalled = true;\r\n\t            };\r\n\r\n\r\n\t            var onFocus = function (e) {\r\n\t                if (isRenderingToBeSkipped) {\r\n\t                    if (element.find('input').length > 0 && !isFocusToBeSkipped) {\r\n\t                        element.find('input').focus();\r\n\t                    }\r\n\t                    return;\r\n\t                }\r\n\r\n\t                oldCellValue = scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : (scope.column.uiType == 'editable' && (scope.column.attributes.type == 'date' || scope.column.attributes.type == 'number') ? getObjectValue(scope.row.entity, scope.column.field) : scope.COL_FIELD);\r\n\r\n\t                //  Prevent from scrolling to left\r\n\t                if (scope.$last) {\r\n\t                    window.lastKeyPressed = 37;\r\n\t                }\r\n\r\n\t                if (window.lastActiveCellScope) {\r\n\t                    window.lastActiveCellScope.stopEdit();\r\n\t                    window.lastActiveCellScope = undefined;\r\n\t                }\r\n\r\n\t                window.lastActiveCellScope = scope;\r\n\r\n\t                hasStopEditCalled = false;\r\n\r\n\t                //\tscroll container to left\r\n\t                if (smartTableScope.pinnedColumns.length == scope.$index) {\r\n\t                    setTimeout(function () {\r\n\t                        $(element.closest('.smart-table-unpinned-container')).scrollLeft(0);\r\n\t                    }, 250);\r\n\t                }\r\n\r\n\t                if ((scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup' || (scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") || (scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\")) && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }) && scope.column.isRegClickCol) {\r\n\t                    addPopupListeners();\r\n\t                }\r\n\r\n\t                window.isSmartTableCellClicked = false;\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css('border', '1px solid ' + (cellClassElement.hasClass('smart-table-row-cell-invalid') ? 'red' : '#159dfc'));\r\n\t                if (isInEditMode || !scope.column.enableCellEdit || (angular.isFunction(scope.column.cellEditableCondition) && !scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }))) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                //\tBegin cell edit listener\r\n\t                angular.isFunction(smartTableScope.listeners.beginCellEdit) && smartTableScope.listeners.beginCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\r\n\t                if (scope.column.uiType != 'popup') {\r\n\t                    $(element.find('.smart-table-cell-template')).html(getEditableTemplate());\r\n\t                    if (scope.column.uiType == \"editable\" && scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Common_AddAdhocLocation\") + '\"><svg><use xlink:href=\"#icon_Location\"></use></svg></i>');\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerAdhocPopup();\r\n\t                        });\r\n\t                        var inputvalue = $(element.find('.smart-table-cell-template')).html(getEditableTemplate()).css(\"width\", $(element.find('.smart-table-cell-template')).parent().width() - 40 + \"px\");\r\n\t                        $(element.find('.smart-table-cell-template')).append(inputvalue).append(icon);\r\n\t                    }\r\n\t                    else if (scope.column.uiType == \"editable\" && scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Req_SupplierName\") + '\"><svg><use xlink:href=\"#icon_ContactCard\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerSupplierCardPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (scope.column.uiType == 'taxesPopup') {\r\n\t                    var tmpInputValue = parseFloat(getObjectValue(scope.row.entity, scope.column.field));\r\n\t                    if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                        tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1]);\r\n\t                    }\r\n\t                    var input = $('<input  type=\"number\" autocomplete=\"off\" value=\"' + (tmpInputValue == 0 ? '' : tmpInputValue) + '\">');\r\n\t                    if (scope.row.entity.isTaxExempt) {\r\n\t                        input = $('<a>' + $translate.instant(\"P2P_Common_Exempt\") + '</a>')\r\n\t                        input.mousedown(function () {\r\n\t                            triggerTaxesPopup();\r\n\r\n\t                        });\r\n\t                    }\r\n\t                    var icon = $('<i style=\"float: right\" class=\"icon iconSmall tooltipped\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i>');\r\n\t                    icon.mousedown(function () {\r\n\t                        triggerTaxesPopup();\r\n\t                    });\r\n\t                    input.css(\"width\", $(element.find('.smart-table-cell-template')).parent().width() - 40 + \"px\");\r\n\t                    $(element.find('.smart-table-cell-template')).html('').append(input).append(icon);\r\n\t                }\r\n\r\n\t                switch (scope.column.uiType) {\r\n\t                    case 'editable':\r\n\t                        switch (scope.column.attributes.type) {\r\n\t                            case 'number':\r\n\t                                setTimeout(function () {\r\n\t                                    var tmpVal;\r\n\t                                    if (isRegionalSettingEnabled) {\r\n\t                                        try {\r\n\t                                            element.find('input').attr('type', 'text');\r\n\t                                            var mDec = scope.column.attributes.minmaxprecisionfilter != undefined && scope.column.attributes.minmaxprecisionfilter.split(':')[1] != '' ? scope.column.attributes.minmaxprecisionfilter.split(':')[1] : MaxPrecessionValue;\r\n\t                                            element.find('input').autoNumeric('init', { mDec: mDec });\r\n\t                                        }\r\n\t                                        catch (error) {\r\n\t                                            console.log(\"Error in number init. \" + scope.column.field);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        var arrDecimalSplits;\r\n\r\n\t                                        element.find('input').on('keydown', function (e) {\r\n\t                                            arrDecimalSplits = $(this).val().split('.');\r\n\r\n\t                                            if (arrDecimalSplits.length > 1) {\r\n\t                                                if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                                    e.preventDefault();\r\n\t                                                    return false;\r\n\t                                                }\r\n\t                                            }\r\n\t                                            else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                                e.preventDefault();\r\n\t                                                return false;\r\n\t                                            }\r\n\t                                        });\r\n\t                                    }\r\n\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        if (isRegionalSettingEnabled) {\r\n\t                                            try {\r\n\t                                                tmpVal = $(this).autoNumeric('get') * 1;\r\n\t                                            }\r\n\t                                            catch (error) {\r\n\t                                                console.log(\"Error in number format. \" + scope.column.field);\r\n\t                                            }\r\n\t                                        }\r\n\t                                        else {\r\n\t                                            if (tmpVal == $(this).val()) {\r\n\t                                                return;\r\n\t                                            }\r\n\t                                            tmpVal = $(this).val();\r\n\t                                        }\r\n\r\n\t                                        if (scope.column.isRegUpdateCol) {\r\n\t                                            smartTableUtils.debounce.add(function () {\r\n\t                                                updateCell(scope.row.entity, scope.column.field, parseFloat(tmpVal));\r\n\t                                                //\tcell change listener\r\n\t                                                angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                                smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                            }, 250, false);\r\n\t                                        }\r\n\t                                    });\r\n\t                                });\r\n\t                                break;\r\n\r\n\t                            case 'autocomplete':\r\n\t                                var filterKeys = scope.column.attributes.filterkeys ? scope.column.attributes.filterkeys : ['title'];\r\n\t                                var optionFormat = scope.column.attributes.optionformat ? scope.column.attributes.optionformat : '{title}';\r\n\t                                var displayFormat = scope.column.attributes.displayformat ? scope.column.attributes.displayformat + '' : '{title}';\r\n\r\n\t                                setTimeout(function () {\r\n\t                                    var serviceObj = scope.column.attributes.serviceObj;\r\n\t                                    var tmpVal = oldCellValue;\r\n\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        if (angular.isDefined(tmpVal) && $(this).val().trim().length > 0 && tmpVal.trim() == $(this).val().trim()) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        tmpVal = $(this).val();\r\n\r\n\t                                        if ([37, 38, 39, 40].indexOf(e.keyCode) > -1) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        //\tcell change listener\r\n\t                                        angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal });\r\n\r\n\t                                        if (angular.isDefined(tmpVal) && tmpVal.trim().length == 0 && !scope.column.attributes.populateListOnFocus) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        smartTableUtils.debounce.add(function () {\r\n\t                                            if (serviceObj != undefined) {\r\n\t                                                var req = {\r\n\t                                                    method: serviceObj.method === \"POST\" ? \"POST\" : \"GET\",\r\n\t                                                    url: serviceObj.url,\r\n\t                                                    params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", tmpVal)),\r\n\t                                                    timeout: 120000,\r\n\t                                                    headers: {\r\n\t                                                        \"Content-Type\": \"application/json\",\r\n\t                                                        \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n\t                                                    }\r\n\t                                                };\r\n\t                                                if (req.method == \"POST\") {\r\n\t                                                    req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", tmpVal));\r\n\t                                                    delete req.params;\r\n\t                                                }\r\n\t                                                httpService.directhttp(req).then(function (response) {\r\n\t                                                    if (serviceObj.CallbackObj) {\r\n\t                                                        response = serviceObj.CallbackObj(response, scope.column.field)\r\n\t                                                    }\r\n\r\n\t                                                    var resp = [];\r\n\r\n\t                                                    if (typeof response === \"string\") {\r\n\t                                                        response = JSON.parse(response);\r\n\t                                                    }\r\n\r\n\t                                                    if (serviceObj.isFlatArray) {\r\n\t                                                        _.each(response, function (x, index) {\r\n\t                                                            var obj = {};\r\n\t                                                            obj[\"name\"] = x;\r\n\t                                                            obj[\"code\"] = x;\r\n\t                                                            resp.push(obj);\r\n\t                                                        });\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        _.each(response, function (obj) {\r\n\t                                                            var mapperObj = (serviceObj.isObjectArray) ? obj : {};\r\n\t                                                            _.each(serviceObj.mapper, function (mapper) {\r\n\t                                                                var mapperstri = '';\r\n\t                                                                if (angular.isArray(mapper['toBeMapped'])) {\r\n\t                                                                    var mapperkey = mapper.key;\r\n\t                                                                    _.each(mapper['toBeMapped'], function (res) {\r\n\t                                                                        if (mapperkey != undefined && mapperkey == 'email' && res == 'EmailAddress') {\r\n\t                                                                            mapperstri += \"</br>\" + obj[res] + \" \";\r\n\t                                                                        }\r\n\t                                                                        else {\r\n\t                                                                            mapperstri += obj[res] + \" \";\r\n\t                                                                        }\r\n\t                                                                    });\r\n\t                                                                    mapperstri.trim();\r\n\t                                                                }\r\n\t                                                                else {\r\n\t                                                                    mapperstri = obj[mapper['toBeMapped']];\r\n\t                                                                }\r\n\t                                                                mapperObj[mapper['key']] = mapperstri;\r\n\t                                                            });\r\n\t                                                            _.each(serviceObj.staticValues, function (item) {\r\n\t                                                                mapperObj[item['key']] = item['value'];\r\n\t                                                            });\r\n\t                                                            resp.push(mapperObj);\r\n\t                                                        });\r\n\t                                                    }\r\n\r\n\t                                                    if (element.find('input').devbridgeAutocomplete()) {\r\n\t                                                        element.find('input').devbridgeAutocomplete().setLookup(getFormattedData(resp, displayFormat));\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        element.find('input').devbridgeAutocomplete({\r\n\t                                                            filterKeys: filterKeys,\r\n\t                                                            optionFormat: optionFormat,\r\n\t                                                            displayFormat: displayFormat,\r\n\t                                                            lookup: getFormattedData(resp, displayFormat),\r\n\t                                                            width: scope.column.width,\r\n\t                                                            minChars: scope.column.attributes.populateListOnFocus ? 0 : 1,\r\n\t                                                            onSelect: function (suggestion) {\r\n\t                                                                selectedOption = suggestion;\r\n\t                                                                isRenderingToBeSkipped = true;\r\n\t                                                                element.find('input').devbridgeAutocomplete().setLookup([]);\r\n\t                                                                //\tOption select listener\r\n\t                                                                angular.isFunction(smartTableScope.listeners.optionSelect) && smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal, option: selectedOption });\r\n\t                                                                element.trigger('focus');\r\n\t                                                            }\r\n\t                                                        });\r\n\t                                                    }\r\n\r\n\t                                                    if (resp.length == 1 && scope.column.attributes.populateListOnFocus) {\r\n\t                                                        try {\r\n\t                                                            element.find('input').devbridgeAutocomplete().onSelect(0);\r\n\t                                                        }\r\n\t                                                        catch (e) { }\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        //\tOptions change listener\r\n\t                                                        angular.isFunction(smartTableScope.listeners.optionsChange) && smartTableScope.listeners.optionsChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal, options: response });\r\n\t                                                    }\r\n\r\n\t                                                }, function () {\r\n\t                                                });\r\n\t                                            }\r\n\t                                        }, 250, false);\r\n\t                                    });\r\n\r\n\t                                    if (scope.column.attributes.populateListOnFocus) {\r\n\t                                        var triggerKeyUpOnfocus = function () {\r\n\t                                            if (!isInputFieldFocused) {\r\n\t                                                var tmpEvent = $.Event(\"keyup\", {\r\n\t                                                    keyCode: 32\r\n\t                                                });\r\n\t                                                element.find('input').trigger(tmpEvent);\r\n\t                                                isInputFieldFocused = true;\r\n\t                                            }\r\n\t                                        };\r\n\r\n\t                                        element.find('input').on('click', function (e) {\r\n\t                                            triggerKeyUpOnfocus();\r\n\t                                        });\r\n\r\n\t                                        if (element.find('input:focus').length > 0) {\r\n\t                                            triggerKeyUpOnfocus();\r\n\t                                        }\r\n\t                                    }\r\n\t                                });\r\n\t                                break;\r\n\r\n\t                            case 'date':\r\n\t                                setTimeout(function () {\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        selectedDate = $(this).val();\r\n\t                                    });\r\n\r\n\t                                    element.find('input').daterangepicker({\r\n\t                                        singleDatePicker: true,\r\n\t                                        showDropdowns: true,\r\n\t                                        locale: {\r\n\t                                            format: scope.column.attributes.format ? (scope.column.attributes.format).toUpperCase() : 'MM/DD/YYYY'\r\n\t                                        },\r\n\t                                        minDate: scope.column.attributes.min ? scope.column.attributes.min : null,\r\n\t                                        maxDate: scope.column.attributes.max ? scope.column.attributes.max : null,\r\n\t                                        autoUpdateInput: false\r\n\t                                    }, function (startDate, endDate) {\r\n\t                                        updateDate(startDate);\r\n\t                                    }).on('apply.daterangepicker', function (e, picker) {\r\n\t                                        updateDate(picker.startDate);\r\n\t                                    });\r\n\t                                });\r\n\t                                break;\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'dropdown':\r\n\t                        if (angular.isFunction(smartTableScope.listeners.optionSelect)) {\r\n\t                            setTimeout(function () {\r\n\t                                element.find('select').on('change', function () {\r\n\t                                    for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                        if ($(this).val() == scope.column.attributes.options[i][scope.column.attributes.idKey] + '') {\r\n\t                                            // Options change listener\r\n\t                                            smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: scope.column.attributes.options[i] });\r\n\t                                            break;\r\n\t                                        }\r\n\t                                    }\r\n\t                                });\r\n\t                            });\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'taxesPopup':\r\n\t                        setTimeout(function () {\r\n\t                            var tmpVal;\r\n\t                            if (isRegionalSettingEnabled) {\r\n\t                                try {\r\n\t                                    element.find('input').attr('type', 'text');\r\n\t                                    element.find('input').autoNumeric('init');\r\n\t                                }\r\n\t                                catch (error) {\r\n\t                                    console.log(\"Error in number init. \" + scope.column.field);\r\n\t                                }\r\n\t                            }\r\n\t                            else if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                var arrDecimalSplits;\r\n\r\n\t                                element.find('input').on('keydown', function (e) {\r\n\t                                    arrDecimalSplits = $(this).val().split('.');\r\n\r\n\t                                    if (arrDecimalSplits.length > 1) {\r\n\t                                        if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                            e.preventDefault();\r\n\t                                            return false;\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                        e.preventDefault();\r\n\t                                        return false;\r\n\t                                    }\r\n\t                                });\r\n\t                            }\r\n\r\n\t                            element.find('input').on('keyup', function (e) {\r\n\t                                if (isRegionalSettingEnabled) {\r\n\t                                    try {\r\n\t                                        tmpVal = $(this).autoNumeric('get') * 1;\r\n\t                                    }\r\n\t                                    catch (error) {\r\n\t                                        console.log(\"Error in number format. \" + scope.column.field);\r\n\t                                    }\r\n\t                                }\r\n\t                                else {\r\n\t                                    if (tmpVal == $(this).val()) {\r\n\t                                        return;\r\n\t                                    }\r\n\t                                    tmpVal = $(this).val();\r\n\t                                }\r\n\r\n\t                                if (scope.column.isRegUpdateCol) {\r\n\t                                    smartTableUtils.debounce.add(function () {\r\n\t                                        updateCell(scope.row.entity, scope.column.field, parseFloat(tmpVal));\r\n\t                                        //\tcell change listener\r\n\t                                        angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                        smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                    }, 250, false);\r\n\t                                }\r\n\t                            });\r\n\t                        });\r\n\t                        break;\r\n\t                }\r\n\r\n\t                smartTableScope.lastActiveCell = {\r\n\t                    rowIndex: scope.rowIndex,\r\n\t                    columnIndex: scope.columnIndex\r\n\t                };\r\n\r\n\t                isInEditMode = true;\r\n\t            };\r\n\r\n\r\n\t            element.on('focus', onFocus);\r\n\r\n\t            element.on('click', function (e) {\r\n\t                if (scope.column.uiType == 'popup' && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data } }) && scope.column.isRegClickCol) {\r\n\t                    smartTableUtils.debounce.add(function () {\r\n\t                        window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                        //\tcell click listener\r\n\t                        angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                    }, 100);\r\n\t                }\r\n\t            });\r\n\r\n\t            var onFocusCell = smartTableUtils.on('focusCell', function (e) {\r\n\t                if (e.rowIndex == scope.rowIndex && e.columnIndex == scope.columnIndex && e.smartTableId == smartTableScope.smartTableId) {\r\n\t                    element.trigger('focus');\r\n\t                }\r\n\t            });\r\n\r\n\t            var onRowDataChange = smartTableUtils.on('rowDataChange', function (e) {\r\n\t                if (e.rowIndex == scope.rowIndex && e.smartTableId == smartTableScope.smartTableId) {\r\n\t                    //\tskip updating the field since being already in edit mode\r\n\t                    if (!isInEditMode) {\r\n\t                        init(true, true);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\r\n\t            var onDataChange = smartTableUtils.on('dataChange', function (e) {\r\n\t                if (e.smartTableId == smartTableScope.smartTableId && e.updateCell) {\r\n\t                    init(true, true);\r\n\t                }\r\n\t            });\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                // console.log('smart-cell scope destroyed');\r\n\t                onCellDataAndColDefChange();\r\n\t                onFocusCell();\r\n\t                onRowDataChange();\r\n\t                onDataChange();\r\n\t                element.off('keydown', onElementKeyDown);\r\n\t            });\r\n\t        },\r\n\t        template: '<span class=\"smart-table-cell-text\"><span class=\"smart-table-cell-template\"></span></span>'\r\n\t    };\r\n\t}]);\r\n})();\n(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartTreePopup', ['$timeout',\r\n\tfunction($timeout) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\tscope : {\r\n\t\t\t\theader : \"@\",\r\n\t\t\t\tisRadio : \"@\",\r\n\t\t\t\ttoggle : \"@\",\r\n\t\t\t\tpreselection : \"@\",\r\n\t\t\t\tonHide : \"&\",\r\n\t\t\t\tonSelect : \"&\",\r\n                disableLevelSelection : \"@\"\r\n\t\t\t},\r\n\t\t\tlink : function(scope, element, attrs) {\r\n\t\t\t    //watch treePopupToggle boolean to toggle popup\r\n\t\t\t    var isInitServiceCall = true;\r\n\t\t\t\tscope.$watch('toggle', function(value) {\r\n\t\t\t\t    scope.showPopupBool = scope.$eval(value);\r\n\t\t\t\t    if (scope.showPopupBool) {\r\n\t\t\t\t        scope.treeConfig.hideSearch = false;\r\n\t\t\t\t        if (isInitServiceCall) {\r\n\t\t\t\t            $timeout(function () {\r\n\t\t\t\t                scope.treeConfig.initServiceCall();\r\n\t\t\t\t            });\r\n\t\t\t\t            isInitServiceCall = false;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t//watch preselection\r\n\t\t\t\tscope.$watch('preselection', function(value) {\r\n\t\t\t\t\tscope.treeConfig.SelectedNodes = value;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//on-hide callback\r\n\t\t\t\tvar hideCallback = scope.$eval(scope.onHide);\r\n\t\t\t\t\r\n\t\t\t\t//on-select callback\r\n\t\t\t\tvar selectCalback = scope.$eval(scope.onSelect);\r\n\r\n\t\t\t\t//creating Tree Component Config\r\n\t\t\t\tscope.treeConfig = {\r\n\t\t\t\t\tIsRadio : scope.$eval(scope.isRadio),\r\n\t\t\t\t\ttype : \"Category\",\r\n\t\t\t\t\tSelectedNodes : \"\",\r\n\t\t\t\t\ttitle: scope.header,\r\n\t\t\t\t\tdisableLevelSelection: scope.disableLevelSelection,\r\n                    hideSearch : false\r\n\t\t\t\t};\r\n\t\t\t\tscope.onDoneCallback = function(e) {\r\n\t\t\t\t\tif (angular.isFunction(selectCalback)) {\r\n\t\t\t\t\t\tselectCalback(e);\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// view bindings\r\n\t\t\t\tscope.showPopupBool = false;\r\n\t\t\t\tscope.onPopupHideCallback = function() {\r\n\t\t\t\t    scope.showPopupBool = false;\r\n\t\t\t\t    scope.treeConfig.hideSearch = true;\r\n\t\t\t\t\tif (angular.isFunction(hideCallback)) {\r\n\t\t\t\t\t\thideCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/smartTree/smartTreePopup.html'\r\n\t\t};\r\n\t}]);\r\n\r\n\t/*******----smartTreeComponent Module----*******/\r\n\r\n\tangular.module('smartTreeComponent', []).directive('smartTreeComponent', ['$timeout', '$translate', 'RESTApiSt', '$q', 'APPCONSTANTS', 'Common',\r\n\tfunction ($timeout, $translate, RESTApiSt, $q, APPCONSTANTS, Common) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\treplace : true,\r\n\t\t\tscope : {\r\n\t\t\t\tconfig : '=',\r\n\t\t\t\tonDone : '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t    // ID's generation\r\n\t\t\t    scope.parentId = 'Parent_' + Common.uniqueIDGenerator();\r\n\t\t\t    scope.templateId = 'Template_' + Common.uniqueIDGenerator() + '.html';\r\n\r\n\r\n\t\t\t\t/*config for the directive*/\r\n\t\t\t    scope.config.initServiceCall = function () {\r\n\t\t\t        RESTApiSt.getData(scope.treeConfig.type, RESTApiStCallback, req);\r\n\t\t\t    }\r\n\t\t\t\tscope.treeConfig = scope.config;\r\n\t\t\t\tvar doneCallback = scope.$eval(scope.onDone);\r\n\t\t\t\tscope.$watch('config.SelectedNodes', function(n, o) {\r\n\t\t\t\t\tif (n) {\r\n\t\t\t\t\t\tpreselection = n.split(',');\r\n\t\t\t\t\t\tif (preselectionRecievedPromise)\r\n\t\t\t\t\t\t\tpreselectionRecievedPromise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.$watch('config.hideSearch', function (n, o) {\r\n\t\t\t\t    if (n && scope.searchFieldVal.length > 0) {\r\n\t\t\t\t        $timeout(function () {\r\n\t\t\t\t            angular.element('#closeButton').trigger('click');\r\n\t\t\t\t        });\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\t/*promise*/\r\n\t\t\t\tvar dataRecievedCallPromise;\r\n\t\t\t\tvar preselectionRecievedPromise;\r\n\t\t\t\tvar promises = [];\r\n\t\t\t\tinitializePromise(true, true);\r\n\r\n\t\t\t\t/*Local variables*/\r\n\t\t\t\tvar dataSet;\r\n\t\t\t\tvar searchBucket = 50;\r\n\t\t\t\tvar lazyLoadingBucket = 50;\r\n\t\t\t\tvar maxLevel;\r\n\t\t\t\tvar lazyLoadOffset;\r\n\t\t\t\tvar lazyLoadMarker = [];\r\n\t\t\t\tvar levelKey = 'level';\r\n\t\t\t\tvar levelWiseData = {};\r\n\t\t\t\tvar parentStringConstant = \"parentString\";\r\n\t\t\t\tvar parentCodeStringConstant = \"parentCodeString\";\r\n\t\t\t\tvar preselection;\r\n\t\t\t\tvar searchCategories = [];\r\n\t\t\t\tvar req;\r\n\r\n\t\t\t\tswitch(scope.treeConfig.type) {\r\n\t\t\t\tcase 'Category':\r\n\t\t\t\t\tscope.codeProperty = 'PASCode';\r\n\t\t\t\t\tscope.titleProperty = 'PASName';\r\n\t\t\t\t\tscope.levelProperty = 'PASLevel';\r\n\t\t\t\t\tscope.parentProperty = 'ParentPASCode';\r\n\t\t\t\t\t/*req = {\r\n\t\t\t\t\t    method: 'POST',\r\n\t\t\t\t\t    url: 'https://gepqcsmart-rest.servicebus.windows.net/PortalRestService/GetPASForDeviceMob',\r\n\t\t\t\t\t    headers: {\r\n\t\t\t\t\t        'Content-Type': 'application/json',\r\n\t\t\t\t\t        'UserExecutionContext': '{\"ClientName\":\"BuyerSqlConn\",\"ClientID\":2,\"BuyerPartnerCode\":6315,\"Product\":2,\"UserId\":\"28082\",\"EntityType\":\"supplier registration\",\"EntityId\":8888,\"LoggerCode\":\"EC101\",\"Culture\":\"en-US\",\"UserName\":\"RiteAid.Admin@gep.com\",\"CompanyName\":\"BuyerSqlConn\",\"ContactCode\":63150040000001}'\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t    data: {\r\n\t\t\t\t\t        \"ContactCode\": 63150040000001,\r\n\t\t\t\t\t        \"entityDetailCode\": 7,\r\n\t\t\t\t\t        \"entityId\": 1\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t};*/\r\n\t\t\t\t\treq = {\r\n\t\t\t\t\t    method: 'POST',\r\n\t\t\t\t\t    url: APPCONSTANTS.userPreferences.URLs.AppURL + 'PortalRestService/GetPASForDeviceMob?oloc=218',\r\n\t\t\t\t\t    headers: {\r\n\t\t\t\t\t        'Content-Type': 'application/json',\r\n\t\t\t\t\t        'UserExecutionContext': JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails),\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t    data: {\r\n\t\t\t\t\t        \"ContactCode\": APPCONSTANTS.userPreferences.UserBasicDetails.ContactCode,\r\n\t\t\t\t\t        \"entityDetailCode\": APPCONSTANTS.userPreferences.ACEntityId,\r\n\t\t\t\t\t        \"entityId\": APPCONSTANTS.userPreferences.UserBasicDetails.EntityId\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'Region':\r\n\t\t\t\t\tscope.codeProperty = 'RegionId';\r\n\t\t\t\t\tscope.titleProperty = 'RegionName';\r\n\t\t\t\t\tscope.levelProperty = 'RegionLevel';\r\n\t\t\t\t\tscope.parentProperty = 'RegionParentId';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tscope.isLoading = true;\r\n\t\t\t\tscope.selectedData = [];\r\n\t\t\t\tscope.isSingleSelect = scope.treeConfig.IsRadio;\r\n\t\t\t\tscope.msg = $translate.instant('loadingMsg');\r\n\r\n\t\t\t\t/*Local member fuctions*/\r\n\r\n\t\t\t\tfunction initializePromise(dataRievedPromiseBool, preselectionRecievedPromiseBool) {\r\n\t\t\t\t\tdataRecievedCallPromise = null;\r\n\t\t\t\t\tpreselectionRecievedPromise = null;\r\n\t\t\t\t\tpromises.length = 0;\r\n\t\t\t\t\tif (dataRievedPromiseBool) {\r\n\t\t\t\t\t\tdataRecievedCallPromise = $q.defer();\r\n\t\t\t\t\t\tpromises.push(dataRecievedCallPromise.promise);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (preselectionRecievedPromiseBool) {\r\n\t\t\t\t\t\tpreselectionRecievedPromise = $q.defer();\r\n\t\t\t\t\t\tpromises.push(preselectionRecievedPromise.promise);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$q.all(promises).then(promiseResolved);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction promiseResolved() {\r\n\t\t\t\t\tinitatePreSelection();\r\n\t\t\t\t\tinitializePromise(false, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction createLevelWiseDataSet() {\r\n\t\t\t\t\tvar level = 1;\r\n\t\t\t\t\tvar parentNodes = dataSet[level];\r\n\t\t\t\t\tinsertParentHierarchyForFlatStrucure(parentNodes);\r\n\t\t\t\t\twhile (parentNodes) {\r\n\t\t\t\t\t\tlevelWiseData[levelKey + level] = parentNodes;\r\n\t\t\t\t\t\tinsertParentHierarchyForFlatStrucure(parentNodes, level);\r\n\t\t\t\t\t\tmaxLevel = level;\r\n\t\t\t\t\t\tlevel = level + 1;\r\n\t\t\t\t\t\tparentNodes = dataSet[level];\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction insertParentHierarchyForFlatStrucure(parentNodes, level) {\r\n\t\t\t\t\tvar fetchedData = (level) ? _.groupBy(dataSet[level + 1], scope.parentProperty) : null;\r\n\t\t\t\t\t_.each(parentNodes, function(parent) {\r\n\t\t\t\t\t\tvar childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n\t\t\t\t\t\tif (childForParent) {\r\n\t\t\t\t\t\t\t_.each(childForParent, function(node, index) {\r\n\t\t\t\t\t\t\t\tnode[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n\t\t\t\t\t\t\t\tnode[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n\t\t\t\t\t\t\t\tnode['isExpanded'] = false;\r\n\t\t\t\t\t\t\t\tnode['selection'] = \"0\";\r\n\t\t\t\t\t\t\t\tnode['index'] = index;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction RESTApiStCallback(response) {\r\n\t\t\t\t    try{\r\n\t\t\t\t        dataSet = _.groupBy(JSON.parse(response.data.GetPASForDeviceMobResult), scope.levelProperty);\r\n\t\t\t\t        createLevelWiseDataSet();\r\n\t\t\t\t        scope.categories = levelWiseData[levelKey + '1'].slice(0, lazyLoadingBucket);\r\n\t\t\t\t        lazyLoadMarker.push(levelWiseData[levelKey+'1'][levelWiseData[levelKey + '1'].length - 1]);\r\n\t\t\t\t        scope.isLoading = false;\r\n\t\t\t\t    }catch(e){\r\n\t\t\t\t        scope.msg = $translate.instant('loadingDataErr');\r\n\t\t\t\t    }\r\n\t\t\t\t    dataRecievedCallPromise.resolve();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction resetSelectionState() {\r\n\t\t\t\t\t_.each(scope.selectedData, function(_node) {\r\n\t\t\t\t\t\tscope.selectNode(_node, '0');\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction initatePreSelection() {\r\n\t\t\t\t\tresetSelectionState();\r\n\t\t\t\t\t_.each(preselection, function(preselectionNode) {\r\n\t\t\t\t\t\tvar searchLevel = 1;\r\n\t\t\t\t\t\twhile (searchLevel <= maxLevel) {\r\n\t\t\t\t\t\t\tvar foundNode = _.groupBy(levelWiseData[levelKey + searchLevel],scope.codeProperty)[preselectionNode];\r\n\t\t\t\t\t\t\tif (foundNode) {\r\n\t\t\t\t\t\t\t\tscope.selectNode(foundNode[0], '1');\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsearchLevel = searchLevel + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction openSelectionTree() {\r\n\t\t\t\t\tvar partialSeletedNodes = _.filter(levelWiseData[levelKey + 0], function(node) {\r\n\t\t\t\t\t\treturn node.selection = '2';\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_.each(partialSeletedNodes, function(nodes) {\r\n\t\t\t\t\t\tvar level = nodes[scope.levelProperty];\r\n\t\t\t\t\t\t//var childs = _.\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction getChildsForParentAsPerBucket(parent, bucket, startIndex) {\r\n\t\t\t\t\tvar childSearchLevel = parent[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCodeStringIterator;\r\n\t\t\t\t\tvar result = _.groupBy(levelWiseData[levelKey+childSearchLevel],scope.parentProperty)[parent[scope.codeProperty]];\r\n\t\t\t\t\t//var bucketData = (bucket) ? result.slice(startIndex, startIndex + bucket) : result;\r\n\t\t\t\t\tvar bucketData = result;\r\n\t\t\t\t\treturn bucketData;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction lazyLoadLevelWiseData(markerNode) {\r\n\t\t\t\t\tvar parentSearchLevel = markerNode[scope.levelProperty] - 1;\r\n\t\t\t\t\tvar markerNodeParent = markerNode[scope.parentProperty];\r\n\t\t\t\t\tvar parent = _.find(levelWiseData[levelKey + parentSearchLevel], function(node) {\r\n\t\t\t\t\t\treturn node[scope.codeProperty] == markerNodeParent;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\tvar bucketChilds = getChildsForParentAsPerBucket(parent, lazyLoadingBucket, markerNode.index + 1);\r\n\t\t\t\t\t\tconsole.log('childs appended = ' + bucketChilds.length);\r\n\t\t\t\t\t\tif (bucketChilds.length > 0) {\r\n\t\t\t\t\t\t\tparent.children = parent.children.concat(bucketChilds);\r\n\t\t\t\t\t\t\tlazyLoadMarker.push(bucketChilds[bucketChilds.length - 1]);\r\n\t\t\t\t\t\t\tscope.$apply();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar searchString = \"\";\r\n\t\t\t\tvar searchLevel;\r\n\t\t\t\tvar searchDataYetToBeDisplayed = [];\r\n\t\t\t\tvar searchWithContainsHitResult = [];\r\n\t\t\t\tscope.searchResults = [];\r\n\t\t\t\tfunction searchAsPerBucketSize(searchStr, bucket) {\r\n\t\t\t\t\tif (searchString != searchStr) {\r\n\t\t\t\t\t\tsearchString = searchStr;\r\n\t\t\t\t\t\tsearchLevel = maxLevel;\r\n\t\t\t\t\t\tsearchDataYetToBeDisplayed.length = 0;\r\n\t\t\t\t\t\tsearchWithContainsHitResult.length = 0;\r\n\t\t\t\t\t\tscope.searchResults.length = 0;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar searchData = getDataAsPerBucketSize(searchStr, bucket);\r\n\t\t\t\t\tscope.searchResults = scope.searchResults.concat(searchData);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getOffsetSearchData(bucket) {\r\n\t\t\t\t\tvar partitionedData = _.partition(searchDataYetToBeDisplayed, function(data, index) {\r\n\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsearchDataYetToBeDisplayed = partitionedData[0];\r\n\t\t\t\t\treturn partitionedData[1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getOffsetSearchDataForContainsSearch(bucket) {\r\n\t\t\t\t\tvar partitionedData = _.partition(searchWithContainsHitResult, function(data, index) {\r\n\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsearchWithContainsHitResult = partitionedData[0];\r\n\t\t\t\t\treturn partitionedData[1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getDataAsPerBucketSize(searchStr, bucket) {\r\n\t\t\t\t\tvar bucketData = [];\r\n\t\t\t\t\twhile (bucketData.length < bucket && searchLevel > 0) {\r\n\t\t\t\t\t\tvar offsetSearchData = getOffsetSearchData(bucket);\r\n\t\t\t\t\t\tif (offsetSearchData.length == bucket) {\r\n\t\t\t\t\t\t\tbucketData = offsetSearchData;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar searchData = _.filter(levelWiseData[levelKey + searchLevel], function(node) {\r\n\t\t\t\t\t\t\treturn -1 != node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvar containsSarchResult = _.filter(levelWiseData[levelKey + searchLevel], function(node) {\r\n\t\t\t\t\t\t\treturn new RegExp(\"(\" + _.compact(searchString.split(' ')).join('|') + \")\", \"gi\").test(node[scope.titleProperty]) && -1 == node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsearchWithContainsHitResult = searchWithContainsHitResult.concat(containsSarchResult);\r\n\t\t\t\t\t\tvar qumulativeData = offsetSearchData.concat(searchData);\r\n\t\t\t\t\t\tvar partitionedData = _.partition(qumulativeData, function(data, index) {\r\n\t\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsearchDataYetToBeDisplayed = searchDataYetToBeDisplayed.concat(partitionedData[0]);\r\n\t\t\t\t\t\tbucketData = bucketData.concat(partitionedData[1]);\r\n\t\t\t\t\t\tsearchLevel = searchLevel - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (searchLevel == 0) {\r\n\t\t\t\t\t\twhile (bucketData.length < bucket) {\r\n\t\t\t\t\t\t\tvar containsSearchDataToBeAppended = getOffsetSearchDataForContainsSearch(bucket);\r\n\t\t\t\t\t\t\tif (containsSearchDataToBeAppended.length > 0) {\r\n\t\t\t\t\t\t\t\tbucketData = bucketData.concat(containsSearchDataToBeAppended);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn bucketData;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction closeChildsForParent(parent) {\r\n\t\t\t\t\tvar childs = _.filter(getChildsForParentAsPerBucket(parent), function(childNode) {\r\n\t\t\t\t\t\treturn childNode.isExpanded;\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_.each(childs, function(child) {\r\n\t\t\t\t\t\tchild.isExpanded = false;\r\n\t\t\t\t\t\tchild.children = [];\r\n\t\t\t\t\t\tcloseChildsForParent(child);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.searchText = '';\r\n\t\t\t\tscope.searchFieldVal = '';\r\n\r\n\t\t\t\tscope.expandNode = function(node, index) {\r\n\t\t\t\t\tnode.isExpanded = !node.isExpanded;\r\n\t\t\t\t\tif (node.isExpanded) {\r\n\t\t\t\t\t\tnode.children = getChildsForParentAsPerBucket(node, lazyLoadingBucket, 0);\r\n\t\t\t\t\t\tlazyLoadMarker.push(node.children[node.children.length - 1]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode.children = [];\r\n\t\t\t\t\t\tremoveMarkerForParent(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction removeMarkerForParent(parent) {\r\n\t\t\t\t\tvar childMarkers = _.filter(lazyLoadMarker, function(node, index) {\r\n\t\t\t\t\t\treturn -1 != node[parentCodeStringConstant].indexOf(parent[scope.codeProperty]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlazyLoadMarker = _.difference(lazyLoadMarker, childMarkers);\r\n\t\t\t\t\tcloseChildsForParent(parent);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar filterTextTimeout;\r\n\t\t\t\tscope.searchAndSelectNode = function(node) {\r\n\t\t\t\t\tif (filterTextTimeout)\r\n\t\t\t\t\t\t$timeout.cancel(filterTextTimeout);\r\n\t\t\t\t\tfilterTextTimeout = $timeout(function() {\r\n\t\t\t\t\t\tif (scope.searchFieldVal.length > 2)\r\n\t\t\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tsearchDataYetToBeDisplayed.length = 0;\r\n\t\t\t\t\t\t\tsearchWithContainsHitResult.length = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 300);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.selectNode = function(node, selectionState) {\r\n\t\t\t\t\tnode.selection = selectionState;\r\n\t\t\t\t\tif (scope.isSingleSelect) {\r\n\t\t\t\t\t    if (scope.selectedData && scope.selectedData[0] && scope.selectedData[0][scope.codeProperty] != node[scope.codeProperty]) {\r\n\t\t\t\t\t        scope.selectedData[0].selection = '0';\r\n\t\t\t\t\t    };\r\n\t\t\t\t\t    scope.selectedData = (selectionState == '0') ? [] : [node];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdateSelectionObject(node, selectionState);\r\n\t\t\t\t\t\tupdateChildsForNode(node, selectionState);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tupdateParentForNode(node, selectionState);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateSelectionObject(node, selectionState) {\r\n\t\t\t\t\tswitch(selectionState) {\r\n\t\t\t\t\tcase '0':\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '1':\r\n\t\t\t\t\t\tscope.selectedData.push(node);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateParentForNode(node, selectionState) {\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] - 1;\r\n\t\t\t\t\tvar immediateParentCode = node[scope.parentProperty].toString();\r\n\t\t\t\t\twhile (depthLevel > 0) {\r\n\t\t\t\t\t\tvar parent = _.find(levelWiseData[levelKey + depthLevel], function(node) {\r\n\t\t\t\t\t\t\treturn node[scope.codeProperty] == immediateParentCode;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\timmediateParentCode = parent[scope.parentProperty].toString();\r\n\t\t\t\t\t\tif (!parent['isExpanded']) {\r\n\t\t\t\t\t\t\tscope.expandNode(parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!scope.isSingleSelect) {\r\n\t\t\t\t\t\t\tparent.selection = getStateForNode(parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdepthLevel = depthLevel - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getStateForNode(node) {\r\n\t\t\t\t\tvar childCount = node.ChildCount;\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCode = node[scope.codeProperty];\r\n\t\t\t\t\tvar groupByData = _.groupBy(levelWiseData[levelKey + depthLevel], scope.parentProperty);\r\n\t\t\t\t\tvar selectedChild = _.filter(groupByData[parentCode], function(node) {\r\n\t\t\t\t\t\treturn node.selection == '1';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tvar partiallySelectedChild = _.filter(groupByData[parentCode], function(node) {\r\n\t\t\t\t\t\treturn node.selection == '2';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (childCount == selectedChild.length) {\r\n\t\t\t\t\t\tscope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData.push(node);\r\n\t\t\t\t\t\treturn \"1\";\r\n\t\t\t\t\t} else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\t\t\t\t\t\tscope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\treturn \"2\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tscope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\treturn \"0\";\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateChildsForNode(node, selectionState) {\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCode = node[scope.codeProperty].toString();\r\n\t\t\t\t\twhile (depthLevel <= maxLevel) {\r\n\t\t\t\t\t\tvar childs = _.filter(levelWiseData[levelKey + depthLevel], function(node) {\r\n\t\t\t\t\t\t\treturn -1 != node[parentCodeStringConstant].indexOf(parentCode);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t_.each(childs, function(child) {\r\n\t\t\t\t\t\t\tchild.selection = selectionState;\r\n\t\t\t\t\t\t\tif (selectionState == \"1\") {\r\n\t\t\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, child);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdepthLevel = depthLevel + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniqueIDGenerator = function() {\r\n\t\t\t\t\tvar d = new Date().getTime();\r\n\t\t\t\t\tvar uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function(c) {\r\n\t\t\t\t\t\tvar r = (d + Math.random() * 16) % 16 | 0;\r\n\t\t\t\t\t\td = Math.floor(d / 16);\r\n\t\t\t\t\t\treturn (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn uniqueID;\r\n\t\t\t\t};\r\n\t\t\t\tif (scope.isSingleSelect) {\r\n\t\t\t\t\tscope.uniqueRadioGroupName = uniqueIDGenerator();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*$timeout(function() {\r\n\t\t\t\t\tlazyLoadOffset = angular.element(\"#treeComponentContainer\")[0].getBoundingClientRect().bottom;\r\n\t\t\t\t\tangular.element('.scrollbar-outer').scrollbar({\r\n\t\t\t\t\t\tonScroll : function(y, x) {\r\n\t\t\t\t\t\t\tif (lazyLoadMarker.length > 0 && scope.searchFieldVal.length == 0) {\r\n\t\t\t\t\t\t\t\tvar markerNode = lazyLoadMarker[lazyLoadMarker.length - 1];\r\n\t\t\t\t\t\t\t\tif (angular.element(\"#\"+markerNode[scope.codeProperty])[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n\t\t\t\t\t\t\t\t\tconsole.log(markerNode);\r\n\t\t\t\t\t\t\t\t\tlazyLoadMarker.length = (lazyLoadMarker.length > 0) ? lazyLoadMarker.length - 1 : 0;\r\n\t\t\t\t\t\t\t\t\tlazyLoadLevelWiseData(markerNode);\r\n\t\t\t\t\t\t\t\t\tconsole.log(lazyLoadMarker.length);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (y.maxScroll > 0 && y.scroll == y.maxScroll && scope.searchFieldVal.length > 0) {\r\n\t\t\t\t\t\t\t\t$timeout(function() {\r\n\t\t\t\t\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});*/\r\n\t\t\t\t\r\n\t\t\t\tscope.scrollEnd = function(e){\r\n\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n\r\n\t\t\t\tscope.doneClickHandler = function() {\r\n\t\t\t\t\tif (angular.isFunction(doneCallback)) {\r\n\t\t\t\t\t\tdoneCallback(scope.selectedData);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tscope.focusSearch = false;\r\n\t\t\t\tscope.isActive = false;\r\n\t\t\t\tscope.showMe = false;\r\n\t\t\t\tscope.showSearch = function () {\r\n\t\t\t\t    scope.isActive = true;\r\n\t\t\t\t    scope.focusSearch = true;\r\n\t\t\t\t    scope.showMe = true;\r\n\t\t\t\t    scope.hideClose = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.hideSearch = function () {\r\n\t\t\t\t    scope.isActive = false;\r\n\t\t\t\t    scope.focusSearch = false;\r\n\t\t\t\t    scope.hideClose = false;\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/smartTree/smartTreeTemplate.html'\r\n\t\t};\r\n\t}]).directive('ngIndeterminate', function($compile) {\r\n\t\treturn {\r\n\t\t\trestrict : 'A',\r\n\t\t\tlink : function(scope, element, attributes) {\r\n\t\t\t\tscope.$watch(attributes['ngIndeterminate'], function(value) {\r\n\t\t\t\t\telement.prop('indeterminate', value);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}).directive('ngHighlightSt',['$compile', 'hilitor', function($compile, hilitor) {\r\n\t\treturn {\r\n\t\t\trestrict : 'A',\r\n\t\t\tlink : function(scope, element, attributes) {\r\n\t\t\t\tscope.$watch(attributes['ngHighlight'], function(value) {\r\n\t\t\t\t\thilitor.getHilitor().apply(value);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}]).service('RESTApiSt', ['$http',\r\n\tfunction($http) {\r\n\t\tvar Callback;\r\n\r\n\t\tthis.getData = function(mode, callback, requestObject) {\r\n\t\t\tswitch(mode) {\r\n\t\t\tcase 'Category':\r\n\t\t\t\tCallback = callback;\r\n\t\t\t\tserviceCall(requestObject);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction serviceCall(req) {\r\n\t\t\t$http(req).then(function(response) {\r\n\t\t\t\tCallback(response);\r\n\t\t\t}, function(error) {\r\n\t\t\t\tCallback(error);\r\n\t\t\t});\r\n\t\t};\r\n\t}]).service('hilitor', [\r\n\tfunction() {\r\n\t\tvar hilitor = new Hilitor(\"treeComponentContainer\");\r\n\t\tthis.getHilitor = function() {\r\n\t\t\treturn hilitor;\r\n\t\t};\r\n\t}]);\r\n\r\n})(angular);\r\n\n// Original JavaScript code by Chirp Internet: www.chirp.com.au\n// Please acknowledge use of this code by including this header.\n// 2/2013 jon: modified regex to display any match, not restricted to word boundaries.\n\n// License at http://www.the-art-of-web.com/copyright.html\n\n(function ( window, factory ) {\n\n  if ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n    // Expose a factory as module.exports in loaders that implement the Node\n    // module pattern (including browserify).\n    // This accentuates the need for a real window in the environment\n    // e.g. var jQuery = require(\"jquery\")(window);\n    module.exports = function( w ) {\n      w = w || window;\n      if ( !w.document ) {\n        throw new Error(\"Hilitor requires a window with a document\");\n      }\n      return factory( w.document );\n    };\n  } else {\n    if ( typeof define === \"function\" && define.amd ) {\n      // AMD. Register as a named module.\n      define( [], function() {\n        return factory(document);\n      });\n    } else {\n        // Browser globals\n        window.Hilitor = factory(document);\n    }\n  }\n\n// Pass this, window may not be defined yet\n}(this, function ( document, undefined ) {\n\n\nfunction Hilitor(id, tag, options)\n{\n  var targetNode = document.getElementById(id) || document.body;\n  var hiliteTag = tag || \"EM\";\n  var skipTags = new RegExp(\"^(?:SCRIPT|FORM|INPUT|TEXTAREA|IFRAME|VIDEO|AUDIO)$\");\n  var colors = [\"#ff6\"];\n  var wordColor = [];\n  var colorIdx = 0;\n  var matchRegex = \"\";\n  var openLeft = true;\n  var openRight = true;\n  options = options || {};\n  if (typeof options.onStart !== 'function') {\n    options.onStart = function () { /* return FALSE when you want to abort */ };\n  }\n  if (typeof options.onFinish !== 'function') {\n    options.onFinish = function () { /* What you return here is returned by Hilitor.apply() */ return true; };\n  }\n  if (typeof options.onDoOne !== 'function') {\n    options.onDoOne = function (node) { /* return FALSE when you want to skip the highlighting change for this node */ };\n  }\n\n  this.setMatchType = function(type)\n  {\n    switch(type)\n    {\n    case \"left\":\n      openLeft = false;\n      openRight = true;\n      break;\n    case \"right\":\n      openLeft = true;\n      openRight = false;\n      break;\n    default:\n    case \"open\":\n      openLeft = openRight = true;\n      break;\n    case \"complete\":\n      openLeft = openRight = false;\n      break;\n    }\n  };\n\n  this.setRegex = function (input)\n  {\n    input = input.replace(/^[^\\w]+|[^\\w]+$/g, \"\").replace(/[^\\w'\\-]+/g, \"|\");\n    var re = \"(\" + input + \")\";\n    if(!openLeft) re = \"\\\\b\" + re;\n    if(!openRight) re = re + \"\\\\b\";\n    matchRegex = new RegExp(re, \"i\");\n  };\n\n  this.getRegex = function ()\n  {\n    var retval = matchRegex.toString();\n    retval = retval.replace(/^\\/(\\\\b)?|(\\\\b)?\\/i$/g, \"\");\n    retval = retval.replace(/\\|/g, \" \");\n    return retval;\n  };\n\n  // recursively apply word highlighting\n  this.hiliteWords = function (node)\n  {\n    var i;\n\n    if(!node)\n      return;\n    if(!matchRegex)\n      return;\n    if(skipTags.test(node.nodeName))\n       return;\n    if(node.nodeName === hiliteTag && node.className === \"hilitor\")\n      return;\n\n    if(node.hasChildNodes()) {\n      for(i = 0; i < node.childNodes.length; i++) {\n        this.hiliteWords(node.childNodes[i]);\n      }\n    }\n    if(node.nodeType === 3) { // NODE_TEXT\n      if((nv = node.nodeValue) && (regs = matchRegex.exec(nv))) {\n        if (false !== options.onDoOne.call(this, node)) {\n          if(!wordColor[regs[0].toLowerCase()]) {\n            wordColor[regs[0].toLowerCase()] = colors[colorIdx++ % colors.length];\n          }\n\n          var match = document.createElement(hiliteTag);\n          match.appendChild(document.createTextNode(regs[0]));\n          match.className = \"hilitor\";\n          match.style.backgroundColor = wordColor[regs[0].toLowerCase()];\n          match.style.fontStyle = \"inherit\";\n          match.style.color = \"#000\";\n\n          var after = node.splitText(regs.index);\n          after.nodeValue = after.nodeValue.substring(regs[0].length);\n          node.parentNode.insertBefore(match, after);\n        }\n      }\n    }\n  };\n\n  // remove highlighting\n  this.remove = function ()\n  {\n    var arr, i;\n    do {\n      arr = document.querySelectorAll(hiliteTag + \".hilitor\");\n      i = 0;\n      while (i < arr.length && (el = arr[i])) {\n        // store the reference to the parent of the hilite tag as that node itself, \n        // and all its links, is invalidated in the next .replaceChild() call:\n        var parentNode = el.parentNode;\n        if (!parentNode) {\n          i++;      \n          // this entry would otherwise crash in the code below; we can however improve \n          // on the total run-time costs by cutting back on the number of times we trigger\n          // the outer loop (which serves as a recovery mechanism anyway) by continuing\n          // with this querySelectorAll()'s results, but at it's higher indexes, which\n          // are very probably still valid/okay. This saves a number of outer loops and \n          // thus a number of querySelectorAll calls.\n          continue;\n        }\n        // Note that this stuff can crash (due to the parentNode being nuked) when multiple\n        // snippets in the same text node sibling series are merged. That's what the\n        // parentNode check is for. Ugly. Even while the .querySelectorAll() 'array' is updated\n        // automatically, which would imply that this never occurs, yet: it does. :-(\n        parentNode.replaceChild(el.firstChild, el);\n        // and merge the text snippets back together again.\n        parentNode.normalize();\n      }\n    } while (arr.length > 0);\n  };\n\n  // start highlighting at target node\n  this.apply = function (input)\n  {\n    // always remove all highlight markers which have been done previously\n    this.remove();\n    if(!input) {\n      return false;\n    }\n    this.setRegex(input);\n    var rv = options.onStart.call(this);\n    if (rv === false) {\n      return rv;\n    }\n    // ensure all text node series are merged, etc. so that we don't have to bother with fragmented texts in the search/scan.\n    targetNode.normalize();\n    this.hiliteWords(targetNode);\n    return options.onFinish.call(this);\n  };\n}\n\n\n  return Hilitor;\n}));\n\nangular.module('SMART2').directive('stickOnScroll', function ($window, $compile) {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            setTop: '@',\r\n            setZindex: '@',\r\n            onScroll:'&',\r\n            setLeft:\"@\",\r\n            setRight:\"@\",\r\n        },\r\n        link: function (scope, elem, attrs) {\r\n\r\n\r\n            if (scope.setTop == '' || scope.setTop == undefined) {\r\n                scope.setTop = '0'\r\n            }\r\n            if (scope.setLeft == '' || scope.setLeft == undefined) {\r\n                scope.setLeft = '0'\r\n            }\r\n            if (scope.setRight == '' || scope.setRight == undefined) {\r\n                scope.setRight = '0'\r\n            }\r\n\r\n            if (scope.setZindex == '' || scope.setZindex == undefined) {\r\n                scope.setZindex = '1'\r\n            }\r\n            \r\n\r\n            var template = '<div id=\"fixedtoHeaderheight_' + scope.$id + '\" style=\"display:none\"></div>';\r\n            attrs.$observe('stickOnScroll', function (value) {\r\n                if (value == \"true\") {\r\n                    var newElement = $compile(template)(scope);\r\n                    elem.after(newElement);\r\n                    var scrollTop = elem.offset().top;\r\n                    angular.element($window).bind('scroll', function () {\r\n                        var elemHeight = elem.outerHeight(),\r\n                            winScrollTop = angular.element($window).scrollTop();\r\n\r\n                        if (winScrollTop >= scrollTop) {\r\n                            if (attrs.stickLimit != undefined) {\r\n                                var el = $(attrs.stickLimit),\r\n                                    config = {\r\n                                        top: el.offset().top,\r\n                                        height: el.outerHeight()\r\n                                    };\r\n                                if ((winScrollTop + elem.outerHeight()) > (config.top + config.height)) {\r\n                                    elem.removeClass('is-fixed-on-top').css({ 'top': \"\", \"left\": \"\", \"right\": \"\", 'z-index': \"\" });\r\n                                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                                } else {\r\n                                    elem.addClass('is-fixed-on-top ' + attrs.applyClassOnFixed).css({ 'top': scope.setTop, 'left': scope.setLeft, 'right': scope.setRight, 'z-index': scope.setZindex });\r\n                                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': elemHeight, 'display': 'block' });\r\n                                }\r\n                            } else {\r\n                                elem.addClass('is-fixed-on-top ' + attrs.applyClassOnFixed).css({ 'top': scope.setTop, 'left': scope.setLeft, 'right': scope.setRight, 'z-index': scope.setZindex });\r\n                                angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': elemHeight, 'display': 'block' });\r\n                            }\r\n                        } else {\r\n                            elem.removeClass('is-fixed-on-top').css({ 'top': \"\", \"left\": \"\", \"right\":\"\", 'z-index': \"\" });\r\n                            angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                        }\r\n\r\n                        scope.onScroll();\r\n                    });\r\n                }\r\n                else {\r\n                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                    elem.next('#fixedtoHeaderheight_' + scope.$id).remove();\r\n                    elem.removeClass('is-fixed-on-top').css({ 'top': \"\",   \"left\": \"\", \"right\":\"\",'z-index': \"\" });\r\n                    \r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n});\r\n\r\n\n(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n.directive('customTab', [function () {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attrs) {\r\n            var tabbingOnKeyDown = function (e) {\r\n                var $this = $(this),\r\n                    tabType = angular.isDefined(attrs.tabType);\r\n                if (e.keyCode == 38 && !tabType && ($this.prev().length > 0) || e.keyCode == 37 && tabType && ($this.prev().length > 0)) {\r\n                    $this.prev().focus();\r\n                    e.preventDefault();\r\n                }\r\n                else if (e.keyCode == 40 && !tabType && ($this.next().length > 0) || e.keyCode == 39 && tabType && ($this.next().length > 0)) {\r\n                    $this.next().focus();\r\n                    e.preventDefault();\r\n                }\r\n               else if (e.keyCode == 13) {\r\n                   $this.trigger(\"click\");\r\n                   e.preventDefault();\r\n               }\r\n                \r\n            };\r\n            elem.bind(\"keydown\", tabbingOnKeyDown);\r\n            scope.$on('$destroy', function () {\r\n                elem.unbind(\"keydown\", tabbingOnKeyDown);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n})();\n(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n  .directive('focusonkeypress', ['$focusOnField', function ($focusOnField) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attr) {\r\n            var prevFocus;\r\n            var bindKeyEventFunction = function (e) {\r\n                var focusInfunc = function () {\r\n                    if (!elem.hasClass(\"focused\")) {\r\n                        prevFocus = document.activeElement;\r\n                        elem.addClass(\"focused\");\r\n                        var firstFieldFocus = elem.find(\"a, input, textarea, [tabindex]\").first();\r\n                        $focusOnField(firstFieldFocus);\r\n                    }\r\n                },\r\n                focusOutfunc = function () {\r\n                    if (elem.hasClass(\"focused\")) {\r\n                        $focusOnField(prevFocus);\r\n                        prevFocus = ''\r\n                        elem.removeClass(\"focused\");\r\n\r\n                    }\r\n                };\r\n\r\n                if (attr.altkey && attr.altkey != 'false') {\r\n                    if (attr.focusin && e.key == attr.focusin && e.altKey == true) {\r\n                        focusInfunc();\r\n                    } else if (attr.focusout && e.key == attr.focusout && e.altKey == true) {\r\n                        focusOutfunc();\r\n                    };\r\n                }\r\n                else {\r\n                    if (attr.focusin && e.key == attr.focusin) {\r\n                        focusInfunc();\r\n                    } else if (attr.focusout && e.key == attr.focusout) {\r\n                        focusOutfunc();\r\n                    };\r\n                };\r\n\r\n            };\r\n            $(document).bind(\"keydown\", bindKeyEventFunction);\r\n          scope.$on('$destroy', function () {\r\n                $(document).unbind(\"keydown\", bindKeyEventFunction);\r\n            });\r\n        }\r\n    }\r\n  }]);\r\n})();\n(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n  .directive('a', function () {\r\n      return {\r\n          restrict : 'E',\r\n          link: function (scope, elem, attr) {\r\n              var checkAttr = attr.href,\r\n                  svgIcon = elem.find('svg');\r\n                  \r\n              if(svgIcon){\r\n                  svgIcon.attr(\"focusable\",\"false\");// ie 11 not supported for this\r\n              }  \r\n              if(checkAttr == undefined){\r\n                  attr.$set(\"href\",\"\");\r\n              }\r\n          }\r\n      }\r\n  })\r\n.directive('menuItemList', ['menuListItemServ', function (menuListItemServ) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attr) {\r\n            menuListItemServ(elem);\r\n        }\r\n    }\r\n}])\r\n.directive('extraNavTitle', [function () {\r\n    return {\r\n        restrict: 'C',\r\n        link: function (scope, element, attrs) {\r\n            var firstField = element.find(\"a, input, button, textarea, [tabindex]\").not(\":disabled, :hidden, [tabindex = -1]\").first();\r\n            firstField.focus();\r\n        }\r\n    }\r\n\r\n}]);\r\n})();\n(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n.directive('tabbingGroup', ['$focusOnField', function ($focusOnField) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attrs) {\r\n            elem.bind(\"keydown\", function (e) {\r\n                if (e.which == 9) {\r\n                    var focusableEle = \"a, input[type=text],input[type=radio]:checked,input[type=checkbox], button, textarea, [tabindex='0']\",\r\n                        avoidFocusableEle = \":disabled, :hidden, [tabindex=-1]\",\r\n                        $firstField = elem.find(focusableEle).not(avoidFocusableEle).first(),\r\n                        $lastField = elem.find(focusableEle).not(avoidFocusableEle).last();\r\n                    if (e.target == $firstField.get(0) && e.shiftKey) {\r\n                        e.preventDefault();\r\n                        $focusOnField($lastField);\r\n                    } else if (e.target == $lastField.get(0) && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        $focusOnField($firstField);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n}]);\r\n})();\n(function () {\r\nangular.module(\"SMART2\").directive(\"searchableCube\", [function () {\r\n        \"use strict\";\r\n        return {\r\n            restrict: 'E',\r\n            transclude: true,\r\n            scope: {\r\n                cubeletList: '=?',\r\n                enableProceed: '&',\r\n                selectedCube: '=?',\r\n                formatKey: '@'\r\n            },\r\n            link: function (scope, $element, attrs) {\r\n                scope.proceed = false;\r\n\r\n                var enableProceed = scope.$eval(scope.enableProceed);\r\n                scope.options = JSON.parse(JSON.stringify(scope.cubeletList));\r\n\r\n                scope.selectedCube = scope.selectedCube || {};\r\n\r\n                var container,\r\n                    camera, scene, renderer,\r\n                    canvasMouseMove = false,\r\n                    mouse = new THREE.Vector2(),\r\n                    INTERSECTED, previousInt,\r\n                    group = new THREE.Group(),\r\n\r\n                    // mouseRotation vars\r\n                    mouseDown = false,\r\n                    mousemoved = false,\r\n                    startPosition = { x: 0, y: 0, z: 0 },\r\n                    rotateStartPoint = new THREE.Vector3(0, 0, 1),\r\n                    rotateEndPoint = new THREE.Vector3(0, 0, 1),\r\n                    curQuaternion,\r\n                    animationComplete = true,\r\n                    windowHalfX = window.innerWidth / 2,\r\n                    windowHalfY = window.innerHeight / 2,\r\n                    rotationSpeed = 2,\r\n                    lastMoveTimestamp,\r\n                    moveReleaseTimeDelta = 50,\r\n                    selectedCublet,\r\n                    startPoint = {\r\n                        x: 0,\r\n                        y: 0\r\n                    },\r\n                    deltaX = 0,\r\n                    deltaY = 0;\r\n                // mouseRotation vars End\r\n\r\n\r\n\r\n                init();\r\n                animate();\r\n\r\n                function init() {\r\n                    container = $element[0];\r\n\r\n                    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);\r\n                    camera.position.set(-360, 440, 700);\r\n\r\n                    scene = new THREE.Scene();\r\n                    //scene.background = new THREE.Color(0x0067b0);\r\n\r\n                    camera.lookAt(scene.position);\r\n\r\n                    scene.add(new THREE.AmbientLight(0x505050));\r\n\r\n                    var light = new THREE.SpotLight(0xffffff, 1.25);\r\n                    light.position.set(-650, 650, 650);\r\n                    // light.rotation.set(  37.32 * Math.PI/180,    -16.45* Math.PI/180,    204.184* Math.PI/180);\r\n                    light.castShadow = true;\r\n\r\n                    light.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(70, 1, 100, 10000));\r\n                    light.shadow.bias = 0.00001;\r\n\r\n                    light.shadow.mapSize.width = 4096;\r\n                    light.shadow.mapSize.height = 4096;\r\n\r\n                    scene.add(light);\r\n\r\n                    var cubletWidth = 90,\r\n                        cubeSeparation = 20,\r\n                        geometry,\r\n                        generateThreeByThree,\r\n                        generateTwoByTwo;\r\n\r\n                    var positionsArrayThreeByThree = [\r\n                            [-1, 1, 1],\r\n                            [-1, 0, 1],\r\n                            [-1, -1, 1],\r\n                            [0, 1, 1],\r\n                            [0, 0, 1],\r\n                            [0, -1, 1],\r\n                            [1, 1, 1],\r\n                            [1, 0, 1],\r\n                            [1, -1, 1],\r\n                            [1, 1, 0],\r\n                            [1, 0, 0],\r\n                            [1, -1, 0],\r\n                            [1, 1, -1],\r\n                            [1, 0, -1],\r\n                            [1, -1, -1],\r\n                            [0, 1, -1],\r\n                            [0, 0, -1],\r\n                            [0, -1, -1],\r\n                            [-1, 1, -1],\r\n                            [-1, 0, -1],\r\n                            [-1, -1, -1],\r\n                            [-1, 1, 0],\r\n                            [-1, 0, 0],\r\n                            [-1, -1, 0],\r\n                            [0, 1, 0],\r\n                            [0, -1, 0],\r\n                            [0, 0, 0]\r\n                        ],\r\n                        positionsArrayTwoByTwo = [\r\n                            [-1, 1, 1],\r\n                            [-1, -1, 1],\r\n                            [1, 1, 1],\r\n                            [1, -1, 1],\r\n                            [1, 1, -1],\r\n                            [1, -1, -1],\r\n                            [-1, 1, -1],\r\n                            [-1, -1, -1]\r\n                        ];\r\n\r\n\r\n                    generateThreeByThree = function () {\r\n                        geometry = new THREE.BoxGeometry(cubletWidth, cubletWidth, cubletWidth);\r\n                        var object;\r\n                        for (var i = 0; i < 27; i++) {\r\n                            if (i < scope.options.length) {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: \"#6fc2fb\" }));\r\n                            } else {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\r\n                                    color: 0xffffff,\r\n                                    transparent: true,\r\n                                    opacity: 0.7\r\n                                }));\r\n                            }\r\n                            object.position.x = positionsArrayThreeByThree[i][0] * (cubletWidth + cubeSeparation);\r\n                            object.position.y = positionsArrayThreeByThree[i][1] * (cubletWidth + cubeSeparation);\r\n                            object.position.z = positionsArrayThreeByThree[i][2] * (cubletWidth + cubeSeparation);\r\n\r\n                            object.scale.x = 1;\r\n                            object.scale.y = 1;\r\n                            object.scale.z = 1;\r\n\r\n                            \r\n                            object.dataID = i + 1;\r\n                            if (i < scope.options.length) {\r\n                                object.castShadow = true;\r\n                                object.receiveShadow = true;\r\n                                object.name = scope.options[i][scope.formatKey];\r\n                                object.disable = false;\r\n                            } else {\r\n                                object.disable = true;\r\n                            }\r\n\r\n                            group.add(object);\r\n                        }\r\n                    };\r\n\r\n                    generateTwoByTwo = function () {\r\n                        geometry = new THREE.BoxGeometry(cubletWidth + 45, cubletWidth + 45, cubletWidth + 45);\r\n                        var object;\r\n                        for (var i = 0; i < 8; i++) {\r\n                            if (i < scope.options.length) {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: \"#6fc2fb\" }));\r\n                            } else {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\r\n                                    color: 0xffffff,\r\n                                    transparent: true,\r\n                                    opacity: 0.7\r\n                                }));\r\n                            }\r\n\r\n                            object.position.x = positionsArrayTwoByTwo[i][0] * (cubletWidth + cubeSeparation + 45) / 2;\r\n                            object.position.y = positionsArrayTwoByTwo[i][1] * (cubletWidth + cubeSeparation + 45) / 2;\r\n                            object.position.z = positionsArrayTwoByTwo[i][2] * (cubletWidth + cubeSeparation + 45) / 2;\r\n\r\n                            object.scale.x = 1;\r\n                            object.scale.y = 1;\r\n                            object.scale.z = 1;\r\n                            object.dataID = i + 1;\r\n                            \r\n                            if (i < scope.options.length) {\r\n                                object.name = scope.options[i][scope.formatKey];\r\n                                object.castShadow = true;\r\n                                object.receiveShadow = true;\r\n                                object.disable = false;\r\n                            } else {\r\n                                object.disable = true;\r\n                            }\r\n\r\n                            group.add(object);\r\n                        }\r\n                    };\r\n                    \r\n\r\n                    if (scope.options.length > 8) {\r\n                        generateThreeByThree();\r\n                    } else {\r\n                        generateTwoByTwo();\r\n                    }\r\n\r\n                    scene.add(group);\r\n\r\n                    renderer = new THREE.WebGLRenderer({\r\n                            alpha: true,\r\n                            antialias: true\r\n                    });\r\n                    renderer.setPixelRatio(window.devicePixelRatio);\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n                    renderer.shadowMap.enabled = true;\r\n                    renderer.shadowMap.type = THREE.PCFShadowMap;\r\n                    renderer.shadowMap.soft = true;\r\n\r\n                    container.appendChild(renderer.domElement);\r\n                    container.addEventListener('mousemove', onMouseMove);\r\n\r\n                    // window.addEventListener('resize', onWindowResize, false);\r\n                    container.addEventListener('mousedown', onDocumentMouseDown, true);\r\n                    window.addEventListener('resize', onWindowResize, false);\r\n                }\r\n\r\n                // keyhandler\r\n                container.addEventListener('keydown', keyPressed);\r\n\r\n                function keyPressed(e) {\r\n                    switch (e.keyCode) {\r\n                        case 38:\r\n                            scope.handleRotation(\"top\");\r\n                            break;\r\n                        case 40:\r\n                            scope.handleRotation(\"bottom\");\r\n                            break;\r\n                        case 37:\r\n                            scope.handleRotation(\"left\");\r\n                            break;\r\n                        case 39:\r\n                            scope.handleRotation(\"right\");\r\n                            break;\r\n                    }\r\n                };\r\n                \r\n\r\n                //$element.find(\".searchElement\").on('click', function (event) {\r\n                //    event.stopPropagation();\r\n                //});\r\n                   \r\n                \r\n                //$element.find(\".navBtn\").on('click', function(event) {\r\n                //    scope.handleRotation(this.id);\r\n                //});\r\n\r\n                scope.handleRotation = function(btnType) {\r\n                    if (!animationComplete) {\r\n                        return;\r\n                    }\r\n                    switch (btnType) {\r\n                        case \"top\":\r\n                            animateRotation(1, 0, 0);\r\n                            break;\r\n                        case \"bottom\":\r\n                            animateRotation(-1, 0, 0);\r\n                            break;\r\n                        case \"left\":\r\n                            animateRotation(0, 1, 0);\r\n                            break;\r\n                        case \"right\":\r\n                            animateRotation(0, -1, 0);\r\n                            break;\r\n                    }\r\n                };\r\n\r\n                scope.routeToReport = function () {\r\n                    location.href = \"index_reports.html#/analytics/new\";\r\n                }\r\n\r\n                scope.searchElementByValue = function () {\r\n                    var value = $element.find(\".searchElement input\").val().toLowerCase();\r\n                    var index = _.findIndex(this.cubeletList, { name: value.charAt(0).toUpperCase() + value.slice(1) });\r\n                    if (index !== -1) {\r\n                        scope.selectedCube.select = this.cubeletList[index];\r\n                        scope.searchElement(scope.selectedCube.select.id);\r\n                    }\r\n                }\r\n                \r\n\r\n                function animateRotation(xDirection, yDirection, zDirection) {\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: Math.PI / 2 },\r\n                        tween = new TWEEN.Tween(position).to(target, 1000),\r\n                        prePositon = { x: 0, y: 0 },\r\n                        X = 0,\r\n                        Y = 0,\r\n                        Z = 0;\r\n\r\n                    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.y - prePositon.y;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        } else {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        var deltaRotationQuaternion = new THREE.Quaternion()\r\n                            .setFromEuler(new THREE.Euler(X,\r\n                                Y,\r\n                                Z,\r\n                                'XYZ'\r\n                            ));\r\n                        group.quaternion.multiplyQuaternions(deltaRotationQuaternion, group.quaternion);\r\n                        prePositon.y = position.y;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                // keyhandler end\r\n\r\n\r\n                function onWindowResize() {\r\n                    camera.aspect = window.innerWidth / window.innerHeight;\r\n                    camera.updateProjectionMatrix();\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n                };\r\n\r\n                function animate() {\r\n                    requestAnimationFrame(animate);\r\n                    render();\r\n                    update();\r\n                    TWEEN.update();\r\n                };\r\n\r\n                // animationLogic\r\n                function onDocumentMouseDown(event) {\r\n                    if (!animationComplete || event.target != $element.find('.mainScreen')[0]) {\r\n                        return;\r\n                    }\r\n                    //event.preventDefault();\r\n                    container.addEventListener('mousemove', onDocumentMouseMove, false);\r\n                    container.addEventListener('mouseup', onDocumentMouseUp, false);\r\n\r\n                    mouseDown = true;\r\n\r\n                    startPoint = {\r\n                        x: event.clientX,\r\n                        y: event.clientY\r\n                    };\r\n\r\n                    rotateStartPoint = rotateEndPoint = projectOnTrackball(0, 0);\r\n                };\r\n\r\n                function onMouseMove(e) {\r\n                    canvasMouseMove = true;\r\n                    event.preventDefault();\r\n                    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n                    mouse.clientX = event.clientX;\r\n                    mouse.clientY = event.clientY;\r\n                };\r\n\r\n                function onDocumentMouseMove(event) {\r\n                    mousemoved = true;\r\n\r\n                    deltaX = event.x - startPoint.x;\r\n                    deltaY = event.y - startPoint.y;\r\n\r\n                    handleRotationMouse();\r\n\r\n                    startPoint.x = event.x;\r\n                    startPoint.y = event.y;\r\n\r\n                    lastMoveTimestamp = new Date();\r\n                };\r\n\r\n                function onDocumentMouseUp(event) {\r\n                    highlightCublet(previousInt);\r\n                    if (new Date().getTime() - (lastMoveTimestamp ? lastMoveTimestamp.getTime() : 0) > moveReleaseTimeDelta) {\r\n                        deltaX = event.x - startPoint.x;\r\n                        deltaY = event.y - startPoint.y;\r\n                    }\r\n\r\n                    mouseDown = false;\r\n\r\n                    container.removeEventListener('mousemove', onDocumentMouseMove, false);\r\n                    container.removeEventListener('mouseup', onDocumentMouseUp, false);\r\n                    if (mousemoved && animationComplete) {\r\n                        // resetCube();\r\n                    }\r\n                    mousemoved = false;\r\n\r\n\r\n                    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\r\n                    vector.unproject(camera);\r\n                    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n\r\n                    // create an array containing all objects in the scene with which the ray intersects\r\n                    var intersects = ray.intersectObjects(scene.children[2].children);\r\n\r\n                    // if there is one (or more) intersections\r\n                    if (intersects.length > 0 && (selectedCublet == void 0 || intersects[0].object.name != selectedCublet.name)) {\r\n                        popInCube(INTERSECTED);\r\n                        popOutCube(INTERSECTED);\r\n                        //console.log(\"route to: \" + intersects[0].object.name);\r\n                        \r\n                    }\r\n                };\r\n\r\n\r\n                function projectOnTrackball(touchX, touchY) {\r\n                    var mouseOnBall = new THREE.Vector3();\r\n\r\n                    mouseOnBall.set(\r\n                        clamp(touchX / windowHalfX, -1, 1), clamp(-touchY / windowHalfY, -1, 1),\r\n                        0.0\r\n                    );\r\n\r\n                    var length = mouseOnBall.length();\r\n\r\n                    if (length > 1.0) {\r\n                        mouseOnBall.normalize();\r\n                    } else {\r\n                        mouseOnBall.z = Math.sqrt(1.0 - length * length);\r\n                    }\r\n\r\n                    return mouseOnBall;\r\n                };\r\n\r\n                function rotateMatrix(rotateStart, rotateEnd) {\r\n                    var axis = new THREE.Vector3(),\r\n                        quaternion = new THREE.Quaternion(),\r\n                        angle;\r\n\r\n                    angle = Math.acos(rotateStart.dot(rotateEnd) / rotateStart.length() / rotateEnd.length());\r\n\r\n                    if (angle) {\r\n                        axis.crossVectors(rotateStart, rotateEnd).normalize();\r\n                        angle *= rotationSpeed;\r\n                        quaternion.setFromAxisAngle(axis, angle);\r\n                    }\r\n                    return quaternion;\r\n                };\r\n\r\n                function clamp(value, min, max) {\r\n                    return Math.min(Math.max(value, min), max);\r\n                };\r\n                // animationLogicEnds\r\n\r\n\r\n                function render() {\r\n                    TWEEN.update();\r\n                    if (!mouseDown) {\r\n                        var drag = 0.95,\r\n                            minDelta = 0.05;\r\n\r\n                        if (deltaX < -minDelta || deltaX > minDelta) {\r\n                            deltaX *= drag;\r\n                        } else {\r\n                            deltaX = 0;\r\n                        }\r\n\r\n                        if (deltaY < -minDelta || deltaY > minDelta) {\r\n                            deltaY *= drag;\r\n                        } else {\r\n                            deltaY = 0;\r\n                        }\r\n\r\n                        // handleRotationMouse();\r\n                    }\r\n                    renderer.render(scene, camera);\r\n                };\r\n\r\n\r\n                var handleRotationMouse = function() {\r\n                    rotateEndPoint = projectOnTrackball(deltaX, deltaY, -1 * deltaX);\r\n                    var rotateQuaternion = rotateMatrix(rotateStartPoint, rotateEndPoint);\r\n                    curQuaternion = group.quaternion;\r\n                    curQuaternion.multiplyQuaternions(rotateQuaternion, curQuaternion);\r\n                    curQuaternion.normalize();\r\n                    group.setRotationFromQuaternion(curQuaternion);\r\n                    rotateEndPoint = rotateStartPoint;\r\n                };\r\n\r\n                function resetCube() {\r\n                    var position = group.rotation;\r\n                    animateResetRotation(Math.sign(position.x), Math.sign(position.y), Math.sign(position.z), group.rotation.x, group.rotation.y, group.rotation.z);\r\n                    group.updateMatrix();\r\n                };\r\n\r\n                function animateResetRotation(xDirection, yDirection, zDirection, anglex, angley, anglez) {\r\n                    var PI = Math.PI,\r\n                        position = { x: anglex, y: angley, z: anglez },\r\n                        nearesrXGap = Math.abs(anglex % (PI / 2)) > PI / 4 ? anglex + xDirection * (PI / 2 - Math.abs(anglex % (PI / 2))) : anglex - anglex % (PI / 2),\r\n                        nearesrYGap = Math.abs(angley % (PI / 2)) > PI / 4 ? angley + yDirection * (PI / 2 - Math.abs(angley % (PI / 2))) : angley - angley % (PI / 2),\r\n                        nearesrZGap = Math.abs(anglez % (PI / 2)) > PI / 4 ? anglez + zDirection * (PI / 2 - Math.abs(anglez % (PI / 2))) : anglez - anglez % (PI / 2),\r\n                        target = { x: nearesrXGap, y: nearesrYGap, z: nearesrZGap },\r\n                        tween = new TWEEN.Tween(position).to(target, 200),\r\n                        prePositon = { x: anglex, y: anglex, z: anglez },\r\n                        X, Y, Z;\r\n\r\n                    // tween.easing(TWEEN.Easing.Linear.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.x - prePositon.x;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        }\r\n                        if (yDirection) {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n                        if (zDirection) {\r\n                            Z = position.z - prePositon.z;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        group.rotation.x = position.x;\r\n                        group.rotation.y = position.y;\r\n                        group.rotation.z = position.z;\r\n                        prePositon.x = position.x;\r\n                        prePositon.y = position.y;\r\n                        prePositon.z = position.z;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                //$element.find(\"#search-cublet\").on(\"click\", function (e) {\r\n                //     searchElement();\r\n                //});\r\n\r\n                scope.searchElement = function (requestedID) {\r\n                    if (scope.options.length > 8) {\r\n                        switch (requestedID) {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                            case 9:\r\n                                animateFindElementRotation(0, 0, 0, 0, 0, 0, requestedID);\r\n                                break;\r\n                            case 16:\r\n                            case 17:\r\n                            case 18:\r\n                            case 19:\r\n                            case 20:\r\n                            case 21:\r\n                                animateFindElementRotation(1, 0, 1, Math.PI, 0, Math.PI, requestedID);\r\n                                break;\r\n                            case 22:\r\n                            case 23:\r\n                            case 24:\r\n                                animateFindElementRotation(0, 1, 0, 0, Math.PI / 2, 0, requestedID);\r\n                                break;\r\n                            case 10:\r\n                            case 11:\r\n                            case 12:\r\n                            case 13:\r\n                            case 14:\r\n                            case 15:\r\n                                animateFindElementRotation(0, -1, 0, 0, -Math.PI / 2, 0, requestedID);\r\n                                break;\r\n                            case 25:\r\n                                animateFindElementRotation(1, 0, 0, Math.PI / 2, 0, 0, requestedID);\r\n                                break;\r\n                            case 26:\r\n                                animateFindElementRotation(-1, 0, 0, -Math.PI / 2, 0, 0, requestedID);\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        switch (requestedID) {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                                animateFindElementRotation(0, 0, 0, 0, 0, 0, requestedID);\r\n                                break;\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                                animateFindElementRotation(1, 0, 1, Math.PI, 0, Math.PI, requestedID);\r\n                                break;\r\n                        }\r\n                    }\r\n                    \r\n                };\r\n\r\n                function animateFindElementRotation(xDirection, yDirection, zDirection, anglex, angley, anglez, requestedID) {\r\n                    var INTERSECTED = scene.children[2].children[parseInt(requestedID) - 1],\r\n                        currentAngles = group.rotation,\r\n                        PI = Math.PI,\r\n                        position = { x: currentAngles.x, y: currentAngles.y, z: currentAngles.z },\r\n                        target = { x: anglex, y: angley, z: anglez },\r\n                        tween = new TWEEN.Tween(position).to(target, 200),\r\n                        prePositon = { x: anglex, y: anglex, z: anglez },\r\n                        X, Y, Z;\r\n\r\n                    highlightCublet(previousInt);\r\n                    //if (previousInt == void 0 || previousInt.dataID !== requestedID) {\r\n                        animateCubePopup(INTERSECTED, true);\r\n                        popInCube(INTERSECTED);\r\n                        popOutCube(INTERSECTED);\r\n                    //}\r\n\r\n                    previousInt = INTERSECTED;\r\n\r\n                    // tween.easing(TWEEN.Easing.Linear.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.x - prePositon.x;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        }\r\n                        if (yDirection) {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n                        if (zDirection) {\r\n                            Z = position.z - prePositon.z;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        group.rotation.x = position.x;\r\n                        group.rotation.y = position.y;\r\n                        group.rotation.z = position.z;\r\n                        prePositon.x = position.x;\r\n                        prePositon.y = position.y;\r\n                        prePositon.z = position.z;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                // highlight logic\r\n                function update() {\r\n                    if (!animationComplete || mouseDown || !canvasMouseMove) {\r\n                        return;\r\n                    }\r\n                    // find intersections\r\n\r\n                    // create a Ray with origin at the mouse position\r\n                    //   and direction into the scene (camera direction)\r\n                    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\r\n                    vector.unproject(camera);\r\n                    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n\r\n                    // create an array containing all objects in the scene with which the ray intersects\r\n                    var intersects = ray.intersectObjects(scene.children[2].children);\r\n\r\n                    // INTERSECTED = the object in the scene currently closest to the camera \r\n                    //      and intersected by the Ray projected from the mouse position    \r\n\r\n                    // if there is one (or more) intersections\r\n                    if (intersects.length > 0) {\r\n                        // if the closest object intersected is not the currently stored intersection object\r\n                        if (intersects[0].object != INTERSECTED) {\r\n\r\n                            // restore previous intersection object (if it exists) to its original color\r\n                            if (INTERSECTED && (selectedCublet == void 0 || INTERSECTED.id != selectedCublet.id) && !INTERSECTED.disable) {\r\n                                INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\r\n                            }\r\n\r\n\r\n                            // store reference to closest object as current intersection object\r\n                            INTERSECTED = intersects[0].object;\r\n                            if (INTERSECTED.disable) {\r\n                                return;\r\n                            }\r\n\r\n                            if (previousInt !== void 0 && INTERSECTED.name !== previousInt.name && previousInt.hovered) {\r\n                                highlightCublet(previousInt);\r\n                            }\r\n\r\n                            if (previousInt == void 0 || INTERSECTED.name !== previousInt.name) {\r\n                                // store color of closest object (for later restoration)\r\n                                canvasMouseMove = false;\r\n\r\n                                animateCubePopup(INTERSECTED);\r\n                            }\r\n                        }\r\n                    } else // there are no intersections\r\n                    {\r\n                        INTERSECTED = null;\r\n                    }\r\n                };\r\n\r\n                var getIntersect = function (INTERSECTED, camera, jqdiv) {\r\n\r\n\r\n                    var pos = INTERSECTED.position.clone(),\r\n                    projScreenMat = new THREE.Matrix4();\r\n                    projScreenMat.multiply(camera.projectionMatrix, camera.matrixWorldInverse);\r\n                    projScreenMat.multiplyVector3(pos);\r\n\r\n                    return {\r\n                        \"x\": (pos.x + 1) * jqdiv.width() / 2 + jqdiv.offset().left,\r\n                        \"y\": (-pos.y + 1) * jqdiv.height() / 2 + jqdiv.offset().top\r\n                    };\r\n                };\r\n\r\n\r\n                function animateCubePopup(INTERSECTED, fromSerach) {\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: 20 },\r\n                        tween = new TWEEN.Tween(position).to(target, 100),\r\n                        prePositon = { x: 0, y: 0 },\r\n                        $mainScreen = $element.find(\".mainScreen\"),\r\n                        intersect = {\r\n                            x: mouse.clientX + 10,\r\n                            y: mouse.clientY\r\n                        };\r\n\r\n                        if (fromSerach) {\r\n                            intersect = getIntersect(INTERSECTED, camera, $element);\r\n                        }\r\n\r\n                    $mainScreen.attr(\"interesect\", JSON.stringify(intersect))\r\n                    .attr(\"tooltipActive\", true)\r\n                    .attr(\"message\", \"Cublet <b>\" + INTERSECTED.name + \"</b>\")\r\n                    .trigger(\"interesected\");\r\n\r\n                    INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\r\n                    INTERSECTED.hovered = true;\r\n                    // set a new color for closest object\r\n                    if (!INTERSECTED.selected) {\r\n                        INTERSECTED.material.color.setHex(0xa49cfb);\r\n                    } else {\r\n                        INTERSECTED.material.color.setHex(0xffa600);\r\n                    }\r\n                    previousInt = INTERSECTED;\r\n                };\r\n\r\n                function highlightCublet(cublet) {\r\n                    $element.find(\".mainScreen\").attr(\"tooltipActive\", false);\r\n                    if (cublet !== void 0 && cublet.hovered) {\r\n                        if (selectedCublet == void 0 || previousInt.id != selectedCublet.id) {\r\n                            previousInt.material.color.setHex(previousInt.currentHex);\r\n                            previousInt.hovered = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function popOutCube(cublet) {\r\n                    if (cublet.disable) {\r\n                        return;\r\n                    }\r\n                    animationComplete = false;\r\n                    previousInt.material.color.setHex(0xffa600);\r\n                    cublet.selected = true;\r\n                    scope.selectedCube.select = _.where(scope.cubeletList, { id: cublet.dataID })[0];\r\n\r\n\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: 20 },\r\n                        tween = new TWEEN.Tween(position).to(target, 100),\r\n                        prePositon = { x: 0, y: 0 };\r\n                    \r\n                    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        cublet.position.x += Math.sign(cublet.position.x) * (position.y - prePositon.y);\r\n                        cublet.position.y += Math.sign(cublet.position.y) * (position.y - prePositon.y);\r\n                        cublet.position.z += Math.sign(cublet.position.z) * (position.y - prePositon.y);\r\n                        selectedCublet = cublet;\r\n                        prePositon.y = position.y;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                        if(!scope.proceed) {\r\n                            scope.proceed = true;\r\n                            enableProceed();\r\n                            scope.$apply();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function popInCube(currentSelection) {\r\n                    if (selectedCublet == void 0 || currentSelection.disable) {\r\n                        return;\r\n                    }\r\n                    selectedCublet.selected = false;\r\n                    selectedCublet.material.color.setHex(7324411);\r\n                    selectedCublet.position.x -= Math.sign(selectedCublet.position.x) * 20;\r\n                    selectedCublet.position.y -= Math.sign(selectedCublet.position.y) * 20;\r\n                    selectedCublet.position.z -= Math.sign(selectedCublet.position.z) * 20;\r\n                }\r\n\r\n                if (scope.selectedCube.select)\r\n                    scope.searchElement(scope.selectedCube.select.id);\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/searchableCube/searchableCubeTemplate.html'\r\n        };\r\n\r\n}]);\r\n})();\n(function () {\n    'use strict';\n    angular.module('SMART2').directive('smartBack', ['$timeout','persistenceService', '$rootScope', function ($timeout, persistenceService, $rootScope) {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                callback: \"&\"\n            },\n            link: function (scope, element, attrs) {\n               \n                //click callback\n                var callback = scope.$eval(scope.callback);\n                \n                if(!persistenceService.nPlusOne.historyIsEmpty()){\n                    scope.show=true;\n                }\n                \n                //Local click binding\n                scope.goBackClick = function (e) {\r\n                    if (!scope.disable) {\r\n                        if (angular.isFunction(callback)) {\r\n                            callback(e)\r\n                        };\n                        persistenceService.redirectToPreviousNode();\r\n                    }\r\n                };\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartBack/smartBackTemplate.html'\n        };\n    }]);\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('browserSniffing', [function () {\r\n        var ua = navigator.userAgent, tem,\r\n                   old_ie = ua.indexOf('MSIE '), //IE browser version less than 11\r\n                    new_ie = ua.indexOf('Trident/'), //IE browser version greater or equal to 11\r\n              // M = ua.match(/(opera|chrome|safari|firefox|msie|android|ipad|iphone|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n\r\n        //For checking if browser is from Internet Explorer family\r\n        if (/trident/i.test(M[1]) || /MSIE/i.test(M[1])) {\r\n            tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\r\n            if (tem.length == 0) {\r\n                return 'IE ' + (M[2] || '');\r\n            } else {\r\n                return 'IE ' + (tem[1] || '');\r\n            }\r\n        }\r\n        if (M[1] === 'Chrome') {\r\n            tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\r\n            if (tem != null)\r\n                return tem.slice(1).join(' ').replace('OPR', 'Opera');\r\n        }\r\n        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\r\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null)\r\n            M.splice(1, 1, tem[1]);\r\n        return M; // returning browser name and browser version\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartBrowserSniffing', ['$window', '$timeout', '$translate', 'browserSniffing', 'notification', 'APPCONSTANTS', 'favoriteOps', function ($window, $timeout, $translate, browserSniffing, notification, APPCONSTANTS, favoriteOps) {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                showSniffing: '@',\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartBrowserSniffing/browerSniffingTemplate.html',\r\n            link: function (scope, element) {\r\n                var showSniffing = (scope.showSniffing == 'true') ? true : false;\r\n                scope.image960 = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/960-error-trans.png\";\r\n                scope.image1920 = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/1920-error-trans.png\";\r\n                var iconIE = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/IE.png\",\r\n                    iconChrome = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/Chrome.png\";\r\n                if (showSniffing == true) {\r\n                    $timeout(function () {\r\n                        scope.execBrowserSniffing();\r\n                    });\r\n\r\n                    angular.element($window).bind('resize', function () {\r\n                        scope.execBrowserSniffing();\r\n                    });\r\n\r\n                    scope.Screen960 = false;\r\n                    scope.Screen1920 = false;\r\n\r\n                    scope.execBrowserSniffing = function () {\r\n                        scope.isShowSniffer = favoriteOps.getSnifferFlag && favoriteOps.getSnifferFlag();\r\n                        if (!scope.isShowSniffer) {\r\n                            scope.sniffTemplateUrl = \"\";\r\n                            angular.element('html').css('overflow', 'hidden');\r\n\r\n                            if (angular.element($window).innerWidth() < 960 || angular.element($window).innerWidth() > 1920) {\r\n                                if (angular.element($window).innerWidth() < 960) {\r\n                                    scope.Screen960 = true;\r\n                                    scope.sniffTemplateUrl = \"shared/directives/uiElements/smartBrowserSniffing/Browse960.html\";\r\n                                    element.addClass('active');\r\n                                    scope.$apply();\r\n                                }\r\n                                if (angular.element($window).innerWidth() > 1920) {\r\n                                    scope.Screen1920 = true;\r\n                                    scope.sniffTemplateUrl = \"shared/directives/uiElements/smartBrowserSniffing/Browse1920.html\";\r\n                                    element.addClass('active');\r\n                                    scope.$apply();\r\n                                }\r\n                            }\r\n                            else {\r\n                                element.removeClass('active');\r\n                                angular.element('html').removeAttr('style');\r\n                            }\r\n                            angular.element('.sniffingContainer').animate({ scrollTop: 1000 }, 'slow');\r\n                        }\r\n                    }\r\n\r\n                    scope.onChange = function (isTrue) {\r\n                        scope.isShowSniffer = isTrue;\r\n                    }\r\n\r\n                    scope.hideSniffingOverlay = function () {\r\n                        scope.Screen1920 = false;\r\n                        scope.Screen960 = false;\r\n                        element.removeClass('active');\r\n                        angular.element('html').removeAttr('style');\r\n                        favoriteOps.setSnifferFlag(scope.isShowSniffer);\r\n                    }\r\n                    if (!(typeof browserSniffing === 'object')) {\r\n                        browserSniffing = browserSniffing.split(' ');\r\n                    }\r\n                    var browserDetail = browserSniffing;\r\n\r\n                    scope.remindOptions = [{\r\n                        \"title\": \"30 Days\"\r\n                    }, {\r\n                        \"title\": \"15 Days\"\r\n                    }];\r\n                    scope.selectedDate = { \"title\": \"30 Days\" };\r\n\r\n                    var unsupportedBrowserVersion = {\r\n                        type: \"unsupportedBrowserVersion\",\r\n                        isMultipleCheck: true,\r\n                        titleTextColor: \"browser-version-header-text\",\r\n                        buttons: [\r\n                            {\r\n                                title: $translate.instant('updateNowBtn'),\r\n                                result: \"Update Now\"\r\n                            },\r\n                        {\r\n                            title: $translate.instant('dismissLink'),\r\n                            result: \"dismiss\"\r\n                        }\r\n                        ],\r\n                        multipleCheckList: [{\r\n                            type: \"select\",\r\n                            checkContext: scope.selectedDate,\r\n                            options: scope.remindOptions,\r\n                            model: scope.selectedDate,\r\n                            preSelected: scope.selectedDate,\r\n                            header: $translate.instant('yourCurrentBrowser')\r\n                        }]\r\n                    };\r\n\r\n                    var unsupportedBrowser = {\r\n                        type: \"unsupportedBrowser\",\r\n                        isMultipleCheck: true,\r\n                        //message: \"<em>\" + browserDetail[0] + \"</em> \" + $translate.instant(\"browserIncompatibleMsg\") + \"<ul class=\\\"browser-list\\\"><li><a href=\\\"https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD&gclid=EAIaIQobChMIuPufvL320gIVwpe9Ch3VhQUtEAAYASAAEgJ8ifD_BwE\\\" target=\\\"_blank\\\"><img src=\" + iconChrome + \" /><p>\" + $translate.instant('broswerChrome') + \"</p></a></li><li><a href=\\\"https://www.microsoft.com/en-in/download/Internet-Explorer-11-for-Windows-7-details.aspx\\\" target=\\\"_blank\\\"><img src=\" + iconIE + \" /><p>\" + $translate.instant('browserInterExplorer') + \"</p></a></li></ul>\",\r\n                        titleTextColor: \"browser-unsupported-header-text\",\r\n                        buttons: [\r\n                            {\r\n                                title: $translate.instant('dismissLink'),\r\n                                result: \"dismiss\"\r\n                            }\r\n                        ],\r\n                        multipleCheckList: [{\r\n                            type: \"select\",\r\n                            checkContext: scope.selectedDate,\r\n                            options: scope.remindOptions,\r\n                            model: scope.selectedDate,\r\n                            preSelected: scope.selectedDate,\r\n                            header: \"<em>\" + browserDetail[0] + \"</em> \" + $translate.instant(\"browserIncompatibleMsg\") + \"<ul class=\\\"browser-list\\\"><li><a href=\\\"https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD&gclid=EAIaIQobChMIuPufvL320gIVwpe9Ch3VhQUtEAAYASAAEgJ8ifD_BwE\\\" target=\\\"_blank\\\"><img src=\" + iconChrome + \" /><p>\" + $translate.instant('broswerChrome') + \"</p></a></li><li><a href=\\\"https://www.microsoft.com/en-in/download/Internet-Explorer-11-for-Windows-7-details.aspx\\\" target=\\\"_blank\\\"><img src=\" + iconIE + \" /><p>\" + $translate.instant('browserInterExplorer') + \"</p></a></li></ul>\",\r\n                        }]\r\n                    };\r\n\r\n                    var standalone = window.navigator.standalone,\r\n                    userAgent = window.navigator.userAgent.toLowerCase(),\r\n                    mobile = /iphone|ipod|ipad|android/.test(userAgent);\r\n                    if (mobile) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        if ((browserSniffing[0] == \"Chrome\" && browserSniffing[1] < 45) ||\r\n                            (browserSniffing[0] == \"IE\" && browserSniffing[1] < 11)) {\r\n                            notification.notify(unsupportedBrowserVersion, function (result) {\r\n                            });\r\n                        }\r\n\r\n                        if ((browserSniffing[0] != \"Chrome\" && browserSniffing[0] != \"IE\")) {\r\n                            notification.notify(unsupportedBrowser, function (result) { });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();\n(function () {\n    'use strict';\n    angular.module('SMART2').directive('smartButton', ['$timeout', 'persistenceService', function ($timeout, persistenceService) {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                callback: \"&\",\n                onClick: \"&\",\n                config: \"=\",\n                backgroundColor: \"=\",\n                fabConfig: \"=\",\n                flat: \"=\",\n                disable: \"=\",\n                callbackParams: \"=\",\n                buttonType: \"=\"\n            },\n            link: function (scope, element, attrs) {\n                //check is floating\n                scope.isFloating = (attrs.floating) ? scope.$eval(attrs.floating) : false;\n\n                //check is large\n                scope.isLarge = (attrs.large) ? scope.$eval(attrs.large) : false;\n\n                //click callback\n                var callback = scope.$eval(scope.callback);\n           \n                //Local click binding\n                scope.clickCallback = function (e) {\n                    e.goBack= persistenceService.redirectToPreviousNode;\n                    if (!scope.buttonType  || (scope.buttonType && scope.buttonType != \"Cancel\")) {\r\n                        if (!scope.disable) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback(e, scope.callbackParams)\r\n                            };\r\n                            scope.onClick({ $event: e });\r\n                        }\r\n                    }\n                    else {\r\n                        persistenceService.redirectToPreviousNode();\r\n                    }\n                };\n\n                attrs.$observe('ngClass', function (value) {\n                    scope.styleClass = value;\n                });\n            },\n            templateUrl: 'shared/directives/uiElements/smartButton/smartButtonTemplate.html'\n        };\n    }]);\n})();\n  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Checkbox\r\n   * @description This directive is useful for creating a checkbox.\r\n   *\r\n   * @attr {String} label\r\n   *    Label to be displayed for identification of this ui element\r\n   * @attr {Boolean} ng-model\r\n   *    Checkbox's default state (selected or unselected)\r\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\r\n   * @attr {Boolean} disable\r\n   *    If value of this attribute is set to true, checkbox will not be clickable\r\n   * @attr {Boolean} focus \r\n   *    If set to true, this ui element will be focused\r\n   * @attr {Boolean} validate\r\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n   * @attr {Array} rules \r\n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n   * @attr {String} error-message \r\n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n   * @attr {Boolean} is-mandatory \r\n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n   * @attr {Boolean} is-visible \r\n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-change\r\n   *    Callback function when checkbox state is changed \r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"isUrgent\": true\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"Urgent\",\r\n                                        \"type\": \"checkbox\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"isUrgent\",\r\n                                        \"colspan\": 1,\r\n                                        \"onChange\": \"onChange\"  //  controller function ,\r\n                                        \"attributes\": {\r\n                                            \"fill\": true\r\n                                        },\r\n                                        \"rules\": [\r\n                                            { \r\n                                                \"rule\": \"this == true\", \r\n                                                \"error\": \"Checkbox should not be selected\" \r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n   \r\n   * @example\r\n   Static:\r\n   Controller:\r\n       $scope.isUrgent = true;\r\n       $scope.onChange = function(isUrgent) {\r\n           console.log(isUrgent);\r\n       };\r\n   Usage:\r\n       <smart-checkbox label=\"Urgent\" ng-model=\"isUrgent\" on-change=\"onChange(isUrgent)\"></smart-checkbox>\r\n       \r\n   * @example\r\n   Disabled checkbox:\r\n   <smart-checkbox disable=\"true\"></smart-checkbox>     \r\n   */\r\n  \r\n\r\n(function() {\r\n    'use strict';\r\n    var checkboxCounter = 0;\r\n    \r\n    angular.module('SMART2').directive('smartCheckbox', ['$timeout', 'ScrollTo', 'RuleEngine', function ($timeout, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                //ngModel: '=?',\r\n                ngModelResolve: '&',\r\n                disable: '@',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                label: '@',\r\n                minHeight: '@',\r\n                fill: '@',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                errorMessage: '@',\r\n                onChange: '&',\r\n                removable: '@',\r\n                showTooltip: '@',\r\n                tooltipPosition: '@',\r\n                showinfo: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                checkboxCounter++;\r\n                scope.checkBoxId = \"checkbox-\" + checkboxCounter;\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n                scope.showTooltip = (scope.showTooltip == undefined || scope.showTooltip == null) ? false : scope.showTooltip;\r\n                scope.fill = scope.$eval(scope.fill) == undefined ? true : scope.$eval(scope.fill);\r\n                var checkboxEle = element.find(\":checkbox\");\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\r\n\r\n\r\n                /*\r\n                 * Focus field when focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate field whene validate is set to true\r\n                 */\r\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(rules[i], function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                scope.ngChange = function () {\r\n                    if (attrs.ngModelResolve) {\r\n                        var isChecked = checkboxEle.prop('checked');\r\n                        checkboxEle.prop('checked', !isChecked);\r\n                        ngModelCtrl.$setViewValue(!isChecked);\r\n                        scope.ngModel = !isChecked;\r\n\r\n                        scope.ngModelResolve({\r\n                            $event: {\r\n                                isChecked: !checkboxEle.prop('checked'),\r\n                                resolveFun: function (checked) {\r\n                                    checkboxEle.prop('checked', checked);\r\n                                    ngModelCtrl.$setViewValue(checked);\r\n                                    scope.ngModel = checked;\r\n                                    updateView();\r\n                                    scope.validateRules();\r\n                                    var timeout = $timeout(function () {\r\n                                        scope.onChange();\r\n                                        $timeout.cancel(timeout);\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        updateView();\r\n                        scope.validateRules();\r\n                        var timeout = $timeout(function () {\r\n                            scope.onChange();\r\n                            $timeout.cancel(timeout);\r\n                        });\r\n                    };\r\n                };\r\n\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                    element.remove();\r\n                    scope = null;\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartCheckBox/smartCheckBoxTemplate.html'\r\n        };\r\n    }]);\r\n})();\r\n\nangular.module('SMART2').directive('smartCultureDate', ['APPCONSTANTS', function (APPCONSTANTS) {\r\n    \"use strict\";\r\n    var monthAbr = {\r\n        january: 'Jan',\r\n        february: 'Feb',\r\n        march: 'Mar',\r\n        april: 'Apr',\r\n        may: 'May',\r\n        june: 'Jun',\r\n        july: 'Jul',\r\n        august: 'Aug',\r\n        september: 'Sep',\r\n        october: 'Oct',\r\n        november: 'Nov',\r\n        december: 'Dec'\r\n    };\r\n    return {\r\n        restrict: 'AE',\r\n        scope: {\r\n            ngModel: '=ngModel',\r\n            enableShortMonth: '@'\r\n        },\r\n        replace: true,\r\n        link: function ($scope, elem, attr) {\r\n            var matchExpression = /^[0-9]+$/;\r\n            var cultureCode = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n            //var currencyCode = APPCONSTANTS.userPreferences.UserBasicDetails.DefaultCurrencyCode;\r\n\r\n            var formatNumber = function () {\r\n                if (attr.type == 'number' && $scope.ngModel != undefined && $scope.ngModel != '') {\r\n                    if (typeof $scope.ngModel == \"string\") {\r\n                        var tempNumb = $scope.ngModel.replace(/,/g, \"\");\r\n                        if (tempNumb.indexOf('.') !== -1) {\r\n                            tempNumb = $scope.ngModel.replace(/\\./g, '');\r\n                        }\r\n                        if (tempNumb.indexOf('') !== -1) {\r\n                            tempNumb = $scope.ngModel.replace(/\\s/g, '');\r\n                        }\r\n                        $scope.ngModel = parseInt(tempNumb);\r\n                    }\r\n                    if (cultureCode == 'pt-PT') {\r\n                        $scope.ngModel = $scope.ngModel.toLocaleString(cultureCode).replace(/\\s+/g, '.');\r\n                    } else {\r\n                        $scope.ngModel = $scope.ngModel.toLocaleString(cultureCode);\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (attr.type == 'date' && $scope.ngModel != undefined && $scope.ngModel != '') {\r\n                if (matchExpression.test($scope.ngModel)) {\r\n                    if (attr.showTime == 'true') {\r\n                        $scope.ngModel = moment.unix(new Date(JSON.parse($scope.ngModel)).getTime() / 1000).format(moment.localeData()._longDateFormat.L + \" \" + 'HH:mm');\r\n                    } else {\r\n                        $scope.ngModel = moment.unix(new Date(JSON.parse($scope.ngModel)).getTime() / 1000).format(moment.localeData()._longDateFormat.L);\r\n                    }\r\n                } else {\r\n                    if (attr.showTime == 'true') {\r\n                        $scope.ngModel = moment.unix(new Date($scope.ngModel).getTime() / 1000).format(moment.localeData()._longDateFormat.LL + \" \" + 'HH:mm');\r\n                    } else {\r\n                        $scope.ngModel = moment.unix(new Date($scope.ngModel).getTime() / 1000).format(moment.localeData()._longDateFormat.LL);\r\n                    }\r\n                }\r\n\r\n                if ($scope.enableShortMonth == true && $scope.ngModel) {\r\n                    for (var i = 0, abr = Object.keys(monthAbr) ; i < abr.length; i++) {\r\n                        if ($scope.ngModel.search(new RegExp(abr[i], 'gi')) > -1) {\r\n                            $scope.ngModel = $scope.ngModel.replace(new RegExp(abr[i], 'gi'), monthAbr[abr[i]]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            formatNumber();\r\n\r\n            $scope.$watch('ngModel', function (newValue) {\r\n                if (newValue) formatNumber();\r\n            });\r\n\r\n        },\r\n        templateUrl: 'shared/directives/uiElements/smartCultureDate/smartCultureDate.html',\r\n    };\r\n}]);\n(function () {\r\n    'use strict';\n\n    var startIndex;\n\n    angular.module('SMART2').directive('smartSortable', [function () {\r\n        return {\r\n            restrict: 'A',\n            scope: {\r\n                onSort: '&',\r\n                onDrag: '&'\r\n            },\n            link: function (scope, element, attrs) {\r\n                element.sortable({\r\n                    placeholder: attrs.placeholder ? attrs.placeholder : \"drop-hover\",\r\n                    helper: attrs.helper ? attrs.helper : \"original\",\r\n                    handle: \".collapsible-header-drag-icon\",\r\n                    items: \">*:not(.disable-sort-item)\",\r\n                    cancel: \".disable-sort-item\",\r\n                    connectWith: attrs.connectWith ? attrs.connectWith : \"\",\r\n                    appendTo: attrs.appendTo ? attrs.appendTo : \"parent\",\r\n                    containment: attrs.containment ? attrs.containment : \"parent\",\r\n                    tolerance: attrs.tolerance ? attrs.tolerance : \"intersect\",\r\n                    start: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', 'hidden');\r\n                        }\r\n                        startIndex = ui.item.index();\r\n                        if (ui.placeholder) {\r\n                            ui.placeholder.height(ui.item.height()).css(\"width\", ui.item.outerWidth());\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: true\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    stop: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', '');\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: false\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    update: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', '');\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onSort({\r\n                                $event: {\r\n                                    startIndex: startIndex,\r\n                                    endIndex: ui.item.index()\r\n                                }\r\n                            });\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: false\r\n                                }\r\n                            });\r\n                        });\r\n                        if (attrs.swipItem == \"true\") {\r\n                            // swiping element position with each other\r\n                            if (ui.sender) {\r\n                                var el = ui.item.next().length == 1 ? ui.item.next() : ui.item.prev();\r\n                                ui.sender.append(el);\r\n                            }\r\n                        }\r\n                    },\r\n                    sort: function (event, ui) {\r\n                        //console.log({ event, ui })\r\n                        if (attrs.whileSorting == \"true\") {\r\n                            var ele = $(\".slick-list\"),\r\n                                scrollpos = ele.scrollLeft(),\r\n                                main_width = ele.outerWidth(),\r\n                                ew = ui.helper.outerWidth(),\r\n                                elft = ui.helper.offset().left - ele.offset().left,\r\n                                rpos = (main_width - (elft + ew));\r\n                            if (elft < 0) { // left\r\n                                $('.slick-prev').click();\r\n                            } else if (rpos < 0) { // right    \r\n                                $('.slick-next').click();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\n\n    angular.module('SMART2').directive('isDraggable', [function () {\r\n        return {\r\n            restrict: 'A',\n            link: function (scope, element, attrs) {\r\n                attrs.$observe('isDraggable', function (isDraggable) {\r\n                    if (isDraggable != undefined && isDraggable != \"\") {\r\n                        if (isDraggable == 'true' || isDraggable == true) {\r\n                            element.removeClass('disable-sort-item');\r\n                        }\n                        if (isDraggable == 'false' || isDraggable == false) {\r\n                            element.addClass('disable-sort-item');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\n\n\n\r\n    //var droppableParent;\n\n    ///*\n    // * Highlight droppables on mouse down\n    // */\n    //var highlightDroppableElements = function (currentDraggableElement) {\r\n    //    currentDraggableElement.removeAttr('style').addClass('being-dragged z-index-plus');\n    //    angular.element('.ui-droppable').addClass('being-dropped-on');\r\n    //};\n\n    ///*\n    // * Unhighlight droppables on mouse up\n    // */\n    //var unhighlightDroppableElements = function (currentDraggableElement) {\r\n    //    currentDraggableElement.removeClass('being-dragged z-index-plus');\n    //    angular.element('.ui-droppable').removeClass('being-dropped-on');\r\n    //};\n\n    ///*\n    // *  This directive will handle dragging of portlet\n    // */\n    //angular.module('SMART2').directive('smartDraggable', [function () {\r\n    //    return {\r\n    //        restrict: 'A',\n    //        link: function (scope, element, attrs) {\r\n    //            if (attrs.smartDraggable == 'false' || attrs.smartDraggable == false) {\r\n    //                return;\r\n    //            }\n\n    //            attrs.$observe('enabled', function (isEnabled) {\r\n    //                if (isEnabled != undefined) {\r\n    //                    if (isEnabled == 'true' || isEnabled == true) {\r\n    //                        element.draggable('enable');\r\n    //                    }\n    //                    if (isEnabled == 'false' || isEnabled == false) {\r\n    //                        element.draggable('disable');\r\n    //                    }\r\n    //                }\r\n    //            });\n\n    //            /*\n    //             *  Make portlet dragging enabled\n    //             */\n    //            element.draggable({\r\n    //                revert: 'invalid',\n    //                handle: '.collapsible-header-drag-icon',\n    //                revertDuration: 200,\n    //                delay: 200,\n    //                appendTo: 'body',\r\n    //                containment: 'body',\r\n    //                start: function () {\r\n    //                    droppableParent = $(this).parent();\n    //                    $(droppableParent).addClass('being-dragged z-index-plus');\r\n    //                },\n    //                drag: function (e) {\r\n    //                    if (e.clientX > window.innerWidth - 10 || e.clientX < 10 || e.clientY > window.innerHeight - 10 || e.clientY < 10) {\r\n    //                        $(document).trigger('mouseup');\r\n    //                    }\r\n    //                },\n    //                stop: function () {\r\n    //                    setTimeout(function () {\r\n    //                        $(droppableParent).removeClass('being-dragged z-index-plus');\n    //                        // clearTimeout(dragTimeout);\n    //                    }, 250);\r\n    //                }\r\n    //            });\r\n    //        }\r\n    //    };\r\n    //}]);\n\n\n    ///*\n    // *  This directive will handle dropping of portlet\n    // */\n    //angular.module('SMART2').directive('smartDroppable', ['$compile', '$timeout', function ($compile, $timeout) {\r\n    //    return {\r\n    //        restrict: 'A',\n    //        link: function (scope, element, attrs) {\r\n    //            if (attrs.smartDroppable == 'false' || attrs.smartDroppable == false) {\r\n    //                return;\r\n    //            }\n\n    //            /*\n    //             *  Make portlet dropping enabled\n    //             */\n    //            element.droppable({\r\n    //                hoverClass: 'drop-hover',\n    //                drop: function (event, ui) {\r\n    //                    var draggable = $(ui.draggable[0]),\n    //                        draggableOffset = draggable.offset(),\n    //                        container = $(event.target),\n    //                        containerOffset = container.offset();\n\n    //                    $('.draggable', event.target).appendTo(droppableParent).css({ opacity: 0 }).animate({ opacity: 1 }, 200);\n    //                    draggable.appendTo(container).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ left: 0, top: 0 }, 200);\r\n    //                }\r\n    //            });\r\n    //        }\r\n    //    };\r\n    //}]);\r\n})();\n\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartDropdown', ['$window', '$timeout', 'menuListItemServ', '$focusOnField', function ($window, $timeout, menuListItemServ, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                config: \"@\",\r\n                show: \"@\",\r\n                onHide: \"&\",\r\n                stopProg: \"@\",\r\n                autoClose: \"@\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var islistDropdown;\r\n                var dropDownMenuListItem = function (dropdownContent) {\r\n                    /*dropdown checker*/\r\n                    var liList = dropdownContent.children('li'),\r\n                        liLength = liList.length;\r\n                    if (!liList.attr(\"isItemList\")) {\r\n                       \r\n                        for (var i = 0; i < liLength; i++) {\r\n                            var $this = liList.eq(i),\r\n                                children = $this.children().eq(0);\r\n                            if ($this.children().length == 1 && !$this.hasClass(\"dropdown-content-footer\") && (children.attr(\"ng-click\") != null || children.attr(\"ui-sref\") != null || $this.attr(\"ng-click\") != null)) {\r\n                                islistDropdown = true;\r\n                                break;\r\n                            }\r\n                        };\r\n                        if (islistDropdown == true) {\r\n                            if (liList.last().hasClass(\"dropdown-content-footer\")) {\r\n                                liList.splice(liLength - 1, 1);\r\n                            }\r\n                            menuListItemServ(liList);\r\n                            islistDropdown = false;\r\n                        };\r\n                    }\r\n                    /*dropdown checker end*/\r\n\r\n                },\r\n                keycodeis,\r\n\t\t\t     hideOnTabOut = function (e) {\r\n\t\t\t         if (e.keyCode == 9) {\r\n\t\t\t             keycodeis = e.keyCode;\r\n\t\t\t             window.lastOpenedDropdownConfig.activates.hide().removeClass('active');\r\n\t\t\t             window.lastOpenedDropdownConfig.origin.removeClass(\"active\");\r\n\t\t\t             window.lastOpenedDropdownConfig.activates.unbind(\"keydown\", hideOnTabOut);\r\n\t\t\t         };\r\n\t\t\t     };\r\n\r\n\r\n                //initialization\r\n                var clrTout = setTimeout(function () {\r\n                    var _element = element.find(\".dropdown-button\"),\r\n\t\t\t            closeDDButtons = element.find(\".close-dd\");\r\n                    $(_element).dropdown(angular.extend(typeof scope.$eval(attrs.config) == \"object\" ? scope.$eval(attrs.config) : {}, {\r\n                        onHide: function () {\r\n                            if (keycodeis != 9 && (attrs.singleElementDropdown != undefined)) {\r\n                                window.lastOpenedDropdownConfig.origin.focus();\r\n                                keycodeis = null;\r\n                            }\r\n                            if (scope.autoClose == \"false\") {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }));\r\n                    var ddCloseOff = angular.element(\".dd-close-off\");\r\n                    if (ddCloseOff.length > 0) {\r\n                        ddCloseOff.click(function (e) {\r\n                            var _elem = angular.element(e.target);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(!_elem.hasClass(\"btn-flat\") && !_elem.hasClass(\"btn\") && !_elem.hasClass(\"btn-large\")){\r\n\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t}\r\n                        });\r\n                    }\r\n\r\n                    if (closeDDButtons.length > 0) {\r\n                        closeDDButtons.click(function () {\r\n                            var dd = element.find(\".dropdown-content\");\r\n                            if (dd.length > 0) {\r\n                                scope.hideDropDown(dd);\r\n                            };\r\n                        });\r\n                    }\r\n\r\n                    clearTimeout(clrTout);\r\n                    clrTout = null;\r\n                });\r\n\r\n                if (scope.$eval(attrs.fixed)) {\r\n                    $(element).find('.dropdown-content').addClass('fixeddd');\r\n                    $(element).find('.dropdown-button').bind('click', function (e) {\r\n                        (function ($t) {\r\n                            var clrTout1 = setTimeout(function () {\r\n                                var ddCnt = $t.next('.dropdown-content'),\r\n                                    $tOffsetTop = $t.offset().top - $(window).scrollTop(),\r\n                                    $tOffsetLeft = $t.offset().left - $(window).scrollLeft();\r\n                                ddCnt.css({ 'left': $tOffsetLeft - 2 + 'px', 'top': $tOffsetTop - 2 + 'px' });\r\n                                //ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n                                var lastScrollPosition = $tOffsetTop - 2,\r\n\t\t\t\t\t\t\t\t\tnewScrollPosition = $tOffsetTop - 2;\r\n\r\n                                var ddHgt = ddCnt.css('height'),\r\n                                    winHgt = angular.element(window).height();\r\n                                if ((parseInt(ddHgt) + $tOffsetTop) > winHgt) {\r\n                                    var diffHgt = (parseInt(ddHgt) + $tOffsetTop) - winHgt,\r\n                                        clientOffsetHgt = ($tOffsetTop - diffHgt - 15);\r\n                                    ddCnt.css('top', clientOffsetHgt + 'px');\r\n                                    lastScrollPosition = clientOffsetHgt,\r\n\t\t\t\t\t\t\t\t\tnewScrollPosition = clientOffsetHgt;\r\n                                }\r\n\r\n                                angular.element($window).on(\"scroll.smartFixedSmartDrop\", function () {\r\n                                    newScrollPosition = this.pageYOffset;\r\n                                    if (newScrollPosition !== lastScrollPosition) {\r\n                                        if (ddCnt.hasClass('active')) {\r\n                                            scope.hideDropDown(ddCnt);\r\n                                        }\r\n                                    }\r\n                                    lastScrollPosition = newScrollPosition;\r\n                                });\r\n                                dropDownMenuListItem(ddCnt) // function for apply the tabbing\r\n                                if (attrs.singleElementDropdown != undefined ) {\r\n                                    ddCnt.bind(\"keydown\", hideOnTabOut);\r\n                                }\r\n                                var firstFieldFocus = ddCnt.find(\"a, input, textarea, [tabindex]\").first();\r\n                                $focusOnField(firstFieldFocus);\r\n\r\n                                clearTimeout(clrTout1);\r\n                                clrTout1 = null;\r\n\r\n                            });\r\n                        })($(this));\r\n                    });\r\n\r\n                } else {\r\n\r\n                    // Animation from bottom to top\r\n                    $(element).find('.dropdown-button').bind('click', function (e) {\r\n                        var dropdownContent = $(this).next('.dropdown-content');\r\n                        dropDownMenuListItem(dropdownContent) // function for apply the tabbing\r\n                        if (attrs.singleElementDropdown != undefined) {\r\n                            dropdownContent.bind(\"keydown\", hideOnTabOut);\r\n                        }\r\n\r\n                        $(this).next('.dropdown-content').addClass('ddautoHeight');\r\n                        (function ($t) {\r\n                            var tOut2 = setTimeout(function () {\r\n                                var ddCnt = $t.next('.dropdown-content');\r\n                                var ddCntTop = (parseInt(ddCnt.css('top')) + 5) + 'px';\r\n                                var ddCntLeft = (parseInt(ddCnt.css('left')) + 5) + 'px';\r\n                                if (parseInt(ddCntTop, 10) < 0) {\r\n                                    ddCnt.css('top', 0);\r\n                                    ddCnt.animate({\r\n                                        top: ddCntTop, left: ddCntLeft\r\n                                    });\r\n                                }\r\n                                var firstFieldFocus = ddCnt.find(\"a, input, textarea, [tabindex]\").first();\r\n                                $focusOnField(firstFieldFocus);\r\n                                clearTimeout(tOut2);\r\n                                tOut2 = null;\r\n                            });\r\n                        })($(this));\r\n                    });\r\n                }\r\n\r\n\r\n                var onShow = attrs.$observe('show', function (value) {\r\n                    if (angular.isDefined(value)) {\r\n                        if (!scope.$eval(value)) {\r\n                            var dropdown = element.find('.dropdown-content');\r\n                            scope.hideDropDown(dropdown);\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n                scope.hideDropDown = function (dropdown) {\r\n                    if (dropdown.length > 0) {\r\n                        dropdown.fadeOut(250);\r\n                        dropdown.removeClass('active');\r\n                        dropdown.css('max-height', '');\r\n                        angular.element(\"[data-activates='\" + dropdown.attr('id') + \"']\").removeClass('active');\r\n                        angular.isFunction(scope.onHide) && scope.onHide();\r\n                    }\r\n                }\r\n\r\n                /*Stop Propogation: Start*/\r\n                if (scope.stopProg === \"true\") {\r\n                    var cancelTout = $timeout(function () {\r\n                        element.find(\".dropdown-button\").click(function (e) {\r\n                            e.stopPropagation();\r\n                        }).end().find(\".dropdown-content\").click(function (e) {\r\n                            //Close dropdown after option get selected, this is default fuctionality of materialize framework\r\n                            var a = window.lastOpenedDropdownConfig;\r\n                            a.activates.fadeOut(a.options.outDuration);\r\n                            a.activates.removeClass('active');\r\n                            a.activates.css('max-height', '');\r\n                            a.origin.removeClass('active');\r\n                            e.stopPropagation();\r\n                        });\r\n                        $timeout.cancel(cancelTout);\r\n                        cancelTout = null;\r\n                    });\r\n                }\r\n                /*Stop Propogation: End*/\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onShow();\r\n                    angular.element($window).off(\"scroll.smartFixedSmartDrop\");\r\n                    $(element).find('.dropdown-button').unbind('click');\r\n                    $(element).find('.dropdown-button').off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartDropdown/smartDropdownTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('actionCloseDropdown', [function () {\r\n        return {\r\n            restrict: 'C',\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n                //[commenting the traverseAndFireHideDropDown function as it takes time to close/hide dropdown container as soon as closing event is fired]\r\n                //var traverseAndFireHideDropDown = function (scopeRef, dropdown) {\r\n                //    for (var key in scopeRef) {\r\n                //        if (key == 'hideDropDown') {\r\n                //            scopeRef.hideDropDown(dropdown);\r\n                //            return;\r\n                //        }\r\n                //    }\r\n                //    traverseAndFireHideDropDown(scopeRef.$parent, dropdown);\r\n                //    dropdown = null; //[OPTIMIZATION]\r\n                //};\r\n\r\n                element.bind('click', function () {\r\n                    angular.element(document).trigger('click');\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.unbind('click', function () {\r\n                        angular.element(document).trigger('click');\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();\n'use strict';\nangular.module('SMART2').directive('smartErrorFieldHighlighter', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: 'AE',\r\n        scope: {\r\n            errorConfig: \"=\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.otherMandetoryFields = false;\r\n            scope.$watch(\"errorConfig.check\", function (value) {\r\n                if (value == true) {\r\n                    $timeout(function () {\r\n                        $(element.find(\"[is-mandatory='true'] input\")).each(function () {\r\n                            if ($(this).hasClass('invalid')) {\r\n                                $(this).focus();\r\n                                scope.otherMandetoryFields = true;\r\n                                return false;\r\n                            } else {\r\n                                scope.otherMandetoryFields = false;\r\n                            }\r\n                        });\r\n\r\n                        if (!scope.otherMandetoryFields) {\r\n                            $(element.find(\"[is-mandatory='true'].smartMandetoryField\")).each(function () {\r\n                                if ($(this).find('.smartErrorText').length > 0 || $(this).find('.select-invalid-wrapper').length > 0) {\r\n                                    $(this).find('a.focusErrorField').focus();\r\n                                    $(this).find('input').focus();\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                        scope.errorConfig.check = false;\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Form-widget\r\n * @description Form widget directive accepts form-config and model-data. \r\n *    ui elements (fields) that are optional are added in right-panel (widget-panel). Optional fields can be added on form by simply clicking that item in right-panel. \r\n *    Optional field can also be removed by clicking 'x' icon on the upper right corner of ui element or 'x' icon against that item in right-panel. \r\n * \r\n * @attr {Array} form-config\r\n *    Form config is expected to be an array of ui elements (fields)\r\n * @attr {Object} model-data\r\n *    Data to be bound on ui elements (fields)\r\n * @attr {Boolean} is-sequencial\r\n *    If the value of this attribute is set to true, newly added ui element (field) will be added at the end of the section.\r\n *    If the value of this attribute is set to false, newly added ui element (field) will be added by the orders it appears in form-config.  \r\n * @attr {Boolean} show-widget\r\n *    When form-config is passed to form-widget, right-panel will always be created if this attribute is not set to false.\r\n * @attr {String} search-holder\r\n *    Id of DOM element where search bar should appear. This attribute enables form-widget search feature, where user can search for optional sections and fields on the form.\r\n *    And navigate to optional section or field by clicking on search result item.\r\n * @attr {Number} widget-panel-top\r\n *    Top position for widget-panel (right-panel)\r\n * @attr {Number} widget-panel-right\r\n *    Right position for widget-panel (right-panel)\r\n * @attr {Function} on-section-sort\r\n *    Callback function when sections are sorted or rearranged\r\n * @attr {Function} on-save\r\n *    Callback function when sections are need to be save on outside section click\r\n *\r\n * @example\r\n Dynamic:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Dynamic attribute value. One can set a scope variable or function as attribute value. \r\n One can also pass parameters in calling function as is done on callback functions.\r\n In following example, value of 'isMandatory' field for 'Last Name' can be 'isLastNameMandatory(config.modelData)'.\r\n 'options' attribute does not support function as value.\r\n Controller:\r\n      $scope.isFirstNameMandatory = true;\r\n\r\n      $scope.isLastNameMandatory = function() {\r\n            return true;\r\n      };\r\n\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": \"isMandatory\",\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": \"isLastNameMandatory\",\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n      \r\n * @example\r\n Form widget without widget panel (right panel):\r\n <smart-form-widget show-widget=\"false\"></smart-form-widget>   \r\n     \r\n * @example\r\n If newly added ui elements (fields) to be added at the end of the section:\r\n <smart-form-widget is-sequencial=\"true\"></smart-form-widget>\r\n \r\n * @example\r\n Widget-panel with top and right position:\r\n <smart-form-widget widget-panel-top=\"100\" widget-panel-right=\"70\"></smart-form-widget>    \r\n \r\n * @example\r\n Form widget with 'Rule Engine' service:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\r\n      $scope.validateForm = function() {\r\n          RuleEngine.setRules($scope.config.formConfig.sections, $scope.config.modelData, $scope.config.rules);\r\n          RuleEngine.execute(function (e) {\r\n              console.log(e);   //  Check e for more details\r\n          }, $scope);  \r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n      <button ng-click=\"validateForm()\">Validate Form</button>\r\n\r\n* @example\r\nSaving sections on outside section click.\r\n\r\nmandatoryFieldStatus property used to initiate sec Nav validation and section indicator\r\n\r\n Dynamic:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                        \"save\":true,\r\n                        \"mandatoryFieldStatus\": {\r\n                            \"status\": \"complete\",\r\n                            \"isvalidate\":  false,\r\n                            \"description\": \"There are some mandatory fields that are not filled in this section\",\r\n                            \"title\": \"Section 3 - Completed\" \r\n                        },\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\t  $scope.onSave = function (data, prevObj) {\r\n\t      console.log(data, \"In Controller \", prevObj)\r\n          $scope.$digest();\r\n\t\t  // Note: data will give scope.modelData Obj and prevObj will give scope.formConfig.sections[..]\r\n\t\t  // use class=\"savable\" in actionable container within the section for avoiding the onSave callback function. \r\n\t  };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\" on-save=\"onSave(data, prevObj)\"></smart-form-widget>\r\n\r\n\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    var formWidgetCounter = 0;\r\n    angular.module('SMART2').directive('smartFormWidget', ['APPCONSTANTS', 'ScrollTo', 'formWidgetUtils', '$translate', '$timeout', '$compile', 'persistenceService', 'scrollPosition', '$window', function (APPCONSTANTS, ScrollTo, formWidgetUtils, $translate, $timeout, $compile, persistenceService, scrollPosition, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                formConfig: '=?',\r\n                modelData: '=?',\r\n                isSequential: '@',\r\n                showWidget: '@',\r\n                searchHolder: '@',\r\n                widgetPanelTop: '@',\r\n                widgetPanelRight: '@',\r\n                onSectionSort: '&',\r\n                onSave: '&',\r\n                revisionMode: \"@\",\r\n                secNav: '=?',\r\n                filterWith: '=?'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                $window.onload = function () {\r\n                    ///TODO \r\n                    //Call persistenceService to get All MasterData for all root fields\r\n                    persistenceService.masterPersistenceService.getMasterDataForRootField();\r\n                };\r\n                if (scope.secNav == undefined) {\r\n                    scope.secNav = true\r\n                }\r\n                scope.widgetPanelRightPos = scope.widgetPanelRight ? parseFloat(scope.widgetPanelRight) : 70;\r\n                formWidgetCounter = formWidgetCounter + 1;\r\n                scope.formWidgetId = 'form-widget-' + formWidgetCounter;\r\n                scope.addRemoveSection = $translate.instant('AddRemoveSectionTxt');\r\n                scope.visibleSectionTrackerItemsCount = 0;\r\n\r\n                var currentSelectedSection = 0,\r\n                    thumbnailsWrapHeightTemp = 0,\r\n                    secnavIndex = 0,\r\n                    thumbnailsWrapHeight = 0,\r\n                    sectionItemClicked = false,\r\n                    staticTopmargin = 64; // header height\r\n\r\n                scope.enableFieldPreview = false;\r\n\r\n                /*\r\n                 *  Update visible section tracker items\r\n                 */\r\n                var updateVisibleSectionTrackerItemsCount = function () {\r\n                    var count = 0,\r\n                        len = scope.sectionTrackerItems.length;\r\n                    for (var i = 0; i < len; i++) {\r\n                        var tItem = scope.sectionTrackerItems[i];\r\n                        if (tItem.visible && !tItem.hidden) {\r\n                            count++;\r\n                        }\r\n                    }\r\n                    scope.visibleSectionTrackerItemsCount = count;\r\n                };\r\n\r\n                var onSubHeaderHeight = attrs.$observe('subHeaderHeight', function (value) {\r\n                    if (!isNaN(value)) {\r\n                        ScrollTo.setScrollingTopMargin(parseInt(value));\r\n                    }\r\n                });\r\n\r\n\r\n                scope.isFormWidgetToBeLoaded = false;\r\n\r\n                var toutPromise = $timeout(function () {\r\n                    scope.isFormWidgetToBeLoaded = true;\r\n                    $timeout.cancel(toutPromise);\r\n                    toutPromise = null;\r\n                }, 500);\r\n\r\n\r\n\r\n                scope.checkPresistence = false;\r\n                scope.getPresistence = function (formConfig) {\r\n                    if (formConfig && typeof formConfig.documentType != 'undefined') {\r\n                        persistenceService.getUserData(formConfig.documentType);\r\n                        persistenceService.sectionPersistence.getSectionsPersistence(formConfig, persistenceService.userData);\r\n                    }\r\n                }\r\n\r\n                scope.modelDataWatcherEnabledOrNot = false;\r\n                scope.initModelDataWatcher = function (newConfig) {\r\n                    scope.modelDataWatcherEnabledOrNot = true;\r\n                    scope.unbindModelDataWatcher = scope.$watch('modelData', function (newVal, oldVal) {\r\n\r\n                        persistenceService.getModelData(newConfig, newVal, scope.unbindModelDataWatcher, scope.initChipsWatcher);\r\n                    }, true);\r\n                }\r\n                var persistenceTimeout;\r\n                scope.initChipsWatcher = function (arr) {\r\n\r\n                    scope.$watchGroup(arr, function (newVal, oldVal) {\r\n                        persistenceService.nPlusOne.getSelectedSection();\r\n                        if (persistenceTimeout) {\r\n                            $timeout.cancel(persistenceTimeout);\r\n                            persistenceTimeout = undefined;\r\n                        }\r\n                        persistenceTimeout = $timeout(function () {\r\n                            persistenceService.saveRecentDocument(newVal, scope.modelData);\r\n                        }, 1000);\r\n\r\n                    });\r\n                }\r\n\r\n                var unbindSectionsLoadedWathcer;\r\n                function initSectionsLoadedWatcher() {\r\n                    scope.SectionLoaderInitiated = true;\r\n                    var arr = [];\r\n                    for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                        arr.push('formConfig.sections[' + i + '].isContentLoaded');\r\n                    }\r\n\r\n\r\n                    unbindSectionsLoadedWathcer = scope.$watchGroup(arr, function (newVal, oldVal) {\r\n                        if (newVal) {\r\n                            var loadedCompletely = false;\r\n                            for (var i = 0; i < newVal.length; i++) {\r\n                                if (newVal[i] == false && !scope.formConfig.sections[i].isLazyLoadEnabled) {\r\n                                    break;\r\n                                }\r\n                                if (i == newVal.length - 1 && (newVal[i] == true || typeof newVal[i] == 'undefined')) {\r\n                                    scope.initSectionFocus();\r\n                                    var seclectedSectionId = persistenceService.nPlusOne.getSelectedSection();\r\n                                    if (seclectedSectionId != '') {\r\n                                        var seclectedSectionIndex = -1;\r\n                                        var sections = scope.formConfig.sections;\r\n                                        for (var j = 0; j < sections.length; j++) {\r\n                                            if (typeof sections[j].id != 'undefined' && sections[j].id == seclectedSectionId) {\r\n                                                seclectedSectionIndex = j;\r\n                                                sections[j].isActive = true;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                        loadedCompletely = true;\r\n                                        if (seclectedSectionIndex > -1) {\r\n                                            sectionItemClicked = true;\r\n                                            var mySection = scope.sectionTrackerItems[seclectedSectionIndex];\r\n                                            if (mySection.visible) {\r\n                                                scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                                mySection.isActive = true;\r\n                                                currentSelectedSection = seclectedSectionIndex;\r\n\r\n\r\n                                            }\r\n\r\n                                            scope.isSectionsLoaded = false;\r\n                                            ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + seclectedSectionIndex), angular.element('#' + scope.formWidgetId), function (e) {\r\n                                                setTimeout(function () {\r\n                                                    sectionItemClicked = false;\r\n                                                    scope.isSectionsLoaded = true;\r\n                                                }, 250);\r\n\r\n                                                // scope.sectionsLoadedCompletely = true;\r\n                                                unbindSectionsLoadedWathcer();\r\n                                            });\r\n                                        }\r\n                                        else {\r\n                                            scope.isSectionsLoaded = true;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        scope.isSectionsLoaded = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                var formWidgetTimeout,\r\n                    fixedElemHeight = 0,\r\n                    windowScrollTop = 0;\r\n                scope.sectionTrackerItems = [];\r\n                var onFormConfig = scope.$watch('formConfig', function (newConfig, oldConfig) {\r\n                    if (newConfig) {\r\n                        if (formWidgetTimeout) {\r\n                            $timeout.cancel(formWidgetTimeout);\r\n                            formWidgetTimeout = undefined;\r\n                        }\r\n                        if (scope.checkPresistence != true) {\r\n                            scope.getPresistence(newConfig);\r\n                            scope.formConfig.sections = newConfig.sections;\r\n                            scope.checkPresistence = true;\r\n                        }\r\n\r\n                        if (scope.modelDataWatcherEnabledOrNot == false && newConfig != undefined) {\r\n                            scope.initModelDataWatcher(newConfig);\r\n\r\n                        }\r\n\r\n                        formWidgetTimeout = $timeout(function () {\r\n                            var sectionItems = [];\r\n                            var optionalSections = [];\r\n                            var optionalFieldsAndSections = [],\r\n                                sectionLen = scope.formConfig.sections.length;\r\n\r\n                            scope.enableFieldPreview = newConfig.enableFieldPreview;\r\n\r\n                            for (var i = 0; i < sectionLen; i++) {\r\n                                var tSection = scope.formConfig.sections[i];\r\n                                //  if (firstTime || !angular.equals(newConfig.sections[i], (typeof oldConfig === 'undefined') ? null : oldConfig.sections[i])) {\r\n                                tSection.isMandatory = formWidgetUtils.convertAndGetValue(tSection.isMandatory, scope, tSection);\r\n                                if (angular.isDefined(tSection.isVisible)) {\r\n                                    tSection.isVisible = formWidgetUtils.convertAndGetValue(tSection.isVisible, scope, tSection);\r\n                                } else {\r\n                                    tSection.isVisible = tSection.isMandatory;\r\n                                }\r\n                                if (!angular.isDefined(tSection.isHidden)) {\r\n                                    //tSection.isHidden = scope.formConfig.sections[i].isHidden; //[TODO] not needed code\r\n                                    tSection.isHidden = false;\r\n                                } //else {\r\n                                //tSection.isHidden = false;\r\n                                //}\r\n                                tSection.key = scope.formWidgetId + '-section-' + i;\r\n\r\n                                if (scope.$eval(scope.showWidget) != false) {\r\n                                    sectionItems.push({\r\n                                        sectionKey: tSection.key,\r\n                                        sectionId: tSection.sectionId,\r\n                                        isOptionalSection: !tSection.isMandatory,\r\n                                        label: tSection.label,\r\n                                        sectionIndex: i,\r\n                                        visible: tSection.isVisible,\r\n                                        hidden: tSection.isHidden,\r\n                                        isActive: i == currentSelectedSection,\r\n                                        save: tSection.save,\r\n                                        id: tSection.id || '',\r\n                                        mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                        isReadOnly: tSection.isReadOnly\r\n                                    });\r\n\r\n                                    var sectionTLength = scope.sectionTrackerItems.length;\r\n                                    if (sectionTLength) {\r\n\r\n                                        //  For loop is needed in this case, because it is difficult to maintain the index of dragged/dropped item with ng-repeat.\r\n\r\n                                        for (var ij = 0; ij < sectionTLength; ij++) {\r\n                                            if (scope.sectionTrackerItems[ij].sectionIndex == tSection.key.split('section-')[1]) {\r\n                                                scope.sectionTrackerItems[ij] = {\r\n                                                    sectionKey: tSection.key,\r\n                                                    sectionId: tSection.sectionId,\r\n                                                    isOptionalSection: !tSection.isMandatory,\r\n                                                    label: tSection.label,\r\n                                                    sectionIndex: i,\r\n                                                    visible: tSection.isVisible,\r\n                                                    hidden: tSection.isHidden,\r\n                                                    isActive: i == currentSelectedSection,\r\n                                                    save: tSection.save,\r\n                                                    mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                                    isReadOnly: tSection.isReadOnly\r\n                                                };\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                if (!tSection.isMandatory && scope.$eval(scope.showWidget) != false && !tSection.isHidden) {\r\n                                    optionalSections.push({\r\n                                        sectionKey: tSection.key,\r\n                                        sectionId: tSection.sectionId,\r\n                                        isOptionalSection: !tSection.isMandatory,\r\n                                        label: tSection.label,\r\n                                        searchLabel: $translate.instant(tSection.label),\r\n                                        sectionIndex: i,\r\n                                        visible: tSection.isVisible,\r\n                                        hidden: scope.formConfig.sections[i].isHidden,\r\n                                        isActive: false,\r\n                                        isSection: true,\r\n                                        save: tSection.save,\r\n                                        mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                        isReadOnly: tSection.isReadOnly\r\n                                    });\r\n                                }\r\n\r\n                                var sectionOptionalFields = [],\r\n                                    rowsLength = tSection.rows.length;\r\n\r\n                                for (var j = 0; j < rowsLength; j++) {\r\n                                    var trowsData = tSection.rows[j],\r\n                                        propertyLen = trowsData.properties.length;\r\n                                    for (var k = 0; k < propertyLen; k++) {\r\n                                        var tProperty = trowsData.properties[k];\r\n                                        tProperty.isMandatory = formWidgetUtils.convertAndGetValue(tProperty.isMandatory, scope, tProperty);\r\n                                        if (angular.isDefined(tProperty.isVisible)) {\r\n                                            tProperty.isVisible = formWidgetUtils.convertAndGetValue(tProperty.isVisible, scope, tProperty);\r\n                                        } else {\r\n                                            tProperty.isVisible = tProperty.isMandatory;\r\n                                        }\r\n                                        if (angular.isDefined(tProperty.isHidden)) {\r\n                                            tProperty.isHidden = formWidgetUtils.convertAndGetValue(tProperty.isHidden, scope, tProperty);\r\n                                        }\r\n                                        if (!tProperty.isMandatory && scope.$eval(scope.showWidget) != false && !tProperty.isHidden) {\r\n                                            sectionOptionalFields.push({\r\n                                                sectionKey: tSection.key,\r\n                                                label: tProperty.label,\r\n                                                sectionLabel: tSection.label,\r\n                                                searchLabel: $translate.instant(tSection.label) + ' ' + $translate.instant(tProperty.label),\r\n                                                sectionIndex: i,\r\n                                                rowIndex: j,\r\n                                                propertyIndex: k,\r\n                                                visible: tProperty.isVisible,\r\n                                                isSection: false\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                tSection.optionalFields = sectionOptionalFields;\r\n                                optionalFieldsAndSections = optionalFieldsAndSections.concat(tSection.optionalFields);\r\n                                //}\r\n                            }\r\n                            //  firstTime = false;\r\n\r\n                            if (scope.sectionTrackerItems.length != sectionItems.length) {\r\n                                scope.sectionTrackerItems = sectionItems;\r\n                            }\r\n\r\n                            scope.optionalSections = optionalSections;\r\n\r\n                            optionalFieldsAndSections = scope.optionalSections.concat(optionalFieldsAndSections);\r\n\r\n                            scope.optionalFieldsAndSections = optionalFieldsAndSections;\r\n\r\n                            updateVisibleSectionTrackerItemsCount();\r\n\r\n                            scope.showWidget = scope.sectionTrackerItems.length > 1 || scope.optionalSections.length > 0;\r\n                            if (!scope.SectionLoaderInitiated) {\r\n                                initSectionsLoadedWatcher();\r\n                            }\r\n                        }, 250);\r\n                    }\r\n                }, true);\r\n                /*\r\n                *  If search is enabled \r\n                */\r\n                //caching the selector.\r\n                var searchHolder = angular.element('#' + scope.searchHolder);\r\n                if (searchHolder.length > 0) {\r\n                    searchHolder.html('<div ng-include=\"\\'shared/directives/uiElements/smartFormWidget/searchTemplate.html\\'\"></div>');\r\n                    $compile(searchHolder.contents())(scope);\r\n                }\r\n\r\n                function getOpenWidgetSection(a_id) {\r\n                    var returnItem = false,\r\n                        len = scope.formConfig.sections.length;\r\n                    for (var indx = 0; indx < len; indx++) {\r\n                        var tmpObj = scope.formConfig.sections[indx];\r\n                        if (tmpObj.id === a_id) {\r\n                            returnItem = tmpObj;\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n                    return returnItem;\r\n                }\r\n\r\n                if (scope.$eval(scope.showWidget) != false) {\r\n                    var draggableWidth = $(window).width() / 2,\r\n                        restrictWidth = 0,\r\n                        secnavcontainerExpandWidth = 350;\r\n                    // To expand the sec nav\r\n                    element.on('click.secnavchevroicon', '#secnavchevroicon', function () {\r\n                        var $panelExp = $('#panelexpandor');\r\n                        if (!$panelExp.data('ui-draggable')) {\r\n                            $panelExp.draggable({\r\n                                axis: 'x',\r\n                                drag: function (e, ui) {\r\n                                    restrictWidth = secnavcontainerExpandWidth - draggableWidth;\r\n                                    ui.position.left = Math.min(secnavcontainerExpandWidth - 300, ui.position.left);\r\n                                    ui.position.left = Math.max(restrictWidth, ui.position.left);\r\n                                },\r\n                                stop: function (e, ui) {\r\n                                    secnavcontainerExpandWidth -= ui.position.left;\r\n                                    $('.secnavcontainer-expand').width(secnavcontainerExpandWidth);\r\n                                    $panelExp.css('left', 0);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        var $this = $(this),\r\n                            $secNavCont = $this.closest('.secnavcontainer');\r\n\r\n                        if ($secNavCont.hasClass('secnavcontainer-animate')) {\r\n\r\n                            $secNavCont.removeClass('secnavcontainer-animate secnavcontainer-expand').width(69);\r\n                            $this.find('use').attr('xlink:href', '#icon_LeftChevron');\r\n                            $('#sevnav-overlay').remove();\r\n                            $('body').css('overflow', 'auto');\r\n                            secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight)\r\n                        } else {\r\n\r\n                            $('body').css('overflow', 'hidden').append('<div id=\"sevnav-overlay\" class=\"sevnav-overlay\"></div>');\r\n                            $secNavCont.addClass('secnavcontainer-animate').width(secnavcontainerExpandWidth);\r\n                            setTimeout(function () {\r\n                                $secNavCont.addClass('secnavcontainer-expand');\r\n                            }, 450);\r\n                            $this.find('use').attr('xlink:href', '#icon_RightChevro');\r\n                            var $secNavContList = $secNavCont.find('.thumbnails-wrap').children('li')\r\n                            $secNavContList.each(function (k, v) {\r\n                                v.style.height = \"46px\";\r\n                            });\r\n                            var $thumbnailswrap = $('#thumbnails-wrap');\r\n                            $thumbnailswrap.animate({ scrollTop: (($($secNavContList[secnavIndex]).offset().top - $thumbnailswrap.offset().top) - 20) }, \"slow\");\r\n                            $('#sevnav-overlay').off('click').on('click', function () {\r\n                                $('#secnavchevroicon').trigger('click');\r\n                            });\r\n                        }\r\n\r\n                    });\r\n\r\n                    // Sec nav dot mouse enter functionality \r\n                    element.on('mouseenter.secnav', '.thumbnails-wrap li', function (e) {\r\n                        var $this = $(this);\r\n                        if ($this.closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n\r\n                        $('.nearby').removeClass(\"nearby\");\r\n                        $this.prev(\"li\").addClass(\"nearby\");\r\n                        $this.next(\"li\").addClass(\"nearby\");\r\n                        secnavHeightCal(element, e, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // SubHeader \r\n                    $('.extra-nav-wrap').resizeSensor({\r\n                        onHeightChange: function (a) {\r\n                            $('#subheaderwrapper').height(a.height);\r\n                            onDocumentScroll();\r\n                        }\r\n                    });\r\n\r\n                    // Sec nav dot mouse leave functionality \r\n                    element.on('mouseleave.secnav', '.thumbnails-wrap', function () {\r\n                        if ($(this).closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n                        element.find('li').removeClass(\"nearby\");\r\n                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // Sec nav dot mouse leave functionality \r\n                    element.on('mouseenter.secnavform', '.accountDetails', function () {\r\n                        if ($(this).closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n                        element.find('li').removeClass(\"nearby\");\r\n                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // For calculating the dot height of sec nav \r\n                    var secnavHeightCal = function (element, e, thumbnailsWrapHeight, type) {\r\n                        var $secNavSelector = $('#thumbnails-wrap').children('li'),\r\n                            selectedLiIndex = typeof e === 'number' ? e : $secNavSelector.index($(e.currentTarget).closest('li')),\r\n                            prevSec = selectedLiIndex - 1,\r\n                            afterSec = selectedLiIndex + 1,\r\n                            prevSecDiff = prevSec,\r\n                            afterSecDiff = 2,\r\n                            secNavUlHeight;\r\n\r\n                        secNavUlHeight = Math.floor((thumbnailsWrapHeight) / ($secNavSelector.length));\r\n\r\n                        if (type != 'mouse') {\r\n                            secnavIndex = selectedLiIndex;\r\n                        }\r\n                        if (element.find('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                            return\r\n                        };\r\n\r\n                        $secNavSelector.each(function (k, v) {\r\n                            v.style.height = secNavUlHeight + \"px\";\r\n\r\n                            //if (k === selectedLiIndex) {\r\n                            //    v.style.height = (secNavUlHeight + 16) + \"px\";\r\n\r\n                            //} else if (k <= prevSec) {\r\n\r\n                            //    v.style.height = prevSecDiff === 1 ? (5 + secNavUlHeight) + \"px\" : prevSecDiff === 0 ? (10 + secNavUlHeight) + \"px\" : v.style.height = secNavUlHeight + \"px\";\r\n\r\n                            //    prevSecDiff--;\r\n                            //} else {\r\n                            //    if (afterSecDiff === 2) {\r\n                            //        v.style.height = (5 + secNavUlHeight) + \"px\";\r\n                            //    } else {\r\n                            //        v.style.height = secNavUlHeight + \"px\";\r\n                            //    }\r\n                            //    afterSecDiff--;\r\n                            //}\r\n                        });\r\n                    };\r\n\r\n                    var filterTextTimeout,\r\n                        onDocumentScroll = function () {\r\n\r\n                            /**\r\n                             ** Adding and Removing fixed class on subheader\r\n                             ** Setting height of sec nav\r\n                             ** Highlighting sec nav dots \r\n                            **/\r\n                            if (filterTextTimeout) {\r\n                                $timeout.cancel(filterTextTimeout);\r\n                            }\r\n\r\n                            try {\r\n                                var $fixedElem = $('.extra-nav-wrap'),\r\n                                    $subHeaderFixedContainer = $('#subheaderwrapper'),\r\n                                    $formWidgetElem = $('.secondary-navigation'),\r\n                                    formWidgetElemHeight = $formWidgetElem && $formWidgetElem.height(),\r\n                                    $thumbnailsWrap = $('#thumbnails-wrap'),\r\n                                    $secnavchevroicon = $('#secnavchevroicon'),\r\n                                    formWidgetTop,\r\n                                    formWidgetFixedTop = 1;\r\n                                windowScrollTop = $(window).scrollTop();\r\n                                fixedElemHeight = $fixedElem.outerHeight();\r\n                                if (windowScrollTop > 63) {\r\n\r\n                                    $formWidgetElem.css(\"top\", fixedElemHeight);\r\n\r\n                                    thumbnailsWrapHeight = $(window).height() - ((scope.optionalSections && scope.optionalSections.length ? 193 : 150) + (fixedElemHeight - 63));\r\n\r\n                                    if (!$fixedElem.hasClass('extra-nav-wrap-fixed')) {\r\n                                        $fixedElem.addClass('extra-nav-wrap-fixed');\r\n                                        $subHeaderFixedContainer.addClass('extra-nav-wrap-fixed');\r\n                                    }\r\n\r\n                                } else {\r\n\r\n                                    $formWidgetElem.css(\"top\", \"auto\");\r\n                                    if ($fixedElem.hasClass('extra-nav-wrap-fixed')) {\r\n                                        $fixedElem.removeClass('extra-nav-wrap-fixed');\r\n                                        $subHeaderFixedContainer.removeClass('extra-nav-wrap-fixed');\r\n                                    }\r\n\r\n                                    thumbnailsWrapHeight = $(window).height() - (((scope.optionalSections && scope.optionalSections.length ? 193 : 150) + (fixedElemHeight)) - windowScrollTop);\r\n                                }\r\n                                $formWidgetElem.height(thumbnailsWrapHeight + 24);\r\n                                $secnavchevroicon.css(\"top\", (thumbnailsWrapHeight / 2));\r\n\r\n                                formWidgetTop = $formWidgetElem.length && $formWidgetElem.offset().top;\r\n                                var trackerItemsLen = scope.sectionTrackerItems && scope.sectionTrackerItems.length;\r\n\r\n\r\n                                if (!sectionItemClicked && trackerItemsLen) {\r\n\r\n                                    var $cardParent = element.find('#' + scope.formWidgetId + '-sortable').find('.cardParent');\r\n                                    for (var i = 0; i < trackerItemsLen; i++) {\r\n                                        var $this = element.find('#' + scope.formWidgetId + '-section-' + i);\r\n\r\n                                        // Position of section relative to window\r\n                                        if ($this.children().length > 0) {\r\n                                            var offsetLi = $this.offset().top - 10,\r\n                                                offsetLiHeight = offsetLi + $this.height();\r\n                                            //activeoffset = offsetLi - formWidgetTop;\r\n                                            //get index of div in the parent document  \r\n                                            if (formWidgetTop >= offsetLi && formWidgetTop <= offsetLiHeight || thumbnailsWrapHeightTemp != thumbnailsWrapHeight) {\r\n                                                thumbnailsWrapHeightTemp = thumbnailsWrapHeight;\r\n                                                newSelected = scope.sectionTrackerItems[i].sectionIndex;\r\n\r\n                                                if (scope.sectionTrackerItems[newSelected].visible) {\r\n                                                    filterTextTimeout = $timeout(function () {\r\n                                                        scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                                        scope.sectionTrackerItems[newSelected].isActive = true;\r\n                                                        currentSelectedSection = newSelected;\r\n                                                        if (typeof scope.sectionTrackerItems[newSelected].id != 'undefined') {\r\n                                                            persistenceService.nPlusOne.saveSelectedSection(scope.sectionTrackerItems[newSelected].id);\r\n                                                        }\r\n                                                        secnavHeightCal(element, $cardParent.index($this), thumbnailsWrapHeight);\r\n                                                    });\r\n                                                }\r\n                                                $cardParent.children('.collapsible-container').removeClass('collapsible-focus');\r\n\r\n                                                $this.children('.collapsible-container').addClass('collapsible-focus');\r\n\r\n\r\n\r\n                                                if (formWidgetTop >= offsetLi && formWidgetTop <= offsetLiHeight) {\r\n                                                    break;\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                        $this = null;\r\n                                    }\r\n                                }\r\n\r\n\r\n                            } catch (e) { console.log(\"onDocumentScroll\") }\r\n                        },\r\n                        checkSubheaderHeight,\r\n                        subheaderHeight,\r\n                        newSelected = 0,\r\n                        filterTextTimeout = null;\r\n\r\n                    setTimeout(function () {\r\n                        isCheckSecnav();\r\n                    }, 100);\r\n\r\n                    function isCheckSecnav() {\r\n                        if ($('.secondary-navigation').length) {\r\n                            onDocumentScroll();\r\n                            $(document).on('scroll.secnav', onDocumentScroll);\r\n                        } else {\r\n                            setTimeout(function () {\r\n                                isCheckSecnav();\r\n                            }, 500);\r\n                        }\r\n                    }\r\n\r\n                    setTimeout(function () {\r\n                        isCheckWidget();\r\n                    }, 1000);\r\n\r\n                    function isCheckWidget() {\r\n                        if ($('#' + scope.formWidgetId).length) {\r\n                            scrollPosition.scrollWitgetsection(scope.sectionTrackerItems);\r\n                        } else {\r\n                            setTimeout(function () {\r\n                                isCheckWidget();\r\n                            }, 1000);\r\n                        }\r\n                    };\r\n                    /*\r\n                     * Section item click handler\r\n                     */\r\n                    var activeItem;\r\n                    scope.onSectionItemClick = function (item, sectionNumber, e) {\r\n\r\n                        var sectionTrackerLength = scope.sectionTrackerItems.length;\r\n                        //  For loop is needed in this case, because it is difficult to maintain the index of dragged/dropped item.\r\n                        for (var i = 0; i < sectionTrackerLength; i++) {\r\n                            scope.sectionTrackerItems[i].isActive = false;\r\n                        }\r\n                        scope.sectionTrackerItems[sectionNumber].isActive = true;\r\n                        currentSelectedSection = sectionNumber;\r\n                        var Selectedsection = scope.formConfig.sections[item.sectionIndex];\r\n                        Selectedsection.isActive = true;\r\n                        if (typeof Selectedsection.id != 'undefined') {\r\n                            persistenceService.nPlusOne.saveSelectedSection(Selectedsection.id);\r\n                        }\r\n                        scope.formConfig.sections[item.sectionIndex].isActive = true;\r\n                        sectionItemClicked = true;\r\n                        activeItem = e;\r\n                        ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                        ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId + '-sortable'), function (e) {\r\n\r\n                            setTimeout(function () {\r\n                                secnavHeightCal(element, activeItem, thumbnailsWrapHeight);\r\n                                sectionItemClicked = false;\r\n                            }, 300);\r\n                        });\r\n                    };\r\n\r\n\r\n                    /*\r\n                     * On optional section item click handler\r\n                     */\r\n                    scope.onOptionalSectionItemClick = function (isLabelClicked, item) {\r\n                        if (isLabelClicked && item.isVisible) {\r\n                            return;\r\n                        }\r\n\r\n                        scope.formConfig.sections[item.sectionIndex].isVisible = !scope.formConfig.sections[item.sectionIndex].isVisible;\r\n                        //  Toggle section tracker item visibility\r\n                        var trackerTLen = scope.sectionTrackerItems.length;\r\n                        for (var i = 0; i < trackerTLen; i++) {\r\n                            if (scope.sectionTrackerItems[i].label === item.label) {\r\n                                scope.sectionTrackerItems[i].visible = !item.visible;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        /*\r\n                         *  scope.isSequential is set to 'true', form-widget-section would be added \r\n                         *  where it is positioned in the JSON structure else \r\n                         *  form-widget-section would be added at the end of row\r\n                         */\r\n                        if (!scope.$eval(scope.isSequential) && scope.formConfig.sections[item.sectionIndex].isVisible) {\r\n                            //  Re-arrange sections order\r\n                            var tmpSection = scope.formConfig.sections[item.sectionIndex];\r\n                            scope.formConfig.sections.splice(item.sectionIndex, 1);\r\n                            scope.formConfig.sections.push(tmpSection);\r\n\r\n                            //  Re-arrange sections tracker items order\r\n                            for (var i = 0; i < scope.sectionTrackerItems.length; i++) {\r\n                                if (scope.sectionTrackerItems[i].label === item.label) {\r\n                                    var tmpSection = scope.sectionTrackerItems[i];\r\n                                    scope.sectionTrackerItems.splice(i, 1);\r\n                                    scope.sectionTrackerItems.push(tmpSection);\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            //  Re-arrange sections tracker items section index\r\n                            for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                                for (var j = 0; j < scope.sectionTrackerItems.length; j++) {\r\n                                    if (scope.formConfig.sections[i].label == scope.sectionTrackerItems[j].label) {\r\n                                        scope.sectionTrackerItems[j].sectionIndex = i;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //  Re-arrange sections optional fields section index\r\n                            for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                                for (var j = 0; j < scope.optionalSections.length; j++) {\r\n                                    if (scope.formConfig.sections[i].label == scope.optionalSections[j].label) {\r\n                                        scope.optionalSections[j].sectionIndex = i;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        var itemVisible = !item.visible;\r\n                        var tempTOut = setTimeout(function () {\r\n                            if (itemVisible) {\r\n\r\n                                ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                                ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId + '-sortable'), function () {\r\n                                    if ($('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                                        $('.secnavcontainer').find('.thumbnails-wrap').children('li').each(function (k, v) {\r\n                                            v.style.height = \"46px\";\r\n                                        });\r\n                                    } else {\r\n                                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight);\r\n                                    }\r\n                                });\r\n                            }\r\n                            clearTimeout(tempTOut);\r\n                        }, 200);\r\n\r\n                        updateVisibleSectionTrackerItemsCount();\r\n                    };\r\n\r\n\r\n                    scope.onOptionalFieldClick = function (isLabelClicked, item) {\r\n                        if (!item.visible) {\r\n                            ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                            ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId));\r\n                        }\r\n                        scope.$broadcast('optionalFieldClick', {\r\n                            isLabelClicked: isLabelClicked, item: item\r\n                        });\r\n                    };\r\n\r\n\r\n                    /*\r\n                     * Widget panel\r\n                     */\r\n                    scope.showWidgetPanel = false;\r\n\r\n                    scope.toggleWidgetPanel = function () {\r\n                        scope.showWidgetPanel = !scope.showWidgetPanel;\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Callback function when section order gets changed\r\n                     */\r\n\r\n                    scope.onSort = function (e) {\r\n                        scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n\r\n                        var sectionTrackerItems = angular.copy(scope.sectionTrackerItems),\r\n                            item = sectionTrackerItems.splice(e.startIndex, 1);\r\n                        sectionTrackerItems.splice(e.endIndex, 0, item[0]);\r\n\r\n                        var formConfigAfterSort = [],\r\n                            trackerSortLen = scope.sectionTrackerItems.length;\r\n                        var sectionsList = [];\r\n                        for (var i = 0; i < trackerSortLen; i++) {\r\n                            var section = scope.formConfig.sections[scope.sectionTrackerItems[i].sectionIndex];\r\n                            formConfigAfterSort.push(section);\r\n                            if (typeof section.id != 'undefined') {\r\n                                sectionsList.push(section.id);\r\n                            }\r\n                        }\r\n                        if (sectionsList.length > 0 && typeof scope.formConfig.documentType != 'undefined') {\r\n                            persistenceService.updateUserData('sections', sectionsList);\n                            persistenceService.saveUserData(scope.formConfig.documentType);\r\n                        }\r\n                        scope.onSectionSort({\r\n                            $event: {\r\n                                formConfig: formConfigAfterSort\r\n                            }\r\n                        });\r\n\r\n                        if (element.find('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                            var $sectionCont = $('#form-widget-1-sortable'),\r\n                                sectionList = $sectionCont.children('li'),\r\n                                sectionListitem = sectionList.splice(e.startIndex, 1);\r\n                            sectionList.splice(e.endIndex, 0, sectionListitem[0]);\r\n                            $sectionCont.append(sectionList);\r\n                        } else {\r\n                            var $thumbnailsCont = $('#thumbnails-wrap'),\r\n                                thumbnailsList = $thumbnailsCont.children('li'),\r\n                                thumbnailsListitem = thumbnailsList.splice(e.startIndex, 1),\r\n                                thumbNodes = [],\r\n                                count = 0;\r\n                            thumbnailsList.splice(e.endIndex, 0, thumbnailsListitem[0]);\r\n\r\n                            $.each($thumbnailsCont.get(0).childNodes, function (k, v) {\r\n                                if ($(v).is('li')) {\r\n                                    thumbNodes[k] = thumbnailsList[count];\r\n                                    count++;\r\n                                } else {\r\n                                    thumbNodes[k] = v;\r\n                                }\r\n                            });\r\n                            $thumbnailsCont.append(thumbNodes);\r\n                        }\r\n                        setTimeout(function () {\r\n                            onDocumentScroll();\r\n                        }, 10);\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Make section active in section tracker\r\n                     */\r\n                    var previousClickedSection = [];\r\n                    scope.initSectionFocus = function () {\r\n                        scope.$on('sectionFocus', function (event, data) {\r\n                            var openedSec = getOpenWidgetSection(data.id);\r\n                            var sectionNumber = openedSec.sectionIndex;\r\n                            if (openedSec) {\r\n                                scope.onSectionItemClick(openedSec, sectionNumber);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    scope.onSectionClick = function (section) {\r\n\r\n                        //scrollPosition.set(0, location.hash, { key: section.key.split('section-')[1], active: true });\r\n\r\n                        if (attrs.onSave) {\r\n                            if (section.hasOwnProperty('save') && section != previousClickedSection[(previousClickedSection.length - 1)]) {\r\n                                previousClickedSection.push(section);\r\n                            }\r\n\r\n                            if (previousClickedSection.length > 2) {\r\n                                previousClickedSection.shift();\r\n                            }\r\n                        }\r\n                        if (scope.sectionTrackerItems[currentSelectedSection].label === section.label) {\r\n                            return;\r\n                        }\r\n                        var tlenTracker = scope.sectionTrackerItems.length;\r\n                        for (var i = 0; i < tlenTracker; i++) {\r\n                            if (scope.sectionTrackerItems[i].label === section.label) {\r\n                                scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                scope.sectionTrackerItems[i].isActive = true;\r\n                                currentSelectedSection = i;\r\n                                if (typeof scope.sectionTrackerItems[i].id != 'undefined') {\r\n                                    persistenceService.nPlusOne.saveSelectedSection(scope.sectionTrackerItems[i].id);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Callback function when user expands or collapses the section\r\n                     */\r\n                    scope.onSectionHeaderClick = function (section) {\r\n                        if (angular.isDefined(section.onHeaderClick)) {\r\n                            eval('scope.' + formWidgetUtils.generateFunctionWithParams(section.onHeaderClick, '$parent', true));\r\n                        }\r\n                        if (!section.isContentLoaded) {\r\n                            section.isContentLoaded = true;\r\n                        }\r\n\r\n                        var $itemSelected = element.find('#' + section.key);\r\n\r\n                        if (!$itemSelected.find('.collapsible-body').hasClass('displayBlock')) {\r\n\r\n                            var displacementItem = $itemSelected.offset().top - angular.element('#' + scope.formWidgetId + '-sortable').offset().top;\r\n\r\n                            displacementItem = displacementItem + staticTopmargin;\r\n                            setTimeout(function () {\r\n                                angular.element('body,html').animate({\r\n                                    scrollTop: displacementItem\r\n                                }, \"medium\");\r\n                            }, 200)\r\n                        }\r\n                    };\r\n\r\n\r\n                    // Auto Save Callback\r\n                    if (attrs.onSave) {\r\n                        var onDocumentClick = function (e) {\r\n                            if (!previousClickedSection.length) {\r\n                                return;\r\n                            }\r\n                            var prevKeyLen = $(e.target).closest('#' + previousClickedSection[0].key).length;\r\n                            if ((!prevKeyLen) || (prevKeyLen && $(e.target).closest('.savable').length)) {\r\n                                if (!$(e.target).closest('.modal').length && !$(e.target).closest('.noSaveItem').length && !$(e.target).closest('.lean-overlay').length) {\r\n                                    scope.onSave({\r\n                                        data: scope.modelData, prevObj: previousClickedSection[0]\r\n                                    });\r\n                                    previousClickedSection.shift();\r\n                                }\r\n                                //scope.$digest();\r\n                            }\r\n                        }\r\n\r\n                        $(document).off('click.saveSection').on('click.saveSection', onDocumentClick);\r\n\r\n                        // Needed due to selectbox plugin using stopPropagation\r\n                        $(document).off('change.saveSelect').on('change.saveSelect', '.select-wrapper select', function (e) {\r\n                            //var ind = $('#' + scope.formWidgetId + '-sortable').children('li').index($(this).closest('li')),\r\n                            //    sectionDatastore = scope.formConfig.sections[ind];\r\n\r\n\r\n                            var ind = $(this).closest('.card.cardParent').attr('id').split('section-'),\r\n                                sectionDatastore = scope.formConfig.sections[ind[1]];\r\n                            if (sectionDatastore.hasOwnProperty('save') && sectionDatastore != previousClickedSection[(previousClickedSection.length - 1)]) {\r\n                                previousClickedSection.push(sectionDatastore);\r\n                            }\r\n\r\n                            if (previousClickedSection.length > 2) {\r\n                                previousClickedSection.shift();\r\n                            }\r\n\r\n                            onDocumentClick(e);\r\n                        });\r\n                    };\r\n\r\n                    /*\r\n                     *  Remove all listeners on scope destroy\r\n                     */\r\n                    scope.$on('$destroy', function () {\r\n                        $(document).off('scroll.secnav click.saveSection change.saveSelect');\r\n                        $('#sevnav-overlay') && $('#sevnav-overlay').remove();\r\n\r\n                        element.off('mouseenter.secnav mouseleave.secnav click.secnavchevroicon mouseenter.secnavform');\r\n                        onSubHeaderHeight();\r\n                        onFormConfig();\r\n\r\n                    });\r\n\r\n\r\n                    scope.iconClasses = APPCONSTANTS.formWidgetItemClasses;\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartFormWidget/smartFormWidgetTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('smartSvgIcon', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                element.html('<svg><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#' + attrs.smartSvgIcon + '\"></use></svg>');\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    /*\r\n     *  Text highlighting filter\r\n     */\r\n    angular.module('SMART2').filter('highlight', ['$sce', function ($sce) {\r\n        return function (text, phrase) {\r\n            if (phrase) {\r\n                text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span style=\"background: yellow\">$1</span>');\r\n            }\r\n            return $sce.trustAsHtml(text);\r\n        }\r\n    }]);\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartGrid', ['$filter', function ($filter) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                gridConfig: '=config'\r\n            },\r\n            controller: function ($scope) {\r\n                /*\r\n                 * Current formatter\r\n                 */\r\n                $scope.currencyFormatter = function (amountarg, symbol, zeroprecision, defaultCurrency) {\r\n                    var amount = amountarg;\r\n                    if (zeroprecision)\r\n                        amount = Number(amountarg).toFixed(0);\r\n\r\n                    var formattedAmount;\r\n                    if (amount >= 1000000 || amount <= -1000000) {\r\n                        shortamount = amount / 1000000;\r\n                        formattedAmount = $scope.currencyFormatter(shortamount, symbol, false, defaultCurrency);\r\n                        //if (zeroprecision)\r\n                        //formattedAmount = formattedAmount.substring(0, formattedAmount.length - 3);\r\n                        formattedAmount = formattedAmount + \" MM\";\r\n                    }\r\n                    else {\r\n                        formattedAmount = $filter('currency')(amount);\r\n                        if (defaultCurrency != undefined) symbol = defaultCurrency;\r\n                        if (amount < 0) {\r\n                            if (symbol !== undefined)\r\n                                formattedAmount = $filter('currency')(amount, symbol).replace(\"(\", \"-\").replace(\")\", \"\");\r\n                            else\r\n                                formattedAmount = $filter('currency')(amount).replace(\"(\", \"-\").replace(\")\", \"\");\r\n                        }\r\n                        else if (symbol !== undefined) {\r\n                            formattedAmount = $filter('currency')(amount, symbol);\r\n                        }\r\n                        if (zeroprecision) {\r\n                            if (parseInt(formattedAmount.substring(formattedAmount.length - 2, formattedAmount.length)) == 0) {\r\n                                formattedAmount = formattedAmount.substring(0, formattedAmount.length - 3);\r\n                            }\r\n                        }\r\n                    }\r\n                    return formattedAmount.toString();\r\n                };\r\n\r\n                /*\r\n                 * Number formatter\r\n                 */\r\n                $scope.numberFormatter = function (amountarg, zeroprecision) {\r\n                    var formattedAmount = amountarg;\r\n                    if (zeroprecision)\r\n                        formattedAmount = Number(amountarg).toFixed(0);\r\n                    if (formattedAmount >= 1000000 || formattedAmount <= -1000000) {\r\n                        var shortamount = formattedAmount / 1000000;\r\n                        if (zeroprecision) {\r\n                            formattedAmount = Number(shortamount).toFixed(0);\r\n                        } else {\r\n                            formattedAmount = shortamount;\r\n                        }\r\n                        return $filter('number')(formattedAmount) + \" MM\";\r\n                    }\r\n                    else {\r\n                        return $filter('number')(formattedAmount);\r\n                    }\r\n                };\r\n            },\r\n            link: function (scope, element, attr) {\r\n                var headerTemplate, rowTemplate, headerData, rowData, cellTemplate, cellRenderer, headerCellRenderer, onClick, rowHeight, cellStyle;\r\n\r\n                scope.$watch('gridConfig', function (n, o) {\r\n                    if (n) {\r\n                        scope.config = scope.gridConfig;\r\n\r\n                        if (scope.config && scope.config.headerTemplate) {\r\n                            headerTemplate = scope.config.headerTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowTemplate) {\r\n                            rowTemplate = scope.config.rowTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.headerData) {\r\n                            headerData = scope.config.headerData;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowData) {\r\n                            rowData = scope.config.rowData;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.dimension && scope.config.dimension.height) {\r\n                            scope.gridHeight = scope.config.dimension.height;\r\n                        }\r\n                        else {\r\n                            scope.gridHeight = element.parent().outerHeight(true);\r\n                        }\r\n\r\n                        scope.gridHeight = scope.gridHeight - 1; // 1 is the border\r\n\r\n                        if (scope.config && scope.config.cellRenderer) {\r\n                            cellRenderer = scope.config.cellRenderer;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.headerCellRenderer) {\r\n                            headerCellRenderer = scope.config.headerCellRenderer;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.onClick) {\r\n                            onClick = scope.config.onClick;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.cellTemplate) {\r\n                            cellTemplate = scope.config.cellTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowHeight) {\r\n                            rowHeight = scope.config.rowHeight;\r\n                        }\r\n                        else {\r\n                            rowHeight = 40;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.cellStyle) {\r\n                            cellStyle = scope.config.cellStyle;\r\n                        }\r\n\r\n                        var columnDefs = [];\r\n                        var cellWidth = element.parent().outerWidth() / headerData.length;\r\n\r\n                        for (var i = 0; i < headerData.length; i++) {\r\n                            columnDefs.push({\r\n                                displayName: headerData[i].title,\r\n                                field: headerData[i].datamappingkey,\r\n                                suppressSorting: headerData[i].sortable ? false : true,\r\n                                formatterType: headerData[i].formatterType,\r\n                                clickable: headerData[i].clickable ? true : false,\r\n                                align: headerData[i].align,\r\n                                width: headerData[i].width != undefined ? headerData[i].width : cellWidth,\r\n                                cellStyle: headerData[i].cellStyle != undefined ? headerData[i].cellStyle : undefined\r\n                            });\r\n\r\n                            //  Set default currency if the formatter type is currency\r\n                            if (headerData[i].formatterType == 'currency') {\r\n                                columnDefs[columnDefs.length - 1].defaultCurrency = headerData[i].defaultCurrency;\r\n                            }\r\n\r\n                            if (cellTemplate != undefined) {\r\n                                columnDefs[columnDefs.length - 1].template = cellTemplate;\r\n                            }\r\n                            else {\r\n                                columnDefs[columnDefs.length - 1].cellRenderer = cellRenderer ? cellRenderer : function (e) {\r\n                                    var columnValue, titleValue;\r\n                                    switch (e.colDef.formatterType) {\r\n                                        case 'link':\r\n                                            columnValue = titleValue = '<a>' + e.value + '</a>';\r\n                                            break;\r\n\r\n                                        case 'number':\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = titleValue = '<a>' + e.value + '</a>';\r\n                                            }\r\n                                            break;\r\n\r\n                                        case 'currency':\r\n                                            columnValue = titleValue = scope.currencyFormatter(e.value, undefined, true, e.colDef.defaultCurrency);\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = '<a>' + columnValue + '</a>';\r\n                                            }\r\n                                            break;\r\n\r\n                                        default:\r\n                                            columnValue = e.value === 0 || e.value === '0' ? '0' : (e.value == 'null' || e.value == null || e.value == '' ? '<span style=\"color: transparent;\">-</span>' : e.value);\r\n                                            titleValue = e.value;\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = '<a>' + columnValue + '</a>';\r\n                                            }\r\n                                            break;\r\n                                    }\r\n                                    if (e.value == 'null' || e.value == null || e.value == '') {\r\n                                        return '<span style=\"width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\">' + columnValue + '</span>';\r\n                                    }\r\n                                    else {\r\n                                        return '<span style=\"width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\" title=\"' + titleValue + '\">' + columnValue + '</span>';\r\n                                    }\r\n                                    //'<a style=\"white-space: normal;\">' + columnValue + '</a>' - To avoid text ellipsis\r\n                                };\r\n                            }\r\n                        }\r\n\r\n                        var tmpRowData = [];\r\n                        for (var i = 0; i < rowData.length; i++) {\r\n                            tmpRowData[i] = {};\r\n                            for (var j = 0; j < columnDefs.length; j++) {\r\n                                tmpRowData[i][columnDefs[j].field] = rowData[i][columnDefs[j].field]; // rowData[i][columnDefs[j].field] == 'null' || rowData[i][columnDefs[j].field] == null  || rowData[i][columnDefs[j].field] == '' ? '<span style=\"color: transparent;\">-</span>' : rowData[i][columnDefs[j].field];\r\n                            }\r\n                        }\r\n\r\n                        if (scope.angularGridConfig) {\r\n                            scope.angularGridConfig.columnDefs = columnDefs;\r\n                            scope.angularGridConfig.rowData = tmpRowData;\r\n                            scope.angularGridConfig.api.onNewRows();\r\n                        }\r\n                        else {\r\n                            scope.angularGridConfig = {\r\n                                columnDefs: columnDefs,\r\n                                rowData: tmpRowData,\r\n                                enableSorting: true,\r\n                                angularCompileRows: true,\r\n                                virtualPaging: true,\r\n                                enableColResize: true,\r\n                                angularCompileHeaders: scope.config && scope.config.angularCompileHeaders,\r\n                                headerCellRenderer: headerCellRenderer ? headerCellRenderer : function (e) {\r\n                                    return '<span style=\"width: 80%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\">' + e.colDef.displayName + '</span>';\r\n                                },\r\n                                cellClicked: onClick ? function (e) {\r\n                                    onClick({ dataMappingKey: e.colDef.field, value: e.value, rowIndex: e.rowIndex, rowData: rowData[e.rowIndex], clickable: e.colDef.clickable });\r\n                                } : undefined,\r\n                                rowHeight: rowHeight == undefined ? undefined : rowHeight\r\n                            };\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartGrid/smartGrid.html'\r\n        };\r\n    }]);\r\n})();\r\n/*\r\n * Inject required CSS\r\n */\r\n//var angularGridCSS = document.createElement(\"link\");\r\n//angularGridCSS.setAttribute(\"rel\", \"stylesheet\");\r\n//angularGridCSS.setAttribute(\"type\", \"text/css\");\r\n//angularGridCSS.setAttribute(\"href\", $('#blobURL').val()+'shared/libraries/angularGrid/angularGrid.css');\r\n//document.getElementsByTagName(\"head\")[0].appendChild(angularGridCSS);\r\n\r\n//var angularGridThemeCSS = document.createElement(\"link\");\r\n//angularGridThemeCSS.setAttribute(\"rel\", \"stylesheet\");\r\n//angularGridThemeCSS.setAttribute(\"type\", \"text/css\");\r\n//angularGridThemeCSS.setAttribute(\"href\", $('#blobURL').val()+'shared/libraries/angularGrid/theme-fresh.css');\r\n//document.getElementsByTagName(\"head\")[0].appendChild(angularGridThemeCSS);\r\n\nangular.module('SMART2').directive('smartInfotip', ['$window', function ($window) {\r\n    \"use strict\";\r\n    var _lastOpenInfotip = {},\r\n    hideLastInfotip = function (hObj) {\r\n        if (_lastOpenInfotip.target && _lastOpenInfotip.target.hasClass('isInfotipVisible')) {\r\n            _lastOpenInfotip.target.removeClass('isInfotipVisible');\r\n            _lastOpenInfotip.infotip.find(\".infotip-popover\").addClass('hide-popover-element');\r\n            _lastOpenInfotip.infotip.find(\".infotip-popover-triangle\").addClass('hide-popover-element');\r\n            _lastOpenInfotip._ev.value = true;\r\n        }\r\n    };\r\n    $(document).click(function (evt) {\r\n        hideLastInfotip();\r\n     });\r\n    return {\r\n        restrict: 'A',\r\n        transclude: true,\r\n        scope:true,\r\n        link: function (scope, element, attrs) {\r\n            //the root div of the popup template\r\n            var popover_container = element.find('.infotip-popover-container'),\r\n                popover_container_parent = popover_container.parent(),\r\n                popover = element.find('.infotip-popover'), //the popover element\r\n                triangle = element.find('.infotip-popover-triangle'), //the small triangle attached with the popover\r\n                triangle_height, //vertical height of the triangle\r\n                triangle_diagonal, //base of the triangle\r\n                triangle_div_side = 15, //side of the triangle\r\n                triangle_rect_div_side = 30, //the div which has been rotated to make a triangle using the after pseudo class\r\n                infotipElement = element,\r\n                getPosition = popover_container_parent.css('position') === \"\" || popover_container_parent.css('position') === \"static\" ? \"relative\" : popover_container_parent.css('position'),\r\n                $win = angular.element($window),\r\n                bindOn = !attrs.bindOn ? 'click mouseover interesected' : attrs.bindOn;\r\n\r\n            popover_container_parent.css({ 'position': getPosition, 'z-index': '1', 'display': 'inline-block' });\r\n            //popover_container_parent.css('position', getPosition);\r\n            //popover_container_parent.css('display', 'inline-block');\r\n            triangle_height = Math.sqrt(triangle_div_side * triangle_div_side / 2);\r\n            triangle_diagonal = Math.sqrt(triangle_div_side * triangle_div_side * 2);\r\n            var mode = attrs.mode === '' || attrs.mode === undefined ? 'mouseover' : attrs.mode;\r\n            var closeOnClick = attrs.closeOnClick === undefined ?\r\n                                    (mode == 'click' ? true : false) :\r\n                                    (attrs.closeOnClick === 'true');\r\n\r\n            var closeOnMouseleave = attrs.closeOnMouseleave === undefined ?\r\n                                        (mode == 'mouseover' ? true : false) :\r\n                                        (attrs.closeOnMouseleave === 'true');\r\n\r\n            var hideOnDocHover = { value: attrs.hideOnDocHover == 'true' };\r\n            //return the path of the popover template\r\n            scope.getContentPopover = attrs.templateUrl;\r\n\r\n            scope.isTemplateUrl = attrs.templateUrl ? true : false;\r\n\r\n            //depending upon the position specified, attached the appropriate class to the popover \r\n            var getTriangleClass = function () {\r\n                return 'infotip-popover-triangle-' + attrs.position;\r\n            }\r\n\r\n            var hideTooltip = function () {\r\n                setTimeout(function () {\r\n                    if (!onHoverablearea() && hideOnDocHover.value) {\r\n                        popover.addClass('hide-popover-element');\r\n                        triangle.addClass('hide-popover-element');\r\n                    }\r\n                }, 0);\r\n            };\r\n            var onHoverablearea = function () {\r\n                return (popover.is(':hover') || infotipElement.is(':hover') || triangle.is(':hover'));\r\n            };\r\n\r\n            scope.triangleClass = getTriangleClass();\r\n            if (closeOnMouseleave) {\r\n                if (hideOnDocHover.value) {\r\n                    infotipElement.bind('mouseleave blur', function () {\r\n                         hideTooltip();\r\n                    });\r\n                    popover.bind('mouseleave blur', function () {\r\n                        hideTooltip();\r\n                    });\r\n                    triangle.bind('mouseleave blur', function () {\r\n                        hideTooltip();\r\n                    });\r\n                }\r\n                else {\r\n                    infotipElement.bind('mouseleave blur ', function () {\r\n                        popover.addClass('hide-popover-element');\r\n                        triangle.addClass('hide-popover-element');\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (mode != 'click' && closeOnClick) {\r\n                infotipElement.bind('click', function () {\r\n                    popover.addClass('hide-popover-element');\r\n                    triangle.addClass('hide-popover-element');\r\n                });\r\n            }\r\n\r\n            popover.on('click', function (evt) {\r\n                evt.stopPropagation();\r\n            });\r\n\r\n            //Hide infotip on scroll\r\n            $win.bind('scroll', function (e) {\r\n                popover.addClass('hide-popover-element');\r\n                triangle.addClass('hide-popover-element');\r\n            });\r\n\r\n            //listen for click on the directive element\r\n            infotipElement.bind(bindOn, function (evt) {\r\n                evt.stopImmediatePropagation();\r\n               var _this = $(this),\r\n                parent_height = _this.outerHeight(),\r\n                parent_width, popover_height, popover_width,\r\n                elementOffsetTop = element.offset().top + 23,\r\n                elementOffsetLeft = element.offset().left,\r\n                leftPos;\r\n\r\n                if (evt.type == \"click\") {\r\n                    hideLastInfotip();\r\n                    hideOnDocHover.value = false;\r\n                    _this.addClass('isInfotipVisible');\r\n                    _lastOpenInfotip.target = _this;\r\n                    _lastOpenInfotip.infotip = popover_container;\r\n                    _lastOpenInfotip._ev = hideOnDocHover;\r\n                };\r\n\r\n                if (mode == \"canvas\") {\r\n                    elementOffsetTop = 100;\r\n                    elementOffsetLeft = 100;\r\n                    parent_height = 100;\r\n                }\r\n\r\n                //move the popover container to the bottom of the directive element\r\n                popover_container.css(\"top\", parent_height)//.style.top = parent_height + 'px';\r\n                parent_width = _this.outerWidth();\r\n\r\n                //'mouseover' mode\r\n                if (popover.hasClass('hide-popover-element') && attrs.message != '') {\r\n                    popover.removeClass('hide-popover-element');\r\n                    triangle.removeClass('hide-popover-element');\r\n                }\r\n\r\n                //if the template is supplied instead of templateUrl, set the popover innerHTML to the string passed in the 'template' attribute\r\n                if (attrs.message) {\r\n                    var templateElement = _this.find('.infotip-popover-template');\r\n                    templateElement.html(attrs.message);\r\n                }\r\n\r\n                var setDynamicInfotipPosition = function (position) {\r\n                    _this.find('.' + scope.triangleClass).removeClass(scope.triangleClass);\r\n                    triangle.removeClass(scope.triangleClass);\r\n                    attrs.position = position;\r\n                    scope.triangleClass = getTriangleClass();\r\n                    triangle.addClass(scope.triangleClass);\r\n                }\r\n\r\n                attrs.position = attrs.position === '' || attrs.position === undefined ? 'top' : attrs.position;\r\n\r\n                //function to set dynamic position for popover and triangle\r\n                var getDyanamicPositions = function () {\r\n                    var popoverOffset = popover.offset(),\r\n                                        bodyScrolled = $(\"body\").scrollTop() || $(\"html\").scrollTop();\r\n\r\n                    if (popoverOffset.left + popover.width() > $(window).width()) {\r\n                        leftPos = true;\r\n                        setDynamicInfotipPosition('left');\r\n                    } else if (popoverOffset.left < (0 || 10)) {\r\n                        setDynamicInfotipPosition('right');\r\n                    } else if (popover[0].getBoundingClientRect().top < 0) {\r\n                        setDynamicInfotipPosition('bottom');\r\n                    } else if ((popover[0].getBoundingClientRect().top + popover.height()) >= $(window).height()) {\r\n                        setDynamicInfotipPosition('top');\r\n                    } \r\n                };\r\n\r\n                //check position and calculate position for appending popover and triangle\r\n                var setInfotipPosition = function () {\r\n                    popover_height = popover.outerHeight();\r\n                    popover_width = popover.outerWidth();\r\n\r\n                    if (mode == \"canvas\") {\r\n                        popover_height = 100;\r\n                        popover_width = 100;\r\n                        if (infotipElement.attr(\"interesect\")) {\r\n                            var intersect = JSON.parse(infotipElement.attr(\"interesect\")),\r\n                                templateElement;\r\n\r\n                            popover.css({\r\n                                top: (intersect.y - triangle_height - 100),\r\n                                left: (intersect.x)\r\n                            });\r\n                            triangle.css({\r\n                                top: (intersect.y - triangle_height - 100),\r\n                                left: (intersect.x - triangle_rect_div_side)\r\n                            });\r\n\r\n                        }\r\n                        templateElement = _this.find('.infotip-popover-template');\r\n                        templateElement.html(infotipElement.attr(\"message\"));\r\n                        return;\r\n                    }\r\n\r\n                    switch (attrs.position) {\r\n                        case 'top':\r\n                            popover.css({\r\n                                top: (-parent_height - popover_height - triangle_height),\r\n                                left: ((parent_width - popover_width) / 2)\r\n                            });\r\n                            triangle.css({\r\n                                top: (-parent_height - triangle_height),\r\n                                left: ((parent_width - triangle_rect_div_side) / 2)\r\n                            });\r\n                            break;\r\n\r\n                        case 'bottom':\r\n                            popover.css({\r\n                                top: triangle_height,\r\n                                left: ((parent_width - popover_width) / 2)\r\n                            });\r\n                            triangle.css({\r\n                                top: -(triangle_rect_div_side - triangle_height),\r\n                                left: ((parent_width - triangle_rect_div_side) / 2)\r\n                            });\r\n                            break;\r\n\r\n                        case 'right':\r\n                            popover.css({\r\n                                top: ((parent_height - popover_height) / 2 - parent_height),\r\n                                left: parent_width + triangle_height\r\n                            });\r\n                            triangle.css({\r\n                                top: ((parent_height - triangle_rect_div_side) / 2 - parent_height),\r\n                                left: (parent_width - (triangle_rect_div_side - triangle_height))\r\n                            });\r\n                            break;\r\n\r\n                        case 'left':\r\n                            if (leftPos) {\r\n                                popover.css({ left: -(popover_width + triangle_div_side) })\r\n                            }\r\n                            popover.css({\r\n                                top: ((parent_height - popover_height) / 2 - parent_height),\r\n                                right: triangle_height\r\n                            });\r\n                            triangle.css({\r\n                                top: ((parent_height - triangle_rect_div_side) / 2 - parent_height),\r\n                                left: -triangle_height\r\n                            });\r\n                            if (attrs.customStyle == 'true') {\r\n                                popover.css({ left: -(popover_width + triangle_div_side - 5) });\r\n                                triangle.css({\r\n                                    top: ((parent_height - triangle_rect_div_side) / 2 - parent_height + 5),\r\n                                });\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                //Append infotip to body only when isFixed = 'true'\r\n                var appendInfotipToBody = function () {\r\n                    if (attrs.isFixed == 'true') {\r\n                        if (!popover_container.data('appended')) {\r\n                            angular.element('body').append(popover_container.data('appended', true));\r\n                        }\r\n                        if (attrs.customStyle == 'true') {\r\n                            popover_container.addClass('fullWidthInfo');\r\n                        }\r\n                        if (attrs.showFullTip == 'true') {\r\n                            popover_container.addClass('showFullTip');\r\n                        }\r\n                        var templateElementBody = popover_container.find('.infotip-popover-template');\r\n                        templateElementBody.html(attrs.message);\r\n                        popover_container.css({ 'top': elementOffsetTop + 'px', 'left': elementOffsetLeft + 'px' });\r\n                    }\r\n                }\r\n\r\n                setInfotipPosition();\r\n                appendInfotipToBody();\r\n                getDyanamicPositions();\r\n                setInfotipPosition();\r\n                appendInfotipToBody();\r\n            });\r\n        },\r\n        templateUrl: 'shared/directives/uiElements/smartInfotip/smartInfotipTemplate.html'\r\n    }\r\n}]);\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartList', ['$parse', '$window', 'commonUtilities', function ($parse, $window, commonUtilities) {\r\n        return {\r\n            restrict: 'AE',\n            replace: false,\n            scope: true,\n            link: function (scope, element, attrs) {\r\n                scope.styleClass = 'collection';\n                scope.itemClass = 'collection-item';\n                // evaluating callback for list\n                var clickCallback = $parse(attrs.clickCallback);\n\n                attrs.$observe('selectiveDisplayConfig', function (displayConfig) {\r\n                    if (displayConfig) {\r\n                        scope.listDisplayConfig = scope.$eval(displayConfig);\r\n                    } else {\r\n                        scope.listDisplayConfig = { \"showIcon\": true, \"showAction\": false, \"importantAttribLimit\": 5 };\r\n                    }\r\n\r\n                });\n\n                //Loacal list Click handler\n                scope.listClickHandler = function (item) {\r\n                    if (angular.isFunction(clickCallback)) {\r\n                        clickCallback(scope, { e: item });\r\n                    }\r\n                };\n\n                attrs.$observe(\"height\", function (value) {\r\n                    if (value) {\r\n                        scope.listHeight = value;\r\n                    }\r\n                });\n\n                attrs.$observe('model', function (value) {\r\n                    if (value) {\r\n                        scope.dataModel = scope.$eval(value);\r\n                    }\r\n                });\n\n\n                attrs.$observe('styleClass', function (value) {\r\n                    scope.styleClass = value;\r\n                });\n\n                attrs.$observe('itemClass', function (value) {\r\n                    scope.itemClass = value;\r\n                });\n\n                attrs.$observe('template', function (value) {\r\n                    scope.template = value;\r\n                });\n                var lazyLoadingCallback = $parse(attrs.lazyLoadCallback);\n                var backToTopCallback = $parse(attrs.backToTopCallback);\n                var scrolledCallback = $parse(attrs.scrollInProgress);\n\n                scope.scrollEndCallback = function () {\r\n                    if (angular.isFunction(lazyLoadingCallback)) {\r\n                        lazyLoadingCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.scrollToTopCallback = function () {\r\n                    if (angular.isFunction(backToTopCallback)) {\r\n                        backToTopCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.scrollInProgress = function () {\r\n                    if (angular.isFunction(scrolledCallback)) {\r\n                        scrolledCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.actionElementID = commonUtilities.uniqueIDGenerator;\r\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartList/smartListTemplate.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartListLookup', ['$rootScope', '$timeout', 'ScrollTo', 'lookup', 'debouncer', function ($rootScope, $timeout, ScrollTo, lookup, debouncer) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                callAddNew: '&',\r\n                lookupOpen: '&',\r\n                lookupHide: '&',\r\n                searchtextKeyUp: '&',\r\n                readonly: '@',\r\n                displayformat: '@',\r\n                multiselect: '@',\r\n                addnew: '@',\r\n                titleofmodel: '@',\r\n                selecttypeoption: '='\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                var multiselect = (scope.multiselect == undefined || scope.multiselect == null) ? false : scope.multiselect == \"true\" ? true : false;\r\n                var addnew = (scope.addnew == undefined || scope.addnew == null) ? false : scope.addnew == \"true\" ? true : false;\r\n                //var readonly = (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false;\r\n                var formatedArray = eval(scope.displayformat);\r\n                scope.valuetoshow = [\"\"];\r\n                scope.titleofmodel = (scope.titleofmodel == undefined || scope.titleofmodel == null) ? 'Title Of Model' : scope.titleofmodel;\r\n                scope.toolTip = \"\";\r\n                var isInfoTipEnable = attrs.showInfoTip == 'true' ? true : false,\r\n                    checkInfoToolTip = function () {\r\n                        var infotipData = scope.ngModel;\r\n                        \r\n\r\n                        if (isInfoTipEnable) {\r\n                            scope.toolTip = _.pluck(scope.ngModel, \"name\").join('</br>');\r\n                        } \r\n                    };\r\n\r\n                function generateName(obj) {\r\n                    var label = \"\",\r\n                        formattedLen = formatedArray.length;\r\n                    for (var j = 0; j < formattedLen; j++) {\r\n                        if (obj.hasOwnProperty(formatedArray[j])) {\r\n                            label = label + \" \" + obj[formatedArray[j]];\r\n                        }\r\n                    }\r\n                    return label;\r\n                }\r\n\r\n               var deregisterWatchModel = scope.$watch(\"ngModel\", function (newVal) {\r\n                    scope.valuetoshow = [\"\"];\r\n                    if (multiselect) {\r\n                        if (angular.isDefined(newVal)) {\r\n                            if (newVal.length > 0) {\r\n                                scope.valuetoshow = [generateName(newVal[0])];\r\n                                var totalEl = newVal.length;\r\n                                if (totalEl > 1) {\r\n                                    scope.valuetoshow.push(\"+\" + (totalEl - 1) + \" More\");\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        scope.valuetoshow = [generateName(newVal)];\r\n                    }\r\n                    if (scope.valuetoshow[0] == \"\") {\r\n                        scope.isActive = false;\r\n                    } else {\r\n                        scope.isActive = true;\r\n                    }\r\n                    checkInfoToolTip();\r\n                });\r\n\r\n                scope.openLookup = function () {\r\n                    debouncer.add(function () {\r\n                        if (scope.readonly === 'true' && !scope.valuetoshow[1]) return false;\r\n                        if ($.isFunction(scope.lookupOpen)) {\r\n                            scope.lookupOpen();\r\n                        }\r\n                        var lookupConfig = {\r\n                            modelData: scope.ngModel,\r\n                            config: {\r\n                                mutliselect: multiselect,\r\n                                displayProperties: formatedArray,\r\n                                options: scope.options,\r\n                                addnew: addnew,\r\n                                isMandatory: scope.isMandatory,\r\n                                onKeyUp: attrs.searchtextKeyUp ? scope.searchtextKeyUp : '',\r\n                                titleOfModel: scope.titleofmodel,\r\n                                selectTypeOption: scope.selecttypeoption,\r\n                                readonly: (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false\r\n                            }\r\n                        }\r\n                        var cancelTimer = $timeout(function () {\r\n                            lookup.open(lookupConfig, function (response) {\r\n\r\n                                if (response.addnew) {\r\n                                    if ($.isFunction(scope.callAddNew)) {\r\n                                        scope.callAddNew();\r\n                                    }\r\n                                }\r\n                                scope.ngModel = response.result;\r\n                                scope.defaultselectiontext = response.defaultSelectionText;\r\n                                scope.selecttypeoption = response.selectTypeOption;\r\n                                if ($.isFunction(scope.lookupHide)) {\r\n                                    scope.lookupHide({ data: response });\r\n                                }\r\n                            });\r\n                            $timeout.cancel(cancelTimer);\r\n                            cancelTimer = null;\r\n                        });\r\n                    }, 300);\r\n                }\r\n\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                scope.$on('$destroy', function () {\r\n                    deregisterWatchModel();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartListLookup/smartListLookupTemplate.html'\r\n        };\r\n    }]);\r\n})();\n//(function () {\r\n//    'use strict';\n//    angular.module('SMART2').factory('httpLoaderInterceptor', ['$rootScope', function ($rootScope) {\n//        // Active request count\n//        var requestCount = 0;\n\n//        function startRequest(config) {\n//            // If no request ongoing, then broadcast start event\n//            if (!requestCount) {\r\n//                $rootScope.$broadcast('httpLoaderStart');\r\n//            }\n\n//            requestCount++;\n//            return config;\r\n//        }\n\n//        function endRequest(arg) {\n//            // No request ongoing, so make sure we don’t go to negative count\n//            if (!requestCount)\n//                return;\n\n//            requestCount--;\n//            // If it was last ongoing request, broadcast event\n//            if (!requestCount) {\r\n//                $rootScope.$broadcast('httpLoaderEnd');\r\n//            }\n\n//            return arg;\r\n//        }\n\n//        /* ROOTSCOPE EXPOSED BROADCAST TRIGGERS FOR LOADER */\n//        $rootScope.showCentralLoader = function () {\r\n//            $rootScope.$broadcast('httpLoaderStart');\r\n//        };\n\n//        $rootScope.hideCentralLoader = function () {\r\n//            $rootScope.$broadcast('httpLoaderEnd');\r\n//        };\n//        /* END FOR -- ROOTSCOPE EXPOSED BROADCAST TRIGGERS FOR LOADER */\n\n//        // Return interceptor configuration object\n//        return {\r\n//            'request': startRequest,\n//            'requestError': endRequest,\n//            'response': endRequest,\n//            'responseError': endRequest\r\n//        };\r\n//    }]);\n\n//    angular.module('SMART2').config(['$httpProvider', function ($httpProvider) {\r\n//        $httpProvider.interceptors.push('httpLoaderInterceptor');\r\n//    }]);\n\n//    angular.module('SMART2').directive('httpLoader', function () {\r\n//        return {\r\n//            restrict: 'EA',\n//            templateUrl: 'shared/directives/uiElements/smartLoader/smartLoaderTemplate.html',\n//            link: function (scope, element) {\n//                // Store original display mode of element\n//                var shownType = element.css('display');\n//                function hideElement() {\r\n//                    element.css('display', 'none');\r\n//                }\n\n//                scope.$on('httpLoaderStart', function () {\r\n//                    element.css('display', shownType);\r\n//                });\n\n//                scope.$on('httpLoaderEnd', hideElement);\n\n//                // Initially hidden\n//                hideElement();\r\n//            }\r\n//        };\r\n//    });\n\n//    angular.module('SMART2').directive('routeLoader', function () {\r\n//        return {\r\n//            restrict: 'EA',\r\n//            templateUrl: 'shared/directives/uiElements/smartLoader/smartLoaderTemplate.html',\r\n//            link: function (scope, element) {\r\n//                // Store original display mode of element\r\n//                var shownType = element.css('display');\r\n//                function hideElement() {\r\n//                    element.css('display', 'none');\r\n//                }\r\n\r\n//                scope.$on('$routeChangeStart', function () {\r\n//                    element.css('display', shownType);\r\n//                });\r\n//                scope.$on('$routeChangeSuccess', hideElement);\r\n//                scope.$on('$routeChangeError', hideElement);\r\n//                // Initially element is hidden\r\n//                hideElement();\r\n//            }\r\n//        }\r\n//    });\r\n//})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('lookup', ['$rootScope', function ($rootScope) {\r\n        var Obj = {};\r\n        Obj.onCallback = undefined;\r\n        Obj.on = function (callback) {\r\n            Obj.onCallback = callback;\r\n        };\r\n\r\n        Obj.open = function (config, callback) {\r\n            this.config = config;\r\n            this.broadcastItem();\r\n            this.resultCallBack = function (result) {\r\n                callback(result);\r\n            };\r\n        };\r\n        Obj.optionUpdate = function (option) {\r\n            if (typeof this.config != 'undefined') {\r\n                this.config.config.options = option;\r\n            }\r\n        };\r\n        Obj.getConfig = function () {\r\n            return this.config;\r\n        };\r\n        Obj.setTempModel = function (arg) {\r\n            this.tempModel = arg;\r\n        };\r\n        Obj.getTempModel = function () {\r\n            return this.tempModel;\r\n        };\r\n        Obj.onScrollEnd = function (callback) {\r\n            this.onScrollEndCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.onScrollTop = function (callback) {\r\n            this.onScrollTopCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.onScrollInProgress = function (callback) {\r\n            this.onScrollInProgressCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.broadcastItem = function () {\r\n            angular.isFunction(Obj.onCallback) && Obj.onCallback();\r\n        };\r\n        return Obj;\r\n    }]);\r\n\r\n    var countForTheProprty = 0;\r\n    angular.module('SMART2').directive('smartLookup', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', function ($rootScope, $timeout, $translate, ScrollTo, lookup) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.searchText = { title: \"\" };\r\n                scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                function isObjectEquals(obj1, obj2) {\r\n                    var checkObj2 = function () {\r\n                        for (var i in obj2) { }\r\n                        return i == undefined ? false : true;\r\n                    }\r\n                    if (obj2 == '' || obj2 == null || checkObj2() === false) {\r\n                        return false;\r\n                    }\r\n                    for (var i in obj2) {\r\n                        if (obj2.hasOwnProperty(i)) {\r\n                            if (!obj1.hasOwnProperty(i)) return false;\r\n                            if (obj2[i] != obj1[i]) return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                function containsObject(obj, list, catalogObj) {\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        if (catalogObj) {\r\n                            if (obj.UserId == list[i]) {\r\n                                return true;\r\n                            };\r\n                        } else {\r\n                            if (isObjectEquals(obj, list[i])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                scope.smartScrollEnd = function () {\r\n                    if (angular.isFunction(lookup.onScrollEndCall)) {\r\n                        lookup.onScrollEndCall();\r\n                    };\r\n                    $timeout(function () {\r\n                        if (scope.isLazyLoadingEnabled && scope.limitToCount <= scope.options.length)\r\n                            scope.limitToCount = scope.limitToCount + 35;\r\n                    });\r\n                };\r\n                scope.smartScrollTop = function () {\r\n                    if (angular.isFunction(lookup.onScrollTopCall)) {\r\n                        lookup.onScrollTopCall();\r\n                    };\r\n                };\r\n                scope.smartScrollInProgress = function () {\r\n                    if (angular.isFunction(lookup.onScrollInProgressCall)) {\r\n                        lookup.onScrollInProgressCall();\r\n                    };\r\n                };\r\n                scope.searchText = { title: \"\" };\r\n                scope.selectdCount = 0;\r\n                scope.model = [];\r\n                scope.options = [];\r\n                scope.displayProperties = [\"name\"];\r\n                scope.selectTypeOptionWith = '';\r\n                scope.propKey = \"\";\r\n                countForTheProprty++;\r\n                function generateName(obj) {\r\n                    var label = \"\";\r\n                    if (scope.displayProperties.length == 1) {\r\n                        label = obj[scope.displayProperties[0]];\r\n                    }\r\n                    else {\r\n                        for (var j = 0; j < scope.displayProperties.length; j++) {\r\n                            if (scope.propSeparation !== undefined && j !== scope.displayProperties.length - 1) {\r\n                               label = label + \" \" + obj[scope.displayProperties[j]] + \" \" + scope.propSeparation;\r\n                            }\r\n                            else { \r\n                                label = label + \" \" + obj[scope.displayProperties[j]];\r\n                            }\r\n                        }\r\n                    }\r\n                    return label;\r\n              \r\n                }\r\n                var stopInit = false;\r\n                function initialize() {\r\n                    //migrate two array with flag\r\n                    scope.propKey = \"counterProp\" + countForTheProprty;\r\n                    if (scope.options == undefined || scope.config.options == undefined) {\r\n                        scope.options = [];\r\n                    } else {                      \r\n                            scope.options = scope.config.options;                        \r\n                    }\r\n                    if (scope.multiple) {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!scope.options[i].hasOwnProperty(\"ischecked\") && !stopInit) {\r\n                                if (containsObject(scope.options[i], scope.model, scope.isObjectCompareCatalog)) {\r\n                                    scope.options[i].ischecked = true;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                } else {\r\n                                    scope.options[i].ischecked = false;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                }\r\n                                if (scope.descriptionKey) {\r\n                                    scope.options[i].description = scope.options[i][scope.descriptionKey];\r\n                                }\r\n                            }                           \r\n                        }\r\n                        if (scope.minMultiselect) {\r\n                            checkSelectedItems();\r\n                        }\r\n                    } else {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!stopInit) {\r\n                                if (isObjectEquals(scope.options[i], scope.model)) {\r\n                                    scope.options[i].ischecked = true;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                } else {\r\n                                    scope.options[i].ischecked = false;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                }\r\n                                if (scope.descriptionKey) {\r\n                                    scope.options[i].description = scope.options[i][scope.descriptionKey];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.limitToCount = scope.isLazyLoadingEnabled ? 35 : scope.options.length;\r\n                };\r\n                scope.searchTextKeyUpFn = function (e) {\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: { text: e.target.value, type: \"textfield\", \"e\": e } });\r\n                    }\r\n\r\n                    if (e.keyCode == 13) {\r\n                        element.find(\"#lookup-content-wrpper .scroll-content\").scrollTop(0);\r\n                        if (scope.clearModelOnEnter) {\r\n                            scope.model = [];\r\n                        }\r\n                    }\r\n                    scope.cancelTitle = e.target.value == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                }\r\n\r\n                var regEx = new RegExp(\"\", \"ig\");\r\n                //scope.filterKeyFn = function (searchtxt, filterKey, stopFilterOnKey) {\r\n                //    return function (item) {\r\n                //        var r;\r\n                //        if (filterKey && !stopFilterOnKey && searchtxt != \"\") {\r\n                //            regEx.compile(searchtxt, \"ig\");\r\n                //            for (var f = 0; f < filterKey.length; f++) {\r\n                //                if (!searchtxt || item[filterKey[f]].toString().search(regEx) > -1) {\r\n                //                    r = true;\r\n                //                    break;\r\n                //                } else {\r\n                //                    r = false\r\n                //                }\r\n                //            }\r\n                //        } else {\r\n                //            r = true;\r\n                //        }\r\n                //        return r;\r\n                //    }\r\n                //}\r\n                function scrollbarReload() {\r\n                    if (scope.scrollAlwaysTopOnload == true && scope.scrollReload == false) {\r\n                        scope.scrollReload = true\r\n                    } else if (scope.scrollAlwaysTopOnload == true && scope.scrollReload == true) {\r\n                        scope.scrollReload = false\r\n                    }\r\n                };\r\n                scope.triggerFlag = false;\r\n                var returnObj = {};\r\n                lookup.on(function () {\r\n                    scope.config = lookup.config.config;\r\n                    scope.minMultiselect = scope.config.minMultiselect;\r\n                    scope.label = scope.config.label;\r\n                    scope.isSearchOpen = false;\r\n                    scope.multiple = false;\r\n                    scope.addnew = false;\r\n                    scope.readonly = false;\r\n                    scope.multiple = typeof (scope.config.mutliselect) == \"undefined\" ? false : scope.config.mutliselect;\r\n                    scope.addnew = typeof (scope.config.addnew) == \"undefined\" ? false : scope.config.addnew;\r\n                    scope.readonly = typeof (scope.config.readonly) == \"undefined\" ? false : scope.config.readonly;\r\n                    scope.titleOfModel = typeof (scope.config.titleOfModel) === \"undefined\" ? $translate.instant('titleOfModel') : scope.config.titleOfModel;\r\n                \t/*  Default Selection scope variable */\r\n                    scope.config.defaultSelectOption = typeof (scope.config.defaultSelectOption) === \"undefined\" ? false : scope.config.defaultSelectOption;\r\n                    scope.config.defaultSelectionText = typeof (scope.config.defaultSelectionText) === \"undefined\" ? \"\" : scope.config.defaultSelectionText;\r\n                    scope.config.selectTypeOption = typeof (scope.config.selectTypeOption) === \"undefined\" ? null : scope.config.selectTypeOption;\r\n                    scope.selectiontext = angular.copy(scope.config.selectTypeOption);    \r\n                    scope.model = lookup.config.modelData;\r\n                    scope.isLazyLoadingEnabled = scope.config.isLazyLoadingEnabled;\r\n                    \r\n                    if (angular.isDefined(scope.model) && (scope.model != \"\" || angular.equals(scope.model, {}) )) {\r\n                        if (scope.multiple) {\r\n                            scope.selectdCount = scope.model.length || 0;\r\n                        }\r\n                        else if (scope.model.hasOwnProperty('name') || scope.model.hasOwnProperty('value') || scope.model.hasOwnProperty('id')) {\r\n                            scope.selectdCount = 1;\r\n                        }\r\n                    } else {\r\n                        scope.selectdCount = 0;\r\n                    }\r\n                    scope.options = scope.config.options;\r\n                    scope.limitToCount = scope.isLazyLoadingEnabled ? 35 : scope.options.length;\r\n                    scope.displayProperties = scope.config.displayProperties.length > 0 ? scope.config.displayProperties : scope.displayProperties;\r\n                    scope.descriptionKey = scope.config.descriptionKey;\r\n                    scope.propSeparation = scope.config.propSeparation;\r\n                    scope.scrollAlwaysTopOnload = (scope.config.scrollAlwaysTopOnload === undefined) ? false : scope.config.scrollAlwaysTopOnload;\r\n                    scope.scrollReload = scope.scrollAlwaysTopOnload ? false : true;\r\n                    scope.selectTypeOptionWith = scope.config.selectTypeOptionWith ? scope.config.selectTypeOptionWith : scope.selectTypeOptionWith;\r\n                    scope.searchFilterKey = scope.config.searchFilterKey; // added for filter on key basis\r\n                    scope.stopFilterOnKey = scope.config.stopFilterOnKey; // added for stop filtering on keydown\r\n                    scope.hideSelectedCount = scope.config.hideSelectedCount;\r\n                    scope.isObjectCompareCatalog = scope.config.isObjectCompareCatalog;\r\n                    scope.clearModelOnEnter = scope.config.clearModelOnEnter;\r\n                    initialize();\r\n                    scope.triggerFlag = true;\r\n                    scrollbarReload();\r\n                    $timeout(function () {\r\n                    element.find('.lookupPopupContent input[checked=\"checked\"]').prop('checked', true);            \r\n                });\r\n                    scope.$watch(function () {\r\n                        return lookup.config.config.options;\r\n                    },\r\n                    function (newVal, oldVal) {\r\n                        initialize();\r\n                    }, true);\r\n                    returnObj.addnew = false;\r\n                    returnObj.result = scope.model;\r\n                    returnObj.btnType = '';\r\n                    returnObj.defaultSelectionText = scope.config.defaultSelectionText.trim(),\r\n                    returnObj.selectTypeOption = scope.config.selectTypeOption;\r\n                    returnObj.errorModel = scope.config.errorModel;\r\n                    scope.defaultError = false;\r\n\r\n                    if (scope.selectdCount == 0 && scope.$eval(scope.config.isMandatory))\r\n                    \tscope.itemSelected = false;\r\n                    else\r\n                        scope.itemSelected = true;\r\n\r\n                    scope.isLimitmultiselect = scope.minMultiselect ? scope.minMultiselect.event : false; scope.minMultiselect\r\n\r\n                });\r\n\r\n                scope.searchToggle = function () {\r\n                    if (scope.isSearchOpen == false) {\r\n                        scope.isSearchOpen = true;\r\n                        $timeout(function () {\r\n                            if ($(\"#searchTextbox\").find(\"input\").length) {\r\n                                $(\"#searchTextbox\").find(\"input\").focus();\r\n                            } else {\r\n                                $(\"#searchTextbox\").focus();\r\n                            }\r\n                        });\r\n                    }\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: { text: scope.searchText.title, type: \"search\" } });\r\n                    }\r\n                    scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                };\r\n                scope.closeSearch = function () {\r\n                    if (scope.searchText.title != \"\") {\r\n                        scope.searchText.title = \"\";\r\n                    } else {\r\n                        scope.isSearchOpen = false;\r\n                        $(\"#btnShowSearch\").focus();\r\n                    }\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: {text: scope.searchText.title, type : \"close\" } });\r\n                    }\r\n                    scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                };\r\n\r\n            \t/*  triggers which default radio btn click */\r\n                scope.ondefaultSelectItem = function (obj) {\r\n                \tobj.ischecked = true;\r\n                \tscope.onChangeItem(obj);\r\n                \tscope.defaultError = false;\r\n                \tscope.config.errorModel = '';\r\n                };\r\n                var checkSelectedItems = function () {\r\n                    if (scope.selectdCount >= parseInt(scope.minMultiselect.value)) {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!scope.options[i].ischecked) {\r\n                                scope.options[i].isdisable = true;\r\n                            } else {\r\n                                scope.options[i].isdisable = false;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            scope.options[i].isdisable = false;\r\n                        }\r\n                    }\r\n                }\r\n                scope.optionUnSelected = [];\r\n                scope.onChangeItem = function (obj) {\r\n                    if (scope.multiple) {\r\n                \t\tif (obj.ischecked) {\r\n                \t\t\tscope.selectdCount++;\r\n                \t\t} else {\r\n                \t\t    scope.selectdCount--;\r\n                \t\t    scope.optionUnSelected.push(obj);\r\n\r\n                \t\t    if (scope.$eval(scope.config.isDefaultMandatory) && obj[scope.propKey] === scope.config.defaultSelectionText) {\r\n                \t\t        scope.config.defaultSelectionText = ''\r\n                \t\t    }\r\n                \t\t}\r\n                \t\tif (scope.selectdCount == 0 && scope.$eval(scope.config.isMandatory)) {\r\n                \t\t\tscope.itemSelected = false;\r\n                \t\t\tscope.config.errorModel = $translate.instant(\"selectValueErrMsg\");\r\n                \t\t}\r\n                \t\telse {\r\n                \t\t\tscope.itemSelected = true;\r\n                \t\t\tscope.config.errorModel = '';\r\n                \t\t}\r\n                \t\tif (scope.minMultiselect && scope.minMultiselect.event) {\r\n                \t\t    checkSelectedItems();\r\n                \t\t}\r\n                \t} else {\r\n                \t\tscope.model = obj;\r\n                \t\tscope.itemSelected = true;\r\n                \t\tscope.config.errorModel = '';\r\n                \t\tinitialize();\r\n                \t}\r\n                };\r\n                \r\n                function cleanData() {\r\n                \tstopInit = true;\r\n                \tfor (var i = 0; i < scope.options.length; i++) {\r\n                \t\tdelete scope.options[i].ischecked;\r\n                \t\tdelete scope.options[i][scope.propKey];\r\n                \t}\r\n                \t$timeout(function () {\r\n                \t\tstopInit = false;\r\n                \t}, 500);\r\n                };\r\n                scope.defaultError = false;\r\n\r\n                scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n\r\n                scope.selectionCancel = function () {\r\n                    returnObj.btnType = 'cancel';\r\n                }\r\n                scope.selectionDone = function () {\r\n                    returnObj.UnSelectedResult = [];\r\n                \tif (!scope.itemSelected && scope.$eval(scope.config.isMandatory)) {\r\n                \t\treturn;\r\n                \t}\r\n                \tif (scope.$eval(scope.config.isDefaultMandatory) && scope.config.defaultSelectionText == '') {\r\n                \t\tscope.defaultError = true;\r\n                \t\tscope.config.errorModel = $translate.instant(\"markPaymentErrMsg\");\r\n                \t\treturn;\r\n                \t}\r\n                    if (scope.multiple) {\r\n                        var result = [];\r\n                        stopInit = true;\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            delete scope.options[i][scope.propKey];\r\n                            if (scope.options[i].ischecked) {\r\n                            \tdelete scope.options[i].ischecked;\r\n\r\n                            \t/*  Default Selection check point */\r\n                                if (scope.config.defaultSelectionText.trim() === scope.options[i].name) {\r\n                                \tresult.unshift(scope.options[i]);\r\n                                } else {\r\n                                \tresult.push(scope.options[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                        cleanData();\r\n                        $timeout(function () {\r\n                            stopInit = false;\r\n                        }, 500);\r\n                    }\r\n                    else {\r\n                        stopInit = true;\r\n                        delete scope.model.ischecked;\r\n                        delete scope.model[scope.propKey];\r\n                        result = scope.model;\r\n                        if (scope.config.selectTypeOption != null) {\r\n                            scope.config.selectTypeOption.selectiontext = scope.selectiontext.selectiontext;\r\n                        }\r\n                        cleanData();\r\n                        $timeout(function () {\r\n                            stopInit = false;\r\n                        }, 500)\r\n                    }\r\n\r\n                    returnObj.result = result;\r\n                    returnObj.UnSelectedResult = scope.optionUnSelected;\r\n                    scope.optionUnSelected = [];\r\n\r\n                    returnObj.btnType = 'save';\r\n                    returnObj.defaultSelectionText = scope.config.defaultSelectionText.trim();\r\n                    returnObj.selectTypeOption = scope.config.selectTypeOption;\r\n                    returnObj.errorModel = scope.config.errorModel;\r\n                    scope.callbackOnHide();\r\n                }\r\n                scope.addNew = function () {\r\n                    cleanData();\r\n                    returnObj.addnew = true;\r\n                    scope.triggerFlag = false;\r\n                    scrollbarReload();\r\n                }\r\n\r\n                //Popup hide/show flag\r\n                scope.callbackOnHide = function (e) {\r\n                    scope.triggerFlag = false;\r\n                    scrollbarReload();\r\n                    scope.searchText.title = \"\";\r\n                    if (scope.isLazyLoadingEnabled)\r\n                    scope.limitToCount = 35;\r\n                    scope.isSearchOpen = false;\r\n                    //cleanData() comment this and add in manually due to avoid timeout checkbox issue;\r\n                    stopInit = true;\r\n                    for (var i = 0; i < scope.options.length; i++) {\r\n                        delete scope.options[i].ischecked;\r\n                        delete scope.options[i][scope.propKey];\r\n                    }\r\n                    $timeout(function () {\r\n                        stopInit = false;\r\n                    });\r\n\r\n                    /*  Return Default Selection Object */\r\n                    lookup.resultCallBack(returnObj);\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartLookup/smartLookupTemplate.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    var multiSelectId = 0;\r\n    angular.module('SMART2').directive('smartMultiselect', ['$timeout', '$translate', 'RuleEngine', function ($timeout, $translate, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModel: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                onChange: '&',\r\n                onSelect: '&',\r\n                onBlur: '&',\r\n                disable: '@',\r\n                readonly: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                removable: '@',\r\n                autocomplete: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var options, filterKeys;\r\n                scope.defaultText = \"\";\r\n                var disableBlurEvent = true;\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.multiSelectId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    multiSelectId += multiSelectId;\r\n                    scope.multiSelectId = 'multiselect-' + multiSelectId;\r\n                }\r\n                scope.labelForMultiSelectId = 'label-for-' + scope.multiSelectId;\r\n                scope.displayformat = scope.displayformat ? scope.displayformat : '{title}';\r\n                var modelConfig = scope.$watch('ngModel', function (newValue) {\r\n                    if (newValue) {\r\n                         scope.selectedOptions = newValue;\r\n                    }\r\n                   \r\n                });\r\n\r\n                scope.multiSelectFocus = function () {\r\n                    if (!scope.$eval(scope.disable) && !scope.$eval(scope.readonly))\r\n                        $(\"#\" + scope.multiSelectId).focus();\r\n                };\r\n\r\n                scope.setDisplayFormat = function (item) {\r\n                    var displayArray = scope.displayformat.substring(1, scope.displayformat.length - 1);\r\n                    displayArray = displayArray.replace(/  +/g, ' ');\r\n                    var valu = \"\";\r\n                    var arrayD = displayArray.split('} {'), arrDLen = arrayD.length;\r\n                    for (var i = 0; i < arrDLen; i++) {\r\n                        valu += item[arrayD[i]] + \" \";\r\n                    }\r\n                    return valu;\r\n                }\r\n                var currentSelectForDelete = scope.ngModel.length;\r\n\r\n             \r\n                scope.ngKeyDown = function (event) {\r\n\r\n                    var evntKeyCode = event.keyCode;\r\n                    if (evntKeyCode === 40 && event.target.value == '') {\r\n                        event.stopImmediatePropagation();\r\n                    }\r\n                    if (scope.ngModel.length > 0) {\r\n                        if ((evntKeyCode === 8 || evntKeyCode === 46) && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete >= scope.ngModel.length) {\r\n                                currentSelectForDelete = scope.ngModel.length - 1;\r\n                                if ((scope.ngModel[currentSelectForDelete].selectForDelete) === false) {\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = true;\r\n                                    currentSelectForDelete = scope.ngModel.length - 1;\r\n                                }\r\n                                else {\r\n                                    scope.ngModel.splice(currentSelectForDelete, 1);\r\n                                     currentSelectForDelete = scope.ngModel.length;\r\n\r\n                                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                                    if (!isInvalidId) {\r\n                                        scope.invalidEmailId = false;\r\n                                        scope.validate = false;\r\n                                        scope.errorMessage = null;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if ((scope.ngModel[currentSelectForDelete].selectForDelete) === true) {\r\n                                scope.ngModel.splice(currentSelectForDelete, 1);\r\n                               \r\n                                currentSelectForDelete = scope.ngModel.length;\r\n                            }\r\n                        }\r\n                        else if (evntKeyCode === 37 && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete > 0) {\r\n                                scope.ngModel[currentSelectForDelete - 1].selectForDelete = true;\r\n\r\n                                if (currentSelectForDelete < scope.ngModel.length)\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n\r\n                                currentSelectForDelete--;\r\n                            }\r\n                        }\r\n                        else if (evntKeyCode === 39 && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete < scope.ngModel.length -1) {\r\n                                scope.ngModel[currentSelectForDelete + 1].selectForDelete = true;\r\n\r\n                                if (currentSelectForDelete >= 0)\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n\r\n                                currentSelectForDelete++;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (currentSelectForDelete < scope.ngModel.length) {\r\n                                scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n                            } else {\r\n                                var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                                if (isInvalidId) {\r\n                                    scope.invalidEmailId = true;\r\n                                } else {\r\n                                    scope.invalidEmailId = false;\r\n                                    scope.validate = false;\r\n                                    scope.errorMessage = null;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        scope.invalidEmailId = false;\r\n                        scope.validate = false;\r\n                        scope.errorMessage = null;\r\n                    }\r\n                };\r\n\r\n                var checkEmailValidation = function (event, onBlur) {\r\n                    if (event.keyCode == 13 || event.keyCode == 9 || onBlur) {\r\n\r\n                        var currentTextValue = element.find('.multiselect-input').val().split(';'),\r\n                            pattern = /^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i;\r\n\r\n                        var filteredArray = [],\r\n                            invalidEmailArray = []; \r\n                        angular.forEach(currentTextValue, function (item) {\r\n                            if (item) filteredArray.push(item.trim());\r\n                        });\r\n                        var filteredLen = filteredArray.length;\r\n\r\n                        for (var i = 0; i < filteredLen; i++) {\r\n                            var filterdItem = filteredArray[i];\r\n                            if (filterdItem != '') {\r\n                                var currentItem = { UserName: filterdItem, value: filterdItem };\r\n                                if (!pattern.test(filterdItem)) {\r\n                                    currentItem.isInvalid = true;\r\n                                    scope.invalidEmailId = true;\r\n                                    invalidEmailArray.push(currentItem);\r\n                                } else {\r\n                                    currentItem.isInvalid = false;\r\n                                    scope.invalidEmailId = false;\r\n                                }\r\n\r\n                                if (!currentItem.isInvalid) {\r\n                                    scope.ngModel.push(currentItem);\r\n                                    scope.setDisplayFormat(currentItem);\r\n                                    scope.defaultText = \"\";\r\n                                  var timeout = $timeout(function () {\r\n                                        scope.onSelect({\r\n                                            $event: {\r\n                                                data: currentItem\r\n                                            }\r\n                                           \r\n                                        });\r\n                                        currentSelectForDelete = scope.ngModel.length;\r\n                                        scope.validateRules();\r\n                                        disableBlurEvent = true;\r\n                                        $timeout.cancel(timeout);\r\n                                        timeout = null;\r\n                                  });\r\n\r\n                                }\r\n                                else {\r\n                                    scope.validateRules();\r\n                                }\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        var result = invalidEmailArray.map(function (item) { return item.UserName; });\r\n                        scope.defaultText = result.join(';');\r\n                        if (result.length > 0)\r\n                            scope.invalidEmailId = true;\r\n                        scope.validateRules();\r\n                    }\r\n                };\r\n\r\n              \r\n                scope.ngKeyUp = function (event, onBlur) {\r\n                    checkEmailValidation(event, onBlur);\r\n                    var evtTrgt = $(event.target), defaultWidth = 250;\r\n                    var timeIntClear =$timeout(function () {\r\n                        if (event.keyCode == 13 && evtTrgt.parent('.multiselect-chip-wrap').find('.multiselect-input').val().length == 0) {\r\n                             evtTrgt.width(defaultWidth);\r\n                        } else {\r\n                            var ele = evtTrgt.parent('.multiselect-chip-wrap').find('.multiselect-input');\r\n                            if (ele.val().length >= 32) {\r\n                                defaultWidth = ele.val().length;\r\n                                evtTrgt.width(defaultWidth * 10);\r\n                            } else {\r\n                                \r\n                                evtTrgt.width(defaultWidth);\r\n                            }\r\n                        }\r\n\r\n                        $timeout.cancel(timeIntClear);\r\n                        timeIntClear = null;\r\n                    });\r\n                };\r\n\r\n\r\n                scope.deleteSelected = function (elementIndex) {\r\n                    disableBlurEvent = false;\r\n                    scope.ngModel.splice(elementIndex, 1);                   \r\n                    $(\"#\" + scope.multiSelectId).focus();\r\n                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                    if (scope.ngModel.length === 0 || !isInvalidId) {\r\n                        scope.invalidEmailId = false;\r\n                        scope.validate = false;\r\n                        scope.errorMessage = null;\r\n                        return;\r\n                    }\r\n                };\r\n\r\n                var onvalidateConfig = scope.$watch('validate', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                scope.ngChange = function (e) {\r\n                    scope.onChange({\r\n                        $event: {\r\n                            data: angular.element('#' + scope.multiSelectId)\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scope.ngBlur = function (e) {\r\n                    function checkChipIsDeleted() {\r\n                        if (disableBlurEvent) {\r\n                            scope.ngKeyUp(e, true);\r\n                        }\r\n                        disableBlurEvent = true;\r\n                        $timeout.cancel(toutPromise);\r\n                        toutPromise = null;\r\n                    }\r\n                    //Timeout is being added to differentiate between blur and delete chip click event.  \r\n                    var toutPromise = $timeout(checkChipIsDeleted, 200);\r\n                    scope.onBlur({ $event: e });\r\n                };\r\n\r\n                scope.validateRules = function () {\r\n                    if (scope.readonly == 'true') {\r\n                        return;\r\n                    }\r\n\r\n                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                    if (scope.invalidEmailId || isInvalidId) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"invalidEmailErrMsg\");\r\n                        return;\r\n                    }\r\n\r\n                    if (scope.$eval(scope.isMandatory) && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined)) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                        return;\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false, rulesLen = rules.length;\r\n\r\n                        for (var i = 0; i < rulesLen; i++) {\r\n                            var rulesItem = rules[i];\r\n                            if (typeof rulesItem == 'object') {\r\n                                if (eval((rulesItem.rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rulesItem.error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    if (typeof scope.ngModel != 'object')\r\n                                        var data = scope.ngModel;\r\n                                    else\r\n                                        var data = scope.displayModel;\r\n\r\n                                    RuleEngine.isValid(rulesItem, function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    }, data);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                    filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                }\r\n                else {\r\n                    filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                }\r\n                var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n                var displayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n                function getFormattedData(data) {\r\n                    var dataLen = data.length;\r\n                    if (!data || dataLen == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < dataLen; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{'), parentSplitLen = parentSplit.length;\r\n                            for (var j = 0; j < parentSplitLen; j++) {\r\n                                var childSplit = parentSplit[j].split('}'), childSplitLen = childSplit.length;\r\n                                for (var k = 0; k < childSplitLen; k++) {\r\n                                    var childItem = childSplit[k];\r\n                                    if (childItem.indexOf('.') > 0 || data[i].hasOwnProperty(childItem)) {\r\n                                        str = str.replace(new RegExp(\"{\" + childItem + \"}\", \"ig\"), eval('data[i].' + childItem));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n           var optionsConfig =  scope.$watch('options', function (newOptions) {\r\n                    var selector = $('#' + scope.multiSelectId);\r\n                    try {\r\n                        if (!selector.devbridgeAutocomplete()) {\r\n                            selector.devbridgeAutocomplete({\r\n                                filterKeys: filterKeys,\r\n                                optionFormat: optionFormat,\r\n                                displayFormat: displayFormat,\r\n                                lookup: getFormattedData(newOptions),\r\n                                width: scope.width,\r\n                                onSelect: function (suggestion) {\r\n\r\n                                    scope.$evalAsync(function () {\r\n                                        scope.ngModel.push(suggestion);\r\n                                    });\r\n                                    $(this).focus();\r\n                                    scope.defaultText = \"\";\r\n                                    var interval = $timeout(function () {\r\n                                        scope.defaultText = \"\";\r\n                                        scope.onSelect({\r\n                                            $event: {\r\n                                                data: suggestion\r\n                                            }\r\n                                        });\r\n                                        currentSelectForDelete = scope.ngModel.length;\r\n                                        scope.validateRules();\r\n                                        $timeout.cancel(interval);\r\n                                        interval = null;\r\n                                    });\r\n                                    angular.element('.autocomplete-suggestions').hide();\r\n\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            selector.devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                });\r\n\r\n                /*\r\n\t\t\t\t * Destroy autocomplete on scope destroy\r\n\t\t\t\t */\r\n                scope.$on('$destroy', function () {\r\n                    if ($('#' + scope.multiSelectId).devbridgeAutocomplete()) {\r\n                        $('#' + scope.multiSelectId).devbridgeAutocomplete().dispose();\r\n                    }\r\n                    modelConfig();\r\n                    onvalidateConfig();\r\n                    optionsConfig();\r\n                });\r\n\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartMultiselect/smartMultiselectTemplate.html'\r\n        }\r\n    }]\r\n\t)\r\n})();\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Popup\r\n * @description This directive is useful for creating a popup.\r\n * \r\n * @attr {String} template-url\r\n *    Template url that is expected to appear as popup contents\r\n * @attr {Boolean} show\r\n *    Popup will toggle as soon as value of this attribute changes\r\n * @attr {String} modal-type\r\n *    Modal type. Possible values are 'large' or 'small'.\r\n * @attr {Boolean} dismissible\r\n *   If set to true, popup will not hide when clicked outside. Default value is true.\r\n * @attr {Function} on-hide\r\n *    Callback function when popup hides\r\n * \r\n * @example\r\n Controller:\r\n $scope.showPopup = false;\r\n $scope.onPopupHide = function() {\r\n      $scope.showPopup = false;\r\n };\r\nUsage:\r\n <smart-popup template-url=\"abc.html\" show=\"{{showPopup}}\" on-hide=\"onPopupHide()\"></smart-popup>\r\n <button ng-click=\"showPopup=true\">Click here</button>\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartPopup', ['$rootScope', '$parse', '$timeout', '$smartModal', '$focusOnField', function ($rootScope, $parse, $timeout, $smartModal, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: true,\r\n            controller: [\"$controller\", \"$scope\", \"$attrs\", \"$scoper\", function ($controller, $scope, $attrs, $scoper) {\r\n                var _scope = $scope,\r\n                    ctrl,\r\n                popupConfig = $scoper.getScope(_scope, $attrs.popupConfig);\r\n\r\n                if (popupConfig) {\r\n                    if (popupConfig.controller) {\r\n                        var launchObj = {\r\n                            $scope: _scope\r\n                        };\r\n                        if (popupConfig.resolve) {\r\n                            var val;\r\n                            angular.forEach(popupConfig.resolve, function (value, key) {\r\n                                if (typeof value == \"function\") {\r\n                                    val = value();\r\n                                } else {\r\n                                    val = value;\r\n                                }\r\n                                this[key] = val;\r\n                            }, launchObj);\r\n                        }\r\n                        ctrl = $controller(popupConfig.controller, launchObj);\r\n                        ctrl.$$smartModal = true;\r\n                    }\r\n                } else {\r\n                    ctrl = _scope;\r\n                };\r\n                return ctrl;\r\n            }],\r\n            link: function (scope, element, attrs, controller) {\r\n\r\n                var onHide = $parse(attrs.onHide),\r\n                    triggeredElement;\r\n                // Callback for complete popup close i.e this callback executes after popup animation over.\r\n                if (attrs.afterCompleteClosePopup) {\r\n                    var afterCompleteClosePopup = $parse(attrs.afterCompleteClosePopup);\r\n                }\r\n\r\n                var topPositionBeforeModalOpen = 0;\r\n\r\n                scope.isCancelButton = (attrs.cancelButton) ? scope.$eval(attrs.cancelButton) : false;\r\n\r\n                scope.headerUrl = attrs.headerUrl;\r\n                scope.contentUrl = attrs.contentUrl;\r\n                scope.footerUrl = attrs.footerUrl;\r\n                scope.templateUrl = attrs.templateUrl;\r\n                scope.modalType = attrs.type;\r\n                scope.isDraggable = attrs.isDraggable;\r\n\r\n                //Cleaning floating elements on drag\r\n                function cleanFloatingElements() {\r\n                    element.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                        var autoComplete = $(this).data().autocomplete;\r\n                        if (autoComplete && autoComplete.visible) {\r\n                            autoComplete.hide();\r\n                        }\r\n                    });\r\n                }\r\n                //End of cleaning floating elements on drag\r\n\r\n                if (scope.isDraggable) {\r\n                    angular.element(element).draggable({\r\n                        start: function () {\r\n                            cleanFloatingElements();\r\n                        },\r\n                        containment: \".is-popup-Draggable\"\r\n                    });\r\n                };\r\n\r\n                var tOut;\r\n                attrs.$observe('expandCollapse', function (value) {\r\n                    scope.expandCollapse = value;\r\n                    tOut = setTimeout(function () {\r\n\r\n                        angular.element(scope.expandCollapse).click(function () {\r\n                            var expandCollapse = angular.element(scope.expandCollapse),\r\n                                $modal = expandCollapse.closest('.modal'),\r\n                                $modalHeader = expandCollapse.closest('.modal .modal-header'),\r\n                                $leanOverlay = expandCollapse.parents('body').find('.lean-overlay');\r\n                            $modal.addClass('expand-css-trans');\r\n                            var innerTout1 = setTimeout(function () {\r\n                                $modalHeader.toggleClass('extra-nav-wrap expand-header expand-css-trans');\r\n                                clearTimeout(innerTout1);\r\n                                innerTout1 = null;\r\n                            }, 500);\r\n\r\n                            var innerTout2 = setTimeout(function () {\r\n                                $modal.removeClass('expand-css-trans');\r\n                                clearTimeout(innerTout2);\r\n                                innerTout2 = null;\r\n                            }, 200);\r\n\r\n                            $modal.toggleClass('expand-css');\r\n                            expandCollapse.parent('.modal-header').next().next('.modal-footer_new').find('.modal-close').click(function () {\r\n                                $modal.removeClass('expand-css');\r\n                                $modalHeader.removeClass('extra-nav-wrap expand-header expand-css-trans');\r\n                                $leanOverlay.css('display', 'block');\r\n                            });\r\n                            if ($modal.hasClass('expand-css')) {\r\n                                $leanOverlay.css('display', 'none');\r\n                                $modal.css('border-radius', '0');\r\n                            }\r\n                            else {\r\n                                $leanOverlay.css('display', 'block');\r\n                            }\r\n                        });\r\n                    }, 1000);\r\n                });\r\n\r\n\r\n                /*\r\n                 *  Unbind window keyup listener and assign tabindex back to .picker elements\r\n                 */\r\n                var reset = function () {\r\n                  //  $(window).off('keyup', onWindowKeyUp);\r\n                    angular.element('.picker').attr(\"tabindex\", 0);\r\n                    //COMMENTED: TWO-5672 impact   angular.element(document).scrollTop(topPositionBeforeModalOpen);\r\n                };\r\n\r\n\r\n                /*\r\n                 *  window on key up event listener\r\n                 */\r\n                //var onWindowKeyUp = function (e) {\r\n                //    if (angular.element(e.target).closest('.modal').length == 0 && e.keyCode == 9) {\r\n                //        angular.element(element.find(':focusable')[0]).focus();\r\n                //    }\r\n                //};\r\n\r\n\r\n                /*\r\n                 * Show pop up\r\n                 */\r\n                var $popup, onShow = attrs.$observe('show', function (value) {\r\n                    if (angular.isDefined(value)) {\r\n                        if (scope.$eval(value)) {\r\n                            triggeredElement = document.activeElement;\r\n                            angular.element(triggeredElement).addClass('currentPopupTriggerer');\r\n                            topPositionBeforeModalOpen = angular.element(document).scrollTop();\r\n                            angular.element(element).openModal({\r\n                                dismissible: scope.$eval(attrs.dismissible),\r\n                                beforeOpen: function () {\r\n                                    $popup = angular.element(element).data();\r\n                                    if (scope.isDraggable) {\r\n                                        angular.element('body').addClass('is-popup-Draggable');\r\n                                    }\r\n                                },\r\n                                complete: function () {\r\n                                    if (angular.isFunction(onHide)) {\r\n                                        scope.$apply(function () {\r\n                                            onHide(scope, { e: \"\" });\r\n                                        });\r\n                                    }\r\n                                    reset();\r\n\r\n                                    //  Check if popup is opened by uigrid-compatible element\r\n                                    if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                        //  Following event is listened inside uigrid-compatible dir\r\n                                        $rootScope.$emit(\"popupClosed\");\r\n                                        window.isPopupOpenedByUIGridCompatibleElement = undefined;\r\n                                    }\r\n\r\n                                    if (element.hasClass(\"noTransform\")) {\r\n                                        var toutpromise = setTimeout(function () {\r\n                                            element.css('top', 0).removeClass('noTransform');\r\n                                            clearTimeout(toutpromise);\r\n                                            toutpromise = null;\r\n                                        }, 100);\r\n                                    }\r\n                                },\r\n                                ready: function () {\r\n                                    //  Check if popup is opened by uigrid-compatible element\r\n                                    if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                        $rootScope.$emit(\"popupOpened\");\r\n                                    }\r\n                                    var cancelTOut = $timeout(function () {\r\n                                        if (scope.isDraggable) {\r\n                                            var $body = angular.element('body'),\r\n                                                $modalUiDragable = angular.element('.modal.ui-draggable');\r\n                                            var bodyHeight = $body.height() / 2,\r\n                                             modalHeight = $modalUiDragable.height() / 2,\r\n                                            bodyWidth = $body.width() / 2,\r\n                                            modalWidth = $modalUiDragable.width() / 2;\r\n\r\n                                            $(element).css({ 'position': \"absolute\", 'top': (bodyHeight - modalHeight) / 2, 'margin': 0, 'left': (bodyWidth - modalWidth) });\r\n                                        }\r\n                                        else {\r\n                                            var t = window.innerHeight / 2 - element.outerHeight() / 2;\r\n                                            element.css('top', t);\r\n                                        };\r\n                                        $(element).addClass('noTransform');\r\n\r\n                                        //Auto focus first feild / manage tab index\r\n\r\n                                      //  $(window).on('keyup', onWindowKeyUp);\r\n\r\n                                        //Remove picker tabindex when popup to avoid focus on picker element\r\n                                        angular.element('.picker').removeAttr(\"tabindex\");\r\n                                        $timeout.cancel(cancelTOut);\r\n                                        cancelTOut = null;\r\n                                    });\r\n                                    $timeout(function () {\r\n                                        var $firstField = element.find(\"a, input[type=text],input[type=radio]:checked,input[type=checkbox], button, textarea, [tabindex='0']\").not(\":disabled, :hidden, [tabindex = -1]\").first();\r\n                                        $focusOnField($firstField);\r\n                                    }, 600);\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            var el = angular.element(element),\r\n                                isPopupInit = el.data(\"overlay-id\") === undefined ? false : true;\r\n\r\n                            // isPopupInit variable is used  to check whether popup is initiated or not.\r\n                            if (isPopupInit) {\r\n                                el.closeModal({\r\n                                    complete: function () {\r\n                                        if (attrs.afterCompleteClosePopup)\r\n                                            afterCompleteClosePopup(scope, {});\r\n\r\n                                        if (scope.isDraggable) {\r\n                                            angular.element('body').removeClass('is-popup-Draggable');\r\n                                        }\r\n                                        if (controller.$$smartModal === true) {\r\n                                            $smartModal.destroyModal({ $view: el, $scope: scope });\r\n                                        }\r\n                                        angular.element(\".currentPopupTriggerer\").focus().removeClass('currentPopupTriggerer');\r\n                                        triggeredElement = null;\r\n                                    }\r\n                                });\r\n\r\n                                if (element.hasClass(\"noTransform\")) {\r\n                                    var tOutTemp = setTimeout(function () {\r\n                                        element.css('top', 0).removeClass('noTransform');\r\n                                        clearTimeout(tOutTemp);\r\n                                        tOutTemp = null;\r\n                                    }, 100);\r\n                                }\r\n                            }\r\n                            //  remove the listener and add tabindex back on picker\r\n                            reset();\r\n\r\n                            //  Check if popup is opened by uigrid-compatible element\r\n                            if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                //  Following event is listened inside uigrid-compatible dir\r\n                                $rootScope.$emit(\"popupClosed\");\r\n                                window.isPopupOpenedByUIGridCompatibleElement = undefined;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onShow();\r\n                    reset();\r\n                    if ($popup) {\r\n                        $($popup.associatedOverlay).remove();\r\n                        $smartModal.destroyModal({ $view: element });\r\n                    }\r\n                    clearTimeout(tOut);\r\n                    tOut = null;\r\n                    angular.element(scope.expandCollapse).off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartPopUp/smartPopUpTemplate.html'\r\n        };\r\n    }])\r\n    .factory(\"$scoper\", function () {\r\n        return {\r\n            getScope: function (scope, deep) {\r\n                if (deep) {\r\n                    var a, b = deep.split(\".\");\r\n                    var bLength = b.length;\r\n                    if (bLength > 1) {\r\n                        a = scope;\r\n                        for (var i = 0; i < bLength; i++) {\r\n                            var sortCn = b[i].match(/(\\[\\d+\\])+$/);\r\n                            if (sortCn && sortCn.length > 0) {\r\n                                var subScope = b[i].substr(0, b[i].indexOf('['));\r\n                                a = a[subScope];\r\n                                sortCn = sortCn[0].replace(/\\]\\[/g, ',').replace(/[\\[\\]]/g, '').split(\",\");\r\n                                for (var j = 0; j < sortCn.length; j++) {\r\n                                    a = a[sortCn[j]];\r\n                                }\r\n                            } else {\r\n                                a = a[b[i]];\r\n                            };\r\n                        }\r\n                    } else {\r\n                        a = scope[deep];\r\n                    }\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n    })\r\n    .service(\"$smartModal\", [\"$timeout\", \"$compile\", function ($timeout, $compile) {\r\n        var _this = this;\r\n\r\n        _this.open = function (config) {\r\n            _this.initModal(config);\r\n        }\r\n\r\n        _this.initModal = function (config) {\r\n            var attrs = [\r\n                \"show='{{\" + (config.show || \"\") + \"}}'\",\r\n                \"popup-config='\" + (config.$config || \"\") + \"'\",\r\n                \"on-hide='\" + (config.onHide || \"\") + \"'\",\r\n                \"after-complete-close-popup='{{\" + (config.afterCompleteClosePopup || \"\") + \"}}'\",\r\n                \"cancel-button='\" + (config.cancelButton || \"\") + \"'\",\r\n                \"template-url='\" + (config.templateUrl || \"\") + \"'\",\r\n                \"header-url='\" + (config.headerUrl || \"\") + \"'\",\r\n                \"content-url='\" + (config.contentUrl || \"\") + \"'\",\r\n                \"footer-url='\" + (config.footerUrl || \"\") + \"'\",\r\n                \"type='\" + (config.type || \"\") + \"'\",\r\n                \"is-draggable='\" + (config.isDraggable || \"\") + \"'\",\r\n                \"expand-collapse='\" + (config.expandCollapse || \"\") + \"'\",\r\n                \"dismissible='\" + (config.dismissible || \"\") + \"'\",\r\n                \"class='\" + (config.class || \"\") + \"'\"\r\n            ]\r\n                , smartpopDir = '<smart-popup ' + attrs.join(\" \") + '> </smart-popup>';\r\n\r\n            var popup = $compile(smartpopDir)(config.$scope);\r\n            popup.appendTo(\"body\");\r\n        }\r\n\r\n        _this.destroyModal = function (modal) { // this method invoke automatically once popup goes hide and also executed on scope $destroy.\r\n            modal.$view && modal.$view.remove();\r\n            modal.$scope && modal.$scope.$destroy();\r\n        }\r\n    }]);\r\n})();\n/**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Radio\n   * @description This directive is useful for creating a radio button or a group of radio buttons.\n   * \n   * @attr {String} label\n   *    Label to be displayed for identification of this ui element\n   * @attr {Array} options\n   *    Number of radio buttons to be created. Only one option can be selected at a time.\n   * @attr {Object} ng-model\n   *    Default selected option. This is expected to be one of the 'options'.\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\n   * @attr {String} datakey\n   *    A property of an option to be used to display the label for option. Default value is 'title'.\n   * @attr {String} layout\n   *    'vertical' or 'horizontal' layout\n   * @attr {Boolean} validate\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\n   * @attr {Array} rules \n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\n   * @attr {String} error-message \n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\n   * @attr {Boolean} is-mandatory \n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\n   * @attr {Boolean} is-visible \n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\n   * @attr {Number} colspan\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\n   *    Default value is 1.\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\n   * @attr {Function} on-change\n   *    Callback function when any of the buttons from radio group is selected\n   * @type cool\n   * \n   * @example\n   Dynamic:\n   Controller:\n       $scope.config = {\n            \"modelData\": {\n                \"currency\": { \"code\": \"€\", \"name\": \"EUR\" }\n            }, \n            \"formConfig\": {\n                \"sections\": [\n                    {\n                        \"isMandatory\": true,\n                        \"rows\": [\n                            {\n                                \"properties\": [\n                                    {\n                                        \"label\": \"Currency\",\n                                        \"type\": \"radio\",\n                                        \"isMandatory\": true,\n                                        \"data\": \"currency\",\n                                        \"colspan\": 1,\n                                        \"onChange\": \"onChange\",  //  controller function\n                                        \"attributes\": {\n                                            \"options\": [{\n                                                \"code\": \"$\",\n                                                \"name\": \"USD\"\n                                            }, {\n                                                \"code\": \"€\",\n                                                \"name\": \"EUR\"\n                                            }],\n                                            \"datakey\": \"name\"\n                                        },\n                                        \"rules\": [\n                                            { \n                                                \"rule\": \"this.title == \\\"Option 2\\\"\", \n                                                \"error\": \"Invalid selection\" \n                                            }\n                                        ]\n                                    }\n                                ]    \n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n    Usage:\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\n   \n   * @example\n   Static:\n   Controller:\n       $scope.currencyOptions = [{\n            \"code\": \"$\",\n            \"name\": \"USD\"\n       }, {\n           \"code\": \"€\",\n           \"name\": \"EUR\"\n       }];\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\n       $scope.onChange = function(selectedCurrency) {\n           console.log(selectedCurrency);\n       };\n   Usage:\n       <smart-radio label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-radio> \n\n   * @example\n   Radio with disabled option:\n   Controller:\n       $scope.currencyOptions = [{\n            \"code\": \"$\",\n            \"name\": \"USD\",\n            \"disable\": true\n       }, {\n           \"code\": \"€\",\n           \"name\": \"EUR\"\n       }];\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\n   Usage:\n       <smart-radio label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\"></smart-radio> \n   */\n\n(function () {\r\n    'use strict';\n    var radioGroupId = 0;\n\n    angular.module('SMART2').directive('smartRadio', ['$timeout', '$translate', 'ScrollTo', 'RuleEngine', function ($timeout, $translate, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            require: '?ngModel',\n            scope: {\r\n                label: '@',\n                options: '=?',\n                ngModelCopy: '=?ngModel',\n                isMandatory: '@',\n                isVisible: '=?',\n                layout: '@',\n                rules: '@',\n                validate: '=?',\n                focus: '=?',\n                parentElement: '@',\n                errorMessage: '@',\n                onChange: '&',\n                removable: '@',\n                datakey: '@',\n                optionId: '@',\n                groupId: '@'\r\n            },\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\n\n                var isNgModelFunction = typeof scope.ngModelCopy == 'function';\n\n                // key to be used to bind options\n                scope.dataKey = scope.datakey ? scope.datakey : 'title';\n\n                //uniqueID\n                radioGroupId = radioGroupId + 1;\n                scope.radioGrouptId = (attrs.groupId) ? attrs.groupId : \"radio-group-\" + radioGroupId;\n\n                if (typeof attrs.optionId != \"undefined\") {\r\n                    scope.optionId = attrs.optionId;\r\n                }\n\n                //check is gap\n                scope.isGap = (attrs.gap) ? scope.$eval(attrs.gap) : false;\n\n                scope.layout = scope.layout ? scope.layout : 'horizontal';\n\n\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                if (isNgModelFunction) {\r\n                    try {\r\n                        ngModelCtrl.$render = function () {\r\n                            scope.ngModel = ngModelCtrl.$modelValue;\r\n                            scope.selectedOption = scope.ngModel;\r\n                        };\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                var updateView = function () {\r\n                    if (isNgModelFunction) {\r\n                        try {\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\n\n\n                /*\n                 * Focus field when focus is set to true\n                 */\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\n                        scope.focus = false;\r\n                    }\r\n                });\n\n                /*\n                 * Validate field whene validate is set to true\n                 */\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\n\n                /*\n                 * Watch needs to be added on ngModel\n                 */\n                var onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                    scope.selectedOption = newVal;\r\n                }, true);\n\n                /*\n                 * Validate rules\n                 */\n                scope.validateRules = function () {\r\n                    if (scope.$eval(scope.isMandatory) && (isNgModelFunction && (scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) || (!isNgModelFunction && (scope.ngModelCopy === '' || scope.ngModelCopy === undefined || scope.ngModelCopy === null))) {\r\n                        scope.validate = true;\n                        scope.errorMessage = $translate.instant('selectOptionErrMsg');\n                        return;\r\n                    }\n\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\n\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\n                            ruleLen = rules.length;\n\n                        for (var i = 0; i < ruleLen; i++) {\r\n                            var ruleT = rules[i]; // temp hold\r\n                            if (typeof ruleT == 'object') {\r\n                                if (eval((ruleT.rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                    scope.validate = true;\n                                    scope.errorMessage = ruleT.error;\n                                    break;\r\n                                }\r\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(ruleT, function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\n\n                scope.ngChange = function (selectedOption) {\r\n                    // Commented below code for fixing TWO-2748\r\n                    //if (!scope.$eval(scope.isMandatory) && angular.isDefined(scope.selectedOption) && scope.selectedOption[scope.dataKey] == selectedOption[scope.dataKey]) {\r\n                    //    scope.selectedOption = '';\r\n                    //}\r\n                    //else {\r\n                    //    scope.selectedOption = selectedOption;\r\n                    //}\r\n\r\n                    // Added below code for fixing TWO-2748\r\n                    scope.selectedOption = selectedOption;\r\n\r\n                    if (!scope.groupId) {\r\n                        if (isNgModelFunction) {\r\n                            scope.ngModel = scope.selectedOption;\r\n                        }\r\n                        else {\r\n                            scope.ngModelCopy = scope.selectedOption;\r\n                        }\r\n                    }\n                    updateView();\n                    scope.validateRules();\n                    var toutPromise = $timeout(function () {\r\n                        scope.onChange();\r\n                        $timeout.cancel(toutPromise); // cancel the timeout promise to avoid any leakage.\r\n                    });\r\n                };\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                    onNgModel();\r\n                    element.remove();\r\n                    scope = null;\r\n                });\r\n            },\n            templateUrl: 'shared/directives/uiElements/smartRadio/smartRadioTemplate.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    /**\r\n     * @memberof SMART2\r\n     * @ngdoc directive\r\n     * @name Widget Error Field \r\n     * @description This directive is useful for displaying total error field in widget form\r\n     * \r\n     * @attr {Object} showerrorsPanel: scope variable, that need to be declared in the controller.\r\n     *    \r\n     * @attr {String} customfieldsSelector: customfields-selector=\".linkError, .red-text\"\r\n     *    class and id can be passed \r\n     *    \r\n     * @attr {String} frmWidgetId: frm-widget-id=\"formWidgetUniqueIdTest1\"\r\n     *    widget Id need to be specified here.\r\n     *\r\n     * @example\r\n     Dynamic:\r\n     Controller:\r\n         $scope.onErrorFound = {\r\n            \"error\": false, // change value for triggering the error count.\r\n            \"isWarningHeader\": false, // set true for displaying the error band.\r\n            \"noMoreErrors\": false // \r\n        };\r\n\r\n      Usage:\r\n         <smart-read-errors showerrors-panel=\"onErrorFound\" customfields-selector=\".linkError\" frm-widget-id=\"formWidgetUniqueIdTest1\" class=\"bandcontainer clearfix\"></smart-read-errors>\r\n     * \r\n     */\r\n\r\n    'use strict';\r\n    angular.module('SMART2')\r\n    .directive('smartReadErrors', function ($rootScope, $compile, $timeout) {\r\n        return {\r\n            restrict: 'EA',\r\n            templateUrl: 'shared/directives/uiElements/smartReadErrors/smartReadErrorsTemplate.html',\r\n            replace: true,\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n                scope.counter = 0;\r\n                scope.emptyText = \"\";\r\n                scope.leftLabelText = \"Show only error field\";\r\n                var invalids = [],\r\n                    count = 0,\r\n                    currentManualFocus = '',\r\n                    isManualFocus = true,\r\n                    topMinus = 300,\r\n                    timeoutPeriod = 300,\r\n                    fieldsSelector = \"input.invalid, .invalid input, textarea.invalid\";\r\n\r\n                fieldsSelector += attrs.customfieldsSelector ? \", \" + attrs.customfieldsSelector : \"\";\r\n                scope.onErrorFound = scope[attrs.showerrorsPanel];\r\n                scope.nextDisable = false;\r\n                scope.prevDisable = false;\r\n                var formWidgetId = attrs.frmWidgetId;\r\n                var onblurEvent = function () {\r\n                    $timeout(function () {\r\n                        invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                        var invLen = invalids.length - 1;\r\n                        if (scope.counter != invLen) {\r\n                            count--;\r\n\r\n                            if (count < 0) {\r\n                                count = (scope.counter - invLen) < 0 ? 0 : invLen;\r\n                            }\r\n                            scope.counter = invLen;\r\n                        }\r\n                        if (invLen === 0) {\r\n                            $timeout(function () {\r\n                                scope.onErrorFound.isWarningHeader = false; // close the yellow bar\r\n                            }, 3000);\r\n\r\n                        }\r\n                        isManualFocus = true;\r\n                        //scope.counter = invLen;\r\n                    }, timeoutPeriod);\r\n                };\r\n\r\n\r\n                // To set focus on \r\n                function focusElem(a_indx) {\r\n                    var top,\r\n                        timeoutPeriodTemp = 0,\r\n                        $invalidDom = invalids.eq(a_indx);\r\n\r\n                    if (!$invalidDom.closest('.collapsible-body').hasClass('displayBlock')) {\r\n                        $invalidDom.closest('.collapsible-container').find('.collapsible-header').trigger('click');\r\n                        timeoutPeriodTemp = 350;\r\n                    }\r\n\r\n                    $timeout(function () {\r\n                        top = $invalidDom.offset().top - $('#subheaderwrapper').height();\r\n                        //if (top > 300) {\r\n                        $(window).scrollTop(top - 40);\r\n                        //}\r\n                        if ($invalidDom.is(\"span\")) {\r\n                            $invalidDom.closest('div').find('button, [href], input, select, textarea')[0].focus();\r\n                        } else {\r\n                            if ($invalidDom.closest('span').length) {\r\n                                $invalidDom.closest('span').find('.dropdown-button').focus();\r\n                            } else {\r\n\r\n                                $invalidDom.focus();\r\n                            }\r\n                        }\r\n                        scope.nextDisable = false;\r\n                        scope.prevDisable = false;\r\n                    }, timeoutPeriodTemp + timeoutPeriod);\r\n\r\n                }\r\n                // On focus to maintain the counter\r\n                var onFocusEvent = function (e) {\r\n                    if (isManualFocus) {\r\n                        invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                        currentManualFocus = $(this);\r\n                        var currInd = invalids.index(currentManualFocus);\r\n                        count = currInd >= 0 ? currInd : count;\r\n                    }\r\n                }\r\n\r\n                // Needed for tabbing navigation using tab key\r\n\r\n                //var onKeyPressEvent = function (e) {\r\n                //    var char = e.which || e.keyCode;\r\n                //    if (scope.onErrorFound.isTabSwitch && char === 9) {\r\n\r\n                //        e.preventDefault();\r\n\r\n                //        if (e.shiftKey) {\r\n                //            scope.prev()\r\n                //        } else {\r\n                //            scope.next()\r\n                //        }\r\n                //    }\r\n                //};\r\n\r\n                //$(window).keydown(function (e) {\r\n\r\n                //    onKeyPressEvent(e);\r\n                //});\r\n\r\n                scope.closeErrorHeader = function () {\r\n                    scope.onErrorFound.isWarningHeader = !scope.onErrorFound.isWarningHeader;\r\n                }\r\n\r\n                var watchSaveClick = scope.$watch('onErrorFound.error', function (newValue, oldValue) {\r\n\r\n                    if (newValue !== oldValue) {\r\n                        $timeout(function () {\r\n                            invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                            if (invalids.length > 0) {\r\n                                scope.onErrorFound.noMoreErrors = false;\r\n                                scope.onErrorFound.isWarningHeader = true;\r\n                                invalids.blur(onblurEvent).focus(onFocusEvent)\r\n                                scope.counter = invalids.length - 1;\r\n                                focusElem(0);\r\n                                isManualFocus = false; // No user manual focus\r\n                            } else {\r\n                                scope.onErrorFound.noMoreErrors = true;\r\n                                //scope.onErrorFound.isWarningHeader = '';\r\n                                //scope.onErrorFound.isWarningHeader = false;\r\n                            }\r\n                        }, 1000);\r\n\r\n                    }\r\n\r\n                });\r\n                scope.next = function () {\r\n                    scope.nextDisable = true;\r\n                    scope.prevDisable = true;\r\n                    isManualFocus = true;\r\n                    invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                    var invLen = invalids.length - 1;\r\n\r\n                    if (count < invLen) {\r\n                        isManualFocus = false;\r\n                        focusElem(count + 1);\r\n                        if (scope.counter === invLen) {\r\n                            count++;\r\n                        }\r\n                    } else {\r\n                        isManualFocus = false;\r\n                        count = 0;\r\n                        focusElem(count);\r\n                    };\r\n                    //scope.counter = invLen;\r\n                };\r\n\r\n                scope.prev = function () {\r\n                    scope.nextDisable = true;\r\n                    scope.prevDisable = true;\r\n                    isManualFocus = true;\r\n                    invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                    var newLen = invalids.length - 1;\r\n                    if (count > 0) {\r\n                        isManualFocus = false;\r\n                        focusElem(count - 1);\r\n                        if (scope.counter === newLen) {\r\n                            count--;\r\n                        }\r\n                    } else {\r\n                        isManualFocus = false;\r\n                        focusElem(newLen);\r\n                        count = newLen;\r\n                    };\r\n                    //scope.counter = newLen;\r\n                };\r\n\r\n                // Destroy event\r\n                scope.$on('$destroy', function () {\r\n                    watchSaveClick(); // Deregister\r\n                    invalids.unbind(); // unbind all events\r\n                    invalids = [];\r\n                    scope = {}; // nullify the scope\r\n                });\r\n\r\n            }\r\n        }\r\n    })\r\n})(angular);\n//resizeable Sidebar\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('resizeableSidebar',[function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                disableResize: '=?',\r\n                collapseCallback : '&',\r\n                scrollCallback : '&',\r\n                leftPanelWidthCallback : '&'\r\n            },\r\n            link: function(scope, element, attrs) {\r\n              var elementWidth = element.innerWidth();\r\n              var collapseCallback = scope.$eval(scope.collapseCallback);\r\n              var scrollCallback = scope.$eval(scope.scrollCallback);\r\n              var leftPanelWidthCallback = scope.$eval(scope.leftPanelWidthCallback);\r\n              var leftPanel = element.find('.leftPanel');\r\n              var resizableDiv = document.createElement('div');\r\n              resizableDiv.id = 'panelexpandorreports';\r\n              resizableDiv.className = 'panelexpandorreports';\r\n              leftPanel.prepend(resizableDiv);\r\n              var getResizableDiv = element.find('.panelexpandorreports');\r\n              var clickableDiv = document.createElement('div');\r\n              clickableDiv.id = 'panelexpandorreportsdiv';\r\n              clickableDiv.className = 'panelexpandorreportsdiv';\r\n              getResizableDiv.prepend(clickableDiv);\r\n              scope.$watch('disableResize', function (disableResize) {\r\n                    if (disableResize) {\r\n                        $('#panelexpandorreports').addClass('disableCursorAction');\r\n                    } else {\r\n                        $('#panelexpandorreports').removeClass('disableCursorAction');\r\n                    }\r\n                });\r\n                var restrictWidth = 0,\r\n                minDraggableWidth = attrs.minWidth || 100,\r\n                lowDraggableWidth = attrs.lowWidth || 100,\r\n                midDraggableWidth = attrs.midWidth || 282;\r\n                var maxDraggableWidth = window.innerWidth / 2;//$(window).width() / 2;\r\n                var UiLeftPosition = 0;\r\n                var UiOriginalPosition = 0;\r\n                var windowWidthBeforeResize = window.innerWidth //$(window).width();\r\n                var leftPecent = midDraggableWidth / windowWidthBeforeResize * 100;\r\n                var currentwindowWidth = window.innerWidth //$(window).width();\r\n                // on window resize calculations\r\n                $(window).resize(function() {                \r\n                    //maxDraggableWidth  = $(window).width() / 2;\r\n                    //restrictWidth = maxDraggableWidth - minDraggableWidth;\r\n                    currentwindowWidth = window.innerWidth //$(window).width();\r\n                    maxDraggableWidth = currentwindowWidth / 2\r\n                    UiLeftPosition = currentwindowWidth * leftPecent / 100;\r\n                    UiLeftPosition = Math.max(midDraggableWidth, UiLeftPosition); \r\n                    windowWidthBeforeResize = currentwindowWidth;\r\n                    $(\".leftPanel\").animate({\r\n                        'margin-left': -UiLeftPosition,\r\n                        width: UiLeftPosition\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false,\r\n                    }).addClass('overflowVisible');\r\n                    $(\".wrapper--withSidebar\").animate({\r\n                        'margin-left': UiLeftPosition\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false\r\n                    }).addClass('overflowVisible');\r\n                    $(\".panelexpandorreports\").animate({\r\n                            left: UiLeftPosition,\r\n                            backgroundColor:'#ccc'\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false,\r\n                        complete: function(){\r\n                            $(\".panelexpandorreports\").removeClass('dragLine');                                            \r\n                        }\r\n                    }).addClass('dragLine');\r\n                    leftPanelWidthCallback(UiLeftPosition,elementWidth);\r\n                });\r\n                \r\n                //var maxDraggableWidth  = window.innerWidth / 2, //attrs.maxWidth ||\r\n                  element.on('click mouseover.leftPanel', '#leftPanel', function () {\r\n                        var $panelExp = $('#panelexpandorreports');\r\n                        if (!$panelExp.data('ui-draggable')) {\r\n                            $panelExp.draggable({\r\n                                axis: 'x',\r\n                                drag: function (e, ui) {\r\n                                    restrictWidth = maxDraggableWidth - minDraggableWidth;\r\n                                    $('.panelexpandorreports').addClass('panelexpandorreports-nohover');\r\n                                    //ui.position.left = Math.max(minDraggableWidth, ui.position.left);  \r\n                                    ui.position.left = Math.min(maxDraggableWidth, ui.position.left);\r\n                                    UiLeftPosition = ui.position.left;\r\n                                    UiOriginalPosition = ui.originalPosition.left; \r\n                                    leftPecent = UiLeftPosition / windowWidthBeforeResize * 100;   \r\n                                    leftPanelWidthCallback(ui.position.left,elementWidth);      \r\n                                },\r\n                                stop: function (e, ui) {                               \r\n                                    if(ui.position.left < lowDraggableWidth){                    \r\n                                       collapseCallback();\r\n                                       $('#panelexpandorreports').css('left', ui.originalPosition.left);\r\n                                    } else if ((ui.position.left >= lowDraggableWidth) && (ui.position.left <= midDraggableWidth)) {\r\n                                        element.removeClass('conditionalLftPanelTransition');\r\n                                        /*var marginLeftValue = parseInt($('.wrapper--withSidebar').css('margin-left')) - (ui.originalPosition.left - ui.position.left);\r\n                                        $(\".leftPanel\").animate({\r\n                                           'margin-left': -marginLeftValue,\r\n                                            width: ui.position.left\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false\r\n                                        });\r\n\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': marginLeftValue\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false\r\n                                        });\r\n                                        // $panelExp.css('left', 282);*/                                 \r\n                                       // setTimeout(function () {\r\n                                        $(\".leftPanel\").animate({\r\n                                            'margin-left': -midDraggableWidth,\r\n                                            width: midDraggableWidth                                           \r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                           // complete: function(){\r\n                                            //  $(\".leftPanel\").removeClass('overflowVisible');\r\n                                            //}\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': midDraggableWidth,\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                            //complete: function(){\r\n                                            //  $(\".leftPanel\").removeClass('overflowVisible');\r\n                                           // }\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".panelexpandorreports\").animate({\r\n                                               left: midDraggableWidth,\r\n                                               backgroundColor:'#ccc'\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                            complete: function(){\r\n                                              $(\".panelexpandorreports\").removeClass('dragLine');                                            \r\n                                            }\r\n                                        }).addClass('dragLine');\r\n                                       // }, 400);\r\n                                    } else {                                   \r\n                                        element.removeClass('conditionalLftPanelTransition');\r\n                                        var marginLeftValue = parseInt($('.wrapper--withSidebar').css('margin-left')) - (ui.originalPosition.left - ui.position.left);\r\n                                        $(\".leftPanel\").animate({\r\n                                           'margin-left': -marginLeftValue,\r\n                                            width: ui.position.left\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                           // complete: function(){\r\n                                          //    $(\".leftPanel\").removeClass('overflowVisible');\r\n                                          //  }\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': marginLeftValue\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                          //  complete: function(){\r\n                                          //    $(\".leftPanel\").removeClass('overflowVisible');\r\n                                           // }\r\n                                        }).addClass('overflowVisible'); \r\n                                    }\r\n                                    scrollCallback(); \r\n                                    $('.panelexpandorreports').removeClass('panelexpandorreports-nohover');\r\n                                }\r\n                            });\r\n                        } \r\n                });\r\n            },\r\n        }\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    var scrollCounter = 0;\r\n\r\n    angular.module('SMART2').directive('smartScroll', ['$parse', '$timeout', '$window', function ($parse, $timeout, $window) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: false,\r\n            transclude: true,\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n\t\t\t\t//Setting for fixed header on scroll\r\n                var isFixedHeader = attrs.isFixedHeader ? true : false,\r\n                    isScrollDate = attrs.hideDate == 'true' ? true : false,\r\n                    onBreakPoints = attrs.onBreakPoints ? $parse(attrs.onBreakPoints.replace(/\\(\\)/, '(e)')) : false,\r\n                    onScrollLockUnlock = attrs.onScrollLockUnlock ? $parse(attrs.onScrollLockUnlock.replace(/\\(\\)/, '(e)')) : false;\r\n\r\n                scope.fixedHeader = function (e) {\r\n                    var _this = $(e.target),\r\n            \t\ttableElem = _this.find(\">\").eq(0).find(\">\").eq(0), // this is depending on the smartScroll directive html structure!\r\n            \t\t elScrollTop = _this.scrollTop();\r\n\r\n                    if (elScrollTop > 0 && !_this.data('appended')) {\r\n                        // reset display styles so column widths are correct when measured below\r\n                        tableElem.find('thead, tbody, tfoot').css('display', '');\r\n\r\n                        // set widths of columns\r\n                        tableElem.find('tr:first-child th').each(function (i, thElem) {\r\n                            var tdElems = tableElem.find('tbody > tr:first-child > td').eq(i),\r\n            \t\t\t\tcolumnWidth = tdElems.length ? tdElems.get(0).offsetWidth : thElem.offsetWidth;\r\n\r\n                            if (tdElems.length) {\r\n                                tdElems.css('width', columnWidth + 'px');\r\n                            }\r\n                            if (thElem) {\r\n                                $(thElem).css('width', columnWidth + 'px');\r\n                            }\r\n                        });\r\n\r\n                        var tbl = $('<table>');\r\n                        var theader = tableElem.find('thead tr:first-child').clone();\r\n                        tableElem.find('thead tr:first-child').css('opacity', '0');\r\n                        tbl.append(theader);\r\n                        tbl.addClass(\"fixed-header-when-scrolled\");\r\n                        _this.before(tbl);\r\n                        _this.data('appended', true);\r\n                    }\r\n                    else if (elScrollTop == 0) {\r\n                        _this.parent().find(\".fixed-header-when-scrolled\").remove();\r\n                        tableElem.find('thead tr:first-child').css('opacity', '1');\r\n                        _this.data('appended', false);\r\n                    }\r\n                };\r\n\r\n                function scrollBreakPoints(scrollTop, direction) {\r\n                    if (attrs.scrollBreakPoints) {\r\n                        var breakPConfig = JSON.parse(attrs.scrollBreakPoints),\r\n                            BCkeys = Object.keys(breakPConfig),\r\n                            srElements = element.find(BCkeys.join(\",\"));\r\n\r\n                        for (var z = 0; z < BCkeys.length; z++) {\r\n                            element.find(BCkeys[z]).data(\"configSele\", BCkeys[z]);\r\n                        }\r\n\r\n                        if (srElements.length > 0) {\r\n                            srElements.each(function (i, e) {\r\n                                var el = $(e),\r\n                                    pos = el.position(),\r\n                                    bConfig = breakPConfig[el.data(\"configSele\")],\r\n                                    touchValue = function () {\r\n                                        var r;\r\n                                        if (typeof bConfig.top == \"number\") {\r\n                                            r = bConfig.top * parseInt(scope.scrollHeight);\r\n                                        } else {\r\n                                            r = parseInt(bConfig.top);\r\n                                        }\r\n\r\n                                        return r;\r\n                                    }();\r\n\r\n                                if (direction == \"upward\" && pos.top <= touchValue && !el.data(\"fired\")) {\r\n                                    el.data(\"fired\", true);\r\n                                    onBreakPoints(scope, {\r\n                                        e: {\r\n                                            index: i,\r\n                                            direction: \"upward\"\r\n                                        }\r\n                                    });\r\n                                    scope.$digest();\r\n                                } else if (direction == \"downward\" && ((bConfig.reverse === true ? pos.top + el.outerHeight() : pos.top) >= (touchValue)) && el.data(\"fired\")) {\r\n                                    el.data(\"fired\", false);\r\n                                    onBreakPoints(scope, {\r\n                                        e: {\r\n                                            index: i,\r\n                                            direction: \"downward\"\r\n                                        }\r\n                                    });\r\n                                    scope.$digest();\r\n                                };\r\n                            });\r\n                        };\r\n                    };\r\n                };\r\n\r\n            \t//unique ID for scroll\r\n                scrollCounter = scrollCounter + 1;\r\n                scope.scrollid = 'scroll-' + scrollCounter;\r\n\r\n                //custom config\r\n                var customConfig;\r\n                attrs.$observe('scrollConfig', function (value) {\r\n                    if (value) {\r\n                        customConfig = scope.$eval(attrs.scrollConfig);\r\n                    };\r\n                });\r\n\r\n                //scroll config\r\n                var scrollConfig = {},\r\n                onScrollEnd = $parse(attrs.onScrollEnd),\r\n                onScrollToTop = $parse(attrs.onScrollToTop),\r\n                onScrollInProgress = $parse(attrs.onScrollInProgress);\r\n\r\n                attrs.$observe('height', function (value) {\r\n                    if (value) {                               \r\n                        if (angular.isFunction(onScrollEnd) || angular.isFunction(onScrollToTop)) {\r\n                            scrollConfig.onScroll = function (y, x) {\r\n                                if (y.maxScroll > 0 && y.scroll >= y.maxScroll && angular.isFunction(onScrollEnd)) {\r\n                                    onScrollEnd(scope, { e: \"\" });\r\n                                }\r\n                                if (y.scroll == 0 && angular.isFunction(onScrollToTop)) {\r\n                                    onScrollToTop(scope, { e: \"\" });\r\n                                }\r\n                                else if (y.maxScroll > y.scroll > 0 && angular.isFunction(onScrollInProgress)) {\r\n                                    onScrollInProgress(scope, { e: \"\" });\r\n                                }\r\n                                angular.element('.fixeddd').hide();\r\n                            };\r\n                        }\r\n                    \r\n\r\n                        if (!attrs.vOffset) {\r\n                            if (value == \"parent\") {\r\n                                scope.scrollHeight = element.parent().outerHeight();\r\n                                $(window).resize(resizeHeight100P);\r\n                            } else {\r\n                                scope.scrollHeight = value;\r\n                            }\r\n                        } else if (attrs.vOffset) {\r\n                        \t// If scroll to be responsive excluding an offset\r\n                            $(window).unbind(\"resize\", resizeHeight100P);\r\n                        \tscope.scrollHeight = $window.innerHeight - parseInt(attrs.vOffset);\r\n                        } else {\r\n                        \tscope.scrollHeight = value;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                function resizeHeight100P(a) {\r\n                    scope.scrollHeight = element.parent().outerHeight();\r\n                    scope.$digest();\r\n                };\r\n\r\n                if (attrs.vOffset || attrs.hOffset) {\r\n                \t// Resize event if scroll to be responsive excluding an offset\r\n                \t$(window).bind('resize', function () {\r\n                        scope.scrollHeight = $window.innerHeight - parseInt(attrs.vOffset);\r\n                        scope.$digest();\r\n                        $timeout(function () {\r\n                \t\t\tif (attrs.vOffset) {\r\n                \t\t\t\tif (element.closest('.modal').length > 0) {\r\n                \t\t\t\t\tvar modalHeight = element.closest('.modal').height();\r\n                \t\t\t\t\telement.closest('.modal').css('top', window.innerHeight / 2 - modalHeight / 2 + 'px');\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t});\r\n                \t});\r\n                }\r\n                attrs.$observe('vOffset', function (newVal) {\r\n                    scope.scrollHeight = $window.innerHeight - parseInt(newVal);\r\n                });\r\n                scope.$on('scrollTopToBottom', function (event, args) {\r\n                    element.find('.scrollbar-outer').animate({ scrollTop: args }, \"slow\");\r\n                });\r\n\r\n                var onScrollHEnd = $parse(attrs.onScrollHEnd);\r\n                var onScrollHToTop = $parse(attrs.onScrollHToTop);\r\n                var onScrollHInProgress = $parse(attrs.onScrollHInProgress);\r\n\r\n                var eleWidth = element.css('width');\r\n                scope.scrollWidth = parseInt(eleWidth) ? eleWidth : '100%';\r\n\r\n                attrs.$observe('width', function (value) {\r\n                \tif (value) {\r\n                \t\tif (angular.isFunction(onScrollHEnd) || angular.isFunction(onScrollHToTop)) {\r\n                \t\t\tscrollConfig.onScroll = function (y, x) {\r\n                \t\t\t\tif (x.maxScroll > 0 && x.scroll == x.maxScroll && angular.isFunction(onScrollHEnd)) {\r\n                \t\t\t\t\tonScrollHEnd(scope, { e: \"\" });\r\n                \t\t\t}\r\n                \t\t\t\tif (x.scroll == 0 && angular.isFunction(onScrollHToTop)) {\r\n                \t\t\t\t\tonScrollHToTop(scope, { e: \"\" });\r\n                \t\t\t\t}\r\n                \t\t\t\telse if (x.maxScroll > x.scroll > 0 && angular.isFunction(onScrollHInProgress)) {\r\n                \t\t\t\t\tonScrollHInProgress(scope, { e: \"\" });\r\n                \t\t\t}\r\n                \t\t};\r\n                \t};\r\n                \t\tscope.scrollWidth = value;\r\n                }\r\n                });\r\n\r\n                attrs.$observe('connectScrolls', function (value) {\r\n                \tif (value) {\r\n                \t\tvar value = JSON.parse(value),\r\n                \t\t\tscrollTopSourceStorage = 0;\r\n\r\n                \t\tscrollConfig.onScroll = function (y, x) {\r\n                \t\t\tvar $vSource = $('.' + value.vSource),\r\n\t\t\t\t\t\t\t$vSourceP = $vSource.parent().parent(),\r\n\t\t\t\t\t\t\t$hSource = $('.' + value.hSource),\r\n\t\t\t\t\t\t\t$hSourceP = $hSource.parent().parent(),\r\n\t\t\t\t\t\t\t$vertical = $('.' + value.vertical),\r\n\t\t\t\t\t\t\t$verticalP = $vertical.parent().parent(),\r\n                \t\t\t$horizontal = $('.' + value.horizontal);\r\n\r\n                \t\t\tvar sourceHeight = $vSource.height();\r\n                \t\t\tvar scrollTopSource = $vSourceP.scrollTop(),\r\n                \t\t\tscrollTopConnect = $verticalP.scrollTop();\r\n\r\n                \t\t\tif (scrollTopSource > scrollTopSourceStorage) {\r\n                \t\t\t\tif (scrollTopSource > scrollTopConnect) {\r\n                \t\t\t\t\t$verticalP.scrollTop(scrollTopSource);\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t\telse if (scrollTopSource < scrollTopSourceStorage) {\r\n                \t\t\t\tif (scrollTopSource < scrollTopConnect) {\r\n                \t\t\t\t\t$verticalP.scrollTop(scrollTopSource);\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t\telse {\r\n                \t\t\t\tvar scrollLeft = $hSourceP.scrollLeft();\r\n                \t\t\t\t$horizontal.scrollLeft(scrollLeft);\r\n                \t\t\t}\r\n                \t\t\tscrollTopSourceStorage = scrollTopSource;\r\n                \t\t\tangular.element('.fixeddd').hide();\r\n                \t\t};\r\n\t\t\t\t\t}\r\n                });\r\n\r\n                function dateHideOnScroll(e) {\r\n                    element.find(\"input.datepicker\").each(function (i, el) {\r\n                        var dobj = $(el).data(\"daterangepicker\");\r\n                        if (dobj && dobj.isShowing) {\r\n                            dobj.hide()\r\n                        }\r\n                    });\r\n                }\r\n                //Cleaning floating elements on scroll\r\n                var lastOpenSelectDD;\r\n                function cleanFloatingElements(e) {\r\n                    element.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                        var autoComplete = $(this).data().autocomplete;\r\n                        if (autoComplete && autoComplete.visible) {\r\n                            autoComplete.hide();\r\n                        }\r\n                    });\r\n                    /* close select-dropdown */\r\n                    var $selectDd = $window.lastOpenedDropdownConfig;\r\n                    if ($selectDd && $selectDd != lastOpenSelectDD && $selectDd.origin.hasClass('select-dropdown')) {\r\n                        $selectDd.origin.trigger('close');\r\n                    }\r\n                    lastOpenSelectDD = $selectDd;\r\n                }\r\n                //End of cleaning floating elements on scroll\r\n                var lockScrollObser = false;\r\n                attrs.$observe(\"lockScroll\", function (a) {\r\n                    if (!lockScrollObser) {\r\n                        lockScrollObser = true;\r\n                        $timeout(ls.bind(this, a));\r\n                    } else {\r\n                        ls(a);\r\n                    }\r\n                });\r\n\r\n                function ls(a) {\r\n                    if (a) {\r\n                        var $scroller = element.find(\".scroll-content\");\r\n                        if (a == \"true\") {\r\n                            $scroller.data(\"scrolltop\", $scroller.scrollTop());\r\n                            $scroller.get(0).addEventListener(\"scroll\", lockScroll, true);\r\n                            if (onScrollLockUnlock) {\r\n                                onScrollLockUnlock(scope, { e: 'locked' });\r\n                                scope.$digest();\r\n                            }\r\n                        } else if (a == \"false\") {\r\n                            $scroller.get(0).removeEventListener(\"scroll\", lockScroll, true);\r\n                            if (onScrollLockUnlock) {\r\n                                onScrollLockUnlock(scope, { e: 'unLocked' });\r\n                                scope.$digest();\r\n                            }\r\n                        }\r\n                }\r\n\t\t\t\t\r\n                };\r\n                //Cleaning floating elements on scroll\r\n                function cleanFloatingElements(e) {\r\n                \telement.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                \t\tvar autoComplete = $(this).data().autocomplete;\n                \t\tif (autoComplete && autoComplete.visible) {\r\n                \t\t\tautoComplete.hide();\r\n                \t\t}\r\n                \t});\r\n                }\r\n            \t//End of cleaning floating elements on scroll\r\n                function lockScroll(e) {\r\n                    var st = $(this).data(\"scrolltop\");\r\n                    this.scrollTop = st;\r\n                    e.stopPropagation();\r\n                    return false;\r\n                };\r\n\r\n                var scrollOnUpdate = {\r\n                        handlers: [],\r\n                        addHandlers: function (func) {\r\n                            this.handlers.push(func);\r\n                        }\r\n                    };\r\n\r\n                scrollConfig.onUpdate = function () {\r\n                    var _this = this,\r\n                        _arguments = arguments;\r\n\r\n                    scrollOnUpdate.handlers.forEach(function (func) {\r\n                        if (typeof func === \"function\") {\r\n                            func.apply(_this, _arguments);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scrollOnUpdate.addHandlers(function (y, x) {\r\n                    if (y.closest('.modal.noTransform').length > 0) {\r\n                        var modalHeight = y.closest('.modal').height();\r\n                        y.closest('.modal').css('top', window.innerHeight / 2 - modalHeight / 2 + 'px');\r\n                    }\r\n                });\r\n\r\n                var scrollToElement,\r\n                    scrollToElementName;\r\n                if (attrs.scrollToElement) {\r\n\r\n                    scrollOnUpdate.addHandlers(function (y, x) {\r\n                        var $scrollToElementName = y.find(scrollToElementName.content);\r\n                        if (scrollToElementName && scrollToElementName.status && $scrollToElementName.length) {\r\n                            y.animate({ scrollTop: (($scrollToElementName.offset().top - y.children('div').offset().top) - 10) }, \"slow\");\r\n                        }\r\n                    });\r\n\r\n                    scrollToElement = attrs.$observe('scrollToElement', function (value) {\r\n                        scrollToElementName = attrs.scrollToElement && JSON.parse(attrs.scrollToElement);\r\n                    });\r\n                }\r\n\r\n                setTimeout(function () {\r\n                    var scrollWrapper = angular.element('#' + scope.scrollid);\r\n                    var mergedConfig = angular.merge(scrollConfig, customConfig);\r\n                    scrollWrapper.scrollbar(mergedConfig);\r\n\r\n                \t//Fixed header on scroll\r\n                    var scrlTop;\r\n                    scrollWrapper.scroll(function (e) {\r\n                        var _this = $(this),\r\n                            currScrlTop = _this.scrollTop(),\r\n                            dir;\r\n\r\n                        if (isFixedHeader) {\r\n                            scope.fixedHeader(e);\r\n                        } else if (isScrollDate) {\r\n                            dateHideOnScroll(e);\r\n                        }\r\n                        if (attrs.scrollBreakPoints) {\r\n                            if (currScrlTop > scrlTop) {\r\n                                dir = \"upward\";\r\n                            } else if (currScrlTop < scrlTop) {\r\n                                dir = \"downward\";\r\n                            };\r\n                            scrollBreakPoints(currScrlTop, dir);\r\n                        }\r\n                        cleanFloatingElements(e);\r\n                        scrlTop = currScrlTop;\r\n                    });\r\n                    scrlTop = scrollWrapper.scrollTop();\r\n\r\n                    // for ie update the icon inside the smartscroll\r\n                    var ua = window.navigator.userAgent, use = scrollWrapper.find('use');\r\n                    if (ua.indexOf('MSIE') !== undefined || ua.indexOf('Trident/') !== undefined || ua.indexOf('Edge/') !== undefined) {\r\n                        if (use.length > 0) {\r\n                            use.each(function () {\r\n                                var _this = angular.element(this), currentItem = _this.attr(\"xlink:href\");\r\n                                _this.attr(\"xlink:href\", \"\").attr(\"xlink:href\", currentItem);\r\n                    });\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    if (scrollToElement) {\r\n                        scrollToElement();\r\n                    }\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartScroll/smartScrollTemplate.html'\r\n        };\r\n    }]);\r\n})();\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartLazyLoad', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                smartLazyLoad: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var scrollElement = element.closest('.scrollbar-outer');\r\n                scrollElement.scroll(function () {\r\n                    if (this.scrollTop + this.offsetHeight >= this.scrollHeight) {\r\n                        scope.$apply(function () {\r\n                            scope.smartLazyLoad();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n})();\n(function() {\r\n    'use strict';\r\n    \r\n    angular.module('SMART2').directive('smartPlaceholder', ['$translate', 'ScrollTo', function ($translate, ScrollTo) {\r\n        return {\r\n            restrict: 'A',\r\n            replace: true,\r\n            link: function (scope, element, attrs) {\r\n                window.activePlaceholder = element;\r\n\t\t\t\tvar tmpPlaceholder = getHTMLPlaceholder(scope);\r\n                element.addClass((!scope.property.isMandatory ? 'optionalField ' : '') + ((scope.property.attributes.readonly ? 'readOnlyField' : '')));\r\n                element.find('.smart-ph-label').html('<span>' + $translate.instant(scope.property.label) + '</span>');\r\n                element.find('.smart-ph-value').html('<span>' + tmpPlaceholder + '</span>');\r\n                element.attr('title', tmpPlaceholder);\r\n\t\t\t\t\r\n\t\t\t\tif (tmpPlaceholder != '') {\r\n                    element.find('.smart-ph-label').addClass('active');\r\n                }\r\n\r\n                if (scope.property.attributes.disable || scope.property.attributes.readonly) {\r\n                    element.find('.smart-ph-value').addClass('disabled');\r\n                }\r\n                else {\r\n                    element.attr('tabindex', 0);\r\n                }\r\n\t\t\t\t\r\n                var onAttributesChange = scope.$watchGroup(['property.attributes.disable', 'property.attributes.readonly', 'model.' + scope.property.data, 'property.validate', 'property.focus'], function (newVal, oldVal) {\r\n\t\t\t\t\t//\tdisable and readonly change listener\r\n\t\t\t\t\tif(!angular.equals(newVal[0], oldVal[0]) || !angular.equals(newVal[1], oldVal[1])) {\r\n\t\t\t\t\t    if (newVal[0] || newVal[1]) {\r\n\t\t\t\t\t        element.find('.smart-ph-value').addClass('disabled');\r\n\t\t\t\t\t        element.attr('tabindex', -1);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t    else {\r\n\t\t\t\t\t        element.find('.smart-ph-value').removeClass('disabled');\r\n\t\t\t\t\t        element.attr('tabindex', 0);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//\tdata change listener\r\n\t\t\t\t\tif(!angular.equals(newVal[2], oldVal[2])) {\r\n\t\t\t\t\t\ttmpPlaceholder = getHTMLPlaceholder(scope);\r\n\t\t\t\t\t\telement.find('.smart-ph-value').html('<span>' + tmpPlaceholder + '</span>');\r\n\t\t\t\t\t\telement.attr('title', tmpPlaceholder);\r\n\t\t\t\t\t\tif (tmpPlaceholder != '') {\r\n\t\t\t\t\t\t\telement.find('.smart-ph-label').addClass('active');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t    element.find('.smart-ph-label').removeClass('active');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                    //\tvalidate change listener\r\n\t\t\t\t\tif (!angular.equals(newVal[3], oldVal[3])) {\r\n\t\t\t\t\t    if (scope.property.validate) {\r\n\t\t\t\t\t        if ((angular.isUndefined(scope.property.attributes.readonly) || scope.property.attributes.readonly == false) &&\r\n                                (angular.isUndefined(scope.property.attributes.disable) || scope.property.attributes.disable == false)) {\r\n\t\t\t\t\t            validate();\r\n\t\t\t\t\t        }\r\n\t\t\t\t\t        scope.property.validate = false;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\r\n                    //\tfocus change listener\r\n\t\t\t\t\tif (!angular.equals(newVal[4], oldVal[4])) {\r\n\t\t\t\t\t    if (scope.property.focus) {\r\n\t\t\t\t\t        ScrollTo.perform(element, angular.element('#' + scope.formWidgetId));\r\n\t\t\t\t\t        scope.onFocus();\r\n\t\t\t\t\t        scope.property.focus = false;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n                });\r\n\r\n                var validate = function () {\r\n                    var model = eval('scope.model.' + scope.property.data);\r\n                    var error;\r\n\r\n                    if(scope.property.isMandatory) {\r\n                        if ((scope.property.attributes.type === 'text' || angular.isUndefined(scope.property.attributes.type)) && (angular.isUndefined(model) || model == null || model.trim() == '')) {\r\n                            error = $translate.instant(\"enterValueErrMsg\");\r\n                        }\r\n                        else if (scope.property.attributes.type == 'autocomplete' && (angular.isUndefined(model) || model == null || model == '' || (model && model.hasOwnProperty('value') && model.value.trim() == ''))) {\r\n                            error = $translate.instant(\"enterValueErrMsg\");\r\n                        }\r\n                        else if (scope.type == 'number' && isNaN(scope.ngModel)) {\r\n                            error = $translate.instant(\"enterNumberErrMsg\");\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isUndefined(error) && scope.property.rules) {\r\n                        var rules = scope.property.rules;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, model))) {\r\n                                    error = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (error) {\r\n                        element.find('.smart-ph-label').addClass('active');\r\n                        element.find('.smart-ph-value').addClass('invalid');\r\n                        element.find('.smart-ph-error').html(error);\r\n                        //scope.$parent.errorMessage = error;\r\n                    }\r\n                    else {\r\n                        element.find('.smart-ph-value').removeClass('invalid');\r\n                        element.find('.smart-ph-error').html('');\r\n                        if (tmpPlaceholder == '') {\r\n                            element.find('.smart-ph-label').removeClass('active');\r\n                        }\r\n                        //scope.$parent.errorMessage = undefined;\r\n                    }\r\n                };\r\n\r\n                //validate();\r\n                \r\n                scope.onFocus = function (e) {\r\n                    if (scope.property.attributes.disable || scope.property.attributes.readonly) {\r\n                        return;\r\n                    }\r\n                    scope.$parent.isPreviewMode = false;\r\n                };\r\n\r\n                scope.onRemoveButtonClick = function (e) {\r\n                    scope.property.isVisible = !scope.property.isVisible;\r\n                    e.stopPropagation();\r\n                };\r\n\r\n                scope.$parent.onEditableRender = function (editableScope, editableEle) {\r\n                    editableEle.find('input').focus();\r\n                    editableEle.find('input').select();\r\n                    element.attr('tabindex', -1);\r\n                    if (this.errorMessage) {\r\n                        editableEle.find('input').addClass('invalid');\r\n                        editableEle.find('label').attr('data-error', this.errorMessage);\r\n                        this.errorMessage = undefined;\r\n                    }\r\n                };\r\n\r\n                scope.$parent.onStopEdit = function (editableScope, editableEle) {\r\n                    this.isPreviewMode = true;\r\n                    if (editableScope.errorMessage != undefined || editableScope.errorMessage != null) {\r\n                        this.errorMessage = editableScope.errorMessage;\r\n                        setTimeout(function () {\r\n                            window.activePlaceholder.find('.smart-ph-label').addClass('active');\r\n                            window.activePlaceholder.find('.smart-ph-value').addClass('invalid');\r\n                            window.activePlaceholder.find('.smart-ph-error').html(editableScope.errorMessage);\r\n                        });\r\n                    }\r\n                };\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onAttributesChange();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSection/smartPlaceholderTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\t\r\n\tvar setPrecisionLimits = function (number, decimalPrecision, minMaxPrecision) {\r\n        if (number != undefined) {\r\n            var arr = (number.toString()).split('e')\r\n            if (arr.length > 1 && parseInt(arr[1]) < 0) {\r\n                number = (number).toFixed(6);\r\n            }\r\n            var tempArr = number.toString().split('.');\r\n            if (tempArr != undefined && tempArr.length > 1) {\r\n                var preDecimal = tempArr[0];\r\n                if (preDecimal != 0 && preDecimal.toString().length > 20) {\r\n                    var tempVal = preDecimal.toString().substring(0, 19);\r\n                    number = parseInt(tempVal);\r\n                }\r\n            }\r\n            else {\r\n                if (number != 0 && number.toString().length > 20) {\r\n                    var tempVal = number.toString().substring(0, 19);\r\n                    number = parseInt(tempVal);\r\n                }\r\n            }\r\n            if (decimalPrecision != undefined) {\r\n                number = parseFloat(parseFloat(number).toFixed(decimalPrecision));\r\n            }\r\n            else if (minMaxPrecision !== undefined && minMaxPrecision !== '') {\r\n                var splitPrecision = JSON.parse(minMaxPrecision);\r\n                if (splitPrecision.length > 2 || splitPrecision.length < 1) {\r\n                    //\tdon't do anything\r\n                }\r\n                else {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    var highPrecisionLimit = splitPrecision[1];\r\n\r\n                    var postDecimalNumbers = ((number + \"\").split(\".\")[1] != undefined) ? (number + \"\").split(\".\")[1].length : 0;\r\n\r\n                    if (postDecimalNumbers == 0) {\r\n                        //\tdon't do anything\r\n                    }\r\n                    else if (lowerPrecisionLimit > postDecimalNumbers && postDecimalNumbers < highPrecisionLimit && postDecimalNumbers != 0) {\r\n                        number = parseFloat(parseFloat(number).toFixed(lowerPrecisionLimit));\r\n                    }\r\n                    else if (postDecimalNumbers >= highPrecisionLimit && postDecimalNumbers != 0) {\r\n                        var fixed = Math.pow(10, highPrecisionLimit);\r\n                        number = Math.floor(number * fixed) / fixed;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return number;\r\n    };\r\n\r\n\r\n    var getFormattedDate = function (dateVal, dateFormat, isSetFromGrid) {\r\n        var output = '';\r\n        dateFormat = dateFormat.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n        var isDateBlank = false;\r\n        var doesContainDateString = isSetFromGrid == 'true' ? true : (dateVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n\r\n        if (dateVal == \"\" || dateVal == null) {\r\n            dateVal = Date.now();\r\n            isDateBlank = true;\r\n        }\r\n        else {\r\n            if (doesContainDateString) {\r\n                var tmpModel = (dateVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                tmpModel = tmpModel.split('+');\r\n                tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + dateVal + '\").getTime()') : tmpModel[0]));\r\n                output = moment(tmpModel).format(dateFormat);\r\n            }\r\n            else {\r\n                if (Object.prototype.toString.call(dateVal) !== '[object Date]') {\r\n                    dateVal = parseInt(dateVal);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!isDateBlank) {\r\n            if (!doesContainDateString) {\r\n                output = moment(dateVal).format(dateFormat);\r\n            }\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    var getHTMLPlaceholder = function (scope) {\r\n        var placeHolder;\r\n        var tmpModel = eval(\"scope.model.\" + scope.property.data);\r\n\r\n        switch (scope.property.type) {\r\n            case 'textfield':\r\n                switch (scope.property.attributes.type) {\r\n                    case 'number':\r\n                        placeHolder = setPrecisionLimits(tmpModel, scope.property.attributes.decimalprecision, scope.property.attributes.minmaxprecision);\r\n                        break;\r\n\r\n                    case 'date':\r\n                        placeHolder = getFormattedDate(tmpModel, scope.property.attributes.format);\r\n                        break;\r\n\r\n                    case 'autocomplete':\r\n                        if (tmpModel == undefined || tmpModel == null || tmpModel == '') {\r\n                            return '';\r\n                        }\r\n                        var str = scope.property.attributes.displayformat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                        try {\r\n                            var parentSplit = str.split('{');\r\n                            for (var j = 0; j < parentSplit.length; j++) {\r\n                                var childSplit = parentSplit[j].split('}');\r\n                                for (var k = 0; k < childSplit.length; k++) {\r\n                                    if (childSplit[k].indexOf('.') > 0 || tmpModel.hasOwnProperty(childSplit[k])) {\r\n                                        evalResult = eval('tmpModel.' + childSplit[k]);\r\n                                        evaluatedKeysCounter++;\r\n                                        if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                            evalResult = '';\r\n                                            nullKeysCounter++;\r\n                                        }\r\n                                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (evaluatedKeysCounter == nullKeysCounter) {\r\n                                str = '';\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                        placeHolder = str;\r\n                        break;\r\n\r\n                    default:\r\n                        placeHolder = eval(\"scope.model.\" + scope.property.data);\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            case 'dropdown':\r\n            case 'select':\r\n                placeHolder = (eval(\"scope.model.\" + scope.property.data + (scope.property.attributes.displaykey ? \".\" + scope.property.attributes.displaykey : (scope.property.attributes.datakey ? \"\" + scope.property.attributes.datakey : \"\"))));\r\n                break;\r\n        }\r\n        return placeHolder == null || placeHolder == undefined ? '' : placeHolder;\r\n    };\r\n\t\r\n})();    \n  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Section\r\n   * @description This directive is useful for creating a section.\r\n   * \r\n   * @attr {String} label\r\n   *    Label to be displayed on section header. If 'is-header' is set to true, label will be displayed on section header.\r\n   * @attr {Boolean} plain\r\n   *    If set to true, section with no style will be generated\r\n   * @attr {Boolean} is-collapsible\r\n   *    If set to true, section will be collapsible\r\n   * @attr {String} header-template\r\n   *    This attribute is useful for creating sections with custom header templates.\r\n   *    'header-template' is expected to be an URL of a template.\r\n   * @attr {Boolean} is-active\r\n   *    If set to false and if 'is-collapsible' is set to true, section will be displayed in collapsed mode. Default value is true.      \r\n   * @attr {Boolean} is-header\r\n   *    If set to true, section-header will be displayed. Default value is true.\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n    \r\n   * @example \r\n   Dynamic: (Section with header)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"label\": \"Section header\",\r\n                        \"isHeader\": true,\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example \r\n   Dynamic: (Section with custom header-template)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"headerTemplate\": \"abc.html\",\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example \r\n   Dynamic: (Section with collapsible header)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"headerTemplate\": \"abc.html\",\r\n                        \"isCollapsible\": true,\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example\r\n   Static:\r\n   <smart-section>\r\n        Section contents will go here\r\n    </smart-section> \r\n\r\n   * @example\r\n   Static: (Section with header)\r\n   <smart-section label=\"Section Header\" is-header=\"true\">\r\n        Section contents will go here\r\n   </smart-section>\r\n\r\n   * @example\r\n   Static: (Section with collpsible header)\r\n   <smart-section is-collapsible=\"true\">\r\n        Section contents will go here\r\n   </smart-section>\r\n        \r\n   * @example\r\n   Static: (Section with header and content place holder)\r\n   <smart-section is-header=\"true\">\r\n        <smart-section-header>\r\n            Section header will go here\r\n        </smart-section-header>\r\n        <smart-section-content>\r\n            Section contents will go here\r\n        </smart-section-content>\r\n    </smart-section>    \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var Textid = 16011982;\r\n    var sectionCounter = 0;\r\n    \r\n    angular.module('SMART2').directive('smartSection', ['$timeout', '$parse', function ($timeout, $parse) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: {\r\n                'header': '?smartSectionHeader',\r\n                'body': '?smartSectionBody'\r\n            },\r\n            scope: {\r\n                config: '=?',\r\n                model: '=?',\r\n                label: '@',\r\n                isSequential: '@',\r\n                isMandatory: '@',\r\n                isDraggable: '@',\r\n                parentScope: '=?',\r\n                formWidgetId: '@',\r\n                isCollapsible: '@',\r\n                enableFieldPreview: '@',\r\n                headerTemplate: '@',\r\n                isActive: '=?',\r\n                isHeader: '@',\r\n                plain: '@',\r\n                onClick: '&',\r\n                onHeaderClick: '&',\r\n                revisionMode:'@',\r\n                isSwitchable: '@',\r\n                onClickSwitchable: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.isSwitchFunc = function () {\r\n                    scope.onClickSwitchable({ \"section\": scope.config });\r\n                }\r\n               if (attrs.id !== '' || attrs.id !== undefined || attrs.id !== null) {\r\n                    scope.sectionId = attrs.id;\r\n                }\r\n                else {\r\n                    scope.sectionId = 'section-' + sectionCounter;\r\n                    sectionCounter++;\r\n                }\r\n\r\n                element.attr('id', scope.sectionId);\r\n\r\n                scope.collapsible = scope.$eval(scope.isCollapsible) == true ? true : false;\r\n                scope.active = angular.isUndefined(scope.isActive) || scope.isActive == true ? true : false;\r\n                scope.header = scope.$eval(scope.isHeader) ? true : false;\r\n\r\n                if(!scope.collapsible) {\r\n                    scope.active = true;\r\n                }\r\n                else {\r\n                    scope.header = true;\r\n                }\r\n\r\n                scope.isCollapsed = scope.active;\r\n\r\n                if(!scope.headerTemplate) {\r\n                    scope.headerTemplate = '';\r\n                }\r\n                scope.formLoaderConfig = { bgwhite: true, plain: true, center: true, message: \"\" };\r\n\t\t\t\t/*\r\n\t\t\t\t * Update optional field item\r\n\t\t\t\t */\r\n                var onRowsConfig = scope.$watch('config.rows', function (newConfig) {\r\n                    if(newConfig) {\r\n                        var rowsLen = scope.config.rows.length;\r\n                        for (var j = 0; j < rowsLen; j++) {\r\n                            var propLength = scope.config.rows[j].properties.length;\r\n                            for (var k = 0; k < propLength; k++) {\r\n                                var tData = scope.config.rows[j].properties[k];\r\n                                if (!tData.isMandatory) {\r\n                                    updateOptionalField(tData);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                    }\r\n                }, true);\r\n                    \r\n                var updateOptionalField = function (item) {\r\n                    var optFieldLen = scope.config.optionalFields.length;\r\n                    for (var i = 0; i < optFieldLen; i++) {\r\n                        var tData = scope.config.optionalFields[i];\r\n                        if (item.label == tData.label) {\r\n                            tData.visible = item.isVisible;\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\r\n                /*\r\n                 * Get row's visible properties length\r\n                 */\r\n                var getVisiblePropertiesLength = function (rowIndex) {\r\n                    var visiblePropertiesLength = 0,\r\n                        rowsPropLen = scope.config.rows[rowIndex].properties.length;\r\n                    for (var i = 0; i < rowsPropLen; i++) {\r\n                        var tData = scope.config.rows[rowIndex].properties[i];\r\n                        if (tData.isVisible && !tData.isHidden) {\r\n                            visiblePropertiesLength++;\r\n                        }\r\n                    }\r\n                    return visiblePropertiesLength;\r\n                };\r\n\r\n\r\n                scope.onOptionalFieldClick = function (isLabelClicked, item) {\r\n                    if (isLabelClicked && item.isVisible) {\r\n                        return;\r\n                    }\r\n\r\n                    /*\r\n                     *  If row's visible properties length is 0\r\n                     *  then splice the row and push it at the end of section\r\n                     */\r\n                    var tmpRow = scope.config.rows[item.rowIndex],\r\n                        tmpPropIndxData = tmpRow.properties[item.propertyIndex];\r\n                    if (!scope.$eval(scope.isSequential) && getVisiblePropertiesLength(item.rowIndex) == 0) {\r\n                        scope.config.rows.splice(item.rowIndex, 1);\r\n                        scope.config.rows.push(tmpRow);\r\n                        item.rowIndex = scope.config.rows.length - 1;\r\n                    }\r\n\r\n                    tmpPropIndxData.isVisible = !tmpPropIndxData.isVisible;\r\n\r\n                    /*\r\n                     *  scope.isSequential is set to 'true', form-widget-property would be added \r\n                     *  where it is positioned in the JSON structure else \r\n                     *  form-widget-property would be added at the end of row\r\n                     */\r\n                    if (!scope.$eval(scope.isSequential) && tmpPropIndxData.isVisible) {\r\n                        //var tmpProperty = scope.config.rows[item.rowIndex].properties[item.propertyIndex];\r\n                        tmpRow.properties.splice(item.propertyIndex, 1);\r\n                        tmpRow.properties.push(tmpPropIndxData);\r\n                        var rowsPropLength = scope.config.rows[item.rowIndex].properties.length;\r\n                        for (var i = 0; i < rowsPropLength; i++) {\r\n                            var optLength = scope.config.optionalFields.length;\r\n                            for (var j = 0; j < optLength; j++) {\r\n                                if (tmpRow.properties[i].label == scope.config.optionalFields[j].label) {\r\n                                    scope.config.optionalFields[j].propertyIndex = i;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    item.visible = !item.visible;\r\n                    //  Expand the section\r\n                    if (item.visible) {\r\n                        var clearMe = setTimeout(function () {\r\n                            expandSection();\r\n                            clearTimeout(clearMe);\r\n                            clearMe = null;\r\n                        }, 250);\r\n                    }\r\n                };\r\n\r\n                var isActiveTriggered = false;\r\n\r\n                /*\r\n                 * Expand section if isActive is set to true\r\n                 */\r\n                var onIsActive = scope.$watch('isActive', function (newValue) {\r\n                \tif (angular.isDefined(newValue) && newValue) {\r\n                \t\tisActiveTriggered = true;\r\n                    \texpandSection();\r\n                    \tscope.isActive = false;\r\n                    }\r\n                });\r\n\r\n\r\n                /*\r\n                 * On optional field click listener\r\n                 */\r\n                var onOptionalFieldClick = scope.$on('optionalFieldClick', function (event, args) {\r\n                    try {\r\n                        if (args.item.sectionKey === scope.config.key) {\r\n                            scope.onOptionalFieldClick(args.isLabelClicked, args.item);\r\n                        }\r\n                    }\r\n                    catch(e) {}\r\n                });\r\n\r\n\r\n                /*\r\n                 *  Expand section\r\n                 */\r\n                var expandSection = function () {\r\n                    var collapsibleHdr = element.find('.collapsible-header');\r\n                    if (!collapsibleHdr.hasClass('active')) {\r\n                        collapsibleHdr.trigger('click');\r\n                    }\r\n                    else if (!collapsibleHdr.hasClass('active')) {\r\n                        collapsibleHdr.trigger('click');\r\n                    }\r\n                };\r\n\r\n                var isClicked = false\r\n\r\n               var clrTimeout = setTimeout(function () {\r\n                    element.find('.collapsible-header').click(function () {\r\n                    \tvar ele = this;\r\n\r\n                        scope.$evalAsync(function () {\r\n                        \tif (isClicked && !isActiveTriggered)\r\n                        \t\treturn;\r\n                        \t\r\n                        \tisClicked = true;\r\n                            scope.isCollapsed = angular.element(ele).hasClass('active');\r\n                            scope.active = scope.isCollapsed;\r\n                            scope.onHeaderClick();\r\n                            scope.onClick();\r\n                        \tsetTimeout(function () {\r\n                        \t    isClicked = false;\r\n                        \t}, 500);\r\n                        \tisActiveTriggered = false;\r\n                            clearTimeout(clrTimeout);\r\n                            clrTimeout = null;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                \r\n                /*\r\n                 *  Expand section on header focus\r\n                 */\r\n                scope.onSectionHeaderFocus = function (e) {\r\n                    if ($(e.target).hasClass('section-header-focuser') && !scope.active) {\r\n                        scope.config.isContentLoaded = true;\r\n                        scope.active = true;\r\n                        //scope.isCollapsed = true;\r\n                        expandSection();\r\n                    }\r\n                    /* in focus for section move on top */\r\n                    var conf = scope.config.key,\r\n                     formwidget = scope.formWidgetId,\r\n                     $itemSelected = $('#' + conf),\r\n                     staticTopmargin = 64; // 64 is subheader height\r\n\r\n                    var displacementItem = $itemSelected.offset().top - angular.element('#' + formwidget + '-sortable').offset().top;\r\n\r\n                    displacementItem = displacementItem + staticTopmargin;\r\n                    setTimeout(function () {\r\n                        angular.element('body,html').animate({\r\n                            scrollTop: displacementItem\r\n                        }, \"medium\");\r\n                    }, 200);\r\n                    /* in focus for section move on top end */\r\n                };\r\n                \r\n\r\n                /*\r\n                 *  Remove all listeners on scope destroy\r\n                 */\r\n                scope.$on('$destroy', function () {\r\n                    onRowsConfig();\r\n                    onIsActive();\r\n                    onOptionalFieldClick();\r\n                    element.find('.collapsible-header').off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSection/smartSectionTemplate.html'\r\n        };\r\n    }]);\r\n    \r\n    var angular2BootstrapTimeout;\r\n\r\n    angular.module('SMART2').directive('smartSectionItemRenderer', ['$compile', 'formWidgetUtils', '$translate', '$templateCache', '$timeout', function ($compile, formWidgetUtils, $translate, $templateCache, $timeout) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: false,\r\n            link: function (scope, element, attrs) {\r\n                var html = \"\", commonAttributes;\r\n\r\n                if (scope.section) {\r\n                    if (scope.section.controller) {\r\n                        //  Creating dataModel variable so that child controller can access it using $scope.formDataModel\r\n                        scope.formDataModel = scope.$parent.$parent.$parent.modelData;\r\n\r\n                        html += '<div ng-controller=\"' + scope.section.controller + '\">';\r\n                    }\r\n\r\n                    if (scope.section.isLazyLoadEnabled) {\r\n                        scope.section.isActive = false;\r\n                    }\r\n\r\n                    //scope.section.isContentLoaded = !angular.copy(scope.section.isLazyLoadEnabled);\r\n\r\n                    //  Section's primary attribute and can be optional\r\n                    scope.extendedSectionConfig = angular.extend({\r\n                        isMandatory: false,\r\n                        isCollapsible: true,\r\n                        isDraggable: false,\r\n                        isHeader: true,\r\n                        isActive: true,\r\n                        isHidden: true,\r\n                        isSwitchable: false,\r\n                        isFieldPreviewEnabled: false,\r\n                        isSectionDisable: false,\r\n                        isLazyLoadEnabled: false,\r\n                        headerTemplate: ''\r\n                    }, scope.section);\r\n\r\n                    scope.section.isLoading = true;\r\n                    scope.section.isContentLoaded = false; // !angular.copy(scope.section.isLazyLoadEnabled);\r\n\r\n                    var cancelTOut = $timeout(function () {\r\n                        scope.section.isLoading = false;\r\n                        scope.section.isContentLoaded = !angular.copy(scope.section.isLazyLoadEnabled);\r\n                        $timeout.cancel(cancelTOut);\r\n                        cancelTOut = null;\r\n                    }, scope.$index * 500);\r\n\r\n                    commonAttributes = ' label=\"{{section.label | translate}}\" config=\"section\" model=\"modelData\" plain=\"{{section.plain}}\" is-sequential=\"{{isSequential}}\" ' + formWidgetUtils.getAttributesMapping('primary', scope.extendedSectionConfig, scope, true) + ' parent-scope=\"' + (scope.section.controller ? '$parent.$$childTail' : '$parent.$parent.$parent.$parent') + '\" form-widget-id=\"{{formWidgetId}}\" ';\r\n\r\n                    commonAttributes += \"revision-mode=\" + ((!scope.revisionMode || scope.revisionMode == \"false\") ? \"'false'\" : \"'true'\"); // added for revision mode\r\n\r\n                    html += '<smart-section id=' + scope.formWidgetId + '-section-' + scope.$index + ' ' + (scope.enableFieldPreview ? ' enable-field-preview=\"true\" ' : ' ') + commonAttributes + formWidgetUtils.mapEvents([\r\n                        { type: 'on-click', listener: 'onSectionClick(section)' },\r\n                        // { type: 'on-header-click', listener: formWidgetUtils.generateFunctionWithParams(scope.section.onHeaderClick, '$parent.$parent.$parent.$parent', true) },\r\n                        { type: 'on-header-click', listener: 'onSectionHeaderClick(section)' },\r\n                          { type: 'on-click-switchable', listener: formWidgetUtils.generateFunctionWithParams(scope.section.onClickSwitchable, '$parent.$parent.$parent.$parent', true) }\r\n                    ]) + '></smart-section>';\r\n\r\n                    if (scope.section.controller) {\r\n                        html += '</div>';\r\n                    }\r\n                }\r\n                else {\r\n                    var ngModelMapping, optionsMapping;\r\n\r\n\r\n                    if (scope.property.type == 'subsection') {\r\n                        ngModelMapping = 'model-data=\"model.' + scope.property.data + '\"' + 'form-model=\"model\"';\r\n                    }\r\n                    else if (scope.property.type == 'dropdown') {\r\n                        ngModelMapping = 'ng-model=\"model.' + scope.property.data + '\"';\r\n                        if (angular.isDefined(scope.property.optionsData))\r\n                            optionsMapping = 'options=\"model.' + scope.property.optionsData + '\"';\r\n                    }\r\n                    else {\r\n                        ngModelMapping = 'ng-model=\"model.' + scope.property.data + '\"';\r\n\r\n                        try {\r\n                            if (scope.property.attributes.ngModelOptions.getterSetter) {\r\n                                ngModelMapping = 'ng-model=\"parentScope.' + scope.property.data + '\"';\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n\r\n                    var areaType = false;\r\n                    if (typeof scope.property.attributes != 'undefined' && typeof scope.property.attributes.type != 'undefined' && scope.property.attributes.type == 'area')\r\n                    \tareaType = true;\r\n\r\n                    commonAttributes = ' class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + (scope.property.type != 'subsection' ? (scope.property.type == 'textfield' && areaType) ? ' area-height-manager' : ' line-height-manager' : '') + '\" label=\"{{property.label | translate}}\" focus=\"' + (typeof scope.property.focus == 'string' ? 'parentScope.' + scope.property.focus : 'property.focus') + '\" validate=\"' + (typeof scope.property.validate == 'string' ? 'parentScope.' + scope.property.validate : 'property.validate') + '\" ' + ngModelMapping + ' ' + optionsMapping + ' ' + formWidgetUtils.getAttributesMapping('primary', scope.property, scope) + ' parent-element=\"{{formWidgetId}}\" ' + formWidgetUtils.getAttributesMapping('secondary', scope.property.attributes, scope);\r\n\r\n                    switch (scope.property.type) {\r\n                        case 'textfield':\r\n                            var enableFieldPreview = scope.enableFieldPreview == 'true' || scope.enableFieldPreview == true;\r\n\r\n                            if (enableFieldPreview) {\r\n                                scope.isPreviewMode = true;\r\n                                html = '<div style=\"margin-bottom: 15px;\" class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + ' input-field\" smart-placeholder ng-if=\"isPreviewMode\"></div>';\r\n                            }\r\n                            else {\r\n                                html = '';\r\n                            }\r\n\r\n                            html += '<smart-textfield' + (enableFieldPreview ? ' ng-if=\"!isPreviewMode\" ' : ' ') + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-focus', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onFocus, 'parentScope') },\r\n                                { type: 'on-blur', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onBlur, 'parentScope') },\r\n                                { type: 'on-key-up', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyUp, 'parentScope') },\r\n                                { type: 'on-key-down', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyDown, 'parentScope') },\r\n                                { type: 'on-key-press', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyPress, 'parentScope') },\r\n                                { type: 'on-enter', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onEnter, 'parentScope') },\r\n                                { type: 'on-select', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onSelect, 'parentScope') },\r\n                                { type: 'on-date-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDateChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-textfield>';\r\n                            break;\r\n\r\n                        case 'dropdown':\r\n                        case 'select':\r\n                            html = '<smart-select validate=\"property.validate\" ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-select>';\r\n                            break;\r\n\r\n                        case 'radio':\r\n                            html = '<smart-radio gap=\"true\"' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-radio>';\r\n                            break;\r\n\r\n                        case 'checkbox':\r\n                            html = '<smart-checkbox fill=\"true\" min-height=\"50px\" ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-checkbox>';\r\n                            break;\r\n\r\n                        case 'switch':\r\n                            html = '<smart-switch ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-switch>';\r\n                            break;\r\n\r\n                        case 'subsection':\r\n                            /*\r\n                             *  Check if subsection is angular2 enabled i.e. if sub-section should boostrap Angular2 app\r\n                             */\r\n                            if (scope.property.isAngular2Enabled) {\r\n                                html = $templateCache.get(scope.property.templateUrl);\r\n                            }\r\n                            else {\r\n                                /*\r\n                                 *  Convert onLoad function in a way that function name should be converted to subsection controller function\r\n                                 *  and its parameteres should be converted into parent controller's variables\r\n                                 */\r\n                                var onLoadFunction = '';\r\n                                if (scope.property.onLoad == '' || scope.property.onLoad == undefined || scope.property.onLoad == null) {\r\n                                    scope.property.onLoad = '';\r\n                                }\r\n                                if (scope.property.onLoad != '') {\r\n                                    onLoadFunction = formWidgetUtils.generateFunctionWithParams(scope.property.onLoad, 'parentScope');\r\n                                    onLoadFunction = onLoadFunction.replace('parentScope.' + scope.property.onLoad.split('(')[0], '$$$childHead.' + scope.property.onLoad.split('(')[0]);\r\n                                    onLoadFunction = onLoadFunction.replace(',property', '');\r\n                                }\r\n                                html = '<smart-subsection class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + ' padding0\" controller=\"{{property.controller}}\" init=\"{{property.init}}\" template-url=\"{{property.templateUrl}}\" parent-scope=\"parentScope\" widget-scope=\"parentScope.$parent.$parent.$parent\"' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                    { type: 'on-load', listener: onLoadFunction }\r\n                                ]) + '></smart-subsection>';\r\n                            }\r\n                            break;\r\n\r\n                        case 'revision':\r\n                            var revisionAttrs = [\r\n                                \"class = '\" + formWidgetUtils.getColspanClass(scope.property.colspan) + \"'\",\r\n                                \"label='{{::property.label | translate}}'\",\r\n                                \"old-data='::property.attributes.oldData'\",\r\n                                \"new-data='::property.attributes.newData' ng-if='::property.label'\"\r\n                            ].join(\" \");\r\n                            html = '<smart-revision '+ revisionAttrs +'></smart-revision>';\r\n                            break;\r\n                    }\r\n                }\r\n                element.html(html);\r\n\r\n                if (scope.property && scope.property.isAngular2Enabled) {\r\n                    if (angular2BootstrapTimeout) {\r\n                        clearInterval(angular2BootstrapTimeout);\r\n                        angular2BootstrapTimeout = undefined;\r\n                    }\r\n                    angular2BootstrapTimeout = setInterval(function () {\r\n                        //  Angular2 app is ready to be bootstrapped\r\n                        if (window.SmartAngular2) {\r\n                            window.SmartAngular2.bootstrap();\r\n                            clearInterval(angular2BootstrapTimeout);\r\n                        }\r\n                    }, 250);\r\n                }\r\n                else {\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    //angular.module('SMART2').directive('smartSectionPreview', ['$compile', '$translate', function ($compile, $translate) {\r\n    //    return {\r\n    //        restrict: 'AE',            \r\n    //        scope: false,\r\n    //        link: function (scope, element, attrs) {\r\n    //            var html = \"\";\r\n    //            var config = scope.$parent.config;\r\n    //            var model = scope.$parent.model;\r\n                \r\n\r\n    //            function getObjectValue(field, model, dataKey)\r\n    //            {\r\n    //                if (field.type)\r\n    //                {\r\n    //                    switch (field.type)\r\n    //                    {\r\n    //                        case 'textfield':\r\n    //                            if (field.attributes.type)\r\n    //                            {\r\n    //                                if (field.attributes.type == 'autocomplete') {\r\n    //                                    var obj = eval(\"model.\" + field.data);\r\n    //                                    if (obj)\r\n    //                                    {\r\n    //                                        if (field.attributes.displayformat.indexOf('-') > -1)\r\n    //                                        {\r\n    //                                            var splittedDisplayFormat = field.attributes.displayformat.split('-');\r\n    //                                            var result = \"\";\r\n    //                                            for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                                result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                                if (i < splittedDisplayFormat.length - 1)\r\n    //                                                    result += '--';\r\n    //                                            }\r\n    //                                            return (result ? result : '--');\r\n    //                                        }\r\n    //                                        var tVal = eval(\"obj.\" + field.attributes.displayformat.replace('{', '').replace('}', ''));\r\n    //                                        return (tVal ? tVal : '--');\r\n    //                                    }\r\n    //                                    return '--'; //eval(\"model.\" + field.data + \".\" + field.attributes.displayformat.replace('{', '').replace('}', ''));\r\n    //                                }\r\n    //                                else if (field.attributes.type == 'date') {\r\n    //                                    return getFormatedDate( eval(\"model.\" + field.data ), field.attributes.format);\r\n    //                                }\r\n    //                            }\r\n    //                            var tVal = eval(\"model.\" + field.data);\r\n    //                            return (tVal ? tVal : '');\r\n    //                            break;\r\n    //                        case 'dropdown':\r\n    //                            var obj = eval(\"model.\" + field.data);\r\n    //                            if (obj) {\r\n    //                                if (field.attributes.datakey.indexOf('-') > -1) {\r\n    //                                    var splittedDisplayFormat = field.attributes.datakey.split('-');\r\n    //                                    var result = \"\";\r\n    //                                    for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                        result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                        if (i < splittedDisplayFormat.length - 1)\r\n    //                                            result += '--';\r\n    //                                    }\r\n    //                                    return result;\r\n    //                                }\r\n    //                                var tVal = eval(\"obj.\" + field.attributes.datakey.replace('{', '').replace('}', ''));\r\n    //                                return (tVal ? tVal : '--');\r\n    //                            }\r\n    //                            return '--';\r\n    //                            break;\r\n    //                        case 'subsection':\r\n    //                            var obj = eval(\"model.\" + field.data);\r\n    //                            if (obj) {\r\n    //                                if (dataKey) {\r\n    //                                    if (dataKey.indexOf('-') > -1) {\r\n    //                                        var splittedDisplayFormat = dataKey.split('-');\r\n    //                                        var result = \"\";\r\n    //                                        for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                            result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                            if (i < splittedDisplayFormat.length - 1)\r\n    //                                                result += '--';\r\n    //                                        }\r\n    //                                        return result;\r\n    //                                    }\r\n    //                                    var tVal = eval(\"obj.\" + dataKey.replace('{', '').replace('}', ''));\r\n    //                                    return (tVal ? tVal : '--');\r\n    //                                }\r\n    //                            }\r\n    //                            return '--';\r\n    //                            break;\r\n    //                        default:\r\n    //                            return eval(\"model.\" + field.data)\r\n    //                            break;\r\n                                \r\n    //                    }\r\n    //                }\r\n    //                return eval(\"model.\" + field.data)\r\n    //            }\r\n\r\n\r\n    //            function getFormatedDate(dateObj, dateFormate) {\r\n    //                dateFormate = dateFormate.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n    //               return moment(dateObj).format(dateFormate);\r\n    //                //var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n    //                // tmpModel = tmpModel.split('+');\r\n    //                // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n    //                //return moment(tmpModel).format(dateFormate);\r\n    //            }\r\n    //            function GetFieldLabel(field, model)\r\n    //            {\r\n                   \r\n    //                return $translate.instant(field.label);\r\n    //            }\r\n\r\n    //            for (var i = 0; i < config.rows.length; i++)\r\n    //            {\r\n                   \r\n    //                html+= \"<div class=\\\"row\\\" > <div class=\\\"col s12\\\" >\";\r\n    //                var row = config.rows[i];\r\n    //                for (var j = 0; j < row.properties.length; j++)\r\n    //                {\r\n    //                    Textid++;\r\n    //                    var field = row.properties[j];\r\n    //                    if (field.isVisible && !field.isHidden) {\r\n    //                        if (field.type) {\r\n    //                            if (field.type == 'subsection')\r\n    //                            {\r\n    //                                if (field.attributes) {\r\n    //                                    if (field.attributes.previewData) {\r\n    //                                        for (var x = 0; x < field.attributes.previewData.length; x++) {\r\n    //                                            Textid++;\r\n    //                                            var previewField = field.attributes.previewData[x];\r\n    //                                            html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                           \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model, previewField.data) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                           \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(previewField, model) + \"</label></div></div>\";\r\n    //                                        }\r\n    //                                    }\r\n    //                                }\r\n    //                            }\r\n    //                            else\r\n    //                            {\r\n    //                                html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                               \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                               \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(field, model) + \"</label></div></div>\";\r\n    //                            }\r\n    //                        } else {\r\n    //                            html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(field, model) + \"</label></div></div>\";\r\n    //                        }\r\n    //                    }\r\n    //                    }\r\n    //                    html+=\"</div></div>\";\r\n\r\n\r\n    //            }\r\n\r\n\r\n\r\n    //            element.html(html);              \r\n    //            //$compile(element.contents())(scope);\r\n                \r\n    //        }\r\n    //    };\r\n    //}]);\r\n\r\n\r\n    //angular.module('SMART2').directive('smartFieldPreview', ['$compile', '$translate', function ($compile, $translate) {\r\n    //    return {\r\n    //        restrict: 'AE',\r\n    //        scope: false,\r\n    //        link: function (scope, element, attrs) {\r\n    //            var config = scope.config;\r\n    //            var localScope = scope;\r\n\r\n    //            if (config.attributes) {\r\n    //                var unbinedWatcher = scope.$watch(config.attributes.previewWatch, function (val) {\r\n    //                    if (val) {\r\n    //                        if (config.isVisible) {\r\n    //                            var obj = localScope;\r\n    //                            var html = \"\";\r\n    //                            var fields = config.attributes.previewData;\r\n    //                            if (fields) {\r\n    //                                for (var x = 0; x < fields.length; x++) {\r\n    //                                    Textid++;\r\n    //                                    var previewField = fields[x];\r\n    //                                    var lbl = $translate.instant(previewField.label);\r\n    //                                    var val = eval('obj.$parent.' + previewField.data);\r\n    //                                    if (!val) {\r\n    //                                        val = '--';\r\n    //                                    }\r\n    //                                    html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                   \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + val + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                   \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + lbl + \"</label></div></div>\";\r\n    //                                }\r\n    //                                //Textid++;\r\n    //                                //html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                //\"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + val + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                //\"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + scope.$parent.label + \"</label></div></div>\";\r\n\r\n    //                                element.html(html);\r\n    //                            }\r\n    //                        }\r\n    //                        unbinedWatcher();\r\n    //                    }\r\n    //                });\r\n    //            }\r\n    //        }\r\n\r\n    //    };\r\n    //}]);\r\n\r\n})();    \n  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Select\r\n   * @description This directive is useful for creating a select ui element.\r\n   * \r\n   * @attr {String} label\r\n   *    Label to be displayed for identification of this ui element\r\n   * @attr {Array} options\r\n   *    Number of options to be created\r\n   * @attr {Var} ng-model\r\n   *    Default selected option. Please refer example for more details.\r\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\r\n   * @attr {String} datakey\r\n   *    ng-model variable will be updated on the basis of this property. datakey will be used to display an option when displaykey is not set.\r\n   * @attr {String} displaykey\r\n   *    A property of an option to be used to display an option\r\n   * @attr {Boolean} disable\r\n   *    If set to true, none of the options can be selected\r\n   * @attr {Boolean} focus \r\n   *    If set to true, this ui element will be focused\r\n   * @attr {Boolean} validate\r\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n   * @attr {Array} rules \r\n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n   * @attr {String} error-message \r\n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n   * @attr {Boolean} is-mandatory \r\n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n   * @attr {Boolean} is-visible \r\n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-change\r\n   *    Callback function when option is changed\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"currency\": { \"code\": \"€\", \"name\": \"EUR\" }\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"Currency\",\r\n                                        \"type\": \"dropdown\",      //  select will also work\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"currency\",\r\n                                        \"colspan\": 1,\r\n                                        \"onChange\": \"onChange\",  //  controller function\r\n                                        \"attributes\": {\r\n                                            \"options\": [{\r\n                                                \"code\": \"$\",\r\n                                                \"name\": \"USD\"\r\n                                            }, {\r\n                                                \"code\": \"€\",\r\n                                                \"name\": \"EUR\"\r\n                                            }],\r\n                                            \"datakey\": \"name\"\r\n                                        },\r\n                                        \"rules\": [\r\n                                            { \r\n                                                \"rule\": \"this.title == \\\"Option 2\\\"\", \r\n                                                \"error\": \"Invalid selection\" \r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example\r\n   Static:\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\"\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n\r\n   * @example\r\n   Select with disabled state:\r\n   <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" disable=\"true\"></smart-radio> \r\n\r\n   * @example\r\n   Select with ng-model as 'String' (In following example, when an option is selected, ng-model would be either '$' or '€'):\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\"\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = \"$\";\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"code\" displaykey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n\r\n   * @example\r\n   Select with disabled option:\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\",\r\n            \"disable\": true\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var selectId = 0;\r\n    angular.module('SMART2').directive('smartSelect', ['$timeout', '$window', '$translate', 'ScrollTo', 'RuleEngine','smartSelectService',\r\n         (typeof isDirectiveV2enabled !== 'undefined' ? (isDirectiveV2enabled() == true ? smartSelectFunc2 : smartSelectFunc1) : smartSelectFunc1)\r\n    ]);\r\n\r\n    function smartSelectFunc1($timeout, $window, $translate, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModelCopy: '=?ngModel',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                disable: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                displaykey: '@',\r\n                removable: '@',\r\n                preview: '@',\r\n                customoption: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                customMessage: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                //debugger;\r\n                var options, isNgModelWatchAdded = false;\r\n                var onNgModel = function () { };\r\n                scope.selectOptions = [];\r\n                var typeOfNgModel;\r\n\r\n                var isNgModelFunction = typeof scope.ngModelCopy == 'function';\r\n\r\n                // create unique id\r\n                selectId = selectId + 1;\r\n                scope.dropDownId = \"dropdown-\" + selectId;\r\n\r\n                // key to be used to bind options\r\n                scope.dataKey = scope.datakey ? scope.datakey : 'title';\r\n                scope.displayKey = scope.displaykey ? scope.displaykey : scope.dataKey;\r\n\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                if (isNgModelFunction) {\r\n                    try {\r\n                        ngModelCtrl.$render = function () {\r\n                            scope.ngModel = ngModelCtrl.$modelValue;\r\n                            scope.selectedOption = scope.ngModel;\r\n                        };\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                var updateView = function () {\r\n                    if (isNgModelFunction) {\r\n                        try {\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\r\n                /*\r\n                 * Check if new option is added\r\n                 */\r\n                //scope.customOption = \r\n                scope.labelVal = \"\";\r\n                scope.customOptionReset = false;\r\n                var onOptions = scope.$watch('options', function (newOptions) {\r\n                    if (!newOptions) {\r\n                        return;\r\n                    }\r\n                    var optLen = newOptions.length;\r\n                    if (newOptions && optLen > 0) {\r\n                        //if (scope.label && newOptions[0][scope.dataKey] != scope.label) {\r\n                        var selLabel;\r\n                        if (scope.label) {\r\n                            selLabel = scope.label;\r\n                        } else {\r\n                            selLabel = $translate.instant('chooseOptionMsg');\r\n                        }\r\n                        var isDisabledOpt = true;\r\n                        if (scope.customoption) {\r\n                            selLabel = scope.customoption;\r\n                            isDisabledOpt = false;\r\n                            scope.customOptionReset = true;\r\n                        }\r\n                        if (scope.dataKey === scope.displayKey) {\r\n                            options = [{ title: selLabel, disable: isDisabledOpt, id: 'fakeOptionId' }].concat(newOptions);\r\n                            options[0][scope.displayKey] = options[0].title;\r\n                        }\r\n                        else {\r\n                            var firstOption = { disable: isDisabledOpt, id: 'fakeOptionId' };\r\n                            firstOption[scope.dataKey] = selLabel;\r\n                            firstOption[scope.displayKey] = selLabel;\r\n                            options = [firstOption].concat(newOptions)\r\n                        }\r\n\r\n                        //if (scope.$eval(scope.isMandatory)) {\r\n                        //    options = newOptions;\r\n                        //}\r\n                        //else {\r\n\r\n                        //    options = [{ title: selLabel, disable: false, id: 'fakeOptionId' }].concat(newOptions);\r\n                        //    options[0][scope.displayKey] = options[0].title;\r\n                        //}\r\n                        //}\r\n                        //else {\r\n                        //    options = newOptions;\r\n                        //}\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n\r\n                    var optionGroups = [],\r\n                        oldOptLen = options.length;\r\n\r\n                    for (var i = 0; i < oldOptLen; i++) {\r\n                        if (options[i].hasOwnProperty('groupName') && optionGroups.indexOf(options[i].groupName) == -1) {\r\n                            optionGroups.push(options[i].groupName);\r\n                        }\r\n                    }\r\n\r\n                    //if (optionGroups.length > 0) {\r\n                    //    options.splice(0, 1);\r\n                    //}\r\n\r\n                    scope.optionGroups = angular.copy(optionGroups);\r\n\r\n                    scope.selectOptions = options;\r\n\r\n                    //if (!scope.selectedOption) {\r\n                    //    scope.selectedOption = options[0];\r\n                    //}\r\n\r\n                    //try {\r\n                    //    scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                    //}\r\n                    //catch (e) { }\r\n\r\n                    if (!isNgModelWatchAdded) {\r\n                        onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                            if (angular.isUndefined(typeOfNgModel) && (newVal !== '' && newVal != undefined && newVal != null)) {\r\n                                typeOfNgModel = typeof newVal;\r\n                            }\r\n                            var newValueCopy;\r\n\r\n                            if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                for (var i = 0; i < oldOptLen; i++) {\r\n                                    if (newVal == options[i][scope.dataKey]) {\r\n                                        newValueCopy = options[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                newValueCopy = newVal;\r\n                            }\r\n                            scope.selectedOption = angular.copy(newValueCopy);\r\n\r\n                            try {\r\n                                if (!scope.selectedOption) {\r\n                                    scope.selectedOption = angular.copy(options[0]);\r\n                                } else if (!scope.selectedOption[scope.displayKey]) {\r\n                                    scope.selectedOption = angular.copy(options[0]);\r\n                                }\r\n                                scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                                if (options[0] != scope.selectedOption[scope.dataKey]) {\r\n                                    scope.labelVal = scope.selectedOption[scope.dataKey];\r\n                                    if (scope.customoption && scope.customoption != scope.selectedOption[scope.dataKey]) {\r\n                                        scope.customOptionReset = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n\r\n                            var tOut = setTimeout(function () {\r\n                                var el = angular.element(\"#\" + scope.dropDownId);\r\n                                el.material_select();\r\n                                el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                    if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function () {\r\n                                        var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey]== scope.ngModelCopy[scope.dataKey];\r\n                                        }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                        }\r\n                                      }, 0);\r\n                                   }\r\n                                });\r\n                                //el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                //    var _this = $(this);\r\n                                //  scope.ngChange(_this.val());\r\n                                //});\r\n                                clearTimeout(tOut);\r\n                                tOut = null;\r\n                            });\r\n                            // selectFixdd();\r\n\r\n                        }, true);\r\n\r\n                        isNgModelWatchAdded = true;\r\n                    }\r\n                    else { //If options are changes dynamically then again .material_select() will fired to update latest options in materialize select.\r\n                        var selectTout = setTimeout(function () {\r\n                            angular.element(\"#\" + scope.dropDownId).material_select();\r\n                            element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function () {\r\n                                        var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                        listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                        }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                        }\r\n                                    }, 0);\r\n                                            }\r\n                            });\r\n                            clearTimeout(selectTout);\r\n                            selectTout = null;\r\n                        });\r\n                    }\r\n                    var disableTOut = setTimeout(function () {\r\n                        var el = angular.element(\"#\" + scope.dropDownId);\r\n                        el.children().eq(0).attr(\"disabled\", \"disabled\");\r\n                        el.material_select();\r\n                        el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                setTimeout(function () {\r\n                                    var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                    $dropdownDiv.scrollTop(0);\r\n                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                        return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                    }))).offset();\r\n                                    if (listElOffset) {\r\n                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                    }\r\n                                }, 0);\r\n                            }\r\n                        });\r\n                        // el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                        //    var _this = $(this);\r\n                        //    scope.ngChange(_this.val());\r\n                        //});\r\n                        clearTimeout(disableTOut);\r\n                        disableTOut = null;\r\n                    });\r\n\r\n                    // selectFixdd();\r\n\r\n                    /*   function selectFixdd() {\r\n                           setTimeout(function () {\r\n                               if (scope.$eval(attrs.fixed)) {\r\n                                   $(element).find('input.select-dropdown').bind('focus', function (e) {\r\n                                       (function ($t) {\r\n                                           setTimeout(function () {\r\n                                               $(element).find('.dropdown-content').addClass('fixeddd');\r\n                                               var topOffset = $(e.target).offset().top - $(window).scrollTop();\r\n                                               var ddCnt = $t.next('.dropdown-content');\r\n                                               ddCnt.css({\r\n                                                   'left': $(e.target).offset().left + 'px', 'top': topOffset + 'px'\r\n                                               });\r\n                                               ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n\r\n                                               var ddHgt = ddCnt.css('height'),\r\n                                                   winHgt = angular.element(window).height();\r\n                                               if ((parseInt(ddHgt) + topOffset) > winHgt) {\r\n                                                   var diffHgt = (parseInt(ddHgt) + topOffset) - winHgt;\r\n                                                   ddCnt.css('top', (topOffset - diffHgt - 15) + 'px');\r\n                                               }\r\n\r\n                                               angular.element($window).on(\"scroll.smartFixedSmartSelect\", function () {\r\n                                                   if (ddCnt.hasClass('active'))\r\n                                                       ddCnt.hide();\r\n                                               });\r\n                                           });\r\n                                       })($(this));\r\n                                   });\r\n                               }\r\n                           }, 500);\r\n                       }\r\n                       */\r\n                }, true);\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n\r\n                /*\r\n                 * Watch needs to be added on disable since element needs to be updated\r\n                 */\r\n                var sOption = scope.label;\r\n                var onDisable = scope.$watch('disable', function (newVal) {\r\n                    var isDisableTout = setTimeout(function () {\r\n                        var el = angular.element(\"#\" + scope.dropDownId);\r\n                        el.material_select();\r\n                        element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function() {\r\n                                        var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey]== scope.ngModelCopy[scope.dataKey];\r\n                                    }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top -$dropdownDiv.offset().top);\r\n                                            }\r\n                                            }, 0);\r\n                            }\r\n                        });\r\n                        el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                            /*var _this = $(this);\r\n                            if (scope.ngModelCopy != _this.val()) {\r\n                                scope.ngModelCopy = {\r\n                                    title: _this.val()\r\n                                };\r\n                                scope.ngModelCopy[scope.dataKey] = _this.val();\r\n                            }*/\r\n                            scope.validateRules()\r\n                        });\r\n                        clearTimeout(isDisableTout);\r\n                        isDisableTout = null;\r\n                    });\r\n                });\r\n\r\n\r\n\r\n                /*\r\n                 * Focus field when focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate field whene validate is set to true\r\n                 */\r\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    //debugger;\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    if (scope.$eval(scope.isMandatory) && scope.label) {\r\n                        if (!scope.ngModelCopy || scope.ngModelCopy.name === scope.label || (scope.customoption && scope.ngModelCopy.name === scope.customoption) || scope.ngModelCopy[scope.dataKey] === scope.label) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = scope.customMessage ? scope.customMessage : $translate.instant(\"selectOptionErrMsg\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\r\n                            ruleLength = rules.length;\r\n\r\n                        for (var i = 0; i < ruleLength; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                if (!isFoundInvalid) {\r\n                                    RuleEngine.isValid(rules[i], function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                };\r\n                var ch = false;\r\n                scope.ngChange = function (selectedOption, manual) {\r\n                    if (!manual) ch = true;\r\n                    sOption = selectedOption;\r\n                    if (selectedOption == scope.customoption) {\r\n                        scope.customOptionReset = true;\r\n                        //options[0][scope.dataKey] = scope.label;\r\n                    }\r\n                    else {\r\n                        scope.customOptionReset = false;\r\n                    }\r\n\r\n                    var tmpSelectedOption;\r\n                    if (!scope.$eval(scope.isMandatory) && selectedOption == options[0][scope.displayKey] && scope.optionGroups.length == 0) {\r\n                        tmpSelectedOption = '';\r\n                    }\r\n                    else {\r\n                        var optLen = options.length;\r\n                        for (var i = 0; i < optLen; i++) {\r\n                            if (options[i][scope.dataKey] == selectedOption) {\r\n                                tmpSelectedOption = options[i];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isNgModelFunction) {\r\n                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                            scope.ngModel = tmpSelectedOption[scope.dataKey];\r\n                        }\r\n                        else {\r\n                            scope.ngModel = tmpSelectedOption;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                            if (!scope.$eval(scope.isMandatory) && (selectedOption == options[0][scope.displayKey] || selectedOption == undefined || selectedOption == 'fakeOptionId')) {\r\n                                scope.ngModelCopy = '';\r\n                            }\r\n                            else {\r\n                                scope.ngModelCopy = tmpSelectedOption[scope.dataKey];\r\n                            }\r\n                        }\r\n                        else {\r\n                            scope.ngModelCopy = tmpSelectedOption;\r\n                        }\r\n                    }\r\n                    scope.labelVal = \"\";\r\n                    if (selectedOption == scope.label && selectedOption == options[0][scope.displayKey]) {\r\n                        scope.labelVal = selectedOption;\r\n                    }\r\n                    updateView();\r\n                    scope.selectedOption = tmpSelectedOption == '' ? options[0] : angular.copy(tmpSelectedOption);\r\n                    scope.validateRules();\r\n                    var clrTout = $timeout(function () {\r\n                        scope.onChange();\r\n                        $timeout.cancel(clrTout);\r\n                        clrTout = null;\r\n                    });\r\n                };\r\n\r\n\r\n                scope.$on('$destroy', function () {\r\n                    angular.element(\"#\" + scope.dropDownId).material_select('destroy');\r\n                    onOptions();\r\n                    onDisable();\r\n                    onNgModel();\r\n                    onFocus();\r\n                    onValidate();\r\n                    angular.element($window).off(\"scroll.smartFixedSmartSelect\");\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSelect/smartSelectTemplate.html'\r\n        };\r\n    }\r\n\r\n    \r\n    function smartSelectFunc2($timeout, $window, $translate, ScrollTo, RuleEngine, smartSelectService) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModelCopy: '=?ngModel',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                disable: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                displaykey: '@',\r\n                removable: '@',\r\n                preview: '@',\r\n                customoption: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                customMessage: '@'\r\n            },\r\n            compile: function() {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        $(document).ready(function () {// To avoid flicker and timeout\r\n                            // Declare all the vars at the top\r\n                            var options = [],\r\n                                isNgModelWatchAdded = false,\r\n                                 onNgModel = function () { },\r\n                                 typeOfNgModel,\r\n                                isNgModelFunction = typeof scope.ngModelCopy == 'function';\r\n\r\n                            scope.selectOptions = [];\r\n                            // create unique id\r\n                            selectId = selectId + 1;\r\n                            scope.dropDownId = \"dropdown_\" + selectId;\r\n                            // key to be used to bind options\r\n                            scope.dataKey = scope.datakey ? scope.datakey : 'title';\r\n                            scope.displayKey = scope.displaykey ? scope.displaykey : scope.dataKey;\r\n\r\n                            /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                            if (isNgModelFunction) {\r\n                                try {\r\n                                    ngModelCtrl.$render = function () {\r\n                                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                        scope.selectedOption = scope.ngModel;\r\n                                    };\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n                            var updateView = function () {\r\n                                if (isNgModelFunction) {\r\n                                    try {\r\n                                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                    }\r\n                                    catch (e) { }\r\n                                }\r\n                            };\r\n                            /*\r\n                             * Check if new option is added\r\n                             */\r\n                            scope.labelVal = \"\";\r\n                            scope.customOptionReset = false;\r\n\r\n                            //To be triggered if option binding is delayed\r\n                            function watchOptions(a_options) {\r\n                                var optLen = a_options.length;\r\n                                if (a_options && optLen > 0) {\r\n                                    var selLabel,\r\n                                        isDisabledOpt = true;\r\n                                    if (scope.label) {\r\n                                        selLabel = scope.label;\r\n                                    } else {\r\n                                        selLabel = $translate.instant('chooseOptionMsg');\r\n                                    }\r\n\r\n                                    if (scope.customoption) {\r\n                                        selLabel = scope.customoption;\r\n                                        isDisabledOpt = false;\r\n                                        scope.customOptionReset = true;\r\n                                    }\r\n                                    if (scope.dataKey === scope.displayKey) {\r\n                                        options = [{ title: selLabel, disable: isDisabledOpt, id: 'fakeOptionId' }].concat(a_options);\r\n                                        options[0][scope.displayKey] = options[0].title;\r\n                                    }\r\n                                    else {\r\n                                        var firstOption = { disable: isDisabledOpt, id: 'fakeOptionId' };\r\n                                        firstOption[scope.dataKey] = selLabel;\r\n                                        firstOption[scope.displayKey] = selLabel;\r\n                                        options = [firstOption].concat(a_options)\r\n                                    }\r\n                                    scope.selectOptions = options;\r\n                                    var optionGroups = [],\r\n                                        len = options.length;\r\n                                    for (var i = 0; i < len; i++) {\r\n                                        var tmp = options[i];\r\n                                        if (tmp.hasOwnProperty('groupName') && optionGroups.indexOf(tmp.groupName) == -1) {\r\n                                            optionGroups.push(tmp.groupName);\r\n                                        }\r\n                                    }\r\n                                    scope.optionGroups = angular.copy(optionGroups);\r\n                                    watchModel();\r\n                                    smartSelectService.buildOptionsList(scope.optionGroups, scope.selectOptions,scope,element);\r\n                                } else {\r\n                                    return;\r\n                                };\r\n\r\n                            }\r\n\r\n                            // This function watches the selected value from the \r\n                            // dropdown and triggers on selection change\r\n                            function watchModel() {\r\n                                if (!isNgModelWatchAdded) {\r\n                                    onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                                        if (angular.isUndefined(typeOfNgModel) && (newVal !== '' && newVal != undefined && newVal != null)) {\r\n                                            typeOfNgModel = typeof newVal;\r\n                                        }\r\n                                        var newValueCopy;\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            var len = options.length;\r\n                                            for (var i = 0; i < len; i++) {\r\n                                                var tmp = options[i];\r\n                                                if (newVal == tmp[scope.dataKey]) {\r\n                                                    newValueCopy = tmp;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if (typeOfNgModel == 'object') {\r\n                                            scope.ngModel = newValueCopy = newVal;\r\n                                        }\r\n                                        else {\r\n                                            newValueCopy = newVal;\r\n                                        }\r\n                                        scope.selectedOption = angular.copy(newValueCopy);\r\n\r\n                                        try {\r\n                                            if (!scope.selectedOption) {\r\n                                                scope.selectedOption = angular.copy(options[0]);\r\n                                            } else if (!scope.selectedOption[scope.displayKey]) {\r\n                                                scope.selectedOption = angular.copy(options[0]);\r\n                                            }\r\n                                            scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                                            if (options[0] != scope.selectedOption[scope.dataKey]) {\r\n                                                scope.labelVal = scope.selectedOption[scope.dataKey];\r\n                                                if (scope.customoption && scope.customoption != scope.selectedOption[scope.dataKey]) {\r\n                                                    scope.customOptionReset = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        catch (e) { }\r\n                                        smartSelectService.buildOptionsList(scope.optionGroups, scope.selectOptions, scope, element);\r\n                                        smartSelectService.updateLabelTemplate(scope, element);// added for update the label\r\n                                        angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                        element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                                setTimeout(function () {\r\n                                                    var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                                        listElOffset;\r\n                                                    $dropdownDiv.scrollTop(0);\r\n                                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                        return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                                    }))).offset();\r\n                                                    if (listElOffset) {\r\n                                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                    }\r\n                                                }, 0);\r\n                                            }\r\n                                        });\r\n                                        //selectFixdd();\r\n                                        element.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        }); \r\n                                    });\r\n                                    isNgModelWatchAdded = true;\r\n\r\n                                } else { //If options are changes dynamically then again .material_select() will fired to update latest options in materialize select.\r\n                                   var clrTout = setTimeout(function () {\r\n                                       angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                       element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                           if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                            setTimeout(function () {\r\n                                                var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                        listElOffset;\r\n                                                $dropdownDiv.scrollTop(0);\r\n                                                listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                    return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                                }))).offset();\r\n                                                if (listElOffset) {\r\n                                                    $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                }\r\n                                            }, 0);\r\n                                               }\r\n                                        });\r\n                                        element.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        });\r\n                                        clearTimeout(clrTout);\r\n                                        clrTout = null;\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            //watchOptions(scope.options); // onload data binding\r\n                            //To update value incase of late binding\r\n                            var collectionWatch = scope.$watchCollection('options', function (newValue) {\r\n                                if (newValue) {\r\n                                    watchOptions(newValue);\r\n                                }\r\n                            });\r\n\r\n                            /*function selectFixdd() {\r\n                                if (attrs.fixed) {\r\n                                    $(element).find('input.select-dropdown').bind('focus', function (e) {\r\n                                        (function ($t) {\r\n                                            var drpContent = $(element).find('.dropdown-content').addClass('fixeddd');\r\n                                            var topOffset = $(e.target).offset().top - $(window).scrollTop();\r\n                                            var ddCnt = $t.next('.dropdown-content');\r\n                                            ddCnt.css({\r\n                                                'left': $(e.target).offset().left + 'px', 'top': topOffset + 'px'\r\n                                            });\r\n                                            ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n\r\n                                            var ddHgt = ddCnt.css('height'),\r\n                                                winHgt = angular.element(window).height();\r\n                                            if ((parseInt(ddHgt) + topOffset) > winHgt) {\r\n                                                var diffHgt = (parseInt(ddHgt) + topOffset) - winHgt;\r\n                                                ddCnt.css('top', (topOffset - diffHgt - 15) + 'px');\r\n                                            }\r\n\r\n                                            angular.element($window).on(\"scroll.smartFixedSmartSelect\", function () {\r\n                                                if (ddCnt.hasClass('active'))\r\n                                                    ddCnt.hide();\r\n                                            });\r\n                                            drpContent = null;\r\n                                        })($(this));\r\n                                    });\r\n                                }\r\n                            }\r\n                            */\r\n                            scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                            /*\r\n                             * Watch needs to be added on disable since element needs to be updated\r\n                             */\r\n                            var sOption = scope.label;\r\n                            // Use watchgroup to watch all\r\n                            //Below declerations are to make watchGroup work on models\r\n                            scope.disable = (scope.disable) ? scope.disable : 1;\r\n                            scope.validate = (scope.validate) ? scope.validate : 2;\r\n                            var watchGrp = scope.$watchGroup(['disable', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                                if (newVal[0] !== oldVal[0]) {\r\n                                    var el = angular.element(\"#\" + scope.dropDownId);\r\n                                    if ((scope.disable === true && scope.disable !== 1) || (jQuery.type(scope.disable) === \"string\" && (scope.disable === \"true\"))) {\r\n                                        el.prop('disabled', 'disabled');\r\n                                        el.prop(\"readonly\", true);\r\n                                        el.attr('tabindex', -1);\r\n                                        el.material_select();\r\n                                        el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                                setTimeout(function () {\r\n                                                    var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                                    $dropdownDiv.scrollTop(0);\r\n                                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                        return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                                    }))).offset();\r\n                                                    if (listElOffset) {\r\n                                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                    }\r\n                                                }, 0);\r\n                                            }\r\n                                        });\r\n                                        el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        });\r\n                                    }else\r\n                                    {\r\n                                        el.prop('disabled', false);\r\n                                        el.prop(\"readonly\", false);\r\n                                        el.removeAttr('tabindex');\r\n                                    }\r\n                                    angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                    element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                        if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                        setTimeout(function () {\r\n                                            var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                                listElOffset;\r\n                                            $dropdownDiv.scrollTop(0);\r\n                                            listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                return obj[scope.dataKey] == scope.ngModelCopy[scope.dataKey];\r\n                                            }))).offset();\r\n                                            if (listElOffset) {\r\n                                                $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                            }\r\n                                        }, 0);\r\n                                    }\r\n                                    });\r\n                                }\r\n                                if (newVal[1] !== oldVal[1] || newVal[2] !== oldVal[2]) {\r\n                                    scope.validateRules();\r\n                                }\r\n                                if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                                    if (scope.showinfo || scope.showwarning) {\r\n                                        element.addClass('field-has-icon');\r\n                                    }\r\n                                    else {\r\n                                        element.removeClass('field-has-icon');\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            var onFocus = scope.$watch('focus', function (newVal) {\r\n                                if (newVal) {\r\n                                    ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                                    scope.focus = false;\r\n                                    var clrMe = setTimeout(function () {\r\n                                        element.find('input').focus();\r\n                                        clearTimeout(clrMe);\r\n                                        clrMe = null;\r\n                                    }, 1000);\r\n                                }\r\n                            });\r\n\r\n                            /*\r\n                            * Validate rules\r\n                            */\r\n                            scope.validateRules = function () {\r\n                                scope.validate = false;\r\n                                scope.errorMessage = null;\r\n                                if (scope.$eval(scope.isMandatory) && scope.label && !scope.clienterror) {\r\n                                    if (!scope.ngModelCopy || scope.ngModelCopy.name === scope.label || (scope.customoption && scope.ngModelCopy.name === scope.customoption) || scope.ngModelCopy[scope.dataKey] === scope.label) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = scope.customMessage ? scope.customMessage : $translate.instant(\"selectOptionErrMsg\");\r\n                                        // return;\r\n                                    }\r\n                                }\r\n                                if (scope.clienterror) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                                }\r\n                                if (scope.rules && !scope.clienterror) {\r\n                                    var rules = scope.$eval(scope.rules);\r\n                                    var isFoundInvalid = false,\r\n                                        len = rules.length;\r\n\r\n                                    for (var i = 0; i < len; i++) {\r\n                                        var tmp = rules[i];\r\n                                        if (typeof tmp == 'object') {\r\n                                            if (eval((tmp.rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                                scope.validate = true;\r\n                                                scope.errorMessage = tmp.error;\r\n                                                break;\r\n                                            }\r\n                                        } else {\r\n                                            if (!isFoundInvalid) {\r\n                                                RuleEngine.isValid(tmp, function (e) {\r\n                                                    scope.validate = true;\r\n                                                    scope.errorMessage = e.errorData.error;\r\n                                                    isFoundInvalid = true;\r\n                                                });\r\n                                            }\r\n                                            else {\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                                var containerElm = element;\r\n                                var validateElm = $(element).find('#' + scope.dropDownId + '_validate');\r\n                                if (scope.validate == true && scope.errorMessage != null) {\r\n\r\n                                    if (!containerElm.hasClass('invalid')) {\r\n                                        containerElm.addClass('invalid');\r\n                                        \r\n                                    }\r\n\r\n                                    if (validateElm.length > 0) {\r\n                                        validateElm.html(scope.errorMessage);\r\n                                    }\r\n                                    else {\r\n                                        containerElm.append(smartSelectService.buildValidationTemplate(scope));\r\n                                        validateElm = $(element).find('#' + scope.dropDownId + '_validate');\r\n                                        validateElm.html(scope.errorMessage);\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    if (containerElm.hasClass('invalid')) {\r\n                                        containerElm.removeClass('invalid');\r\n                                    }\r\n\r\n                                    if (validateElm.length > 0) {\r\n                                        validateElm.remove();\r\n                                    }\r\n\r\n                                }\r\n                            };\r\n\r\n                            scope.hideShowField = function () {\r\n                                scope.isVisible = !scope.isVisible;\r\n                            };\r\n\r\n                            var onSelectChange = function (elm) {\r\n                                if (scope.selectOptions && scope.selectOptions.length>0) {\r\n                                    var selectedOption;\r\n                                    var selectedVal = elm.target.options[elm.target.options.selectedIndex].value;// elm.find(\":selected\").val();\r\n\r\n                                    selectedOption = selectedVal;\r\n\r\n                                    sOption = selectedOption;\r\n                                    if (selectedOption == scope.customoption) {\r\n                                        scope.customOptionReset = true;\r\n                                    }\r\n                                    else {\r\n                                        scope.customOptionReset = false;\r\n                                    }\r\n\r\n                                    var tmpSelectedOption;\r\n                                    if (!scope.$eval(scope.isMandatory) && selectedOption == options[0][scope.displayKey] && scope.optionGroups.length == 0) {\r\n                                        tmpSelectedOption = '';\r\n                                    }\r\n                                    else {\r\n                                        var len = options.length;\r\n                                        for (var i = 0; i < len; i++) {\r\n                                            if (typeof options[i][scope.dataKey] == 'string') {\r\n                                                if (options[i][scope.dataKey].replace(/&quot;/g, '\"') == selectedOption) {\r\n                                                    tmpSelectedOption = options[i];\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                if (options[i][scope.dataKey] == selectedOption) {\r\n                                                    tmpSelectedOption = options[i];\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (isNgModelFunction) {\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            scope.ngModel = tmpSelectedOption[scope.dataKey];\r\n                                        }\r\n                                        else {\r\n                                            scope.ngModel = tmpSelectedOption;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            if (!scope.$eval(scope.isMandatory) && (selectedOption == options[0][scope.displayKey] || selectedOption == undefined || selectedOption == 'fakeOptionId')) {\r\n                                                scope.ngModelCopy = '';\r\n                                            }\r\n                                            else {\r\n                                                scope.ngModelCopy = tmpSelectedOption[scope.dataKey];\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            scope.ngModelCopy = tmpSelectedOption;\r\n                                            scope.ngModel = scope.ngModelCopy;\r\n                                        }\r\n                                    }\r\n                                    scope.labelVal = \"\";\r\n                                    if (selectedOption == scope.label && selectedOption == options[0][scope.displayKey]) {\r\n                                        scope.labelVal = selectedOption;\r\n                                    }\r\n                                    updateView();                                    \r\n                                    $(element).find('#' + scope.dropDownId + '_label').html(scope.label);\r\n\r\n                                    scope.selectedOption = tmpSelectedOption == '' ? options[0] : angular.copy(tmpSelectedOption);\r\n                                    scope.validateRules();\r\n                                   var cancelTout =  $timeout(function () {\r\n                                        scope.$apply();\r\n                                        scope.onChange();\r\n                                        $timeout.cancel(cancelTout);\r\n                                        cancelTout = null;\r\n                                    });\r\n                                }\r\n                            };\r\n\r\n                            smartSelectService.buildTemplate(scope, element, onSelectChange);\r\n                            if (scope.clienterror) {\r\n                                scope.validateRules();\r\n                            }\r\n\r\n                            scope.$on('$destroy', function () {\r\n                                angular.element(\"#\" + scope.dropDownId).material_select('destroy');\r\n                                collectionWatch();\r\n                                watchGrp();\r\n                                angular.element($window).off(\"scroll.smartFixedSmartSelect\");\r\n                                $(element).find('input.select-dropdown').unbind('focus');\r\n                                $(element).find('input.select-dropdown').unbind('close');\r\n                            });\r\n                            setTimeout(function(){\r\n                             if(scope.label != '' && scope.label != undefined)\r\n                                 $(element).find('#' + scope.dropDownId + '_label').html(scope.label);\r\n                            },0)\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('SMART2').factory('smartSelectService', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', smartSelectServiceFunc])\r\n    function smartSelectServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile) {\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((scope.isMandatory!= undefined && scope.isMandatory=='false') && scope.isRemovable == true) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.dropDownId + '_opField');\r\n                return optionalField;\r\n            }\r\n            return '';\r\n        };\r\n        var buildSelectTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectOptionTemplate.html');\r\n            html = html.replace('{{id}}', scope.dropDownId);\r\n            return html;\r\n        };\r\n        var buildValidationTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectValidationTemplate.html');\r\n            html = html.replace('{{id}}', scope.dropDownId + '_validate');\r\n            return html;\r\n        };\r\n        var updateLabelTemplate = function (scope, element) {\r\n            var elmLabel = element.find('#' + scope.dropDownId + '_label');\r\n            if (scope.label != scope.labelVal) {\r\n                elmLabel.removeClass('ng-hide');\r\n            } else {\r\n                elmLabel.addClass('ng-hide');\r\n\r\n            }\r\n        };\r\n        var buildLabelTemplate = function (scope) {\r\n            if (scope.label && scope.label != scope.labelVal) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectLabelTemplate.html');\r\n                html = html.replace('{{id}}', scope.dropDownId + '_label');\r\n                html = html.replace('{{dropDownId}}', scope.dropDownId);\r\n                html = html.replace('{{label}}', scope.label);\r\n                html = html.replace('{{title}}', scope.label);\r\n                return html;\r\n            } else {\r\n                return '';\r\n            };\r\n        };\r\n        var buildInfoTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectInfoTemplate.html');;\r\n            //if (scope.showinfo || scope.showwarning) {\r\n                \r\n            //    html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectInfoTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n\r\n        var buildTemplate = function (scope,element, onChangeCallback) {\r\n            var container = element // $('<div/>', { id: scope.dropDownId + '_container' });\r\n            \r\n            var css = 'input-field';\r\n            if ((scope.isMandatory == 'false') && scope.isRemovable == true) {\r\n                css += ' optionalField line-height-manager';\r\n            }\r\n            if (scope.preview === true) {\r\n                css += ' selectPreview';\r\n            }\r\n            if (!scope.customoption) {\r\n                css += ' defaultSelected';\r\n            }\r\n            if (scope.validate === true && scope.errorMessage) {\r\n                css += ' invalid';\r\n            }\r\n            if (scope.showinfo || scope.showwarning){\r\n                css += ' field-has-icon'\r\n            }\r\n            if (scope.showinfo && scope.showwarning) {\r\n                css += ' field-has-two-icons'\r\n            }\r\n            \r\n            container.attr(\"id\", scope.dropDownId + '_container').addClass(css);\r\n\r\n            container.append(buildOptionalFieldTemplate(scope));\r\n            container.append(buildLabelTemplate(scope));\r\n            container.append(buildSelectTemplate(scope));\r\n            container.append(buildValidationTemplate(scope));\r\n            container.append($compile(buildInfoTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.append(container);\r\n            var elm = $(element).find('#' + scope.dropDownId);\r\n            elm.bind(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            var optionalField = $(element).find('#' + scope.dropDownId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0)\r\n            {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n            }\r\n\r\n            if (scope.disable === 'true' || scope.disable === true) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n            }\r\n\r\n        };\r\n\r\n        var buildOptionsList = function (OptionGroups, options,scope,element) {\r\n            var optHtml = '',\r\n                optionLength = options.length;\r\n            if (OptionGroups && OptionGroups.length > 0) {\r\n\r\n            }\r\n            else {\r\n                if (options && optionLength > 0 && scope.dataKey === scope.displayKey) {\r\n                    angular.forEach(options, function (option) {\r\n                        var selected = '';\r\n                        if (angular.equals(option, scope.selectedOption) || angular.equals(scope.ngModel, option) || angular.equals(scope.ngModelCopy, option) || angular.equals(option[scope.dataKey], scope.selectedOptionString)) {\r\n                            selected = ' selected=\"selected\"';\r\n                        }\r\n                        //if (option.name == scope.label) {\r\n                        //    $(element).find('#' + scope.dropDownId + '_label').html('');                            \r\n                        //}\r\n                        optHtml += '<option value=\"' + option[scope.dataKey] + '\"  ' + (option.disable ? 'disabled=\"disabled\"' : '') + ' ' + selected + '>' + option[scope.displayKey] + '</option>'\r\n                    });\r\n                } else if (options && optionLength > 0 && scope.dataKey !== scope.displayKey) {\r\n                    angular.forEach(options, function (option) {\r\n                        var selected = '';\r\n                        if (angular.equals(option, scope.selectedOption) || angular.equals(scope.ngModel, option) || angular.equals(scope.ngModelCopy, option) || angular.equals(option[scope.dataKey], scope.selectedOptionString)) {\r\n                            selected = ' selected=\"selected\"';\r\n                        }\r\n                        optHtml += '<option value=\"' + option[scope.dataKey] + '\"  ' + (option.disable ? 'disabled=\"disabled\"' : '') + ' ' + selected + '>' + option[scope.displayKey] + '</option>'\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (options[0][scope.datakey] == scope.label && options[0].disable && scope.datakey == 'title' && (!scope.selectedOption || options[0] == scope.selectedOption)) {\r\n                $(element).find('#' + scope.dropDownId + '_label').html('');\r\n            }\r\n\r\n            $(element).find('#' + scope.dropDownId).html(optHtml);\r\n        };\r\n\r\n        var service = {\r\n            buildOptionsList: buildOptionsList,\r\n            buildTemplate: buildTemplate,\r\n            buildValidationTemplate: buildValidationTemplate,\r\n            updateLabelTemplate: updateLabelTemplate\r\n        };\r\n        return service;\r\n    }\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('optionalField', ['$timeout', '$translate', function ($timeout, $translate) {\r\n        return {\r\n            restrict: 'A',\n            link: function (scope, element, attrs) {\r\n\n                $timeout(function () {\r\n                    if (attrs.isMandatory !== \"true\") {\r\n                        element.find(\"label\").append('<span class=\"optionalFieldTxt\">' + '(' + $translate.instant('textfieldOptionalLabel') + ')' + '</span>');\r\n                        element.addClass('optionalFieldInPopup');\r\n                    }\r\n\r\n                    if (element.hasClass('hierarchylinktxt')) {\r\n                        element.append('<span class=\"optionalFieldTxt\">' + '(' + $translate.instant('textfieldOptionalLabel') + ')' + '</span>');\r\n                    }\r\n\r\n                }, 500);\r\n            }\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').service('StickyElements',[ function () {\r\n\r\n\t\tvar stickyElementsObj = [];\r\n\r\n\t\tthis.get = function () {\r\n\t\t\tvar stickyElementsHeight = 0;\r\n\t\t\tif (stickyElementsObj.length > 0) {\r\n\t\t\t\tangular.forEach(stickyElementsObj, function (value, key) {\r\n\t\t\t\t\tstickyElementsHeight = stickyElementsHeight + value.height();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\theight: stickyElementsHeight,\r\n\t\t\t\tlistOfElements: stickyElementsObj\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tthis.set = function (obj) {\r\n\t\t\tstickyElementsObj = obj;\r\n\t\t}\r\n    }])\r\n\t.directive('stickyHeader', ['$window', 'StickyElements', function ($window, StickyElements) {\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\tscope: true,\r\n\t\t\tlink: function ($scope, $elem, $attrs) {\r\n\t\t\t\tvar $win = angular.element($window);\r\n\t\t\t\tvar elem = $elem[0];\r\n\r\n\t\t\t\t$scope.scrollType = $attrs.scrollType;\r\n\r\n\t\t\t\tif ($scope.scrollType === \"page\") {\r\n\t\t\t\t\t$win.bind('scroll', function (e) {\r\n\t\t\t\t\t\tif (elem.offsetParent !== null) {\r\n\t\t\t\t\t\t\tvar windowScrollTop = $win[0].scrollY || $win[0].pageYOffset;\r\n\t\t\t\t\t\t\tvar elScrollTop = $(elem).offset().top;\r\n\t\t\t\t\t\t\tvar elScrollTopOriginal = $(elem).offset().top;\r\n\t\t\t\t\t\t\tvar stickyElementHeight = StickyElements.get().height;\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.grid-fixed-container').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.grid-fixed-container').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.alert-bar--fixed-to-nav').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.alert-bar--fixed-to-nav').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.breadcrum-container').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.breadcrum-container').height();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar elemforStick = angular.element($attrs.stickyHeader);\r\n\t\t\t\t\t\t\tif (elemforStick && elemforStick.length > 0) {\r\n\t\t\t\t\t\t\t    stickyElementHeight = stickyElementHeight + elemforStick.height();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar theadHgt = $(elem).find('thead').height();\r\n\r\n\t\t\t\t\t\t\tvar tbodyHgt = $(elem).find('tbody').not('.dummyThead').height();\r\n\t\t\t\t\t\t\tvar $dummyThead = $(elem).find('.dummyThead');\r\n\r\n\t\t\t\t\t\t\tif (windowScrollTop + stickyElementHeight > elScrollTop && windowScrollTop + stickyElementHeight < (elScrollTop + tbodyHgt)) {\r\n\t\t\t\t\t\t\t\telScrollTopOriginal = elScrollTop;\r\n\t\t\t\t\t\t\t\tstickTableHeader(stickyElementHeight, $scope.scrollType);\r\n\t\t\t\t\t\t\t\tif (!$dummyThead.length)\r\n\t\t\t\t\t\t\t\t\t$(\"<tbody class='dummyThead'><tr><td style='height:\" + theadHgt + \"px'></td></tr></tbody>\").insertAfter($(elem).find('thead'));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tangular.element(elem.querySelectorAll('thead')).css({ 'display': '', 'top': '', 'position': '', 'background': '' });\r\n\t\t\t\t\t\t\t\tif ($dummyThead.length)\r\n\t\t\t\t\t\t\t\t\t$dummyThead.remove();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction stickTableHeader(top, scrollType) {\r\n\t\t\t\t\tvar topVal = top;\r\n\t\t\t\t\t// reset display styles so column widths are correct when measured below\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\r\n\r\n\t\t\t\t\t// set widths of columns\r\n\t\t\t\t\tangular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\r\n\t\t\t\t\t     var tdSel = 'tbody tr' + (!$attrs.columnMap ? '' : $attrs.columnMap) + ':first-child td:nth-child(' + (i + 1) + ')',\r\n                           tdElems = elem.querySelector(tdSel);\r\n\r\n\t\t\t\t\t\tvar columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\r\n\r\n\t\t\t\t\t\tif (tdElems) {\r\n\t\t\t\t\t\t\ttdElems.style.width = columnWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (thElem) {\r\n\t\t\t\t\t\t\tthElem.style.width = columnWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('thead')).css({ 'top': topVal, 'position': 'fixed', 'background': '#ffffff', 'z-index': '2' });\r\n\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('tbody')).css({\r\n\t\t\t\t\t\t'height': 'inherit',\r\n\t\t\t\t\t\t'overflow': 'hidden'\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();\n  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Sub-section\r\n   * @description This directive is useful for creating subsection with custom behaviour.\r\n   * \r\n   * @attr {Var} ng-model\r\n   *    Data to be passed to subsection controller. ngModel can be accessed as $scope.ngModel.data. Any modifications done on $scope.ngModel.data will reflect in actual data model.\r\n   * @attr {String} template-url\r\n   *    Template to be rendered inside subsection ui element\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-load\r\n   *    Callback function when subsection is rendered. This is expected to be subsection controller function and parameters which are passed are expected to be form-widget controllers variables.\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"location\": {\r\n                    \"address1\": \"Building no. 3, Mindspace IT park\",\r\n                    \"address2\": \"Airoli\",\r\n                    \"city\": \"Navi Mumbai\",\r\n                    \"state\": \"MH\",\r\n                    \"country\": \"India\"\r\n                }\r\n            },\r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"\",\r\n                                        \"type\": \"subsection\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"location\",\r\n                                        \"templateUrl\": \"abc.html\",\r\n                                        \"colspan\": 1\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n    \r\n   * @example\r\n    Static:\r\n    Controller:\r\n        $scope.location = { \"address1\": \"Building no. 3, Mindspace IT park\", \"address2\": \"Airoli\", \"city\": \"Navi Mumbai\", \"state\": \"MH\", \"country\": \"India\" };\r\n       \r\n    Usage:\r\n        <smart-subsection template-url=\"abc.html\" ng-model=\"location\"></smart-subsection> \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var subsectionId = 0;\r\n    \r\n    angular.module('SMART2').directive('smartSubsection', ['$compile', 'ScrollTo', function ($compile, ScrollTo) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                modelData: '=?',\r\n                templateUrl: '@',\r\n                controller: '@',\r\n                isMandatory: '@',\r\n                isVisible: '=',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                parentScope: '=?',\r\n                removable: '@',\r\n                formModel: '=?',\r\n\t\t\t\tinit: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.onLoad = attrs.onLoad;\r\n\r\n                subsectionId = subsectionId + 1;\r\n                scope.subsectionId = 'subsection-' + subsectionId;\r\n\r\n              \r\n\r\n                if (typeof scope.modelData == 'function') {\r\n                    scope.ngModel = {\r\n                        data: scope.modelData()\r\n                    };\r\n                }\r\n                else {\r\n\r\n                    scope.ngModel = {\r\n                        data: scope.modelData\r\n                    };\r\n                    /*\r\n                     *  Listen the changes on model data and update sub-section data\r\n                     */\r\n                    var onModelData = scope.$watch('modelData', function (newVal) {\r\n                        scope.ngModel = {\r\n                            data: newVal\r\n                        };\r\n                    }, true);\r\n\r\n                    /*\r\n                     *  Listen the changes send it to parent scope\r\n                     */\r\n                    var onNgModelData = scope.$watch('ngModel.data', function (newVal) {\r\n                        scope.modelData = newVal;\r\n                    }, true);\r\n\r\n                }           /*\r\n                 * Focus the textfield as soon as the focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                if (scope.controller == '') {\r\n                    element.html('<div ng-class=\"{\\'optionalField\\': isMandatory == \\'false\\' && isRemovable}\"><div class=\"optionalFieldHover highlight\" ng-if=\"isMandatory == \\'false\\' && isRemovable\" ng-include=\"\\'shared/directives/uiElements/commonTemplates/optionalFieldRemoveButton.html\\'\"></div><div ng-include=\"templateUrl\" on-subsection-load></div></div>');\r\n                }\r\n                else {\r\n                \telement.html('<div ng-class=\"{\\'optionalField\\': isMandatory == \\'false\\' && isRemovable}\"><div class=\"optionalFieldHover highlight\" ng-if=\"isMandatory == \\'false\\' && isRemovable\" ng-include=\"\\'shared/directives/uiElements/commonTemplates/optionalFieldRemoveButton.html\\'\"></div><div ng-controller=\"' + scope.controller + '\" ng-init=\"' + scope.init + '\" ng-include=\"templateUrl\" on-subsection-load></div></div>');\r\n                }\r\n                $compile(element.contents())(scope);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onModelData();\r\n                    onNgModelData();\r\n                    onFocus();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('onSubsectionLoad', ['$parse', function ($parse) {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                if (angular.isDefined(scope.onLoad)) {\r\n                    scope.$eval(scope.onLoad);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();    \n  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Switch\n   * @description This directive is useful for creating a switch.\n   *\n   * @attr {String} label\n   *    Label to be displayed for identification of this ui element\n   * @attr {Boolean} ng-model\n   *    Switch's default state (selected or unselected)\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\n   * @attr {Boolean} disable\n   *    If value of this attribute is set to true, switch will not be clickable\n   * @attr {Boolean} focus \n   *    If set to true, this ui element will be focused\n   * @attr {Boolean} validate\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\n   * @attr {Array} rules \n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\n   * @attr {String} error-message \n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\n   * @attr {Boolean} is-mandatory \n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\n   * @attr {Boolean} is-visible \n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\n   * @attr {Number} colspan\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\n   *    Default value is 1.\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\n   * @attr {Function} on-change\n   *    Callback function when switch state is changed \n   * \n   * @example\n   Dynamic:\n   Controller:\n       $scope.config = {\n            \"modelData\": {\n                \"isUrgent\": true\n            }, \n            \"formConfig\": {\n                \"sections\": [\n                    {\n                        \"isMandatory\": true,\n                        \"rows\": [\n                            {\n                                \"properties\": [\n                                    {\n                                        \"label\": \"Urgent\",\n                                        \"type\": \"switch\",\n                                        \"isMandatory\": true,\n                                        \"data\": \"isUrgent\",\n                                        \"colspan\": 1,\n                                        \"onChange\": \"onChange\"  //  controller function ,\n                                        \"rules\": [\n                                            { \n                                                \"rule\": \"this == true\", \n                                                \"error\": \"Checkbox should not be selected\" \n                                            }\n                                        ]\n                                    }\n                                ]    \n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n    Usage:\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\n   \n   * @example\n   Static:\n   Controller:\n       $scope.isUrgent = true;\n       $scope.onChange = function(isUrgent) {\n           console.log(isUrgent);\n       };\n   Usage:\n       <smart-switch label=\"Urgent\" ng-model=\"isUrgent\" on-change=\"onChange(isUrgent)\"></smart-switch>\n       \n   * @example\n   Disabled switch:\n   <smart-switch disable=\"true\"></smart-switch>     \n   */\n  \n(function() {\n    'use strict';\n    \n    angular.module('SMART2').directive('smartSwitch', ['$timeout', 'ScrollTo', 'RuleEngine', function ($timeout, ScrollTo, RuleEngine) {\n        return {\n            restrict: 'E',\n            replace: true,\n            require: '?ngModel',\n            scope: {\r\n                //ngModel: '=?',\n                disable: '@',\n                isMandatory: '@',\n                isVisible: '=?',\n                label: '@',\n                rightLabel: '=?',\n                leftLabel:'=?',\n                minHeight: '@',\n                fill: '@',\n                rules: '@',\n                validate: '=?',\n                focus: '=?',\n                parentElement: '@',\n                errorMessage: '@',\n                onChange: '&',\n                removable: '@',\n                additionaltext: '=additionaltext'\n            },\n            link: function (scope, element, attrs, ngModelCtrl) {\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\n    \n                scope.fill = scope.$eval(scope.fill) == undefined ? true : scope.$eval(scope.fill);\n                scope.leftLbl = \"Off\";\n                scope.rightLbl = \"On\";\n\n                if (typeof scope.leftLabel != \"undefined\")\n                    scope.leftLbl = scope.leftLabel;\n                if (typeof scope.rightLabel!=\"undefined\")\n                    scope.rightLbl = scope.rightLabel;\n\n\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\n\n                \n                /*\n                 * Focus field when focus is set to true\n                 */\n                var onFocus = scope.$watch('focus', function(newVal) {\n                    if(newVal) {\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\n                        scope.focus = false;\n                    }\n                });\n                \n                /*\n                 * Validate field whene validate is set to true\n                 */\n                var onValidate = scope.$watch('validate', function(newValue) {\n                    if(newValue != undefined && newValue) {\n                        scope.validateRules();\n                    }\n                });\n                \n                /*\n                 * Validate rules\n                 */\n                scope.validateRules = function () {\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\n\n                    if (scope.rules) {\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\n\n                        for (var i = 0; i < rules.length; i++) {\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\n                                    scope.errorMessage = rules[i].error;\n                                    break;\r\n                                }\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(rules[i], function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\n                        }\n                    }\n                };\n                \n                scope.ngChange = function () {\n                    updateView();\n                    scope.validateRules();\n                    $timeout(function() {\n                        scope.onChange();\n                    });\n                };\n\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                });\n            },\n            templateUrl: 'shared/directives/uiElements/smartSwitch/smartSwitchTemplate.html'\n        };\n    }]);\n})();    \n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Tabs-control\r\n * @description This directive is useful for creating a tabs control.\r\n *\r\n * @attr {Array} tab-config\r\n *    Tabs config. Please see example for more.\r\n * @attr {String} width\r\n *    Width of tabs holder. Default value is '100%'.\r\n *\r\n * @example\r\n Tabs Config in default case\r\n  $scope.tabsData = [{\r\n \"title\" : \"Tab 1\",\r\n \"contentUrl\" : \"tab1.html\",\r\n \"active\" : true\r\n }, {\r\n \"title\" : \"Tab 2\",\r\n \"contentUrl\" : \"tab2.html\"\r\n }, {\r\n \"title\" : \"Tab 3\",\r\n \"contentUrl\" : \"tab3.html\"\r\n }];\r\n \r\n *@example\r\n Controller in case default tab styling is to be overriden(set htmlmode=true and pass template url in tabsUrl):\r\n $scope.tabsData = [{\r\n \"title\" : \"Tab 1\",\r\n \"contentUrl\" : \"tab1.html\",\r\n \"active\" : true,\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template1.html\"\r\n }, {\r\n \"title\" : \"Tab 2\",\r\n \"contentUrl\" : \"tab2.html\",\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template2.html\"\r\n }, {\r\n \"title\" : \"Tab 3\",\r\n \"contentUrl\" : \"tab3.html\",\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template3.html\"\r\n }];\r\n\r\n Usage:\r\n <smart-tabs tab-config=\"{{tabsData}}\" width=\"60%\" header-template=\"test_template.html\"></smart-tabs>\r\n */\r\n\r\n(function() {\r\n\t'use strict';\r\n\tvar tabsId = 0;\r\n\r\n\tangular.module('SMART2').directive('smartTabs', ['$timeout','$parse','$focusOnField',\r\n\tfunction ($timeout, $parse, $focusOnField) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\treplace : true,\r\n\t\t\tscope: true,\r\n\t\t\tlink: function (scope, element, attrs) {\r\n                if(attrs.showCount == 'true') {\r\n                    scope.showCount = true;\r\n                }\r\n\t\t\t    var d = new Date().getTime();\r\n\t\t\t    scope.uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n\t\t\t        var r = (d + Math.random() * 16) % 16 | 0;\r\n\t\t\t        d = Math.floor(d / 16);\r\n\t\t\t        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n\t\t\t    });\r\n\r\n\t\t\t    var selectionCallback = $parse(attrs.onSelect),\r\n\t\t\t\t    tabWidth = attrs.width,\r\n\t\t\t\t    tabParent = element.find('.tabparent'),\r\n\t\t\t\t    currentTab;\r\n\r\n\t\t\t    scope.revisionMode = ((!attrs.revisionMode || attrs.revisionMode == \"false\") ? false : true);\r\n\t\t\t\ttabParent.css('width', tabWidth);\r\n\t\t\t\tvar timeoutCanel = $timeout(function() {\r\n\t\t\t\t\tvar tabs = element.find('.tabs');\r\n\t\t\t\t\ttabs.tabs();\r\n\t\t\t\t\t$timeout.cancel(timeoutCanel);\r\n\t\t\t\t});\r\n\t\t\t\t//scope.stickTabs = false;\r\n\r\n\t\t\t\tscope.vertical = attrs.vertical;\r\n\t\t\t\tscope.tabPanelHeight = angular.isDefined(attrs.tabPanelHeight) ? scope.vertical == 'true' ? attrs.tabPanelHeight : '100%' : '100%';\r\n\r\n\t\t\t\t//uniqueID\r\n\t\t\t\ttabsId = tabsId + 1;\r\n\t\t\t\tscope.tabId = \"tab-\" + tabsId;\r\n\t\t\t\tvar tabWidthInFloat = parseFloat(tabWidth);\r\n\t\t\t\tvar remainingWidth = (100 - tabWidthInFloat) + \"%\";\r\n\t\t\t\t//var rightHeaderStyle=\"{'background-color':'red';'width':\"+remainingWidth+\";'margin-left'}\";\r\n\t\t\t\tscope.headerStyle = {\r\n\t\t\t\t\t\"width\" : remainingWidth,\r\n\t\t\t\t\t\"margin-left\" : tabWidth,\r\n\t\t\t\t\t\"height\" : '48px'\r\n\t\t\t\t};\r\n\t\t\t\tscope.headerTemplate = attrs.headerTemplate;\r\n\t\t\t\tattrs.$observe('tabConfig', function (value) {\r\n\t\t\t\t    scope.tabConfig = scope.$eval(value);\r\n\t\t\t\t    var activeTabContent = currentTab;\r\n\t\t\t\t    var item = _.find(scope.tabConfig, function (item) { return item.active == true; });\r\n                    if (currentTab && currentTab.htmlmode && item == undefined) {\r\n                        for (var i = 0; i < scope.tabConfig.length; i++) {\r\n                            var tTab = scope.tabConfig[i];\r\n                            if (tTab.title.toLowerCase() === activeTabContent.title.toLowerCase()) {\r\n                                tTab.active = true;\r\n                               }\r\n\t\t\t    \t}\r\n\t\t\t\t    }\r\n\t\t\t\t    currentTab = (_.find(scope.tabConfig, function (tab) {\r\n\t\t\t\t        return tab.active;\r\n\t\t\t\t    }));\r\n\t\t\t\t    if (currentTab) {\r\n\t\t\t\t        currentTab.isLoaded = true;\r\n\t\t\t\t        scope.selectedTabContentUrl = currentTab.contentUrl;\r\n\t\t\t\t        //scope.tabClickCallback(currentTab);\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//attrs.$observe('stickTabs', function (value) {\r\n\t\t\t\t//    scope.stickTabs = scope.$eval(value);\r\n\t\t\t\t//});\r\n\r\n\t\t\t\t//scope.$on('checkTabIsDirty', function (event, data) {\r\n\t\t\t\t//    currentTab.isTabValidate = scope[currentTab.onBeforeTabChange] && scope[currentTab.onBeforeTabChange]();\r\n\t\t\t\t//});\r\n\r\n\t\t\t\tscope.tabClickCallback = function (item) {\r\n\t\t\t\t    var returnObject = angular.copy(item);\r\n\t\t\t\t    returnObject.previousTab = currentTab;\r\n\t\t\t\t    returnObject.previousTab.active = false;\r\n\t\t\t\t    currentTab = item;\r\n\t\t\t\t    item.active = true;\r\n\t\t\t\t    item.isLoaded = true;\r\n                    //returnObject.previousTab.isTabValidate = scope[returnObject.previousTab.onBeforeTabChange] && scope[returnObject.previousTab.onBeforeTabChange]();\r\n\t\t\t\t    if (angular.isFunction(selectionCallback)) {\r\n\t\t\t\t        selectionCallback(scope, { 'e': returnObject });\r\n\t\t\t\t    }\r\n\t\t\t\t    //TWO-6116  fixed.\r\n\t\t\t\t    //$timeout(function () {\r\n\t\t\t\t    //    scope.$broadcast('scrollTopToBottom', element.find('.scroll-container').outerHeight());\r\n\t\t\t\t    //}, 800);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.tabbingOnKeyDown = function (evt, $index, tabType) {\r\n\t\t\t\t    var moveTo;\r\n\t\t\t\t    if (evt.keyCode == 38 && angular.isDefined(tabType) || evt.keyCode == 37 && !angular.isDefined(tabType)) {\r\n\t\t\t\t        moveTo = $index - 1;\r\n\t\t\t\t        if (!(moveTo < 0)) {\r\n\t\t\t\t            element.find('.tab').eq(moveTo).focus();\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 40 && angular.isDefined(tabType) || evt.keyCode == 39 && !angular.isDefined(tabType)) {\r\n\t\t\t\t        moveTo = $index + 1;\r\n\t\t\t\t        if (!(moveTo >= scope.tabConfig.length)) {\r\n\t\t\t\t            element.find('.tab').eq(moveTo).focus();\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 13) {\r\n\t\t\t\t        scope.tabClickCallback(scope.tabConfig[$index]);\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 9) {\r\n\t\t\t\t        var firstFieldFocus = element.find(\"tabContent\").find(\"a, input, textarea, [tabindex]\").first();\r\n\t\t\t\t        $focusOnField(firstFieldFocus);\r\n\t\t\t\t    }\r\n\t\t\t\t    evt.stopPropagation();\r\n\t\t\t\t};\r\n                \r\n\t\t\t\tscope.showTabArrows = false;\r\n\t\t\t\tscope.disableNext = false;\r\n\t\t\t\tscope.disablePrev = true;\r\n\t\t\t\tvar isMovableTabs = true;\r\n\t\t\t\tvar tabHorizontalWidth, tabWrapperWidth, totalTabWidth, def, transValue, tempValue = 0;\r\n\r\n\t\t\t\tfunction setTabs() {\r\n\t\t\t\t    $timeout(function () {\r\n\t\t\t\t        tabHorizontalWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).width();\r\n\t\t\t\t        totalTabWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper\")[0].scrollWidth; //.width() doesn't return overflowed width of child element\r\n\r\n\t\t\t\t        if (totalTabWidth > tabHorizontalWidth) {\r\n\t\t\t\t            scope.showTabArrows = true;\r\n\t\t\t\t        }\r\n\r\n\t\t\t\t        $timeout(function () {\r\n\t\t\t\t            tabWrapperWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper\").width();\r\n\t\t\t\t            def = totalTabWidth - tabWrapperWidth;\r\n\t\t\t\t        });\r\n\t\t\t\t    });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.$on('LastRepeaterElement', function (attrs, elem) {\r\n\t\t\t\t    if (elem.is(\"li\") && isMovableTabs && attrs.nextback) {\r\n\t\t\t\t        setTabs();\r\n\t\t\t\t        isMovableTabs = false;\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.getTabsDimensions = function () {\r\n\t\t\t\t    return {\r\n\t\t\t\t        'w': element.find(\"#tabs-horizontal-\" + scope.uniqueID).width()\r\n\t\t\t\t    };\r\n\t\t\t\t};\r\n\t\t\t\tscope.$watch(scope.getTabsDimensions, function (newValue, oldValue) {\r\n\t\t\t\t    if (newValue.w != oldValue.w && attrs.nextback) {\r\n\t\t\t\t        setTabs();\r\n\t\t\t\t    }\r\n\t\t\t\t}, true);\r\n\r\n\t\t\t\tscope.goRight = function () {\r\n\t\t\t\t    if (!scope.disableNext) {\r\n\t\t\t\t        tempValue = tempValue + 175;\r\n\t\t\t\t        if (tempValue < def) {\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disablePrev = false;\r\n\t\t\t\t        }\r\n\t\t\t\t        else {\r\n\t\t\t\t            tempValue = def;\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disablePrev = false;\r\n\t\t\t\t            scope.disableNext = true;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.goLeft = function () {\r\n\t\t\t\t    if (!scope.disablePrev) {\r\n\t\t\t\t        tempValue = tempValue - 175;\r\n\t\t\t\t        if (tempValue < def && tempValue > 0) {\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disableNext = false;\r\n\t\t\t\t        }\r\n\t\t\t\t        else {\r\n\t\t\t\t            tempValue = 0;\r\n\t\t\t\t            transValue = tempValue;\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disableNext = false;\r\n\t\t\t\t            scope.disablePrev = true;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                \r\n\t\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\t    tabParent = null;\r\n\t\t\t\t    element.remove();\r\n\t\t\t\t    scope = null;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/uiElements/smartTabs/smartTabsTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();\r\n\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Character-restrict\r\n * @description This directive is useful for preventing character from entering in text field .\r\n * \r\n * @attr {String} patternreg\r\n *    Js Regex pattern need to be entered\r\n * \r\n * @example\r\n Dynamic: \r\n  Usage:\r\n      <smart-textfield model-data=\"config.modelData\" smart-character-restrict pattern=\"[^\\w\\s-()]\"></smart-form-widget>\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartCharacterRestrict', function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var keyCheckRe = new RegExp(attrs.patternreg, 'ig'),\r\n                    valueCheckRe = attrs.validationreg ? new RegExp(attrs.validationreg, 'ig') : false,\r\n                    valueRegexPassed,\r\n                    allowCharacterFlag = attrs.allowpaste;\r\n\r\n                element\r\n                    .off('keypress.smartcharacterrestrict')\r\n                    .on('keypress.smartcharacterrestrict', 'input', function (inputValue) {\r\n                        keyCheckRe.compile(attrs.patternreg, 'ig');\r\n                        if (inputValue.key == null) {\r\n                            return ''\r\n                        }\r\n\r\n                        if (keyCheckRe.test(inputValue.key)) {\r\n                            inputValue.preventDefault();\r\n                        }\r\n\r\n                        if (valueCheckRe) {\r\n                            valueCheckRe.compile(attrs.validationreg, 'ig');\r\n                            valueRegexPassed = valueCheckRe.test(inputValue.target.value + inputValue.key)\r\n                            if (valueRegexPassed == false) {\r\n                                inputValue.preventDefault();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                element\r\n                    .off('paste.smartcharacterrestrict')\r\n                    .on('paste.smartcharacterrestrict', 'input', function (inputValue) {\r\n                        if (allowCharacterFlag === 'true') {\r\n\r\n                        } else {\r\n                            return false;\r\n                        }\r\n\r\n                    });\r\n            }\r\n        }\r\n    });\r\n})(angular);\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Textfield\r\n * @description This directive is useful for creating a textfield or a date-picker or a auto-complete ui element depending upon the 'type' passed.\r\n * \r\n * @attr {String} label\r\n *    Label to be displayed for identification of this ui element\r\n * @attr {String} placeholder\r\n *    Hint text to be displayed in textfield\r\n * @attr {String} align\r\n *    Text alignment. Possible values are left, center, right.\r\n * @attr {Boolean} autocomplete \r\n *    This attribute is useful for turning off browser's default autocomplete behaviour\r\n * @attr {Number} maxlength\r\n *    Number of characters allowed in textfield\r\n * @attr {Number} decimalprecision\r\n *    Number of characters allowed after decimal precision in textfield\r\n * @attr {Number} min\r\n *    Minimum value allowed in textfield \r\n * @attr {Number} max\r\n *    Maximum value allowed in textfield\r\n * @attr {Number} minmaxprecision\r\n *    Number of characters that should be visible in number type textfield. Internally filter is applied for the given numbers. Data to be sent in array format with 2 array contents \r\n * @attr {Var} ng-model\r\n *    Default value to be displayed in textfield\r\n * @attr {Object} ng-model-options\r\n *    https://docs.angularjs.org/api/ng/directive/ngModelOptions\r\n * @attr {Boolean} focus \r\n *    If set to true, this ui element will be focused\r\n * @attr {Boolean} validate\r\n *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n * @attr {Array} rules \r\n *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n * @attr {String} error-message \r\n *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n * @attr {Boolean} is-mandatory \r\n *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n * @attr {Boolean} is-visible \r\n *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n * @attr {Number} colspan\r\n *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n *    Default value is 1.\r\n *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n * @attr {String} type \r\n *    Type of textfield. Default value is 'text'. Possible values are area (textarea), number, email, date, autocomplete.\r\n * @attr {Boolean} readonly \r\n *    If set to true, textfield cannot be editable. Textfield's blur and focus events will still be fired (default behaviour).\r\n * @attr {Boolean} disable \r\n *    If set to true, textfield cannot be editable. Textfield's blur and focus events will not be fired (default behaviour).\r\n * @attr {Function} on-focus\r\n *    Callback function when ui element's focus event is fired\r\n * @attr {Function} on-blur\r\n *    Callback function when ui element's blur event is fired\r\n * @attr {Function} on-key-up\r\n *    Callback function when ui element's keyup event is fired\r\n * @attr {Function} on-key-down\r\n *    Callback function when ui element's keydown event is fired\r\n * @attr {Function} on-key-press\r\n *    Callback function when ui element's keypress event is fired\r\n * @attr {Function} on-enter\r\n *    Callback function when ENTER (RETURN) key is pressed\r\n * \r\n * @example\r\n Dynamic:\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"companyName\": \"GEP\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Company name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"isVisible\": false,\r\n                                      \"data\": \"companyName\",\r\n                                      \"colspan\": 1,\r\n                                      \"validate\": false,\r\n                                      \"focus\": false,\r\n                                      \"onFocus\": \"onFocus\",\r\n                                      \"onBlur\": \"onBlur\" \r\n                                      \"onChange\": \"onChange\"\r\n                                      \"onKeyPress\": \"onKeyPress\"\r\n                                      \"onKeyUp\": \"onKeyUp\"\r\n                                      \"onKeyDown\": \"onKeyDown\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"number\"\r\n                                          \"maxlength\": \"\",\r\n                                          \"decimalprecision\": \"\",\r\n                                          \"minmaxprecision\": [2,5],\r\n                                          \"disable\": true,\r\n                                          \"readonly\": true,\r\n                                          \"align\": \"left\",\r\n                                          \"placeholder\": \"\",\r\n                                          \"autocomplete\": false\r\n                                      },\r\n                                      \"rules\": [\r\n                                          { \r\n                                              \"rule\": \"this.length > 10\", \r\n                                              \"errorMessage\": \"Length should not be greater than 10\" \r\n                                          }\r\n                                      ]\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Textfield with ng-model-options. This example is applicable only if one wants to use 'ng-model-options' with 'getterSetter' option. Otherwise VM\r\n does not need to be used as 'ng-model' or 'data'.\r\n Dynamic:\r\n Controller:\r\n     var defaultCompanyName = 'GeP';\r\n     this.companyName = function (val) {\r\n         if (val !== undefined) {\r\n             defaultCompanyName = val;\r\n         }\r\n         return defaultCompanyName;\r\n     };\r\n\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"companyName\": \"GEP\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Company name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"isVisible\": false,\r\n                                      \"data\": \"controllerVM.companyName\",\r\n                                      \"attributes\": {\r\n                                          \"ngModelOptions\": { getterSetter: true }\r\n                                      },\r\n                                      \"rules\": [\r\n                                          { \r\n                                              \"rule\": \"this.length > 10\", \r\n                                              \"errorMessage\": \"Length should not be greater than 10\" \r\n                                          }\r\n                                      ]\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Textfield with ng-model-options. This example is applicable only if one wants to use 'ng-model-options' with 'getterSetter' option. Otherwise VM\r\n does not need to be used as 'ng-model' or 'data'.\r\n Static:\r\n Controller:\r\n     angular.module('SMART2', []).controller('textFieldController', ['$scope', function($scope) {\r\n         var defaultCompanyName = 'GeP';\r\n         this.companyName = function (val) {\r\n             if (val !== undefined) {\r\n                 defaultCompanyName = val;\r\n             }\r\n             return defaultCompanyName;\r\n         };\r\n     }]);\r\n  Usage:\r\n      <div ng-controller=\"textFieldController as textFieldVM\">\r\n        <smart-textfield ng-model=\"textFieldVM.companyName\" ng-model-options=\"{getterSetter: true}\"></smart-textfield>\r\n      </div>\r\n\r\n * @example\r\n Static:\r\n Controller:\r\n      $scope.companyName = \"GEP\";\r\n Usage:\r\n      <smart-textfield label=\"First name\" ng-model=\"companyName\"></smart-textfield>\r\n      \r\n * @example\r\n Textfield with events: \r\n '$event' passed in callback functions in following example is angular event. \r\n  <smart-textfield on-focus=\"onFocus()\" \r\n                   on-blur=\"onBlur()\" \r\n                   on-change=\"onChange($event)\"\r\n                   on-key-press=\"onKeyPress($event)\"\r\n                   on-key-up=\"onKeyUp($event)\"\r\n                   on-key-down=\"onKeyDown($event)\"></smart-textfield>        \r\n */\r\n\r\n\r\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Date-picker\r\n * @description This directive is useful for creating a date picker. This directive is derived from 'textfield' directive. All the attributes of 'textfield' directive are applicable to this directive. Following are some additional attributes.\r\n * \r\n * @attr {String} format \r\n *    Date format. For e.g. dd/MM/yyyy. For more details browse https://docs.angularjs.org/api/ng/filter/date\r\n * @attr {Var} ng-model\r\n *    Default date to be displayed. 'ng-model' is expected to be in milliseconds (timestamp) or javascript date. For e.g. 5656534324368 or \"2014-09-18T10:03:58\" or \"Fri Mar 04 2016 13:10:56 GMT+0530 (IST)\"\r\n * \r\n * @example\r\n Dynamic: (Timestamp)\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"date\": 1457094173954\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Date\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"date\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"date\",\r\n                                          \"format\": \"dd/MM/yyyy\"\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Dynamic: (Javascript date)\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"date\": \"Fri Mar 04 2016 17:50:50 GMT+0530 (IST)\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Date\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"date\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"date\",\r\n                                          \"format\": \"dd/MM/yyyy\"\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Static: (Timestamp)\r\n Controller:\r\n      $scope.date = 1457094173954;\r\n Usage:\r\n      <smart-textfield type=\"date\" label=\"Date\" ng-model=\"date\"><smart-textfield> \r\n      \r\n * @example\r\n Static: (Javascript date)\r\n Controller:\r\n      $scope.date = \"Fri Mar 04 2016 17:50:50 GMT+0530 (IST)\";\r\n Usage:\r\n      <smart-textfield type=\"date\" label=\"Date\" ng-model=\"date\"><smart-textfield>         \r\n */\r\n\r\n\r\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Auto-complete\r\n * @description This directive is useful for creating an auto-complete ui element. This directive is derived from 'textfield' directive. All the attributes of 'textfield' directive are applicable to this directive. Following are some additional attributes.\r\n * \r\n * @attr {Object} ng-model\r\n *    Default value to be displayed in textfield. 'ng-model' is expected to be an object having property (key) set in 'datakey' attribute.\r\n * @attr {Array} filterkeys\r\n *    An array of properties (keys) on which filtering to be applied. Suggestions will get filtered on the basis of properties (keys) passed in array.\r\n * @attr {String} optionformat\r\n *    A single suggestion format (template)\r\n * @attr {String} displayformat\r\n *    A format in which the data in textfield to be displayed\r\n * @attr {Boolean} loading \r\n *    This attribute can be used to display a loader while autosuggest data is being fetched from the server.\r\n * @attr {Function} on-select\r\n *    Callback when a suggestion is selected\r\n * \r\n * @example\r\n Dynamic:\r\n Controller:\r\n     $scope.onChange = function(uiElementConfig) {\r\n          uiElementConfig.attributes.options = [\r\n              {\r\n                  \"UserId\": 28360,\r\n                  \"UserName\": \"SRUser1@outlook.com\",\r\n                  \"FirstName\": \"SR \",\r\n                  \"LastName\": \"User1\"\r\n              }, {\r\n                  \"UserId\": 28977,\r\n                  \"UserName\": \"test1\",\r\n                  \"FirstName\": \"Test\",\r\n                  \"LastName\": \"\"\r\n              }, {\r\n                  \"UserId\": 57950,\r\n                  \"UserName\": \"HShah\",\r\n                  \"FirstName\": \"Harshit\",\r\n                  \"LastName\": \"Shah\"\r\n              }\r\n          ];\r\n     };\r\n     $scope.onSelect = function(autoSuggestData) {\r\n         console.log(autoSuggestData);\r\n         //   autoSuggestData will be updated every time a new suggestion is chosen. Passing 'model' in 'onSelect' is optional.\r\n     };\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"autoSuggestData\": { \"UserId\": 28360, \"UserName\": \"SRUser1@outlook.com\", \"FirstName\": \"SR\", \"LastName\": \"User1\", \"title\": \"SR User1\" }\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Auto complete\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"autoSuggestData\",\r\n                                      \"onChange\": \"onChange\",\r\n                                      \"onSelect\": \"onSelect(autoSuggestData)\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"autocomplete\",\r\n                                          \"options\": [],\r\n                                          \"filterkeys\": [\"FirstName\", \"LastName\"],\r\n                                          \"optionformat\": \"<span>{FirstName} {LastName}</span>\",\r\n                                          \"displayformat\": \"{FirstName} {LastName}\",\r\n                                          \"loading\": false\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n     };\r\n  Usage:\r\n     <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n * @example\r\n Static:\r\n Controller:\r\n     $scope.autoCompleteData = { \"UserId\": 28360, \"UserName\": \"SRUser1@outlook.com\", \"FirstName\": \"SR\", \"LastName\": \"User1\", \"title\": \"SR User1\" };\r\n     $scope.onChange = function(e) {\r\n          //  Textfield's value can be found in e.data[0].value\r\n          //  See console for more\r\n          console.log(e);\r\n          $scope.options = [\r\n              {\r\n                  \"UserId\": 28360,\r\n                  \"UserName\": \"SRUser1@outlook.com\",\r\n                  \"FirstName\": \"SR \",\r\n                  \"LastName\": \"User1\"\r\n              }, {\r\n                  \"UserId\": 28977,\r\n                  \"UserName\": \"test1\",\r\n                  \"FirstName\": \"Test\",\r\n                  \"LastName\": \"\"\r\n              }, {\r\n                  \"UserId\": 57950,\r\n                  \"UserName\": \"HShah\",\r\n                  \"FirstName\": \"Harshit\",\r\n                  \"LastName\": \"Shah\"\r\n              }\r\n          ]; \r\n     };\r\n     $scope.onSelect = function(autoCompleteData) {\r\n         console.log(autoCompleteData);\r\n         //   autoCompleteData will be updated every time a new suggestion is chosen. Passing 'model' in 'onSelect' is optional.\r\n     };\r\n Usage:\r\n     <smart-textfield type=\"autocomplete\" label=\"Auto complete\" ng-model=\"autoCompleteData\" filterkeys=\"['FirstName', 'LastName']\" optionformat=\"<span>{FirstName} {LastName}</span>\" displayformat=\"{FirstName} {LastName}\" options=\"options\" on-change=\"onChange($event)\" on-select=\"onSelect(autoCompleteData)\"></smart-textfield>\r\n */\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n    var textfieldId = 19820116;\r\n    //var directiveV2 = true;\r\n    //var isDirectiveV2enabled = function () { return true; }\r\n    $(function () {\r\n        angular.element('body').off('click').on('click', '.daterangepicker', function (e) {\r\n            e.stopPropagation();\r\n        });\r\n    });\r\n\r\n    angular.module('SMART2').directive('smartTextfield', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'RuleEngine', 'smartTextFieldService', 'smartTextField3Service', '$filter', '$window', 'persistenceService',\r\n        (typeof isDirectiveV2enabled !== 'undefined' ? (isDirectiveV2enabled() === true || isDirectiveV2enabled() === 'V3' ? smartTextField3Func : smartTextFieldFunc) : smartTextFieldFunc)]);\r\n\r\n\r\n    function smartTextFieldFunc($rootScope, $timeout, $translate, ScrollTo, RuleEngine, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                //ngModel: '=?',\r\n                modelOptions: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                scope.modelOptions = scope.modelOptions === false ? {} : !scope.modelOptions ? {\r\n                    updateOn: 'default blur change',\r\n                    debounce: { 'default': 300, 'blur': 0, 'change': 0 }\r\n                } : scope.modelOptions;\r\n                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon\r\n                var timePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker == 'true' ? true : false);\r\n                scope.format = (scope.format ? scope.format : timePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n                scope.count = 0;\r\n                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                var number, rulesValidationEvent;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n\r\n\r\n                if (scope.type == 'number') {\r\n                    element.bind(\"DOMMouseScroll mousewheel onmousewheel\", function (event) {\r\n\r\n                        // for IE\r\n                        event.returnValue = false;\r\n                        // for Chrome and Firefox\r\n                        if (event.preventDefault) {\r\n                            event.preventDefault();\r\n                        }\r\n\r\n                    });\r\n                }\r\n\r\n\r\n                var uniqueIDGenerator = function () {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xx2xxpxxoxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                if (attrs.validateOn) {\r\n                    rulesValidationEvent = attrs.validateOn;\r\n                }\r\n                else {\r\n                    rulesValidationEvent = 'blur';\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\r\n\r\n\r\n                function checkIfActive() {\r\n                    if (scope.readonly == 'true') {\r\n                        return true;\r\n                    }\r\n                    if (scope.type == 'number' && scope.ngModel !== 0 + '' && scope.placeholder === '' && (scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                        return false;\r\n                    }\r\n                    if (scope.type != 'number' && scope.type != 'autocomplete' && scope.placeholder === '' && (scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                        return false;\r\n                    }\r\n                    if (scope.type == 'autocomplete' && scope.placeholder === '' && (scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n\r\n                function setPrecisionLimits() {\r\n                    number = scope.ngModel;\r\n                    if (number != undefined) {\r\n                        var arr = (number.toString()).split('e')\r\n                        if (arr.length > 1 && parseInt(arr[1]) < 0) {\r\n                            number = (number).toFixed(6);\r\n                            scope.ngModel = number;\r\n                        }\r\n                        var tempArr = number.toString().split('.');\r\n                        if (tempArr != undefined && tempArr.length > 1) {\r\n                            var preDecimal = tempArr[0];\r\n                            if (preDecimal != 0 && preDecimal.toString().length > 20) {\r\n                                var tempVal = preDecimal.toString().substring(0, 19);\r\n                                scope.ngModel = parseInt(tempVal);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (number != 0 && number.toString().length > 20) {\r\n                                var tempVal = number.toString().substring(0, 19);\r\n                                scope.ngModel = parseInt(tempVal);\r\n                            }\r\n                        }\r\n                        if (scope.decimalprecision != undefined) {\r\n                            scope.ngModel = parseFloat(parseFloat(scope.ngModel).toFixed(scope.decimalprecision));\r\n                        }\r\n                        else if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length > 2 || splitPrecision.length < 1)\r\n                                return;\r\n                            var lowerPrecisionLimit = splitPrecision[0];\r\n                            var highPrecisionLimit = splitPrecision[1];\r\n\r\n                            var postDecimalNumbers = ((scope.ngModel + \"\").split(\".\")[1] != undefined) ? (scope.ngModel + \"\").split(\".\")[1].length : 0;\r\n\r\n                            if (postDecimalNumbers == 0)\r\n                                return;\r\n\r\n                            if (lowerPrecisionLimit > postDecimalNumbers && postDecimalNumbers < highPrecisionLimit && postDecimalNumbers != 0) {\r\n                                scope.ngModel = parseFloat(parseFloat(scope.ngModel).toFixed(lowerPrecisionLimit));\r\n                            }\r\n                            else if (postDecimalNumbers >= highPrecisionLimit && postDecimalNumbers != 0) {\r\n                                var fixed = Math.pow(10, highPrecisionLimit);\r\n                                scope.ngModel = Math.floor(scope.ngModel * fixed) / fixed;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.isActive = checkIfActive();\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.textfieldId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    textfieldId = uniqueIDGenerator();\r\n                    scope.textfieldId = 'txt-' + textfieldId;\r\n                }\r\n\r\n                scope.labelForTextfieldId = 'label-for-' + scope.textfieldId;\r\n\r\n                /*\r\n                * Skip tab key focus, if the field is readonly\r\n                */\r\n                setTimeout(function () {\r\n                    if (scope.readonly == 'true' && scope.type != 'date') {\r\n                        angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n                    }\r\n\r\n                    try {\r\n                        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n                            scope.$parent.$parent.onEditableRender(scope, element);\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                });\r\n\r\n                /*\r\n                 * Validate the textfield as soon as the validate is set to true\r\n                 */\r\n                var unbindValidate = scope.$watch('validate', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Focus the textfield as soon as the focus is set to true\r\n                 */\r\n                var unbindFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        //  settimeout is added to avoid $digest already in progress\r\n                        setTimeout(function () {\r\n                            var el = angular.element('#' + scope.textfieldId);\r\n                            if (scope.label) {\r\n                                el.trigger('click');\r\n                                el.focus();\r\n                            } else {\r\n                                // if label is undefined or empty then directly focus on input element \r\n                                if (el.is(\"input\")) {\r\n                                    el.focus();\r\n                                } else {\r\n                                    el.find(\"input\").focus();\r\n                                }\r\n                            }\r\n                        }, 100); // increased timer hotfix for focus cell in ui-grid\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n                var checkRule = function () {\r\n                    var rules = scope.$eval(scope.rules);\r\n                    var isFoundInvalid = false;\r\n\r\n                    for (var i = 0; i < rules.length; i++) {\r\n                        if (typeof rules[i] == 'object') {\r\n                            if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                                scope.validate = true;\r\n                                scope.errorMessage = rules[i].error;\r\n                                scope.errorModel = rules[i].error;\r\n                                break;\r\n                            } else {\r\n                                if (scope.type === 'date') {\r\n                                    angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (!isFoundInvalid) {\r\n                                if (typeof scope.ngModel != 'object')\r\n                                    var data = scope.ngModel;\r\n                                else\r\n                                    var data = scope.displayModel;\r\n\r\n                                RuleEngine.isValid(rules[i], function (e) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = e.errorData.error;\r\n                                    scope.errorModel = e.errorData.error;\r\n                                    isFoundInvalid = true;\r\n                                }, data);\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                /*\r\n                 * Validate textfield rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    if (scope.readonly == 'true') {\r\n                        scope.isActive = true;\r\n                        return;\r\n                    }\r\n\r\n                    if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                        if (attrs.noTrim == 'true') {\r\n                            scope.ngModel = scope.ngModel;\r\n                        } else {\r\n                            scope.ngModel = scope.ngModel.trim();\r\n                        }\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n\r\n                    if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && (scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant('enterValueErrMsg');\r\n                        scope.errorModel = $translate.instant('enterValueErrMsg');\r\n                        return;\r\n                    }\r\n\r\n                    if (scope.type == 'number') {\r\n                        if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                            angular.element('#' + scope.textfieldId).val('');\r\n                            return;\r\n                        }\r\n                        if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                            if (scope.rules) {\r\n                                checkRule();\r\n                            }\r\n                            return;\r\n                        }\r\n                        if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                            scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.type == 'date' && !scope.rules) {\r\n                        $('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    scope.errorModel = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    if (typeof scope.ngModel != 'object')\r\n                                        var data = scope.ngModel;\r\n                                    else\r\n                                        var data = scope.displayModel;\r\n\r\n                                    RuleEngine.isValid(rules[i], function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    }, data);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                //  callback events\r\n                var isDateBlank = false;\r\n                scope.ngChange = function (e) {\r\n                    if (scope.type == 'number') {\r\n                        if (scope.ngModel == null || scope.ngModel == undefined)\r\n                            scope.count = 0;\r\n                        setPrecisionLimits();\r\n                    }\r\n                    scope.isActive = checkIfActive();\r\n                    if (rulesValidationEvent == 'change') {\r\n                        scope.validateRules();\r\n                    }\r\n\r\n                    if (scope.type != 'autocomplete') {\r\n                        updateView();\r\n                    }\r\n\r\n                    //  Value of 'e' is undefined in ng-change\r\n                    scope.onChange({\r\n                        $event: {\r\n                            data: angular.element('#' + scope.textfieldId),\r\n                            displayModel: scope.displayModel\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scope.ngFocus = function (e) {\r\n                    if (scope.type === 'autocomplete' || scope.clearListOnFocus === \"true\") {\r\n                        var Obj = element.find('input').devbridgeAutocomplete();\r\n                        if (element.find('input').val() == '' && Obj) {\r\n                            Obj.clear();\r\n                        }\r\n                    }\r\n                    scope.isActive = true;\r\n                    scope.validate = false;\r\n                    if (rulesValidationEvent == 'focus') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onFocus({ $event: e });\r\n                };\r\n\r\n                scope.ngBlur = function (e) {\r\n                    if (scope.type == 'number') {\r\n                        if (scope.min != undefined || scope.min != null) {\r\n                            if (scope.ngModel == undefined || scope.ngModel == null || isNaN(scope.ngModel)) {\r\n                                $('#' + scope.textfieldId).val('');\r\n                            }\r\n                        }\r\n                    }\r\n                    if (scope.type == 'date' && isDateBlank) {\r\n                        $timeout(function () {\r\n                            var targetedEle = document.activeElement;\r\n                            if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                                //  scope.ngModel = null;\r\n                                scope.dateModel = null;\r\n                            }\r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({\r\n                                    $date: scope.ngModel\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                    if (scope.type === 'autocomplete') {\r\n                        if (scope.ngModel && scope.displayformat) {\r\n                            var splittedDisplayFormat = [];\r\n                            if (scope.displayformat.indexOf(\":\") > 0)\r\n                                splittedDisplayFormat = scope.displayformat.split(':');\r\n                            else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                                splittedDisplayFormat = scope.displayformat.split('-');\r\n                            else\r\n                                splittedDisplayFormat = scope.displayformat.split('-');\r\n                            var result = \"\";\r\n                            for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                                result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                                if (i < splittedDisplayFormat.length - 1) {\r\n                                    if (scope.displayformat.indexOf(\"-\") > 0)\r\n                                        result += '-';\r\n                                    else if (scope.displayformat.indexOf(\":\") > 0)\r\n                                        result += ':';\r\n                                }\r\n                            }\r\n                            if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n                                if (result !== scope.displayModel)\r\n                                    scope.displayModel = '';\r\n                            }\r\n                        }\r\n                    }\r\n                    //as debounce is used smartTextField templates for updating model, $timeout is used to keep validateRules() on blur in sync\r\n                    $timeout(function () {\r\n                        if (scope.type == 'date') {\r\n                            if (pickerObj && pickerObj.isShowing) {\r\n                                return;\r\n                            }\r\n                            else {\r\n                                scope.validateRules();\r\n                                scope.isActive = checkIfActive();\r\n                            }\r\n                        }\r\n                        else {\r\n                            scope.validateRules();\r\n                            scope.isActive = checkIfActive();\r\n\r\n                            try {\r\n                                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n                    })\r\n\r\n                    //  had to use jQuery because 'active' class does not get removed sometimes even if scope.isActive's value is false\r\n                    scope.isActive || scope.validate ? angular.element('#' + scope.labelForTextfieldId).addClass('active') : angular.element('#' + scope.labelForTextfieldId).removeClass('active');\r\n\r\n                    //  had to use jQuery because 'invalid' class does not get removed sometimes even if scope.validate's value is false\r\n                    if (attrs.charactercounter) {\r\n                        scope.validate && scope.errorMessage ? angular.element('#' + scope.textfieldId).addClass('invalid') : angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n                    scope.focus = false;\r\n                    scope.onBlur({ $event: e });\r\n                };\r\n\r\n                scope.ngKeyUp = function (e) {\r\n                    if (scope.type == 'date') {\r\n                        if (e.which != 32) {\r\n                            var currentInputValue = $('#' + scope.textfieldId).val();\r\n                            if (currentInputValue == \"\") {\r\n                                scope.ngModel = null;\r\n                                scope.dateModel = \"\";\r\n                                isDateBlank = true;\r\n                                ngModelCtrl.$setViewValue('');\r\n                                if (angular.isFunction(scope.onDateChange)) {\r\n                                    scope.onDateChange({\r\n                                        $date: scope.ngModel\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rulesValidationEvent == 'keyUp') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onKeyUp({ $event: e });\r\n                };\r\n\r\n                scope.ngKeyDown = function (e) {\r\n                    if (rulesValidationEvent == 'keyDown') {\r\n                        scope.validateRules();\r\n                    }\r\n                    //to control number of down arrow,up arrow signs on number fields\r\n                    if (scope.type === \"number\" && (e.keyCode == 38 || e.keyCode == 40))\r\n                        e.preventDefault();\r\n                    scope.onKeyDown({ $event: e });\r\n\r\n                };\r\n\r\n                scope.ngKeyPress = function (e) {\r\n                    if (scope.type == 'number' || attrs.datanumeric) {\r\n                        //to control number of +,-, signs and alphabets on number fields\r\n                        var charCode = e.charCode || e.keyCode,\r\n                        textValue = e.currentTarget.value,\r\n                        decimalDigit = [],\r\n                        cc = String.fromCharCode(charCode),\r\n                        escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                        if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                            e.preventDefault();\r\n                        }\r\n                        // Restrict the 2 dots entering\r\n                        if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                            e.preventDefault();\r\n                        }\r\n\r\n                        if (textValue) {\r\n                            decimalDigit = textValue.toString().split('.');\r\n                        }\r\n                        // Restrict the decimal value from entering\r\n                        if (attrs.decimalprecision) {\r\n                            if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                                e.preventDefault();\r\n                            }\r\n                            if (decimalDigit.length == 2) {\r\n                                if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                                    e.preventDefault();\r\n                                }\r\n                            }\r\n                        }\r\n                        if (scope.min != undefined || scope.min != null) {\r\n                            if (scope.min >= 0 && e.charCode == 45) {\r\n                                e.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (rulesValidationEvent == 'keyPress') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onKeyPress({ $event: e });\r\n                    if (e.charCode == 13) {\r\n                        scope.onEnter({ $event: e });\r\n                    }\r\n\r\n                    // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n                    if (e.target.value.length === attrs.maxlength && e.charCode !== 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                };\r\n\r\n\r\n                /*\r\n                 * This function is required to generate value attribute \r\n                 * and useful when up/down key is pressed\r\n                 */\r\n                function getFormattedData(data) {\r\n                    if (!data || data.length == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{');\r\n                            for (var j = 0; j < parentSplit.length; j++) {\r\n                                var childSplit = parentSplit[j].split('}');\r\n                                for (var k = 0; k < childSplit.length; k++) {\r\n                                    if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n\r\n                /*\r\n                 * Get plain display data\r\n                 */\r\n                function getDisplayData(data) {\r\n                    if (data == undefined || data == null || data == '') {\r\n                        return '';\r\n                    }\r\n                    var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                    try {\r\n                        var parentSplit = str.split('{');\r\n                        for (var j = 0; j < parentSplit.length; j++) {\r\n                            var childSplit = parentSplit[j].split('}');\r\n                            for (var k = 0; k < childSplit.length; k++) {\r\n                                if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                                    evalResult = eval('data.' + childSplit[k]);\r\n                                    evaluatedKeysCounter++;\r\n                                    if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                        evalResult = '';\r\n                                        nullKeysCounter++;\r\n                                    }\r\n                                    str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (evaluatedKeysCounter == nullKeysCounter) {\r\n                            str = '';\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Convert timestamp to UTC timestamp \r\n                 */\r\n                function toUTC(date) {\r\n                    return Date.UTC(\r\n                        date.getFullYear()\r\n                        , date.getMonth()\r\n                        , date.getDate()\r\n                        , date.getHours()\r\n                        , date.getMinutes()\r\n                        , date.getSeconds()\r\n                        , date.getMilliseconds()\r\n                    );\r\n                };\r\n                scope.isValueDateObj = false;\r\n                var doesContainDateString = false;\r\n                var dateFormate = scope.format;\r\n                function getGridFormatToTimestamp(stringdate) {\r\n                    var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                    // tmpModel = tmpModel.split('+');\r\n                    // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n                    return moment(tmpModel).format(dateFormate);\r\n                }\r\n                var pickerObj;\r\n                function createDatePicker() {\r\n                    $timeout(function () {\r\n                        var picker = angular.element('#' + scope.textfieldId);\r\n                        var callApplyFuncFlag = true;\r\n                        function setDateFormate(datePar) {\r\n                            if (doesContainDateString) {\r\n                                scope.ngModel = '\\/Date(' + (datePar.unix() * 1000) + ')\\/';\r\n                            } else {\r\n                                if (scope.isValueDateObj) {\r\n                                    var tempDate = datePar.format();\r\n                                    scope.ngModel = new Date(tempDate);\r\n                                } else {\r\n                                    scope.ngModel = (datePar.unix() * 1000);\r\n                                }\r\n                            }\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                            isDateBlank = false;\r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({ $date: scope.ngModel });\r\n                            }\r\n                        }\r\n                        var minDate = angular.isDefined(scope.min) ? doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(dateFormate) : '';\r\n                        var maxDate = angular.isDefined(scope.max) ? doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(dateFormate) : '';\r\n\r\n                        var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                        var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                        pickerObj = picker.daterangepicker({\r\n                            \"singleDatePicker\": true,\r\n                            \"showDropdowns\": true,\r\n                            \"timePicker\": timePicker,\r\n                            \"timePicker24Hour\": timePicker24Hour,\r\n                            \"timePickerIncrement\": timePickerIncrement,\r\n                            \"autoApply\": false,\r\n                            \"opens\": \"right\",\r\n                            \"drops\": \"down\",\r\n                            \"minDate\": minDate,\r\n                            \"maxDate\": maxDate,\r\n                            \"locale\": {\r\n                                \"format\": dateFormate,\r\n                                'cancelLabel': $translate.instant('cancelBtn'),\r\n                                'applyLabel': $translate.instant('applyBtn')\r\n                            }\r\n                        }, function (start, end, label) {\r\n                            callApplyFuncFlag = false;\r\n                            setDateFormate(end);\r\n                        }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                            var pos = pickerObj.container.offset(),\r\n                                wHeight = window.innerHeight,\r\n                                srTop = $(window).scrollTop();\r\n                            if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                                pickerObj.drops = \"up\";\r\n                                pickerObj.move();\r\n                            } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                                pickerObj.drops = \"down\";\r\n                                pickerObj.move();\r\n                            }\r\n                        }).data(\"daterangepicker\");\r\n\r\n                        picker.on('apply.daterangepicker', function (ev, pickerr) {\r\n                            if (callApplyFuncFlag) {\r\n                                setDateFormate(pickerr.endDate)\r\n                            }\r\n                            callApplyFuncFlag = true;\r\n                        });\r\n\r\n                        if (isDateBlank) {\r\n                            picker.val('');\r\n                            scope.ngModel = \"\";\r\n                            ngModelCtrl.$setViewValue('');\r\n                        };\r\n                    });\r\n                }\r\n\r\n                switch (scope.type) {\r\n                    case 'autocomplete':\r\n                        // key to be used to bind options\r\n                        var filterKeys;\r\n                        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                        }\r\n                        else {\r\n                            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                        }\r\n                        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n                        var displayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n                        /*\r\n                         * Check if the options are updated\r\n                         */\r\n                        var autoCompleteField;\r\n                        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n                            try {\r\n                                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                                    autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                                        filterKeys: filterKeys,\r\n                                        optionFormat: optionFormat,\r\n                                        displayFormat: displayFormat,\r\n                                        lookup: getFormattedData(newOptions),\r\n                                        width: scope.width,\r\n                                        showNoSuggestionNotice: showNoSuggestion,\r\n                                        noSuggestionNotice: noSuggestionNotice,\r\n                                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                                        onSelect: function (suggestion) {\r\n                                            angular.element('#' + scope.labelForTextfieldId).trigger('click');\r\n                                            scope.$evalAsync(function () {\r\n                                                scope.displayModel = getDisplayData(suggestion);\r\n                                                scope.ngModel = suggestion;\r\n                                                updateView();\r\n                                                $timeout(function () {\r\n                                                    scope.onSelect({\r\n                                                        $event: {\r\n                                                            data: suggestion\r\n                                                        }\r\n                                                    });\r\n                                                });\r\n                                            });\r\n                                        }\r\n                                    }).devbridgeAutocomplete();\r\n                                }\r\n                                else {\r\n                                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n                        });\r\n\r\n                        /*\r\n                         * Destroy autocomplete on scope destroy\r\n                         */\r\n                        scope.$on('$destroy', function () {\r\n                            if ($('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                                $('#' + scope.textfieldId).devbridgeAutocomplete().dispose();\r\n                            }\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                    case 'date':\r\n                        /*\r\n                         * Destroy datepicker on scope destroy\r\n                         */\r\n                        scope.$on('$destroy', function () {\r\n                            angular.element('#' + scope.textfieldId + '_root').remove();\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                    case 'text':\r\n                    case 'area':\r\n                    case 'number':\r\n                        scope.$on('$destroy', function () {\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                //Closing the suggestions on scroll to prevent overlapping issue\r\n                angular.element($window).scroll(function (e) {\r\n                    hideAutoOnScroll();\r\n                });\r\n\r\n                angular.element(\".modal, .modal-content\").scroll(function (e) {\r\n                    hideAutoOnScroll();\r\n                });\r\n\r\n                function hideAutoOnScroll() {\r\n                    if (autoCompleteField != undefined) {\r\n                        if (autoCompleteField.visible) {\r\n                            autoCompleteField.hide();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 *  Update 'active' class when textfield's value is updated\r\n                 */\r\n                switch (scope.type) {\r\n                    case 'autocomplete':\r\n                    case 'text':\r\n                    case 'area':\r\n                    case 'number':\r\n                        var unbindNumber = scope.$watch('ngModel', function (newVal) {\r\n                            if (scope.type == 'autocomplete' && angular.isDefined(newVal)) {\r\n                                scope.displayModel = getDisplayData(newVal);\r\n                            }\r\n                            if (scope.type == 'number') {\r\n                                setPrecisionLimits();\r\n                            }\r\n                            if (attrs.decimalprecision && attrs.datanumeric) {\r\n                                setPrecisionLimits();\r\n                            }\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                            if (scope.type == 'area') {\r\n                                $timeout(function () {\r\n                                    angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                                });\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                    case 'date':\r\n                        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                        });\r\n                        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n                            dateFormate = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                            isDateBlank = false;\r\n                            doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                            if (newVal == \"\" || newVal == null) {\r\n                                newVal = Date.now();\r\n                                isDateBlank = true;\r\n                                scope.isValueDateObj = false;\r\n                            } else {\r\n                                if (doesContainDateString) {\r\n                                    var tmpModel = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                                    tmpModel = tmpModel.split('+');\r\n                                    tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                                    scope.dateModel = moment(tmpModel).format(dateFormate);\r\n                                }\r\n                                else {\r\n                                    if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                                        scope.isValueDateObj = true;\r\n                                    } else {\r\n                                        newVal = parseInt(newVal);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //scope.placeholder = scope.format;\r\n                            scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                            if (!isDateBlank) {\r\n                                if (!doesContainDateString) {\r\n                                    scope.dateModel = moment(newVal).format(dateFormate);\r\n                                }\r\n                            } else {\r\n                                scope.dateModel = \"\";\r\n                            }\r\n                            createDatePicker();\r\n                        });\r\n                        var unbindMin = scope.$watch('min', function (n) {\r\n                            createDatePicker();\r\n                        });\r\n                        var unbindMax = scope.$watch('max', function (n) {\r\n                            createDatePicker();\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                if (scope.datanumeric == 'true') {\r\n                    scope.spinner = typeof attrs.spinner == 'undefined' ? 'true' : scope.spinner;\r\n                    scope.step = typeof attrs.step == 'undefined' ? 1 : scope.step;\r\n                    $timeout(function () {\r\n                        angular.element('#' + scope.textfieldId).inputNumber(scope.spinner, scope.step);\r\n                    });\r\n                }\r\n\r\n\r\n                function destroyEverythingElse() {\r\n                    element.off(); // deregister all event handlers\r\n                    $('#' + scope.textfieldId).off();\r\n                    $('#' + scope.labelForTextfieldId).off();\r\n\r\n                    if (unbindValidate)\r\n                        unbindValidate();\r\n                    if (unbindFocus)\r\n                        unbindFocus();\r\n                    if (unbindOptions)\r\n                        unbindOptions();\r\n                    if (unbindNumber)\r\n                        unbindNumber();\r\n                    if (unbindDateModel)\r\n                        unbindDateModel();\r\n                    if (angular.isFunction(scope.onDestroy)) {\r\n                        scope.onDestroy({});\r\n                    }\r\n                    // Removing contents of HTML from DOM\r\n                    $('#' + scope.textfieldId).remove();\r\n                    $('#' + scope.labelForTextfieldId).remove();\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTextfield/smartTextfieldTemplate.html'\r\n        };\r\n    }\r\n\r\n\r\n    function smartTextField2Func($rootScope, $timeout, $translate, ScrollTo, RuleEngine, smartTextFieldService, smartTextField3Service, $filter) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                isTitleVisible: '@'\r\n            },\r\n            compile: function () {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        if (scope.type === undefined || scope.type === 'text' || scope.type === 'area' || scope.type === 'password') {\r\n                            smartTextField_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'date') {\r\n\r\n                            SmartTextField_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'autocomplete') {\r\n\r\n                            SmartTextField_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n\r\n                        }\r\n                        else if (scope.type == 'number') {\r\n                            smartTextField_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate);\r\n                        }\r\n                        else {\r\n                            function SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n                                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n                                scope.count = 0;\r\n                                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                                var number, rulesValidationEvent;\r\n                                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n                                textfieldId++;\r\n                                scope.textfieldId = 'tf_' + textfieldId;\r\n                                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                                if (attrs.validateOn) {\r\n                                    rulesValidationEvent = attrs.validateOn;\r\n                                }\r\n                                else {\r\n                                    rulesValidationEvent = 'blur';\r\n                                }\r\n\r\n\r\n\r\n                                scope.onTextChange = function (e) {\r\n                                    scope.ngModel = e.target.value;\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    // if (rulesValidationEvent == 'change') {\r\n                                    smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                                    //  }\r\n                                    scope.onChange({ $event: e });\r\n                                };\r\n\r\n                                scope.ngBlur = function (e) {\r\n\r\n                                    scope.focus = false;\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n                                    scope.onBlur({ $event: e });\r\n                                }\r\n\r\n                                scope.ngKeyPress = function (e) {\r\n                                    scope.onKeyPress({ $event: e });\r\n                                };\r\n\r\n\r\n\r\n\r\n\r\n                                /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                                //try {\r\n                                //    ngModelCtrl.$render = function () {\r\n                                //        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                //        smartTextFieldService.updateTextValue(scope, element);\r\n                                //    };\r\n                                //}\r\n                                //catch (e) { }\r\n\r\n                                scope.prevModel = scope.ngModel;\r\n                                var updateView = function () {\r\n                                    try {\r\n                                        if (scope.ngModel !== scope.prevModel) {\r\n                                            $timeout(function () {\r\n                                                scope.prevModel = scope.ngModel;\r\n                                            });\r\n\r\n                                        }\r\n                                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                        smartTextFieldService.updateTextValue(scope, element);\r\n                                    }\r\n                                    catch (e) { }\r\n                                };\r\n\r\n\r\n\r\n                                var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                                });\r\n\r\n                                var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n                                    if (newVal[4] != oldVal[4]) {\r\n                                        smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    }\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n                                });\r\n\r\n                                scope.hideShowField = function () {\r\n                                    scope.isVisible = !scope.isVisible;\r\n                                };\r\n\r\n\r\n\r\n                                smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n\r\n                                scope.$on('$destroy', function () {\r\n                                    unbindModelWatcher();\r\n                                    unbindAttributesWatcher();\r\n                                });\r\n                            }\r\n                            SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        //$timeout(function () {\r\n                        //    element.find(\"input\").trigger('blur'); // initiate with initial value\r\n                        //});\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function smartTextField3Func($rootScope, $timeout, $translate, ScrollTo, RuleEngine, smartTextFieldService, smartTextField3Service, $filter, $window, persistenceService) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                regionalFormat: '@',    //  regional date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                isTitleVisible: '@',\r\n                clienterror: '=?',\r\n                id: '@',\r\n                masterData: '@',\r\n                currencySymbol: '=?'\r\n            },\r\n            compile: function () {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        //console.log(scope.id);\r\n                        //console.log(scope.masterData);\r\n                        if (scope.type === undefined || scope.type === 'text' || scope.type === 'area' || scope.type === 'password') {\r\n                            smartTextField3_TextFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'date') {\r\n\r\n                            SmartTextField3_DateFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'autocomplete') {\r\n\r\n                            SmartTextField3_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate, $window, persistenceService);\r\n\r\n                        }\r\n                        else if (scope.type == 'number') {\r\n                            smartTextField3_NumFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $filter, $translate);\r\n                        }\r\n                        else {\r\n                            function SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate) {\r\n                                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n                                scope.count = 0;\r\n                                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                                var number, rulesValidationEvent;\r\n                                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n                                textfieldId++;\r\n                                scope.textfieldId = 'tf_' + textfieldId;\r\n                                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                                if (attrs.validateOn) {\r\n                                    rulesValidationEvent = attrs.validateOn;\r\n                                }\r\n                                else {\r\n                                    rulesValidationEvent = 'blur';\r\n                                }\r\n\r\n\r\n\r\n                                scope.onTextChange = function (e) {\r\n                                    scope.ngModel = e.target.value;\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    // if (rulesValidationEvent == 'change') {\r\n                                    smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n                                    //  }\r\n                                    scope.onChange({ $event: e });\r\n                                };\r\n\r\n                                scope.ngBlur = function (e) {\r\n\r\n                                    scope.focus = false;\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n                                    scope.onBlur({ $event: e });\r\n                                }\r\n\r\n                                scope.ngKeyPress = function (e) {\r\n                                    scope.onKeyPress({ $event: e });\r\n                                };\r\n\r\n\r\n\r\n\r\n\r\n                                /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                                //try {\r\n                                //    ngModelCtrl.$render = function () {\r\n                                //        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                //        smartTextField3Service.updateTextValue(scope, element);\r\n                                //    };\r\n                                //}\r\n                                //catch (e) { }\r\n\r\n                                scope.prevModel = scope.ngModel;\r\n                                var updateView = function () {\r\n                                    try {\r\n                                        if (scope.ngModel !== scope.prevModel) {\r\n                                            $timeout(function () {\r\n                                                scope.prevModel = scope.ngModel;\r\n                                            });\r\n\r\n                                        }\r\n                                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                        smartTextField3Service.updateTextValue(scope, element);\r\n                                    }\r\n                                    catch (e) { }\r\n                                };\r\n\r\n\r\n\r\n                                var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                                    scope.isActive = smartTextField3Service.checkIfActive(scope, element);\r\n\r\n\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n                                });\r\n\r\n                                var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n                                    if (newVal[4] != oldVal[4]) {\r\n                                        smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    }\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n\r\n\r\n                                });\r\n\r\n                                scope.hideShowField = function () {\r\n                                    scope.isVisible = !scope.isVisible;\r\n                                };\r\n\r\n\r\n\r\n                                smartTextField3Service.buildTemplate(scope, element, scope.onTextChange);\r\n\r\n                                scope.$on('$destroy', function () {\r\n                                    unbindModelWatcher();\r\n                                    unbindAttributesWatcher();\r\n                                });\r\n                            }\r\n                            SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        //$timeout(function () {\r\n                        //    element.find(\"input\").trigger('blur'); // initiate with initial value\r\n                        //});\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function smartTextField_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n\r\n            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            scope.focus = false;\r\n            scope.onBlur({ $event: e });\r\n            $timeout(function () {\r\n                //updateView();\r\n\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            if (attrs.onKeyPress) {\r\n                scope.onKeyPress({ $event: e });\r\n            }\r\n            if (attrs.onEnter && e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            scope.validate = false;\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n             scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            scope.onFocus({ $event: e });\r\n        };\r\n\r\n        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n        var updateView = function () {\r\n            try {\r\n                if (smartTextFieldService.modal.getModal(scope, ngModelCtrl) !== scope.prevModel) {\r\n\r\n                    /* Removed $timeout due to ngBlur gets fired before scope.ngModel */\r\n                    $timeout(function () {\r\n                        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n\r\n                        if (typeof scope.ngModel === 'function') {\r\n                            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                        }\r\n                    });\r\n                    //scope.$apply();\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n        var unbindModelWatcher;\r\n        if (typeof scope.ngModel != 'function') {\r\n            unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                if(scope.typing === true) scope.typing = false;\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            });\r\n        } else {\r\n            unbindModelWatcher = scope.$watch(function () { return scope.ngModel(); }, function (newVal, oldVal) {\r\n                if (newVal != oldVal) {\r\n                     scope.typing = false;\r\n                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                    smartTextFieldService.setActiveClass(scope, element);\r\n                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                }\r\n\r\n            }, true);\r\n        }\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n        unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            }\r\n            if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            if (newVal[1] || newVal[1] == \"true\") {\r\n                element.find('input').focus();\r\n            }\r\n        });\r\n\r\n        //function bindOtherWatcher() {\r\n        //    if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n        //        //if (!angular.isDefined(unbindOtherWatcher)) {\r\n\r\n        //        //}\r\n        //    }\r\n        //    else {\r\n        //        if (angular.isDefined(unbindOtherWatcher)) {\r\n        //            unbindOtherWatcher();\r\n        //        }\r\n        //    }\r\n        //}\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        updateView();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //bindOtherWatcher();\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        if (scope.timePicker === 'true') {\r\n            scope.timePicker = true;\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? moment.localeData()._longDateFormat.L : scope.placeholder;\r\n        if (scope.timePicker == true) {\r\n            scope.placeholder = moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n        }\r\n\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        scope.datetimePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker === true ? true : false);\r\n        scope.format = (scope.format ? scope.format : scope.datetimePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        scope.applyClientZone = false;\r\n        scope.isValueDateObj = false;\r\n        scope.doesContainDateString = false;\r\n        scope.dateFormat = scope.format;\r\n        scope.isDateBlank = false;\r\n\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            scope.dateFormat = moment.localeData().longDateFormat('L');\r\n            if (scope.timePicker == true) {\r\n                scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n            }\r\n            scope.format = scope.dateFormat;\r\n        }\r\n        scope.convertIntoUTC = false;\r\n        if (typeof convertIntoUTC != 'undefined') {\r\n            scope.convertIntoUTC = convertIntoUTC;\r\n        }\r\n\r\n        //if (angular.isDefined(scope.$parent.$parent.property)) {\r\n        //    //this property (applyClientZone) comes from Config.js\r\n        //    if (angular.isDefined(scope.$parent.$parent.property.applyClientZone)) {\r\n        //        scope.applyClientZone = scope.$parent.$parent.property.applyClientZone;\r\n        //    }\r\n        //}\r\n\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            // smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            if (scope.isDateBlank) {\r\n                var targetedEle = document.activeElement;\r\n                if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                    //  scope.ngModel = null;\r\n                    scope.dateModel = null;\r\n                }\r\n                if (angular.isFunction(scope.onDateChange)) {\r\n                    scope.onDateChange({\r\n                        $date: scope.ngModel\r\n                    });\r\n                }\r\n            }\r\n\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            if (e.which != 32) {\r\n                var currentInputValue = $('#' + scope.textfieldId).val();\r\n                if (currentInputValue == \"\") {\r\n                    scope.ngModel = null;\r\n                    scope.dateModel = \"\"\r\n                    scope.isDateBlank = true;\r\n                    if (angular.isFunction(scope.onDateChange)) {\r\n                        scope.onDateChange({\r\n                            $date: scope.ngModel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyUp') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            if (rulesValidationEvent == 'keyDown') {\r\n                scope.validateRules();\r\n            }\r\n            ////to control number of down arrow,up arrow signs on number fields\r\n            //if (e.keyCode == 38 || e.keyCode == 40)\r\n            //    e.preventDefault();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyPress = function (e) {\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateDateValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        //var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n\r\n        //});\r\n\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindMin;\r\n        var unbindMax\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMin)) {\r\n                    unbindMin = scope.$watch('min', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMax)) {\r\n                    unbindMax = scope.$watch('max', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n                if (angular.isDefined(unbindMin)) {\r\n                    unbindMin();\r\n                }\r\n                if (angular.isDefined(unbindMax)) {\r\n                    unbindMax();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        smartTextFieldService.updateDateClass(scope, element);\r\n        smartTextFieldService.assignDateEvents(scope, element);\r\n        bindOtherWatcher();\r\n        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n            if (newVal) {\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                if (rulesValidationEvent == 'change') {\r\n                    scope.validateRules();\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n        });\r\n        var timeOffset = 20; // this is a fixed number in-case of timeZoneOffset is not defined.\r\n        scope.updatingDateModel = function (dateObj) {\r\n            if (typeof timeZoneOffset != 'undefined') {\r\n                timeOffset = timeZoneOffset;\r\n            }\r\n\r\n            if (timeOffset == 20) {\r\n                var adjustTimeZone = 0;\r\n                if (moment().zone() == -720) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n                scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n            }\r\n            else {\r\n                var adjustTimeZone = 0;\r\n                if (timeOffset == -12) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n\r\n                if (typeof dateObj == 'object') {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).add(timeOffset * 60, 'minute').add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                } else {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).utc().zone(timeOffset * -1).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    //scope.dateModel = moment(dateObj).zone(timeOffset * -1).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                }\r\n            }\r\n\r\n        }\r\n        // should be modified to discard UTC Convertion \r\n        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n            if (scope.timePicker === 'true') {\r\n                scope.timePicker = true;\r\n            }\r\n            if (!scope.dateModifiedbyUser) {\r\n                scope.dateFormat = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                    if (scope.timePicker == true) {\r\n                        scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                    }\r\n                    scope.format = scope.dateFormat;\r\n                }\r\n\r\n                scope.isDateBlank = false;\r\n                scope.doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                if (newVal == \"\" || newVal == null || typeof newVal == 'function') {\r\n                    newVal = Date.now();\r\n                    scope.isDateBlank = true;\r\n                    scope.isValueDateObj = false;\r\n                } else {\r\n                    if (scope.doesContainDateString) {\r\n                        var dateStr = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                        var tmpModel = dateStr;\r\n                        if (dateStr.indexOf('Date') <= -1) {\r\n                            tmpModel = tmpModel.split('+');\r\n                            tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                        }\r\n                        scope.updatingDateModel(tmpModel);\r\n                        //scope.dateModel = moment(tmpModel).format(scope.dateFormat);\r\n                        //smartTextFieldService.updateDateValue(scope, element);\r\n                    }\r\n                    else {\r\n                        if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                            scope.isValueDateObj = true;\r\n                        } else if (Object.prototype.toString.call(newVal) === '[object String]' && newVal.indexOf('T') > 0) {\r\n                            //scope.isValueDateObj = true;\r\n                        } else {\r\n                            newVal = parseInt(newVal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.placeholder = scope.format;\r\n                //scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                if (!scope.isDateBlank) {\r\n                    if (!scope.doesContainDateString) {\r\n                        //if (scope.applyClientZone) {\r\n                        //    scope.dateModel = moment(newVal).parseZone().format(scope.dateFormat);\r\n                        //}\r\n                        //else {\r\n                        scope.updatingDateModel(newVal);\r\n                        //scope.dateModel = moment(newVal).format(scope.dateFormat);\r\n                        //}\r\n                    }\r\n                } else {\r\n                    scope.dateModel = \"\";\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n                smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n            }\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n            scope.dateModifiedbyUser = false;\r\n\r\n            //smartTextFieldService.updateDateValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n        });\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            //unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindNgModel();\r\n            unbindDateModel();\r\n            if (angular.isDefined(unbindMin)) {\r\n                unbindMin();\r\n            }\r\n            if (angular.isDefined(unbindMax)) {\r\n                unbindMax();\r\n            }\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            console.log(scope.displayModel);\r\n\r\n            //updateView();\r\n\r\n            //console.log(scope.displayModel);\r\n            scope.onChange({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: scope.displayModel\r\n                }\r\n            });\r\n\r\n            ////scope.ngModel = e.target.value;\r\n            //smartTextFieldService.updateAutocompleteValue (scope, element);\r\n            //smartTextFieldService.setActiveClass(scope, element);\r\n            //// if (rulesValidationEvent == 'change') {\r\n            //smartTextFieldService.validateRules(scope, ngModelCtrl, element);\r\n            //smartTextFieldService.updateTextFieldClass(scope, element);\r\n            ////  }\r\n            ////scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n\r\n\r\n            if (scope.ngModel && scope.displayformat) {\r\n                var splittedDisplayFormat = [];\r\n                if (scope.displayformat.indexOf(\":\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split(':');\r\n                else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                else\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                var result = \"\";\r\n                for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                    result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                    if (i < splittedDisplayFormat.length - 1) {\r\n                        if (scope.displayformat.indexOf(\"-\") > 0)\r\n                            result += '-';\r\n                        else if (scope.displayformat.indexOf(\":\") > 0)\r\n                            result += ':';\r\n                    }\r\n                }\r\n\r\n                // P2P-16866\r\n                if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n\r\n                    if (e.target.value.trim() == '' || result !== scope.displayModel) {\r\n                        scope.displayModel = '';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            scope.focus = false;\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            $timeout(function () {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            });\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n            try {\r\n                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                }\r\n            }\r\n            catch (e) { }\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            ////var val = e.target.value;\r\n\r\n            //scope.displayModel = e.target.value;\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n\r\n        };\r\n        scope.elmVal = null;\r\n        scope.ngKeyUp = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            //if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n            //    scope.elmVal = e.target.value;\r\n            //    scope.onChange({\r\n            //        $event: {\r\n            //            data: element.find('#' + scope.textfieldId),\r\n            //            displayModel: e.target.value\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n        scope.search = function (e) {\r\n            if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n                scope.elmVal = e.target.value;\r\n                scope.onChange({\r\n                    $event: {\r\n                        data: element.find('#' + scope.textfieldId),\r\n                        displayModel: e.target.value\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            var Obj = elm.devbridgeAutocomplete();\r\n            if (elm.val() == '' && Obj) {\r\n                Obj.clear();\r\n                scope.elmVal = '';\r\n            }\r\n            scope.onFocus({ $event: e });\r\n        }\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateAutocompleteValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.displayModel = smartTextFieldService.getDisplayData(newVal, scope);\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['focus', 'isRemovable'], function (newVal, oldVal) {\r\n                        smartTextFieldService.setActiveClass(scope, element);\r\n                        smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var unbindValidationWatcher = scope.$watchGroup(['isMandatory', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[1] != oldVal[1] || newVal[2] != oldVal[2]) {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // key to be used to bind options\r\n        var filterKeys;\r\n        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n        }\r\n        else {\r\n            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n        }\r\n        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n        scope.ndisplayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n        /*\r\n         * Check if the options are updated\r\n         */\r\n        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n            try {\r\n                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                        filterKeys: filterKeys,\r\n                        optionFormat: optionFormat,\r\n                        displayFormat: scope.ndisplayFormat,\r\n                        lookup: smartTextFieldService.getFormattedData(newOptions, scope),\r\n                        width: scope.width,\r\n                        showNoSuggestionNotice: showNoSuggestion,\r\n                        noSuggestionNotice: noSuggestionNotice,\r\n                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                        onSelect: function (suggestion) {\r\n                            angular.element(document).trigger('click');\r\n                            scope.$evalAsync(function () {\r\n                                scope.displayModel = smartTextFieldService.getDisplayData(suggestion, scope);\r\n                                scope.ngModel = suggestion;\r\n                                updateView();\r\n                                $timeout(function () {\r\n                                    scope.onSelect({\r\n                                        $event: {\r\n                                            data: suggestion\r\n                                        }\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(smartTextFieldService.getFormattedData(newOptions, scope));\r\n                }\r\n            }\r\n            catch (e) { }\r\n        });\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        smartTextFieldService.assignAutocompleteEvents(scope, element);\r\n        bindOtherWatcher();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindOptions();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n            unbindValidationWatcher();\r\n        });\r\n    }\r\n\r\n    function smartTextField_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            // if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    scope.ngModel = parseFloat(e.target.value);\r\n            //}\r\n            updateView();\r\n            //scope.ngModel = parseFloat(e.target.value);\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    var num = e.target.value;\r\n            //    if (num.trim() != '') {\r\n            //        scope.ngModel = parseFloat(num);\r\n            //    }\r\n            //    else {\r\n            //        scope.ngModel = null;\r\n            //    }\r\n            //}\r\n            updateView();\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            if (scope.type == 'number' || attrs.datanumeric) {\r\n                //to control number of +,-, signs and alphabets on number fields\r\n                var charCode = e.charCode || e.keyCode,\r\n                textValue = e.currentTarget.value,\r\n                decimalDigit = [],\r\n                cc = String.fromCharCode(charCode),\r\n                escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                    e.preventDefault();\r\n                }\r\n                // Restrict the 2 dots entering\r\n                if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                if (textValue) {\r\n                    decimalDigit = textValue.toString().split('.');\r\n                }\r\n                // Restrict the decimal value from entering\r\n                if (attrs.decimalprecision) {\r\n                    if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                    if (decimalDigit.length == 2) {\r\n                        if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.min != undefined || scope.min != null) {\r\n                    if (scope.min >= 0 && e.charCode == 45) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n            // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n            if (angular.isDefined(attrs.maxlength) && e.target.value.length == attrs.maxlength && e.charCode !== 0) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element);\r\n                //smartTextFieldService.updateTextValue(scope, element);\r\n                if (scope.ngModel != null) {\r\n                    var min = 0;\r\n                    var max = 0;\r\n                    if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                        if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                            min = 0;\r\n                            max = 0;\r\n                        }\r\n                        else {\r\n                            min = MinPrecessionValue;//global default\r\n                            max = MaxPrecessionValue;//global default\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length == 2) {\r\n                                min = splitPrecision[0];\r\n                                max = splitPrecision[1];\r\n                            }\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (scope.minmaxprecision) {\r\n                            min = JSON.parse(scope.minmaxprecision)[0];\r\n                            max = JSON.parse(scope.minmaxprecision)[1];\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                    element.find('#' + scope.textfieldId).val($filter('minPrecisionHandler')(scope.ngModel, min, max, false))\r\n                    if (!scope.ngModel) {\r\n                        var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n                        if (num != '') {\r\n                            scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        else {\r\n                            scope.ngModel = null;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.ngModel !== scope.prevModel) {\r\n                        $timeout(function () {\r\n                            scope.prevModel = scope.ngModel;\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            updateView();\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                    mDec: 0,\r\n                    aPad: false,\r\n                    aSep: thousandSep,\r\n                    aDec: decimalSep,\r\n                    vMin: Number.NEGATIVE_INFINITY,\r\n                    vMax: Number.POSITIVE_INFINITY\r\n                });\r\n            } else {\r\n                element.find('#' + scope.textfieldId).autoNumeric();\r\n            }\r\n        } else {\r\n            var thousandSep = ',';\r\n            var decimalSep = '.';\r\n            var highPrecisionLimit = 0;\r\n            if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                if (splitPrecision.length == 2) {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    highPrecisionLimit = splitPrecision[1];\r\n                }\r\n            }\r\n            element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                mDec: highPrecisionLimit,\r\n                aPad: false,\r\n                aSep: thousandSep,\r\n                aDec: decimalSep,\r\n                vMin: Number.NEGATIVE_INFINITY,\r\n                vMax: Number.POSITIVE_INFINITY,\r\n            });\r\n        }\r\n        bindOtherWatcher();\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    function smartTextField3_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n        scope.typing = false;\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n        if (scope.type === 'area') {\r\n            $timeout(function () {\r\n                angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n            });\r\n        }\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n\r\n            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            $timeout(function () {\r\n                //updateView();\r\n                scope.focus = false;\r\n                scope.typing = false;\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n                scope.onBlur({ $event: e });\r\n                if (scope.type == \"area\" && scope.ngModel == \"\") {\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"hidden\");\r\n                }\r\n            });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            if (attrs.onKeyPress) {\r\n                scope.onKeyPress({ $event: e });\r\n            }\r\n            if (attrs.onEnter && e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n        var viewTimeout;\r\n        scope.ngKeyUp = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            clearInterval(viewTimeout);\r\n            viewTimeout=setInterval(function(){\r\n\t\t\t\tclearInterval(viewTimeout);\r\n\t\t\t\tupdateView();\r\n\t\t\t},1500);\r\n            scope.onKeyUp({ $event: e });\r\n            if (scope.type == \"area\") {\r\n                if ($(angular.element('#' + scope.textfieldId)).height() < 64)\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"hidden\");\r\n                else\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"auto\");\r\n            }\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            scope.onFocus({ $event: e });\r\n        };\r\n\r\n        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n        var updateView = function () {\r\n            try {\r\n                if (smartTextFieldService.modal.getModal(scope, ngModelCtrl) !== scope.prevModel) {\r\n\r\n                    /* Removed $timeout due to ngBlur gets fired before scope.ngModel */\r\n                    $timeout(function () {\r\n                        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n\r\n                        if (typeof scope.ngModel === 'function') {\r\n                            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                        }\r\n                    });\r\n                    //scope.$apply();\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n        var unbindModelWatcher;\r\n        if (typeof scope.ngModel != 'function') {\r\n            unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                if (scope.type === 'area') {\r\n                    $timeout(function () {\r\n                        angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            unbindModelWatcher = scope.$watch(function () { return scope.ngModel(); }, function (newVal, oldVal) {\r\n                if (newVal != oldVal) {\r\n                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                    smartTextFieldService.setActiveClass(scope, element);\r\n                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    if (scope.type === 'area') {\r\n                        $timeout(function () {\r\n                            angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }, true);\r\n        }\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                if(scope.type === 'area'){\r\n                    smartTextFieldService.buildTemplate(scope, element, scope.onTextChange,attrs);\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                }\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n        unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            }\r\n            if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            if (newVal[1] || newVal[1] == \"true\") {\r\n                element.find('input').focus();\r\n            }\r\n        });\r\n\r\n        //function bindOtherWatcher() {\r\n        //    if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n        //        //if (!angular.isDefined(unbindOtherWatcher)) {\r\n\r\n        //        //}\r\n        //    }\r\n        //    else {\r\n        //        if (angular.isDefined(unbindOtherWatcher)) {\r\n        //            unbindOtherWatcher();\r\n        //        }\r\n        //    }\r\n        //}\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        updateView();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //bindOtherWatcher();\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField3_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        if (scope.timePicker === 'true') {\r\n            scope.timePicker = true;\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? moment.localeData()._longDateFormat.L : scope.placeholder;\r\n        if (scope.timePicker == true) {\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                scope.placeholder = scope.regionalFormat ? scope.regionalFormat : moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n            }\r\n            else {\r\n                scope.placeholder = moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n            }\r\n        }\r\n\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        scope.datetimePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker === true ? true : false);\r\n        scope.format = (scope.format ? scope.format : scope.datetimePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        scope.applyClientZone = false;\r\n        scope.isValueDateObj = false;\r\n        scope.doesContainDateString = false;\r\n        scope.dateFormat = scope.format;\r\n        scope.isDateBlank = false;\r\n\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.regionalFormat) {\r\n                scope.dateFormat = scope.regionalFormat;\r\n            }\r\n            else {\r\n                if (scope.timePicker == true) {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                }\r\n                else {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                }\r\n            }\r\n            scope.format = scope.dateFormat;\r\n        }\r\n\r\n        scope.convertIntoUTC = false;\r\n        if (typeof convertIntoUTC != 'undefined') {\r\n            scope.convertIntoUTC = convertIntoUTC;\r\n        }\r\n\r\n        //if (angular.isDefined(scope.$parent.$parent.property)) {\r\n        //    //this property (applyClientZone) comes from Config.js\r\n        //    if (angular.isDefined(scope.$parent.$parent.property.applyClientZone)) {\r\n        //        scope.applyClientZone = scope.$parent.$parent.property.applyClientZone;\r\n        //    }\r\n        //}\r\n\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            // smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            if (scope.isDateBlank) {\r\n                var targetedEle = document.activeElement;\r\n                if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                    //  scope.ngModel = null;\r\n                    scope.dateModel = null;\r\n                }\r\n                if (angular.isFunction(scope.onDateChange)) {\r\n                    scope.onDateChange({\r\n                        $date: scope.ngModel\r\n                    });\r\n                }\r\n            }\r\n\r\n            var selectedDate = smartTextFieldService.getSelectedDate();\r\n            if (selectedDate == '') {\r\n                $('#' + scope.textfieldId).val('');\r\n            }\r\n            if ($('#' + scope.textfieldId).find('input').daterangepicker())\r\n                $('#' + scope.textfieldId).find('input').daterangepicker().daterangepicker();\r\n            if (angular.isDefined(selectedDate) && scope.datetimePicker && selectedDate.indexOf('Date(') <= -1)\r\n                $('#' + scope.textfieldId).val(smartTextFieldService.getPreviousDate());\r\n            smartTextFieldService.setSelectedDate(undefined);\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            if (e.which != 32) {\r\n                var currentInputValue = $('#' + scope.textfieldId).val();\r\n                smartTextFieldService.setSelectedDate($('#' + scope.textfieldId).val());\r\n                if (currentInputValue == \"\") {\r\n                    scope.ngModel = null;\r\n                    scope.dateModel = \"\"\r\n                    scope.isDateBlank = true;\r\n                    if (angular.isFunction(scope.onDateChange)) {\r\n                        scope.onDateChange({\r\n                            $date: scope.ngModel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyUp') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            if (rulesValidationEvent == 'keyDown') {\r\n                scope.validateRules();\r\n            }\r\n            ////to control number of down arrow,up arrow signs on number fields\r\n            //if (e.keyCode == 38 || e.keyCode == 40)\r\n            //    e.preventDefault();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyPress = function (e) {\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateDateValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        //var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n\r\n        //});\r\n\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindMin;\r\n        var unbindMax\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMin)) {\r\n                    unbindMin = scope.$watch('min', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMax)) {\r\n                    unbindMax = scope.$watch('max', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n                if (angular.isDefined(unbindMin)) {\r\n                    unbindMin();\r\n                }\r\n                if (angular.isDefined(unbindMax)) {\r\n                    unbindMax();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        smartTextFieldService.updateDateClass(scope, element);\r\n        smartTextFieldService.assignDateEvents(scope, element);\r\n        bindOtherWatcher();\r\n        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n            if (newVal) {\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                if (rulesValidationEvent == 'change') {\r\n                    scope.validateRules();\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n        });\r\n        var timeOffset = 20; // this is a fixed number in-case of timeZoneOffset is not defined.\r\n        scope.updatingDateModel = function (dateObj) {\r\n            if (typeof timeZoneOffset != 'undefined') {\r\n                timeOffset = timeZoneOffset;\r\n            }\r\n\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable && scope.regionalFormat) {\r\n                timeOffset = 0;\r\n            }\r\n\r\n            if (timeOffset == 20) {\r\n                var adjustTimeZone = 0;\r\n                if (moment().zone() == -720) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n                scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n            }\r\n            else {\r\n                var adjustTimeZone = 0;\r\n                if (timeOffset == -12) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n\r\n                if (typeof dateObj == 'object') {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).add(timeOffset * 60, 'minute').add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                } else {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).utc().zone(timeOffset * -1).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    //scope.dateModel = moment(dateObj).zone(timeOffset * -1).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                }\r\n            }\r\n\r\n        }\r\n        // should be modified to discard UTC Convertion \r\n        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n            if (scope.timePicker === 'true') {\r\n                scope.timePicker = true;\r\n            }\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable && scope.regionalFormat) {\r\n                $timeout(function () {\r\n                    scope.dateModel = element.find('input').val();\r\n                }, 250);\r\n            }\r\n            if (!scope.dateModifiedbyUser) {\r\n                if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                    if (scope.regionalFormat) {\r\n                        scope.dateFormat = scope.regionalFormat;\r\n                    }\r\n                    else {\r\n                        if (scope.timePicker == true) {\r\n                            scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                        }\r\n                        else {\r\n                            scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                        }\r\n                    }\r\n                    scope.dateFormat = scope.dateFormat.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                    scope.format = scope.dateFormat;\r\n                }\r\n                else {\r\n                    scope.dateFormat = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                }\r\n\r\n                scope.isDateBlank = false;\r\n                scope.doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                if (newVal == \"\" || newVal == null || typeof newVal == 'function') {\r\n                    newVal = Date.now();\r\n                    scope.isDateBlank = true;\r\n                    scope.isValueDateObj = false;\r\n                } else {\r\n                    if (scope.doesContainDateString) {\r\n                        var dateStr = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                        var tmpModel = dateStr;\r\n                        if (dateStr.indexOf('Date') <= -1) {\r\n                            tmpModel = tmpModel.split('+');\r\n                            tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                        }\r\n                        scope.updatingDateModel(tmpModel);\r\n                        //scope.dateModel = moment(tmpModel).format(scope.dateFormat);\r\n                        //smartTextFieldService.updateDateValue(scope, element);\r\n                    }\r\n                    else {\r\n                        if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                            scope.isValueDateObj = true;\r\n                        } else if (Object.prototype.toString.call(newVal) === '[object String]' && newVal.indexOf('T') > 0) {\r\n                            //scope.isValueDateObj = true;\r\n                        } else {\r\n                            newVal = parseInt(newVal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.placeholder = scope.format;\r\n                //scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                if (!scope.isDateBlank) {\r\n                    if (!scope.doesContainDateString) {\r\n                        //if (scope.applyClientZone) {\r\n                        //    scope.dateModel = moment(newVal).parseZone().format(scope.dateFormat);\r\n                        //}\r\n                        //else {\r\n                        scope.updatingDateModel(newVal);\r\n                        //scope.dateModel = moment(newVal).format(scope.dateFormat);\r\n                        //}\r\n                    }\r\n                } else {\r\n                    scope.dateModel = \"\";\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n                smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n            }\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n            scope.dateModifiedbyUser = false;\r\n\r\n            //smartTextFieldService.updateDateValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n        });\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            //unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindNgModel();\r\n            unbindDateModel();\r\n            if (angular.isDefined(unbindMin)) {\r\n                unbindMin();\r\n            }\r\n            if (angular.isDefined(unbindMax)) {\r\n                unbindMax();\r\n            }\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    function SmartTextField3_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate, $window, persistenceService) {\r\n        if (typeof scope.id != 'undefined' && typeof scope.masterData != 'undefined') {\r\n            scope.masterData = JSON.parse(scope.masterData);\r\n            if (scope.masterData.hasOwnProperty('parentId')) {\r\n                persistenceService.setDocumentFields(scope.masterData.parentId, scope.id);\r\n            }\r\n            else {\r\n                persistenceService.setDocumentFields(null, scope.id);\r\n            }\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            console.log(scope.displayModel);\r\n\r\n            //updateView();\r\n\r\n            //console.log(scope.displayModel);\r\n            scope.onChange({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: scope.displayModel\r\n                }\r\n            });\r\n\r\n            ////scope.ngModel = e.target.value;\r\n            //smartTextFieldService.updateAutocompleteValue (scope, element);\r\n            //smartTextFieldService.setActiveClass(scope, element);\r\n            //// if (rulesValidationEvent == 'change') {\r\n            //smartTextFieldService.validateRules(scope, ngModelCtrl, element);\r\n            //smartTextFieldService.updateTextFieldClass(scope, element);\r\n            ////  }\r\n            ////scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n\r\n\r\n            if (scope.ngModel && scope.displayformat) {\r\n                var splittedDisplayFormat = [];\r\n                if (scope.displayformat.indexOf(\":\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split(':');\r\n                else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                else\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                var result = \"\";\r\n                for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                    result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                    if (i < splittedDisplayFormat.length - 1) {\r\n                        if (scope.displayformat.indexOf(\"-\") > 0)\r\n                            result += '-';\r\n                        else if (scope.displayformat.indexOf(\":\") > 0)\r\n                            result += ':';\r\n                    }\r\n                }\r\n\r\n                // P2P-16866\r\n                if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n\r\n                    if (e.target.value.trim() == '' || result !== scope.displayModel) {\r\n                        scope.displayModel = '';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            scope.focus = false;\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            $timeout(function () {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            });\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n            try {\r\n                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                }\r\n            }\r\n            catch (e) { }\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            ////var val = e.target.value;\r\n\r\n            //scope.displayModel = e.target.value;\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n\r\n        };\r\n        scope.elmVal = null;\r\n        scope.ngKeyUp = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            //if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n            //    scope.elmVal = e.target.value;\r\n            //    scope.onChange({\r\n            //        $event: {\r\n            //            data: element.find('#' + scope.textfieldId),\r\n            //            displayModel: e.target.value\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n        scope.search = function (e) {\r\n            scope.checkMasterFlag = false;\r\n            if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n                scope.elmVal = e.target.value;\r\n                scope.onChange({\r\n                    $event: {\r\n                        data: element.find('#' + scope.textfieldId),\r\n                        displayModel: e.target.value\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                if (typeof scope.id != 'undefined') {\r\n                    getMasterDataList(scope.id, scope.masterData);\r\n                }\r\n            }\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            var Obj = elm.devbridgeAutocomplete();\r\n            if (elm.val() == '' && Obj) {\r\n                scope.checkMasterFlag = true;\r\n                Obj.clear();\r\n                scope.elmVal = '';\r\n            }\r\n\r\n            if (typeof scope.id != 'undefined' && elm.val() == '') {\r\n                getMasterDataList(scope.id, scope.masterData);\r\n            }\r\n\r\n            scope.onFocus({ $event: e });\r\n        }\r\n\r\n\r\n\r\n\r\n        function getMasterDataList(id, masterDataConfig)\r\n        {\r\n            if (typeof masterDataConfig == 'string') {\r\n                masterDataConfig = JSON.parse(masterDataConfig);\r\n                scope.masterData = masterDataConfig;\r\n            }\r\n            try {\r\n                if (persistenceService.masterPersistenceService.getAutoSuggestList(id, masterDataConfig).length > 0) {\r\n                    if (!$('#' + scope.textfieldId).devbridgeAutocomplete() || $('#' + scope.textfieldId).devbridgeAutocomplete() && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.filterKeys != filterOptions.filterKeys) && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.displayFormat != filterOptions.displayFormat) && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.optionFormat != filterOptions.optionFormat)) {\r\n                        if ($('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                            $('#' + scope.textfieldId).devbridgeAutocomplete('dispose');\r\n                            $('#' + scope.textfieldId).devbridgeAutocomplete();\r\n\r\n                        }\r\n                        filterOptions.lookup = persistenceService.masterPersistenceService.getAutoSuggestList(id, masterDataConfig)\r\n\r\n                        autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete(filterOptions).devbridgeAutocomplete();\r\n\r\n                    }\r\n\r\n\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(persistenceService.masterPersistenceService.getAutoSuggestList(id, masterDataConfig));\r\n                    if ($('#' + scope.textfieldId).devbridgeAutocomplete().options.lookup != [] && $('#' + scope.textfieldId).val().length == 0) {\r\n                        var elm = $(element).find('#' + scope.textfieldId);\r\n                        elm.off('change', false);\r\n                        elm.off(\"blur\", false);\r\n                        scope.checkMasterFlag = true;\r\n                    }\r\n                    else {\r\n                        var elm = $(element).find('#' + scope.textfieldId);\r\n                        elm.on(\"change\", function (el) {\r\n                            //console.log(el);\r\n                            //onChangeCallback(el);\r\n                        });\r\n                        elm.on(\"blur\", scope.ngBlur);\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateAutocompleteValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.displayModel = smartTextFieldService.getDisplayData(newVal, scope);\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);     \r\n            if (scope.id) {\r\n                persistenceService.masterPersistenceService.setSelectedValue(scope.id, scope.masterData, newVal);\r\n            }\r\n\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['focus', 'isRemovable'], function (newVal, oldVal) {\r\n                        smartTextFieldService.setActiveClass(scope, element);\r\n                        smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var unbindValidationWatcher = scope.$watchGroup(['isMandatory', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[1] != oldVal[1] || newVal[2] != oldVal[2]) {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // key to be used to bind options\r\n        var filterKeys;\r\n        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n        }\r\n        else {\r\n            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n        }\r\n        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n        scope.ndisplayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n        /*\r\n         * Check if the options are updated\r\n         */\r\n        var autoCompleteField;\r\n        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n            try {\r\n                var checkobj = {};\r\n                if (typeof scope.id != 'undefined') {\r\n                    var key = scope.id;\r\n\r\n                    checkobj = scope.masterData;//persistenceService.masterPersistenceService.getPersistenceConfig(key);\r\n\r\n                }\r\n\r\n                if (scope.checkMasterFlag) {\r\n\r\n                    var suggestedObjs = _.filter(newOptions, function (option) {\r\n                        return option[checkobj.filterKey] == scope.suggestedObject.filterKey\r\n\r\n                    });\r\n                    if (suggestedObjs.length > 0) {\r\n                        var suggestObj = suggestedObjs[0];\r\n                        angular.element(document).trigger('click');\r\n                        scope.$evalAsync(function () {\r\n                            scope.displayModel = scope.suggestedObject.displayKey;\r\n                            scope.ngModel = suggestObj;\r\n                            updateView();\r\n                            $timeout(function () {\r\n                                scope.onSelect({\r\n                                    $event: {\r\n                                        data: suggestObj\r\n                                    }\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    if (!$('#' + scope.textfieldId).devbridgeAutocomplete() || $('#' + scope.textfieldId).devbridgeAutocomplete() && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.filterKeys != searchOptions.filterKeys) && ($('#' + scope.textfieldId).devbridgeAutocomplete().options.displayFormat != searchOptions.displayFormat)) {\r\n                        if ($('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                            $('#' + scope.textfieldId).devbridgeAutocomplete('dispose');\r\n                            $('#' + scope.textfieldId).devbridgeAutocomplete();\r\n\r\n                        }\r\n                        searchOptions.lookup = smartTextFieldService.getFormattedData(newOptions, scope);\r\n                        autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete(searchOptions).devbridgeAutocomplete();\r\n\r\n                    }\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(smartTextFieldService.getFormattedData(newOptions, scope));\r\n                }\r\n            }\r\n            catch (e) { }\r\n        });\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        smartTextFieldService.assignAutocompleteEvents(scope, element);\r\n        bindOtherWatcher();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //Closing the suggestions on scroll to prevent overlapping issue\r\n        angular.element($window).scroll(function (e) {\r\n            hideAutoOnScroll();\r\n        });\r\n\r\n        angular.element(\".modal, .modal-content\").scroll(function (e) {\r\n            hideAutoOnScroll();\r\n        });\r\n\r\n        function hideAutoOnScroll() {\r\n            if (autoCompleteField != undefined) {\r\n                if (autoCompleteField.visible) {\r\n                    autoCompleteField.hide();\r\n                }\r\n            }\r\n        }\r\n\r\n        var checkMasterFlag = false;\r\n\r\n\r\n        var searchOptions = {\r\n            filterKeys: filterKeys,\r\n            optionFormat: optionFormat,\r\n            displayFormat: scope.ndisplayFormat,\r\n            //lookup: smartTextFieldService.getFormattedData(newOptions, scope),\r\n            width: scope.width,\r\n            showNoSuggestionNotice: showNoSuggestion,\r\n            noSuggestionNotice: noSuggestionNotice,\r\n            minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n            onSelect: function (suggestion) {\r\n                angular.element(document).trigger('click');\r\n                scope.$evalAsync(function () {\t\t\r\n                    scope.suggestedObject = suggestion;\r\n                    scope.displayModel = smartTextFieldService.getDisplayData(suggestion, scope);\r\n                    scope.ngModel = suggestion;\r\n                    updateView();\r\n                    $timeout(function () {\t\r\n                        if (scope.id) {\r\n                            persistenceService.masterPersistenceService.saveMasterDataForRootField(scope.id, scope.masterData, scope.suggestedObject);\r\n                        }\r\n                        scope.onSelect({\r\n                            $event: {\r\n                                data: suggestion\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        };\r\n        var filterOptions = {\r\n            filterKeys: '[displayKey]',\r\n            optionFormat: '{displayKey}',\r\n            displayFormat: '{displayKey}',\r\n            //lookup: persistenceService.masterPersistenceService.getAutoSuggestList(id),//smartTextFieldService.getFormattedData(newOptions, scope),\r\n            width: scope.width,\r\n            showNoSuggestionNotice: showNoSuggestion,\r\n            noSuggestionNotice: noSuggestionNotice,\r\n            minChars: 0,\r\n            onSelect: function (suggestion) {\r\n                angular.element(document).trigger('click');\r\n                scope.$evalAsync(function () {\r\n\r\n                    scope.suggestedObject = suggestion;\r\n\r\n                    $timeout(function () {\r\n                        persistenceService.masterPersistenceService.saveMasterDataForRootField(scope.id, scope.masterData, scope.suggestedObject);\r\n                        scope.onChange({\r\n\r\n                            $event: {\r\n                                data: element.find('#' + scope.textfieldId),\r\n                                displayModel: element.find('#' + scope.textfieldId).val()\r\n\r\n                            }\r\n                        });\r\n                        element.find('#' + scope.textfieldId).focus();\r\n                        scope.checkMasterFlag = true;\r\n\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindOptions();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n            unbindValidationWatcher();\r\n        });\r\n    }\r\n        \r\n    function smartTextField3_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            // if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    scope.ngModel = parseFloat(e.target.value);\r\n            //}\r\n            updateView();\r\n            //scope.ngModel = parseFloat(e.target.value);\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    var num = e.target.value;\r\n            //    if (num.trim() != '') {\r\n            //        scope.ngModel = parseFloat(num);\r\n            //    }\r\n            //    else {\r\n            //        scope.ngModel = null;\r\n            //    }\r\n            //}\r\n            updateView();\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            if (scope.type == 'number' || attrs.datanumeric) {\r\n                //to control number of +,-, signs and alphabets on number fields\r\n                var charCode = e.charCode || e.keyCode,\r\n                    textValue = e.currentTarget.value,\r\n                    decimalDigit = [],\r\n                    cc = String.fromCharCode(charCode),\r\n                    escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                    e.preventDefault();\r\n                }\r\n                // Restrict the 2 dots entering\r\n                if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                if (textValue) {\r\n                    decimalDigit = textValue.toString().split('.');\r\n                }\r\n                // Restrict the decimal value from entering\r\n                if (attrs.decimalprecision) {\r\n                    if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                    if (decimalDigit.length == 2) {\r\n                        if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.min != undefined || scope.min != null) {\r\n                    if (scope.min >= 0 && e.charCode == 45) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n            // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n            if (angular.isDefined(attrs.maxlength) && e.target.value.length == attrs.maxlength && e.charCode !== 0) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element);\r\n                //smartTextFieldService.updateTextValue(scope, element);\r\n                if (scope.ngModel != null) {\r\n                    var min = 0;\r\n                    var max = 0;\r\n                    if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                        if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                            min = 0;\r\n                            max = 0;\r\n                        }\r\n                        else {\r\n                            min = MinPrecessionValue;//global default\r\n                            max = MaxPrecessionValue;//global default\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length == 2) {\r\n                                min = splitPrecision[0];\r\n                                max = splitPrecision[1];\r\n                            }\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (scope.minmaxprecision) {\r\n                            min = JSON.parse(scope.minmaxprecision)[0];\r\n                            max = JSON.parse(scope.minmaxprecision)[1];\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                    var valueToModel;\r\n                    if (scope.ngModel === '') {\r\n                        valueToModel = scope.ngModel;\r\n                    }else if (scope.currencySymbol) {\r\n                        valueToModel = scope.currencySymbol + $filter('minPrecisionHandler')(scope.ngModel, min, max, false);\r\n                    }else {\r\n                        valueToModel = $filter('minPrecisionHandler')(scope.ngModel, min, max, false);\r\n                    }\r\n                    element.find('#' + scope.textfieldId).val(valueToModel);\r\n                    if (!scope.ngModel) {\r\n                        var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n                        if (num != '') {\r\n                            scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        else {\r\n                            scope.ngModel = null;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.ngModel !== scope.prevModel) {\r\n                        $timeout(function () {\r\n                            scope.prevModel = scope.ngModel;\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            updateView();\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                    aSign: scope.currencySymbol,\r\n                    mDec: 0,\r\n                    aPad: false,\r\n                    aSep: thousandSep,\r\n                    aDec: decimalSep,\r\n                    vMin: Number.NEGATIVE_INFINITY,\r\n                    vMax: Number.POSITIVE_INFINITY\r\n                });\r\n            } else {\r\n                element.find('#' + scope.textfieldId).autoNumeric();\r\n            }\r\n        }\r\n        else {\r\n            var thousandSep = ',';\r\n            var decimalSep = '.';\r\n            var highPrecisionLimit = 0;\r\n            if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                if (splitPrecision.length == 2) {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    highPrecisionLimit = splitPrecision[1];\r\n                }\r\n            }\r\n            element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                aSign: scope.currencySymbol,\r\n                mDec: highPrecisionLimit,\r\n                aPad: false,\r\n                aSep: thousandSep,\r\n                aDec: decimalSep,\r\n                vMin: Number.NEGATIVE_INFINITY,\r\n                vMax: Number.POSITIVE_INFINITY,\r\n            });\r\n        }\r\n        bindOtherWatcher();\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    angular.module('SMART2').factory('smartTextFieldService', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', '$translate', '$timeout', smartTextFieldServiceFunc])\r\n    function smartTextFieldServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile, $translate, $timeout) {\r\n        var checkIfActive = function (scope) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                return true;\r\n            }\r\n            if (scope.type == 'number' && scope.ngModel !== 0 + '' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n            }\r\n            if (scope.type != 'number' && scope.type != 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n            }\r\n            if (scope.type == 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        var setActiveClass = function (scope, element, eventType) {\r\n            scope.active = checkIfActive(scope);\r\n            var el = element.find('#' + scope.textfieldId + '_label');\r\n\r\n            if ((typeof scope.active !== 'undefined' && scope.active == true) || (typeof scope.validate !== 'undefined' && scope.validate == true)) {\r\n                if (!el.hasClass('active')) {\r\n                    el.addClass('active');\r\n                }\r\n            } else {\r\n                if (el.hasClass('active')) {\r\n                    el.removeClass('active');\r\n                }\r\n            }\r\n        }\r\n\r\n        var updateTextFieldClass = function (scope, element) {\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            var elmContainer = $(element).find('#' + scope.textfieldId + '_container');\r\n            var lbl = $(element).find('#' + scope.textfieldId + '_label');\r\n            if (typeof scope.validate !== 'undefined' && scope.validate == true && typeof scope.errorMessage !== 'undefined' && scope.errorMessage) {\r\n                if (!elm.hasClass('invalid')) {\r\n                    elm.addClass('invalid');\r\n                    lbl.attr('data-error', $translate.instant(scope.errorMessage));\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n                }\r\n            }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'right') {\r\n                if (!elm.hasClass('right-align')) {\r\n                    elm.addClass('right-align');\r\n                }\r\n                if (!lbl.hasClass('right-align')) {\r\n                    lbl.addClass('right-align');\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('right-align')) {\r\n                    elm.removeClass('right-align');\r\n                }\r\n                if (lbl.hasClass('right-align')) {\r\n                    lbl.removeClass('right-align');\r\n                }\r\n            }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'left') {\r\n                if (!elm.hasClass('left-align')) {\r\n                    elm.addClass('left-align');\r\n                }\r\n                if (!lbl.hasClass('left-align')) {\r\n                    lbl.addClass('left-align');\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('left-align')) {\r\n                    elm.removeClass('left-align');\r\n                }\r\n                if (lbl.hasClass('left-align')) {\r\n                    lbl.removeClass('left-align');\r\n                }\r\n            }\r\n\r\n            if ((typeof scope.readonly !== 'undefined' && (scope.readonly == true || scope.readonly == 'true')) || (typeof scope.disable !== 'undefined' && (scope.disable === 'true' || scope.disable === true))) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n                elmContainer.addClass('readOnlyField');\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n                }\r\n            }\r\n            else {\r\n                elm.prop(\"readonly\", false);\r\n                elm.attr(\"disabled\", false);\r\n                elm.removeAttr('tabindex');\r\n                elmContainer.removeClass('readOnlyField');\r\n            }\r\n\r\n\r\n            if (typeof scope.autocomplete != 'undefiend' && (scope.autocomplete == 'true' || scope.autocomplete == true))// \"{{autocomplete?'on':'off'}}\")\r\n            {\r\n\r\n            }\r\n            else {\r\n                // elm.autocomplete().disable();\r\n            }\r\n\r\n            //if (typeof scope.disable !== 'undefined' && scope.disable == true) {\r\n            //    elm.attr(\"disabled\", \"disabled\")\r\n            //}\r\n            //else {\r\n            //    elm.attr(\"disabled\", false);\r\n            //}\r\n\r\n\r\n            if (!elm.hasClass('ng-valid')) {\r\n                elm.addClass('ng-pristine ng-valid ng-scope ng-touched');\r\n            }\r\n\r\n\r\n            if (typeof scope.placeholder !== 'undefined' && scope.placeholder != '') {\r\n                elm.attr(\"placeholder\", scope.placeholder)\r\n            }\r\n\r\n            //Optional Field\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory == false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var container = $(element).find('#' + scope.textfieldId + '_container');\r\n                if (typeof optionalField == 'undefiend' || (typeof optionalField !== 'undefiend' && optionalField.length == 0)) {\r\n                    container.append(buildOptionalFieldTemplate(scope));\r\n                    optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n                    if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                        optionalField.bind(\"click\", scope.hideShowField);\r\n                    }\r\n                }\r\n                if (!container.hasClass('optionalField')) {\r\n                    container.addClass('optionalField');\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (typeof optionalField !== 'undefiend' && optionalField.length > 0) {\r\n                    optionalField.remove();\r\n                }\r\n            }\r\n\r\n            if (scope.type === 'text' || scope.type === 'number' || scope.type === 'area') {\r\n                if (typeof scope.maxlength != 'undefined') {\r\n                    if (parseInt(scope.maxlength) > -1) {\r\n                        elm.attr('maxlength', parseInt(scope.maxlength));\r\n                    }\r\n                }\r\n            }\r\n\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                className = className.replace('ng-hide', \"\");\r\n                element.removeClass(className);\r\n            }\r\n            elmContainer.addClass(className);\r\n        }\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory === false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.textfieldId + '_opField');\r\n                return optionalField;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildPrefixiconTemplate = function (scope) {\r\n            if (typeof scope.prefixicon !== 'undefined' && scope.prefixicon) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldprefixiconTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_prefixicon');\r\n                html = html.replace('{{prefixicon}}', scope.prefixicon);\r\n                return html;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildSpinnerTemplate = function (scope) {\r\n            if (!scope.type == 'autocomplete' && typeof scope.loading !== 'undefined' && scope.loading == true) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldSpinnerTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_spinner');\r\n                return html;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildTextFieldTemplate = function (scope) {\r\n            var html = '';\r\n\r\n            if (scope.type === 'area' && scope.readonly === 'true') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaReadonlyElementTemplate.html');\r\n            } else if (scope.type === 'area') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaElementTemplate.html');\r\n            }\r\n            else {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldElementTemplate.html');\r\n            }\r\n            if (scope.type === 'password') {\r\n                html = html.replace('type=\"text\"', 'type=\"password\"');\r\n            }\r\n            html = html.replace('{{id}}', scope.textfieldId);\r\n            html = html.replace('{{showHideReadMoreContent}}', 'showHideReadMoreContent' + scope.textfieldId);\r\n            html = html.replace('{{showLessContent}}', $translate.instant('showLess'));\r\n            html = html.replace('{{showMoreContent}}', $translate.instant('showMoreContent'));\r\n            return html;\r\n        };\r\n\r\n        var buildInfoIconTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //if (scope.showwarning || scope.showinfo) {\r\n            //    html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        //var buildWarningIconTemplate = function (scope) {\r\n        //    var html = '';\r\n        //    if (scope.showwarning || scope.showinfo) {\r\n        //        html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldwarningiconTemplate.html');\r\n        //    }\r\n        //    return html;\r\n        //};\r\n\r\n        var buildLabelTemplate = function (scope) {\r\n            var html = '';\r\n            //if (typeof scope.label !== 'undefined' && scope.label.trim() != '') {\r\n            html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldLabelTemplate.html');\r\n            html = html.replace('{{id}}', scope.textfieldId + '_label');\r\n            html = html.replace('{{textfieldId}}', scope.textfieldId);\r\n            html = html.replace('{{label}}', typeof scope.label === 'undefined' ? '' : scope.label);\r\n            if (!scope.label) {\r\n                html = html.replace('class=\"\"', 'class=\"empty-label\"');\r\n            }\r\n\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        var buildTemplate = function (scope, element, onChangeCallback, attrs) {\r\n            var container = $('<div/>', { id: scope.textfieldId + '_container' });// document.createElement('div');\r\n\r\n            var css = '';\r\n            if ((scope.isMandatory === false || scope.isMandatory === 'false') && scope.isRemovable === true) {\r\n                css += ' optionalField';\r\n            }\r\n            if (scope.showinfo || scope.showwarning) {\r\n                css += ' field-has-icon';\r\n                //if (scope.showinfo && scope.showwarning) {\r\n                //    css += ' field-has-two-icons';\r\n                //}\r\n            }\r\n            if (scope.readonly === 'true' || scope.disable === 'true') {\r\n                css += ' readOnlyField';\r\n            }\r\n            //if (!scope.customoption) {\r\n            //    css += ' defaultSelected';\r\n            //}\r\n            //if (scope.validate === true && scope.errorMessage) {\r\n            //    css += ' invalid';\r\n            //}\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                element.removeClass(className);\r\n            }\r\n            container.addClass(className + ' input-field ' + css);\r\n\r\n\r\n            container.append('<div class=\"elements-include\">' + buildOptionalFieldTemplate(scope) + buildPrefixiconTemplate(scope) + buildSpinnerTemplate(scope) + buildTextFieldTemplate(scope) + buildLabelTemplate(scope) + '</div>');\r\n            container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.html(container);\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            elm.on(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            elm.on(\"blur\", scope.ngBlur);\r\n\r\n            if (scope.type != undefined && scope.type == 'number') {\r\n                // elm.attr('type', 'number');\r\n\r\n                if (scope.min != undefined && scope.min != null) {\r\n                    if ($.isNumeric(scope.min)) {\r\n                        elm.attr('min', scope.min);\r\n                    }\r\n                }\r\n                if (scope.max != undefined && scope.max != null) {\r\n                    if ($.isNumeric(scope.max)) {\r\n                        elm.attr('max', scope.max);\r\n                    }\r\n                }\r\n\r\n                elm.bind('keypress', scope.ngKeyPress);\r\n\r\n\r\n\r\n            } else if (scope.type != undefined && scope.type == 'autocomplete') {\r\n                elm.on(\"focus\", scope.ngFocus);\r\n\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n                }\r\n            } else if (scope.type != undefined && (scope.type == 'area' || scope.type == 'text')) {\r\n\r\n                // Need to add debounce for updating the ngModel\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n                }\r\n                //if (attrs.onKeyUp) {\r\n                //    elm.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n                //}\r\n                if (attrs.onKeyDown) {\r\n                    elm.bind('keydown', debounce(scope.ngKeyDown, 250));\r\n                }\r\n                if (attrs.onFocus) {\r\n                    elm.bind('focus', scope.ngFocus);\r\n                }\r\n                // Need to optimize this line, post finding of better approach. It is required for filtering ng-repeat\r\n                elm.bind('keyup', scope.ngKeyUp);\r\n            }\r\n\r\n\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n            }\r\n            updateTextFieldClass(scope, element);\r\n            setActiveClass(scope, element);\r\n\r\n            if (angular.isDefined(scope.charactercounter) && scope.charactercounter == 'true') {\r\n                elm.attr('length', scope.maxlength);\r\n                elm.characterCounter();\r\n            }\r\n\r\n        };\r\n\r\n        var updateTextValue = function (scope, element, ngModelCtrl) {\r\n            var elm = element.find('#' + scope.textfieldId),\r\n                addClassElem = element.find('#showHideReadMoreContent' + scope.textfieldId),\r\n                showLessContent = element.find('.readOnlyshowLess'),\r\n                showMoreContent = element.find('.readOnlyShowMore');\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n\r\n                if ((modal.getModal(scope, ngModelCtrl)).length < 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.hide();\r\n                } else if ((modal.getModal(scope, ngModelCtrl)).length > 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.show();\r\n                }\r\n            }\r\n\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n\r\n                addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n            }\r\n            if (scope.type === 'area' && scope.readonly === 'true') {\r\n\r\n                if (elm.text() !== modal.getModal(scope, ngModelCtrl)) { elm.text(modal.getModal(scope, ngModelCtrl)); }\r\n                //addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n                $(showLessContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showMoreContent).show();\r\n                    $(addClassElem).removeClass('areareadOnlyContentPara2');\r\n                    $(addClassElem).addClass('ellipsis areareadOnlyContentPara1');\r\n                });\r\n                $(showMoreContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showLessContent).show();\r\n                    $(addClassElem).removeClass('ellipsis areareadOnlyContentPara1');\r\n                    $(addClassElem).addClass('areareadOnlyContentPara2');\r\n\r\n                });\r\n            }\r\n            else {\r\n                if (elm.val() !== modal.getModal(scope, ngModelCtrl) && !scope.typing) {\r\n                    elm.val(modal.getModal(scope, ngModelCtrl));\r\n                }\r\n                if (scope.showTitle) {\r\n                    elm.attr('title', modal.getModal(scope, ngModelCtrl));\r\n                }\r\n                if (modal.getModal(scope, ngModelCtrl) === '') {\r\n                    elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                } else {\r\n                    elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                }\r\n\r\n                /* Adding class truncate to input*/\r\n                if (!elm.hasClass('materialize-textarea') && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                    elm.addClass('truncate');\r\n                } else {\r\n                    elm.removeClass('truncate')\r\n                };\r\n            }\r\n        \r\n        }\r\n        var modal = {\r\n            getModal: function (scope, ngModelCtrl) {\r\n                return typeof scope.ngModel == \"function\" ? ngModelCtrl.$modelValue : scope.ngModel;\r\n            },\r\n            setModal: function (scope, value, ngModelCtrl) {\r\n\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    ngModelCtrl.$setViewValue(value)\r\n                    ngModelCtrl.$render()\r\n                } else {\r\n                    scope.ngModel = value;\r\n                }\r\n            }\r\n        };\r\n\r\n        var updateDateValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.dateModel);\r\n            elm.attr('title', scope.dateModel);\r\n        }\r\n\r\n        var updateAutocompleteValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.displayModel);\r\n            elm.attr('title', scope.displayModel);\r\n        }\r\n\r\n\r\n        var checkRule = function (scope, element) {\r\n            var rules = scope.$eval(scope.rules);\r\n            var isFoundInvalid = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n                if (typeof rules[i] == 'object') {\r\n                    if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = rules[i].error;\r\n                        scope.errorModel = rules[i].error;\r\n                        break;\r\n                    } else {\r\n                        if (scope.type === 'date') {\r\n                            angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (!isFoundInvalid) {\r\n                        if (typeof scope.ngModel != 'object')\r\n                            var data = scope.ngModel;\r\n                        else\r\n                            var data = scope.displayModel;\r\n\r\n                        RuleEngine.isValid(rules[i], function (e) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = e.errorData.error;\r\n                            scope.errorModel = rules[i].error;\r\n                            isFoundInvalid = true;\r\n                        }, data);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var validateRules = function (scope, ngModelCtrl, element, attrs) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                scope.isActive = true;\r\n                return;\r\n            }\r\n\r\n            if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                if (attrs.noTrim == 'true') {\r\n                    //scope.ngModel = scope.ngModel;\r\n                } else {\r\n                    //scope.ngModel = scope.ngModel.trim();\r\n                    modal.setModal(scope, modal.getModal(scope, ngModelCtrl).trim(), ngModelCtrl);\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n            }\r\n\r\n            if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (typeof scope.ngModel === 'undefined' || scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (scope.clienterror) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (scope.type == 'number') {\r\n                if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                    angular.element('#' + scope.textfieldId).val('');\r\n                    return;\r\n                }\r\n                if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                    if (scope.rules) {\r\n                        checkRule(scope, element);\r\n                    }\r\n                    return;\r\n                }\r\n                //if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                //    scope.validate = true;\r\n                //    scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                //    scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                //    return;\r\n                //}\r\n\r\n            }\r\n\r\n            // CON-5898\r\n            if (scope.type == 'date' && !scope.rules) {\r\n                $('#' + scope.textfieldId).removeClass('invalid');\r\n            }\r\n\r\n            scope.validate = false;\r\n            scope.errorMessage = null;\r\n            scope.errorModel = null;\r\n\r\n            if (scope.rules) {\r\n                checkRule(scope, element);\r\n            }\r\n        };\r\n\r\n        var debounce = function (func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n        var updateDateClass = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            if (scope.type == 'date') {\r\n                if (!el.hasClass('datepicker')) {\r\n                    el.addClass('datepicker');\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        var assignDateEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.bind('keydown', scope.ngKeyDown);\r\n            el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', scope.ngKeyUp);\r\n\r\n        }\r\n\r\n        var assignAutocompleteEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            //el.bind('keydown', scope.ngKeyDown);\r\n            //el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n            el.on('input', debounce(scope.search, 250));\r\n\r\n        }\r\n\r\n        /*\r\n          * This function is required to generate value attribute \r\n          * and useful when up/down key is pressed\r\n          */\r\n        var getFormattedData = function (data, scope) {\r\n            if (!data || data.length == 0) {\r\n                return [];\r\n            }\r\n            for (var i = 0; i < data.length; i++) {\r\n                var str = scope.ndisplayFormat;\r\n                try {\r\n                    var parentSplit = str.split('{');\r\n                    for (var j = 0; j < parentSplit.length; j++) {\r\n                        var childSplit = parentSplit[j].split('}');\r\n                        for (var k = 0; k < childSplit.length; k++) {\r\n                            if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) { }\r\n                data[i].value = str.trim();\r\n            }\r\n            return data;\r\n        };\r\n        /*\r\n            *  Convert timestamp to UTC timestamp \r\n            */\r\n        var toUTC = function (date) {\r\n            return Date.UTC(\r\n                date.getFullYear()\r\n                , date.getMonth()\r\n                , date.getDate()\r\n                , date.getHours()\r\n                , date.getMinutes()\r\n                , date.getSeconds()\r\n                , date.getMilliseconds()\r\n            );\r\n        };\r\n\r\n        var getGridFormatToTimestamp = function (scope, stringdate) {\r\n            var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n            // tmpModel = tmpModel.split('+');\r\n            // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n            //if (scope.applyClientZone) {\r\n            //    return moment(tmpModel).parseZone().format(scope.dateFormat);\r\n            //}\r\n            //else {\r\n            return moment(tmpModel).format(scope.dateFormat);\r\n            //}\r\n        }\r\n\r\n        var updateNgModel = function (scope, timestamp) {\r\n            scope.dateModifiedbyUser = true;\r\n            if (scope.timePicker == true) {\r\n                if (scope.convertIntoUTC || timeZoneOffset != 20) {\r\n                    // that means the date will be saved in UTC Format\r\n                    scope.ngModel = moment(timestamp * 1000).add((timeZoneOffset * -60), 'minute').format('YYYY-MM-DDTHH:mm:ss');  //'\\/Date(' + ((timestamp - (moment().zone() * 60)) * 1000) + ')\\/';\r\n                } else {\r\n                    //This case is applied for Sourcing. because of the converstion happed before saving.\r\n                    scope.ngModel = '\\/Date(' + (timestamp * 1000) + ')\\/';\r\n                }\r\n            }\r\n            else {\r\n                // hooking a fixed time to fix the flipping issues.\r\n                // if (scope.convertIntoUTC) {\r\n                //scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                //}else\r\n                //{\r\n                //    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                //}\r\n\r\n                if (timeZoneOffset != 20) {\r\n                    scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                } else {\r\n                    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var createDatePicker = function (scope, element, ngModelCtrl) {\r\n            setTimeout(function () {\r\n                var picker = element.find('#' + scope.textfieldId);\r\n                var callApplyFuncFlag = true;\r\n                function setDateFormate(datePar) {\r\n                    updateNgModel(scope, datePar.unix());\r\n                    $timeout(function () {\r\n                        // if (scope.doesContainDateString) {\r\n\r\n                        //} else {\r\n                        //    if (scope.isValueDateObj) {\r\n                        //        var tempDate = datePar.format();\r\n                        //        scope.ngModel = new Date(tempDate);\r\n                        //    } else {\r\n                        //        scope.ngModel = (datePar.unix() * 1000);\r\n                        //    }\r\n                        //}\r\n                        // ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        scope.isDateBlank = false;\r\n                        if (angular.isFunction(scope.onDateChange)) {\r\n                            scope.onDateChange({ $event: { date: scope.ngModel }});\r\n                        }\r\n\r\n                    })\r\n                }\r\n                var minDate = angular.isDefined(scope.min) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(scope.dateFormat) : '';\r\n                var maxDate = angular.isDefined(scope.max) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(scope.dateFormat) : '';\r\n\r\n                var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                var pickerObj = picker.daterangepicker({\r\n                    \"singleDatePicker\": true,\r\n                    \"showDropdowns\": true,\r\n                    \"timePicker\": scope.datetimePicker,\r\n                    \"timePicker24Hour\": timePicker24Hour,\r\n                    \"timePickerIncrement\": timePickerIncrement,\r\n                    \"autoApply\": false,\r\n                    \"opens\": \"right\",\r\n                    \"drops\": \"down\",\r\n                    \"minDate\": minDate,\r\n                    \"maxDate\": maxDate,\r\n                    \"autoUpdateInput\": false,\r\n                    \"locale\": {\r\n                        \"format\": scope.dateFormat,\r\n                        'cancelLabel': $translate.instant('cancelBtn'),\r\n                        'applyLabel': $translate.instant('applyBtn')\r\n                    }\r\n                }, function (start, end, label) {\r\n                    callApplyFuncFlag = false;\r\n                    setDateFormate(start);\r\n                }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                    var pos = pickerObj.container.offset(),\r\n                        wHeight = window.innerHeight,\r\n                        srTop = $(window).scrollTop();\r\n                    if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                        pickerObj.drops = \"up\";\r\n                        pickerObj.move();\r\n                    } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                        pickerObj.drops = \"down\";\r\n                        pickerObj.move();\r\n                    }\r\n                }).data(\"daterangepicker\");\r\n\r\n                picker.on('apply.daterangepicker', function (ev, pickerObj) {\r\n                    if (callApplyFuncFlag) {\r\n                        setDateFormate(pickerObj.startDate)\r\n                    }\r\n                    callApplyFuncFlag = true;\r\n                    pickerObj.autoUpdateInput = true;\r\n                    pickerObj.updateElement();\r\n                    pickerObj.autoUpdateInput = false;\r\n                });\r\n\r\n                if (scope.isDateBlank) {\r\n                    picker.val('');\r\n                    scope.ngModel = \"\";\r\n                    // WS-2072\r\n                    //ngModelCtrl.$setViewValue('');\r\n\r\n                };\r\n            });\r\n        }\r\n\r\n        var getDisplayData = function (data, scope) {\r\n            if (data == undefined || data == null || data == '') {\r\n                return '';\r\n            }\r\n            var str = scope.ndisplayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                            evalResult = eval('data.' + childSplit[k]);\r\n                            evaluatedKeysCounter++;\r\n                            if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                evalResult = '';\r\n                                nullKeysCounter++;\r\n                            }\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                        }\r\n                    }\r\n                }\r\n                if (evaluatedKeysCounter == nullKeysCounter) {\r\n                    str = '';\r\n                }\r\n            }\r\n            catch (e) { }\r\n            return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n        }\r\n\r\n        function debounce(func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n\r\n        var service = {\r\n            buildTemplate: buildTemplate,\r\n            setActiveClass: setActiveClass,\r\n            updateTextFieldClass: updateTextFieldClass,\r\n            checkIfActive: checkIfActive,\r\n            validateRules: validateRules,\r\n            checkRule: checkRule,\r\n            updateTextValue: updateTextValue,\r\n            debounce: debounce,\r\n            updateDateClass: updateDateClass,\r\n            assignDateEvents: assignDateEvents,\r\n            getFormattedData: getFormattedData,\r\n            toUTC: toUTC,\r\n            getGridFormatToTimestamp: getGridFormatToTimestamp,\r\n            createDatePicker: createDatePicker,\r\n            updateDateValue: updateDateValue,\r\n            updateAutocompleteValue: updateAutocompleteValue,\r\n            getDisplayData: getDisplayData,\r\n            assignAutocompleteEvents: assignAutocompleteEvents,\r\n            modal: modal\r\n        };\r\n\r\n        return service;\r\n    }\r\n\r\n    angular.module('SMART2').factory('smartTextField3Service', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', '$translate', '$timeout', smartTextField3ServiceFunc])\r\n        function smartTextField3ServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile, $translate, $timeout) {\r\n        var _selectedDate, _previousDate;\r\n        var getSelectedDate = function () {\r\n            return _selectedDate;\r\n        };\r\n        var setSelectedDate = function (date) {\r\n            _selectedDate = date;\r\n        };\r\n        var getPreviousDate = function () {\r\n            return _previousDate;\r\n        };\r\n        var setPreviousDate = function (date) {\r\n            _previousDate = date;\r\n        };\r\n        var checkIfActive = function (scope) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                return true;\r\n        }\r\n            if (scope.type == 'number' && scope.ngModel !== 0 + '' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n        }\r\n            if (scope.type != 'number' && scope.type != 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n        }\r\n            if (scope.type == 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                return false;\r\n        }\r\n            return true;\r\n        }\r\n\r\n        var setActiveClass = function (scope, element, eventType) {\r\n            scope.active = checkIfActive(scope);\r\n            var el = element.find('#' + scope.textfieldId + '_label');\r\n\r\n            if ((typeof scope.active !== 'undefined' && scope.active == true) || (typeof scope.validate !== 'undefined' && scope.validate == true)) {\r\n                if (!el.hasClass('active')) {\r\n                    el.addClass('active');\r\n            }\r\n            } else {\r\n                if (el.hasClass('active')) {\r\n                    el.removeClass('active');\r\n            }\r\n        }\r\n        }\r\n\r\n        var updateTextFieldClass = function (scope, element) {\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            var elmContainer = $(element).find('#' + scope.textfieldId + '_container');\r\n            var lbl = $(element).find('#' + scope.textfieldId + '_label');\r\n            if (typeof scope.validate !== 'undefined' && scope.validate == true && typeof scope.errorMessage !== 'undefined' && scope.errorMessage) {\r\n                if (!elm.hasClass('invalid')) {\r\n                    elm.addClass('invalid');\r\n                    lbl.attr('data-error', $translate.instant(scope.errorMessage));\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n            }\r\n        }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'right') {\r\n                if (!elm.hasClass('right-align')) {\r\n                    elm.addClass('right-align');\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('right-align')) {\r\n                    elm.removeClass('right-align');\r\n            }\r\n        }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'left') {\r\n                if (!elm.hasClass('left-align')) {\r\n                    elm.addClass('left-align');\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('left-align')) {\r\n                    elm.removeClass('left-align');\r\n            }\r\n        }\r\n\r\n            if ((typeof scope.readonly !== 'undefined' && (scope.readonly == true || scope.readonly == 'true')) || (typeof scope.disable !== 'undefined' && (scope.disable === 'true' || scope.disable === true))) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n                elmContainer.addClass('readOnlyField');\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n            }\r\n            }\r\n            else {\r\n                elm.prop(\"readonly\", false);\r\n                elm.attr(\"disabled\", false);\r\n                elm.removeAttr('tabindex');\r\n                elmContainer.removeClass('readOnlyField');\r\n        }\r\n\r\n\r\n            if (typeof scope.autocomplete != 'undefiend' && (scope.autocomplete == 'true' || scope.autocomplete == true))// \"{{autocomplete?'on':'off'}}\")\r\n            {\r\n\r\n            }\r\n            else {\r\n                // elm.autocomplete().disable();\r\n        }\r\n\r\n            //if (typeof scope.disable !== 'undefined' && scope.disable == true) {\r\n            //    elm.attr(\"disabled\", \"disabled\")\r\n            //}\r\n            //else {\r\n            //    elm.attr(\"disabled\", false);\r\n            //}\r\n\r\n\r\n            if (!elm.hasClass('ng-valid')) {\r\n                elm.addClass('ng-pristine ng-valid ng-scope ng-touched');\r\n        }\r\n\r\n\r\n            if (typeof scope.placeholder !== 'undefined' && scope.placeholder != '') {\r\n                elm.attr(\"placeholder\", scope.placeholder)\r\n        }\r\n\r\n            //Optional Field\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory == false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var container = $(element).find('#' + scope.textfieldId + '_container');\r\n                if (typeof optionalField == 'undefiend' || (typeof optionalField !== 'undefiend' && optionalField.length == 0)) {\r\n                    container.append(buildOptionalFieldTemplate(scope));\r\n                    optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n                    if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                        optionalField.bind(\"click\", scope.hideShowField);\r\n                }\r\n            }\r\n                if (!container.hasClass('optionalField')) {\r\n                    container.addClass('optionalField');\r\n            }\r\n\r\n            }\r\n            else {\r\n                if (typeof optionalField !== 'undefiend' && optionalField.length > 0) {\r\n                    optionalField.remove();\r\n            }\r\n        }\r\n\r\n            if (scope.type === 'text' || scope.type === 'number' || scope.type === 'area') {\r\n                if (typeof scope.maxlength != 'undefined') {\r\n                    if (parseInt(scope.maxlength) > -1) {\r\n                        elm.attr('maxlength', parseInt(scope.maxlength));\r\n                }\r\n            }\r\n        }\r\n\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                className = className.replace('ng-hide', \"\");\r\n                element.removeClass(className);\r\n        }\r\n            elmContainer.addClass(className);\r\n        }\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory === false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.textfieldId + '_opField');\r\n                return optionalField;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildPrefixiconTemplate = function (scope) {\r\n            if (typeof scope.prefixicon !== 'undefined' && scope.prefixicon) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldprefixiconTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_prefixicon');\r\n                html = html.replace('{{prefixicon}}', scope.prefixicon);\r\n                return html;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildSpinnerTemplate = function (scope) {\r\n            if (!scope.type == 'autocomplete' && typeof scope.loading !== 'undefined' && scope.loading == true) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldSpinnerTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_spinner');\r\n                return html;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildTextFieldTemplate = function (scope) {\r\n            var html = '';\r\n            if (scope.type === 'area' && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaReadonlyElementTemplate.html');\r\n            } else if (scope.type === 'area') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaElementTemplate.html');\r\n            } else {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldElementTemplate.html');\r\n        }\r\n            if (scope.type === 'password') {\r\n                html = html.replace('type=\"text\"', 'type=\"password\"');\r\n        }\r\n            html = html.replace('{{id}}', scope.textfieldId);\r\n            html = html.replace('{{showHideReadMoreContent}}', 'showHideReadMoreContent' + scope.textfieldId);\r\n            html = html.replace('{{showLessContent}}', $translate.instant('showLess'));\r\n            html = html.replace('{{showMoreContent}}', $translate.instant('showMoreContent'));\r\n            return html;\r\n        };\r\n\r\n        var buildInfoIconTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //if (scope.showwarning || scope.showinfo) {\r\n            //    html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n            //var buildWarningIconTemplate = function (scope) {\r\n            //    var html = '';\r\n            //    if (scope.showwarning || scope.showinfo) {\r\n            //        html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldwarningiconTemplate.html');\r\n            //    }\r\n            //    return html;\r\n            //};\r\n\r\n        var buildLabelTemplate = function (scope) {\r\n            var html = '';\r\n            //if (typeof scope.label !== 'undefined' && scope.label.trim() != '') {\r\n            html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldLabelTemplate.html');\r\n            html = html.replace('{{id}}', scope.textfieldId + '_label');\r\n            html = html.replace('{{textfieldId}}', scope.textfieldId);\r\n            html = html.replace('{{label}}', typeof scope.label === 'undefined' ? '' : scope.label);\r\n            if (!scope.label) {\r\n                html = html.replace('class=\"\"', 'class=\"empty-label\"');\r\n        }\r\n\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        var buildTemplate = function (scope, element, onChangeCallback, attrs) {\r\n            var container = $('<div/>', { id: scope.textfieldId + '_container' });// document.createElement('div');\r\n\r\n            var css = '';\r\n            if ((scope.isMandatory === false || scope.isMandatory === 'false') && scope.isRemovable === true) {\r\n                css += ' optionalField';\r\n        }\r\n            if (scope.showinfo || scope.showwarning) {\r\n                css += ' field-has-icon';\r\n                //if (scope.showinfo && scope.showwarning) {\r\n                //    css += ' field-has-two-icons';\r\n                //}\r\n        }\r\n            if (scope.readonly === 'true' || scope.disable === 'true') {\r\n                css += ' readOnlyField';\r\n        }\r\n            //if (!scope.customoption) {\r\n            //    css += ' defaultSelected';\r\n            //}\r\n            //if (scope.validate === true && scope.errorMessage) {\r\n            //    css += ' invalid';\r\n            //}\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                element.removeClass(className);\r\n                if (className) {\r\n                    scope.className = className;\r\n                }\r\n            }\r\n            container.addClass(scope.className + ' input-field ' + css);\r\n\r\n\r\n            container.append('<div class=\"elements-include\">' + buildOptionalFieldTemplate(scope) + buildPrefixiconTemplate(scope) + buildSpinnerTemplate(scope) + buildTextFieldTemplate(scope) + buildLabelTemplate(scope) + '</div>');\r\n            container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.html(container);\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            elm.on(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            elm.on(\"blur\", scope.ngBlur);\r\n\r\n            if (scope.type != undefined && scope.type == 'number') {\r\n                // elm.attr('type', 'number');\r\n\r\n                if (scope.min != undefined && scope.min != null) {\r\n                    if ($.isNumeric(scope.min)) {\r\n                        elm.attr('min', scope.min);\r\n                }\r\n            }\r\n                if (scope.max != undefined && scope.max != null) {\r\n                    if ($.isNumeric(scope.max)) {\r\n                        elm.attr('max', scope.max);\r\n                }\r\n            }\r\n\r\n                elm.bind('keypress', scope.ngKeyPress);\r\n\r\n\r\n\r\n            } else if (scope.type != undefined && scope.type == 'autocomplete') {\r\n                elm.on(\"focus\", scope.ngFocus);\r\n\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n            }\r\n            } else if (scope.type != undefined && (scope.type == 'area' || scope.type == 'text')) {\r\n\r\n                // Need to add debounce for updating the ngModel\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n            }\r\n                //if (attrs.onKeyUp) {\r\n                //    elm.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n                //}\r\n                if (attrs.onKeyDown) {\r\n                    elm.bind('keydown', debounce(scope.ngKeyDown, 250));\r\n            }\r\n                if (attrs.onFocus) {\r\n                    elm.bind('focus', scope.ngFocus);\r\n            }\r\n                // Need to optimize this line, post finding of better approach. It is required for filtering ng-repeat\r\n                elm.bind('keyup', scope.ngKeyUp);\r\n            }\r\n\r\n\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n        }\r\n            updateTextFieldClass(scope, element);\r\n            setActiveClass(scope, element);\r\n\r\n            if (angular.isDefined(scope.charactercounter) && scope.charactercounter == 'true') {\r\n                elm.attr('length', scope.maxlength);\r\n                elm.characterCounter();\r\n        }\r\n\r\n        };\r\n\r\n        var updateTextValue = function (scope, element, ngModelCtrl) {\r\n            var elm = element.find('#' + scope.textfieldId),\r\n                addClassElem = element.find('#showHideReadMoreContent' + scope.textfieldId),\r\n                showLessContent = element.find('.readOnlyshowLess'),\r\n                showMoreContent = element.find('.readOnlyShowMore');\r\n                showLessContent.hide();\r\n                showMoreContent.hide();\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n                if (modal.getModal(scope, ngModelCtrl) && modal.getModal(scope, ngModelCtrl).length < 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.hide();\r\n                } else if (modal.getModal(scope, ngModelCtrl) && modal.getModal(scope, ngModelCtrl).length > 150) {\r\n                    addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n                    showLessContent.hide();\r\n                    showMoreContent.show();\r\n            }\r\n        }\r\n         \r\n            if (scope.type === 'area' && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                elm.text(modal.getModal(scope, ngModelCtrl));\r\n                $(showLessContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showMoreContent).show();\r\n                    $(addClassElem).removeClass('areareadOnlyContentPara2');\r\n                    $(addClassElem).addClass('ellipsis areareadOnlyContentPara1');\r\n                });\r\n                $(showMoreContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showLessContent).show();\r\n                    $(addClassElem).removeClass('ellipsis areareadOnlyContentPara1');\r\n                    $(addClassElem).addClass('areareadOnlyContentPara2');\r\n                });\r\n            }\r\n            else {\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    $timeout(function () {\r\n                        elm = element.find('#' + scope.textfieldId);\r\n                        var gm = modal.getModal(scope, ngModelCtrl);\r\n                        if (elm.val() !== gm) {\r\n                            elm.val(gm);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', gm);\r\n                        }\r\n                        if (gm === '' || typeof gm == 'undefined') {\r\n                            elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                            elm.attr('title', '');\r\n                        } else {\r\n                             angular.element('#' + scope.textfieldId+\"_label\").addClass(\"active\");\r\n                             elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                        }\r\n                    });\r\n                }else if (scope.type == 'number') {\r\n                    var modelVal = modal.getModal(scope, ngModelCtrl)\r\n                    if (typeof elm.autoNumeric == 'function') {\r\n                        if (elm.autoNumeric('get') != modelVal) {\r\n                            elm.autoNumeric('set', modelVal);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', elm.autoNumeric('get'));\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (elm.val() !== modelVal) {\r\n                            elm.val(modelVal);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', modelVal);\r\n                        }\r\n                    }\r\n                   \r\n                    if (modelVal === null && scope.placeholder === \"\") {\r\n                        elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                    } else {\r\n                        elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                    }\r\n                }\r\n                else {\r\n                    if (elm.val() !== modal.getModal(scope, ngModelCtrl)) {\r\n                        if (scope.typing) {\r\n                            smartTextFieldService.modal.setModal(scope, elm.val(), ngModelCtrl);\r\n                        } else {\r\n                            elm.val(modal.getModal(scope, ngModelCtrl));\r\n                        }\r\n\r\n                    }\r\n                    if (scope.showTitle) {\r\n                        elm.attr('title', modal.getModal(scope, ngModelCtrl));\r\n                    }\r\n                    if (modal.getModal(scope, ngModelCtrl) === '') {\r\n                        elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                    } else {\r\n                        elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                    }\r\n                }\r\n\r\n                /* Adding class truncate to input*/\r\n                if (!elm.hasClass('materialize-textarea') && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                    elm.addClass('truncate');\r\n                } else {\r\n                    elm.removeClass('truncate')\r\n            };\r\n        }\r\n            if (scope.type === 'area') {\r\n                    $timeout(function(){\r\n                         angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                    });\r\n            }\r\n       }\r\n\r\n        var modal = {\r\n                getModal: function (scope, ngModelCtrl) {\r\n                return typeof scope.ngModel == \"function\" ? ngModelCtrl.$modelValue : scope.ngModel;\r\n        },\r\n                setModal: function (scope, value, ngModelCtrl) {\r\n\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    ngModelCtrl.$setViewValue(value)\r\n                    ngModelCtrl.$render()\r\n                } else {\r\n                    scope.ngModel = value;\r\n                }\r\n        }\r\n        };\r\n\r\n        var updateDateValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.dateModel);\r\n            elm.attr('title', scope.dateModel);\r\n        }\r\n\r\n        var updateAutocompleteValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.displayModel);\r\n            elm.attr('title', scope.displayModel);\r\n        }\r\n\r\n\r\n        var checkRule = function (scope, element) {\r\n            var rules = scope.$eval(scope.rules);\r\n            var isFoundInvalid = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n                if (typeof rules[i] == 'object') {\r\n                    if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = rules[i].error;\r\n                        scope.errorModel = rules[i].error;\r\n                        break;\r\n                    } else {\r\n                        if (scope.type === 'date') {\r\n                            angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n                }\r\n                }\r\n                else {\r\n                    if (!isFoundInvalid) {\r\n                        if (typeof scope.ngModel != 'object')\r\n                            var data = scope.ngModel;\r\n                        else\r\n                            var data = scope.displayModel;\r\n\r\n                        RuleEngine.isValid(rules[i], function (e) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = e.errorData.error;\r\n                            scope.errorModel = rules[i].error;\r\n                            isFoundInvalid = true;\r\n                        }, data);\r\n                    }\r\n                    else {\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n        var validateRules = function (scope, ngModelCtrl, element, attrs) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                scope.isActive = true;\r\n                return;\r\n        }\r\n\r\n            if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                if (attrs.noTrim == 'true') {\r\n                    //scope.ngModel = scope.ngModel;\r\n                } else {\r\n                    //scope.ngModel = scope.ngModel.trim();\r\n                    var tempString = modal.getModal(scope, ngModelCtrl);\r\n                    if (tempString.trim().length <= 0) {\r\n                        modal.setModal(scope, tempString.trim(), ngModelCtrl);\r\n                    } else {\r\n                        modal.setModal(scope, tempString, ngModelCtrl);\r\n                }\r\n            }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n        }\r\n\r\n            if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (typeof scope.ngModel === 'undefined' || scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n\r\n                return;\r\n        }\r\n\r\n            if (scope.clienterror) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                return;\r\n        }\r\n\r\n            if (scope.type == 'number') {\r\n                if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                    angular.element('#' + scope.textfieldId).val('');\r\n                    return;\r\n            }\r\n                if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                    if (scope.rules) {\r\n                        checkRule(scope, element);\r\n                }\r\n                    return;\r\n            }\r\n                //if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                //    scope.validate = true;\r\n                //    scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                //    scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                //    return;\r\n                //}\r\n\r\n        }\r\n\r\n            // CON-5898\r\n            if (scope.type == 'date' && !scope.rules) {\r\n                $('#' + scope.textfieldId).removeClass('invalid');\r\n        }\r\n\r\n            scope.validate = false;\r\n            scope.errorMessage = null;\r\n            scope.errorModel = null;\r\n\r\n            if (scope.rules) {\r\n                checkRule(scope, element);\r\n        }\r\n        };\r\n\r\n        var debounce = function (func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n            };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n        };\r\n        };\r\n\r\n        var updateDateClass = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            if (scope.type == 'date') {\r\n                if (!el.hasClass('datepicker')) {\r\n                    el.addClass('datepicker');\r\n            }\r\n        }\r\n\r\n\r\n        }\r\n        var assignDateEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.bind('keydown', scope.ngKeyDown);\r\n            el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', scope.ngKeyUp);\r\n\r\n        }\r\n\r\n        var assignAutocompleteEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            //el.bind('keydown', scope.ngKeyDown);\r\n            //el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n            el.on('input', debounce(scope.search, 250));\r\n\r\n        }\r\n\r\n            /*\r\n              * This function is required to generate value attribute \r\n              * and useful when up/down key is pressed\r\n              */\r\n        var getFormattedData = function (data, scope) {\r\n            if (!data || data.length == 0) {\r\n                return [];\r\n        }\r\n            for (var i = 0; i < data.length; i++) {\r\n                var str = scope.ndisplayFormat;\r\n                try {\r\n                    var parentSplit = str.split('{');\r\n                    for (var j = 0; j < parentSplit.length; j++) {\r\n                        var childSplit = parentSplit[j].split('}');\r\n                        for (var k = 0; k < childSplit.length; k++) {\r\n                            if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n                catch (e) { }\r\n                data[i].value = str.trim();\r\n        }\r\n            return data;\r\n        };\r\n            /*\r\n                *  Convert timestamp to UTC timestamp \r\n                */\r\n        var toUTC = function (date) {\r\n            return Date.UTC(\r\n                date.getFullYear()\r\n                , date.getMonth()\r\n                , date.getDate()\r\n                , date.getHours()\r\n                , date.getMinutes()\r\n                , date.getSeconds()\r\n                , date.getMilliseconds()\r\n            );\r\n        };\r\n\r\n        var getGridFormatToTimestamp = function (scope, stringdate) {\r\n            var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n            // tmpModel = tmpModel.split('+');\r\n            // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n            //if (scope.applyClientZone) {\r\n            //    return moment(tmpModel).parseZone().format(scope.dateFormat);\r\n            //}\r\n            //else {\r\n            return moment(tmpModel).format(scope.dateFormat);\r\n            //}\r\n        }\r\n\r\n        var updateNgModel = function (scope, timestamp) {\r\n            scope.dateModifiedbyUser = true;\r\n            if (scope.timePicker == true) {\r\n                if (scope.convertIntoUTC || timeZoneOffset != 20) {\r\n                    // that means the date will be saved in UTC Format\r\n                    scope.ngModel = moment(timestamp * 1000).add((timeZoneOffset * -60), 'minute').format('YYYY-MM-DDTHH:mm:ss');  //'\\/Date(' + ((timestamp - (moment().zone() * 60)) * 1000) + ')\\/';\r\n                } else {\r\n                    //This case is applied for Sourcing. because of the converstion happed before saving.\r\n                    scope.ngModel = '\\/Date(' + (timestamp * 1000) + ')\\/';\r\n            }\r\n            }\r\n            else {\r\n                // hooking a fixed time to fix the flipping issues.\r\n                // if (scope.convertIntoUTC) {\r\n                //scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                //}else\r\n                //{\r\n                //    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                //}\r\n\r\n                if (timeZoneOffset != 20) {\r\n                    scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                } else {\r\n                    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n            }\r\n        }\r\n        }\r\n\r\n\r\n        var createDatePicker = function (scope, element, ngModelCtrl) {\r\n            setTimeout(function () {\r\n                var picker = element.find('#' + scope.textfieldId);\r\n                var callApplyFuncFlag = true;\r\n                function setDateFormate(datePar) {\r\n                    updateNgModel(scope, datePar.unix());\r\n                    ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    scope.$apply();\r\n                    $timeout(function () {\r\n                        // if (scope.doesContainDateString) {\r\n\r\n                        //} else {\r\n                        //    if (scope.isValueDateObj) {\r\n                        //        var tempDate = datePar.format();\r\n                        //        scope.ngModel = new Date(tempDate);\r\n                        //    } else {\r\n                        //        scope.ngModel = (datePar.unix() * 1000);\r\n                        //    }\r\n                        //}\r\n                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        scope.isDateBlank = false;                        \r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({ $event: { date: scope.ngModel } });\r\n                    }\r\n                        \r\n                    })\r\n            }\r\n                var minDate = angular.isDefined(scope.min) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(scope.dateFormat) : '';\r\n                var maxDate = angular.isDefined(scope.max) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(scope.dateFormat) : '';\r\n\r\n                var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                var pickerObj = picker.daterangepicker({\r\n                    \"singleDatePicker\": true,\r\n                    \"showDropdowns\": true,\r\n                    \"timePicker\": scope.datetimePicker,\r\n                    \"timePicker24Hour\": timePicker24Hour,\r\n                    \"timePickerIncrement\": timePickerIncrement,\r\n                    \"autoApply\": false,\r\n                    \"opens\": \"right\",\r\n                    \"drops\": \"down\",\r\n                    \"minDate\": minDate,\r\n                    \"maxDate\": maxDate,\r\n                    \"autoUpdateInput\": false,\r\n                    \"locale\": {\r\n                        \"format\": scope.dateFormat,\r\n                        'cancelLabel': $translate.instant('cancelBtn'),\r\n                        'applyLabel': $translate.instant('applyBtn')\r\n                        }\r\n                        }, function (start, end, label) {\r\n                    callApplyFuncFlag = false;\r\n                    setDateFormate(start);\r\n                }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                    setPreviousDate(pickerObj.element.val());\r\n                    var pos = pickerObj.container.offset(),\r\n                        wHeight = window.innerHeight,\r\n                        srTop = $(window).scrollTop();\r\n                    if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                        pickerObj.drops = \"up\";\r\n                        pickerObj.move();\r\n                    } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                        pickerObj.drops = \"down\";\r\n                        pickerObj.move();\r\n                }\r\n                }).data(\"daterangepicker\");\r\n\r\n                picker.on('apply.daterangepicker', function (ev, pickerObj) {\r\n                    if (callApplyFuncFlag) {\r\n                        setDateFormate(pickerObj.startDate)\r\n                }\r\n                    callApplyFuncFlag = true;\r\n                    pickerObj.autoUpdateInput = true;\r\n                    pickerObj.updateElement();\r\n                    pickerObj.autoUpdateInput = false;\r\n                    setPreviousDate(pickerObj.element.val());\r\n                    setSelectedDate('\\/Date(' + ((pickerObj.startDate.unix() * 1000) + 43200000) + ')\\/');\r\n                });\r\n\r\n                if (scope.isDateBlank) {\r\n                    picker.val('');\r\n                    scope.ngModel = \"\";\r\n                    // WS-2072\r\n                    //ngModelCtrl.$setViewValue('');\r\n\r\n            };\r\n            });\r\n        }\r\n\r\n        var getDisplayData = function (data, scope) {\r\n            if (data == undefined || data == null || data == '') {\r\n                return '';\r\n        }\r\n            var str = scope.ndisplayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                            evalResult = eval('data.' + childSplit[k]);\r\n                            evaluatedKeysCounter++;\r\n                            if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                evalResult = '';\r\n                                nullKeysCounter++;\r\n                        }\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                    }\r\n                }\r\n            }\r\n                if (evaluatedKeysCounter == nullKeysCounter) {\r\n                    str = '';\r\n            }\r\n        }\r\n            catch (e) { }\r\n            return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n        }\r\n\r\n            function debounce(func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n            };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n\r\n        var service = {\r\n                buildTemplate: buildTemplate,\r\n                setActiveClass: setActiveClass,\r\n                updateTextFieldClass: updateTextFieldClass,\r\n                checkIfActive: checkIfActive,\r\n                validateRules: validateRules,\r\n                checkRule: checkRule,\r\n                updateTextValue: updateTextValue,\r\n                debounce: debounce,\r\n                updateDateClass: updateDateClass,\r\n                assignDateEvents: assignDateEvents,\r\n                getFormattedData: getFormattedData,\r\n                toUTC: toUTC,\r\n                getGridFormatToTimestamp: getGridFormatToTimestamp,\r\n                createDatePicker: createDatePicker,\r\n                updateDateValue: updateDateValue,\r\n                updateAutocompleteValue: updateAutocompleteValue,\r\n                getDisplayData: getDisplayData,\r\n                assignAutocompleteEvents: assignAutocompleteEvents,\r\n                modal: modal,\r\n                setSelectedDate: setSelectedDate,\r\n                getSelectedDate: getSelectedDate,\r\n                setPreviousDate: setPreviousDate,\r\n                getPreviousDate: getPreviousDate\r\n        };\r\n\r\n        return service;\r\n    }\r\n\r\n    (function ($) {\r\n\r\n        $.extend({\r\n\r\n                debounce: function (fn, timeout, invokeAsap, ctx) {\r\n\r\n                if (arguments.length == 3 && typeof invokeAsap != 'boolean') {\r\n                    ctx = invokeAsap;\r\n                    invokeAsap = false;\r\n                }\r\n\r\n                var timer;\r\n\r\n                return function () {\r\n\r\n                    var args = arguments;\r\n                    ctx = ctx || this;\r\n\r\n                    invokeAsap && !timer && fn.apply(ctx, args);\r\n\r\n                    clearTimeout(timer);\r\n\r\n                    timer = setTimeout(function () {\r\n                        !invokeAsap && fn.apply(ctx, args);\r\n                        timer = null;\r\n                    }, timeout);\r\n\r\n                };\r\n\r\n        },\r\n\r\n                throttle: function (fn, timeout, ctx) {\r\n\r\n                var timer, args, needInvoke;\r\n\r\n                return function () {\r\n\r\n                    args = arguments;\r\n                    needInvoke = true;\r\n                    ctx = ctx || this;\r\n\r\n                    if (!timer) {\r\n                        (function () {\r\n                            if (needInvoke) {\r\n                                fn.apply(ctx, args);\r\n                                needInvoke = false;\r\n                                timer = setTimeout(arguments.callee, timeout);\r\n                            }\r\n                            else {\r\n                                timer = null;\r\n                        }\r\n                        })();\r\n                }\r\n\r\n                };\r\n\r\n        }\r\n\r\n        });\r\n\r\n    })(jQuery);\r\n    angular.module('SMART2').directive('smartCharacterCount', [function () {\r\n        return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                if (parseInt(attrs.smartCharacterCount) > -1) {\r\n                    element.attr('length', attrs.smartCharacterCount);\r\n                    element.characterCounter();\r\n                }\r\n        }\r\n    }\r\n    }]);\r\n\r\n})();\n/**\r\n*  Ajax Autocomplete for jQuery, version 1.2.24\r\n*  (c) 2015 Tomas Kirda\r\n*\r\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\r\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\r\n*/\r\n\r\n/*jslint  browser: true, white: true, plusplus: true, vars: true */\r\n/*global define, window, document, jQuery, exports, require */\r\n\r\n// Expose plugin as an AMD module if AMD loader is present:\r\n(function (factory) {\r\n    'use strict';\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(['jquery'], factory);\r\n    } else if (typeof exports === 'object' && typeof require === 'function') {\r\n        // Browserify\r\n        factory(require('jquery'));\r\n    } else {\r\n        // Browser globals\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n\r\n    var getCompiledOption = function (str, option) {\r\n        try {\r\n            //var keys = Object.keys(suggestion);\r\n\r\n            //for(var i=0; i<keys.length; i++) {\r\n            //    if(suggestion.hasOwnProperty(keys[i])) {\r\n            //        str = str.replace(new RegExp(\"{\"+keys[i]+\"}\", \"ig\"), suggestion[keys[i]]);\r\n            //    }\r\n            //}\r\n\r\n            var parentSplit = str.split('{');\r\n            for (var i = 0; i < parentSplit.length; i++) {\r\n                var childSplit = parentSplit[i].split('}');\r\n                for (var j = 0; j < childSplit.length; j++) {\r\n                    if (childSplit[j].indexOf('.') > 0 || option.hasOwnProperty(childSplit[j])) {\r\n                        str = str.replace(new RegExp(\"{\" + childSplit[j] + \"}\", \"ig\"), eval('option.' + childSplit[j]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch(e) {}\r\n        return str;\r\n    };\r\n\r\n    var\r\n        utils = (function () {\r\n            return {\r\n                escapeRegExChars: function (value) {\r\n                    return value.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n                },\r\n                createNode: function (containerClass) {\r\n                    var div = document.createElement('div');\r\n                    div.className = containerClass;\r\n                    div.style.position = 'absolute';\r\n                    div.style.display = 'none';\r\n                    div.onclick = \"event.stopPropagation()\";\r\n                    div.addEventListener('click', function () {\r\n                        event.stopPropagation();\r\n                    });\r\n                    return div;\r\n                }\r\n            };\r\n        }()),\r\n\r\n        keys = {\r\n            ESC: 27,\r\n            TAB: 9,\r\n            RETURN: 13,\r\n            LEFT: 37,\r\n            UP: 38,\r\n            RIGHT: 39,\r\n            DOWN: 40\r\n        };\r\n\r\n    function Autocomplete(el, options) {\r\n        var noop = function () { },\r\n            that = this,\r\n            defaults = {\r\n                ajaxSettings: {},\r\n                autoSelectFirst: false,\r\n                appendTo: document.body,\r\n                serviceUrl: null,\r\n                lookup: null,\r\n                onSelect: null,\r\n                width: 'auto',\r\n                minChars: 1,\r\n                maxHeight: 300,\r\n                deferRequestBy: 0,\r\n                params: {},\r\n                formatResult: Autocomplete.formatResult,\r\n                delimiter: null,\r\n                zIndex: 9999,\r\n                type: 'GET',\r\n                noCache: false,\r\n                onSearchStart: noop,\r\n                onSearchComplete: noop,\r\n                onSearchError: noop,\r\n                preserveInput: false,\r\n                containerClass: 'autocomplete-suggestions',\r\n                tabDisabled: false,\r\n                dataType: 'text',\r\n                currentRequest: null,\r\n                triggerSelectOnValidInput: true,\r\n                preventBadQueries: true,\r\n                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {\r\n                    //  Added by Sushant\r\n                    try {\r\n                        var str = '';\r\n                        for (var i = 0; i < that.filterKeys.length; i++) {\r\n                            str = str + eval('suggestion.' + that.filterKeys[i]).toLowerCase().trim() + ' ';\r\n                        }\r\n                        str = str.trim();\r\n                    }\r\n                    catch (e) { }\r\n                    return str.indexOf(queryLowerCase) > -1;\r\n                },\r\n                paramName: 'query',\r\n                transformResult: function (response) {\r\n                    return typeof response === 'string' ? $.parseJSON(response) : response;\r\n                },\r\n                showNoSuggestionNotice: false,\r\n                noSuggestionNotice: 'No results',\r\n                orientation: 'bottom',\r\n                forceFixPosition: false,\r\n                multiselect: false,\r\n                showLookup: false,\r\n                addnew: false,\r\n                loading: false\r\n            };\r\n\r\n        // Shared variables:\r\n        that.element = el;\r\n        that.el = $(el);\r\n        that.suggestions = [];\r\n        that.badQueries = [];\r\n        that.selectedIndex = -1;\r\n        that.currentValue = that.element.value;\r\n        that.intervalId = 0;\r\n        that.cachedResponse = {};\r\n        that.onChangeInterval = null;\r\n        that.onChange = null;\r\n        that.isLocal = false;\r\n        that.suggestionsContainer = null;\r\n        that.noSuggestionsContainer = null;\r\n        that.options = $.extend({}, defaults, options);\r\n        that.classes = {\r\n            selected: 'autocomplete-selected',\r\n            suggestion: 'autocomplete-suggestion'\r\n        };\r\n        that.hint = null;\r\n        that.hintValue = '';\r\n        that.selection = null;\r\n\r\n        //  Added by Sushant\r\n        that.displayKey = options.displayKey ? options.displayKey : 'value';\r\n        that.filterKeys = options.filterKeys ? options.filterKeys : [that.displayKey];\r\n        that.optionFormat = options.optionFormat ? options.optionFormat : '{' + that.displayKey + '}';\r\n\r\n        that.setLookup = function (lookup) {\r\n            that.options.lookup = lookup;\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n            }\r\n        };\r\n        that.setLoading = function (flag) {\r\n            that.options.loading = flag;\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n            }\r\n        };\r\n\r\n        // Initialize and set options:\r\n        that.initialize();\r\n        that.setOptions(options);\r\n\r\n        //if (!that.options.addnew && !that.options.showLookup) {\r\n        //    that.onValueChange();\r\n        //}\r\n        if ($(that.element).is(\":focus\")) {\r\n            that.onValueChange();\r\n            that.suggest();\r\n        }\r\n    }\r\n\r\n    Autocomplete.utils = utils;\r\n    function isHTML(str) {\r\n        var a = document.createElement('div');\r\n        a.innerHTML = str;\r\n        for (var c = a.childNodes, i = c.length; i--;) {\r\n            if (c[i].nodeType == 1) return true;\r\n        }\r\n        return false;\r\n    }\r\n    $.Autocomplete = Autocomplete;\r\n    Autocomplete.formatResult = function (suggestion, currentValue, optionFormat) {\r\n        var str = suggestion.optionFormat ? suggestion.optionFormat : optionFormat;\r\n        str = getCompiledOption(str, suggestion);\r\n        if (isHTML(str)) {\r\n            return str;\r\n        }\r\n        var reg = new RegExp(currentValue, 'gi');\r\n        return str.replace(reg, function (val) { return '<strong>' + val + '</strong>' });\r\n    };\r\n\r\n    Autocomplete.prototype = {\r\n\r\n        killerFn: null,\r\n\r\n        initialize: function () {\r\n            var that = this,\r\n                suggestionSelector = '.' + that.classes.suggestion,\r\n                selected = that.classes.selected,\r\n                options = that.options,\r\n                container;\r\n\r\n            // Remove autocomplete attribute to prevent native suggestions:\r\n            that.element.setAttribute('autocomplete', 'off');\r\n\r\n            that.killerFn = function (e) {\r\n                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {\r\n                    that.killSuggestions();\r\n                    that.disableKillerFn();\r\n                }\r\n            };\r\n\r\n            // html() deals with many types: htmlString or Element or Array or jQuery\r\n            that.noSuggestionsContainer = $('<div class=\"autocomplete-no-suggestion\"></div>')\r\n                                          .html(this.options.noSuggestionNotice).get(0);\r\n\r\n            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\r\n\r\n            container = $(that.suggestionsContainer);\r\n\r\n            container.appendTo(options.appendTo);\r\n\r\n            // Only set width if it was provided:\r\n            if (options.width !== 'auto') {\r\n                container.width(options.width);\r\n            }\r\n\r\n            // Listen for mouse over event on suggestions list:\r\n            container.on('mouseover.autocomplete', suggestionSelector, function () {\r\n                that.activate($(this).data('index'));\r\n            });\r\n\r\n            // Deselect active element when mouse leaves suggestions container:\r\n            container.on('mouseout.autocomplete', function () {\r\n                that.selectedIndex = -1;\r\n                container.children('.' + selected).removeClass(selected);\r\n            });\r\n\r\n            // Listen for click event on suggestions list:\r\n            container.on('click.autocomplete', suggestionSelector, function () {\r\n                that.select($(this).data('index'));\r\n               // $(that.element).focus(); comment this line due to text overwrapping issue in autocomplete.\r\n            });\r\n\r\n            that.fixPositionCapture = function () {\r\n                if (that.visible) {\r\n                    that.fixPosition();\r\n                }\r\n            };\r\n\r\n            $(window).on('resize.autocomplete', that.fixPositionCapture);\r\n\r\n            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });\r\n            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('blur.autocomplete', function () { that.onBlur(); });\r\n            that.el.on('focus.autocomplete', function (e) { that.onFocus(); });\r\n            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('input.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('click.autocomplete', function (e) { e.stopPropagation(); });\r\n        },\r\n\r\n        onFocus: function () {\r\n            var that = this;\r\n            that.fixPosition();\r\n            //if (that.options.minChars === 0 && that.el.val().length === 0) {\r\n            //    that.onValueChange();\r\n            //}\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n                that.suggest();\r\n            }\r\n        },\r\n\r\n        onBlur: function () {\r\n            if ($(document.activeElement).hasClass('scroll-inner-wrapp')) {\r\n                return;\r\n            }\r\n            var that = this;\r\n            //if(that.suggestions.length > 0 && that.suggestions[0].value.toLowerCase() === that.el.val().toLowerCase().trim()) {\r\n            //    that.hide();\r\n            //    that.onSelect(0);\r\n            //}\r\n            if (that.selectedIndex === -1) {\r\n                that.hide();\r\n         //       return;\r\n           }\r\n            this.enableKillerFn();\r\n        },\r\n        \r\n        abortAjax: function () {\r\n            var that = this;\r\n            if (that.currentRequest) {\r\n                that.currentRequest.abort();\r\n                that.currentRequest = null;\r\n            }\r\n        },\r\n\r\n        setOptions: function (suppliedOptions) {\r\n            var that = this,\r\n                options = that.options;\r\n\r\n            $.extend(options, suppliedOptions);\r\n\r\n            that.isLocal = $.isArray(options.lookup);\r\n\r\n            if (that.isLocal) {\r\n                options.lookup = that.verifySuggestionsFormat(options.lookup);\r\n            }\r\n\r\n            options.orientation = that.validateOrientation(options.orientation, 'bottom');\r\n\r\n            // Adjust height, width and z-index:\r\n            $(that.suggestionsContainer).css({\r\n                'max-height': options.maxHeight + 'px',\r\n                'width': options.width + 'px',\r\n                'z-index': options.zIndex\r\n            });\r\n        },\r\n        \r\n        clearCache: function () {\r\n            this.cachedResponse = {};\r\n            this.badQueries = [];\r\n        },\r\n\r\n        clear: function () {\r\n            this.clearCache();\r\n            this.currentValue = '';\r\n            this.suggestions = [];\r\n        },\r\n\r\n        disable: function () {\r\n            var that = this;\r\n            that.disabled = true;\r\n            clearInterval(that.onChangeInterval);\r\n            that.abortAjax();\r\n        },\r\n\r\n        enable: function () {\r\n            this.disabled = false;\r\n        },\r\n\r\n        fixPosition: function () {\r\n            // Use only when container has already its content\r\n\r\n            var that = this,\r\n                $container = $(that.suggestionsContainer),\r\n                containerParent = $container.parent().get(0);\r\n            // Fix position automatically when appended to body.\r\n            // In other cases force parameter must be given.\r\n            if (containerParent !== document.body && !that.options.forceFixPosition) {\r\n                return;\r\n            }\r\n\r\n            // Choose orientation\r\n            var orientation = that.options.orientation,\r\n                containerHeight = $container.outerHeight(),\r\n                height = that.el.outerHeight(),\r\n                offset = that.el.offset(),\r\n                styles = { 'top': offset.top, 'left': offset.left };\r\n\r\n            if (orientation === 'auto') {\r\n                var viewPortHeight = $(window).height(),\r\n                    scrollTop = $(window).scrollTop(),\r\n                    topOverflow = -scrollTop + offset.top - containerHeight,\r\n                    bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);\r\n\r\n                orientation = (Math.max(topOverflow, bottomOverflow) === topOverflow) ? 'top' : 'bottom';\r\n            }\r\n\r\n            if (orientation === 'top') {\r\n                styles.top += -containerHeight;\r\n            } else {\r\n                styles.top += height;\r\n            }\r\n\r\n            // If container is not positioned to body,\r\n            // correct its position using offset parent offset\r\n            if(containerParent !== document.body) {\r\n                var opacity = $container.css('opacity'),\r\n                    parentOffsetDiff;\r\n\r\n                    if (!that.visible){\r\n                        $container.css('opacity', 0).show();\r\n                    }\r\n\r\n                parentOffsetDiff = $container.offsetParent().offset();\r\n                styles.top -= parentOffsetDiff.top;\r\n                styles.left -= parentOffsetDiff.left;\r\n\r\n                if (!that.visible){\r\n                    $container.css('opacity', opacity).hide();\r\n                }\r\n            }\r\n\r\n            // -2px to account for suggestions border.\r\n            if (that.options.width === 'auto') {\r\n                styles.width = (that.el.outerWidth() - 2) + 'px';\r\n            }\r\n\r\n            $container.css(styles);\r\n        },\r\n\r\n        enableKillerFn: function () {\r\n            var that = this;\r\n            $(document).on('click.autocomplete', that.killerFn);\r\n        },\r\n\r\n        disableKillerFn: function () {\r\n            var that = this;\r\n            $(document).off('click.autocomplete', that.killerFn);\r\n        },\r\n\r\n        killSuggestions: function () {\r\n            var that = this;\r\n            that.stopKillSuggestions();\r\n            that.intervalId = window.setInterval(function () {\r\n                if (that.visible) {\r\n                    that.el.val(that.currentValue);\r\n                    that.hide();\r\n                }\r\n                \r\n                that.stopKillSuggestions();\r\n            }, 50);\r\n        },\r\n\r\n        stopKillSuggestions: function () {\r\n            window.clearInterval(this.intervalId);\r\n        },\r\n\r\n        isCursorAtEnd: function () {\r\n            var that = this,\r\n                valLength = that.el.val().length,\r\n                selectionStart = that.element.selectionStart,\r\n                range;\r\n\r\n            if (typeof selectionStart === 'number') {\r\n                return selectionStart === valLength;\r\n            }\r\n            if (document.selection) {\r\n                range = document.selection.createRange();\r\n                range.moveStart('character', -valLength);\r\n                return valLength === range.text.length;\r\n            }\r\n            return true;\r\n        },\r\n\r\n        onKeyPress: function (e) {\r\n            var that = this;\r\n\r\n            // If suggestions are hidden and user presses arrow down, display suggestions:\r\n            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\r\n                that.suggest();\r\n                return;\r\n            }\r\n\r\n            if (that.disabled || !that.visible) {\r\n                return;\r\n            }\r\n\r\n            switch (e.which) {\r\n                case keys.ESC:\r\n                    that.el.val(that.currentValue);\r\n                    that.hide();\r\n                    break;\r\n                case keys.RIGHT:\r\n                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\r\n                        that.selectHint();\r\n                        break;\r\n                    }\r\n                    return;\r\n                case keys.TAB:\r\n                    if (that.hint && that.options.onHint) {\r\n                        that.selectHint();\r\n                        return;\r\n                    }\r\n                    if (that.suggestions.length > 0 && that.currentValue.length >= that.options.minChars && that.selectedIndex === -1 && that.currentValue.length > 0) {\r\n                        that.selectedIndex = 0;\r\n                    }\r\n                    if (that.selectedIndex === -1) {\r\n                        that.hide();\r\n                        return;\r\n                    }\r\n                    that.select(that.selectedIndex);\r\n                    if (that.options.tabDisabled === false) {\r\n                        return;\r\n                    }\r\n                    break;\r\n                case keys.RETURN:\r\n                    if (that.selectedIndex === -1) {\r\n                        that.hide();\r\n                        return;\r\n                    }\r\n                    that.select(that.selectedIndex);\r\n                    break;\r\n                case keys.UP:\r\n                    that.moveUp();\r\n                    break;\r\n                case keys.DOWN:\r\n                    that.moveDown();\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            // Cancel event if function did not return:\r\n            e.stopImmediatePropagation();\r\n            e.preventDefault();\r\n        },\r\n\r\n        onKeyUp: function (e) {\r\n            var that = this;\r\n\r\n            if (that.disabled) {\r\n                return;\r\n            }\r\n\r\n            switch (e.which) {\r\n                case keys.UP:\r\n                case keys.DOWN:\r\n                    return;\r\n            }\r\n\r\n            clearInterval(that.onChangeInterval);\r\n\r\n            if (that.currentValue !== that.el.val()) {\r\n                that.findBestHint();\r\n                if (that.options.deferRequestBy > 0) {\r\n                    // Defer lookup in case when value changes very quickly:\r\n                    that.onChangeInterval = setInterval(function () {\r\n                        that.onValueChange();\r\n                    }, that.options.deferRequestBy);\r\n                } else {\r\n                    that.onValueChange();\r\n                }\r\n            }\r\n        },\r\n\r\n        onValueChange: function () {\r\n            var that = this,\r\n                options = that.options,\r\n                value = that.el.val(),\r\n                query = that.getQuery(value);\r\n\r\n            if (that.selection && that.currentValue !== query) {\r\n                that.selection = null;\r\n                (options.onInvalidateSelection || $.noop).call(that.element);\r\n            }\r\n\r\n            clearInterval(that.onChangeInterval);\r\n            that.currentValue = value;\r\n            that.selectedIndex = -1;\r\n\r\n            // Check existing suggestion for the match before proceeding:\r\n            if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {\r\n                that.select(0);\r\n                return;\r\n            }\r\n\r\n            if (query.length < options.minChars) {\r\n                //Suggestion will not hide \r\n                if (!(that.options.showLookup || that.options.addnew))\r\n                    that.hide();\r\n            } else {\r\n                that.getSuggestions(query);\r\n            }\r\n        },\r\n\r\n        isExactMatch: function (query) {\r\n            return false;\r\n        },\r\n\r\n        getQuery: function (value) {\r\n            var delimiter = this.options.delimiter,\r\n                parts;\r\n\r\n            if (!delimiter) {\r\n                return value;\r\n            }\r\n            parts = value.split(delimiter);\r\n            return $.trim(parts[parts.length - 1]);\r\n        },\r\n\r\n        getSuggestionsLocal: function (query) {\r\n            var that = this,\r\n                options = that.options,\r\n                queryLowerCase = query.toLowerCase(),\r\n                filter = options.lookupFilter,\r\n                limit = parseInt(options.lookupLimit, 10),\r\n                data;\r\n\r\n            data = {\r\n                suggestions: $.grep(options.lookup, function (suggestion) {\r\n                    //  If suggestion is set to filterable false, it will not get filtered\r\n                    if ((suggestion.filterable != null || suggestion.filterable != undefined) && suggestion.filterable === false) {\r\n                        return true;\r\n                    }\r\n                    return filter(suggestion, query, queryLowerCase);\r\n                })\r\n            };\r\n            \r\n            if (limit && data.suggestions.length > limit) {\r\n                data.suggestions = data.suggestions.slice(0, limit);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        getSuggestions: function (q) {\r\n            var response,\r\n                that = this,\r\n                options = that.options,\r\n                serviceUrl = options.serviceUrl,\r\n                params,\r\n                cacheKey,\r\n                ajaxSettings;\r\n\r\n            options.params[options.paramName] = q;\r\n            params = options.ignoreParams ? null : options.params;\r\n\r\n            if (options.onSearchStart.call(that.element, options.params) === false) {\r\n                return;\r\n            }\r\n\r\n            if ($.isFunction(options.lookup)){\r\n                options.lookup(q, function (data) {\r\n                    that.suggestions = data.suggestions;\r\n                    that.suggest();\r\n                    options.onSearchComplete.call(that.element, q, data.suggestions);\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (that.isLocal) {\r\n                response = that.getSuggestionsLocal(q);\r\n            } else {\r\n                if ($.isFunction(serviceUrl)) {\r\n                    serviceUrl = serviceUrl.call(that.element, q);\r\n                }\r\n                cacheKey = serviceUrl + '?' + $.param(params || {});\r\n                response = that.cachedResponse[cacheKey];\r\n            }\r\n\r\n            if (response && $.isArray(response.suggestions)) {\r\n                that.suggestions = response.suggestions;\r\n                that.suggest();\r\n                options.onSearchComplete.call(that.element, q, response.suggestions);\r\n            } else if (!that.isBadQuery(q)) {\r\n                that.abortAjax();\r\n\r\n                ajaxSettings = {\r\n                    url: serviceUrl,\r\n                    data: params,\r\n                    type: options.type,\r\n                    dataType: options.dataType\r\n                };\r\n\r\n                $.extend(ajaxSettings, options.ajaxSettings);\r\n\r\n                that.currentRequest = $.ajax(ajaxSettings).done(function (data) {\r\n                    var result;\r\n                    that.currentRequest = null;\r\n                    result = options.transformResult(data, q);\r\n                    that.processResponse(result, q, cacheKey);\r\n                    options.onSearchComplete.call(that.element, q, result.suggestions);\r\n                }).fail(function (jqXHR, textStatus, errorThrown) {\r\n                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\r\n                });\r\n            } else {\r\n                options.onSearchComplete.call(that.element, q, []);\r\n            }\r\n        },\r\n\r\n        isBadQuery: function (q) {\r\n            if (!this.options.preventBadQueries){\r\n                return false;\r\n            }\r\n\r\n            var badQueries = this.badQueries,\r\n                i = badQueries.length;\r\n\r\n            while (i--) {\r\n                if (q.indexOf(badQueries[i]) === 0) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        hide: function () {\r\n            var that = this,\r\n                container = $(that.suggestionsContainer);\r\n\r\n            if ($.isFunction(that.options.onHide) && that.visible) {\r\n                that.options.onHide.call(that.element, container);\r\n            }\r\n\r\n            that.visible = false;\r\n                that.selectedIndex = -1;\r\n                clearInterval(that.onChangeInterval);\r\n                $(that.suggestionsContainer).hide();\r\n            that.signalHint(null);\r\n        },\r\n\r\n        suggest: function () {\r\n            //Skip condition when showlookup and addNew flag true\r\n            if (!(this.options.showLookup || this.options.addnew)) {\r\n                if (this.suggestions.length === 0) {\r\n                    if (this.options.showNoSuggestionNotice) {\r\n                        this.noSuggestions();\r\n                    } else {\r\n                        this.hide();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            var that = this,\r\n                options = that.options,\r\n                groupBy = options.groupBy,\r\n                formatResult = options.formatResult,\r\n                value = that.getQuery(that.currentValue),\r\n                className = that.classes.suggestion,\r\n                classSelected = that.classes.selected,\r\n                container = $(that.suggestionsContainer),\r\n                noSuggestionsContainer = $(that.noSuggestionsContainer),\r\n                beforeRender = options.beforeRender,\r\n                html = '',\r\n                category,\r\n                formatGroup = function (suggestion, index) {\r\n                        var currentCategory = suggestion.data[groupBy];\r\n\r\n                        if (category === currentCategory){\r\n                            return '';\r\n                        }\r\n\r\n                        category = currentCategory;\r\n\r\n                        return '<div class=\"autocomplete-group\"><strong>' + category + '</strong></div>';\r\n                    };\r\n\r\n            if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {\r\n                that.select(0);\r\n                return;\r\n            }\r\n\r\n\r\n            var formattedResult, formattedTitle;\r\n\r\n            //Loader HTMLs\r\n            var loaderHtmls = (that.options.loading && that.options.minChars <= that.currentValue.length) ? '<div class=\"autocomplete-suggestion center\">\\\r\n                    <div class=\"preloader-wrapper x-small field-suffix-loader active\">\\\r\n                        <div class=\"spinner-layer spinner-blue-only\">\\\r\n                            <div class=\"circle-clipper circle-clipper--x left\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                            <div class=\"gap-patch\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                            <div class=\"circle-clipper circle-clipper--x right\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                        </div>\\\r\n                    </div>\\\r\n                </div>':'';\r\n\r\n            // Build suggestions inner HTML:\r\n            var totalIndex = 0;\r\n            var innerWrapMaxHeight = (that.options.addnew == true || that.options.showLookup == true) ? that.options.maxHeight - 40 : that.options.maxHeight - 2;\r\n            html += \"<div class='scroll-inner-wrapp' style='max-height:\" + innerWrapMaxHeight + \"px;'>\";\r\n            if (!that.options.loading) {\r\n                $.each(that.suggestions, function (i, suggestion) {\r\n                    if (groupBy) {\r\n                        html += formatGroup(suggestion, value, i);\r\n                    }\r\n                    formattedResult = formatResult(suggestion, value, that.optionFormat);\r\n                    try {\r\n                        formattedTitle = escape(formattedResult);\r\n                        formattedTitle = unescape(formattedTitle.replace(/%28/g, 'openingroundbracket').replace(/%29/g, 'closingroundbracket'));\r\n                        //formattedTitle = $(formattedTitle).text() ? $(formattedTitle).text() : formattedTitle;\r\n                        formattedTitle = formattedTitle.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '');\r\n                    }\r\n                    catch (e) { }\r\n                    formattedTitle = formattedTitle.replace(/openingroundbracket/g, '(').replace(/closingroundbracket/g, ')');\r\n                    html += '<div class=\"' + className + '\" data-index=\"' + i + '\" title=\"' + unescape(formattedTitle) + '\">' + formattedResult + '</div>';\r\n                    totalIndex = i + 1;\r\n                });\r\n            } else {\r\n                html += loaderHtmls;\r\n            }\r\n            html += \"</div>\";\r\n\r\n            var noSuggestionsMessage = (that.suggestions.length < 1 && that.options.showNoSuggestionNotice && that.options.minChars <= that.currentValue.length) ? $('<i></i>').append(that.noSuggestionsContainer).html() : '';\r\n            if (that.options.addnew == true && that.options.showLookup == true) {\r\n                html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                html += '<div class=\"typeaHeade-add-new blue-text autocomplete-suggestion-half ' + className + '\" data-index=\"' + totalIndex + '\" title=\"' + that.options.addNewKey + '\"><i class=\"icon icon-fix-overlay iconSmall\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"' + that.options.addNewKey + '\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i></div>';\r\n                html += '<div class=\"typeaHeade-open-lookup autocomplete-suggestion-half ' + className + '\" data-index=\"' + ++totalIndex + '\"><a href=\"javascript:void(0)\" class=\"waves-effect waves-light\">' + that.options.showLookupKey + '</a></div>';\r\n            } else {\r\n                if (that.options.addnew == true) {\r\n                    html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                    html += '<div class=\"typeaHeade-add-new width-adj-to blue-text ' + className + '\" data-index=\"' + totalIndex + '\" title=\"' + that.options.addNewKey + '\"><i class=\"icon icon-fix-overlay iconSmall\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"' + that.options.addNewKey + '\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i></div>';\r\n            \t}\r\n                if (that.options.showLookup == true) {\r\n                    html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                    html += '<div class=\"typeaHeade-open-lookup width-adj-to ' + className + '\" data-index=\"' + ++totalIndex + '\"><a href=\"javascript:void(0)\" class=\"waves-effect waves-light\">' + that.options.showLookupKey + '</a></div>';\r\n            \t}\r\n            }\r\n            \r\n            this.adjustContainerWidth();\r\n\r\n            noSuggestionsContainer.detach();\r\n            container.html(html);\r\n\r\n            if ($.isFunction(beforeRender)) {\r\n                beforeRender.call(that.element, container);\r\n            }\r\n\r\n            that.fixPosition();\r\n            container.show();\r\n\r\n            // Select first value by default:\r\n            if (options.autoSelectFirst) {\r\n                that.selectedIndex = 0;\r\n                container.scrollTop(0);\r\n                container.children('.' + className).first().addClass(classSelected);\r\n            }\r\n\r\n            that.visible = true;\r\n            that.findBestHint();\r\n        },\r\n\r\n        noSuggestions: function() {\r\n             var that = this,\r\n                 container = $(that.suggestionsContainer),\r\n                 noSuggestionsContainer = $(that.noSuggestionsContainer);\r\n\r\n            this.adjustContainerWidth();\r\n\r\n            // Some explicit steps. Be careful here as it easy to get\r\n            // noSuggestionsContainer removed from DOM if not detached properly.\r\n            noSuggestionsContainer.detach();\r\n            container.empty(); // clean suggestions if any\r\n            container.append(noSuggestionsContainer);\r\n\r\n            that.fixPosition();\r\n\r\n            container.show();\r\n            that.visible = true;\r\n        },\r\n\r\n        adjustContainerWidth: function() {\r\n            var that = this,\r\n                options = that.options,\r\n                width,\r\n                container = $(that.suggestionsContainer);\r\n\r\n            // If width is auto, adjust width before displaying suggestions,\r\n            // because if instance was created before input had width, it will be zero.\r\n            // Also it adjusts if input width has changed.\r\n            // -2px to account for suggestions border.\r\n            if (options.width === 'auto') {\r\n                width = that.el.outerWidth() - 2;\r\n                container.width(width > 0 ? width : 300);\r\n            }\r\n        },\r\n\r\n        findBestHint: function () {\r\n            var that = this,\r\n                value = that.el.val().toLowerCase(),\r\n                bestMatch = null;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            $.each(that.suggestions, function (i, suggestion) {\r\n                var str = suggestion.optionFormat ? suggestion.optionFormat : that.optionFormat;\r\n                str = getCompiledOption(str, suggestion);\r\n                var foundMatch = str.toLowerCase().indexOf(value) === 0;\r\n                if (foundMatch) {\r\n                    bestMatch = suggestion;\r\n                }\r\n                return !foundMatch;\r\n            });\r\n\r\n            that.signalHint(bestMatch);\r\n        },\r\n\r\n        signalHint: function (suggestion) {\r\n            var hintValue = '',\r\n                that = this;\r\n            if (suggestion) {\r\n                var str = suggestion.optionFormat ? suggestion.optionFormat : that.optionFormat;\r\n                str = getCompiledOption(str, suggestion);\r\n                hintValue = that.currentValue + str.substr(that.currentValue.length);\r\n            }\r\n            if (that.hintValue !== hintValue) {\r\n                that.hintValue = hintValue;\r\n                that.hint = suggestion;\r\n                (this.options.onHint || $.noop)(hintValue);\r\n            }\r\n        },\r\n\r\n        verifySuggestionsFormat: function (suggestions) {\r\n            // If suggestions is string array, convert them to supported format:\r\n            if (suggestions.length && typeof suggestions[0] === 'string') {\r\n                return $.map(suggestions, function (value) {\r\n                    return { value: value, data: null };\r\n                });\r\n            }\r\n\r\n            return suggestions;\r\n        },\r\n\r\n        validateOrientation: function(orientation, fallback) {\r\n            orientation = $.trim(orientation || '').toLowerCase();\r\n\r\n            if($.inArray(orientation, ['auto', 'bottom', 'top']) === -1){\r\n                orientation = fallback;\r\n            }\r\n\r\n            return orientation;\r\n        },\r\n\r\n        processResponse: function (result, originalQuery, cacheKey) {\r\n            var that = this,\r\n                options = that.options;\r\n\r\n            result.suggestions = that.verifySuggestionsFormat(result.suggestions);\r\n\r\n            // Cache results if cache is not disabled:\r\n            if (!options.noCache) {\r\n                that.cachedResponse[cacheKey] = result;\r\n                if (options.preventBadQueries && result.suggestions.length === 0) {\r\n                    that.badQueries.push(originalQuery);\r\n                }\r\n            }\r\n\r\n            // Return if originalQuery is not matching current query:\r\n            if (originalQuery !== that.getQuery(that.currentValue)) {\r\n                return;\r\n            }\r\n\r\n            that.suggestions = result.suggestions;\r\n            that.suggest();\r\n        },\r\n\r\n        activate: function (index) {\r\n            var that = this,\r\n                activeItem,\r\n                selected = that.classes.selected,\r\n                container = $(that.suggestionsContainer),\r\n                children = container.find('.' + that.classes.suggestion);\r\n\r\n            container.find('.' + selected).removeClass(selected);\r\n\r\n            that.selectedIndex = index;\r\n\r\n            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\r\n                activeItem = children.get(that.selectedIndex);\r\n                $(activeItem).addClass(selected);\r\n                return activeItem;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        selectHint: function () {\r\n            var that = this,\r\n                i = $.inArray(that.hint, that.suggestions);\r\n\r\n            that.select(i);\r\n        },\r\n\r\n        select: function (i) {\r\n            var that = this;\r\n            if(!that.options.multiselect) //prevent hiding suggetions for multiselect\r\n                that.hide();\r\n            that.onSelect(i);\r\n        },\r\n\r\n        moveUp: function () {\r\n            var that = this;\r\n\r\n            if (that.selectedIndex === -1) {\r\n                return;\r\n            }\r\n\r\n            if (that.selectedIndex === 0) {\r\n                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\r\n                that.selectedIndex = -1;\r\n                that.el.val(that.currentValue);\r\n                that.findBestHint();\r\n                return;\r\n            }\r\n\r\n            that.adjustScroll(that.selectedIndex - 1);\r\n        },\r\n\r\n        moveDown: function () {\r\n            var that = this;\r\n\r\n            if (that.selectedIndex === (that.suggestions.length - 1)) {\r\n                return;\r\n            }\r\n\r\n            that.adjustScroll(that.selectedIndex + 1);\r\n        },\r\n\r\n        adjustScroll: function (index) {\r\n            var that = this,\r\n                activeItem = that.activate(index);\r\n\r\n            if (!activeItem) {\r\n                return;\r\n            }\r\n\r\n            var offsetTop,\r\n                upperBound,\r\n                lowerBound,\r\n                heightDelta = $(activeItem).outerHeight();\r\n\r\n            offsetTop = activeItem.offsetTop;\r\n            upperBound = $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop();\r\n            lowerBound = upperBound + that.options.maxHeight - heightDelta;\r\n\r\n            if (offsetTop < upperBound) {\r\n                $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop(offsetTop);\r\n            } else if (offsetTop > lowerBound) {\r\n                $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop(offsetTop - that.options.maxHeight + heightDelta);\r\n            }\r\n\r\n            if (!that.options.preserveInput) {\r\n                that.el.val(that.getValue(that.suggestions[index].value));\r\n            }\r\n            that.signalHint(null);\r\n        },\r\n\r\n        onSelect: function (index) {\r\n            var that = this;\r\n            //Added new callback for show lookup and Add New\r\n            var getTotalSuggested = that.suggestions.length;\r\n            if (index > getTotalSuggested && that.options.showLookup == true) {\r\n                that.hide();\r\n                if ($.isFunction(that.options.onClickShowLookup)) {\r\n                    that.options.onClickShowLookup.call(that.element, \"ShowLookup\");\r\n                    return;\r\n                }\r\n            }\r\n            if (index == getTotalSuggested && that.options.addnew == true) {\r\n                that.hide();\r\n                if ($.isFunction(that.options.onClickAddNew)) {\r\n                    that.options.onClickAddNew.call(that.element, \"AddNEW\");\r\n                    return;\r\n                }\r\n            }\r\n            var onSelectCallback = that.options.onSelect,\r\n                suggestion = that.suggestions[index];\r\n\r\n            that.currentValue = suggestion.value ? that.getValue(suggestion.value) : that.getValue(suggestion[that.options.displayFormat.slice(1, that.options.displayFormat.length - 1)]);\r\n\r\n            if (that.currentValue !== that.el.val() && !that.options.preserveInput) {\r\n                that.el.val(that.currentValue);\r\n            }\r\n\r\n            that.signalHint(null);\r\n            that.suggestions = [];\r\n            that.selection = suggestion;\r\n\r\n            if ($.isFunction(onSelectCallback)) {\r\n                onSelectCallback.call(that.element, suggestion);\r\n            }\r\n        },\r\n\r\n        getValue: function (value) {\r\n            var that = this,\r\n                delimiter = that.options.delimiter,\r\n                currentValue,\r\n                parts;\r\n\r\n            if (!delimiter) {\r\n                return value;\r\n            }\r\n\r\n            currentValue = that.currentValue;\r\n            parts = currentValue.split(delimiter);\r\n\r\n            if (parts.length === 1) {\r\n                return value;\r\n            }\r\n\r\n            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\r\n        },\r\n\r\n        dispose: function () {\r\n            var that = this;\r\n            that.el.off('.autocomplete').removeData('autocomplete');\r\n            that.disableKillerFn();\r\n            $(window).off('resize.autocomplete', that.fixPositionCapture);\r\n            $(that.suggestionsContainer).remove();\r\n        }\r\n    };\r\n\r\n    // Create chainable jQuery plugin:\r\n    $.fn.autocomplete = $.fn.devbridgeAutocomplete = function (options, args) {\r\n        var dataKey = 'autocomplete';\r\n        // If function invoked without argument return\r\n        // instance of the first matched element:\r\n        if (arguments.length === 0) {\r\n            return this.first().data(dataKey);\r\n        }\r\n\r\n        return this.each(function () {\r\n            var inputElement = $(this),\r\n                instance = inputElement.data(dataKey);\r\n\r\n            if (typeof options === 'string') {\r\n                if (instance && typeof instance[options] === 'function') {\r\n                    instance[options](args);\r\n                }\r\n            } else {\r\n                // If instance already exists, destroy it:\r\n                if (instance && instance.dispose) {\r\n                    instance.dispose();\r\n                }\r\n                instance = new Autocomplete(this, options);\r\n                inputElement.data(dataKey, instance);\r\n            }\r\n        });\r\n    };\r\n    $(document).on('click', function (e) {\r\n        if ($('.autocomplete-suggestions').is(':visible')) {\r\n            $('.autocomplete-suggestions').hide();\r\n        }\r\n    });\r\n}));\n(function () {\r\n    'use strict';\r\n    var smartTimeLineID = 0;\r\n    angular.module('SMART2').directive('smartTimeline', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', 'APPCONSTANTS', function ($rootScope, $timeout, $translate, ScrollTo, lookup, APPCONSTANTS) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                readonly: '@',\r\n                dateFormat: '@',\r\n                selectable: '@',\r\n                showCurrentTime: '@',\r\n                zoomMin: '@',\r\n                zoomMax: '@',\r\n                marginSpace: '@',\r\n                onSelect: '&',\r\n                onLoad: '&',\r\n                groupOrder: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var cultureCode = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n                var readonly = (scope.readonly == null || scope.readonly == \"undefined\") ? false : (scope.readonly == 'true') ? true : false;\r\n                var selectable = (scope.selectable == null || scope.selectable == \"undefined\") ? true : (scope.selectable == 'true') ? true : false;\r\n                var showCurrentTime = (angular.isDefined(scope.showCurrentTime)) ? (scope.showCurrentTime == 'true') ? true : false : true;\r\n                scope.ngModel = scope.ngModel ? scope.ngModel : null;\r\n                var defaultMin = 1000 * 60 * 60 * 24, defaultMax = 1000 * 60 * 60 * 24 * 31 * 3;\r\n                var zoomMin = angular.isDefined(scope.zoomMin) ? (scope.zoomMin != \"\") ? parseInt(scope.zoomMin) : defaultMin : defaultMin; // Default 1Day\r\n                var zoomMax = angular.isDefined(scope.zoomMax) ? (scope.zoomMax != \"\") ? parseInt(scope.zoomMax) : defaultMax : defaultMax;  // Default 3Month\r\n                var marginSpace = (scope.marginSpace == null || scope.marginSpace == \"undefined\") ? 20 : parseInt(scope.marginSpace, 10);\r\n                var timeline = null;\r\n                var groupOrderFunc = function (a, b) {\r\n                    if (angular.isDefined(attrs.groupOrder)) {\r\n                        return scope.groupOrder({ $a: a, $b: b });\r\n                    } else {\r\n                        if (angular.isDefined(scope.ngModel[a.id]) && angular.isDefined(scope.ngModel[b.id])) {\r\n                            return scope.ngModel[a.id].lines[0].start - scope.ngModel[b.id].lines[0].start;\r\n                        }\r\n                    }\r\n                };\r\n                scope.timelineID = \"TimeLineId-\" + smartTimeLineID;\r\n                smartTimeLineID++;\r\n                function isTodayInBetween(s, e) {\r\n                    s = parseInt(s);\r\n                    e = parseInt(e);\r\n                    var d = new Date();\r\n                    var c = d.getTime();\r\n                    if (s < c && c < e) { // running \r\n                        return 0;\r\n                    }\r\n                    if (e < c) { // ended\r\n                        return -1;\r\n                    }\r\n                    if (c < s) { // not started\r\n                        return 1;\r\n                    }\r\n                }\r\n                function getAngularDateFormat(format) {\r\n                    return format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                }\r\n                scope.$watch(\"ngModel\", function (newVal) {\r\n                    scope.ngModel = newVal;\r\n                    //var dateFormat = scope.dateFormat ? scope.dateFormat : 'dd/MM/yyyy';\r\n                    scope.getCultureCode = function (culturecode) {\r\n                        switch (culturecode) {\r\n                            case 'en-US':\r\n                                return 'MM/dd/yyyy hh:mm a';\r\n                                break;\r\n                            case 'zh-CN':\r\n                                return 'yyyy-MM-dd hh:mm a';\r\n                                break;\r\n                            case 'zh-CHT':\r\n                                return 'yyyy-MM-dd hh:mm a';\r\n                                break;\r\n                            case 'da-DK':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'de-DE':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'en-AU':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'es-ES':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'fr-FR':\r\n                                return 'yyyy/MM/dd hh:mm a';\r\n                                break;\r\n                            case 'it-IT':\r\n                                return 'yyyy/MM/dd hh:mm a';\r\n                                break;\r\n                            case 'ja-JP':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'ko-KR':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'nl-NL':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'pl-PL':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'pt-PT':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'ru-RU':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'sv-SE ':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'th-TH ':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            default:\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                        }\r\n                    };\r\n\r\n                    var dateFormat = scope.getCultureCode(cultureCode) ? scope.getCultureCode(cultureCode) : 'dd/MM/yyyy hh:mm a';\r\n                    dateFormat = getAngularDateFormat(dateFormat);\r\n                    var groups = [];\r\n                    var items = [];\r\n                    var groupItemPeer = [];\r\n                    function formateData() {\r\n                        moment.locale(cultureCode);\r\n                        groups = [];\r\n                        items = [];\r\n                        var k = 0;\r\n                        for (var i = 0; i < scope.ngModel.length; i++) {\r\n                            groups.push({\r\n                                id: i,\r\n                                content: scope.ngModel[i].title,\r\n                                className: (typeof scope.ngModel[i].className === 'undefined') ? \"\" : scope.ngModel[i].className,\r\n                                style: (typeof scope.ngModel[i].style === 'undefined') ? \"\" : scope.ngModel[i].style\r\n                            });\r\n\r\n                            for (var j = 0; j < scope.ngModel[i].lines.length; j++) {\r\n                                var obj = {\r\n                                    id: k,\r\n                                    group: i\r\n                                }\r\n                                groupItemPeer[k] = j;\r\n                                var flagS = false, flagE = false;\r\n                                var classNamee = \"vis-timeline-cstyle-\" + (i % 10);\r\n                                if (scope.ngModel[i].lines[j].start != null && scope.ngModel[i].lines[j].start != \"\" && typeof scope.ngModel[i].lines[j].start != \"undefined\") {\r\n                                    obj.start = new Date(scope.ngModel[i].lines[j].start * 1);\r\n                                    obj.startFormated = moment.unix(scope.ngModel[i].lines[j].start / 1000).format(dateFormat);\r\n                                    flagS = true;\r\n                                }\r\n                                if (scope.ngModel[i].lines[j].end != null && scope.ngModel[i].lines[j].end != \"\" && typeof scope.ngModel[i].lines[j].end != \"undefined\") {\r\n                                    obj.end = new Date(scope.ngModel[i].lines[j].end * 1);\r\n                                    obj.endFormated = moment.unix(scope.ngModel[i].lines[j].end / 1000).format(dateFormat);\r\n                                    flagE = true;\r\n                                }\r\n                                if (flagS && flagE) {\r\n                                    var respo = isTodayInBetween(obj.start.getTime(), obj.end.getTime());\r\n                                    if (respo == -1) {\r\n                                        classNamee = classNamee + \" line-ended\";\r\n                                    }\r\n                                    if (respo == 1) {\r\n                                        classNamee = classNamee + \" line-not-started\";\r\n                                    }\r\n                                }\r\n                                var passedClassName = (typeof scope.ngModel[i].lines[j].className === 'undefined') ? \"\" : scope.ngModel[i].lines[j].className;\r\n                                classNamee = classNamee + \" \" + passedClassName;\r\n                                obj.className = classNamee;\r\n                                var barStyle = (typeof scope.ngModel[i].lines[j].style === 'undefined') ? \"\" : scope.ngModel[i].lines[j].style;\r\n                                obj.style = barStyle;\r\n                                if (typeof scope.ngModel[i].lines[j].content === 'undefined') {\r\n                                    obj.content = \"<div class='padding5' smart-tooltip title='\" + obj.startFormated + \" - \" + obj.endFormated + \"' position='top' delay='500' message= \" + $translate.instant('tooltipMsg') + \"></div>\";\r\n                                } else {\r\n                                    obj.content = scope.ngModel[i].lines[j].content;\r\n                                }\r\n                                items.push(obj);\r\n                                k++;\r\n                            }\r\n                        }\r\n                    }\r\n                    formateData();\r\n                    $timeout(function () {\r\n                        var groupSet = new vis.DataSet(groups);\r\n                        var itemSet = new vis.DataSet(items);\r\n                        var container = document.getElementById(scope.timelineID);\r\n                        if (timeline == null) {\r\n                            timeline = new vis.Timeline(container);\r\n                            container.addEventListener(\"touchmove\", function (e) {\r\n                                // to avoid original touch device (iPad, tablet) effects like pinch to zoom in/out. \r\n                                e.preventDefault();\r\n                            });\r\n                        }\r\n                        timeline.setGroups(groupSet);\n                        timeline.setItems(itemSet);\r\n                        var options = {\r\n                            editable: readonly,\r\n                            groupOrder: groupOrderFunc,\r\n                            selectable: selectable,\r\n                            showCurrentTime: showCurrentTime,\r\n                            zoomMin: zoomMin,\r\n                            zoomMax: zoomMax,\r\n                            margin: { item: marginSpace },\r\n                            locales: {},\r\n                            locale: cultureCode,\r\n                            format: {\r\n                            \tminorLabels: {\r\n                            \t\tmillisecond: 'SSS',\r\n                            \t\tsecond: 's',\r\n                            \t\tminute: 'hh:mm a',\r\n                            \t\thour: 'hh:mm a',\r\n                            \t\tweekday: 'ddd D',\r\n                            \t\tday: 'D',\r\n                            \t\tmonth: 'MMM',\r\n                            \t\tyear: 'YYYY'\r\n                            \t},\r\n                            \tmajorLabels: {\r\n                            \t\tmillisecond: 'hh:mm:ss a',\r\n                            \t\tsecond: 'D MMMM hh:mm a',\r\n                            \t\tminute: 'ddd D MMMM',\r\n                            \t\thour: 'ddd D MMMM',\r\n                            \t\tweekday: 'MMMM YYYY',\r\n                            \t\tday: 'MMMM YYYY',\r\n                            \t\tmonth: 'YYYY',\r\n                            \t\tyear: ''\r\n                            \t}\r\n                            }\r\n                        };\r\n                        options.locales[cultureCode] = {\r\n                            current: $translate.instant('labelCurrent'),\r\n                            time: $translate.instant('labelTime')\r\n                        };\r\n                        timeline.setOptions(options);\r\n                        if (attrs.fittobound === 'true') {\r\n                            timeline.fit(options);\r\n                        }\n                        $timeout(function () {\r\n                            if (angular.isFunction(scope.onLoad)) {\r\n                                scope.onLoad();\r\n                            }\r\n                        }, 2000);\r\n                        $(timeline.currentTime.bar).append('<span class=\"timelineLabelToday\">' + $translate.instant('timelineLabelToday') + '</span>');\r\n                        timeline.on('select', function (obj) {\r\n                            var props = timeline.getEventProperties(obj.event);\r\n                            var groupObj = (props.group != null) ? scope.ngModel[props.group] : null;\r\n                            var itemObj = (props.item != null) ? scope.ngModel[props.group].lines[groupItemPeer[props.item]] : null;\r\n                            var returnObj = {\r\n                                item: itemObj,\r\n                                group: groupObj,\r\n                                properties: props\r\n                            }\r\n\r\n                            if (angular.isFunction(scope.onSelect)) {\r\n                                scope.onSelect({\r\n                                    $res: returnObj\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }, true);\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTimeline/smartTimelineTemplate.html'\r\n        };\r\n    }]);\r\n})();\n  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Tooltip\n   * @description This directive is useful for creating a tooltip.\n   * \n   * @attr {String} position\n   *    Tooltip position. Possible values are left, right, top, bottom. Default value is 'left'.\n   * @attr {Number} delay\n   *    Tooltip delay. Default value is '250'.\n   * @attr {String} tooltip\n   *    Tooltip message\n   * \n   * @example\n   Usage:\n   <span smart-tooltip position=\"top\" delay=\"500\" message=\"Tooltip message\"></span>\n   */\n\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartTooltip', [function () {\r\n        return {\r\n            restrict: 'A',\n            replace: true,\n            scope: {\r\n                customStyle: \"=\"\r\n            },\n            link: function (scope, element, attrs) {\r\n                var onMessage = attrs.$observe('message', function (value) {\r\n                    element.attr('data-tooltip', value);\r\n                });\n                element.attr('data-position', attrs.position ? attrs.position : 'left');\n                element.attr('data-delay', attrs.delay ? attrs.delay : '50');\n                element.attr('data-tooltip', attrs.message ? attrs.message : '');\n                element.addClass('tooltipped');\n                if (typeof scope.customStyle != \"undefined\") {\r\n                    var optionsObject = {\r\n                        \"customStyle\": scope.customStyle\r\n                    };\r\n                }\n                element.tooltip(optionsObject);\n                element.on('click', function () {\r\n                    element.trigger('mouseleave');\r\n                });\n                //  Destroy tooltip on scope destroy\n                scope.$on('$destroy', function () {\r\n                    element.tooltip('remove');\r\n                    onMessage();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Typeahead\r\n * @description This directive is used for creating a typeahead component ie Type and search plus select.\r\n * \r\n * @attr {String} label\r\n *    Label to be displayed for identification of this ui element\r\n * @attr {String} placeholder\r\n *    Hint text to be displayed\r\n * @attr {String} info-icon\r\n *    To show a custom icon\r\n * @attr {Array} ng-model\r\n *    Default values to be displayed (Note: Pass array only if multiselect is set to true. Else pass an object.)\r\n *  @attr {Array} options\r\n *    Values to be shown in suggestions\r\n * @attr {Boolean} multiselect\r\n *    To allow/disallow multiple selections\r\n * @attr {Boolean} addnew\r\n *    To allow add new option\r\n * @attr {Boolean} show-lookup\r\n *    To make autocomplete plus lookup available\r\n * @attr {Boolean} focus \r\n *    If set to true, this ui element will be focused\r\n * @attr {Boolean} validate\r\n *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n * @attr {Array} rules \r\n *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n * @attr {String} error-message \r\n *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n * @attr {Boolean} is-mandatory \r\n *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n * @attr {Boolean} disable \r\n *    If set to true, field cannot be edited. Blur and focus events will not be fired (default behaviour).\r\n * @attr {Function} on-focus\r\n *    Callback function when ui element's focus event is fired\r\n * @attr {Function} on-blur\r\n *    Callback function when ui element's blur event is fired\r\n * @attr {Function} on-key-up\r\n *    Callback function when ui element's keyup event is fired\r\n * @attr {Function} on-key-down\r\n *    Callback function when ui element's keydown event is fired\r\n * @attr {Function} on-key-press\r\n *    Callback function when ui element's keypress event is fired\r\n * @attr {Function} on-select\r\n *    Callback function when a value is selected \r\n * @attr {Function} callback-on-iconclick\r\n *    Callback function for icon on the right side\r\n * @attr {Function} call-addnew\r\n *    Callback function for add new icon\r\n * \r\n *    \r\n * @example\r\n Static:\r\n Controller:\r\n      $scope.options = [\r\n\t\t{\r\n\t\t\t\"UserId\": 28360,\r\n\t\t\t\"UserName\": \"SRUser1@outlook.com\",                  \r\n\t\t\t\"FirstName\": \"SR\",                  \r\n\t\t\t\"LastName\": \"User1\"\r\n\t\t}, {                 \r\n\t\t\t\"UserId\": 28977,                  \r\n\t\t\t\"UserName\": \"SRUser1@outlook.com11\",\r\n\t\t\t\"FirstName\": \"Test\",\r\n\t\t\t\"LastName\": \"TestLastName\"    \r\n\t\t}, {                  \r\n\t\t\t\"UserId\": 57900,                  \r\n\t\t\t\"UserName\": \"SRUser1@outlook.com234\",                  \r\n\t\t\t\"FirstName\": \"Test23\",                  \r\n\t\t\t\"LastName\": \"test23lastname\"                 \r\n\t\t}\r\n\t]; \r\n\t$scope.selected = [{            \r\n\t\t\"UserId\": 28360,               \r\n\t\t\"UserName\": \"SRUser1@outlook.com\",               \r\n\t\t\"FirstName\": \"SR\",               \r\n\t\t\"LastName\": \"User1\"              \r\n\t}];  \r\n Usage:\r\n      <smart-typeahead class=\"col s2\" multiselect=\"true\" addnew=\"true\" showlookup=\"true\" placeholder=\"Place Holder\" ng-model=\"selected\" options=\"options\" filterkeys=\"['FirstName', 'LastName']\" optionformat=\"<span>{FirstName} {LastName}</span>\" displayformat=\"{FirstName} {LastName}\" label=\"{{typeaheadLabel}}\" callback-on-iconclick=\"callAfterClickedOnRightSideIcon(e)\" info-icon=\"#icon_CirclePlus\" call-addnew=\"callAfterAddNewFuncClick(e)\"></smart-typeahead>       \r\n */\r\n(function () {\r\n    'use strict';\r\n    var typeaheadId = 0;\r\n    angular.module('SMART2').directive('smartTypeahead', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', 'RuleEngine', '$window', function ($rootScope, $timeout, $translate, ScrollTo, lookup, RuleEngine, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: 'ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                callbackOnIconClick: '&',\r\n                callAddNew: '&',\r\n                lookupOpen: '&',\r\n                lookupHide: '&',\r\n                onScrollEnd: '&',\r\n                onScrollTop: '&',\r\n                onScrollInProgress: '&',\r\n                searchtextKeyUp: '&',\r\n                errorMessage: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                align: '@',\r\n                format: '@',    //  date format\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                maxlength: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                desckey: '@',\r\n                multiselect: '@',\r\n                showLookup: '@',\r\n                infoIcon: '@',\r\n                infoIconTooltip: '@',\r\n                addnew: '@',\r\n                titleofmodel: '@',\r\n                selecttypeoption: '=?',\r\n                showInfoIcon: '=?',\r\n                isSupplier: '=?',\r\n                defaultselectoption: '@',\r\n                defaultselectiontext: '=?',\r\n                width: '@',\r\n                height: '@',\r\n                isDefaultMandatory: '@',\r\n                minCharForTrigger: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                errorModel: '=?',\r\n                loading: '=?',\r\n                minMultiselect: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                isLazyLoadingEnabled: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModel) {\r\n                scope.placeholder = (scope.placeholder == undefined || scope.placeholder == null) ? '' : scope.placeholder;\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                scope.label = (scope.label == undefined || scope.label == null) ? '' : scope.label;\r\n                scope.textAlign = (scope.align == undefined || scope.align == null) ? 'left' : scope.align;\r\n                scope.infoIconFlag = (scope.infoIcon == undefined || scope.infoIcon == null) ? false : true;\r\n                scope.titleofmodel = (scope.titleofmodel == undefined || scope.titleofmodel == null) ? $translate.instant('titleOfModel') : scope.titleofmodel;\r\n                scope.infoIconTooltip = (scope.infoIconTooltip == undefined || scope.infoIconTooltip == null) ? '' : scope.infoIconTooltip;\r\n                scope.isLazyLoadingEnabled = angular.isDefined(scope.isLazyLoadingEnabled) ? scope.isLazyLoadingEnabled : false;\r\n                var multiselect = (scope.multiselect == undefined || scope.multiselect == null) ? false : scope.multiselect == \"true\" ? true : false;\r\n                var minMultiselect = (scope.minMultiselect == undefined || scope.minMultiselect == null) ? { event: false } : { event: true, value: scope.minMultiselect };\r\n                var showLookup = (scope.showLookup == undefined || scope.showLookup == null) ? true : scope.showLookup == \"true\" ? true : false;\r\n                var addnew = (scope.addnew == undefined || scope.addnew == null) ? false : scope.addnew == \"true\" ? true : false;\r\n                var readonly = (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false;\r\n                var minCharForTrigger = scope.minCharForTrigger ? parseInt(scope.minCharForTrigger) : 3;\r\n                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                var loading = angular.isDefined(scope.loading) ? scope.loading : false;\r\n                if (noSuggestionNotice == '') {\r\n                    showNoSuggestion = false;\r\n                }\r\n                //showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                var number, rulesValidationEvent;\r\n                var showLookupKey = $translate.instant('showLookupLabel'),\r\n                    addNewKey = $translate.instant('addNew');\r\n                scope.disabled = \"\";\r\n                scope.showInfoIcon = (scope.showInfoIcon == undefined || scope.showInfoIcon == null) ? false : scope.showInfoIcon;\r\n                var isInfoTipEnable = attrs.showInfoTip == 'true' ? true : false,\r\n                    checkInfoToolTip = function () {\r\n                        if (isInfoTipEnable) {\r\n                            scope.infotipData = scope.displayModel.replace(/,/g, '  ').trim().replace(/  /g, '<br>');\r\n                        } else {\r\n                            scope.infotipData = \"\";\r\n                        }\r\n                    };\r\n\r\n                var selectedArr = [], newOptionsSelected = [], newArr = [], copyArray = [], selectedArrIndex;\r\n                if (readonly) {\r\n                    scope.disabled = \"disabled\";\r\n                }\r\n                var uniqueIDGenerator = function () {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xx2xxpxxoxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                function checkIfActive() {\r\n                    if (scope.placeholder === '' && (scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                scope.isActive = checkIfActive();\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.typeaheadId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    var typeaheadId = uniqueIDGenerator();\r\n                    scope.typeaheadId = 'typeahead-' + typeaheadId;\r\n                }\r\n                scope.labelFortypeaheadId = 'label-for-' + scope.typeaheadId;\r\n\r\n                /*\r\n\t\t\t\t* Skip tab key focus, if field is readonly\r\n\t\t\t\t*/\r\n               var cancelMe =  setTimeout(function () {\r\n                    if (readonly) {\r\n                        angular.element('#' + scope.typeaheadId).attr('tabindex', -1);\r\n                    }\r\n                    clearTimeout(cancelMe);\r\n                    cancelMe = null;\r\n                });\r\n\r\n                var unbindFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        var clrTout = setTimeout(function () {\r\n                            angular.element('#' + scope.labelFortypeaheadId).trigger('click');\r\n                            clearTimeout(clrTout);\r\n                            clrTout = null;\r\n                        });\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                var changeTimeout, keyUpTimeout, keyDownTimeout, keyPressTimeout;\r\n                scope.ngChange = function (e) {\r\n                    scope.isActive = checkIfActive();\r\n\r\n                    if (changeTimeout) {\r\n                        $timeout.cancel(changeTimeout);\r\n                    }\r\n                    changeTimeout = $timeout(function () {\r\n                        scope.onChange({\r\n                            $event: {\r\n                                data: angular.element('#' + scope.typeaheadId)\r\n                            }\r\n                        });\r\n                    }, 500);\r\n                };\r\n                scope.ngFocus = function (e) {\r\n                    scope.isActive = true;\r\n                    scope.onFocus({ $event: e });\r\n                    autoCompleteField.suggestions.length = 0;\r\n                };\r\n                scope.ngBlur = function (e) {\r\n                    var model = getModel();\r\n                    setValues(model);\r\n\r\n                    if (multiselect && model.length > 0) {\r\n                        scope.multiselectFlag = true;\r\n                    }\r\n\r\n                    scope.isActive = checkIfActive();\r\n                    scope.onBlur({ $event: e });\r\n                    if (model == undefined || model == null || model == '' || Object.getOwnPropertyNames(model).length === 0) {\r\n                        scope.showInfoIcon = false;\r\n                    } else {\r\n                        scope.showInfoIcon = true;\r\n                    }\r\n\r\n                    // Needed to add $timeout for not showing error message before show lookup open.\r\n                    var tout = $timeout(function () {\r\n                        if (!showLookupTrigger) {\r\n                            scope.validateRules();\r\n                        } else {\r\n                            showLookupTrigger = false;\r\n                        }\r\n                        $timeout.cancel(tout);\r\n                        tout = null;\r\n                    }, 200);\r\n                };\r\n                var preventKeyArray = [37, 38, 39, 40];\r\n                var showLookupTrigger = false;\r\n                scope.ngKeyUp = function (e) {\r\n                    if (multiselect && e.target.value == \"\") {\r\n                        setModel([]);\r\n                    }\r\n                    if (!multiselect && e.target.value == \"\") {\r\n                        setModel(null);\r\n                    }\r\n                    scope.showInfoIcon = false;\r\n                    if (keyUpTimeout) {\r\n                        $timeout.cancel(keyUpTimeout);\r\n                    }\r\n                    keyUpTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyUp({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                    DuplicateData(scope.displayModel, e);\r\n                };\r\n                scope.ngKeyDown = function (e) {\r\n                    scope.showInfoIcon = false;\r\n                    if (keyDownTimeout) {\r\n                        $timeout.cancel(keyDownTimeout);\r\n                    }\r\n                    keyDownTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyDown({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                    var formattedData = getFormattedData(newOptionsSelected);\r\n                    copyArray = angular.copy(formattedData).map(function (data) { return data.value.toLowerCase(); });\r\n                    DuplicateData(scope.displayModel, e);\r\n                };\r\n                scope.ngKeyPress = function (e) {\r\n                    if (keyPressTimeout) {\r\n                        $timeout.cancel(keyPressTimeout);\r\n                    }\r\n                    keyPressTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyPress({ $event: e });\r\n                        }\r\n\r\n                        if (e.charCode == 13) {\r\n                            scope.onEnter({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                   DuplicateData(scope.displayModel, e);\r\n                };\r\n\r\n                scope.clickedOnIcon = function (e) {\r\n                    scope.callbackOnIconClick({ $event: e });\r\n                };\r\n\r\n                scope.validateRules = function () {\r\n                    var model = getModel();\r\n                    if (scope.readonly == 'true') {\r\n                        scope.isActive = true;\r\n                        return;\r\n                    }\r\n                    if (scope.$eval(scope.isMandatory) && !scope.clienterror && (Object.keys(model).length == 0 || model == null || model == undefined || model == '' || model.id == 0)) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                        scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n                        return;\r\n                    }\r\n                    if (scope.clienterror) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                        scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                        return;\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    scope.errorModel = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\r\n                            ruleLlen = rules.length;\r\n                        for (var i = 0; i < ruleLlen; i++) {\r\n                            var tRule = rules[i];\r\n                            if (typeof tRule == 'object') {\r\n                                if (eval((tRule.rule).replace(/this/g, 'scope.displayModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = tRule.error;\r\n                                    scope.errorModel = tRule.error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    RuleEngine.isValid(tRule, function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = $translate.instant(e.errorData.error);\r\n                                        scope.errorModel = $translate.instant(e.errorData.error);\r\n                                        isFoundInvalid = true;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var unbindValidate = scope.$watchGroup(['validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                    if (newVal[0] || newVal[1] != oldVal[1]) {\r\n                        scope.validateRules();\r\n                    }\r\n\r\n                    if (newVal[2] != oldVal[2] || newVal[3] != oldVal[3]) {\r\n                        if (scope.showinfo || scope.showwarning) {\r\n                            element.hasClass('input-field').addClass('field-has-icon');\r\n                        }\r\n                        else {\r\n                            element.hasClass('.input-field').removeClass('field-has-icon');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (scope.clienterror) {\r\n                    scope.validateRules();\r\n                }\r\n\r\n                function setModel(value, mode) {\r\n                    value = !value ? (multiselect ? [] : {}) : value;\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        if (multiselect && mode == \"autocomplete\") {\r\n                            var v = value;\r\n                            value = ngModel.$modelValue;\r\n                            value.push(v);\r\n                        };\r\n                        ngModel.$setViewValue(value);\r\n                        ngModel.$render();\r\n                        if (mode != \"autocomplete\") {\r\n                            setValues(value);\r\n                        };\r\n                    } else {\r\n                        if (multiselect && mode == \"autocomplete\") {\r\n                            scope.ngModel.push(value)\r\n                        } else if (multiselect === true) {\r\n                            if (typeof scope.ngModel == \"string\") {\r\n                                scope.ngModel = value;\r\n                            } else {\r\n                                if (scope.ngModel == value) {\r\n                                    value = angular.copy(value);\r\n                                }\r\n                                scope.ngModel.length = 0;\r\n                                [].push.apply(scope.ngModel, value);\r\n                            };\r\n                        } else {\r\n                            scope.ngModel = value;\r\n                        }\r\n                        setValues(scope.ngModel);\r\n                    }\r\n                };\r\n\r\n                function getModel() {\r\n                    var model;\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        model = ngModel.$modelValue;\r\n                    } else {\r\n                        model = scope.ngModel;\r\n                    }\r\n                    return model;\r\n                }\r\n\r\n                function DuplicateData(editTest, event) {\r\n\r\n                    var newArrLen = '';\r\n                    if (editTest || event.keyCode == 188 || event.type == \"keyup\") {\r\n                        var str_array = editTest.split(','),\r\n                            strLen = str_array.length;\r\n                        for (var i = 0; i < strLen; i++) {\r\n                            str_array[i] = str_array[i].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\r\n                        }\r\n                        angular.forEach(str_array, function (val) {\r\n                            var indexabc = copyArray.indexOf(val.toLowerCase());\r\n                            selectedArrIndex = newOptionsSelected.map(function (data) { return data.value.toLowerCase(); }).indexOf(val.toLowerCase());\r\n\r\n                            if (selectedArrIndex != -1 && newArr.indexOf(val) == -1) {\r\n                                selectedArr.push(selectedArrIndex);\r\n                                var ab = newOptionsSelected.splice(selectedArrIndex, 1)[0];\r\n                                newArr.push(ab);\r\n                                ab._$index = indexabc;\r\n                            }\r\n                        });\r\n                        if (event) {\r\n                            if (event.keyCode == 8 || event.keyCode == 46 || editTest.length == 3) {\r\n                            angular.forEach(str_array, function (val, v1, v2) {\r\n                                var isPresent = newArr.map(function (data) { return data.value; }).indexOf(val);\r\n                                if (isPresent == -1) {\r\n                                    newArrLen = newArr.length;\r\n                                    for (var i = 0 ; i < newArrLen; i++) {\r\n                                        var tNewArr = newArr[i];\r\n                                        if (newOptionsSelected.indexOf(tNewArr) == -1 && v2.indexOf(tNewArr.value) == -1) {\r\n                                            newOptionsSelected.splice(tNewArr._$index, 0, tNewArr);\r\n                                            newArr.splice(i, 1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                        }\r\n                    }\r\n                    else {\r\n                        newArrLen = newArr.length;\r\n                        for (var i = 0 ; i < newArrLen; i++) {\r\n                            if (newOptionsSelected.indexOf(newArr[i]) == -1) {\r\n                                newOptionsSelected.splice(newArr[i]._$index, 0, newArr[i]);\r\n                                newArr.splice(i, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                function getFormattedData(data) {\r\n                    var dataLength = data.length;\r\n                    if (!data || dataLength == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < dataLength; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{'),\r\n                                parentSplitLen = parentSplit.length;\r\n                            for (var j = 0; j < parentSplitLen; j++) {\r\n                                var childSplit = parentSplit[j].split('}'),\r\n                                    childSplitLen = childSplit.length;\r\n                                for (var k = 0; k < childSplitLen; k++) {\r\n                                    var childObj = childSplit[k];\r\n                                    if (childObj.indexOf('.') > 0 || data[i].hasOwnProperty(childObj)) {\r\n                                        str = str.replace(new RegExp(\"{\" + childObj + \"}\", \"ig\"), eval('data[i].' + childObj));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n                var filterKeys;\r\n                if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                    filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                }\r\n                else {\r\n                    filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                }\r\n\r\n                //set optionFormat displayFormat related to filterKeys incase undefined\r\n                scope.filterKeys = scope.$eval(scope.filterkeys);\r\n                function getOpFormate() {\r\n                    var opFor = \"\",\r\n                        filterKeyLen = filterKeys.length;\r\n                    for (var i = 0; i < filterKeyLen; i++) {\r\n                        opFor = opFor + \"{\" + filterKeys[i] + \"} \";\r\n                    }\r\n                    if (opFor == \"\") {\r\n                        return \"{title}\";\r\n                    }\r\n                    opFor.trim();\r\n                    return opFor;\r\n                }\r\n\r\n                function getDispFormate() {\r\n                    var opDisp = \"<span>\",\r\n                        filterKeyLen = filterKeys.length;\r\n                    for (var i = 0; i < filterKeyLen; i++) {\r\n                        opDisp = opDisp + \"{\" + filterKeys[i] + \"} \";\r\n                    }\r\n                    if (opDisp == \"<span>\") {\r\n                        return \"{title}\";\r\n                    }\r\n                    opDisp.trim();\r\n                    opDisp = opDisp + \"</span>\";\r\n                    return opDisp;\r\n                }\r\n\r\n                var optionFormat = scope.optionformat ? scope.optionformat : getDispFormate();\r\n                var displayFormat = scope.displayformat ? scope.displayformat : getOpFormate();\r\n\r\n                function getDisplayData(data) {\r\n                    if (data == undefined || data == null || data == '') {\r\n                        return '';\r\n                    }\r\n                    var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                    try {\r\n                        var parentSplit = str.split('{'),\r\n                            parentSplitLen = parentSplit.length;\r\n                        for (var j = 0; j < parentSplitLen; j++) {\r\n                            var childSplit = parentSplit[j].split('}'),\r\n                                childSplitLen = childSplit.length;\r\n                            for (var k = 0; k < childSplitLen; k++) {\r\n                                var tChild = childSplit[k];\r\n                                if (tChild.indexOf('.') > 0 || data.hasOwnProperty(tChild)) {\r\n                                    evalResult = eval('data.' + tChild);\r\n                                    evaluatedKeysCounter++;\r\n                                    if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                        evalResult = '';\r\n                                        nullKeysCounter++;\r\n                                    }\r\n                                    str = str.replace(new RegExp(\"{\" + tChild + \"}\", \"ig\"), evalResult);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (evaluatedKeysCounter == nullKeysCounter) {\r\n                            str = '';\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                    return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                }\r\n                //Function return the array of proprrties Input:\"{abc} {dfg}\"; Output:[\"abc\",\"dfg\"]\r\n                function getFormatedArray(formatString) {\r\n                    var str = formatString.trim();\r\n                    try {\r\n                        var parentSplit = str.split('{'), propArray = [],\r\n                            tLen = parentSplit.length;\r\n                        for (var j = 0; j < tLen; j++) {\r\n                            var childSplit = parentSplit[j].split('}');\r\n                            if (j != 0) {\r\n                                propArray.push(childSplit[0].trim());\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    return propArray === undefined || propArray === null || propArray === 'undefined' || propArray === 'null' ? '' : propArray;\r\n                };\r\n                var formatedArray = getFormatedArray(displayFormat);\r\n                \r\n                var delimiterVal = null;\r\n                if (multiselect == true) {\r\n                    delimiterVal = /(,|;)\\s*/;\r\n                }\r\n                var unbindOptions, autoCompleteField;\r\n               var toutOptions =  $timeout(function () {\r\n                    unbindOptions = scope.$watch('options', function (newOptions) {\r\n                        try {\r\n                            newOptionsSelected = newOptions;\r\n                            var formattedData = getFormattedData(newOptionsSelected);\r\n                            copyArray = angular.copy(formattedData).map(function (data) { return data.value.toLowerCase(); });\r\n                            if (!readonly) {\r\n                                if (!$('#' + scope.typeaheadId).devbridgeAutocomplete()) {\r\n                                    autoCompleteField = $('#' + scope.typeaheadId).devbridgeAutocomplete({\r\n                                        filterKeys: filterKeys,\r\n                                        optionFormat: optionFormat,\r\n                                        displayFormat: displayFormat,\r\n                                        lookup: formattedData,\r\n                                        width: scope.width,\r\n                                        maxHeight: scope.height,\r\n                                        multiselect: multiselect,\r\n                                        showLookup: showLookup,\r\n                                        addnew: addnew,\r\n                                        minChars: minCharForTrigger,\r\n                                        delimiter: delimiterVal,\r\n                                        showNoSuggestionNotice: showNoSuggestion,\r\n                                        noSuggestionNotice: noSuggestionNotice,\r\n                                        loading: loading,\r\n                                        minMultiselect: minMultiselect,\r\n                                        showLookupKey: showLookupKey,\r\n                                        addNewKey: addNewKey,\r\n                                        onSelect: function (suggestion) {\r\n                                            angular.element('#' + scope.labelFortypeaheadId).trigger('click');\r\n                                            scope.$evalAsync(function () {\r\n                                                if (multiselect == true) {\r\n                                                    scope.displayModel = \"\";\r\n                                                    setModel(suggestion, 'autocomplete');\r\n                                                    angular.forEach(getModel(), function (val) {\r\n                                                        scope.displayModel = scope.displayModel + val.value + ', ';\r\n                                                    });\r\n                                                    DuplicateData(scope.displayModel);\r\n                                                } else {\r\n                                                    scope.displayModel = getDisplayData(suggestion);\r\n                                                    setModel(suggestion, 'autocomplete');\r\n                                                }\r\n                                                var tOutTemp = $timeout(function () {\r\n                                                    scope.onSelect(suggestion);\r\n                                                    $timeout.cancel(tOutTemp);\r\n                                                    tOutTemp = null;\r\n                                                });\r\n                                            });\r\n                                        },\r\n                                        onClickAddNew: function (e) {\r\n                                            if (addnew) {\r\n                                                scope.callAddNew({ $event: e });\r\n                                                document.body.style.height = document.body.scrollHeight + 2 + \"px\";\r\n                                                var tTout = setTimeout(function () {\r\n                                                    window.scrollTo(0, (document.body.scrollTop + 1));\r\n                                                    window.scrollTo(0, (document.body.scrollTop - 1));\r\n                                                    document.body.style.height = \"\";\r\n                                                    clearTimeout(tTout);\r\n                                                    tTout = null;\r\n                                                });\r\n                                            }\r\n                                        },\r\n                                        onClickShowLookup: function (e) {\r\n                                            if (showLookup) {\r\n                                                scope.openLookup();\r\n                                            }\r\n                                        }\r\n                                    }).devbridgeAutocomplete();\r\n\r\n                                    $(autoCompleteField.element).focus(function (e) {\r\n                                        alignLookUp.call(this, e, autoCompleteField);\r\n                                        var drp = $window.lastOpenedDropdownConfig;\r\n                                        if (drp && !drp.activates.is(\":hidden\") && !angular.element(this).closest(drp.activates).length) { // focused textBox shuld not be within the Materlized dropDown thenonly close the Materlized dropDown.\r\n                                            //Materlized dropdown should be closed on focus on autoComplatetextbox\r\n                                            drp.origin.trigger('close');\r\n                                        }\r\n                                    }).keyup(function (e) {\r\n                                        alignLookUp.call(this, e, autoCompleteField);\r\n                                    });\r\n\r\n                                    //Closing the suggestions on scroll to prevent overlapping issue\r\n                                    angular.element($window).scroll(function (e) {\r\n                                        if (autoCompleteField.visible) {\r\n                                            autoCompleteField.hide();\r\n                                        }\r\n                                    });\r\n                                    //End of closing the suggestions on scroll to prevent overlapping issue\r\n\r\n                                  \r\n                                } else {\r\n                                    $('#' + scope.typeaheadId).devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    });\r\n                    var unbindLoading = scope.$watch('loading', function (newVal, oldVal) {\r\n                        if (newVal == true || newVal == false) {\r\n                            $('#' + scope.typeaheadId).devbridgeAutocomplete().setLoading(newVal);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function alignLookUp(e) {\r\n                    var _this = $(this),\r\n                        scrollTop = $(\"html\").scrollTop() || $(\"body\").scrollTop(),\r\n                        elPosition = _this.offset(),\r\n                        elHeight = _this.outerHeight(),\r\n                        lookup = $(autoCompleteField.suggestionsContainer),\r\n                        lookupPosition = lookup.offset(),\r\n                        lookupHeight = lookup.outerHeight(),\r\n                        isOutOfBound = ((elPosition.top - scrollTop) + elHeight + lookupHeight) > window.innerHeight;\r\n\r\n                    lookup.css(\"opacity\", 0);\r\n                    if (isOutOfBound) { // if lookup list is going out of window\r\n                        if (autoCompleteField.options.orientation != \"top\") {\r\n                            autoCompleteField.options.orientation = \"top\";\r\n                            autoCompleteField.fixPosition();\r\n                        }\r\n                    } else {\r\n                        if (autoCompleteField.options.orientation == \"top\") {\r\n                            autoCompleteField.options.orientation = \"bottom\";\r\n                            autoCompleteField.fixPosition();\r\n                        }\r\n                    }\r\n                    lookup.css(\"opacity\", 1);\r\n                };\r\n                scope.openLookup = function () {\r\n                    showLookupTrigger = true;\r\n                    var len = newArr.length;\r\n                    for (var i = 0 ; i < len; i++) {\r\n                        var tItem = newArr[i];\r\n                        if (newOptionsSelected.indexOf(tItem) == -1) {\r\n                            newOptionsSelected.splice(tItem._$index, 0, tItem);\r\n                            newArr.splice(i, 1);\r\n                        }\r\n                    }\r\n                    if (scope.readonly === 'true' && !scope.mutiselectVal[1]) return false;\r\n\r\n                    if ($.isFunction(scope.lookupOpen)) {\r\n                        scope.lookupOpen();\r\n                    }\r\n                    var lookupConfig = {\r\n                        modelData: lookup.getTempModel() || getModel(),\r\n                        config: {\r\n                            mutliselect: multiselect,\r\n                            displayProperties: formatedArray,\r\n                            options: scope.options,\r\n                            descriptionKey: scope.desckey,\r\n                            addnew: addnew,\r\n                            onKeyUp: attrs.searchtextKeyUp ? scope.searchtextKeyUp : '',\r\n                            titleOfModel: scope.titleofmodel,\r\n                            defaultSelectOption: scope.defaultselectoption,\r\n                            defaultSelectionText: scope.defaultselectiontext,\r\n                            selectTypeOption: scope.selecttypeoption,\r\n                            readonly: (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false,\r\n                            isMandatory: scope.isMandatory,\r\n                            isDefaultMandatory: scope.isDefaultMandatory,\r\n                            errorModel: scope.errorModel,\r\n                            minMultiselect: minMultiselect,\r\n                            label: scope.label,\r\n                            searchFilterKey: scope.$eval(scope.filterkeys),\r\n                            isLazyLoadingEnabled: scope.isLazyLoadingEnabled\r\n                        }\r\n                    }\r\n                    var lookupTout = $timeout(function () {\r\n                        lookup.open(lookupConfig, function (response) {\r\n                            if (response.addnew) {\r\n                                if ($.isFunction(scope.callAddNew)) {\r\n                                    scope.callAddNew();\r\n                                }\r\n                            }\r\n                            setModel(response.result);\r\n                            scope.defaultselectiontext = response.defaultSelectionText;\r\n                            scope.selecttypeoption = response.selectTypeOption;\r\n                            scope.errorModel = response.errorModel;\r\n                            scope.validateRules();\r\n                            if ($.isFunction(scope.lookupHide)) {\r\n                                scope.lookupHide({ data: response });\r\n                            }\r\n                        });\r\n                        lookup.onScrollEnd(function () {\r\n                            scope.onScrollEnd({});\r\n                        });\r\n                        lookup.onScrollTop(function () {\r\n                            scope.onScrollTop({});\r\n                        });\r\n                        lookup.onScrollInProgress(function () {\r\n                            scope.onScrollInProgress({});\r\n                        });\r\n                        $timeout.cancel(lookupTout);\r\n                        lookupTout = null;\r\n                    });\r\n                }\r\n                scope.$on('$destroy', function () {\r\n                    if ($('#' + scope.typeaheadId).devbridgeAutocomplete()) {\r\n                        $('#' + scope.typeaheadId).devbridgeAutocomplete().dispose();\r\n                    }\r\n                    destroyEverythingElse();\r\n                });\r\n\r\n                scope.multiselectFlag = false;\r\n\r\n                function setValues(newVal) {\r\n                     scope.mutiselectVal = [\"\"];\r\n                    if (angular.isDefined(newVal) && newVal != null) {\r\n                        var valuee = \"\",\r\n                        totalEl = newVal.length;\r\n                        if (multiselect == true) {\r\n                            if (totalEl > 0) {\r\n\r\n                                if (minMultiselect.event) {\r\n                                    if ((totalEl == minMultiselect.value) && (getModel().length == minMultiselect.value)) {\r\n                                        scope.validateRules();\r\n                                    }\r\n                                }\r\n\r\n                                if (showLookup) {\r\n                                    scope.multiselectFlag = true;\r\n                                }\r\n                                if (scope.defaultselectoption) {\r\n                                    if (!scope.defaultselectiontext) {\r\n                                        scope.defaultselectiontext = getDisplayData(newVal[0]).replace(/(^\\s*)|(\\s*$)/gi, \"\");\r\n                                        scope.mutiselectVal = [scope.defaultselectiontext + \" (Default)\"];\r\n                                    }\r\n                                    for (var i = 0; i < totalEl; i++) {\r\n                                        if (newVal[i].name === scope.defaultselectiontext) {\r\n                                            scope.mutiselectVal = [getDisplayData(newVal[i]) + \" (Default)\"]; break;\r\n                                        }\r\n                                    }\r\n\r\n                                } else {\r\n                                    scope.mutiselectVal = [getDisplayData(newVal[0])];\r\n                                }\r\n\r\n                                if (totalEl > 1) {\r\n                                    scope.mutiselectVal.push(\"+\" + (totalEl - 1) + \" More\");\r\n                                }\r\n                            } else {\r\n                                scope.multiselectFlag = false;\r\n                            }\r\n                            for (var i = 0; i < totalEl; i++) {\r\n                                if (valuee && totalEl > 1) {\r\n                                    valuee += \",\" + getDisplayData(newVal[i]);\r\n                                }\r\n                                else {\r\n                                    valuee += getDisplayData(newVal[i])\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        else {\r\n                            valuee = getDisplayData(newVal);\r\n                            scope.showInfoIcon = (valuee == '' || scope.isSupplier) ? false: true;\r\n                        }\r\n                        scope.displayModel = valuee.trim();\r\n                    }\r\n                    scope.isActive = checkIfActive();\r\n                    checkInfoToolTip();\r\n                }\r\n\r\n                var unbindNumber = scope.$watch(\"ngModel\", function (newVal) {\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        setValues(ngModel.$modelValue);\r\n                    } else {\r\n                        setValues(newVal);\r\n                    }\r\n                });\r\n                function destroyEverythingElse() {\r\n                    element.off(); // deregister all event handlers\r\n                    $('#' + scope.typeaheadId).off();\r\n                    $('#' + scope.labelFortypeaheadId).off();\r\n                    if (unbindFocus)\r\n                        unbindFocus();\r\n                    if (angular.isFunction(unbindOptions))\r\n                        unbindOptions();\r\n                    if (unbindNumber)\r\n                        unbindNumber();\r\n                    // Removing contents of HTML from DOM\r\n                    $('#' + scope.typeaheadId).remove();\r\n                    $('#' + scope.labelFortypeaheadId).remove();\r\n                    $timeout.cancel(toutOptions);\r\n\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTypeahead/smartTypeaheadTemplate.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartUiGrid', ['$timeout', '$filter', 'gridConfigProvider', 'APPCONSTANTS', 'httpService', 'uiGridConstants', '$injector',\n    function ($timeout, $filter, gridConfigProvider, APPCONSTANTS, httpService, uiGridConstants, $injector) {\r\n        return {\r\n            restrict: 'AE',\n            scope: {\r\n                colDef: '@',\n                model: '=',\n                callback: '&',\n                focusRowCol: '@',\n                validationService: '@',\n                searchTerm: '@',\n                otherGridOptions: '@',\n                api: '=',\n                onRenderingStart: '&',\n                onRenderingFinish: '&',\n                dynamicPaginationPageSizes: '=',\r\n                dynamicItemTotal: '='\r\n\n            },\n            link: function (scope, element, attr) {\r\n\n                var paginationOptions = {\r\n                    pageNumber: 1,\n                    pageSize: 12,\n                    sort: null\r\n                };\n\n                if (scope.validationService != undefined) {\r\n                    var service = $injector.get(scope.validationService);\n                    scope.$parent[scope.validationService] = service;\n                    scope.cellClassFunction = scope.validationService + \".validateGridRow\";\n                    scope.cellEditableConditionFunction = scope.validationService + \".isEditableGridRow\";\r\n                }\n                var gridInstance;\n                var defaultGridOptions = {\r\n                    paginationPageSizes: scope.dynamicPaginationPageSizes ? scope.dynamicPaginationPageSizes : [10, 25, 50, 75],\n                    paginationPageSize: scope.dynamicPaginationPageSizes && scope.dynamicPaginationPageSizes[0] ? scope.dynamicPaginationPageSizes[0] : 10,\n                    useExternalPagination: scope.dynamicPaginationCallback ? true : false,\n                    enableCellEditOnFocus: true,\n                    enableFiltering: true,\n                    enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,\n                    treeRowHeaderAlwaysVisible: false,\n                    showTreeExpandNoChildren: false\r\n                };\n                var callback = scope.$eval(scope.callback);\n                var cellClassFunction = scope.$parent.$eval(scope.cellClassFunction);\n                var cellEditableConditionFunction = scope.$parent.$eval(scope.cellEditableConditionFunction);\n\n                scope.gridConfig = defaultGridOptions;\n                var modifiedColDef;\n\n                if (scope.api) {\r\n                    scope.api.getActiveColumns = function () {\r\n                        return scope.gridConfig.columnDefs;\r\n                    };\r\n                }\n\n                scope.$watch('focusRowCol', function (n, o) {\r\n                    if(n){\r\n                        gridInstance.cellNav.scrollToFocus(n.row.entity,n.col.colDef)\r\n                    }\r\n                });\n\n                scope.$watch('scope.dynamicItemTotal', function (n, o) {\r\n                    scope.gridConfig.totalItems = scope.dynamicItemTotal;\r\n                });\n\n                scope.$watch('searchTerm', function (n, o) {\r\n                    if (n && typeof n == 'string') {\r\n                        gridInstance.grid.refresh();\r\n                    }\r\n                });\n\n                scope.$watch('colDef', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        modifiedColDef = gridConfigProvider.getMassagedGirdConfig(scope.$eval(n), scope, cellClassFunction, cellEditableConditionFunction);\n                        _.each(modifiedColDef, function (def, idx, defs) {\r\n                            if (def.customTreeAggregationFinalizerFn) {\r\n                                def.customTreeAggregationFinalizerFn = eval(\"(\" + def.customTreeAggregationFinalizerFn + \")\");\r\n                            }\n                            if (def.customTreeAggregationFn) {\r\n                                def.customTreeAggregationFn = eval(\"(\" + def.customTreeAggregationFn + \")\");\r\n                            }\r\n                        });\n                        scope.gridConfig.columnDefs = null;\n                        scope.gridConfig.columnDefs = modifiedColDef;\n\n                        var groupingCol = _.filter(scope.gridConfig.columnDefs, function (col) { return col.isGrouped;})\n                        if (groupingCol && groupingCol.length > 0 && gridInstance) {\r\n                            gridInstance.grouping.clearGrouping();\n                            _.each(groupingCol, function (col) {\r\n                                gridInstance.grouping.groupColumn(col.field);\r\n                            });\r\n                        }\r\n                    }\r\n                });\n\n                scope.$watch('otherGridOptions', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        var modifiedOtherGridOptions = angular.merge({}, scope.gridConfig, scope.$eval(n));\n                        _.each(modifiedOtherGridOptions.appScopeProvider, function (prop, i, props) {\r\n                            modifiedOtherGridOptions.appScopeProvider[i] = eval(prop);\r\n                        });\n                        scope.gridConfig = null;\n                        scope.gridConfig = modifiedOtherGridOptions;\r\n                    }\r\n                });\n\n                scope.$watch('model', function (newModel) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (!newModel) {\r\n                        scope.gridConfig.data = [];\n                        return;\r\n                    }\n                    var treeColumns = treeViewColumnsToBeCreated(scope.gridConfig.columnDefs);\n                    if (treeColumns.length > 0) {\r\n                        scope.gridConfig = angular.extend(scope.gridConfig, {\r\n                            showTreeRowHeader: true,\n                            enableRowHeaderSelection: true, // Display checkboxes on every row when it's true\n                            showTreeExpandNoChildren: false\r\n                        });\n                        scope.gridConfig.data = assignTreeLevel($filter('orderBy')(newModel, treeColumns[0].field), treeColumns[0].field);\r\n                    }\n                    else {\r\n                        scope.gridConfig.data = newModel;\r\n                    }\r\n                });\r\n\r\n\r\n                if (!gridInstance) {\r\n                    scope.gridConfig.onRegisterApi = getGridInstanceCallback;\r\n                }\n\n\n                /*\n                 *  This function will check and return an array of columns for tree view\n                 */\n                var treeViewColumnsToBeCreated = function (colDefs) {\r\n                    return _.filter(colDefs, function (col) {\r\n                        return col.isTree;\r\n                    });\r\n                };\n\n                /*\n                 *  Sort grid data\n                 */\n                var sortData = function (data, key) {\r\n                    return data.slice(0).sort(function (a, b) {\r\n                        return (eval('a.' + key) > eval('b.' + key)) ? 1 : (eval('a.' + key) < eval('b.' + key)) ? -1 : 0;\r\n                    });\r\n                };\n\n                /*\n                 *  Assign tree view since it is required to create a tree view\n                 */\n                var assignTreeLevel = function (data, key) {\r\n                    var loopedItems = [];\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i].$$treeLevel = 0;\n                        if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                            data[i].$$treeLevel = 1;\r\n                        }\n                        if (eval('data[i].' + key).toString().indexOf('.') > -1) {\r\n                            var SplitLevelArr = eval('data[i].' + key).toString().split('.');\n                            data[i].$$treeLevel = SplitLevelArr.length - 1;\n                            if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                                data[i].$$treeLevel = parseInt(data[i].$$treeLevel) + 1;\r\n                            }\r\n                        }\n                        loopedItems.push(eval('data[i].' + key));\r\n                    }\n                    return data;\r\n                };\n\n                function getCellValue(row, col) {\r\n                    var data = gridInstance.grid.getCellDisplayValue(row, col);\n                    return data ? data.toString() : \"\";\r\n                };\n\n                function outerSearchCallback(rows, cols) {\r\n                    if (scope.searchTerm && typeof scope.searchTerm == 'string' && scope.searchTerm.length > 0) {\r\n                        _.each(rows, function (row, rowIndex) {\r\n                            var match = false;\n                            _.each(cols, function (col) {\r\n                                var cellValue = $filter('translate')(getCellValue(row, col));\n                                if (col.colDef.attributes && col.colDef.attributes.type && col.colDef.attributes.type.toLowerCase() == \"date\") {\r\n                                    var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\n                                    formattedDate = formattedDate.split('+');\n                                    formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\n                                    var month = formattedDate.getMonth() + 1 + '';\n                                    if (month.length === 1) {\r\n                                        month = 0 + '' + month;\r\n                                    }\n                                    formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\n                                    var decession = formattedDate.toLowerCase().trim().indexOf(escape(scope.searchTerm).replace(/%5C/g, '').trim()) > -1;\n                                    if (decession) {\r\n                                        match = true;\r\n                                    }\r\n                                }\n                                else if (cellValue.match(new RegExp(scope.searchTerm, \"i\"))) {\r\n                                    match = true;\r\n                                }\r\n                            });\n                            row.visible = match;\r\n                        });\r\n                    };\n                    return rows;\r\n                };\n\n                function onCheckboxSelect(row) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridCheckBoxDispatcher', {\r\n                            \"row\": row\r\n                        });\r\n                    }\r\n                }\n\n                //  this timeout prevents rows rendered callback being fired multiple times\n                var rowsRenderedTimeout;\n                function getGridInstanceCallback(instance) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('gridInstance', instance);\r\n                    }\n                    gridInstance = instance;\n                    if (typeof scope.api != undefined && scope.api != null && scope.api.rowSelectionCallback) {\r\n                        scope.gridConfig.isRowSelectable = scope.api.rowSelectionCallback;\n                        //gridInstance.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                    }\n                    gridInstance.grid.registerRowsProcessor(outerSearchCallback, 200);\n                    gridInstance.core.on.rowsRendered(scope, function (row) {\r\n                        if (rowsRenderedTimeout) {\r\n                            $timeout.cancel(rowsRenderedTimeout);\n                            rowsRenderedTimeout = undefined;\r\n                        }\n                        rowsRenderedTimeout = $timeout(function () {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridRowsRenderedDispatcher', {\r\n                                    \"row\": row\r\n                                });\r\n                            }\n                            setHeightForGrid();\n                            angular.isFunction(scope.onRenderingFinish) && scope.onRenderingFinish();\r\n                        }, 500);\r\n                    });\n\n\n                    gridInstance.selection.on.rowSelectionChanged(scope, onCheckboxSelect);\n                    gridInstance.cellNav.on.navigate(scope, function (newRowcol, oldRowCol) {\r\n                        if (newRowcol.col.colDef.isRegFocusCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridFocusColumnDispatcher', {\r\n                                    \"focusedRowColObj\": newRowcol,\r\n                                    \"bluredRowColObj\": oldRowCol,\r\n                                    \"instance\": gridInstance\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n                    gridInstance.edit.on.afterCellEdit(scope, function (rowEntity, colDef) {\n                        //if (colDef.isRegUpdateCol) {\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridUpdateColumnDispatcher', {\r\n                                \"rowModel\": rowEntity,\n                                \"colDef\": colDef,\n                                \"instance\": gridInstance\r\n                            });\r\n                        }\n                        // }\n                    });\n                    gridInstance.edit.on.beginCellEdit(scope, function (rowEntity, colDef) {\n                        //var focusedCell = gridInstance.cellNav.getFocusedCell();\n                        //if (!focusedCell.col.cellClass) {\n                        //    gridInstance.cellNav.scrollToFocus(rowEntity, colDef);\n                        //}\n\n                        switch (colDef.uiType) {\r\n                            case \"dropdown\":\n                                if (colDef.attributes.serviceObj && colDef.attributes.options.length == 0) {\r\n                                    getDataFolDropDown(colDef, rowEntity)\r\n                                } else {\r\n                                    colDef.attributes.options.map(function (x) { x[colDef.attributes.dataKey] = $filter('translate')(x[colDef.attributes.dataKey]) });\n                                    scope.dropDownOptions = colDef.attributes.options;\r\n                                }\n                                break;\r\n                        };\n\n                        if (colDef.isRegBeginEditCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridBeginEditColumnDispatcher', {\r\n                                    \"rowModel\": rowEntity,\n                                    \"colDef\": colDef\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n\n                    gridInstance.pagination.on.paginationChanged(scope, function (newPage, pageSize) {\n                        //alert(newPage+\"\");\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridDynamicPaginationCallback', {\r\n                                \"gridConfig\": scope.gridConfig,\n                                \"index\": newPage,\n                                \"pageSize\": pageSize\r\n                            });\r\n                        }\r\n                    });\r\n                };\n\n                function setHeightForGrid() {\r\n                    var rowCount = gridInstance.core.getVisibleRows(gridInstance.grid).length;\n                    var height;\n                    if (rowCount == 0) return;\n                    if (scope.gridConfig.rowHeight > 0) {\r\n                        height = ((rowCount + 1) * scope.gridConfig.rowHeight) + 54;\r\n                    } else {\r\n                        height = (rowCount * 35) + 54;\r\n                    }\n                    $($('.ui-grid')[0]).css({ 'width': '100%', 'height': height });\n                    $($('.ui-grid')[0]).find('ui-grid-header-canvas').css(\"width\", \"100%\");\n                    //gridInstance.core.handleWindowResize();\n                };\n\n\n                //*****************************************************autoSuggest bindings START*********************************************\n                scope.autoSuggestOptions = [];\n                scope.autoSuggestOnChange = function (e, col, row) {\r\n                    if (angular.isUndefined(e.data) || e.data.length == 0) {\r\n                        return;\r\n                    }\n                    callback('composedGridAutoSuggestChange', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": (e.data[0] !== undefined ? e.data[0].value : e.displayModel)\r\n                    });\r\n                    //logic to clear split entities autosuggest at grid level, needs to be handled further to make common for other autosuggests\r\n                 \r\n                    if (e.data[0].value == \"\")   {\r\n                        var obj = row.entity[col.colDef.field.split(\".\")[0]];\r\n                        var index;\r\n                        if (obj != null && obj != undefined && col.colDef.field.indexOf('split') >= 0) {\r\n                            if (row.entity.id > 0)\r\n                                index = _.findIndex(scope.model, { id: row.entity.id });\r\n                            else {\r\n                                _.each(scope.model, function (data, indexFound) {\r\n                                    if (_.isEqual(data, row.entity)) {\r\n                                        index = indexFound;\n                                        return;\r\n                                    }\r\n                                });\r\n                            }\n                            scope.model[index][col.colDef.field.split(\".\")[0]] = {\r\n                                \"entityType\": obj.entityType, \"fieldId\": obj.fieldId, \"splitEntityId\": obj.splitEntityId, \"code\": 0, \"entityCode\": null, \"name\": null, \"title\": null\r\n                            };\r\n                        }\r\n                    }\n\n                    var serviceObj = col.colDef.attributes.serviceObj;\n                    if (serviceObj != undefined) {\r\n                        var req = {\r\n                            type: serviceObj.method === \"POST\" ?\"POST\": \"GET\",\n                            url: serviceObj.url,\n                            params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value)),\n                            timeout: 120000,\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\n                                \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                            }\r\n                        };\n                        if (req.type === \"POST\")\r\n                        {\r\n                            req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value));\n                            delete req.params;\r\n                        }\n                        httpService.directhttp(req).then(function (response) {\r\n                            if (serviceObj.CallbackObj) {\r\n                                response = serviceObj.CallbackObj(response, col.colDef.name)\r\n                            }\n                            var resp = [];\n                            if (typeof response === \"string\")\n                                response = JSON.parse(response);\n                            if (serviceObj.isFlatArray) {\r\n                                _.each(response, function (x, index) {\r\n                                    var obj = {};\n                                    obj[\"name\"] = x;\n                                    obj[\"code\"] = x;\n                                    resp.push(obj);\r\n                                });\r\n                            }\n                            else {\r\n                                _.each(response, function (obj) {\r\n                                    var mapperObj = {};\n                                    _.each(serviceObj.mapper, function (mapper) {\r\n                                        var mapperstri = '';\n                                        if (angular.isArray(mapper['toBeMapped'])) {\r\n                                            _.each(mapper['toBeMapped'], function (res) {\r\n                                                mapperstri += obj[res] + \" \";\r\n                                            });\n                                            mapperstri.trim();\r\n                                        }\n                                        else\n                                            mapperstri = obj[mapper['toBeMapped']];\n\n                                        mapperObj[mapper['key']] = mapperstri;\r\n\n                                    });\n                                    _.each(serviceObj.staticValues, function (item) {\r\n                                        mapperObj[item['key']] = item['value'];\r\n                                    });\n                                    resp.push(mapperObj);\r\n                                });\r\n                            }\n                            scope.autoSuggestOptions = resp;\n\n                            //for item number and item description autosuggest\n                            if (serviceObj.responseRequired) {\r\n                                callback('composedGridParseItemMasterData', {\r\n                                    \"rowModel\": row,\n                                    \"colDef\": col,\n                                    \"response\": response,\n                                    \"value\": e.data[0].value\r\n                                });\r\n                            }\r\n                        }, function () {   /* Failure case here */ });\r\n                    }\n                    else {\r\n                        return;\r\n                    }\r\n\n                };\n                scope.autoSuggestOnSelect = function (event, autoSuggestModel, row, col) {\r\n                    autoSuggestModel = event.data;\n                    callback('composedGridSelectItemMasterData', {\r\n                        \"data\": autoSuggestModel,\n                        \"row\": row,\n                        \"col\": col,\r\n                        \"isModified\":true\r\n                    });\r\n                };\n                //*****************************************************autoSuggest bindings END***********************************************\n\n                //*****************************************************dropDOwn bindings START***********************************************\n                scope.isObject = function (val) {\r\n                    return typeof val == 'object';\r\n                }\n\n                scope.dropDownOnChange = function (row, col, val) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridDropDownOnSelectDispatcher', {\r\n                            \"row\": row,\n                            \"col\": col,\n                            \"val\": val\r\n                        });\r\n                    }\r\n                };\n\n                scope.dropDownOptions = [];\n                function getDataFolDropDown(col, row) {\r\n                    var serviceObj = col.attributes.serviceObj;\n                    var req = {\r\n                        method: \"GET\",\n                        url: serviceObj.url,\n                        params: serviceObj.param,\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\n                            \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                        }\r\n                    };\n                    httpService.directhttp(req).then(function (response) {\r\n                        if (typeof row[col.field] != 'object') {\r\n                            var resp = [];\n                            _.each(response, function (x, index) {\r\n                                var obj = {};\n                                obj[col.attributes.dataKey] = $filter('translate')(x);\n                                obj[col.attributes.idKey] = index;\n                                resp.push(obj);\r\n                            });\n                            col.attributes.options = resp;\r\n                        } else {\r\n                            col.attributes.options = response;\r\n                        }\n                        scope.dropDownOptions = col.attributes.options;\r\n                    }, function () {\r\n                    });\r\n                };\n                //*****************************************************dropDOwn bindings END***********************************************\n                //*****************************************************popup bindings START***********************************************\n\n\n                scope.popUpButtonClickCallback = function (row, col) {\n                    // segregate the splitpopup callback function based on config.js \n                    if (angular.isFunction(callback)) {\r\n                        if (col.colDef.isChargesGrid) {\r\n                            callback('composedChargesGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\n                        else {\r\n                            callback('composedGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\r\n                    }\r\n\n                };\n\n                //*****************************************************popup bindings END***********************************************\n\n                //*****************************************************checkBox bindings START***********************************************\n                scope.checkBoxOnChange = function (row, col, val) {\r\n                    callback('composedGridCheckBoxOnChangeDispatcher', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": val\r\n                    });\r\n                };\n                //*****************************************************checkBox bindings END***********************************************\n\n                //*****************************************************text & number keyup bindings START***********************************************\n                scope.textOrNumberKeyUp = function (e, col, row) {\r\n                    callback('composedGridTextKeyUp', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": e.target.value\r\n                    });\r\n                }\n                //*****************************************************text & number keyup bindings END***********************************************\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartUiGrid/smartUiGrid.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartUiTable', ['$timeout', '$filter', 'gridConfigProvider', 'APPCONSTANTS', 'httpService', 'uiGridConstants', '$injector',\n    function ($timeout, $filter, gridConfigProvider, APPCONSTANTS, httpService, uiGridConstants, $injector) {\r\n        return {\r\n            restrict: 'AE',\n            scope: {\r\n                colDef: '@',\n                model: '=',\n                callback: '&',\n                focusRowCol: '@',\n                validationService: '@',\n                searchTerm: '@',\n                otherGridOptions: '@',\n                api: '=',\n                onRenderingStart: '&',\n                onRenderingFinish: '&',\n                dynamicPaginationPageSizes: '=',\r\n                dynamicItemTotal: '='\r\n\n            },\n            link: function (scope, element, attr) {\r\n\n                var paginationOptions = {\r\n                    pageNumber: 1,\n                    pageSize: 12,\n                    sort: null\r\n                };\n\n                if (scope.validationService != undefined) {\r\n                    var service = $injector.get(scope.validationService);\n                    scope.$parent[scope.validationService] = service;\n                    scope.cellClassFunction = scope.validationService + \".validateGridRow\";\n                    scope.cellEditableConditionFunction = scope.validationService + \".isEditableGridRow\";\r\n                }\n                var gridInstance;\n                var defaultGridOptions = {\r\n                    paginationPageSizes: scope.dynamicPaginationPageSizes ? scope.dynamicPaginationPageSizes : [10, 25, 50, 75],\n                    paginationPageSize: scope.dynamicPaginationPageSizes && scope.dynamicPaginationPageSizes[0] ? scope.dynamicPaginationPageSizes[0] : 10,\n                    useExternalPagination: scope.dynamicPaginationCallback ? true : false,\n                    enableCellEditOnFocus: true,\n                    enableFiltering: true,\n                    enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,\n                    treeRowHeaderAlwaysVisible: false,\n                    showTreeExpandNoChildren: false,\r\n                    enableRowSelection: true\r\n                };\n                var callback = scope.$eval(scope.callback);\n                var cellClassFunction = scope.$parent.$eval(scope.cellClassFunction);\n                var cellEditableConditionFunction = scope.$parent.$eval(scope.cellEditableConditionFunction);\n\n                scope.gridConfig = defaultGridOptions;\n                var modifiedColDef;\n\n                if (scope.api) {\r\n                    scope.api.getActiveColumns = function () {\r\n                        return scope.gridConfig.columnDefs;\r\n                    };\r\n                }\n\n                scope.$watch('focusRowCol', function (n, o) {\r\n                    if(n){\r\n                        gridInstance.cellNav.scrollToFocus(n.row.entity,n.col.colDef)\r\n                    }\r\n                });\n\n                scope.$watch('scope.dynamicItemTotal', function (n, o) {\r\n                    scope.gridConfig.totalItems = scope.dynamicItemTotal;\r\n                });\n\n                scope.$watch('searchTerm', function (n, o) {\r\n                    if (n && typeof n == 'string') {\r\n                        gridInstance.grid.refresh();\r\n                    }\r\n                });\n\n                scope.$watch('colDef', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        modifiedColDef = gridConfigProvider.getMassagedGirdConfig(scope.$eval(n), scope, cellClassFunction, cellEditableConditionFunction);\n                        _.each(modifiedColDef, function (def, idx, defs) {\r\n                            if (def.customTreeAggregationFinalizerFn) {\r\n                                def.customTreeAggregationFinalizerFn = eval(\"(\" + def.customTreeAggregationFinalizerFn + \")\");\r\n                            }\n                            if (def.customTreeAggregationFn) {\r\n                                def.customTreeAggregationFn = eval(\"(\" + def.customTreeAggregationFn + \")\");\r\n                            }\r\n                        });\n                        scope.gridConfig.columnDefs = null;\n                        scope.gridConfig.columnDefs = modifiedColDef;\n\n                        var groupingCol = _.filter(scope.gridConfig.columnDefs, function (col) { return col.isGrouped;})\n                        if (groupingCol && groupingCol.length > 0 && gridInstance) {\r\n                            gridInstance.grouping.clearGrouping();\n                            _.each(groupingCol, function (col) {\r\n                                gridInstance.grouping.groupColumn(col.field);\r\n                            });\r\n                        }\r\n                    }\r\n                });\n\n                scope.$watch('otherGridOptions', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        var modifiedOtherGridOptions = angular.merge({}, scope.gridConfig, scope.$eval(n));\n                        _.each(modifiedOtherGridOptions.appScopeProvider, function (prop, i, props) {\r\n                            modifiedOtherGridOptions.appScopeProvider[i] = eval(prop);\r\n                        });\n                        scope.gridConfig = null;\n                        scope.gridConfig = modifiedOtherGridOptions;\r\n                    }\r\n                });\n\n                scope.$watch('model', function (newModel) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (!newModel) {\r\n                        scope.gridConfig.data = [];\n                        return;\r\n                    }\n                    var treeColumns = treeViewColumnsToBeCreated(scope.gridConfig.columnDefs);\n                    if (treeColumns.length > 0) {\r\n                        scope.gridConfig = angular.extend(scope.gridConfig, {\r\n                            showTreeRowHeader: true,\n                            enableRowHeaderSelection: true, // Display checkboxes on every row when it's true\n                            showTreeExpandNoChildren: false\r\n                        });\n                        scope.gridConfig.data = assignTreeLevel($filter('orderBy')(newModel, treeColumns[0].field), treeColumns[0].field);\r\n                    }\n                    else {\r\n                        scope.gridConfig.data = newModel;\r\n                    }\r\n                });\n\n\n\n                if (!gridInstance) {\r\n                    scope.gridConfig.onRegister = getGridInstanceCallback;\r\n                }\n\n\n                /*\n                 *  This function will check and return an array of columns for tree view\n                 */\n                var treeViewColumnsToBeCreated = function (colDefs) {\r\n                    return _.filter(colDefs, function (col) {\r\n                        return col.isTree;\r\n                    });\r\n                };\n\n                /*\n                 *  Sort grid data\n                 */\n                var sortData = function (data, key) {\r\n                    return data.slice(0).sort(function (a, b) {\r\n                        return (eval('a.' + key) > eval('b.' + key)) ? 1 : (eval('a.' + key) < eval('b.' + key)) ? -1 : 0;\r\n                    });\r\n                };\n\n                /*\n                 *  Assign tree view since it is required to create a tree view\n                 */\n                var assignTreeLevel = function (data, key) {\r\n                    var loopedItems = [];\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i].$$treeLevel = 0;\n                        if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                            data[i].$$treeLevel = 1;\r\n                        }\n                        if (eval('data[i].' + key).toString().indexOf('.') > -1) {\r\n                            var SplitLevelArr = eval('data[i].' + key).toString().split('.');\n                            data[i].$$treeLevel = SplitLevelArr.length - 1;\n                            if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                                data[i].$$treeLevel = parseInt(data[i].$$treeLevel) + 1;\r\n                            }\r\n                        }\n                        loopedItems.push(eval('data[i].' + key));\r\n                    }\n                    return data;\r\n                };\n\n                function getCellValue(row, col) {\r\n                    var data = gridInstance.grid.getCellDisplayValue(row, col);\n                    return data ? data.toString() : \"\";\r\n                };\n\n                function outerSearchCallback(rows, cols) {\r\n                    if (scope.searchTerm && typeof scope.searchTerm == 'string' && scope.searchTerm.length > 0) {\r\n                        _.each(rows, function (row, rowIndex) {\r\n                            var match = false;\n                            _.each(cols, function (col) {\r\n                                var cellValue = $filter('translate')(getCellValue(row, col));\n                                if (col.colDef.attributes && col.colDef.attributes.type && col.colDef.attributes.type.toLowerCase() == \"date\") {\r\n                                    var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\n                                    formattedDate = formattedDate.split('+');\n                                    formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\n                                    var month = formattedDate.getMonth() + 1 + '';\n                                    if (month.length === 1) {\r\n                                        month = 0 + '' + month;\r\n                                    }\n                                    formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\n                                    var decession = formattedDate.toLowerCase().trim().indexOf(escape(scope.searchTerm).replace(/%5C/g, '').trim()) > -1;\n                                    if (decession) {\r\n                                        match = true;\r\n                                    }\r\n                                }\n                                else if (cellValue.match(new RegExp(scope.searchTerm, \"i\"))) {\r\n                                    match = true;\r\n                                }\r\n                            });\n                            row.visible = match;\r\n                        });\r\n                    };\n                    return rows;\r\n                };\n\n                function onCheckboxSelect(row) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridCheckBoxDispatcher', {\r\n                            \"row\": row\r\n                        });\r\n                    }\r\n                }\n\n                //  this timeout prevents rows rendered callback being fired multiple times\n                var rowsRenderedTimeout;\n                function getGridInstanceCallback(instance) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('gridInstance', instance);\r\n                    }\n                    gridInstance = instance;\n                    if (typeof scope.api != undefined && scope.api != null && scope.api.rowSelectionCallback) {\r\n                        scope.gridConfig.isRowSelectable = scope.api.rowSelectionCallback;\n                        //gridInstance.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                    }\n                    //gridInstance.grid.registerRowsProcessor(outerSearchCallback, 200);\n                    //gridInstance.core.on.rowsRendered(scope, function (row) {\r\n                    //    if (rowsRenderedTimeout) {\r\n                    //        $timeout.cancel(rowsRenderedTimeout);\n                    //        rowsRenderedTimeout = undefined;\r\n                    //    }\n                    //    rowsRenderedTimeout = $timeout(function () {\r\n                    //        if (angular.isFunction(callback)) {\r\n                    //            callback('composedGridRowsRenderedDispatcher', {\r\n                    //                \"row\": row\r\n                    //            });\r\n                    //        }\n                    //        setHeightForGrid();\n                    //        angular.isFunction(scope.onRenderingFinish) && scope.onRenderingFinish();\r\n                    //    }, 500);\r\n                    //});\n\n\n                    gridInstance.selection.on.rowSelectionChanged(scope, onCheckboxSelect);\n                    //gridInstance.cellNav.on.navigate(scope, function (newRowcol, oldRowCol) {\r\n                    //    if (newRowcol.col.colDef.isRegFocusCol) {\r\n                    //        if (angular.isFunction(callback)) {\r\n                    //            callback('composedGridFocusColumnDispatcher', {\r\n                    //                \"focusedRowColObj\": newRowcol,\n                    //                \"bluredRowColObj\": oldRowCol\r\n                    //            });\r\n                    //        }\r\n                    //    }\r\n                    //});\n                    gridInstance.edit.on.afterCellEdit(scope, function (rowEntity, colDef) {\n                        //if (colDef.isRegUpdateCol) {\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridUpdateColumnDispatcher', {\r\n                                \"rowModel\": rowEntity,\n                                \"colDef\": colDef,\n                                \"instance\": gridInstance\r\n                            });\r\n                        }\n                        // }\n                    });\n                    gridInstance.edit.on.beginCellEdit(scope, function (rowEntity, colDef) {\n                        //var focusedCell = gridInstance.cellNav.getFocusedCell();\n                        //if (!focusedCell.col.cellClass) {\n                        //    gridInstance.cellNav.scrollToFocus(rowEntity, colDef);\n                        //}\n\n                        switch (colDef.uiType) {\r\n                            case \"dropdown\":\n                                if (colDef.attributes.serviceObj && colDef.attributes.options.length == 0) {\r\n                                    getDataFolDropDown(colDef, rowEntity)\r\n                                } else {\r\n                                    colDef.attributes.options.map(function (x) { x[colDef.attributes.dataKey] = $filter('translate')(x[colDef.attributes.dataKey]) });\n                                    scope.dropDownOptions = colDef.attributes.options;\r\n                                }\n                                break;\r\n                        };\n\n                        if (colDef.isRegBeginEditCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridBeginEditColumnDispatcher', {\r\n                                    \"rowModel\": rowEntity,\n                                    \"colDef\": colDef\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n\n                    \n                    gridInstance.cell.on.click(scope, function (row, col) {\r\n                        callback('smartTableClick', {\r\n                            row: row,\n                            col: col\r\n                        });\n                    });\n\n                    //gridInstance.pagination.on.paginationChanged(scope, function (newPage, pageSize) {\n                    //    //alert(newPage+\"\");\n                    //    if (angular.isFunction(callback)) {\r\n                    //        callback('composedGridDynamicPaginationCallback', {\r\n                    //            \"gridConfig\": scope.gridConfig,\n                    //            \"index\": newPage,\n                    //            \"pageSize\": pageSize\r\n                    //        });\r\n                    //    }\r\n                    //});\r\n                };\n\n                function setHeightForGrid() {\r\n                    var rowCount = gridInstance.core.getVisibleRows(gridInstance.grid).length;\n                    var height;\n                    if (rowCount == 0) return;\n                    if (scope.gridConfig.rowHeight > 0) {\r\n                        height = ((rowCount + 1) * scope.gridConfig.rowHeight) + 54;\r\n                    } else {\r\n                        height = (rowCount * 35) + 54;\r\n                    }\n                    $($('.ui-grid')[0]).css({ 'width': '100%', 'height': height });\n                    $($('.ui-grid')[0]).find('ui-grid-header-canvas').css(\"width\", \"100%\");\n                    //gridInstance.core.handleWindowResize();\n                };\n\n\n                //*****************************************************autoSuggest bindings START*********************************************\n                scope.autoSuggestOptions = [];\n                scope.autoSuggestOnChange = function (e, col, row) {\r\n                    if (angular.isUndefined(e.data) || e.data.length == 0) {\r\n                        return;\r\n                    }\n                    callback('composedGridAutoSuggestChange', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": (e.data[0] !== undefined ? e.data[0].value : e.displayModel)\r\n                    });\n                    //logic to clear split entities autosuggest at grid level, needs to be handled further to make common for other autosuggests\n                    if (e.data[0].value == \"\")\r\n                    {\r\n                        var obj = row.entity[col.colDef.field.split(\".\")[0]];\n                        var index;\n                        if (obj != null && obj != undefined && col.colDef.field.indexOf('split') >= 0)\r\n                        {\r\n                            if (row.entity.id > 0)\n                                index = _.findIndex(scope.model, { id: row.entity.id });\n                            else\r\n                            {\r\n                                _.each(scope.model, function (data, indexFound) {\r\n                                    if (_.isEqual(data, row.entity)) {\r\n                                        index = indexFound;\n                                        return;\r\n                                    }\r\n                                });\r\n                            }\n                            scope.model[index][col.colDef.field.split(\".\")[0]] = {\r\n                                \"entityType\": obj.entityType, \"fieldId\": obj.fieldId, \"splitEntityId\": obj.splitEntityId, \"code\": 0, \"entityCode\": null, \"name\": null, \"title\": null\r\n                            };\r\n                        }\r\n                    }\n\n                    var serviceObj = col.colDef.attributes.serviceObj;\n                    if (serviceObj != undefined) {\r\n                        var req = {\r\n                            type: serviceObj.method === \"POST\" ?\"POST\": \"GET\",\n                            url: serviceObj.url,\n                            params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value)),\n                            timeout: 120000,\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\n                                \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                            }\r\n                        };\n                        if (req.type === \"POST\")\r\n                        {\r\n                            req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value));\n                            delete req.params;\r\n                        }\n                        httpService.directhttp(req).then(function (response) {\r\n                            if (serviceObj.CallbackObj) {\r\n                                response = serviceObj.CallbackObj(response, col.colDef.name)\r\n                            }\n                            var resp = [];\n                            if (typeof response === \"string\")\n                                response = JSON.parse(response);\n                            if (serviceObj.isFlatArray) {\r\n                                _.each(response, function (x, index) {\r\n                                    var obj = {};\n                                    obj[\"name\"] = x;\n                                    obj[\"code\"] = x;\n                                    resp.push(obj);\r\n                                });\r\n                            }\n                            else {\r\n                                _.each(response, function (obj) {\r\n                                    var mapperObj = {};\n                                    _.each(serviceObj.mapper, function (mapper) {\r\n                                        var mapperstri = '';\n                                        if (angular.isArray(mapper['toBeMapped'])) {\r\n                                            _.each(mapper['toBeMapped'], function (res) {\r\n                                                mapperstri += obj[res] + \" \";\r\n                                            });\n                                            mapperstri.trim();\r\n                                        }\n                                        else\n                                            mapperstri = obj[mapper['toBeMapped']];\n\n                                        mapperObj[mapper['key']] = mapperstri;\r\n\n                                    });\n                                    _.each(serviceObj.staticValues, function (item) {\r\n                                        mapperObj[item['key']] = item['value'];\r\n                                    });\n                                    resp.push(mapperObj);\r\n                                });\r\n                            }\n                            scope.autoSuggestOptions = resp;\n\n                            //for item number and item description autosuggest\n                            if (serviceObj.responseRequired) {\r\n                                callback('composedGridParseItemMasterData', {\r\n                                    \"rowModel\": row,\n                                    \"colDef\": col,\n                                    \"response\": response,\n                                    \"value\": e.data[0].value\r\n                                });\r\n                            }\r\n                        }, function () {   /* Failure case here */ });\r\n                    }\n                    else {\r\n                        return;\r\n                    }\r\n\n                };\n                scope.autoSuggestOnSelect = function (event, autoSuggestModel, row, col) {\r\n                    autoSuggestModel = event.data;\n                    callback('composedGridSelectItemMasterData', {\r\n                        \"data\": autoSuggestModel,\n                        \"row\": row,\n                        \"col\": col,\r\n                        \"isModified\":true\r\n                    });\r\n                };\n                //*****************************************************autoSuggest bindings END***********************************************\n\n                //*****************************************************dropDOwn bindings START***********************************************\n                scope.isObject = function (val) {\r\n                    return typeof val == 'object';\r\n                }\n\n                scope.dropDownOnChange = function (row, col, val) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridDropDownOnSelectDispatcher', {\r\n                            \"row\": row,\n                            \"col\": col,\n                            \"val\": val\r\n                        });\r\n                    }\r\n                };\n\n                scope.dropDownOptions = [];\n                function getDataFolDropDown(col, row) {\r\n                    var serviceObj = col.attributes.serviceObj;\n                    var req = {\r\n                        method: \"GET\",\n                        url: serviceObj.url,\n                        params: serviceObj.param,\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\n                            \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                        }\r\n                    };\n                    httpService.directhttp(req).then(function (response) {\r\n                        if (typeof row[col.field] != 'object') {\r\n                            var resp = [];\n                            _.each(response, function (x, index) {\r\n                                var obj = {};\n                                obj[col.attributes.dataKey] = $filter('translate')(x);\n                                obj[col.attributes.idKey] = index;\n                                resp.push(obj);\r\n                            });\n                            col.attributes.options = resp;\r\n                        } else {\r\n                            col.attributes.options = response;\r\n                        }\n                        scope.dropDownOptions = col.attributes.options;\r\n                    }, function () {\r\n                    });\r\n                };\n                //*****************************************************dropDOwn bindings END***********************************************\n                //*****************************************************popup bindings START***********************************************\n\n\n                scope.popUpButtonClickCallback = function (row, col) {\n                    // segregate the splitpopup callback function based on config.js \n                    if (angular.isFunction(callback)) {\r\n                        if (col.colDef.isChargesGrid) {\r\n                            callback('composedChargesGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\n                        else {\r\n                            callback('composedGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\r\n                    }\r\n\n                };\n\n                //*****************************************************popup bindings END***********************************************\n\n                //*****************************************************checkBox bindings START***********************************************\n                scope.checkBoxOnChange = function (row, col, val) {\r\n                    callback('composedGridCheckBoxOnChangeDispatcher', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": val\r\n                    });\r\n                };\n                //*****************************************************checkBox bindings END***********************************************\n\n                //*****************************************************text & number keyup bindings START***********************************************\n                scope.textOrNumberKeyUp = function (e, col, row) {\r\n                    callback('composedGridTextKeyUp', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": e.target.value\r\n                    });\r\n                }\n                //*****************************************************text & number keyup bindings END***********************************************\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartUiTable/smartUiTable.html'\r\n        };\r\n    }]);\r\n})();\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').service('trackStatusService', ['$http', '$q', function ($http, $q) {\r\n        var self = this;\r\n        // Watch the change of main object\r\n        self.statusDataChange = { 'dataChange': '' };\r\n        self.legendChange = {'dataChange' : ''};\r\n        self.dataChange = function () {\r\n            self.statusDataChange['dataChange'] = new Date().getTime();\r\n        }\r\n        self.getChange = function () {\r\n            return self.statusDataChange['dataChange'];\r\n        }\r\n        self.legendChange = function () {\r\n            self.legendChange['dataChange'] = new Date().getTime();\r\n        }\r\n        self.getLegendChange = function () {\r\n            return self.legendChange['dataChange'];\r\n        }\r\n    }]);\r\n})(angular);\r\n\r\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartTrackStatus', ['trackStatusService', '$filter', '$translate',\r\n        function (trackStatusService, $filter, $translate) {\r\n        \r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                data: \"=trackstatusData\",\r\n                onTabChange: \"=onTabChange\",\r\n                cycleChange: \"=onCycleChange\",\r\n                statusLegend: \"=statusLegend\",\r\n                approverLegend: \"=approverLegend\",\r\n                fileDownloadCallback: \"=fileDownloadCallback\",\r\n                scrollToStatus: \"=scrollToStatus\",\r\n                downloadAllAttachment : \"=downloadAllAttachment\"\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/trackStatus/popupNewTrackStatus.html',\r\n            link: function (scope, elem, attr) {\r\n                scope.trackStatusService = trackStatusService;\r\n\t\t        \r\n                // translate the static labels\r\n                scope.headerLable = $translate.instant('TRACK_STATUS'); // header\r\n                scope.tsDocName = $translate.instant('TRACK_STATUS_DOC_NAME');\r\n                //scope.tsCreatedOn = $translate.instant('CREATED_ON');\r\n                scope.tsCreatedOn = attr.trackStatusType === 'milestone' ? $translate.instant('ACHIEVED_ON') : $translate.instant('CREATED_ON');\r\n                scope.tsCurrStatus = $translate.instant('CURRENT_STATUS');\r\n                scope.labelOn = $translate.instant('ON');\r\n                scope.legend = $translate.instant('Legend');\r\n                scope.by = $translate.instant('By');\r\n                scope.defContentCommentLen = 60; // 60 chars to be displayed in case of longer comments.\r\n                \r\n                // HTML page map for tabs\r\n                var htmlForDetail = 'shared/directives/uiElements/trackStatus/trackStatusDetail.html';\r\n                var dateFormat;\r\n                //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                //    dateFormat = moment.localeData().longDateFormat('L');\r\n                //} else\r\n                if (attr.dateFormat && attr.dateFormat != '') {\r\n                    dateFormat = attr.dateFormat;\r\n                } else {\r\n                    dateFormat = 'DD/MM/YYYY';\r\n                }\r\n                // Utility methods\r\n                scope.getDate = function (date) {\r\n                    //return $filter('date')(date, dateFormat);\r\n                    return moment(parseInt(date)).format(dateFormat);\r\n                }\r\n                function dataChanged(a_data) {\r\n                    scope.data = a_data;\r\n                }\r\n                function statusListData(a_data) {\r\n                    scope.statusLists = a_data.datailedData;\r\n                }\r\n                scope.tabClicked = function (e) {\r\n                    scope.onTabChange(e);\r\n                }\r\n                scope.changeCycle = function (model) {\r\n                    scope.cycleChange(model);\r\n                }\r\n                statusListData(scope.data);\r\n                // To update cycles\r\n                scope.cycleObject = [];\r\n                function selectCycle(a_data) {\r\n                    var cycles = a_data.cycles,\r\n                        len = cycles.length;\r\n                    scope.cycleObject = cycles;\r\n                    for(var indx = 0; indx < len; indx++) {\r\n                        if (cycles[indx].selected === true) {\r\n                            scope.selectedCycle = cycles[indx];\r\n                        }\r\n                    }\r\n                }\r\n                selectCycle(scope.data);\r\n\r\n                // update tabs\r\n                scope.trackStatusTabs = [];\r\n                function updateTabs(a_data) {\r\n                    var tabs = a_data.trackStatusTabs,\r\n                        len = tabs.length;\r\n                    for (var t = 0; t < len; t++) {\r\n                        var tobj = tabs[t];\r\n                        if (tobj.active === true) {\r\n                            tobj.contentUrl = htmlForDetail;\r\n                        }\r\n                    }\r\n                    scope.trackStatusTabs = tabs;\r\n                }\r\n                updateTabs(scope.data);\r\n                \r\n                // update doc name, created on and by, doc curr status\r\n                function updateHeaderData(a_data) {\r\n                    scope.headerSecData = a_data;\r\n                    scope.headerSecData.Comments.date = scope.getDate(a_data.Comments.date);\r\n                    scope.docCreatedOn = scope.getDate(a_data.createdOn);\r\n                }\r\n                updateHeaderData(scope.data.projectStatus);\r\n\r\n                // check if comment exists\r\n                scope.hasComments = function (a_comment) {\r\n                    var flag = (a_comment !== \"\" && a_comment) ? true : false;\r\n                    return flag;\r\n                }\r\n                // show more less comments\r\n                scope.showLess = {};\r\n                scope.showMore = {};\r\n                scope.showMoreLess = function (id, arg) {\r\n                    if(arg === \"less\") {\r\n                        scope.showMore[id] = true;\r\n                        scope.showLess[id] = false;\r\n                    } else if (arg === \"more\") {\r\n                        scope.showLess[id] = true;\r\n                        scope.showMore[id] = false;\r\n                    }\r\n                }\r\n                // init show more\r\n                scope.showMoreComment = {};\r\n                scope.initShowModel = function (id) {\r\n                    scope.showMore[id] = true;\r\n                    scope.showLess[id] = false;\r\n                }\r\n                // Watch for any update in data change\r\n                scope.$watch('trackStatusService.getChange()', function (newVal, oldVal) {\r\n                    if (newVal !== oldVal && newVal) {\r\n                        // Data changed\r\n                        //dataChanged(scope.data);\r\n                        statusListData(scope.data);\r\n                        selectCycle(scope.data);\r\n                        updateTabs(scope.data);\r\n                        setTimeout(function () {\r\n                            scrollToLatestStatus();\r\n                        }, 1000);\r\n                    }\r\n\r\n                });\r\n                // Get string to be displayed for comments\r\n                scope.getString = function (a_str, a_count) {\r\n                    var strLen = a_str.length,\r\n                        str = \"\";\r\n                    if(strLen > a_count) {\r\n                        str = a_str.substr(0, a_count) +'...';\r\n                    } else {\r\n                        str = a_str.substr(0, a_count);\r\n                    }\r\n                        \r\n                    return str;\r\n                }\r\n                scope.applyStatusColor = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'approved':\r\n                        case 'accepted':\r\n                        case 'approval':\r\n                        case 'auto_approved':\r\n                            return 'color-approved';\r\n                            break;\r\n                        case 'approval pending':\r\n                        case 'delegated':\r\n                        case 'withdrawn':\r\n                        case 'approval withdrawn':\r\n                        case 'withdraw':\r\n                        case 'approval withdraw':\r\n                            return 'color-approved-pending';\r\n                            break;\r\n                        case 'rejected':\r\n                            return 'color-rejected';\r\n                            break;\r\n                        case 'pending':\r\n                            return 'color-approved-pending';\r\n                            break;\r\n                        case 'budget overriden':\r\n                            return 'color-bud-overrid';\r\n                        default:\r\n                            return 'grey-text';\r\n                    }\r\n                };\r\n                scope.IconStatus = function (ele) {\r\n                    var iconMap = {\r\n                        'pending': '',\r\n                        'approval': '',\r\n                        'rejected': '',\r\n                        'accepted': '',\r\n                        'approved': '',\r\n                        'auto_approved': '',\r\n                        'approval pending': '',\r\n                        'approval withdrawn': '',\r\n                        'withdrawn': '',\r\n                        'approval withdraw': '',\r\n                        'withdraw': ''\r\n                    }\r\n                    if (ele && iconMap.hasOwnProperty([ele.toLowerCase()])) {\r\n                        return '#icon_TSHexOutlin';\r\n                    } else {\r\n                        return '#icon_Info_i';\r\n                    }\r\n                };\r\n                scope.InnerIconStatus = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'pending':\r\n                        case 'approval pending' : \r\n                            return '#icon_TSPending';\r\n                            break;\r\n                        case 'approval':\r\n                        case 'accepted':\r\n                        case 'approved':\r\n                            return '#icon_TSAccepted';\r\n                            break;\r\n                        case 'rejected':\r\n                            return '#icon_TSRejected';\r\n                            break;\r\n                        case 'auto_approved':\r\n                            return '#Icon_AppAuto';\r\n                            break;\r\n                        case 'approval withdrawn':\r\n                        case 'withdrawn':\r\n                        case 'approval withdraw':\r\n                        case 'withdraw':\r\n                            return 'icon_TSWithdrawn';\r\n                            break;\r\n                        default:\r\n                            return '#icon_Info';\r\n                    }\r\n                };\r\n\r\n                // Currently not being used\r\n                scope.approvalGroupType = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'pool approval':\r\n                            return 'a-g-pool-approval';\r\n                            break;\r\n                        case 'parallel approval':\r\n                            return 'a-g-parallel-approval';\r\n                            break;\r\n                        case 'hr approval':\r\n                            return 'a-g-HR-approval';\r\n                            break;\r\n                        case 'group approval':\r\n                            return 'a-g-group-approval';\r\n                            break;\r\n                        default:\r\n                            return false;\r\n                    }\r\n                };\r\n                scope.slideDetailsTS = function (id) {\r\n                    var detailDataCopy = scope.data.datailedData,\r\n                        len = detailDataCopy.length;\r\n                    for (var indx = 0; indx < len; indx++) {\r\n                        if (detailDataCopy[indx].uniqueId === id) {\r\n                            detailDataCopy[indx].isDetailShow = !detailDataCopy[indx].isDetailShow;\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t\tscope.changeScreenSize = function (e) {\r\n\t\t\t\t\tscope.isFullscreen = !scope.isFullscreen;\r\n\t\t\t\t}\r\n\r\n                // add unique id to each actioner items\r\n                function addUniqueId() {\r\n                    var pItems = scope.data.datailedData,\r\n                        pLen = pItems.length;\r\n                    for (var indx = 0 ; indx < pLen; indx++) {\r\n                        var cArr = pItems[indx].actionerDetails,\r\n                            cLen = cArr.length;\r\n                        for (var c = 0; c < cLen; c++) {\r\n                            cArr[c].uniqueId = c +'-'+ uniqueIDGenerator();\r\n                        }\r\n                        pItems[indx].uniqueId = \"details\" + uniqueIDGenerator() + '-' + indx;\r\n                    }\r\n                }\r\n                addUniqueId();\r\n                // Unique id generator\r\n                function uniqueIDGenerator() {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                // Watch the legend change\r\n                scope.$watch('trackStatusService.getLegendChange()', function (newVal, oldVal) {\r\n                    if (newVal !== oldVal && newVal) {\r\n                        displayLegend(); // if legend changed\r\n                    }\r\n\r\n                });\r\n                // Approver legend\r\n                var defApproverLegend = [\r\n        \t        {\r\n        \t            \"icon\": \"#icon_AppOne\",\r\n        \t            \"color\": \"color-approved-pending\",\r\n        \t            \"text\": $translate.instant(\"POOL_APP_ATLEAST_ONE\")\r\n        \t        },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppAll\",\r\n\t                    \"color\": \"color-approved-pending\",\r\n\t                    \"text\": $translate.instant(\"PARALLEL_APPROVAL_FORALL\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppSingle\",\r\n\t                    \"color\": \"color-approved-pending\",\r\n\t                    \"text\": $translate.instant(\"INDIVIDUAL_MUST_APPROVE\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#Icon_AppAuto\",\r\n\t                    \"color\": \"color-approved\",\r\n\t                    \"text\": $translate.instant(\"AUTO_SYSTEM_APPROVE\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppHoc\",\r\n\t                    \"color\": \"color-add-Hoc\",\r\n\t                    \"text\": $translate.instant(\"ADHOC_APPROVER\")\r\n\t                }\r\n                ];\r\n                var defStatusLegend = [\r\n                        {\r\n                            \"icon\": \"#icon_TSAccepted\",\r\n                            \"color\": \"color-approved\",\r\n                            \"text\": $translate.instant(\"APPROVED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSRejected\",\r\n                            \"color\": \"color-rejected\",\r\n                            \"text\": $translate.instant(\"REJECTED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPartialAc\",\r\n                            \"color\": \"color-approved\",\r\n                            \"text\": $translate.instant(\"PARTIALLY_APPROVED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPartialRe\",\r\n                            \"color\": \"color-rejected\",\r\n                            \"text\": $translate.instant(\"PARTIALLY_REJECTED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPending\",\r\n                            \"color\": \"color-approved-pending\",\r\n                            \"text\": $translate.instant(\"PENDING\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSWithdrawn\",\r\n                            \"color\": \"color-approved-pending\",\r\n                            \"text\": $translate.instant(\"Approval Withdrawn\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_Info_i\",\r\n                            \"color\": \"grey-text\",\r\n                            \"text\": $translate.instant(\"INFORMATION\")\r\n                        }\r\n\r\n                ];\r\n                function displayLegend() {\r\n                    var statusLegend = (scope.statusLegend) ? scope.statusLegend : false; // status legend\r\n                    var approverLegend = (scope.approverLegend) ? scope.approverLegend : false;// approver legend\r\n                    scope.approverLegend = (!approverLegend) ? defApproverLegend : scope.approverLegend;                    \r\n                    scope.statusLegend = (!statusLegend) ? defStatusLegend : statusLegend;\r\n                };\r\n                displayLegend(); // will execute on load case\r\n                scope.isFullscreen = false; // default not full screen\r\n\t\t\t\tscope.changeScreenSize = function (e) {\r\n\t\t\t\t    scope.isFullscreen = !scope.isFullscreen;\r\n\t\t\t\t    if (scope.isFullscreen) {\r\n\t\t\t\t        scope.defContentCommentLen = 95;\r\n\t\t\t\t    } else {\r\n\t\t\t\t        scope.defContentCommentLen = 60;\r\n\t\t\t\t    }\r\n\t\t\t\t    return;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                // set scroll to latest status\r\n\t\t\t\tattr.$observe('focusLatest', function (newVal) {\r\n\t\t\t\t    if (newVal == \"true\") {\r\n\t\t\t\t        setTimeout(function () {\r\n\t\t\t\t            scrollToLatestStatus();\r\n\t\t\t\t        }, 200);\r\n\t\t\t\t        \r\n\t\t\t\t    } else {\r\n\t\t\t\t        //$('.scrollbar-outer').animate({ scrollTop: 0}, \"slow\");\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n                // Set z-index and position relative for tabs to pass content within shadow\r\n\t\t\t\tfunction setTabCss() {\r\n\t\t\t\t    var tabDiv = $('#trackStatusTabId').children(\":first\");\r\n\t\t\t\t    if (tabDiv.hasClass('borderBtmGray')) {\r\n\t\t\t\t        tabDiv.css({\r\n\t\t\t\t            'z-index': 2,\r\n\t\t\t\t            'position': 'relative'\r\n\t\t\t\t        });\r\n\t\t\t\t    }\r\n\t\t\t\t    \r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction scrollToLatestStatus() {\r\n\t\t\t\t    var idToSetScroll = \"\",\r\n                        $target = \"\",\r\n                        len = scope.data.datailedData.length,\r\n                        scrollIndex = (scope.scrollToStatus && scope.scrollToStatus != \"\") ? Number(scope.scrollToStatus) : (len - 1),\r\n\t\t\t\t        uniqueid = scope.data.datailedData[scrollIndex].uniqueId;// get the last element id and set the scroll\r\n\r\n\t\t\t\t    setTabCss();\r\n\t\t\t\t    \r\n\t\t\t\t    $target = $('[uniqueid=' + uniqueid + ']');\r\n\t\t\t\t    var scrollPosition = $('#scroll-8').scrollTop() + $target.parent().position().top;\r\n\t\t\t\t    $('.scrollbar-outer').animate({ scrollTop: scrollPosition }, \"slow\", 'swing');\r\n\t\t\t\t    return false;\r\n\t\t\t\t}\r\n            }\r\n            ,\r\n            controller: ['$scope', function ($scope) {\r\n                this.getFDownloadCallback = function () {\r\n                    return $scope.fileDownloadCallback;\r\n                },\r\n                this.getDownloadAllAttchment = function () {\r\n                    return $scope.downloadAllAttachment;\r\n                }\r\n            }]\r\n        }\r\n        }])\r\n\r\n        // To show attachments attached and downaloadable\r\n    .directive('attachmentsCallout', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict : 'EA',\r\n            scope: {\r\n                attachments: '=attachments',\r\n                identifier: '=identifier',\r\n                id: '=id'\r\n            },\r\n            require: '^smartTrackStatus',\r\n            templateUrl: 'shared/directives/uiElements/trackStatus/attachmentsDownload.html',\r\n            link: function (scope, elem, attr, cntrl) {\r\n                scope.downloadFile = cntrl.getFDownloadCallback();\r\n                scope.showDownloadAllAttachment = cntrl.getDownloadAllAttchment();\r\n                scope.filedownload = function (a_data) {\r\n                    scope.downloadFile(a_data);\r\n                }\r\n            }\r\n        }\r\n    }]);\r\n})(angular);\n(function() {\r\n\r\n    /*\r\n     *  Prevent document's default scroll behaviour on space\r\n     */\r\n    window.onkeydown = function(e) {\r\n        if (e.keyCode == 32 && $(e.target).hasClass('ui-grid-focuser')) {\r\n            e.preventDefault();\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n    angular.module('SMART2')\r\n        .directive(\"uigridCompatible\", ['uiGridConstants', 'uiGridEditConstants', '$rootScope', uigridCompatibleFunc]);\r\n\r\n    function uigridCompatibleFunc(uiGridConstants, uiGridEditConstants, $rootScope) {\r\n        return {\r\n            require: ['?^uiGrid', '?^uiGridRenderContainer'],\r\n            restrict: 'A',\r\n            link: function(scope, element, attrs, controllers) {\r\n                var uiGridCtrl = controllers[0];\r\n                var renderContainerCtrl = controllers[1];\r\n\r\n                var isFocused = false;\r\n                var isSelectElement = false;\r\n\r\n                /*\r\n                 *  Remove previous cell scope if any\r\n                 */\r\n                if (window.lastRenderedElementScope) {\r\n                    try {\r\n                        window.lastRenderedElementScope.stopEdit();\r\n                        window.lastRenderedElementScope = undefined;\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                window.lastRenderedElementScope = scope;\r\n\r\n                /*\r\n                 *  On popup close listener\r\n                 */\r\n                var onPopupClosed = $rootScope.$on(\"popupClosed\", function () {\r\n                    uiGridCtrl.focus();\r\n                });\r\n\r\n                /*\r\n                *  On date component close listener\r\n                */\r\n                var onDatePopupClosed = $rootScope.$on(\"closedPopup\", function () {\r\n                    uiGridCtrl.focus();\r\n                });\r\n\r\n                /*\r\n                 *  On popup open listener\r\n                 */\r\n                var onPopupOpened = $rootScope.$on(\"popupOpened\", function () {\r\n                    document.activeElement.blur();\r\n                });\r\n\r\n                /*\r\n                 *  Viewport keydown broadcast listener\r\n                 */\r\n                var onViewPortKeyDown = uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown(scope, function (e, rowCol) {\r\n                    var inputText = element.find(\"input\");\r\n                    var anchor = element.find(\"a\");\r\n\r\n                    switch (e.keyCode) {\r\n                        case 32:\r\n                            if (anchor.length > 0) {\r\n                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                                anchor.trigger(\"click\");\r\n                            }\r\n                            else if (inputText.length > 0 && !isFocused) {\r\n                                inputText.focus();\r\n                                isFocused = true;\r\n                            }\r\n                            else if (isSelectElement) {\r\n                                select.focus();\r\n                            }\r\n                            break;\r\n                        case 9:\r\n                            scope.stopEdit();\r\n                            break;\r\n                        default:\r\n                            if (element.attr(\"type\") !== \"date\") {\r\n                                inputText.focus();\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 *  Stop cell editing and destroy the scope\r\n                 */\r\n                scope.stopEdit = function (e) {\r\n                    if (isSelectElement) {\r\n                        select.blur();\r\n                    }\r\n                    scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Element key down handler\r\n                 */\r\n                var onElementKeyDown = function (e) {\r\n                    switch (e.keyCode) {\r\n                        case 32:\r\n                            var inputText = element.find(\"input\");\r\n                            var anchor = element.find(\"a\");\r\n\r\n                            if (anchor.length > 0) {\r\n                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                                anchor.trigger(\"click\");\r\n                            }\r\n                            else if (isSelectElement) {\r\n                                select.focus();\r\n                            }\r\n                            break;\r\n                        case uiGridConstants.keymap.ESC:\r\n                            e.stopPropagation();\r\n                            scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);\r\n                            break;\r\n                    }\r\n                    if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {\r\n                        e.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;\r\n                        if (uiGridCtrl.cellNav.handleKeyDown(e) !== null) {\r\n                            scope.stopEdit(e);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //handle enter and tab for editing not using cellNav\r\n                        switch (e.keyCode) {\r\n                            case uiGridConstants.keymap.ENTER: // Enter (Leave Field)\r\n                            case uiGridConstants.keymap.TAB:\r\n                                scope.stopEdit(e);\r\n                                break;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                element.on('keydown', onElementKeyDown);\r\n\r\n\r\n                //  Focus select element\r\n                var select = element.find(\"select\");\r\n                isSelectElement = select.length > 0;\r\n                if (isSelectElement) {\r\n                    setTimeout(function () {\r\n                        select.focus();\r\n                    });\r\n                }\r\n\r\n\r\n\r\n                //  Trigger anchor tag's click event if cell clicked\r\n                if (window.isCellClicked) {\r\n                    setTimeout(function () {\r\n                        var anchor = element.find(\"a\");\r\n                        if (anchor.length > 0) {\r\n                            window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                            anchor.trigger('click');\r\n                        }\r\n                    });\r\n                    window.isCellClicked = false;\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Destroy broadcast listeners on scope destroy\r\n                 */\r\n                scope.$on('$destroy', function () {\r\n                    onPopupClosed();\r\n                    onDatePopupClosed();\r\n                    onPopupOpened();\r\n                    onViewPortKeyDown();\r\n                    element.off('keydown', onElementKeyDown);\r\n                });\r\n            }\r\n        };\r\n    };\r\n})();\r\n"],"sourceRoot":"/source/"}