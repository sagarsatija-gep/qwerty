{"version":3,"sources":["cacheHelper.service.js","cellTemplateProvider.service.js","Common.service.js","Debouncer.service.js","FormWidgetUtils.service.js","gridConfigProvider.service.js","Http.service.js","NoolsEngine.service.js","requestClicked.service.js","RuleEngine.service.js","ScrollTo.service.js"],"names":["angular","cacheHelperServiceFunc","setColDef","_dataModel","colDef","getColDef","undefined","setFilterDef","filterDef","getFilterDef","setGroupDef","groupDef","getGroupDef","getDefaultSavedView","savedViews","sysDefaultFlag","defaultView","_","find","x","IsSystemDefault","isDefault","IsDefaultView","service","module","factory","$filter","$translate","smartDateFormatFilter","_getCellTemplate","config","templateType","type","field","attributes","rule","minmaxprecisionfilter","data","minimumPrecision","minmaxprecision","maxlength","displayformat","optionformat","filterkeys","join","model","format","options","map","datakey","dataKey","idKey","displayLabel","appendingString","appendedLabels","i","length","slice","defaultLabel","defaultTitle","defaultLabelCondition","enableCellEdit","readonly","serviceObj","getCellTemplate","directive","$rootScope","$timeout","restrict","link","scope","element","attrs","getServerDateFormat","value","serverDateInNumber","getServerDateInNumber","IS_UNEXPECTED_DATE_VALUE","toLowerCase","indexOf","a","replace","RegExp","split","b","eval","isNaN","Date","getTime","onDateChange","date","row","entity","col","$broadcast","template","filter","Common","input","outputDate","convertServerDateTimeToNormalDateTime","contains","getFullYear","getMonth","getDate","e","require","elem","ctrl","$parsers","push","this","IS_UNEXPECTED_DATE_INPUT","uniqueIDGenerator","d","uniqueID","c","r","Math","random","floor","toString","postDecimalNumbers","decimals","maxDecimals","flag","RegionalSettingEnable","fixed","pow","output","round","postDecimalOtp","currencySymbol","_decimals","decimalLength","tempValue","temp","$","minPrecessionValue","MinPrecessionValue","maxPrecessionValue","MaxPrecessionValue","parseInt","Number","isInteger","autoNumeric","mDec","aPad","newValue","val","error","console","log","show","Materialize","toast","message","duration","preDecimalNubmers","lineItems","pageSize","_setLineItems","tmpLineItems","_getLineItems","pageIndex","_getAllLineItems","_getLineItemsCount","_getLineItemsPagesCount","ceil","externalPaginationThreshold","setLineItems","getLineItems","getAllLineItems","getLineItemsCount","getLineItemsPagesCount","functionTimeout","add","callback","cancel","isFunction","_this","getColspanClass","colspan","convertAndGetValue","property","dataType","generateFunctionWithParams","result","mapEvents","arrEvents","str","listener","getParamsFromEvents","event","scopeString","params","trim","arrIndexesToBeDeleted","paramValue","isDefined","splice","isSection","functionName","convertAndGetAttributeMapping","attributeType","key","attr","bindingType","objProperty","section","getAttributesMapping","textfieldTypes","arrSplitFunction","evalResult","attrList","eventCounter","removeEventListener","eventName","eventId","on","objEvent","broadcast","watch","obj","prop","Object","defineProperty","isObject","window","get","set","newVal","equals","oldVal","enumerable","configurable","showPleaseWait","css","hidePleaseWait","uiGridGroupingConstants","cellTemplateProvider","formWidgetUtils","getDefaultGridConfigObject","displayName","groupingShowAggregationMenu","enableHiding","groupingShowGroupingMenu","enablePinning","getGridConfig","conf","cellClassFunction","cellEditableConditionFunction","finalObject","extend","isVisible","visible","isReadOnly","isFixed","pinnedLeft","pinnedRight","maxWidth","isGrouped","grouping","groupPriority","aggregation","treeAggregationType","SUM","displayKey","isMandatory","cellTemplate","editableCellTemplate","cellClass","cellEditableCondition","hasOwnProperty","enableFiltering","filterObject","placeholder","condition","searchTerm","cellValue","filterKeys","cellConditionResult","cellCondition","isDate","formattedDate","month","escape","toLocaleLowerCase","uiType","getSmartTableConfig","column","splitType","id","notes","placeHolder","manufacturer","manufacturerPartNumber","ManufacturerModel","debounce","isTaxExempt","taxes","sortCondition","isAscending","sort","getMassagedGirdConfig","confArr","massagedConf","each","getMassagedSmartTableConfig","eavluateScopeBindedExpressions","$http","$q","APPCONSTANTS","defaults","headers","common","httpService","pendingRequests","isNetworkOnline","massageResultData","success","timeout","status","statusText","abortAll","isNetworkLost","forEach","pendingRequest","canceller","promise","resolve","abort","urlfordata","requestToAbort","findWhere","url","requestArgs","directhttp","requestPromise","returnpromise","defer","abortable","requestTimeout","setTimeout","reqParams","method","toUpperCase","cache","Content-Type","UserExecutionContext","JSON","stringify","userPreferences","UserBasicDetails","merge","then","reject","errorData","clearTimeout","execute","arrFields","arrErrors","headerOrGridConfig","uiConfig","dataModel","ruleType","rulesObj","rules","cloumnDefs","def","sections","rows","properties","flow","nools","compile","name","Message","getDefined","orderData","items","man","messageModel","ui","session","getSession","apply","focus","errors","match","dispose","deleteFlow","requestClickedFunc","isRequestClicked","getProperty","setProperty","isNumber","isUndefined","isString","isUndefinedOrEmptyOrNull","m","isEmptyOrNull","isUndefinedOrNull","changeDateFormatForNools","colDefs","virtualDatamodel","fieldVal","fieldzeroval","dateVar","convertDate","res","datestring","newdate","utils","setRules","dataConfig","cumulativeRules","isNoolsEnabled","setDocumentRules","documentRules","setUtils","executeNools","tmpRules","tmpRule","tmpRuleResult","failedRules","invalidArray","disableArray","totalErrosArray","rowIndex","copy","isArray","columnIndex","fieldName","errorFieldDisplayName","instant","rowColIndex","state","index","ItemChargesForHeader","columnArr","isValid","Header","headerFlow","currentScope","tmpPropertyValue","isHidden","j","k","ngModelOptions","getterSetter","isValidated","l","_section","_uiElement","validate","isContentLoaded","isActive","executeOnStaticForm","scrollingTopMargin","setScrollingTopMargin","_scrollingTopMargin","perform","source","destination","onComplete","closest","animate","scrollTop","offset","top"],"mappings":"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","file":"services.min.js","sourcesContent":["(function (angular) {\r\n    'use strict';\r\n     angular.module('SMART2').service('cacheHelperService', [cacheHelperServiceFunc]);\r\n\r\n    function cacheHelperServiceFunc() {\r\n\r\n        var colDef;\r\n        var filterDef;\r\n        var groupDef;\r\n\r\n        function setColDef(_dataModel) {\r\n            colDef = _dataModel;\r\n        }\r\n\r\n        function getColDef() {\r\n            if (typeof colDef != undefined) {\r\n                return colDef;\r\n            }\r\n        }\r\n\r\n        function setFilterDef(_dataModel) {\r\n            filterDef = _dataModel;\r\n        }\r\n\r\n        function getFilterDef() {\r\n            if (typeof filterDef != undefined) {\r\n                return filterDef;\r\n            }\r\n        }\r\n\r\n        function setGroupDef(_dataModel) {\r\n            groupDef = _dataModel;\r\n        }\r\n\r\n        function getGroupDef() {\r\n            if (typeof groupDef != undefined) {\r\n                return groupDef;\r\n            }\r\n        }\r\n\r\n        // It takes savedViews as 1st param and the 2nd parameter represents whether we want the systemDefaultView view flag as true or false.\r\n        function getDefaultSavedView(savedViews, sysDefaultFlag) {\r\n            var defaultView;\r\n            if (sysDefaultFlag) {\r\n                defaultView = _.find(savedViews, function(x) {\r\n                    return x.IsSystemDefault == true;\r\n                });\r\n            } else {\r\n                defaultView = _.find(savedViews, function(x) {\r\n                    return (x.IsSystemDefault == false && ((x.isDefault == true) || (x.IsDefaultView == true)))\r\n                });\r\n            }\r\n            return defaultView;\r\n        }\r\n\r\n        var service = {\r\n            setColDef: setColDef,\r\n            getColDef: getColDef,\r\n            setFilterDef: setFilterDef,\r\n            getFilterDef: getFilterDef,\r\n            setGroupDef: setGroupDef,\r\n            getGroupDef: getGroupDef,\r\n            getDefaultSavedView: getDefaultSavedView\r\n        };\r\n\r\n        return service;\r\n    };\r\n})(angular);","(function () {\r\n    'use strict';\r\n\r\n    angular.module('SMART2').factory('cellTemplateProvider', ['$filter', '$translate', 'smartDateFormatFilter', function ($filter, $translate, smartDateFormatFilter) {\r\n        function applyLocalizationFilter(text) {\r\n            return $filter('translate')(text);\r\n        };\r\n\r\n        function _getCellTemplate(config, templateType) {\r\n            if (config.type == 'calculated') {\r\n                if (config.field && config.field != 'IsCloseForReceiving' && config.field != 'IsCloseForInvoicing') {\r\n                    return '<div ng-class=\"{\\'text-strikethrough\\': row.entity.ItemStatus.id===121}\"><div ng-if=\"!row.groupHeader\" >{{' + config.attributes.rule + '|  minPrecisionHandler:' + config.attributes.minmaxprecisionfilter + '}}</div></div>';\r\n                }\r\n                else {\r\n                    return '<div ng-class=\"{\\'text-strikethrough\\': row.entity.ItemStatus.id===121}\"><div ng-if=\"!row.groupHeader\" >{{' + config.attributes.rule + '}}</div></div>';\r\n                }\r\n            }\r\n            else if (config.type == 'editable') {\r\n\r\n                if (config.attributes && config.attributes.type && config.attributes.type == \"number\") {\r\n                    if (templateType == \"cellTemplate\") {\r\n                        return '<div ng-class=\"{\\'text-strikethrough\\': row.entity.ItemStatus.id===121, \\'ui-grid-cell-contents right-align paddingRight5\\': true}\" ng-style=\"{color: COL_FIELD === \\'\\' || COL_FIELD == undefined || COL_FIELD == null ? \\'transparent\\' : \\'\\'}\" title=\"{{COL_FIELD}}\">{{COL_FIELD === \\'\\' || COL_FIELD == undefined || COL_FIELD == null ? \\'-\\' : row.entity.' + (config.data != undefined ? config.data : config.field) + '}}</div>'\r\n                    }\r\n                    else if (templateType == \"editableCellTemplate\") {\r\n                        //var min = \"\";\r\n                        //min = config.attributes.minValue ? 'min=\"' + config.attributes.minValue + '\"' : \"\";\r\n                        var minimumPrecision = \"\";\r\n                        if (config.attributes.minmaxprecision != undefined)\r\n                            minimumPrecision = 'minmaxprecision=\"' + config.attributes.minmaxprecision + '\"';\r\n                        var maxlength = \"\";\r\n                        if (config.attributes.maxlength != undefined)\r\n                            maxlength = 'maxlength=\"' + config.attributes.maxlength + '\"';\r\n\r\n                        return '<div title=\"{{COL_FIELD }}\"><div><smart-textfield  class=\"ui-grid-cell-contents\" type=\"number\" focus=\"true\" ' + minimumPrecision + ' ng-model=\"row.entity.' + config.field + '\" ' + maxlength + ' on-key-up=\"grid.appScope.textOrNumberKeyUp($event,col,row)\" zero-case-handler uigrid-compatible></smart-textfield></div></div>';\r\n                    }\r\n                }\r\n                else if (config.attributes && config.attributes.type && config.attributes.type == \"autocomplete\") {\r\n                    if (templateType == \"cellTemplate\") {\r\n                        return '<div ng-class=\"{\\'text-strikethrough\\': row.entity.ItemStatus.id===121, \\'padding0\\': true}\" ng-style=\"{color: COL_FIELD === \\'\\' || COL_FIELD == undefined || COL_FIELD == null ? \\'transparent\\' : \\'\\'}\" title=\"{{COL_FIELD}}\">{{COL_FIELD === \\'\\' || COL_FIELD == undefined || COL_FIELD == null ? \\'-\\' : COL_FIELD}}</div>';\r\n                    }\r\n                    else if (templateType == \"editableCellTemplate\") {\r\n                        return '<div class=\"padding0\" title=\"{{COL_FIELD}}\"><div><smart-textfield class=\"ui-grid-cell-contents\" type=\"autocomplete\" width=\"230px\" ' +\r\n                    ' displayformat=\"' + config.attributes.displayformat + '\" optionformat=\"' + config.attributes.optionformat + '\" filterkeys=\"' + (\"['\" + config.attributes.filterkeys.join(\"','\") + \"']\") +\r\n                    '\" ng-model=\"row.entity.' + config.attributes.model + '\" options=\"grid.appScope.autoSuggestOptions\"  on-change=\"grid.appScope.autoSuggestOnChange($event,col,row)\" on-select=\"grid.appScope.autoSuggestOnSelect($event,row.entity.' + config.attributes.model + ',row,col)\" uigrid-compatible></smart-textfield></div></div>';\r\n                    }\r\n                }\r\n                else if (config.attributes && config.attributes.type && config.attributes.type == \"date\") {\r\n                    if (templateType == \"cellTemplate\") {\r\n                        return \"<div  ng-class='{\\\"text-strikethrough\\\": row.entity.ItemStatus.id===121}' ng-style='{color: COL_FIELD === \\\"\\\" || COL_FIELD == undefined || COL_FIELD == null ? \\\"transparent\\\" : \\\"\\\", height: \\\"100%\\\"}'>{{COL_FIELD === \\'\\' || COL_FIELD == undefined || COL_FIELD == null ? \\'-\\' : (COL_FIELD | smartDateFormat:'\" + config.attributes.format + \"')}}</div>\";\r\n                    } else if (templateType == \"editableCellTemplate\") {\r\n                        return '<div grid-date-template-provider></div>'\r\n                    }\r\n                }\r\n                var maxlength = \"\";\r\n                if (config.attributes.maxlength != undefined)\r\n                    maxlength = 'maxlength=\"' + config.attributes.maxlength + '\"';\r\n                if (templateType == \"cellTemplate\") {\r\n                    return '<div ng-class=\"{\\'text-strikethrough\\': row.entity.ItemStatus.id===121, \\'padding0\\': true}\" ng-style=\"{color: COL_FIELD === \\'\\' || COL_FIELD == undefined || COL_FIELD == null ? \\'transparent\\' : \\'\\'}\" title=\"{{COL_FIELD | translate}}\">{{COL_FIELD === \\'\\' || COL_FIELD == undefined || COL_FIELD == null ? \\'-\\' : (row.entity.' + (config.data != undefined ? config.data : config.field) + ' | translate)}}</div>';\r\n                } else if (templateType == \"editableCellTemplate\") {\r\n                    return '<div title=\"{{COL_FIELD}}\"><div><smart-textfield class=\"ui-grid-cell-contents\" type=\"text\"' +\r\n                                        ' ng-model=\"row.entity.' + config.field + '\" ' + maxlength + ' on-key-up=\"grid.appScope.textOrNumberKeyUp($event,col,row)\" uigrid-compatible></smart-textfield></div></div>';\r\n                }\r\n\r\n            } else if (config.type == 'dropdown') {\r\n                config.attributes.options.map(function (x) { x[config.attributes.datakey] = $filter('translate')(x[config.attributes.datakey]) });\r\n                if (templateType == \"cellTemplate\") {\r\n                    return \"<div ng-class='{\\\"text-strikethrough\\\": row.entity.ItemStatus.id===121}'><div ng-if='grid.appScope.isObject(COL_FIELD)' style='height:100%;' uigrid-compatible>{{COL_FIELD.\" + config.attributes.dataKey + \" | translate}}</div><div ng-if='!grid.appScope.isObject(COL_FIELD)' IDK={{\" + config.attributes.idKey + \"}} style='height:100%;' uigrid-compatible>{{COL_FIELD | translate}}</div></div>\";\r\n                }\r\n                else if (templateType == \"editableCellTemplate\") {\r\n                    return \"<div class='ui-grid-cell-contents'><form name='inputForm'><select model = {{row.entity.\" + config.attributes.model + \"}} ui-grid-edit-dropdown ng-model='row.entity.\" + config.attributes.model + \"' ng-change='grid.appScope.dropDownOnChange(row.entity, col , row.entity.\" + config.field + \")' ng-options='option.\" + config.attributes.dataKey + \" for option in grid.appScope.dropDownOptions track by option.\" + config.attributes.idKey + \"' uigrid-compatible></select></form></div>\";\r\n                }\r\n            } else if (config.type == 'checkbox') {\r\n                if (templateType == \"cellTemplate\") {\r\n                    return '<div title=\"{{COL_FIELD}}\"><div><smart-checkbox fill=\"true\" class=\"ui-grid-cell-contents\" ng-model=\"row.entity.' + config.attributes.model +\r\n                        '\" on-change=\"grid.appScope.checkBoxOnChange(row.entity, col , row.entity.' + config.field + ')\"  uigrid-compatible></smart-checkbox></div></div>';\r\n                }\r\n            } else if (config.type == 'popup') {\r\n                var displayLabel = \"\";\r\n                var appendingString = \"\\+\\\"-\\\"\\+\";\r\n                if (typeof config.appendedLabels != \"undefined\") {\r\n                    for (var i = 0; i < config.appendedLabels.length; i++) {\r\n                        displayLabel = displayLabel + 'row.entity.' + config.appendedLabels[i] + appendingString;\r\n                    }\r\n                    displayLabel = \"(\" + displayLabel.slice(0, -(appendingString.length)) + \")\";\r\n\r\n                }\r\n                else {\r\n                    displayLabel = (templateType == \"cellTemplate\") ? (\"row.entity.\" + config.field) : 'COL_FIELD';\r\n                }\r\n\r\n                var defaultLabel = \"\\\"\" + config.attributes.defaultTitle + \"\\\"\";\r\n                if (typeof config.attributes.defaultLabelCondition != \"undefined\") {\r\n                    var defaultLabel = config.attributes.defaultLabelCondition;\r\n                }\r\n\r\n\r\n                if (templateType == \"cellTemplate\") {\r\n                    if (config.attributes.type === 'categoryPopup')\r\n                        return '<div title = \"{{COL_FIELD}}\" class=\"ui-grid-cell-contents padding0\"><a ng-if=\"!row.groupHeader\" ng-class=\"{\\'waves-effect waves-light btn-flat\\': true, \\'disabled\\': row.entity.source.id!==1,\\'text-strikethrough\\': row.entity.ItemStatus.id===121}\">{{(COL_FIELD != undefined && (COL_FIELD != \"\") && (COL_FIELD != \"1\")) ?' + displayLabel + ' : ' + defaultLabel + '}}</a></div>';\r\n                    else\r\n                        return '<div title = \"{{COL_FIELD}}\" class=\"ui-grid-cell-contents padding0\"><a ng-if=\"!row.groupHeader\" ng-class=\"{\\'waves-effect waves-light btn-flat\\': true, \\'disabled\\': ' + !config.enableCellEdit + ',\\'text-strikethrough\\': row.entity.ItemStatus.id===121}\">{{(COL_FIELD != undefined && (COL_FIELD != \"\") && (COL_FIELD != \"1\")) ?' + displayLabel + ' : ' + defaultLabel + '}}</a></div>';\r\n\r\n\r\n                }\r\n                else if (templateType == \"editableCellTemplate\") {\r\n                    return '<div title=\"{{COL_FIELD}}\"><smart-button flat=\"true\"  config=\\'{\"title\": (row.entity.' + config.field + ' != undefined && row.entity.' + config.field + ' != \"1\" && row.entity.' + config.field + ' != \"\")?' + displayLabel + ' : ' + defaultLabel + ' }\\' on-click=\"grid.appScope.popUpButtonClickCallback(row,col)\" uigrid-compatible></smart-button></div>';\r\n                }\r\n            } else if (config.type == 'subsection' && config.data == 'notes') {\r\n                if (config.data && config.attributes && config.attributes.readonly !== undefined) {\r\n                    return '<div><smart-button flat=\"true\" disable=\"grid.appScope.IsCellReadOnly(row.entity' + ',\\'' + config.data + '\\',' + config.attributes.readonly + ')\" config=\\'{\"title\":grid.appScope.getCommentText(row.entity.notes)}\\' callback-params=\"row.entity\"} callback=\"grid.appScope.showCommentsPopupCallback\"  uigrid-compatible></smart-button><div>';\r\n                }\r\n            } else if (config.type == 'subsection' && config.data == 'manufacturer') {\r\n                if (config.data && config.attributes && config.attributes.readonly !== undefined) {\r\n                    return '<div title=\"{{COL_FIELD}}\"><smart-button flat=\"true\" disable=\"grid.appScope.IsCellReadOnly(row.entity' + ',\\'' + config.data + '\\',' + config.attributes.readonly + ')\" config=\\'{\"title\":grid.appScope.setManufacturerDisplayName(row.entity)}\\' callback-params=\"row.entity\" callback=\"grid.appScope.showManufacturerPopupCallback\"  uigrid-compatible></smart-button><div>';\r\n                }\r\n            } else if (config.data == 'splitType') {\r\n                if (config.data && config.attributes && config.attributes.readonly !== undefined) {\r\n                    return '<div title=\"{{COL_FIELD}}\"><smart-button flat=\"true\" disable=\"grid.appScope.IsCellReadOnly(row.entity' + ',\\'' + config.data + '\\',' + config.attributes.readonly + ')\"  config=\\'{\"title\":grid.appScope.splitType(row.entity.splitType)}\\'  callback-params=\"row.entity\"} callback=\"grid.appScope.showSplitsPopup\"  uigrid-compatible></smart-button><div>';\r\n                } else {\r\n                    return '<div title=\"{{COL_FIELD}}\"><smart-button flat=\"true\" config=\\'{\"title\":grid.appScope.splitType(row.entity.splitType)}\\'  callback-params=\"row.entity\"} callback=\"grid.appScope.showSplitsPopup\"  uigrid-compatible></smart-button><div>';\r\n                }\r\n            } else if (config.data == 'splitValue') {\r\n                //return '<div title=\"{{COL_FIELD}}\" class=\"ui-grid-cell-contents\">{{grid.appScope.getSplitValue(row.entity)}}</div>';\r\n                return '<div title=\"{{COL_FIELD | minPrecisionHandler: ' + config.attributes.minmaxprecisionfilter + '}}\" class=\"ui-grid-cell-contents\">{{grid.appScope.getSplitValue(row.entity) | minPrecisionHandler: ' + config.attributes.minmaxprecisionfilter + '}}</div>';\r\n            } else if (config.data == 'taxes') {\r\n                if (config.data && config.attributes && config.attributes.readonly !== undefined) {\r\n                    return '<div title=\"{{COL_FIELD}}\"><smart-button flat=\"true\" disable=\"grid.appScope.IsCellReadOnly(row.entity' + ',\\'' + config.data + '\\',' + config.attributes.readonly + ')\" config=\\'{\"title\":grid.appScope.showExempted(row.entity)}\\' callback-params=\"row.entity\"} callback=\"grid.appScope.openTaxPopup\"  uigrid-compatible></smart-button></div>';\r\n                }\r\n            } else if (config.data == 'total') {\r\n                return '<div title=\"{{COL_FIELD | minPrecisionHandler:' + config.attributes.minmaxprecisionfilter + '}}\" class=\"ui-grid-cell-contents\">{{grid.appScope.getTotal(row.entity) | minPrecisionHandler:' + config.attributes.minmaxprecisionfilter + '}}</div>';\r\n            }\r\n        }\r\n\r\n        var serviceObj = {\r\n            getCellTemplate: _getCellTemplate\r\n        };\r\n\r\n        return serviceObj;\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('gridDateTemplateProvider', ['$rootScope', '$timeout', '$filter', function ($rootScope, $timeout, $filter) {\r\n        return {\r\n            restrict: \"A\",\r\n            link: function (scope, element, attrs) {\r\n                scope.onDateChange = function (date) {\r\n                    if (date != '') {\r\n                        scope.row.entity[scope.col.colDef.field] = getServerDateFormat(date);\r\n                        $rootScope.$broadcast(\"closedPopup\");\r\n                    }\r\n                }\r\n                function getServerDateFormat(value) {\r\n                    if (value) { } else {\r\n                        //current date or 0\r\n                        value = 0;\r\n                    }\r\n                    var serverDateInNumber = getServerDateInNumber(value);\r\n                    if (serverDateInNumber) {\r\n                        return \"\\/Date(\" + serverDateInNumber + \")\\/\";\r\n                    } else {\r\n                        return serverDateInNumber;\r\n                    }\r\n                };\r\n\r\n                function getServerDateInNumber(value) {\r\n                    //CONVERT DATE FROM ALMOST ANY VALID DATE FORMAT TO \"/Date(1455883450840+0000)/\" form\r\n                    var IS_UNEXPECTED_DATE_VALUE = false;\r\n                    if (value) {\r\n                        if ((typeof value).toLowerCase() === \"string\") {\r\n                            if (value.indexOf(\"Date\") > -1) {\r\n                                var a = (value + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                                a = a.split('+');\r\n                                var b = eval('new ' + a[0] + (a.length > 1 ? ')' : ''));\r\n                            } else {\r\n                                IS_UNEXPECTED_DATE_VALUE = true;\r\n                            }\r\n                        } else {\r\n                            IS_UNEXPECTED_DATE_VALUE = true;\r\n                        }\r\n                        if (IS_UNEXPECTED_DATE_VALUE) {\r\n                            if (isNaN(new Date(value))) {\r\n                                return new Date(0).getTime();\r\n                            } else {\r\n                                var b = new Date(value);\r\n                            }\r\n                        }\r\n                        return b.getTime();\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                };\r\n            },\r\n            template: '<div style=\"width:100%;height:100%\" ><smart-textfield focus=\"\" set-from-grid=true on-date-change=\"onDateChange($date)\" type=\"date\" ng-model=\"row.entity[col.colDef.field]\" format=\"{{col.colDef.attributes.format}}\" uigrid-compatible></smart-textfield></div>'\r\n        };\r\n    }]);\r\n\r\n    angular.module('SMART2').filter('smartDateFormat', ['$filter', 'Common', function ($filter, Common) {\r\n        return function (input, format) {\r\n            var outputDate;\r\n            try {\r\n                if (input) {\r\n                    var b = Common.convertServerDateTimeToNormalDateTime(input);\r\n                    if (!_.contains(format.split(' '), 'hh:mm')) {\r\n                        b = new Date(b.getFullYear(), b.getMonth(), b.getDate());\r\n                    }\r\n                    outputDate = $filter('date')(b, format); //, timezone)\r\n                } else {\r\n                    outputDate = \"\";\r\n                }\r\n            }\r\n            catch (e) {\r\n                outputDate = input;\r\n            }\r\n            return outputDate;\r\n        };\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('zeroCaseHandler', [function zeroCaseHandler() {\r\n        return {\r\n            require: 'ngModel',\r\n            link: function (scope, elem, attrs, ctrl) {\r\n                ctrl.$parsers.push(function (value) {\r\n                    if (isNaN(value)) {\r\n                        return 0;\r\n                    }\r\n                    return value;\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n\r\n})();\r\n\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('SMART2').service('Common', [function () {\r\n        this.convertServerDateTimeToNormalDateTime = function (input) {\r\n            var IS_UNEXPECTED_DATE_INPUT = false;\r\n            if ((typeof input).toLowerCase() === \"string\") {\r\n                if (input.indexOf(\"Date\") > -1) {\r\n                    var a = (input + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                    a = a.split('+');\r\n                    var b = eval('new ' + a[0] + (a.length > 1 ? ')' : ''));\r\n                } else {\r\n                    IS_UNEXPECTED_DATE_INPUT = true;\r\n                }\r\n            } else {\r\n                IS_UNEXPECTED_DATE_INPUT = true;\r\n            }\r\n            if (IS_UNEXPECTED_DATE_INPUT) {\r\n                if (isNaN(new Date(input))) {\r\n                    return input;\r\n                } else {\r\n                    var b = new Date(input);\r\n                }\r\n            }\r\n            return b;\r\n        };\r\n\r\n        this.uniqueIDGenerator = function () {\r\n            var d = new Date().getTime();\r\n            var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                var r = (d + Math.random() * 16) % 16 | 0;\r\n                d = Math.floor(d / 16);\r\n                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n            });\r\n            return uniqueID;\r\n        };\r\n\r\n    }]);\r\n\r\n    angular.module('SMART2').filter('minPrecisionHandler', ['$filter', function ($filter) {\r\n        var postDecimalNumbers = 0;\r\n        return function (input, decimals, maxDecimals, flag) {\r\n            if (typeof RegionalSettingEnable !=\"undefined\" && RegionalSettingEnable) {\r\n                var currencySymbol = '';\r\n\r\n                if (!isNaN(input)) {\r\n                    var value = input;\r\n                    try {\r\n                        var temp = $(\"<input>\");\r\n                        var _decimals;\r\n                        var decimalLength;\r\n                        var tempValue;\r\n\r\n                        var minPrecessionValue = decimals != undefined ? decimals : (MinPrecessionValue ? MinPrecessionValue : 2);\r\n\r\n                        var maxPrecessionValue = maxDecimals != undefined ? maxDecimals : (MaxPrecessionValue ? MaxPrecessionValue : 4);\r\n\r\n                        minPrecessionValue = parseInt(minPrecessionValue);\r\n\r\n                        maxPrecessionValue = parseInt(maxPrecessionValue);\r\n\r\n                        if (minPrecessionValue > maxPrecessionValue) {\r\n                            maxPrecessionValue = minPrecessionValue;\r\n                        }\r\n\r\n                        tempValue = Math.round(value * Math.pow(10, maxPrecessionValue)) / Math.pow(10, maxPrecessionValue);\r\n\r\n                        if (Number.isInteger(tempValue)) {\r\n                            decimalLength = minPrecessionValue;\r\n                        }\r\n                        else if (Number.isNaN(tempValue)) {\r\n                            throw \"Value cannot change to number.\"\r\n                        }\r\n                        else {\r\n                            decimalLength = tempValue.toString().split('.')[1].length;\r\n                        }\r\n\r\n                        if (decimalLength <= minPrecessionValue) {\r\n                            _decimals = minPrecessionValue\r\n                        }\r\n                        else if (decimalLength >= maxPrecessionValue) {\r\n                            _decimals = maxPrecessionValue;\r\n                        }\r\n                        else {\r\n                            _decimals = decimalLength;\r\n                        }\r\n\r\n                        temp.autoNumeric('init', {\r\n                            mDec: _decimals,\r\n                            aPad: true\r\n                        });\r\n\r\n                        temp.autoNumeric('set', tempValue);\r\n\r\n                        var newValue = temp.val();\r\n\r\n                        return currencySymbol + newValue;\r\n                    }\r\n                    catch (error) {\r\n                        console.log(error);\r\n\r\n                        console.log(\"error happend at numberformat filter. value : (\" + value + \") minPrecessionValue : \" + minPrecessionValue + \" maxPrecessionValue : \" + maxPrecessionValue);\r\n\r\n                        return currencySymbol + value;\r\n                    }\r\n                }\r\n                else {\r\n                    return currencySymbol + input;\r\n                }\r\n            } else {\r\n                if (input != undefined) {\r\n                    if (input == 0)\r\n                        return $filter('number')(0, decimals);\r\n                    if (input != 0) {\r\n                        postDecimalNumbers = ((input + \"\").split(\".\")[1] != undefined) ? (input + \"\").split(\".\")[1].length : 0;\r\n                        if (postDecimalNumbers > maxDecimals) {\r\n                            var fixed = Math.pow(10, maxDecimals);\r\n                            var output = Math.round(input * fixed) / fixed;\r\n                            var postDecimalOtp = ((output + \"\").split(\".\")[1] != undefined) ? (output + \"\").split(\".\")[1].length : 0;\r\n                            if (postDecimalOtp < decimals)\r\n                                return $filter('number')(output, decimals);\r\n                            return $filter('addCommasToNumbers')(output);\r\n                        } else if (postDecimalNumbers > decimals && postDecimalNumbers < maxDecimals) {\r\n                            return $filter('addCommasToNumbers')(input);\r\n                        }\r\n                        else if (postDecimalNumbers <= decimals)\r\n                            return $filter('number')(input, decimals);\r\n                    }\r\n                    if (flag && flag == true && input != 0)\r\n                        return '';\r\n                    else\r\n                        return input;\r\n                }\r\n                if (flag && flag == true)\r\n                    return '';\r\n                else\r\n                    return 0;\r\n            }\r\n        }\r\n    }]);\r\n    angular.module('SMART2').service('SmartToast', [function () {\r\n        this.show = function (config) {\r\n            Materialize.toast(config.message, config.duration ? config.duration : 500);\r\n        };\r\n    }]);\r\n\r\n    angular.module('SMART2').filter('addCommasToNumbers', ['$filter', function ($filter) {\r\n        return function (input) {\r\n            var postDecimalNumbers = ((input + \"\").split(\".\")[1] != undefined) ? (input + \"\").split(\".\")[1] : 0;\r\n            var preDecimalNubmers =  ((input + \"\").split(\".\")[0] != undefined) ? (input + \"\").split(\".\")[0] : 0;\r\n            preDecimalNubmers = $filter('number')(preDecimalNubmers);\r\n            return  preDecimalNubmers + \".\" +  postDecimalNumbers;\r\n\r\n        }\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').service('smartPaginate', [function () {\r\n        var lineItems;\r\n        var pageSize = 10;\r\n\r\n        var _setLineItems = function (tmpLineItems) {\r\n            lineItems = tmpLineItems;\r\n        };\r\n\r\n        var _getLineItems = function (pageIndex, pageSize) {\r\n            return lineItems.slice(pageIndex, pageSize);\r\n        };\r\n\r\n        var _getAllLineItems = function () {\r\n            return lineItems;\r\n        };\r\n\r\n        var _getLineItemsCount = function () {\r\n            return lineItems.length;\r\n        };\r\n\r\n        var _getLineItemsPagesCount = function () {\r\n            return Math.ceil(lineItems.length / pageSize) - 1;\r\n        };\r\n\r\n        return {\r\n            externalPaginationThreshold: 300,\r\n            setLineItems: _setLineItems,\r\n            getLineItems: _getLineItems,\r\n            getAllLineItems: _getAllLineItems,\r\n            getLineItemsCount: _getLineItemsCount,\r\n            getLineItemsPagesCount: _getLineItemsPagesCount,\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular.module('SMART2').service('debouncer', ['$timeout', function ($timeout) {\r\n        var functionTimeout;\r\n\r\n        this.add = function (callback, duration) {\r\n            if (functionTimeout) {\r\n                $timeout.cancel(functionTimeout);\r\n            }\r\n            functionTimeout = $timeout(function () {\r\n                angular.isFunction(callback) && callback();\r\n            }, duration ? duration : 1000);\r\n        };\r\n\r\n        this.cancel = function () {\r\n            $timeout.cancel(functionTimeout);\r\n            functionTimeout = null;\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular.module('SMART2').service('formWidgetUtils', [function () {\r\n        var _this = this;\r\n\r\n        /*\r\n         *  Get colspan class according to the number passed\r\n         */\r\n        this.getColspanClass = function (colspan) {\r\n            switch (colspan) {\r\n                case 1:\r\n                    return 'col s12 m6 l4 xl3 xxl2';\r\n                    break;\r\n                case 2:\r\n                    return 'col s12 m12 l8 xl6 xxl4';\r\n                    break;\r\n                case 3:\r\n                    return 'col s12 m12 l12 xl9 xxl6';\r\n                    break;\r\n                case 4:\r\n                    return 'col s12 m12 l12 xl12 xxl8';\r\n                    break;\r\n                case 5:\r\n                    return 'col s12 m12 l12 xl12 xxl10';\r\n                    break;\r\n                case 6:\r\n                    return 'col s12 m12 l12 xl12 xxl12';\r\n                    break;\r\n                default:\r\n                    return 'col s12 m6 l4 xl3 xxl2';\r\n                    break;\r\n            }\r\n        };\r\n\r\n        /*\r\n         *  Convert value into actual scope variable/function and evaluate it\r\n         */\r\n        this.convertAndGetValue = function (val, scope, property) {\r\n            if (val == '' || val == undefined || val == null) {\r\n                return false;\r\n            }\r\n            var dataType;\r\n            try {\r\n                dataType = typeof eval(val);\r\n            }\r\n            catch (e) { }\r\n            if (dataType == undefined) {\r\n                //  If function\r\n                if (val.indexOf(')') == val.length - 1) {\r\n                    return eval(this.generateFunctionWithParams(val, 'scope.$parent'));\r\n                }\r\n                var result = eval('scope.$parent.' + val);\r\n                dataType = typeof result;\r\n                if (dataType == 'boolean') {\r\n                    return result;\r\n                }\r\n                dataType = dataType == 'function' ? 'function' : 'string';\r\n            }\r\n            if (dataType == 'function') {\r\n                return eval(this.generateFunctionWithParams(val, 'scope.$parent'));\r\n            }\r\n            else if (dataType == 'string') {\r\n                return eval('scope.$parent.' + val);\r\n            }\r\n            else {\r\n                return eval(val);\r\n            }\r\n        };\r\n\r\n        /*\r\n         *  Map events\r\n         */\r\n        this.mapEvents = function (arrEvents) {\r\n            if (typeof arrEvents == 'object') {\r\n                var str = '';\r\n                for (var i = 0; i < arrEvents.length; i++) {\r\n                    if (arrEvents[i].listener) {\r\n                        str = str + ' ' + arrEvents[i].type + '=\"' + arrEvents[i].listener + '\"';\r\n                    }\r\n                }\r\n                return str + ' ';\r\n            }\r\n            return '';\r\n        };\r\n\r\n        /*\r\n         *  Generate params list from function name\r\n         */\r\n        this.getParamsFromEvents = function (event, scopeString) {\r\n            var params = event.split('(');\r\n            if (params.length > 1) {\r\n                params = params[1].trim().split(')');\r\n                params = params[0].split(',');\r\n                var arrIndexesToBeDeleted = [];\r\n                for (var i = 0; i < params.length; i++) {\r\n                    params[i] = params[i].trim();\r\n                    if (params[i] != '$event') {\r\n                        if (params[i] == '') {\r\n                            arrIndexesToBeDeleted.push(params[i]);\r\n                        }\r\n                        else {\r\n                            var paramValue = undefined;\r\n                            try {\r\n                                paramValue = eval(params[i]);\r\n                            }\r\n                            catch (e) { }\r\n                            if (angular.isDefined(paramValue)) {\r\n                                params[i] = params[i].trim();\r\n                            }\r\n                            else {\r\n                                params[i] = (scopeString == '' || scopeString == undefined || scopeString == null ? '' : scopeString + '.') + params[i].trim();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < arrIndexesToBeDeleted.length; i++) {\r\n                    params.splice(arrIndexesToBeDeleted[i], 1);\r\n                }\r\n            }\r\n            else {\r\n                params = [];\r\n            }\r\n            return params;\r\n        };\r\n\r\n        /*\r\n         *  Convert function and its parameters into actual scope\r\n         *  For e.g. onChange(modelData) would be converted into scopeString.onChange(scopeString.modelData)\r\n         *  scopeString is the scope reference\r\n         */\r\n        this.generateFunctionWithParams = function (event, scopeString, isSection) {\r\n            var functionName = '';\r\n            if (!event) {\r\n                return functionName;\r\n            }\r\n            var params = this.getParamsFromEvents(event, scopeString);\r\n            functionName = (event.split('(')[0]).trim();\r\n            if (params.length > 0) {\r\n                params.push(isSection ? 'section' : 'property');\r\n                functionName = scopeString + '.' + functionName + '(' + params.join(',') + ')';\r\n            }\r\n            else {\r\n                functionName = scopeString + '.' + functionName + (isSection ? '(section)' : '(property)');\r\n            }\r\n            return functionName;\r\n        };\r\n\r\n        /*\r\n         *  Convert attribute value into actual scope\r\n         *  For e.g. isReqNameMandatory(modelData.reqName) would be converted into scope.isReqNameMandatory(scope.modelData.reqName)\r\n         *  scope is the scope reference\r\n         */\r\n        this.convertAndGetAttributeMapping = function (attributeType, key, attr, bindingType, scope, isSection) {\r\n            var str = attr + '=\"' + (bindingType == '@' ? '{{' : '') + (isSection ? 'section.' : (attributeType == 'primary' ? 'property.' : 'property.attributes.')) + key + (bindingType == '@' ? '}}' : '') + '\"';\r\n            var dataType;\r\n            var objProperty;\r\n            if (attributeType == 'primary' && isSection) {\r\n                objProperty = scope.section;\r\n            }\r\n            else if (attributeType == 'primary' && !isSection) {\r\n                objProperty = scope.property;\r\n            }\r\n            else {  //  secondary attributes\r\n                objProperty = scope.property.attributes;\r\n            }\r\n            try {\r\n                dataType = typeof eval(objProperty[key]);\r\n            }\r\n            catch (e) { }\r\n            if (dataType == undefined) {\r\n                dataType = typeof eval('scope.parentScope.' + objProperty[key]);\r\n                if (dataType == 'function') {\r\n                    str = attr + '=\"' + (bindingType == '@' ? '{{' : '') + this.generateFunctionWithParams(objProperty[key], 'parentScope', isSection) + (bindingType == '@' ? '}}' : '') + '\"';\r\n                }\r\n                else {\r\n                    str = attr + '=\"' + (bindingType == '@' ? '{{' : '') + 'parentScope.' + (objProperty[key]) + (bindingType == '@' ? '}}' : '') + '\"';\r\n                }\r\n            }\r\n            return ' ' + str + ' ';\r\n        };\r\n\r\n        /*\r\n         *  Map attribute and its value\r\n         */\r\n        this.getAttributesMapping = function (attributeType, attrs, scope, isSection) {\r\n            var str = '';\r\n            if (attributeType == 'primary') {\r\n                for (var key in attrs) {\r\n                    switch (key) {\r\n                        case 'isMandatory':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'is-mandatory', '@', scope, isSection);\r\n                            break;\r\n                        case 'isVisible':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'is-visible', '=', scope, isSection);\r\n                            break;\r\n                        case 'isCollapsible':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'is-collapsible', '@', scope, isSection);\r\n                            break;\r\n                        case 'isDraggable':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'is-draggable', '@', scope, isSection);\r\n                            break;\r\n                        case 'isActive':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'is-active', '=', scope, isSection);\r\n                            break;\r\n                        case 'isHeader':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'is-header', '@', scope, isSection);\r\n                            break;\r\n                        case 'headerTemplate':\r\n                            str += ' ' + 'header-template=\"{{section.' + key + '}}\" ';\r\n                            break;\r\n                        case 'modelOptions':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'model-options', '=', scope, isSection);\r\n                            break;\r\n                        //case 'focus':\r\n                        //case 'validate':\r\n                        //    str += this.convertAndGetAttributeMapping(attributeType, key, key, '=', scope, isSection);\r\n                        //    break;\r\n                        case 'rules':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'rules', '@', scope, isSection);\r\n                            break;\r\n                        case 'errorModel':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, 'error-model', '=', scope, isSection);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (var key in attrs) {\r\n                    switch (key) {\r\n                        case 'type':\r\n                            if (scope.property.type == 'textfield') {\r\n                                var textfieldTypes = ['text', 'number', 'date', 'time', 'dateTime', 'area', 'autocomplete'];\r\n                                if (textfieldTypes.indexOf(scope.property.attributes.type) == -1) {\r\n                                    var arrSplitFunction = scope.property.attributes.type.split('(');\r\n                                    var evalResult;\r\n                                    var property = scope.property;  //  Property is element's config\r\n                                    //  If function call is passed\r\n                                    if (arrSplitFunction.length > 1) {\r\n                                        evalResult = eval('scope.' + this.generateFunctionWithParams(scope.property.attributes.type, 'parentScope'));\r\n                                    }\r\n                                    else {\r\n                                        evalResult = eval('scope.parentScope.' + scope.property.attributes.type);\r\n                                        //  If function reference is passed\r\n                                        if (typeof evalResult == 'function') {\r\n                                            evalResult = eval('scope.' + this.generateFunctionWithParams(scope.property.attributes.type, 'parentScope'));\r\n                                        }\r\n                                    }\r\n                                    str += ' type=\"' + evalResult + '\"';\r\n                                }\r\n                                else {\r\n                                    str += ' type=\"{{property.attributes.type}}\" ';\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'options':\r\n                            /*\r\n                             *  Check if type of value passed is string. If yes convert the same into controller scope variable.\r\n                             *  So that when the scope variable's value gets changed, the same would be reflected in directive.\r\n                             */\r\n                            if (typeof eval('scope.property.attributes.options') == 'string') {\r\n                                str += ' options=\"parentScope.' + scope.property.attributes.options + '\" ';\r\n                            }\r\n                            else {\r\n                                str += ' options=\"property.attributes.options\" ';\r\n                            }\r\n                            break;\r\n                        case 'readonly':\r\n                        case 'disable':\r\n                            str += this.convertAndGetAttributeMapping(attributeType, key, key, '@', scope, isSection);\r\n                            break;\r\n                        case 'ngModelOptions':\r\n                            str += ' ng-model-options=\"property.attributes.ngModelOptions\" ';\r\n                            break;\r\n                        case 'validateOn':\r\n                            str += ' validate-on=\"{{property.attributes.validateOn}}\" ';\r\n                            break;\r\n                        default:\r\n                            var attrList = [];\r\n                            if (scope.property.type == 'textfield') {\r\n                                attrList = ['validate', 'focus', 'parentelement', 'errormessage', 'setfromgrid', 'align', 'datanumeric', 'spinner', 'patternreg', 'step', 'format', 'timepicker', 'isvaluedateobj', 'prefixicon', 'suffixicon', 'maxlength', 'min', 'max', 'timepicker12hour', 'minuteincrement', 'charactercounter', 'decimalprecision', 'minmaxprecision', 'placeholder', 'autocomplete', 'removable', 'datakey', 'filterkeys', 'optionformat', 'displayformat', 'width', 'minchars', 'loading', 'count', 'nosuggestionnotice', 'shownosuggestion', 'ngmodel', 'smart-character-restrict', 'showinfo', 'showwarning', 'allowpaste'];\r\n                            }\r\n                            else if (scope.property.type == 'select' || scope.property.type == 'dropdown') {\r\n                                attrList = ['label', 'ngmodelcopy', 'validate', 'focus', 'parentelement', 'multiple', 'datakey', 'displaykey', 'removable', 'preview', 'customoption', 'ngmodel', 'config', 'show', 'stopprog', 'showinfo', 'showwarning'];\r\n                            }\r\n                            else if (scope.property.type == 'radio') {\r\n                                attrList = ['label', 'ngmodelcopy', 'layout', 'validate', 'focus', 'parentelement', 'errormessage', 'datakey', 'optionid', 'removable', 'groupid', 'ngmodel'];\r\n                            }\r\n                            else if (scope.property.type == 'checkbox') {\r\n                                attrList = ['label', 'minheight', 'fill', 'validate', 'focus', 'parentelement', 'errormessage',  'removable', 'ngmodel', 'showinfo'];\r\n                            }\r\n                            else if (scope.property.type == 'switch') {\r\n                                attrList = ['label', 'rightlabel', 'leftlabel', 'validate', 'focus', 'parentelement', 'errormessage', 'removable', 'minheight', 'fill', 'ngmodel'];\r\n                            }\r\n                            \r\n                            if (attrList.indexOf(key.toLowerCase()) > -1) {\r\n                                str += ' ' + key + '=\"{{property.attributes.' + key + '}}\" ';\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         *  Alternative of broadcast event\r\n         */\r\n        var arrEvents = [];\r\n        var eventCounter = 0;\r\n\r\n\r\n        /*\r\n         *  Deregister an event or events\r\n         */\r\n        this.removeEventListener = function (event) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (arrEvents[i].eventName == event.eventName && arrEvents[i].eventId == event.eventId) {\r\n                    arrEvents[i].callback = null;\r\n                    arrEvents.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n         *  Register a listener\r\n         */\r\n        this.on = function (eventName, callback) {\r\n            eventCounter++;\r\n            arrEvents.push({\r\n                eventName: eventName,\r\n                callback: callback,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            });\r\n            var objEvent = {\r\n                eventName: eventName,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            };\r\n            return function () {\r\n                _this.removeEventListener(objEvent);\r\n            };\r\n        };\r\n\r\n\r\n        /*\r\n         *  Fire an event\r\n         */\r\n        this.broadcast = function (eventName, data) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (eventName == arrEvents[i].eventName) {\r\n                    angular.isFunction(arrEvents[i].callback) && arrEvents[i].callback({}, data);\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n\r\n        /*\r\n         *  Custom javascript watcher \r\n         */\n        this.watch = function (obj, prop, callback) {\r\n            Object.defineProperty(angular.isDefined(obj) && angular.isObject(obj) ? obj : window, prop, {\r\n                get: function () {\r\n                    return this['custom_watcher_' + prop];\r\n                },\n                set: function (newVal) {\r\n                    if (!angular.equals(this['custom_watcher_' + prop], newVal)) {\r\n                        var oldVal = this['custom_watcher_' + prop];\n                        this['custom_watcher_' + prop] = newVal;\n                        angular.isFunction(callback) && callback(newVal, oldVal);\r\n                    }\r\n                },\n                enumerable: true,\n                configurable: true\r\n            });\r\n        };\r\n\r\n\r\n        /*\r\n         *  Show PLEASE WAIT label\r\n         */\r\n        this.showPleaseWait = function () {\r\n            angular.element('#divPleaseWait').css('display', 'table');\r\n        };\r\n\r\n\r\n        /*\r\n         *  Hide PLEASE WAIT label\r\n         */\r\n        this.hidePleaseWait = function () {\r\n            angular.element('#divPleaseWait').css('display', 'none');\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular.module('SMART2').service('gridConfigProvider', ['uiGridGroupingConstants', 'cellTemplateProvider', '$filter', 'formWidgetUtils', function (uiGridGroupingConstants, cellTemplateProvider, $filter, formWidgetUtils) {\r\n\r\n        function getDefaultGridConfigObject() {\r\n            return {\r\n                \"field\": \"\",\r\n                \"displayName\": \"\",\r\n                \"groupingShowAggregationMenu\": false,\r\n                \"enableHiding\": false,\r\n                //\"suppressRemoveSort\": true,\r\n                \"groupingShowGroupingMenu\": false,\r\n                \"enablePinning\": false\r\n            };\r\n        }\r\n\r\n        function getGridConfig(conf, scope, cellClassFunction, cellEditableConditionFunction) {\r\n            var finalObject = _.extend(new getDefaultGridConfigObject(), conf);\r\n\r\n            if (finalObject.isVisible != undefined) {\r\n                finalObject.visible = formWidgetUtils.convertAndGetValue(finalObject.isVisible, scope, finalObject);\r\n            }\r\n\r\n            finalObject.enableCellEdit = true;\r\n\r\n            if (finalObject.isReadOnly != undefined) {\r\n                finalObject.enableCellEdit = !formWidgetUtils.convertAndGetValue(finalObject.isReadOnly, scope, finalObject);\r\n            }\r\n\r\n            if (finalObject.isFixed) {\r\n                if (finalObject.isFixed == \"Left\")\r\n                    finalObject.pinnedLeft = true;\r\n                if (finalObject.isFixed == \"Right\")\r\n                    finalObject.pinnedRight = true;\r\n                finalObject.maxWidth = 260;\r\n            }\r\n            if (finalObject.isGrouped) {\r\n                finalObject.grouping = {\r\n                    \"groupPriority\": 0\r\n                }\r\n                //finalObject.sort = {\r\n                //    \"priority\": 0,\r\n                //    \"direction\": \"asc\"\r\n                //}\r\n            }\r\n            if (finalObject.aggregation) {\r\n                finalObject.treeAggregationType = uiGridGroupingConstants.aggregation.SUM;\r\n            }\r\n\r\n            finalObject.displayKey = finalObject.displayName;\r\n            if (finalObject.isMandatory) {\r\n                finalObject.displayName = $filter('translate')(finalObject.displayName) + \" *\";\r\n            } else {\r\n                finalObject.displayName = $filter('translate')(finalObject.displayName);\r\n            }\r\n\r\n\r\n            if (finalObject.type) {\r\n                switch (finalObject.type) {\r\n                    case \"popup\":\r\n                        finalObject.cellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"cellTemplate\");\r\n                        finalObject.editableCellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"editableCellTemplate\");\r\n                        break;\r\n                    case \"editable\":\r\n                        if (finalObject.attributes && finalObject.attributes.type == \"date\") {\r\n                            finalObject.cellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"cellTemplate\");\r\n                            finalObject.editableCellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"editableCellTemplate\");\r\n                        }\r\n                        if (finalObject.attributes && finalObject.attributes.type == \"autocomplete\") {\r\n                            if (finalObject.cellTemplate == undefined || finalObject.cellTemplate == null) {\r\n                                finalObject.cellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"cellTemplate\");\r\n                            }\r\n                            finalObject.editableCellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"editableCellTemplate\");\r\n                        }\r\n                        if (finalObject.attributes && finalObject.attributes.type == \"number\") {\r\n                            finalObject.cellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"cellTemplate\");\r\n                            finalObject.editableCellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"editableCellTemplate\");\r\n                        }\r\n                        if (finalObject.attributes && (finalObject.attributes.type == \"text\" || finalObject.attributes.type == undefined)) {\r\n                            finalObject.cellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"cellTemplate\");\r\n                            finalObject.editableCellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"editableCellTemplate\");\r\n                        }\r\n                        break;\r\n                    case \"dropdown\":\r\n                        if (!finalObject.attributes.idKey) {\r\n                            finalObject.attributes.idKey = 'id'\r\n                        }\r\n                        finalObject.editableCellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"editableCellTemplate\");\r\n                        finalObject.cellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"cellTemplate\");\r\n                        break;\r\n                    case \"calculated\":\r\n                        finalObject.cellTemplate = cellTemplateProvider.getCellTemplate(finalObject);\r\n                        if (finalObject.enableCellEdit) finalObject.enableCellEdit = false;\r\n                        break;\r\n                    case \"checkbox\":\r\n                        finalObject.cellTemplate = cellTemplateProvider.getCellTemplate(finalObject, \"cellTemplate\");\r\n                        break;\r\n                };\r\n                //if (finalObject.editableCellTemplate) {\r\n                //finalObject.enableCellEdit = true;\r\n                //};\r\n            }\r\n\r\n            finalObject.cellClass = cellClassFunction;\r\n            finalObject.cellEditableCondition = cellEditableConditionFunction;\r\n\r\n            if (finalObject.hasOwnProperty('filterObject')) {\r\n                finalObject.enableFiltering = finalObject.filterObject.enableFiltering;\r\n                if (finalObject.enableFiltering) {\r\n                    finalObject.filter = {\r\n                        placeholder: \"Search\"\r\n                    }\r\n                    if (finalObject.filterObject.hasOwnProperty('filterKeys')) {\r\n                        finalObject.filter.condition = function (searchTerm, cellValue, row, col) {\r\n                            var result = false;\r\n                            if (typeof finalObject.filterObject.filterKeys != 'object' || typeof cellValue != 'object' || (typeof finalObject.filterObject.filterKeys == 'object' && finalObject.filterObject.filterKeys.length == 0)) {\r\n                                result = true;\r\n                            }\r\n                            for (var key in cellValue) {\r\n                                if (finalObject.filterObject.filterKeys.indexOf(key) > -1) {\r\n                                    if (typeof cellValue[key] == 'string' && cellValue[key].toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {\r\n                                        result = true;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            var cellConditionResult = true;\r\n                            if (angular.isDefined(finalObject.filterObject.cellCondition)) {\r\n                                try {\r\n                                    cellConditionResult = eval(finalObject.filterObject.cellCondition);\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n\r\n                            return result && cellConditionResult;\r\n                        };\r\n                    }\r\n                    else if (finalObject.filterObject.isDate) {\r\n                        finalObject.filter.condition = function (searchTerm, cellValue, row, col) {\r\n                            var result = false;\r\n                            if (searchTerm == undefined || searchTerm == null || (angular.isDefined(searchTerm) && searchTerm.trim() == \"\")) {\r\n                                result = true;\r\n                            }\r\n                            if (angular.isDefined(searchTerm) && (cellValue == undefined || cellValue == null)) {\r\n                                result = false;\r\n                            }\r\n                            if (angular.isDefined(searchTerm) && angular.isDefined(cellValue)) {\r\n                                var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\r\n                                formattedDate = formattedDate.split('+');\r\n                                formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\r\n                                var month = formattedDate.getMonth() + 1 + '';\r\n                                if (month.length === 1) {\r\n                                    month = 0 + '' + month;\r\n                                }\r\n                                formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\r\n                                result = formattedDate.toLowerCase().trim().indexOf(escape(searchTerm).replace(/%5C/g, '').trim()) > -1;\r\n\r\n                                var cellConditionResult = true;\r\n                                try {\r\n                                    cellConditionResult = eval(finalObject.filterObject.cellCondition);\r\n                                }\r\n                                catch (e) { }\r\n\r\n                                return result && cellConditionResult;\r\n                            }\r\n                        };\r\n                    }\r\n                    else if (finalObject.filterObject.hasOwnProperty('cellCondition')) {\r\n                        finalObject.filter.condition = function (searchTerm, cellValue, row, col) {\r\n                            var result = false;\r\n                            if (cellValue && cellValue.toLocaleLowerCase().indexOf(searchTerm) > -1) {\r\n                                result = true;\r\n                            }\r\n                            else {\r\n                                result = false;\r\n                            }\r\n                            var cellConditionResult = true;\r\n                            try {\r\n                                cellConditionResult = eval(finalObject.filterObject.cellCondition);\r\n                            }\r\n                            catch (e) { }\r\n                            return result && cellConditionResult;\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                finalObject.enableFiltering = false;\r\n            }\r\n\r\n            finalObject.uiType = finalObject.type;\r\n            delete finalObject.type;\r\n\r\n            return finalObject;\r\n        }\r\n\r\n        this.getMassagedGirdConfig = function (confArr, scope, cellClassFunction, cellEditableConditionFunction) {\r\n            var massagedConf = [];\r\n            _.each(confArr, function (conf) {\r\n                massagedConf.push(getGridConfig(conf, scope, cellClassFunction, cellEditableConditionFunction));\r\n            });\r\n            return massagedConf;\r\n        };\r\n\r\n\r\n\r\n        function getSmartTableConfig(conf, scope, cellClassFunction, cellEditableConditionFunction) {\r\n            var finalObject = _.extend(new getDefaultGridConfigObject(), conf);\r\n\r\n            if (finalObject.isVisible != undefined) {\r\n                finalObject.visible = formWidgetUtils.convertAndGetValue(finalObject.isVisible, scope, finalObject);\r\n            }\r\n\r\n            finalObject.enableCellEdit = true;\r\n\r\n            if (finalObject.isReadOnly != undefined) {\r\n                finalObject.enableCellEdit = !formWidgetUtils.convertAndGetValue(finalObject.isReadOnly, scope, finalObject);\r\n            }\r\n\r\n            if (finalObject.isFixed) {\r\n                if (finalObject.isFixed == \"Left\")\r\n                    finalObject.pinnedLeft = true;\r\n                if (finalObject.isFixed == \"Right\")\r\n                    finalObject.pinnedRight = true;\r\n                finalObject.maxWidth = 260;\r\n            }\r\n            if (finalObject.isGrouped) {\r\n                finalObject.grouping = {\r\n                    \"groupPriority\": 0\r\n                }\r\n                //finalObject.sort = {\r\n                //    \"priority\": 0,\r\n                //    \"direction\": \"asc\"\r\n                //}\r\n            }\r\n            if (finalObject.aggregation) {\r\n                finalObject.treeAggregationType = uiGridGroupingConstants.aggregation.SUM;\r\n            }\r\n\r\n            finalObject.displayKey = finalObject.displayName;\r\n            if (finalObject.isMandatory) {\r\n                finalObject.displayName = $filter('translate')(finalObject.displayName) + \" *\";\r\n            }\r\n            else {\r\n                finalObject.displayName = $filter('translate')(finalObject.displayName);\r\n            }\r\n\r\n\r\n            if (finalObject.type) {\r\n                switch (finalObject.type) {\r\n                    case \"dropdown\":\r\n                        if (!finalObject.attributes.idKey) {\r\n                            finalObject.attributes.idKey = 'id'\r\n                        }\r\n                        break;\r\n\r\n                    case \"calculated\":\r\n                        finalObject.cellTemplate = function (row, column) {\r\n                            if (column.colDef.field && column.colDef.field != 'IsCloseForReceiving' && column.colDef.field != 'IsCloseForInvoicing') {\r\n                                return $filter('minPrecisionHandler')(eval(column.colDef.attributes.rule), column.colDef.attributes.minmaxprecisionfilter.split(':')[0], column.colDef.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n                            }\r\n                            else {\r\n                                return eval(column.colDef.attributes.rule);\r\n                            }\r\n                        };\r\n                        finalObject.enableCellEdit = false;\r\n                        break;\r\n\r\n                    case 'popup':\r\n                        switch (finalObject.attributes.type) {\r\n                            case 'splitsPopup':\r\n                                finalObject.cellTemplate = function (row, column) {\r\n                                    return row.entity.splitType == 0 ? (row.entity.type.id == 1 ? $filter('translate')('P2P_Common_Quantity') : $filter('translate')('P2P_Common_Amount')) : $filter('translate')('P2P_Common_Percentage');\r\n                                };\r\n                                break;\r\n\r\n                            case 'commentsAndAttachmentsPopup':\r\n                                finalObject.cellTemplate = function (row, column) {\r\n                                    return row.entity.notes && row.entity.notes.length > 0 ? $filter('translate')('P2P_Common_View') : $filter('translate')('P2P_Common_Add');\r\n                                };\r\n                                break;\r\n\r\n                            case 'customAttributesPopup':\r\n                                finalObject.placeHolder = $filter('translate')('P2P_Common_View');\r\n                                break;\r\n\r\n                            case 'manufacturerPopup':\r\n                                finalObject.cellTemplate = function (row, column) { \r\n                                    return row.entity.manufacturer ? (row.entity.manufacturer + \"-\" + row.entity.manufacturerPartNumber + \"-\" + row.entity.ManufacturerModel) : $filter('translate')('P2P_Common_Add');\r\n                                };\r\n                                break;\r\n\r\n                            case 'categoryPopup':\r\n                                finalObject.debounce = 250;\r\n                                break;\r\n\r\n                            case 'taxesPopup':\r\n                                finalObject.cellTemplate = function (row, column) {\r\n                                    return row.entity.isTaxExempt ? 'Exempt' : row.entity.taxes;\r\n                                };\r\n                                break;\r\n                        }\r\n                        break;\r\n                };\r\n            }\r\n\r\n            finalObject.cellClass = cellClassFunction;\r\n            finalObject.cellEditableCondition = cellEditableConditionFunction;\r\n\r\n            if (finalObject.hasOwnProperty('filterObject')) {\r\n                finalObject.enableFiltering = finalObject.filterObject.enableFiltering;\r\n                if (finalObject.enableFiltering) {\r\n                    finalObject.filter = {\r\n                        placeholder: \"Search\"\r\n                    }\r\n                    if (finalObject.filterObject.hasOwnProperty('filterKeys')) {\r\n                        finalObject.filter.condition = function (searchTerm, cellValue, row, col) {\r\n                            var result = false;\r\n                            if (typeof finalObject.filterObject.filterKeys != 'object' || typeof cellValue != 'object' || (typeof finalObject.filterObject.filterKeys == 'object' && finalObject.filterObject.filterKeys.length == 0)) {\r\n                                result = true;\r\n                            }\r\n                            for (var key in cellValue) {\r\n                                if (finalObject.filterObject.filterKeys.indexOf(key) > -1) {\r\n                                    if (typeof cellValue[key] == 'string' && cellValue[key].toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {\r\n                                        result = true;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            var cellConditionResult = true;\r\n                            if (angular.isDefined(finalObject.filterObject.cellCondition)) {\r\n                                try {\r\n                                    cellConditionResult = eval(finalObject.filterObject.cellCondition);\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n\r\n                            return result && cellConditionResult;\r\n                        };\r\n                    }\r\n                    else if (finalObject.filterObject.isDate) {\r\n                        finalObject.filter.condition = function (searchTerm, cellValue, row, col) {\r\n                            var result = false;\r\n                            if (searchTerm == undefined || searchTerm == null || (angular.isDefined(searchTerm) && searchTerm.trim() == \"\")) {\r\n                                result = true;\r\n                            }\r\n                            if (angular.isDefined(searchTerm) && (cellValue == undefined || cellValue == null)) {\r\n                                result = false;\r\n                            }\r\n                            if (angular.isDefined(searchTerm) && angular.isDefined(cellValue)) {\r\n                                var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\r\n                                formattedDate = formattedDate.split('+');\r\n                                formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\r\n                                var month = formattedDate.getMonth() + 1 + '';\r\n                                if (month.length === 1) {\r\n                                    month = 0 + '' + month;\r\n                                }\r\n                                formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\r\n                                result = formattedDate.toLowerCase().trim().indexOf(escape(searchTerm).replace(/%5C/g, '').trim()) > -1;\r\n\r\n                                var cellConditionResult = true;\r\n                                try {\r\n                                    cellConditionResult = eval(finalObject.filterObject.cellCondition);\r\n                                }\r\n                                catch (e) { }\r\n\r\n                                return result && cellConditionResult;\r\n                            }\r\n                        };\r\n                    }\r\n                    else if (finalObject.filterObject.hasOwnProperty('cellCondition')) {\r\n                        finalObject.filter.condition = function (searchTerm, cellValue, row, col) {\r\n                            var result = false;\r\n                            if (cellValue && cellValue.toLocaleLowerCase().indexOf(searchTerm) > -1) {\r\n                                result = true;\r\n                            }\r\n                            else {\r\n                                result = false;\r\n                            }\r\n                            var cellConditionResult = true;\r\n                            try {\r\n                                cellConditionResult = eval(finalObject.filterObject.cellCondition);\r\n                            }\r\n                            catch (e) { }\r\n                            return result && cellConditionResult;\r\n                        };\r\n                    }\r\n                }\r\n\r\n                //  filter condition for split type column\r\n                if (finalObject.attributes.type == 'splitsPopup') {\r\n                    finalObject.filter.condition = function (searchTerm, row, col) {\r\n                        return (row.splitType == 0 ? (row.type.id == 1 ? 'Quantity' : 'Amount') : 'Percentage').toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                finalObject.enableFiltering = false;\r\n            }\r\n\r\n            switch (finalObject.field) {\r\n                case 'total':\r\n                    finalObject.sortCondition = function (data, column, isAscending) {\r\n                        if (angular.isDefined(column.attributes.rule)) {\r\n                            return data.sort(function (a, b) {\r\n                                a = eval(column.attributes.rule.replace(/row.entity/g, 'a'));\r\n                                b = eval(column.attributes.rule.replace(/row.entity/g, 'b'));\r\n                                return a > b ? (isAscending ? -1 : 1) : (a < b ? (isAscending ? 1 : -1) : 0);\r\n                            });\r\n                        }\r\n                        return data;\r\n                    };\r\n                    break;\r\n            }\r\n\r\n            finalObject.uiType = finalObject.type;\r\n            delete finalObject.type;\r\n\r\n            return finalObject;\r\n        };\r\n\r\n\r\n        this.getMassagedSmartTableConfig = function (confArr, scope, cellClassFunction, cellEditableConditionFunction) {\r\n            var massagedConf = [];\r\n            _.each(confArr, function (conf) {\r\n                massagedConf.push(getSmartTableConfig(conf, scope, cellClassFunction, cellEditableConditionFunction));\r\n            });\r\n            return massagedConf;\r\n        };\r\n\r\n        this.eavluateScopeBindedExpressions = function (val, scope, obj) {\r\n            return formWidgetUtils.convertAndGetValue(val, scope, obj)\r\n        };\r\n    }]);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').service('httpService', ['$http', '$q', 'APPCONSTANTS', function ($http, $q, APPCONSTANTS) {\r\n        delete $http.defaults.headers.common['X-Requested-With'];\r\n\r\n        var httpService = this;\r\n        var pendingRequests = [];\r\n        httpService.isNetworkOnline = true;\r\n\r\n        /*\r\n         * Lister network change\r\n         */\r\n        // window.on('networkChange', function(e) {\r\n        // httpService.isNetworkOnline = e.online;\r\n        // if(!e.online) {\r\n        // httpService.abortAll(true);\r\n        // }\r\n        // });\r\n\r\n        /*\r\n         * Massage result data\r\n         * This is required because sometimes if a service fails, the same is notified in success callback\r\n         */\r\n        httpService.massageResultData = function (data) {\r\n            data.success = true;\r\n            if (data.config.timeout && angular.isDefined(data.config.timeout.status)) {\r\n                data.status = data.config.timeout.status;     //  timeout can be either actual service timeout or request abort\r\n                data.statusText = data.config.timeout.statusText;\r\n                data.success = false;\r\n            }\r\n            else if ([200, 201, 202, 203].indexOf(data.status) == -1) {\r\n                data.statusText = 'An error occured while fetching data.';\r\n                data.success = false;\r\n            }\r\n            return data;\r\n        };\r\n\r\n\r\n        /*\r\n         *  Abort all pending requests\r\n         *  Services added to 'excludeServices' array will be skipped (will not be aborted)\r\n         */\r\n        httpService.abortAll = function (isNetworkLost) {\r\n            angular.forEach(pendingRequests, function (pendingRequest) {\r\n                pendingRequest.canceller.promise.status = isNetworkLost ? 0 : 499;\r\n                pendingRequest.canceller.promise.statusText = isNetworkLost ? 'The Internet connection appears to be offline.' : 'Request cancelled.';\r\n                pendingRequest.canceller.resolve();\r\n            });\r\n            pendingRequests = [];\r\n        };\r\n\r\n\r\n        /*\r\n         *  Abort request\r\n         */\r\n        httpService.abort = function (urlfordata) {\r\n            if (!urlfordata) {\r\n                return;\r\n            }\r\n            var requestToAbort = undefined;\r\n            requestToAbort = _.findWhere(pendingRequests, function () {\r\n                return pendingRequest.url == urlfordata.url && angular.equals(pendingRequest.requestArgs, (urlfordata.params ? urlfordata.params : (urlfordata.data ? urlfordata.data : {})));\r\n            });\r\n            requestToAbort.canceller.promise.status = 499;\r\n            requestToAbort.canceller.promise.statusText = 'Request cancelled.';\r\n            requestToAbort.canceller.resolve();\r\n            pendingRequests = _.filter(pendingRequests, function (pendingRequest) {\r\n                return pendingRequest.url != urlfordata.url && !angular.equals(pendingRequest.requestArgs, (urlfordata.params ? urlfordata.params : (urlfordata.data ? urlfordata.data : {})));\r\n            });\r\n        };\r\n\r\n\r\n        /*\r\n         * Get data from service\r\n         */\r\n        httpService.directhttp = function (urlfordata) {\r\n            var returnpromise = $q.defer();\r\n\r\n            var responseURL = 'Result';\r\n            var requestPromise, canceller = $q.defer();\r\n\r\n            /*\r\n             *  If you don't want a service to be aborted on abortAll(), \r\n             *  pass a parameter named 'abortable' and set the value to false.\r\n             *  abort() can still be used to abort the same service.\r\n             */\r\n            var abortable = angular.isDefined(urlfordata.abortable) && urlfordata.abortable == false ? false : true;\r\n            /*\r\n             * Service timeout\r\n             */\r\n            var requestTimeout = setTimeout(function () {\r\n                canceller.promise.status = 408;\r\n                canceller.promise.statusText = 'Request timed out.';\r\n                canceller.resolve();\r\n            }, angular.isDefined(urlfordata.timeout) ? urlfordata.timeout : 120000);\r\n\r\n            if (abortable) {\r\n                pendingRequests.push({\r\n                    url: urlfordata.url,\r\n                    requestArgs: urlfordata.params || urlfordata.data,\r\n                    canceller: canceller\r\n                });\r\n            }\r\n\r\n            var reqParams = {\r\n                url: urlfordata.url,\r\n                method: urlfordata.method ? urlfordata.method.toUpperCase() : \"POST\",\r\n                cache: false,\r\n                timeout: canceller.promise,\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                }\r\n            };\r\n\r\n            angular.merge(reqParams, urlfordata);\r\n\r\n            requestPromise = $http(reqParams).then(function (result) {\r\n                result = httpService.massageResultData(result);\r\n                if (result.success) {\r\n                    returnpromise.resolve(result.data);\r\n                }\r\n                else {\r\n                    returnpromise.reject(result);\r\n                }\r\n            }, function (errorData) {\r\n                errorData = httpService.massageResultData(errorData);\r\n                returnpromise.reject(errorData);\r\n            });\r\n\r\n\r\n            /*\r\n             *  Once a request has failed or succeeded, remove it from the pending list\r\n             */\r\n            requestPromise.finally(function () {\r\n                clearTimeout(requestTimeout);\r\n                if (abortable) {\r\n                    pendingRequests = _.filter(pendingRequests, function (pendingRequest) {\r\n                        return pendingRequest.url != urlfordata.url && !angular.equals(pendingRequest.requestArgs, ((urlfordata.params ? urlfordata.params : (urlfordata.data ? urlfordata.data : {}))));\r\n                    });\r\n                }\r\n            });\r\n\r\n            return returnpromise.promise;\r\n        };\r\n    }]);\r\n})();","(function() {\n    'use strict';\n    angular.module('SMART2').service('NoolsEngine', [function () {\n        this.execute = function (config) {\r\n            var arrFields = [];\r\n            var arrErrors = [];\r\n            var headerOrGridConfig = config.uiConfig;\r\n            var dataModel = config.dataModel;\r\n            var ruleType = config.type;\r\n            var rulesObj = config.rules;\r\n            var scope = config.scope;\r\n\r\n            if (ruleType == 'grid') {\r\n                _.each(headerOrGridConfig[0].cloumnDefs, function (def) {\r\n                    arrFields.push({\r\n                        field: def.field,\r\n                        type: def.type\r\n                    });\r\n                });\r\n            }\r\n            else if (ruleType == 'header') {\r\n                _.each(headerOrGridConfig.sections, function (section) {\r\n                    _.each(section.rows[0].properties, function (def) {\r\n                        arrFields.push({\r\n                            field: def.data,\r\n                            type: def.type,\r\n                            attributes: def.attributes\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n\r\n            var flow = nools.compile(rulesObj, { name: 'totalErrors' });\r\n            var Message = flow.getDefined(\"message\");\r\n\r\n            if (ruleType == 'grid') {\r\n                dataModel = dataModel.orderData.items[0];\r\n            }\r\n            else {\r\n                dataModel = dataModel;\r\n            }\r\n\r\n            _.each(arrFields, function (man) {\r\n                var messageModel = [new Message({\r\n                    ui: man,\r\n                    dataModel: dataModel,\r\n                    scope: scope\r\n                })];\r\n\r\n                var session = flow.getSession.apply(flow, messageModel).focus('empty');\r\n\r\n                session.on(\"error\", function (data) {\r\n                    arrErrors.push(data.errors[0]);\r\n                }).on('fire', function (name) { });\r\n\r\n                session.match(function (data) {\r\n                    session.dispose();\r\n                    nools.deleteFlow('totalErrors');\r\n                });\r\n            });\r\n\r\n            if (arrErrors.length == 0) {\r\n                angular.isFunction(config.success) && config.success();\r\n            }\r\n            else {\r\n                angular.isFunction(config.error) && config.error({\r\n                    data: arrErrors\r\n                });\r\n            }\r\n\r\n            return dataModel;\r\n        };\n    }]);\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular.module('SMART2').service('requestClicked', requestClickedFunc);\r\n\r\n    function requestClickedFunc() {\r\n        var isRequestClicked = false;\r\n        return {\r\n            getProperty: function () {\r\n                return isRequestClicked;\r\n            },\r\n            setProperty: function (value) {\r\n                isRequestClicked = value;\r\n            }\r\n        };\r\n    };\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    //  functions for rule engine\r\n    window.isObject = function (val) {\r\n        return angular.isObject(val);\r\n    };\r\n\r\n    window.isDate = function (val) {\r\n        return angular.isDate(val);\r\n    };\r\n\r\n    window.isNumber = function (val) {\r\n        return angular.isNumber(val);\r\n    };\r\n\r\n    window.isDefined = function (val) {\r\n        return angular.isDefined(val)\r\n    };\r\n\r\n    window.isUndefined = function (val) {\r\n        return angular.isUndefined(val)\r\n    };\r\n\r\n    window.isString = function (val) {\r\n        return angular.isString(val)\r\n    };\r\n\r\n    window.isUndefinedOrEmptyOrNull = function (m) {\r\n        if (isObject(m) && m.hasOwnProperty('ui')) {\r\n            var result;\r\n            try {\r\n                result = eval('m.dataModel.' + m.ui.field);\r\n            }\r\n            catch (e) { }\r\n            return result === '' || result === undefined || result === null;\r\n        }\r\n        return m === '' || m === undefined || m === null;\r\n    };\r\n\r\n    window.isEmptyOrNull = function (m) {\r\n        if (isObject(m) && m.hasOwnProperty('ui')) {\r\n            var result;\r\n            try {\r\n                result = eval('m.dataModel.' + m.ui.field);\r\n            }\r\n            catch (e) { }\r\n            return result === '' || result === null;\r\n        }\r\n        return m === '' || m === null;\r\n    };\r\n\r\n    window.isUndefinedOrNull = function (m) {\r\n        if (isObject(m) && m.hasOwnProperty('ui')) {\r\n            var result;\r\n            try {\r\n                result = eval('m.dataModel.' + m.ui.field);\r\n            }\r\n            catch (e) { }\r\n            return result === undefined || result === null;\r\n        }\r\n        return m === undefined || m === null;\r\n    };\r\n\r\n    angular.module('SMART2').service('RuleEngine', ['$translate', function ($translate) {\r\n        var service = this;\r\n        this.utils = {};\r\n\r\n        this.setRules = function (dataConfig, dataModel, cumulativeRules, rules, ruleType) {\r\n            this.dataConfig = dataConfig;\r\n            this.dataModel = dataModel;\r\n            this.cumulativeRules = cumulativeRules;                 //  Cumulative rules\r\n            this.rules = rules;                                     //  Rules object\r\n            this.type = angular.isDefined(ruleType) ? ruleType : 'header';\r\n            this.isNoolsEnabled = !angular.isObject(rules);\r\n        };\r\n\r\n        this.setDocumentRules = function (rules) {\r\n            this.documentRules = rules;\r\n        };\r\n\r\n        this.setUtils = function (utils) {\r\n            this.utils = utils;\r\n        };\r\n\r\n        this.executeNools = function (callback, scope) {\r\n            var failedRules = [];\r\n            var headerOrGridConfig = this.dataConfig;\r\n            var dataModel = this.dataModel;\r\n            var ruleType = this.type;\r\n            var rulesObj = this.rules;\r\n            var isNoolsEnabled = this.isNoolsEnabled;\r\n            var tmpRules, tmpRule, tmpRuleResult;\r\n\r\n            var invalidArray = [], disableArray = [], totalErrosArray = [];\r\n\r\n            if (ruleType == 'grid') {\r\n                _.each(dataModel, function (model, rowIndex) {\r\n                    var virtualDatamodel = angular.copy(model);\r\n\r\n                    _.each(angular.isArray(headerOrGridConfig) ? headerOrGridConfig[0].cloumnDefs : headerOrGridConfig.cloumnDefs, function (column, columnIndex) {\r\n                        if (column.hasOwnProperty('rules') && column.rules.length > 0) {\r\n                            angular.extend(column, {\r\n                                fieldName: column.field,\r\n                                errorFieldDisplayName: $translate.instant(column.displayName)\r\n                            });\r\n\r\n                            if (column.attributes.type == 'date') {\r\n                                changeDateFormatForNools(column, virtualDatamodel, 'grid');\r\n                            }\r\n\r\n                            //  Javascript implementation\r\n                            if (!isNoolsEnabled) {\r\n                                var messageModel = {\r\n                                    ui: angular.extend(column, {\r\n                                        data: column.field,\r\n                                        errorFieldDisplayName: $translate.instant(column.displayName)\r\n                                    }),\r\n                                    dataModel: virtualDatamodel,\r\n                                    index: {\r\n                                        row: rowIndex,\r\n                                        column: columnIndex\r\n                                    },\r\n                                    scope: ''\r\n                                };\r\n\r\n                                tmpRules = rulesObj.get(messageModel);\r\n                                \r\n                                for (var i = 0; i < column.rules.length; i++) {\r\n                                    tmpRule = tmpRules[column.rules[i]];\r\n                                    if (angular.isDefined(tmpRule) && angular.isFunction(tmpRule.condition) && tmpRule.condition()) {\r\n                                        //  If rule fails\r\n                                        tmpRuleResult = tmpRule.result();\r\n                                        if (angular.isDefined(tmpRuleResult.rowColIndex)) {\r\n                                            if (tmpRuleResult.state == 'invalid') {\r\n                                                invalidArray.push(tmpRuleResult.rowColIndex)\r\n                                                totalErrosArray.push(tmpRuleResult);\r\n                                            }\r\n                                            else if (tmpRuleResult.state == 'disable') {\r\n                                                disableArray.push(tmpRuleResult.rowColIndex);\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            if (tmpRuleResult.state == 'invalid') {\r\n                                                failedRules.push(tmpRuleResult);\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    };\r\n                                }\r\n                            }\r\n                            else {\r\n                                //  Nools implementation\r\n                                var messageModel = [new Message({\r\n                                    ui: angular.extend(column, {\r\n                                        data: column.field\r\n                                    }),\r\n                                    dataModel: virtualDatamodel,\r\n                                    scope: ''\r\n                                })];\r\n                                var rules = messageModel[0].ui.rules;\r\n                                var session = flow.getSession.apply(flow, messageModel);\r\n                                for (var i = 0; i < rules.length; i++) {\r\n                                    session.focus(\"\" + rules[i] + \"\");\r\n                                }\r\n                                session.on(\"error\", function (data) {\r\n                                    if (data.errors[0].rowColIndex !== undefined) {\r\n                                        if (data.errors[0].state == 'invalid') {\r\n                                            invalidArray.push(data.errors[0].rowColIndex)\r\n                                            totalErrosArray.push(data.errors[0]);\r\n                                            session.dispose();\r\n                                        }\r\n                                        else if (data.errors[0].state == 'disable') {\r\n                                            disableArray.push(data.errors[0].rowColIndex);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (data.errors[0].state == 'invalid') {\r\n                                            failedRules.push(data.errors[0]);\r\n                                            session.dispose();\r\n                                        }\r\n                                    }\r\n                                });\r\n                                session.match();\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n\r\n                if (invalidArray.length > 0 || disableArray.length > 0 || totalErrosArray.length > 0) {\r\n                    failedRules.push(invalidArray);\r\n                    failedRules.push(disableArray);\r\n                    failedRules.push(totalErrosArray);\r\n                }\r\n            }\r\n            else if (ruleType == 'cell' && headerOrGridConfig.colDef.hasOwnProperty('rules') && headerOrGridConfig.colDef.rules.length > 0) {\r\n                headerOrGridConfig.colDef.fieldName = headerOrGridConfig.colDef.field;\r\n                var virtualDatamodel = angular.copy(dataModel.entity);\r\n\r\n                if (headerOrGridConfig.colDef.attributes.type == 'date') {\r\n                    //scope consists total column defs of line tab.\r\n                    changeDateFormatForNools(scope, virtualDatamodel, 'cell');\r\n                }\r\n\r\n                //  Javascript implementation\r\n                if (!isNoolsEnabled) {\r\n                    var messageModel = {\r\n                        ui: angular.extend(headerOrGridConfig.colDef, {\r\n                            errorFieldDisplayName: $translate.instant(headerOrGridConfig.colDef.displayKey)\r\n                        }),\r\n                        dataModel: virtualDatamodel,\r\n                        scope: ''\r\n                    };\r\n\r\n                    tmpRules = rulesObj.get(messageModel);\r\n\r\n                    for (var i = 0; i < headerOrGridConfig.colDef.rules.length; i++) {\r\n                        tmpRule = tmpRules[headerOrGridConfig.colDef.rules[i]];\r\n                        if (angular.isDefined(tmpRule) && angular.isFunction(tmpRule.condition) && tmpRule.condition()) {\r\n                            //  If rule fails\r\n                            failedRules.push(tmpRule.result());\r\n                            break;\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    var messageModel = [new Message({\r\n                        ui: headerOrGridConfig.colDef,\r\n                        dataModel: virtualDatamodel,\r\n                        scope: ''\r\n                    })];\r\n                    var session = flow.getSession.apply(flow, messageModel);\r\n                    var rules = headerOrGridConfig.colDef.rules;\r\n                    for (var i = 0; i < rules.length; i++) {\r\n                        session.focus(\"\" + rules[i] + \"\");\r\n                    }\r\n                    session.on(\"error\", function (data) {\r\n                        failedRules.push(data.errors[0]);\r\n                        session.dispose();\r\n                    });\r\n                    session.match();\r\n                }\r\n            }\r\n\t\t\t  else if (ruleType == 'chargeGrid') {\r\n                dataModel = dataModel.orderData.ItemChargesForHeader;\r\n                _.each(dataModel, function (model) {\r\n                    var virtualDatamodel = angular.copy(model);\r\n                    var columnArr = [];\r\n                    _.each(headerOrGridConfig[0].cloumnDefs, function (column) {\r\n                        angular.extend(column, {\r\n                            fieldName: column.field\r\n                        });\r\n                        if (column.hasOwnProperty('rules')) {\r\n                            if (column.attributes.type == 'date') {\r\n                                changeDateFormatForNools(column, virtualDatamodel);\r\n                            }\r\n                            var messageModel = [new Message({\r\n                                ui: angular.extend(column, {\r\n                                    data: column.field\r\n                                }),\r\n                                dataModel: virtualDatamodel,\r\n                                scope: ''\r\n                            })];\r\n                            columnArr.push(messageModel);\r\n                        }\r\n                    });\r\n                    _.each(columnArr, function (col) {\r\n                        var rules = col[0].ui.rules;\r\n                        var session = flow.getSession.apply(flow, col);\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            session.focus(\"\" + rules[i] + \"\");\r\n                        }\r\n                        session.on(\"error\", function (data) {\r\n                            if (data.errors[0].state == 'invalid') {\r\n                                failedRules.push(data.errors[0]);\r\n                                session.dispose();\r\n                            }\r\n                        });\r\n                        session.match();\r\n                    });\r\n                });\r\n            }\r\n\r\n            if (angular.isFunction(callback)) {\r\n                callback({\r\n                    success: failedRules.length == 0,\r\n                    failedRules: failedRules\r\n                });\r\n            }\r\n            else {\r\n                return {\r\n                    success: failedRules.length == 0,\r\n                    failedRules: failedRules\r\n                };\r\n            }\r\n        };\r\n\r\n        this.isValid = function (rule, callback) {\r\n            if (typeof Header == \"undefined\") {\r\n                var tmpRules = this.documentRules.get({\r\n                    ui: '',\r\n                    dataModel: this.dataModel,\r\n                    scope: '',\r\n                    utils: this.utils\r\n                });\r\n\r\n                var tmpRule = tmpRules[rule];\r\n\r\n                if (angular.isDefined(tmpRule) && angular.isFunction(tmpRule.condition) && tmpRule.condition()) {\r\n                    angular.isFunction(callback) && callback({\r\n                        success: false,\r\n                        errorData: tmpRule.result()\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                var messageModel = [new Header({\r\n                    ui: '',\r\n                    dataModel: this.dataModel,\r\n                    scope: '',\r\n                    utils: this.utils\r\n                })];\r\n                var session = headerFlow.getSession.apply(headerFlow, messageModel).focus(rule);\r\n                session.on(\"error\", function (data) {\r\n                    angular.isFunction(callback) && callback({\r\n                        success: false,\r\n                        errorData: data.errors[0]\r\n                    });\r\n                    session.dispose();\r\n                });\r\n                session.match();\r\n            }\r\n        };\r\n\r\n        this.execute = function (callback, currentScope) {\r\n            if (angular.isDefined(this.type) && this.type != 'header') {\r\n                this.executeNools(callback, currentScope);\r\n                return;\r\n            }\r\n\r\n            //  Inline validations\r\n            var isValid = true;\r\n            var tmpPropertyValue;\r\n            var failedRules = [];\r\n            var rulesObj = this.rules;\r\n            var isNoolsEnabled = this.isNoolsEnabled;\r\n            var tmpRules, tmpRule, tmpRuleResult;\r\n\r\n\r\n            /*\r\n             * Inline validation\r\n             */\r\n            for (var i = 0; i < this.dataConfig.length; i++) {\r\n                if (this.dataConfig[i].isHidden) {\r\n                    continue;\r\n                }\r\n                for (var j = 0; j < this.dataConfig[i].rows.length; j++) {\r\n                    for (var k = 0; k < this.dataConfig[i].rows[j].properties.length; k++) {\r\n                        if (this.dataConfig[i].rows[j].properties[k].isHidden) {\r\n                            continue;\r\n                        }\r\n\r\n                        //skip rules, when readonly\r\n                        if (Object(this.dataConfig[i].rows[j].properties[k]).hasOwnProperty('attributes')) {\r\n                            if (this.dataConfig[i].rows[j].properties[k].attributes.readonly) {\r\n                                continue;\r\n                            }\r\n                        }\r\n\r\n                        tmpPropertyValue = undefined;\r\n\r\n                        if (this.dataConfig[i].rows[j].properties[k].attributes && this.dataConfig[i].rows[j].properties[k].attributes.hasOwnProperty('ngModelOptions') && this.dataConfig[i].rows[j].properties[k].attributes.ngModelOptions.getterSetter) {\r\n                            tmpPropertyValue = eval('currentScope.' + this.dataConfig[i].rows[j].properties[k].data + '()');\r\n                        }\r\n                        else {\r\n                            try {\r\n                                if (typeof eval('this.dataModel.' + this.dataConfig[i].rows[j].properties[k].data) == 'object' && this.dataConfig[i].rows[j].properties[k].type != 'subsection') {\r\n                                    if (this.dataConfig[i].rows[j].properties[k].attributes != undefined)\r\n                                        var datakey = this.dataConfig[i].rows[j].properties[k].attributes.displayformat != undefined ? this.dataConfig[i].rows[j].properties[k].attributes.displayformat : this.dataConfig[i].rows[j].properties[k].attributes.datakey;\r\n                                    else if (this.dataConfig[i].rows[j].properties[k].ui != undefined)\r\n                                        var datakey = this.dataConfig[i].rows[j].properties[k].ui.displayformat ? this.dataConfig[i].rows[j].properties[k].ui.displayformat : this.dataConfig[i].rows[j].properties[k].ui.datakey;\r\n\r\n                                    datakey = datakey.split('-');\r\n                                    tmpPropertyValue = '';\r\n                                    for (var m = 0; m < datakey.length; m++) {\r\n                                        if (datakey[m].indexOf('{') > -1)\r\n                                            datakey[m] = datakey[m].replace(\"{\", '').replace(\"}\", '');\r\n\r\n                                        tmpPropertyValue += eval('this.dataModel.' + this.dataConfig[i].rows[j].properties[k].data + '.' + datakey[m]).trim();\r\n                                    }\r\n                                }\r\n                                else\r\n                                    tmpPropertyValue = eval('this.dataModel.' + this.dataConfig[i].rows[j].properties[k].data);\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n\r\n                        /*\r\n                         * Mandatory rule\r\n                         */\r\n                        var isValidated = false;\r\n                        if (Object(this.dataConfig[i].rows[j].properties[k]).hasOwnProperty('attributes')) {\r\n                            if (Object(this.dataConfig[i].rows[j].properties[k].attributes).hasOwnProperty('type') && this.dataConfig[i].rows[j].properties[k].attributes.type == 'number') {\r\n                                isValidated = true;\r\n                                if ((this.dataConfig[i].rows[j].properties[k].isMandatory && (tmpPropertyValue == undefined || tmpPropertyValue === \"\" || tmpPropertyValue == null || isNaN(tmpPropertyValue))) || (!this.dataConfig[i].rows[j].properties[k].isMandatory && isNaN(tmpPropertyValue) && tmpPropertyValue != undefined)) {                                   \r\n                                    failedRules.push({\r\n                                        type: 'required',\r\n                                        section:this.dataConfig[i],\r\n                                        uiConfig: this.dataConfig[i].rows[j].properties[k],\r\n                                        rule: \"isNaN(this)\",\r\n                                        error: $translate.instant('PLATFORM_ThisFieldShouldBeNumber')\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            else if (Object(this.dataConfig[i].rows[j].properties[k].attributes).hasOwnProperty('type') && this.dataConfig[i].rows[j].properties[k].attributes.type == 'autocomplete') {\r\n                                isValidated = true;\r\n                                if (this.dataConfig[i].rows[j].properties[k].isMandatory && (tmpPropertyValue + '' == '' || tmpPropertyValue == null || tmpPropertyValue == undefined)) {                                  \r\n                                    failedRules.push({\r\n                                        type: 'required',\r\n                                        section: this.dataConfig[i],\r\n                                        uiConfig: this.dataConfig[i].rows[j].properties[k],\r\n                                        rule: \"this == ''\",\r\n                                        error: $translate.instant('PLATFORM_ThisFieldShouldNotBeBlank')\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (!isValidated && this.dataConfig[i].rows[j].properties[k].type != 'subsection' && this.dataConfig[i].rows[j].properties[k].type != 'checkbox' && this.dataConfig[i].rows[j].properties[k].type != 'switch' && this.dataConfig[i].rows[j].properties[k].isMandatory && (tmpPropertyValue == '' || tmpPropertyValue == undefined || tmpPropertyValue == null)) {\r\n                            failedRules.push({\r\n                                type: 'required',\r\n                                section: this.dataConfig[i],\r\n                                uiConfig: this.dataConfig[i].rows[j].properties[k],\r\n                                rule: \"this == ''\",\r\n                                error: $translate.instant('PLATFORM_ThisFieldShouldNotBeBlank')\r\n                            });\r\n                        }\r\n\r\n                        /*\r\n                         * Inline rules\r\n                         */\r\n                        if (Object(this.dataConfig[i].rows[j].properties[k]).hasOwnProperty('rules')) {\r\n                            if (this.dataConfig[i].rows[j].properties[k].rules) {\r\n                                for (var l = 0; l < this.dataConfig[i].rows[j].properties[k].rules.length; l++) {\r\n                                    if (typeof this.dataConfig[i].rows[j].properties[k].rules[l] != 'string') {\r\n                                        if (eval((this.dataConfig[i].rows[j].properties[k].rules[l].rule).replace(/this/g, 'tmpPropertyValue'))) {\r\n                                            failedRules.push({\r\n                                                type: 'inline',\r\n                                                section: this.dataConfig[i],\r\n                                                uiConfig: this.dataConfig[i].rows[j].properties[k],\r\n                                                rule: this.dataConfig[i].rows[j].properties[k].rules[l].rule,\r\n                                                error: this.dataConfig[i].rows[j].properties[k].rules[l].error\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                    else if (isNoolsEnabled) {\r\n                                        var messageModel = [new Header({\r\n                                            ui: this.dataConfig[i].rows[j].properties[k],\r\n                                            dataModel: this.dataModel,\r\n                                            scope: currentScope,\r\n                                            utils: this.utils\r\n                                        })];\r\n\r\n                                        var session = headerFlow.getSession.apply(headerFlow, messageModel).focus(this.dataConfig[i].rows[j].properties[k].rules[l]);\r\n                                        var _section=this.dataConfig[i];\r\n                                        var _uiElement = _section.rows[j].properties[k];\r\n                                        session.on(\"error\", function (data) {                                            \r\n                                            data.errors[0].uiConfig = _uiElement;\r\n                                            data.errors[0].section = _section;\r\n                                            failedRules.push(data.errors[0]);\r\n                                            session.dispose();\r\n                                        });\r\n\r\n                                        session.match();\r\n                                    }\r\n                                    else {\r\n                                        var messageModel = {\r\n                                            ui: {\r\n                                                section: this.dataConfig[i],\r\n                                                property: this.dataConfig[i].rows[j].properties[k],\r\n                                            },\r\n                                            dataModel: this.dataModel,\r\n                                            scope: currentScope,\r\n                                            utils: this.utils\r\n                                        };\r\n\r\n                                        tmpRules = rulesObj.get(messageModel);\r\n                                        tmpRule = tmpRules[this.dataConfig[i].rows[j].properties[k].rules[l]];\r\n\r\n                                        if (angular.isDefined(tmpRule) && angular.isFunction(tmpRule.condition) && tmpRule.condition()) {\r\n                                            //  If rule fails\r\n                                            this.dataConfig[i].rows[j].properties[k].validate = true;\r\n                                            failedRules.push(tmpRule.result());\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*\r\n             *  Cumulative validations  \r\n             */\r\n            if (angular.isDefined(this.cumulativeRules) && angular.isArray(this.cumulativeRules) && this.cumulativeRules.length > 0) {\r\n                tmpRules = angular.isDefined(this.rules) && angular.isFunction(this.rules.get) && this.rules.get({\r\n                    ui: {},\r\n                    dataModel: this.dataModel,\r\n                    scope: currentScope,\r\n                    utils: this.utils\r\n                });\r\n\r\n                for (var i = 0; i < this.cumulativeRules.length; i++) {\r\n                    if (typeof this.cumulativeRules[i] != 'string' && eval((this.cumulativeRules[i].rule).replace(/this/g, 'this.dataModel'))) {\r\n                        failedRules.push({\r\n                            type: 'cumulative',\r\n                            rule: this.cumulativeRules[i].rule,\r\n                            error: this.cumulativeRules[i].error\r\n                        });\r\n                    }\r\n                    else if (isNoolsEnabled) {\r\n                        var messageModel = [new Header({\r\n                            ui: {},\r\n                            dataModel: this.dataModel,\r\n                            scope: currentScope,\r\n                            utils: this.utils\r\n                        })];\r\n\r\n                        var session = headerFlow.getSession.apply(headerFlow, messageModel).focus(this.cumulativeRules[i]);\r\n\r\n                        session.on(\"error\", function (data) {\r\n                            failedRules.push(data.errors[0]);\r\n                            session.dispose();\r\n                        });\r\n\r\n                        session.match();\r\n                    }\r\n                    else {\r\n                        tmpRule = tmpRules[this.cumulativeRules[i]];\r\n\r\n                        if (angular.isDefined(tmpRule) && angular.isFunction(tmpRule.condition) && tmpRule.condition()) {\r\n                            //  If rule fails\r\n                            failedRules.push(tmpRule.result());\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (failedRules.length > 0 && failedRules[0].section) {\r\n                failedRules[0].section.isContentLoaded = true;\r\n                failedRules[0].section.isActive = true;\r\n            }\r\n\r\n            angular.forEach(failedRules, function (value, key) {\r\n                if (value.uiConfig) {\r\n                    value.uiConfig.validate = true;\r\n                }\r\n            });\r\n\r\n            if (failedRules.length > 0 && ((failedRules[0].hasOwnProperty('uiConfig') && failedRules[0].uiConfig != undefined) || (failedRules[0].hasOwnProperty('property') && failedRules[0].property != '' && failedRules[0].property != undefined))) {\r\n                typeof failedRules[0].uiConfig != 'undefined' ? failedRules[0].uiConfig.focus = true : failedRules[0].property.focus = true;\r\n            }           \r\n\r\n            tmpRules = null;\r\n            tmpRule = null;\r\n            tmpRuleResult = null;\r\n\r\n            angular.isFunction(callback) && callback({\r\n                success: failedRules.length == 0,\r\n                failedRules: failedRules\r\n            });\r\n        };\r\n\r\n\r\n        this.executeOnStaticForm = function (callback) {\r\n            var isValid = true;\r\n            var failedRules = [];\r\n\r\n            for (var key in this.dataConfig) {\r\n                for (var i = 0; i < this.dataConfig[key].rules.length; i++) {\r\n                    if (eval(this.dataConfig[key].rules[i].rule.replace(/this/g, 'this.dataModel.' + key))) {\r\n                        failedRules.push({\r\n                            type: 'inline',\r\n                            rule: this.dataConfig[key].rules[i].rule,\r\n                            error: this.dataConfig[key].rules[i].error\r\n                        });\r\n                        this.dataConfig[key].validate = true;\r\n                        if (failedRules.length == 1) {\r\n                            this.dataConfig[key].focus = true;\r\n                        }\r\n                        isValid = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*\r\n             *  Cumulative validations  \r\n             */\r\n            if (this.cumulativeRules) {\r\n                for (var i = 0; i < this.cumulativeRules.length; i++) {\r\n                    if (eval((this.cumulativeRules[i].rule).replace(/this/g, 'this.dataModel'))) {\r\n                        failedRules.push({\r\n                            type: 'cumulative',\r\n                            rule: this.cumulativeRules[i].rule,\r\n                            error: this.cumulativeRules[i].error\r\n                        });\r\n                        isValid = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (angular.isFunction(callback)) {\r\n                callback({\r\n                    success: isValid,\r\n                    data: failedRules\r\n                });\r\n            }\r\n        };\r\n\r\n\r\n        function changeDateFormatForNools(colDefs, virtualDatamodel, type) {\r\n            if (colDefs != '' && type == 'cell') {\r\n                _.each(colDefs.cloumnDefs, function (colDef) {\r\n                    if (colDef.attributes.type == 'date') {\r\n                        var field = colDef.field;\r\n                        var fieldVal = field.split('.');\r\n                        if (fieldVal.length > 1) {\r\n                            var fieldzeroval = eval('virtualDatamodel.' + fieldVal[0]);\r\n                            if (fieldzeroval !== undefined && fieldzeroval !== null) {\r\n                                var dateVar = eval('virtualDatamodel.' + fieldVal[1]);\r\n                                if (dateVar != undefined & dateVar != '')\r\n                                    virtualDatamodel[field] = convertDate(dateVar);\r\n                                else\r\n                                    virtualDatamodel[field] = \"\";\r\n                            }\r\n                        }\r\n                        else {\r\n                            var dateVar = eval('virtualDatamodel.' + fieldVal[0]);\r\n                            if (dateVar != undefined & dateVar != '')\r\n                                virtualDatamodel[field] = convertDate(dateVar);\r\n                            else\r\n                                virtualDatamodel[field] = \"\";\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else if (colDefs != '' && type == 'grid') {\r\n                var field = colDefs.field;\r\n                var fieldVal = field.split('.');\r\n                if (fieldVal.length > 1) {\r\n                    var fieldzeroval = eval('virtualDatamodel.' + fieldVal[0]);\r\n                    if (fieldzeroval !== undefined && fieldzeroval !== null) {\r\n                        var dateVar = eval('virtualDatamodel.' + fieldVal[1]);\r\n                        if (dateVar != undefined & dateVar != '')\r\n                            virtualDatamodel[field] = convertDate(dateVar);\r\n                        else\r\n                            virtualDatamodel[field] = \"\";\r\n                    }\r\n                }\r\n                else {\r\n                    var dateVar = eval('virtualDatamodel.' + fieldVal[0]);\r\n                    if (dateVar != undefined & dateVar != '')\r\n                        virtualDatamodel[field] = convertDate(dateVar);\r\n                    else\r\n                        virtualDatamodel[field] = \"\";\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        function convertDate(dateVar) {\r\n            if (typeof dateVar != 'undefined' && dateVar != null && isNaN(dateVar) && dateVar.indexOf('/Date(') > -1) {\r\n                var res = dateVar.replace(\"/Date(\", \"\");\r\n                var datestring = res.replace(\")/\", \"\");\r\n                var newdate = new Date(parseInt(datestring));\r\n                return new Date(newdate.getFullYear(), newdate.getMonth(), newdate.getDate() + 1);\r\n            }\r\n            else if (typeof dateVar != 'undefined' && dateVar != null && !isNaN(dateVar) && angular.isFunction(dateVar.getFullYear)) {\r\n                \r\n                    var newdate = new Date(dateVar);\r\n                    return new Date(newdate.getFullYear(), newdate.getMonth(), newdate.getDate() + 1);                \r\n            }\r\n            else if (typeof dateVar != 'undefined' && dateVar != null && !isNaN(dateVar)) {\r\n                var newdate = new Date(parseInt(dateVar));\r\n                return new Date(newdate.getFullYear(), newdate.getMonth(), newdate.getDate() + 1);\r\n            }\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular.module('SMART2').service('ScrollTo', [function () {\r\n        var scrollingTopMargin = 0;\n        this.setScrollingTopMargin = function (_scrollingTopMargin) {\r\n            scrollingTopMargin = _scrollingTopMargin;\r\n        }\n        this.perform = function (source, destination, onComplete) {\r\n            try {\r\n                angular.element(source.closest('.modal').length > 0 ? source.closest('.modal') : 'body,html').animate({\r\n                    scrollTop: (source.offset().top - destination.offset().top) + scrollingTopMargin,\r\n\n                }, 400, function () {\r\n                    if (typeof onComplete != \"undefined\") {\r\n                        onComplete();\r\n                    }\r\n                });\r\n            } catch (e) { }\r\n        };\r\n    }]);\r\n})();"],"sourceRoot":"/source/"}