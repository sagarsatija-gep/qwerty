{"version":3,"sources":["materialize.directive.js","smartHeight.directive.js","body.directive.js","ckEditor.directive.js","colorPicker.directive.js","notification.directive.js","onCaptureClick.directive.js","onLoad.directive.js","profilePic.directive.js","progressMeter.directive.js","resizable.directive.js","scrollContent.directive.js","slidingMenu.directive.js","smartAccordion.directive.js","smartAccumulator.directive.js","smartCarousel.directive.js","smartCountdown.directive.js","smartDocSlider.directive.js","smartGlobalLoader.directive.js","smartHierarchy.directive.js","hilitor.library.js","smartLastRepeaterElement.directive.js","smartmaps.directive.js","smartMetadataChips.directive.js","smartRangeSlider.directive.js","smartResize.directive.js","smartRevision.directive.js","smartSavedViewPopup.directive.js","smartSearch.directive.js","smartSelectall.directive.js","smartSort.directive.js","smartTable.directive.js","smartTree.directive.js","stickOnScroll.directive.js","customTab.directive.js","focusonkeypress.directive.js","helper.directive.js","tabbinggroup.directive.js","searchableCube.directive.js","smartBack.directive.js","smartBrowserSniffing.directive.js","smartButton.directive.js","smartCheckBox.directive.js","smartCultureDate.directive.js","smartDragDrop.directive.js","smartDropdown.directive.js","smartErrorFieldHighlighter.directive.js","smartFormWidget.directive.js","smartGrid.directive.js","smartInfotip.directive.js","smartList.directive.js","smartListLookup.directive.js","smartLookup.directive.js","smartMultiselect.directive.js","smartPopUp.directive.js","smartRadio.directive.js","smartReadErrors.directive.js","smartResizeableSidebar.directive.js","smartScroll.directive.js","smartPlaceholder.directive.js","smartSection.directive.js","smartSelect.directive.js","smartShowFieldAsOptional.directive.js","smartStickyHeader.directive.js","smartSubSection.directive.js","smartSwitch.directive.js","smartTabs.directive.js","smartCharacterRestrict.directive.js","smartTextfield.directive.js","autocomplete.library.js","smartTimeline.directive.js","smartTooltip.directive.js","smartTypeahead.directive.js","smartUiGrid.directive.js","smartUiTable.directive.js","trackStatus.directive.js","uigridCompatible.directive.js","directives.min.js"],"names":["sideNavFunc","scope","menuwidth","closeonclick","link","element","attrs","sideNav","menuWidth","angular","isDefined","undefined","edge","sidenav","closeOnClick","tabsFunc","tabs","dropdownFunc","$compile","$timeout","inDuration","outDuration","constrainWidth","hover","alignment","gutter","belowOrigin","dropdownCode","contents","attr","dropdown","constrain_width","$on","e","obj","ddname","trigger","inputDateFunc","style","$","append","dateFormat","token","timezone","timezoneClip","pad","val","len","String","length","date","mask","utc","dF","arguments","Object","prototype","toString","call","test","Date","isNaN","SyntaxError","masks","slice","_","d","D","m","y","H","M","s","L","o","getTimezoneOffset","flags","dd","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","Math","round","t","tt","T","TT","Z","match","pop","replace","floor","abs","S","$0","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","format","this","isValidDate","getTime","require","container","formatSubmit","monthsFull","monthsShort","weekdaysFull","weekdaysLetter","firstDay","disable","today","clear","close","selectYears","onStart","onRender","onOpen","onClose","onSet","onStop","ngReadonly","max","min","ngModelCtrl","$formatters","unshift","modelValue","$eval","pickadateInput","pickadate","picker","$watch","newMax","maxDate","set","newMin","minDate","modal","restrict","templateUrl","title","modalCounter","setTimeout","leanModal","template","slideToggleFunc","controller","$scope","bind","$slideBox","slideToggle","slideDuration","parseInt","slideToggleDuration","stop","collapsibleFunc","collapsible","smartHeightFun","normalizeNumber","v","NaN","Number","indecOf","each","outerHeight","get","returnVal","attribute","r","window","config","relativeTo","plusThis","minusThis","height","p","innerHeight","css","module","directive","elem","_wheelDelta","a","originalEvent","wheelDelta","deltaY","IEscroll","event","target","closest","dy","evDelta","preventDefault","currentScrollPosition","pageYOffset","scrollTop","navigator","appName","userAgent","browser","msie","APPCONSTANTS","elm","ngModel","update","updateModel","$setViewValue","ckeditor","getData","lang","userPreferences","UserBasicDetails","Culture","CKEDITOR","toolbar","language","on","setData","$viewValue","$render","value","removeAllListeners","remove","$parse","transclude","onSelect","$colorPicker","find","color","$apply","$event","colorpicker","showOn","history","stopImmediatePropagation","$observe","factory","Obj","show","onCallback","callback","notify","broadcastItem","resultCallBack","result","isFunction","$rootScope","notification","$translate","$sce","$focusOnField","browserSniffing","showN","getStatus","mdlName","i","multipleCheckList","model","modelName","isCheck","cleanUpNotificationPopup","notifyClass","buttons","topPositionBeforeModalOpen","isChrome","indexOf","reset","off","onWindowKeyUp","document","keyCode","focus","type","dismissible","instant","icon","titleTextColor","onChange","remindMeDate","$digest","message","trustAsHtml","checkboxText","checkMessage","customTemplate","modalType","preSelected","disableBtn","isCheckSelect","$firstField","removeAttr","bindforTab","overlayCLicked","onChangeNotification","cnt","isMandatory","enableOn","clickCallbackFunction","responceObj","$broadcast","compile","fn","onCaptureClick","addEventListener","onLoadCallback","isProfilePicEditable","isUserProfile","circular","editable","dummyimg","imgsrc","readURL","input","files","reader","FileReader","onload","addClass","readAsDataURL","profilePicEdit","click","clearProfilePicEdit","confi","responce","prev","toggleClass","hasClass","removeClass","dummySrc","isDeleted","percent","getMeter","c","PI","pct","strokeStyle","stroke-dashoffset","unbindPercent","newVal","oldVal","handle","onresize","onstart","onstop","resizable","handles","resize","ui","start","maxheight","minheight","maxwidth","minwidth","alsoResizeRevert","alsoResize","$window","pageHeight","fixedSubHeader","console","log","$filter","scrollPosition","$attrs","getEnableScroll","foundItem","currentUrl","location","hash","performScroll","scroll","windowScrollTop","scrollY","RuleEngine","right","top","detachDefaultClass","includeTemplate","modifyParentStyle","tabData","$element","getModel","JSON","parse","logoutSession","requestClicked","navCircle","toLowerCase","slidingMenuId","rightPos","leftPos","innerWidth","newValue","oldValue","parent","width","outerWidth","transform","accEvents","isOpen","accordian","data","showHideAccordian","_this","_isOpen","content","slideDown","slideUp","hide","b","options","isSearch","leftLoader","rightLoader","modelCount","optionCount","columnMappingError","selectionCallback","searchCallback","maxLimit","scrollEndRightCallback","scrollEndLeftCallback","generateKey","getProperty","getKey","addedKeys","addKeys","label","iconInfo","accumulatorHeight","accumulatorLeftScrollHeight","loaderFlag","plain","center","left","focusAccumulatorSearch","isAccumulatorSearchActive","showAccumulatorSearch","accumulatorSearchModel","hideAccumulatorSearchClose","hideAcccumulatorSearch","leftCheckedCount","$data","text","smartScrollLeftEnd","smartScrollRightEnd","focusRightAccumulatorSearch","isRightAccumulatorSearchActive","showRightAccumulatorSearch","hideRightAccumulatorSearchClose","hideRightAcccumulatorSearch","searchTextKeyUpFn","rightCheckedCount","leftBoxListCheck","arg","isChecked","isDisabled","$$hashKey","rightBoxListCheck","newOptions","isGroup","j","group","optionKey","moveRight","accData","selectedOptions","push","index","splice","direction","moveLeft","newModel","accumulatorRightSearchModel","rightLoaderUpdate","leftLoaderUpdate","apiObj","carouselArr","arrowClick","getItem","marginToChange","dimensionToChange","textAlign","stepSize","scrollBarClass","classes","arrowClass","arrow","id","internalAPIObj","item","getClickedItem","animate","resetUI","availableLength","addAnimation","collectionEle","children","items","showArrow","$interval","timeoutCallback","timer","days","hours","minutes","seconds","timerObj","cancel","from","diff","onHide","commonSelectedOptionInside","slideObj","src","list","updateTheIndexInController","nextIndex","copy","prevIndex","listLength","tabbingFocus","ngShow","activeElement","firstFieldFocused","next","$fistField","first","funcOnKeyDown","startRequest","requestCount","endRequest","toState","toParams","fromState","fromParams","pageLoaderFlagController","request","requestError","response","responseError","$httpProvider","interceptors","isFixed","onCancel","conf","extend","bgwhite","messageArray","split","widthCount","querySelector","heightCount","leftTopCount","cancelBtn","isCancel","cancelCallback","hierarchyCounter","RESTApi","$q","setKeysAsPerNavigationContext","mode","nodeExpandingCodeProperty","dataProperty","levelWiseDataProperty","searchProperty","codeProperty","titleProperty","levelProperty","parentProperty","modelProperty","resetDataSourcesAndPromises","isPromiseInit","levelWiseData","categories","lazyLoadMarker","isLoading","isError","selectedData","getUserSelectionArray","totalSelection","totalID","totalName","initializePromise","init","initSelectallModel","noRecordsFound","selectionAndCountOptions","isPartiallySelected","treeConfig","isReadOnly","sn","selectedNodes","selectAllToggle","requestParameter","requestObject","isInitialServiceCalled","navContext","respData","action","status","isLazyLoadServerData","setLevelWiseDataSource","createLevelWiseDataSet","sortBy","isShowSelected","renderLevels","createSelectedModelIfRecieved","dataRecievedCallPromise","resolve","treeType","treeTypeObject","LevelAt","PageNumber","PageSize","lazyLoadingBucket","getLeafNodeWithParentHierarchy","levelKey","dataRievedPromiseBool","preselectionRecievedPromiseBool","preselectionRecievedPromise","promises","defer","promise","all","then","promiseResolved","initatePreSelection","dataSet","level","parentNodes","insertParentHierarchyForFlatStrucure","instance","map","groupBy","union","doc","grouped","maxLevel","to","levelDataIndex","ChildCount","fetchedData","childForParent","node","parentStringConstant","parentCodeStringConstant","nodeSelection","selection","isNodeSelected","IsSelected","getSelectionState","n","baseLevelExpectNode","getStateForNode","expandNode","Level","isArray","concat","setLevelWiseData","parentSelection","dIsSelected","resetSelectionState","_node","selectNode","preselection","preselectionNode","searchLevel","foundNode","getNodesFromServer","bucket","pageIndex","childLoading","reqPayLoad","responseData","getRequestedDataFromCache","childSearchLevel","startIndex","bucketData","getChildsForParentAsPerBucket","cachedDataSet","lazyLoadLevelWiseData","markerNode","parentSearchLevel","markerNodeParent","createTreeStructure","searchAsPerBucketSize","searchStr","isMaintainSearchPointer","searchString","searchDataYetToBeDisplayed","searchWithContainsHitResult","searchResults","searchData","getDataAsPerBucketSize","cancelTout","getOffsetSearchData","partitionedData","partition","getOffsetSearchDataForContainsSearch","offsetSearchData","filter","containsSarchResult","RegExp","compact","join","qumulativeData","containsSearchDataToBeAppended","closeChildsForParent","childs","childNode","isExpanded","child","removeMarkerForParent","childMarkers","difference","updateSelectionObject","selectionState","updateUserSelection","updateParentForNode","recursive","depthLevel","immediateParentCode","disabled","parentCode","groupByData","childCount","selectedChild","partiallySelectedChild","isSingleSelect","uniq","key","updateChildsForNode","parentCodesofNode","codeProp","updateChildsForSelectedData","searchHits","hits","getSearchDataFromServer","searchBucket","searchVal","isLazyLoad","serverSearchVal","searchResultPageNumber","isLazyLoadingNode","lazyLoading","ongoingService","abort","SearchText","searchFieldVal","createModelForSearchData","searchList","searchDataCollection","searchDataHierarchy","sortedLevelSearchedData","searchHitNode","parentString","parentCodeString","getSelectionFromLevelWiseData","resetSelectionForSearchNodes","searchNode","groupedLevelData","isPresentInInternalHierarchy","retVal","completeModelFromServerIfNeeded","parentHierarchy","updateSelectionInDataSource","reqObj","allResultData","PAS_SearchList","levelData","setExport","useAs","_export","cancelTitle","checkCondForTemplate","a_data","boolTemplate","templateCheck2","a_category","secondaryLinkCallback","secondaryLink","isSelectedOnly","hasOwnProperty","modalButtonShow","listIcon","doneCallback","refreshConfig","newData","resetValue","isRadio","uniqueRadioGroupName","uniqueIDGenerator","clearCache","navigationContext","searchCategories","selectAllBool","showSelectAll","showClearSelection","showSelectionCount","enableLastLevelSelection","deregisterConfigSelection","getSelections","deregReqContactCode","setContactCode","deregReqParam","setDocumentId","documentCode","contactCode","setUserContext","userExecutionContext","setEnvironment","URLs","AppURL","setRequestObject","setUrl","url","selectOptions","code","name","selectType","lazyLoadOffset","onSelectTypeChange","clearAllSelection","deregConfigData","deregSelectedNodes","closeButton","cancelButton","doneButton","resetButton","editButton","getSelectAllBool","doneClickHandler","cancelTimer","searchText","isService","toutCancel","searchAndSelectNode","filterTextTimeout","selectAll","byPassIsLazyLoadCheck","siblingNods","cancelToutOnScroll","uniqueID","random","position","lazyLoadLen","markerNodeSelect","getBoundingClientRect","scrollEndTout","scrollEnd","massageSelectedData","newtotalID","newtotalName","without","tCancel","outPutObject","selections","hierarchyCollection","parentTraversalArray","parentNode","found","clone","getHierarchyOnSelection","getUserSelection","getAllLazyLoadedData","isActive","hideSearch","focusSearch","showMe","showSearch","hideClose","editCallback","exportLen","ex","attributes","prop","hilitor","Hilitor","apply","service","$http","createRequest","isOverrideInputPayload","contactPasMappingMethod","getPasDetailsMethod","inputParameterKey","getParentForNodeUrl","bpcCode","EncryptedBPC","baseUrl","propmiseForThisInstance","headers","Content-Type","UserExecutionContext","method","timeout","ContactCode","DocumentCode","documenttype","userRestrictCategoryTree","where","CommonSettings","lstSettings","FieldName","FieldValue","documentId","customeURL","requestObjectToBeExtended","serviceCall","req","dataFoundOnIndex","Callback","callbackTracker","isEqual","error","OrderData","RequisitionData","ProcurementProfileData","InvoiceData","IRData","newURL","reqParam","isEmpty","stringify","exports","w","Error","define","amd","tag","targetNode","getElementById","body","hiliteTag","skipTags","colors","wordColor","colorIdx","matchRegex","openLeft","openRight","onFinish","onDoOne","setMatchType","setRegex","re","getRegex","retval","hiliteWords","nodeName","className","hasChildNodes","childNodes","nodeType","nv","nodeValue","regs","exec","createElement","appendChild","createTextNode","backgroundColor","fontStyle","after","splitText","substring","insertBefore","arr","querySelectorAll","el","replaceChild","firstChild","normalize","rv","callbackOnItem","$emit","$last","$templateRequest","infoWindowStyle","iwOuter","iwBackground","$infoWin","visibility","overflow","display","z-index","mapGeocodeFn","mapDataLeng","addressData","countryInfo","CountryCode","state","zipcode","geocoder","geocode","componentRestrictions","country","postalCode","results","google","maps","GeocoderStatus","OK","img","marker","Marker","LatLng","geometry","lat","lng","locations","baseImgUrl","setMap","markers","markerCluster","addMarkers","addListener","infowindow","open","latlngbounds","fitBounds","dataGeoDataTemp","dataGeoData","viewSwitcherFlag","flag","multiChoice","mc","locationClusterMarker","cluster_","clusterDom","div_","data-activates","data-stoppropagation","$dropBtn","locationsOpt","mapLoaded","viewSwitcher","myLatLng","mapOptions","maxZoom","minZoom","streetViewControl","mapTypeControl","mapTypeId","MapTypeId","ROADMAP","styles","elementType","stylers","font-weight","featureType","Map","mcOptions","gridSize","imagePath","InfoWindow","maxWidth","LatLngBounds","locData","MarkerClusterer","styles_","forEach","ind","textColor","onClickZoom","Geocoder","unbindWatch","reinit","clearMarkers","refresh","zoom","getZoom","setZoom","dataOption","clusterListFn","setPosition","$locationCardDropdown","linker","getTrustedResourceUrl","infoTemplateURL","setContent","addDomListener","debouncer","smartmetadata","metadatatitle","maxlength","callBack","fieldClass","itemTotal","fieldkey","showMoreChips","optionId","add","$chipsActiceContainer","targetScope","$parent","transition","background","metadataAdd","$e","fieldKey","isString","displayfield","trim","isfocus","metadataCheck","charReqKey","char","which","charReq","charReqLength","currentTarget","blur","beforeDelete","deleteCallback","success","reject","chipData","metadataDelete","smartmetachipTitleClick","metadataShowMore","cont","metadataLessMore","uiSliderConfig","preLink","parseNumber","decimals","parseFloat","destroy","slider","directiveOptions","uiSlider","prevRangeValues","properties","useDecimals","isUndefined","updateOn","range","warn","property","noop","valuesChanged","values","boundedValues","lowerBound","upperBound","boundedValue","Array","valueArr","tipElm","one","postLink","total","appendTo","pre","post","smartResizeDir","addArguments","resizeElement","initHandlers","size","previousSize","callbacks","onResize","onHeightChange","onWidthChange","resizeSensorCss","sensorCss","sensorElementCss","html","PD","PDC","mainSensor","sensor","scrollLeft","resizeSensor","setting","defaultConfig","jQuery","smartRevisionDir","oldData","align","changes","imgDimention","treeCallback","image","normal","defaultDimention","tree","treemode","multiRows","ismultiRows","constructor","isChanged","oldDataHtml","newDataHtml","wrap","diagonal","diagonalWidth","calculateRectdiagonal","popup","treeChange","sqrt","smartSavedViewPopupFunc","cacheHelperService","smartSavedViewPopupCollection","loader","isApplyFilters","isSavedView","isSavedViewModified","openPopupSavedView","api","setTitle","callbackFunc","keepPopupOpen","cancelBubble","stopPropagation","isNameDuplicate","editedSavedName","duplicateName","greaterThanMaxCharacterLength","viewNameLength","showAlertMessage","alertMessage","SaveResetOrMarkAsDefault","currentViewApplied","rowKey","moduleName","removeDefaultFilter","isDefault","MarkasDefault","view","selectedFilter","isMarkAsDefault","check","errorCallback","statusText","ViewId","ViewName","ColumnList","Filters","SortColumn","SortOrder","GroupColumn","IsDefaultView","IsSystemDefault","DocumentTypeCode","UpdateSavedViewURL","updateMessage","popupInc","disableDoneButton","uncheckMarkAsDefault","handleDoneButtonVisibility","isDefaultSelected","defaultCheckUncheck","handleMarkAsDefault","isDefaultTxt","setDefaultFiler","isDefaultTrue","showSavedViewPopup","showSaveView","radioChangeCallback","currentItem","currentDefault","showSavedView","currentCheck","isSavedFilter","setFilterDef","selectedSavedview","selectedFilterView","applyViewOnGrid","currOperation","Reset","sysDefault","SystemAsDefault","msg","deleteItem","alterView","getDefaultSavedView","deletedView","deleteSavedViewURL","savedViewId","showEditor","editCurrentViewName","showCurrentItemEditor","getEditedviewName","isFocus","updateViewName","closeEditPanel","editedName","duplicateItem","duplicateErrorMessage","maxCharacterLength","validate","viewObject","SaveViewName","saveCurrentView","passData","insertSavedViewURL","getColDef","getFilterDef","getGroupDef","documentTypeCode","showPopUp","search_data","search_savedpopup","lowerStr","collection","x","httpService","setAllowedModuleListData","modules","Output","orderIndex","FilterKey","quickSearchItem","selectedModule","advancedSearchDocTypes","AdvancedSearchDocTypes","scopeValues","RFX","string","SubAppCodes","RFP","RFQ","RFI","Auction","Contract","Catalog","Requisition","PO","Order","Invoice","Receipts","Forms","Scorecards","Workbench","InvoiceReconciliation","Items","Templates","Partners","ContractRequest","RFxRequest","AuctionRequest","PaymentRequest","Project","CreditMemo","ReturnNote","ActionPlan","Blanket","CategoryWorkbench","ProjectDashboard","getCurrentModuleScope","selectedModules","moduleScopeString","lastChar","getSearchNavigateURL","moduleScope","redirectURL","generateUrl","getScopeFromModuleType","moduleType","array","makeArray","getModuleTypeFromScope","IsAdvanceSearchEnabled","productsArray","getAdvanceSearchEnabledProducts","searchConstants","portalURL","documentTypeCodes","encryptedBPC","catalogQueryString","orderQueryString","invoiceQueryString","receiptQueryString","requisitionQueryString","invoiceReconcillationQueryString","creditMemoQuerystring","blanketQueryString","categoryWorkbenchQueryString","partnersQueryString","formQueryString","assessmentQueryString","workBenchQueryString","rfxQueryString","auctionQueryString","actionPlanQueryString","contractQueryString","returnNoteQuerystring","projectQueryString","IsSupplier","lastSearchedText","constantURLAndQueryStringValue","AreaName","directhttp","errorData","BuyerPartnerCode","allowedModulesList","onModuleClick","showFilterList","recentSearches","searchResult","getRecentSearches","showRecentSearches","isRecentSearchesLoading","IsAllMenu","FieldKey","RecentSearches","onSearchTextChange","href","showSearchResult","isSearchResultLoading","getSearchResults","Sequence","searchKeyword","DataSearchResult","GroupTotal","TotalCount","onSearchTextFocus","onRecentSearchItemClick","getTranslatedLabel","onDocumentClick","smartSelectallFun","initCheckbox","initCheckboxItem","allCheckbox","selector","unbind","change","selected","getCheckboxInfo","getInfo","resetConfig","scopeData","getScope","scopeDeep","checkerFlag","$applyAsync","deep","checkboxSelector","disableFlag","disableStyle","sc","mainCheckbox","__selectallExoprt","selectall","_scope","eval","$watchCollection","sortReverse","currentCell","iconWithTooltip","sortbyIcon","tooltip","ascDescToggler","isRegionalSettingEnabled","RegionalSettingEnable","getObjectValue","keys","shift","getObjectValueForAutoSuggest","setObjectValue","updateCell","isObject","getFormattedData","displayFormat","str","parentSplit","childSplit","k","getDisplayData","evalResult","evaluatedKeysCounter","nullKeysCounter","convertNumberToFixed","number","minPrecision","maxPrecision","arrTmpInputValue","tmpStrAfterPrecision","sortSmartTableData","column","isAscending","translate","sort","strOne","field","strTwo","intOne","intTwo","enableTranslation","app","onmousedown","isSmartTableCellClicked","lastActiveCellScope","stopEdit","focusHandler","strLength","setSelectionRange","onkeydown","is","onElementKeyDown","smartTableUtils","isParentRowToBeDisplayed","filters","$$treeLevel","filterKey","filterText","getChildrenNodes","nodeIndex","tmpRows","row","$$nodeIndex","sortState","enableTreeView","showTreeView","offset","limit","useExternalPagination","smartTableId","outputData","parentIndex","$$enableTreeView","$$index","$$parentIndex","$$isExpanded","$$isSelectable","cellValue","keysMatchCounter","colDef","condition","arrParentNodes","order","arrOrderedData","broadcast","totalRecords","currentPageDataLength","$templateCache","smartTable","setFilterText","smartTableConfig","columnDefs","filterDef","totalPages","apis","areEventListenersAdded","arrSelectedRowsIndexes","recordsFetchedCount","isStatePageIndexSet","sortOrder","enableRowSelection","arrRowsPerPageOptions","rowsPerPage","listeners","addEventListeners","core","getActiveColumns","getColDefs","notifyColumnChange","notifyRowDataChange","rowIndex","notifyDataChange","isToBeRefreshed","onRefresh","pagination","nextButtonClick","scopeRef","onNextButtonClick","previousButtonClick","onPreviousButtonClick","onSort","onFilter","setDataLength","totalItemsCount","displayedRecords","setOffset","setLimit","getOffset","getRowsPerPage","columnRefresh","onColumnRefresh","cell","onCellClick","onCellChange","optionsChange","onOptionsChange","optionSelect","onOptionSelect","cellNav","scrollToFocus","colField","columnIndex","toBeFocused","colDefs","pendingFocus","updatePagination","pinnedColumns","unpinnedColumns","getSelection","removeAllRanges","edit","beginCellEdit","onBeginCellEdit","endCellEdit","onEndCellEdit","afterCellEdit","onAfterCellEdit","saveState","save","columnsState","tmpColDefs","getReOrderedColumnDefsForState","displayKey","displayName","visible","columns","paginationCurrentPage","paginationPageSize","timestamp","documentURL","isSmartTable","restore","showFilters","getReOrderedColumnDefs","ceil","refreshColumns","clearSelectedRows","$$isSelected","isAllRowSelected","getSelectedRows","tmpRow","tmpSelectedRows","arrDeletedIndexes","entity","rowSelectionChanged","onRowSelectedChanged","onRegister","onSmartTableConfigChange","newConfig","getColumnDef","srcConfig","getColumFilterText","reOrderedColumns","pinnedLeft","pinnedContainerWidth","updateSmartTableColumnResizer","updateSmartTableColumnSorter","eventType","isRowSelectionEnabled","isNextButtonClicked","isRefresh","onRowsPerPageOptionChange","filterData","sortData","debounce","sortCondition","selectRow","shouldSelectedAllRows","isSelected","expandRow","shouldExpandAllRows","isAllRowExpanded","onColumnSort","endIndex","activeColDefs","startCol","endCol","onColumnResize","colToBeResized","watchers","onSmartTableRenderingStart","$$watchers","onSmartTableRenderingDone","onPageIndexChanged","onSmartTableCurrentPageDataLength","newLength","arrEvents","eventCounter","removeEventListener","eventName","eventId","objEvent","functionTimeout","isAngularTimeout","duration","isDigestCycleToBeTriggered","clearTimeout","onColumnConfigChange","isMouseDown","canBeResized","resizer","newWidth","leftPosLimit","onMouseMove","clientX","offsetX","onMouseUp","onMouseDown","border","bindEvents","not","startX","isPinnedColumn","mouseDownTimeout","th","$this","triggerTaxesPopup","isPopupOpenedByUIGridCompatibleElement","smartTableScope","cellClick","triggerAdhocPopup","triggerSupplierCardPopup","tabIndex","oldCellValue","oldCellClass","tmpCellValue","tmpInputValue","tmpValueForAutoSuggest","selectedOption","selectedDate","templateContainer","onPopupOpened","onPopupClosed","isInEditMode","cellClassElement","hasStopEditCalled","isInputFieldFocused","isRenderingToBeSkipped","isFocusToBeSkipped","onCellDataAndColDefChange","$watchGroup","$index","isRowDataUpdated","toBeTranslated","uiType","moment","localeData","longDateFormat","enableCellEdit","hasSmartTableRenderingStarted","pinned","autoIncrement","displayformat","COL_FIELD","cellClass","tmpClass","iconTemplate","cellEditableCondition","col","grid","rows","cellElement","updateCellTemplate","updateDate","tmpDate","unix","isRegUpdateCol","cellChange","addPopupListeners","oldCellModel","newCellModel","updateCellValueForPopup","equals","removePopupListeners","toBeFiltered","cellTemplate","isNumber","minmaxprecisionfilter","substr","adhocpopup","mousedown","supplierCardPopup","RequisitionSource","Changereq","IsAddedFromRequistion","placeHolder","isTaxExempt","taxExempt","getEditableTemplate","toUpperCase","dataKey","idKey","lastKeyPressed","isRegClickCol","shiftKey","cellIndexFocus","isFreeText","autoNumeric","tmpPreviousSelectedDropdownObj","arrDecimalSplits","isWindowClickFired","devbridgeAutocomplete","dispose","daterangepicker","empty","onFocus","inputvalue","tmpVal","mDec","MaxPrecessionValue","filterKeys","filterkeys","optionFormat","optionformat","serviceObj","populateListOnFocus","params","param","CallbackObj","resp","isFlatArray","mapperObj","mapper","mapperstri","mapperkey","res","staticValues","setLookup","lookup","minChars","suggestion","option","triggerKeyUpOnfocus","tmpEvent","Event","singleDatePicker","showDropdowns","locale","autoUpdateInput","startDate","endDate","lastActiveCell","onFocusCell","onRowDataChange","onDataChange","header","toggle","disableLevelSelection","isInitServiceCall","showPopupBool","initServiceCall","SelectedNodes","hideCallback","selectCalback","IsRadio","onDoneCallback","onPopupHideCallback","RESTApiSt","Common","onDone","RESTApiStCallback","GetPASForDeviceMobResult","parentId","templateId","entityDetailCode","ACEntityId","entityId","EntityId","getHilitor","setTop","setZindex","onScroll","setLeft","setRight","$id","newElement","elemHeight","winScrollTop","stickLimit","applyClassOnFixed","tabbingOnKeyDown","tabType","prevFocus","bindKeyEventFunction","focusInfunc","firstFieldFocus","focusOutfunc","altkey","focusin","altKey","focusout","checkAttr","svgIcon","$set","menuListItemServ","firstField","focusableEle","avoidFocusableEle","$lastField","last","cubeletList","enableProceed","selectedCube","formatKey","camera","THREE","PerspectiveCamera","scene","Scene","lookAt","AmbientLight","light","SpotLight","castShadow","shadow","LightShadow","bias","mapSize","generateThreeByThree","generateTwoByTwo","cubletWidth","cubeSeparation","positionsArrayThreeByThree","positionsArrayTwoByTwo","BoxGeometry","object","Mesh","MeshLambertMaterial","transparent","opacity","z","scale","dataID","receiveShadow","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","PCFShadowMap","soft","domElement","onDocumentMouseDown","onWindowResize","keyPressed","handleRotation","animateRotation","xDirection","yDirection","zDirection","tween","TWEEN","Tween","prePositon","X","Y","easing","Easing","Quadratic","InOut","onUpdate","animationComplete","deltaRotationQuaternion","Quaternion","setFromEuler","Euler","quaternion","multiplyQuaternions","onComplete","aspect","updateProjectionMatrix","requestAnimationFrame","render","onDocumentMouseMove","onDocumentMouseUp","mouseDown","startPoint","clientY","rotateStartPoint","rotateEndPoint","projectOnTrackball","canvasMouseMove","mouse","mousemoved","deltaX","handleRotationMouse","lastMoveTimestamp","highlightCublet","previousInt","moveReleaseTimeDelta","vector","Vector3","unproject","ray","Raycaster","sub","intersects","intersectObjects","selectedCublet","popInCube","INTERSECTED","popOutCube","touchX","touchY","mouseOnBall","clamp","windowHalfX","windowHalfY","rotateMatrix","rotateStart","rotateEnd","angle","axis","acos","dot","crossVectors","rotationSpeed","setFromAxisAngle","drag","minDelta","animateFindElementRotation","anglex","angley","anglez","requestedID","currentAngles","rotation","animateCubePopup","material","setHex","currentHex","hovered","fromSerach","$mainScreen","intersect","getIntersect","getHex","cublet","select","sign","proceed","currentSelection","curQuaternion","Vector2","Group","btnType","routeToReport","searchElementByValue","findIndex","charAt","searchElement","rotateQuaternion","setRotationFromQuaternion","jqdiv","pos","projScreenMat","Matrix4","multiply","projectionMatrix","matrixWorldInverse","multiplyVector3","persistenceService","nPlusOne","historyIsEmpty","goBackClick","redirectToPreviousNode","tem","ua","appVersion","favoriteOps","showSniffing","image960","ContentURL","image1920","iconIE","iconChrome","execBrowserSniffing","Screen960","Screen1920","isShowSniffer","getSnifferFlag","sniffTemplateUrl","isTrue","hideSniffingOverlay","setSnifferFlag","browserDetail","remindOptions","unsupportedBrowserVersion","isMultipleCheck","checkContext","unsupportedBrowser","standalone","mobile","onClick","fabConfig","flat","callbackParams","buttonType","isFloating","floating","isLarge","large","clickCallback","goBack","styleClass","checkboxCounter","ScrollTo","ngModelResolve","isVisible","minHeight","fill","rules","parentElement","errorMessage","removable","showTooltip","tooltipPosition","showinfo","checkBoxId","isRemovable","checkboxEle","$modelValue","updateView","perform","onValidate","validateRules","isFoundInvalid","isValid","ngChange","resolveFun","checked","monthAbr","january","february","march","april","may","june","july","august","september","october","november","december","culture","enableShortMonth","extendTheLibrary","isLibraryExtended","UserCountryCultureInfo","tempCulture","Globalize","thousandSep","numberFormat","currency","decimalSep","cultureCode","_language","_locale","_longDateFormat","defaults","aSep","aDec","vMin","NEGATIVE_INFINITY","vMax","POSITIVE_INFINITY","aPad","matchExpression","formatedModel","formatNumber","formatDate","showTime","LL","abr","search","onDrag","sortable","placeholder","helper","connectWith","containment","tolerance","isOverflowHidden","dragging","swipItem","sender","whileSorting","ele","main_width","ew","elft","rpos","isDraggable","stopProg","autoClose","islistDropdown","keycodeis","dropDownMenuListItem","dropdownContent","liList","liLength","eq","hideOnTabOut","lastOpenedDropdownConfig","activates","origin","clrTout","_element","closeDDButtons","singleElementDropdown","ddCloseOff","_elem","hideDropDown","fixed","$t","clrTout1","ddCnt","$tOffsetTop","$tOffsetLeft","lastScrollPosition","newScrollPosition","ddHgt","winHgt","diffHgt","clientOffsetHgt","tOut2","ddCntTop","ddCntLeft","onShow","fadeOut","end","errorConfig","otherMandetoryFields","formWidgetCounter","formWidgetUtils","formConfig","modelData","isSequential","showWidget","searchHolder","widgetPanelTop","widgetPanelRight","onSectionSort","onSave","revisionMode","secNav","filterWith","initSectionsLoadedWatcher","SectionLoaderInitiated","sections","unbindSectionsLoadedWathcer","loadedCompletely","isLazyLoadEnabled","initSectionFocus","seclectedSectionId","getSelectedSection","seclectedSectionIndex","sectionItemClicked","mySection","sectionTrackerItems","currentSelectedSection","isSectionsLoaded","formWidgetId","getOpenWidgetSection","a_id","returnItem","indx","tmpObj","isCheckSecnav","onDocumentScroll","isCheckWidget","scrollWitgetsection","masterPersistenceService","getMasterDataForRootField","widgetPanelRightPos","addRemoveSection","visibleSectionTrackerItemsCount","thumbnailsWrapHeightTemp","secnavIndex","thumbnailsWrapHeight","staticTopmargin","enableFieldPreview","updateVisibleSectionTrackerItemsCount","count","tItem","hidden","onSubHeaderHeight","setScrollingTopMargin","isFormWidgetToBeLoaded","toutPromise","checkPresistence","getPresistence","documentType","getUserData","sectionPersistence","getSectionsPersistence","userData","modelDataWatcherEnabledOrNot","initModelDataWatcher","unbindModelDataWatcher","getModelData","initChipsWatcher","persistenceTimeout","saveRecentDocument","formWidgetTimeout","fixedElemHeight","onFormConfig","oldConfig","sectionItems","optionalSections","optionalFieldsAndSections","sectionLen","tSection","convertAndGetValue","isHidden","sectionKey","sectionId","isOptionalSection","sectionIndex","mandatoryFieldStatus","sectionTLength","ij","searchLabel","isSection","sectionOptionalFields","rowsLength","trowsData","propertyLen","tProperty","sectionLabel","propertyIndex","optionalFields","draggableWidth","restrictWidth","secnavcontainerExpandWidth","$panelExp","draggable","$secNavCont","secnavHeightCal","$secNavContList","$thumbnailswrap","secNavUlHeight","$secNavSelector","selectedLiIndex","formWidgetTop","$fixedElem","$subHeaderFixedContainer","$formWidgetElem","$secnavchevroicon","trackerItemsLen","$cardParent","offsetLi","offsetLiHeight","newSelected","saveSelectedSection","checkSubheaderHeight","subheaderHeight","activeItem","onSectionItemClick","sectionNumber","sectionTrackerLength","Selectedsection","onOptionalSectionItemClick","isLabelClicked","trackerTLen","tmpSection","itemVisible","tempTOut","onOptionalFieldClick","showWidgetPanel","toggleWidgetPanel","formConfigAfterSort","trackerSortLen","sectionsList","section","updateUserData","saveUserData","$sectionCont","sectionList","sectionListitem","$thumbnailsCont","thumbnailsList","thumbnailsListitem","thumbNodes","previousClickedSection","openedSec","onSectionClick","tlenTracker","onSectionHeaderClick","onHeaderClick","generateFunctionWithParams","isContentLoaded","$itemSelected","displacementItem","prevKeyLen","prevObj","sectionDatastore","iconClasses","formWidgetItemClasses","smartSvgIcon","phrase","gridConfig","currencyFormatter","amountarg","symbol","zeroprecision","defaultCurrency","amount","toFixed","formattedAmount","shortamount","numberFormatter","headerTemplate","rowTemplate","headerData","rowData","cellRenderer","headerCellRenderer","rowHeight","cellStyle","dimension","gridHeight","cellWidth","datamappingkey","suppressSorting","formatterType","clickable","columnValue","titleValue","tmpRowData","angularGridConfig","onNewRows","enableSorting","angularCompileRows","virtualPaging","enableColResize","angularCompileHeaders","cellClicked","dataMappingKey","_lastOpenInfotip","hideLastInfotip","hObj","infotip","_ev","evt","triangle_height","triangle_diagonal","popover_container","popover_container_parent","popover","triangle","triangle_div_side","triangle_rect_div_side","infotipElement","getPosition","$win","bindOn","closeOnMouseleave","hideOnDocHover","getContentPopover","isTemplateUrl","getTriangleClass","hideTooltip","onHoverablearea","triangleClass","parent_width","popover_height","popover_width","parent_height","elementOffsetTop","elementOffsetLeft","templateElement","setDynamicInfotipPosition","getDyanamicPositions","popoverOffset","setInfotipPosition","customStyle","appendInfotipToBody","showFullTip","templateElementBody","commonUtilities","itemClass","displayConfig","listDisplayConfig","showIcon","showAction","importantAttribLimit","listClickHandler","listHeight","dataModel","lazyLoadingCallback","lazyLoadCallback","backToTopCallback","scrolledCallback","scrollInProgress","scrollEndCallback","scrollToTopCallback","actionElementID","callAddNew","lookupOpen","lookupHide","searchtextKeyUp","readonly","multiselect","addnew","titleofmodel","selecttypeoption","generateName","formattedLen","formatedArray","valuetoshow","toolTip","isInfoTipEnable","showInfoTip","checkInfoToolTip","pluck","deregisterWatchModel","totalEl","openLookup","lookupConfig","mutliselect","displayProperties","onKeyUp","titleOfModel","selectTypeOption","defaultselectiontext","defaultSelectionText","optionUpdate","getConfig","setTempModel","tempModel","getTempModel","onScrollEnd","onScrollEndCall","onScrollTop","onScrollTopCall","onScrollInProgress","onScrollInProgressCall","countForTheProprty","isObjectEquals","obj1","obj2","checkObj2","containsObject","catalogObj","UserId","propSeparation","initialize","propKey","multiple","stopInit","isObjectCompareCatalog","ischecked","descriptionKey","description","minMultiselect","checkSelectedItems","itemSelected","limitToCount","isLazyLoadingEnabled","setLoader","showLoader","showSearchLoader","clearModelOnEnter","scrollbarReload","scrollAlwaysTopOnload","scrollReload","cleanData","lookupLoaderConfig","smartScrollEnd","smartScrollTop","smartScrollInProgress","selectdCount","selectTypeOptionWith","stopFilterOnKey","requireLoader","searchCount","triggerFlag","returnObj","isSearchOpen","defaultSelectOption","selectiontext","searchFilterKey","hideSelectedCount","errorModel","defaultError","isLimitmultiselect","searchToggle","closeSearch","ondefaultSelectItem","onChangeItem","isdisable","optionUnSelected","isDefaultMandatory","selectionCancel","selectionDone","UnSelectedResult","callbackOnHide","addNew","multiSelectId","onBlur","datakey","autocomplete","dataLen","parentSplitLen","childSplitLen","childItem","defaultText","disableBlurEvent","labelForMultiSelectId","modelConfig","multiSelectFocus","setDisplayFormat","displayArray","valu","arrayD","arrDLen","currentSelectForDelete","ngKeyDown","evntKeyCode","selectForDelete","isInvalidId","isInvalid","invalidEmailId","checkEmailValidation","currentTextValue","pattern","filteredArray","invalidEmailArray","filteredLen","filterdItem","UserName","ngKeyUp","evtTrgt","defaultWidth","timeIntClear","deleteSelected","elementIndex","onvalidateConfig","ngBlur","checkChipIsDeleted","rulesLen","rulesItem","displayModel","optionsConfig","$evalAsync","interval","$smartModal","$controller","$scoper","ctrl","popupConfig","launchObj","$$smartModal","cleanFloatingElements","autoComplete","triggeredElement","afterCompleteClosePopup","isCancelButton","headerUrl","contentUrl","footerUrl","tOut","expandCollapse","$modal","$modalHeader","$leanOverlay","parents","innerTout1","innerTout2","$popup","openModal","beforeOpen","complete","toutpromise","ready","cancelTOut","$body","$modalUiDragable","bodyHeight","modalHeight","bodyWidth","modalWidth","margin","isPopupInit","closeModal","destroyModal","$view","tOutTemp","associatedOverlay","bLength","sortCn","subScope","initModal","$config","smartpopDir","$destroy","radioGroupId","ngModelCopy","layout","groupId","isNgModelFunction","radioGrouptId","isGap","gap","onNgModel","ruleLen","ruleT","focusElem","a_indx","timeoutPeriodTemp","$invalidDom","invalids","nextDisable","prevDisable","timeoutPeriod","counter","emptyText","leftLabelText","currentManualFocus","isManualFocus","fieldsSelector","customfieldsSelector","onErrorFound","showerrorsPanel","frmWidgetId","onblurEvent","invLen","isWarningHeader","onFocusEvent","currInd","closeErrorHeader","watchSaveClick","noMoreErrors","newLen","disableResize","collapseCallback","scrollCallback","leftPanelWidthCallback","elementWidth","leftPanel","resizableDiv","prepend","getResizableDiv","clickableDiv","minDraggableWidth","minWidth","lowDraggableWidth","lowWidth","midDraggableWidth","midWidth","maxDraggableWidth","UiLeftPosition","UiOriginalPosition","windowWidthBeforeResize","leftPecent","currentwindowWidth","margin-left","queue","originalPosition","marginLeftValue","scrollCounter","scrollBreakPoints","breakPConfig","BCkeys","srElements","bConfig","touchValue","scrollHeight","onBreakPoints","reverse","resizeHeight100P","dateHideOnScroll","dobj","isShowing","$selectDd","lastOpenSelectDD","ls","$scroller","lockScroll","onScrollLockUnlock","st","isFixedHeader","isScrollDate","hideDate","fixedHeader","tableElem","elScrollTop","thElem","tdElems","columnWidth","offsetWidth","tbl","theader","before","scrollid","customConfig","scrollConfig","onScrollToTop","maxScroll","vOffset","hOffset","args","onScrollHEnd","onScrollHToTop","onScrollHInProgress","eleWidth","scrollWidth","scrollTopSourceStorage","$vSource","vSource","$vSourceP","$hSource","hSource","$hSourceP","$vertical","vertical","$verticalP","$horizontal","horizontal","scrollTopSource","scrollTopConnect","lockScrollObser","scrollOnUpdate","handlers","addHandlers","func","_arguments","scrollToElement","scrollToElementName","$scrollToElementName","scrollWrapper","mergedConfig","merge","scrollbar","scrlTop","dir","currScrlTop","use","smartLazyLoad","scrollElement","offsetHeight","activePlaceholder","tmpPlaceholder","getHTMLPlaceholder","onAttributesChange","isPreviewMode","onRemoveButtonClick","onEditableRender","editableScope","editableEle","onStopEdit","setPrecisionLimits","decimalPrecision","minMaxPrecision","tempArr","preDecimal","tempVal","splitPrecision","lowerPrecisionLimit","highPrecisionLimit","postDecimalNumbers","pow","getFormattedDate","dateVal","isSetFromGrid","output","isDateBlank","doesContainDateString","now","tmpModel","decimalprecision","minmaxprecision","displaykey","sectionCounter","parentScope","isCollapsible","isHeader","isSwitchable","onClickSwitchable","infinite","isSwitchFunc","active","isCollapsed","formLoaderConfig","onRowsConfig","rowsLen","propLength","tData","updateOptionalField","optFieldLen","getVisiblePropertiesLength","visiblePropertiesLength","rowsPropLen","tmpPropIndxData","rowsPropLength","optLength","clearMe","expandSection","isActiveTriggered","onIsActive","collapsibleHdr","isClicked","clrTimeout","onSectionHeaderFocus","formwidget","commonAttributes","formDataModel","extendedSectionConfig","isFieldPreviewEnabled","isSectionDisable","parentScopeRef","getAttributesMapping","mapEvents","listener","ngModelMapping","optionsMapping","optionsData","ngModelOptions","getterSetter","areaType","getColspanClass","colspan","showInfo","onKeyDown","onKeyPress","onEnter","onDateChange","onDestroy","isAngular2Enabled","onLoadFunction","onLoad","revisionAttrs","isAngular2AppBootstrapped","angular2App","_destroyed","platformBrowserDynamic","bootstrapModule","moduleRef","smartSelectFunc1","preview","customoption","showwarning","customMessage","isNgModelWatchAdded","typeOfNgModel","selectId","dropDownId","labelVal","customOptionReset","onOptions","optLen","selLabel","isDisabledOpt","firstOption","optionGroups","oldOptLen","groupName","selectTout","material_select","listElOffset","$dropdownDiv","newValueCopy","selectedOptionString","disableTOut","sOption","onDisable","isDisableTout","ruleLength","ch","manual","tmpSelectedOption","smartSelectFunc2","smartSelectService","clienterror","watchOptions","a_options","tmp","watchModel","buildOptionsList","updateLabelTemplate","collectionWatch","watchGrp","clrMe","containerElm","validateElm","buildValidationTemplate","hideShowField","onSelectChange","selectedVal","selectedIndex","buildTemplate","smartSelectServiceFunc","buildOptionalFieldTemplate","optionalField","buildSelectTemplate","elmLabel","buildLabelTemplate","buildInfoTemplate","onChangeCallback","OptionGroups","optHtml","optionLength","isDirectiveV2enabled","stickyElementsObj","stickyElementsHeight","listOfElements","StickyElements","$elem","stickTableHeader","scrollType","topVal","tdSel","columnMap","offsetParent","elScrollTopOriginal","stickyElementHeight","elemforStick","stickyHeader","theadHgt","tbodyHgt","$dummyThead","insertAfter","subsectionId","formModel","onModelData","onNgModelData","rightLabel","leftLabel","additionaltext","leftLbl","rightLbl","tabsId","setTabs","tabHorizontalWidth","totalTabWidth","showTabArrows","tabWrapperWidth","def","showCount","currentTab","tabWidth","tabParent","timeoutCanel","tabPanelHeight","tabId","tabWidthInFloat","remainingWidth","headerStyle","tabConfig","activeTabContent","htmlmode","tTab","tab","isLoaded","selectedTabContentUrl","tabClickCallback","returnObject","previousTab","moveTo","disableNext","disablePrev","transValue","isMovableTabs","tempValue","nextback","getTabsDimensions","goRight","goLeft","valueRegexPassed","keyCheckRe","patternreg","valueCheckRe","validationreg","allowCharacterFlag","allowpaste","inputValue","numRegExp","copiedText","clipboardData","isnum","smartTextFieldFunc","modelOptions","setFromGrid","datanumeric","spinner","step","timePicker","isValueDateObj","prefixicon","suffixicon","timePicker12Hour","minuteIncrement","charactercounter","minchars","loading","noSuggestionNotice","showNoSuggestion","clearListOnFocus","retainDisplayModelAutocomplete","checkIfActive","toUTC","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getGridFormatToTimestamp","stringdate","dateFormate","createDatePicker","setDateFormate","datePar","tempDate","$date","textfieldId","callApplyFuncFlag","timePicker24Hour","timePickerIncrement","pickerObj","autoApply","opens","drops","cancelLabel","applyLabel","wHeight","srTop","move","ev","pickerr","hideAutoOnScroll","autoCompleteField","destroyEverythingElse","labelForTextfieldId","unbindValidate","unbindFocus","unbindOptions","unbindNumber","unbindDateModel","rulesValidationEvent","returnValue","validateOn","checkRule","noTrim","ngFocus","targetedEle","dateModel","splittedDisplayFormat","currentInputValue","ngKeyPress","charCode","textValue","decimalDigit","cc","fromCharCode","escapeChars","showNoSuggestionNotice","unbindNgModel","unbindMin","unbindMax","inputNumber","smartTextField2Func","smartTextFieldService","smartTextField3Service","isTitleVisible","SmartTextField_NumberFunc","onTextChange","updateTextValue","setActiveClass","updateTextFieldClass","prevModel","unbindModelWatcher","unbindAttributesWatcher","smartTextField_TextFunc","SmartTextField_DateFunc","SmartTextField_AutocompleteFunc","smartTextField_NumFunc","smartTextField3Func","onSearch","regionalFormat","smartTextField3_TextFunc","SmartTextField3_DateFunc","SmartTextField3_AutocompleteFunc","smartTextField3_NumFunc","showTitle","setModal","typing","getModal","unbindOtherWatcher","bindOtherWatcher","LT","datetimePicker","applyClientZone","convertIntoUTC","updateDateValue","updateDateClass","assignDateEvents","timeOffset","updatingDateModel","dateObj","timeZoneOffset","adjustTimeZone","zone","dateModifiedbyUser","dateStr","updateAutocompleteValue","elmVal","unbindValidationWatcher","ndisplayFormat","assignAutocompleteEvents","num","MinPrecessionValue","viewTimeout","clearInterval","setInterval","triggerSearchEvent","assignSearchEvents","getSelectedDate","getPreviousDate","setSelectedDate","preDecimalLength","valueToModel","smartTextFieldServiceFunc","wait","immediate","context","later","callNow","elmContainer","lbl","buildPrefixiconTemplate","buildSpinnerTemplate","buildTextFieldTemplate","buildInfoIconTemplate","isNumeric","characterCounter","addClassElem","showLessContent","showMoreContent","modelVal","updateNgModel","updateElement","smartTextField3ServiceFunc","_selectedDate","_previousDate","setPreviousDate","dateLabel","gm","font-size","bottom","tempString","invokeAsap","ctx","throttle","needInvoke","callee","smartCharacterCount","Autocomplete","that","ajaxSettings","autoSelectFirst","serviceUrl","maxHeight","deferRequestBy","formatResult","delimiter","zIndex","noCache","onSearchStart","onSearchComplete","onSearchError","preserveInput","containerClass","tabDisabled","dataType","currentRequest","triggerSelectOnValidInput","preventBadQueries","lookupFilter","originalQuery","queryLowerCase","paramName","transformResult","parseJSON","orientation","forceFixPosition","showLookup","suggestions","badQueries","currentValue","intervalId","cachedResponse","onChangeInterval","isLocal","suggestionsContainer","noSuggestionsContainer","hint","hintValue","onValueChange","setLoading","setOptions","suggest","isHTML","innerHTML","getCompiledOption","utils","escapeRegExChars","createNode","div","onclick","ESC","TAB","RETURN","LEFT","UP","RIGHT","DOWN","reg","killerFn","suggestionSelector","setAttribute","killSuggestions","disableKillerFn","activate","fixPositionCapture","fixPosition","enableKillerFn","abortAjax","suppliedOptions","verifySuggestionsFormat","validateOrientation","max-height","enable","$container","containerParent","containerHeight","viewPortHeight","topOverflow","bottomOverflow","parentOffsetDiff","stopKillSuggestions","isCursorAtEnd","valLength","selectionStart","createRange","moveStart","onHint","selectHint","moveUp","moveDown","findBestHint","query","getQuery","onInvalidateSelection","isExactMatch","getSuggestions","parts","getSuggestionsLocal","lookupLimit","grep","filterable","q","cacheKey","ignoreParams","isBadQuery","ajax","done","processResponse","fail","jqXHR","textStatus","errorThrown","signalHint","noSuggestions","category","classSelected","beforeRender","formatGroup","currentCategory","formattedResult","formattedTitle","loaderHtmls","totalIndex","innerWrapMaxHeight","escape","unescape","noSuggestionsMessage","addNewKey","showLookupKey","adjustContainerWidth","detach","bestMatch","foundMatch","fallback","inArray","adjustScroll","offsetTop","heightDelta","getValue","getTotalSuggested","onClickShowLookup","onClickAddNew","onSelectCallback","removeData","inputElement","smartTimeLineID","selectable","showCurrentTime","zoomMin","zoomMax","marginSpace","groupOrder","isTodayInBetween","getAngularDateFormat","defaultMin","defaultMax","timeline","groupOrderFunc","$a","$b","lines","timelineID","formateData","groups","groupItemPeer","flagS","flagE","classNamee","startFormated","endFormated","respo","passedClassName","barStyle","getCultureCode","culturecode","groupSet","vis","DataSet","itemSet","Timeline","setGroups","setItems","locales","minorLabels","millisecond","second","minute","hour","weekday","day","month","year","majorLabels","current","time","fittobound","fit","currentTime","bar","props","getEventProperties","groupObj","itemObj","$res","onMessage","delay","optionsObject","typeaheadId","callbackOnIconClick","desckey","infoIcon","infoIconTooltip","showInfoIcon","isSupplier","defaultselectoption","minCharForTrigger","setModel","setValues","DuplicateData","editTest","newArrLen","str_array","strLen","indexabc","copyArray","selectedArrIndex","newOptionsSelected","newArr","selectedArr","ab","_$index","v1","v2","isPresent","tNewArr","dataLength","childObj","getOpFormate","opFor","filterKeyLen","getDispFormate","opDisp","tChild","getFormatedArray","formatString","propArray","tLen","alignLookUp","elPosition","elHeight","lookupHeight","isOutOfBound","mutiselectVal","valuee","multiselectFlag","labelFortypeaheadId","toutOptions","infoIconFlag","infotipData","cancelMe","changeTimeout","keyUpTimeout","keyDownTimeout","keyPressTimeout","getOwnPropertyNames","tout","showLookupTrigger","preventKeyArray","formattedData","clickedOnIcon","ruleLlen","tRule","delimiterVal","tTout","scrollTo","drp","keyup","lookupTout","gridConfigProvider","uiGridConstants","$injector","focusRowCol","validationService","searchTerm","otherGridOptions","onRenderingStart","onRenderingFinish","dynamicPaginationPageSizes","dynamicItemTotal","getCellValue","gridInstance","getCellDisplayValue","outerSearchCallback","cols","formattedDate","decession","onCheckboxSelect","getGridInstanceCallback","rowSelectionCallback","isRowSelectable","registerRowsProcessor","rowsRendered","rowsRenderedTimeout","setHeightForGrid","navigate","newRowcol","oldRowCol","isRegFocusCol","focusedRowColObj","bluredRowColObj","rowEntity","rowModel","getDataFolDropDown","dropDownOptions","isRegBeginEditCol","paginationChanged","newPage","pageSize","rowCount","getVisibleRows","paginationOptions","pageNumber","cellClassFunction","cellEditableConditionFunction","defaultGridOptions","paginationPageSizes","dynamicPaginationCallback","enableCellEditOnFocus","enableFiltering","enableVerticalScrollbar","scrollbars","NEVER","treeRowHeaderAlwaysVisible","showTreeExpandNoChildren","modifiedColDef","totalItems","getMassagedGirdConfig","idx","defs","customTreeAggregationFinalizerFn","customTreeAggregationFn","groupingCol","isGrouped","grouping","clearGrouping","groupColumn","modifiedOtherGridOptions","appScopeProvider","treeColumns","treeViewColumnsToBeCreated","showTreeRowHeader","enableRowHeaderSelection","assignTreeLevel","onRegisterApi","isTree","loopedItems","SplitLevelArr","autoSuggestOptions","autoSuggestOnChange","indexFound","entityType","fieldId","splitEntityId","entityCode","responseRequired","autoSuggestOnSelect","autoSuggestModel","isModified","dropDownOnChange","popUpButtonClickCallback","isChargesGrid","checkBoxOnChange","textOrNumberKeyUp","self","statusDataChange","dataChange","legendChange","getChange","getLegendChange","trackStatusService","onTabChange","cycleChange","statusLegend","approverLegend","fileDownloadCallback","scrollToStatus","downloadAllAttachment","statusListData","statusLists","datailedData","selectCycle","cycles","cycleObject","selectedCycle","updateTabs","trackStatusTabs","tobj","htmlForDetail","updateHeaderData","headerSecData","Comments","docCreatedOn","createdOn","addUniqueId","pItems","pLen","cArr","actionerDetails","cLen","uniqueId","displayLegend","defApproverLegend","defStatusLegend","setTabCss","tabDiv","scrollToLatestStatus","$target","scrollIndex","uniqueid","headerLable","tsDocName","tsCreatedOn","trackStatusType","tsCurrStatus","labelOn","legend","by","defContentCommentLen","tabClicked","changeCycle","hasComments","a_comment","showLess","showMore","showMoreLess","showMoreComment","initShowModel","projectStatus","getString","a_str","a_count","applyStatusColor","IconStatus","iconMap","pending","approval","rejected","accepted","approved","auto_approved","approval pending","approval withdrawn","withdrawn","approval withdraw","withdraw","InnerIconStatus","approvalGroupType","slideDetailsTS","detailDataCopy","isDetailShow","changeScreenSize","isFullscreen","getFDownloadCallback","getDownloadAllAttchment","attachments","identifier","cntrl","downloadFile","showDownloadAllAttachment","filedownload","uigridCompatibleFunc","uiGridEditConstants","controllers","uiGridCtrl","renderContainerCtrl","isFocused","isSelectElement","lastRenderedElementScope","onDatePopupClosed","onViewPortKeyDown","viewPortKeyDown","rowCol","inputText","anchor","events","END_CELL_EDIT","keymap","CANCEL_CELL_EDIT","uiGridTargetRenderContainerId","containerId","handleKeyDown","ENTER","isCellClicked"],"mappings":"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","file":"directives.min.js","sourcesContent":["angular.module('SMART2')\r\n.directive(\"sidenav\", [sideNavFunc])\r\n.directive(\"tabs\", [tabsFunc])\r\n.directive(\"dropdown\", [\"$compile\", \"$timeout\", dropdownFunc])\r\n.directive('inputDate', [\"$compile\", \"$timeout\", inputDateFunc])\r\n.directive(\"modal\", [\"$compile\", \"$timeout\", modal])\r\n.directive(\"slideToggle\", [slideToggleFunc])\r\n.directive(\"collapsible\", [collapsibleFunc]);\r\n\r\n/*side nav*/\r\nfunction sideNavFunc() {\r\n    return {\r\n        scope: {\r\n            menuwidth: \"@\",\r\n            closeonclick: \"@\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            \r\n            element.sideNav({\r\n                menuWidth: (angular.isDefined(scope.menuwidth)) ? scope.menuwidth : undefined,\r\n                edge: attrs.sidenav ? attrs.sidenav : \"left\",\r\n                closeOnClick: (angular.isDefined(scope.closeonclick)) ? scope.closeonclick == \"true\" : undefined\r\n            });\r\n        }\r\n    };\r\n}\r\n/*tabs*/\r\nfunction tabsFunc() {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.tabs();\r\n            \r\n        }\r\n    };\r\n}\r\n\r\nfunction dropdownFunc($compile, $timeout) {\r\n    return {\r\n        scope: {\r\n            inDuration: \"@\",\r\n            outDuration: \"@\",\r\n            constrainWidth: \"@\",\r\n            hover: \"@\",\r\n            alignment: \"@\",\r\n            gutter: \"@\",\r\n            belowOrigin: \"@\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            var dropdownCode;\r\n            $timeout(function () {\r\n                $compile(element.contents())(scope);\r\n                dropdownCode = element.attr(\"data-activates\");\r\n                element.dropdown({\r\n                    inDuration: (angular.isDefined(scope.inDuration)) ? scope.inDuration : undefined,\r\n                    outDuration: (angular.isDefined(scope.outDuration)) ? scope.outDuration : undefined,\r\n                    constrain_width: (angular.isDefined(scope.constrainWidth)) ? scope.constrainWidth : undefined,\r\n                    hover: (angular.isDefined(scope.hover)) ? scope.hover : undefined,\r\n                    alignment: (angular.isDefined(scope.alignment)) ? scope.alignment : undefined,\r\n                    gutter: (angular.isDefined(scope.gutter)) ? scope.gutter : undefined,\r\n                    belowOrigin: (angular.isDefined(scope.belowOrigin)) ? scope.belowOrigin : undefined\r\n                });\r\n            });\r\n            \r\n            scope.$on('closeDropdown', function(e, obj){\r\n                  if(obj.ddname===dropdownCode){\r\n                    element.trigger(\"close\");  \r\n                  }\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nfunction inputDateFunc($compile, $timeout) {\r\n   \r\n    var style = $('<style>#inputCreated_root {outline: none;}</style>');\r\n    $('html > head').append(style);\r\n\r\n    var dateFormat = function () {\r\n\r\n        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\r\n            timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\r\n            timezoneClip = /[^-+\\dA-Z]/g,\r\n            pad = function (val, len) {\r\n                val = String(val);\r\n                len = len || 2;\r\n                while (val.length < len) {\r\n                    val = \"0\" + val;\r\n                }\r\n                return val;\r\n            };\r\n\r\n        return function (date, mask, utc) {\r\n\r\n            var dF = dateFormat;\r\n\r\n            if (arguments.length === 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\r\n                mask = date;\r\n                date = undefined;\r\n            }\r\n\r\n                    \r\n            date = date ? new Date(date) : new Date();\r\n            if (isNaN(date)) throw SyntaxError(\"invalid date\");\r\n\r\n            mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\r\n\r\n             \r\n            if (mask.slice(0, 4) == \"UTC:\") {\r\n                mask = mask.slice(4);\r\n                utc = true;\r\n            }\r\n\r\n            var _ = utc ? \"getUTC\" : \"get\",\r\n                d = date[_ + \"Date\"](),\r\n                D = date[_ + \"Day\"](),\r\n                m = date[_ + \"Month\"](),\r\n                y = date[_ + \"FullYear\"](),\r\n                H = date[_ + \"Hours\"](),\r\n                M = date[_ + \"Minutes\"](),\r\n                s = date[_ + \"Seconds\"](),\r\n                L = date[_ + \"Milliseconds\"](),\r\n                o = utc ? 0 : date.getTimezoneOffset(),\r\n                flags = {\r\n                    d: d,\r\n                    dd: pad(d),\r\n                    ddd: dF.i18n.dayNames[D],\r\n                    dddd: dF.i18n.dayNames[D + 7],\r\n                    m: m + 1,\r\n                    mm: pad(m + 1),\r\n                    mmm: dF.i18n.monthNames[m],\r\n                    mmmm: dF.i18n.monthNames[m + 12],\r\n                    yy: String(y).slice(2),\r\n                    yyyy: y,\r\n                    h: H % 12 || 12,\r\n                    hh: pad(H % 12 || 12),\r\n                    H: H,\r\n                    HH: pad(H),\r\n                    M: M,\r\n                    MM: pad(M),\r\n                    s: s,\r\n                    ss: pad(s),\r\n                    l: pad(L, 3),\r\n                    L: pad(L > 99 ? Math.round(L / 10) : L),\r\n                    t: H < 12 ? \"a\" : \"p\",\r\n                    tt: H < 12 ? \"am\" : \"pm\",\r\n                    T: H < 12 ? \"A\" : \"P\",\r\n                    TT: H < 12 ? \"AM\" : \"PM\",\r\n                    Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\r\n                    o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\r\n                    S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\r\n                };\r\n\r\n            return mask.replace(token, function ($0) {\r\n                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\r\n            });\r\n        };\r\n    }();\r\n\r\n\r\n    dateFormat.masks = {\r\n        \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\r\n        shortDate: \"m/d/yy\",\r\n        mediumDate: \"mmm d, yyyy\",\r\n        longDate: \"mmmm d, yyyy\",\r\n        fullDate: \"dddd, mmmm d, yyyy\",\r\n        shortTime: \"h:MM TT\",\r\n        mediumTime: \"h:MM:ss TT\",\r\n        longTime: \"h:MM:ss TT Z\",\r\n        isoDate: \"yyyy-mm-dd\",\r\n        isoTime: \"HH:MM:ss\",\r\n        isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\r\n        isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\r\n    };\r\n\r\n        \r\n    dateFormat.i18n = {\r\n        dayNames: [\r\n            \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\r\n            \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n        ],\r\n        monthNames: [\r\n            \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\r\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ]\r\n    };\r\n\r\n       \r\n    Date.prototype.format = function (mask, utc) {\r\n        return dateFormat(this, mask, utc);\r\n    };\r\n\r\n       \r\n    var isValidDate = function (date) {\r\n        if (Object.prototype.toString.call(date) === '[object Date]') {\r\n            return !isNaN(date.getTime());\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return {\r\n        require: 'ngModel',\r\n        scope: {\r\n            container: \"@\",\r\n            format: \"@\",\r\n            formatSubmit: \"@\",\r\n            monthsFull: \"@\",\r\n            monthsShort: \"@\",\r\n            weekdaysFull: \"@\",\r\n            weekdaysLetter: \"@\",\r\n            firstDay: \"=\",\r\n            disable: \"=\",\r\n            today: \"=\",\r\n            clear: \"=\",\r\n            close: \"=\",\r\n            selectYears: \"=\",\r\n            onStart: \"&\",\r\n            onRender: \"&\",\r\n            onOpen: \"&\",\r\n            onClose: \"&\",\r\n            onSet: \"&\",\r\n            onStop: \"&\",\r\n            ngReadonly: \"=?\",\r\n            max: \"@\",\r\n            min: \"@\"\r\n        },\r\n        link: function (scope, element, attrs, ngModelCtrl) {\r\n\r\n            ngModelCtrl.$formatters.unshift(function (modelValue) {\r\n                if (modelValue) {\r\n                    var date = new Date(modelValue);\r\n                    return (angular.isDefined(scope.format)) ? date.format(scope.format) : date.format('d mmmm, yyyy');\r\n        }\r\n                return null;\r\n            });\r\n\r\n            var monthsFull = (angular.isDefined(scope.monthsFull)) ? scope.$eval(scope.monthsFull) : undefined,\r\n                monthsShort = (angular.isDefined(scope.monthsShort)) ? scope.$eval(scope.monthsShort) : undefined,\r\n                weekdaysFull = (angular.isDefined(scope.weekdaysFull)) ? scope.$eval(scope.weekdaysFull) : undefined,\r\n                weekdaysLetter = (angular.isDefined(scope.weekdaysLetter)) ? scope.$eval(scope.weekdaysLetter) : undefined;\r\n\r\n\r\n            $compile(element.contents())(scope);\r\n            if (!(scope.ngReadonly)) {\r\n                $timeout(function () {\r\n                    var pickadateInput = element.pickadate({\r\n                        container: (angular.isDefined(scope.container)) ? scope.container : 'body',\r\n                        format: (angular.isDefined(scope.format)) ? scope.format : undefined,\r\n                        formatSubmit: (angular.isDefined(scope.formatSubmit)) ? scope.formatSubmit : undefined,\r\n                        monthsFull: (angular.isDefined(monthsFull)) ? monthsFull : undefined,\r\n                        monthsShort: (angular.isDefined(monthsShort)) ? monthsShort : undefined,\r\n                        weekdaysFull: (angular.isDefined(weekdaysFull)) ? weekdaysFull : undefined,\r\n                        weekdaysLetter: (angular.isDefined(weekdaysLetter)) ? weekdaysLetter : undefined,\r\n                        firstDay: (angular.isDefined(scope.firstDay)) ? scope.firstDay : 0,\r\n                        disable: (angular.isDefined(scope.disable)) ? scope.disable : undefined,\r\n                        today: (angular.isDefined(scope.today)) ? scope.today : undefined,\r\n                        clear: (angular.isDefined(scope.clear)) ? scope.clear : undefined,\r\n                        close: (angular.isDefined(scope.close)) ? scope.close : undefined,\r\n                        selectYears: (angular.isDefined(scope.selectYears)) ? scope.selectYears : undefined,\r\n                        onStart: (angular.isDefined(scope.onStart)) ? function () { scope.onStart(); } : undefined,\r\n                        onRender: (angular.isDefined(scope.onRender)) ? function () { scope.onRender(); } : undefined,\r\n                        onOpen: (angular.isDefined(scope.onOpen)) ? function () { scope.onOpen(); } : undefined,\r\n                        onClose: (angular.isDefined(scope.onClose)) ? function () { scope.onClose(); } : undefined,\r\n                        onSet: (angular.isDefined(scope.onSet)) ? function () { scope.onSet(); } : undefined,\r\n                        onStop: (angular.isDefined(scope.onStop)) ? function () { scope.onStop(); } : undefined\r\n                    });\r\n                 \r\n                    var picker = pickadateInput.pickadate('picker');\r\n\r\n            \r\n                    scope.$watch('max', function (newMax) {\r\n                        if (picker) {\r\n                            var maxDate = new Date(newMax);\r\n                            picker.set({ max: isValidDate(maxDate) ? maxDate : false });\r\n                        }\r\n                    });\r\n                    scope.$watch('min', function (newMin) {\r\n                        if (picker) {\r\n                            var minDate = new Date(newMin);\r\n                            picker.set({ min: isValidDate(minDate) ? minDate : false });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    };\r\n};\r\n/*modal*/\r\nvar modalCounter = 0;\r\n\r\n\r\nfunction modal($compile, $timeout) {\r\n    return {\r\n        restrict: 'E',\r\n        scope: {},\r\n        link: function (scope, element, attrs) {\r\n            scope.templateUrl = attrs.templateUrl;\r\n            scope.title = attrs.title;\r\n            modalCounter = modalCounter + 1;\r\n            scope.modalCounter = modalCounter;\r\n\r\n            setTimeout(function () {\r\n                angular.element('#modalButton' + modalCounter).leanModal();\r\n            });\r\n        },\r\n        template: '<div><a id=\"modalButton{{modalCounter}}\" class=\"waves-effect waves-light btn modal-trigger\" href=\"#modal{{modalCounter}}\" modal>{{title}}</a><div id=\"modal{{modalCounter}}\" class=\"modal modal-sm\" ng-include=\"templateUrl\"></div>'\r\n    };\r\n}\r\n\r\nfunction slideToggleFunc() {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {},\r\n        controller: function ($scope) { },\r\n        link: function (scope, element, attr) {\r\n            element.bind('click', function () {\r\n                var $slideBox = angular.element(attr.slideToggle);\r\n                var slideDuration = parseInt(attr.slideToggleDuration, 10) || 200;\r\n                $slideBox.stop().slideToggle(slideDuration);\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\n/*tabs*/\r\nfunction collapsibleFunc() {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            element.collapsible();\r\n        }\r\n    };\r\n}","angular\r\n    .module(\"SMART2\")\r\n    .directive(\"smartHeight\", [\"$timeout\", smartHeightFun]);\r\n\r\nfunction smartHeightFun($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        link: function (scope, element, attrs) {\r\n            var config = {\r\n                relativeTo: returnVal(attrs.relativeTo, \"relativeTo\"),\r\n                plusThis: returnVal(attrs.plusThis, \"plusThis\"),\r\n                minusThis: returnVal(attrs.minusThis, \"minusThis\")\r\n            };\r\n            var height = function () {\r\n                var h = 0, m = 0, p = 0;\r\n                if (config.relativeTo == window) {\r\n                    h = window.innerHeight;\r\n                } else {\r\n                    h = $(config.relativeTo).get(0).outerHeight;\r\n                }\r\n                if (config.plusThis) {\r\n                    p = normalizeNumber(config.plusThis);\r\n                    h += p;\r\n                } else {\r\n                    m = normalizeNumber(config.minusThis);\r\n                    h -= m;\r\n                }\r\n                return h;\r\n            }();\r\n\r\n            element.css(\"height\", height);\r\n\r\n            function normalizeNumber(val) {\r\n                var v = 0;\r\n                if (val) {\r\n                    if (Number(val) == NaN) {\r\n                        if (val.indecOf(',') > -1) {\r\n                            $(val).each(function () {\r\n                                v += this.outerHeight;\r\n                            });\r\n                        } else {\r\n                            v = $(val).get(0).outerHeight;\r\n                        }\r\n                    } else {\r\n                        v = Number(val)\r\n                    }\r\n                } else {\r\n                    v = 0;\r\n                }\r\n                return v;\r\n            }\r\n\r\n            function returnVal(val, attribute) {\r\n                var r;\r\n                switch (attribute) {\r\n                    case \"relativeTo\":\r\n                        if (!val) r = window\r\n                        else r = val;\r\n                        break;\r\n                    case \"plusThis\":\r\n                        if (!val) r = false;\r\n                        else r = val;\r\n                        break;\r\n                    case \"minusThis\":\r\n                        if (!val) r = false;\r\n                        else r = val;\r\n                        break;\r\n                }\r\n\r\n                return r;\r\n            };\r\n        }\r\n    };\r\n}","//Body\r\n(function () {\r\n    angular.module('SMART2').directive('body', function () {\r\n        return {\r\n            restrict: 'E',\r\n            link: function postLink(scope, elem, attrs) {\r\n                function _wheelDelta(a) {\r\n                    if (a.originalEvent.wheelDelta == undefined) {\r\n                        return a.originalEvent.deltaY;\r\n                    } else {\r\n                        return -a.originalEvent.wheelDelta;\r\n                    }\r\n                }\r\n                IEscroll = function (event) {\r\n                    if ($(event.target).closest(\".dropdown-content\").length == 0 && $(event.target).closest(\"smart-scroll\").length == 0 && $(event.target).closest(\".scroll-inner-wrapp\").length == 0) {\r\n                        var dy = _wheelDelta(event);\r\n                        if ($(\"body\").css(\"overflow\") == \"hidden\") {\r\n                            return;\r\n                        };\r\n                        var evDelta = function () {\r\n                            if (dy < 0) {\r\n                                return dy < -90 ? 60 : 40;\r\n                            } else {\r\n                                return dy > 90 ? 60 : 40;\r\n                            }\r\n                        }();\r\n                        event.preventDefault();\r\n                        var wheelDelta = dy < 0 ? dy - evDelta : dy + evDelta;\r\n                        var currentScrollPosition = window.pageYOffset;\r\n                        $(this).scrollTop(currentScrollPosition + wheelDelta);\r\n                        \r\n                    }\r\n                }\r\n\r\n                //function IEscrollfn() {\r\n                //    if (attrs.customWheelForie == \"true\") {\r\n                //        $('html,body').bind(\"mousewheel\", IEscroll);\r\n                //    } else {\r\n                //        $('html,body').unbind(\"mousewheel\", IEscroll);\r\n                //    }\r\n                //};\r\n\r\n                if (navigator.appName == 'Microsoft Internet Explorer' || !!(navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/rv:11/)) || (typeof $.browser !== \"undefined\" && $.browser.msie == 1)) {\r\n                    $('html,body').bind(\"mousewheel\", IEscroll);\r\n\r\n                    //attrs.$observe(\"customWheelForie\", function () {\r\n                    //    IEscrollfn();\r\n                    //});\r\n                };\r\n            }\r\n        }\r\n    });\r\n})();","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('ckEditor', ['APPCONSTANTS', function (APPCONSTANTS) {\r\n        return {\r\n            require: '?ngModel',\r\n            link: function (scope, elm, attr, ngModel) {\r\n                var lang = \"en\";\r\n                if (APPCONSTANTS.userPreferences.UserBasicDetails.Culture) {\r\n                    lang = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n                }\r\n                var ckeditor = CKEDITOR.replace(\r\n\t\t\t\t\telm[0],\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    \"toolbar\": \"Basic\",\r\n\t\t\t\t\t    \"language\": lang\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n                if (!ngModel)\n                    return;\n\n                var updateModel = false;\n                ckeditor.on('instanceReady', function () {\r\n                    ckeditor.setData(ngModel.$viewValue);\r\n                });\n\n                function update() {\r\n                    if (updateModel) {\r\n                        ngModel.$setViewValue(ckeditor.getData());\r\n                    }\r\n                };\n\n                ngModel.$render = function (value) {\r\n                    ckeditor.setData(ngModel.$viewValue);\r\n                };\n\n                ckeditor.on('change', update);\n                ckeditor.on('focus', function (event) {\r\n                    updateModel = true;\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                \tckeditor.removeAllListeners();\r\n                \tCKEDITOR.remove(ckeditor);\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();","(function () {\r\n\t'use strict';\r\n\r\n\tangular.module('SMART2').directive('colorPicker', ['$parse', '$timeout', function ($parse, $timeout) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\ttransclude: true,\r\n\t\t\tscope: {\r\n\t\t\t\tonSelect: '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tvar $colorPicker = $(element).find('.colorPicker');\r\n\t\t\t\t$colorPicker.on(\"change.color\", function (event, color) {\r\n\t\t\t\t\tif (color) {\r\n\t\t\t\t\t\tscope.$apply(function () {\r\n\t\t\t\t\t\t\tscope.onSelect({\r\n\t\t\t\t\t\t\t\t$event: { color: color }\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$colorPicker.colorpicker({\r\n\t\t\t\t\tshowOn: \"button\",\r\n\t\t\t\t\thistory: false\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$(element).bind('click', function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t$(this).find(\".colorPicker\").colorpicker(\"showPalette\");\r\n\t\t\t\t});\r\n\r\n\t\t\t\tattrs.$observe('color', function (value) {\r\n\t\t\t\t\t$colorPicker.colorpicker('val', value);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/colorPicker/colorPickerTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('notification', [function () {\r\n        var Obj = {};\r\n        Obj.show = false;\r\n        Obj.onCallback = undefined;\r\n\r\n        Obj.on = function (callback) {\r\n            Obj.onCallback = callback;\r\n        };\r\n\r\n        Obj.notify = function (config, callback) {\r\n            this.show = true;\r\n            this.config = config;\r\n            this.broadcastItem();\r\n            this.resultCallBack = function (result) {\r\n                if (typeof (callback) == 'function') {\r\n                    setTimeout(function () {\r\n                        callback(result);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n\r\n        Obj.broadcastItem = function () {\r\n            angular.isFunction(Obj.onCallback) && Obj.onCallback();\r\n        };\r\n\r\n        return Obj;\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartNotification', ['$rootScope', 'notification', '$translate', '$sce', '$timeout', '$focusOnField', 'browserSniffing', function ($rootScope, notification, $translate, $sce, $timeout, $focusOnField, browserSniffing) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            scope: {\r\n                showN: \"@\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var topPositionBeforeModalOpen = 0;\r\n                scope.isChrome = (navigator.userAgent.indexOf(\"Chrome\") != -1) ? \"remindMeOption\" : \"\";\r\n                /*\r\n                 *  Unbind window keyup listener and assign tabindex back to .picker elements\r\n                 */\r\n                var reset = function () {\r\n                    $(window).off('keyup', onWindowKeyUp);\r\n                    angular.element('.picker').attr(\"tabindex\", 0);\r\n                    angular.element(document).scrollTop(topPositionBeforeModalOpen);\r\n                };\r\n\r\n                /*\r\n                 *  window on key up event listener\r\n                 */\r\n                var onWindowKeyUp = function (e) {\r\n                    if (angular.element(e.target).closest('.modal').length == 0 && e.keyCode == 9) {\r\n                        angular.element(element.find(':focusable')[0]).focus();\r\n                    }\r\n                };\r\n\r\n                /*\r\n                 *  hide notification pop up when route changed\r\n                 */\r\n\r\n                scope.$on('$stateChangeSuccess', function () {\r\n                    if (scope.showN && !(scope.config.type == \"unsupportedBrowserVersion\" || scope.config.type == \"unsupportedBrowser\")) {\r\n                        scope.showN = false;\r\n                        cleanUpNotificationPopup();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 *  On notification listener\r\n                 */\r\n                scope.dismissible = true;\r\n                notification.on(function () {\r\n                    scope.dismissible = angular.isDefined(notification.config.dismissible) ? notification.config.dismissible : true;\r\n                    scope.config = notification.config;\r\n                    scope.buttons = scope.config.buttons;\r\n                    switch (scope.config.type) {\r\n                        case \"success\":\r\n                            scope.notifyClass = 'notify-success';\r\n                            scope.title = $translate.instant(\"notificationSuccessMsg\");\r\n                            scope.icon = \"#icon_CircleCheck\";\r\n                            break;\r\n                        case \"error\":\r\n                            scope.notifyClass = 'notify-error';\r\n                            scope.title = $translate.instant(\"notificationErrorMsg\");\r\n                            scope.icon = \"#icon_Exclamation\";\r\n                            break;\r\n                        case \"warning\":\r\n                            scope.notifyClass = 'notify-warning';\r\n                            scope.icon = \"#icon_Warning\";\r\n                            scope.title = $translate.instant(\"notificationWarningMsg\");\r\n                            break;\r\n                        case \"confirm\":\r\n                            scope.notifyClass = 'notify-confirm';\r\n                            scope.icon = \"#icon_Help\";\r\n                            scope.title = $translate.instant(\"notificationConfirmationMsg\");\r\n                            break;\r\n                        case \"inform\":\r\n                            scope.notifyClass = 'notify-information';\r\n                            scope.icon = \"#icon_Info\";\r\n                            scope.title = $translate.instant(\"notificationInformationMsg\");\r\n                            break;\r\n                        case \"sessionTimeOut\":\r\n                            scope.notifyClass = 'notify-session-timeout';\r\n                            scope.icon = \"#icon_AlertTimer\";\r\n                            scope.title = $translate.instant(\"notificationSessionTimeOut\");\r\n                            scope.dismissible = false;\r\n                            break;\r\n                        case \"sessionExpire\":\r\n                            scope.notifyClass = 'notify-session-expire';\r\n                            scope.icon = \"#icon_AlertTimer\";\r\n                            scope.title = $translate.instant(\"notificationSessionExpiredMsg\");\r\n                            scope.dismissible = false;\r\n                            break;\r\n                        case \"unsupportedBrowserVersion\":\r\n                            scope.notifyClass = \"notify-unsupported-browser-version\";\r\n                            scope.titleTextColor = \"browser-version-header-text\";\r\n                            scope.title = $translate.instant(\"notificationUnsupportedBrowserVersionMsg\");\r\n                            break;\r\n                        case \"unsupportedBrowser\":\r\n                            scope.notifyClass = \"notify-unsupported-browser\";\r\n                            scope.titleTextColor = \"browser-unsupported-header-text\";\r\n                            scope.title = $translate.instant(\"notificationUnsupportedBrowserMsg\");\r\n                    };\r\n\r\n                    scope.onChange = function (remindMeDate) {\r\n                        scope.showN = false;\r\n                        scope.$digest();\r\n                    };\r\n\r\n\r\n                    //scope.dismissible = (typeof notification.config.dismissible != \"undefined\")?(notification.config.dismissible) ? true : false : scope.dismissible;\r\n                    scope.message = $sce.trustAsHtml(scope.config.message);\r\n                    scope.checkboxText = scope.config.checkMessage;\r\n                    scope.customTemplate = false;\r\n                    if (typeof scope.config[\"isMultipleCheck\"] != \"undefined\" && scope.config[\"isMultipleCheck\"]) {\r\n                        scope.customTemplate = true;\r\n                        if (typeof scope.config.modalType == \"undefined\") {\r\n                            scope.config.modalType = \"small\"\r\n                        }\r\n                        for (var i in scope.config.multipleCheckList) {\r\n                            scope.config.multipleCheckList[i].model = {};\r\n                            scope.config.multipleCheckList[i].model.modelName = scope.config.multipleCheckList[i][\"checkContext\"];\r\n                            switch (scope.config.multipleCheckList[i].type) {\r\n                                case \"check\":\r\n                                    scope.config.multipleCheckList[i].model.isCheck = false;\r\n                                    break;\r\n                                case \"radio\":\r\n                                    scope.config.multipleCheckList[i].model.isCheck = {\r\n                                        \"title\": \"\"\r\n                                    };\r\n                                case \"select\":\r\n                                    if (typeof scope.config.multipleCheckList[i].preSelected != \"undefined\") {\r\n                                        scope.config.multipleCheckList[i].model.isCheck = scope.config.multipleCheckList[i].preSelected;\r\n                                    } else {\r\n                                        scope.config.multipleCheckList[i].model.isCheck = {\r\n                                            \"title\": \"\"\r\n                                        };\r\n                                    }\r\n                                    break;\r\n                            }\r\n                            if (typeof scope.config.multipleCheckList[i][\"header\"] != \"undefined\" && typeof scope.config.multipleCheckList[i][\"header\"] == \"string\") {\r\n                                scope.config.multipleCheckList[i][\"header\"] = $sce.trustAsHtml(scope.config.multipleCheckList[i][\"header\"]);\r\n                            }\r\n                            if (typeof scope.config.multipleCheckList[i][\"label\"] == \"string\") {\r\n                                scope.config.multipleCheckList[i][\"label\"] = $sce.trustAsHtml(scope.config.multipleCheckList[i][\"label\"]);\r\n                            }\r\n\t\t\t\t\t\t }\r\n                        for (var i in scope.config.buttons) {\r\n                            if (typeof scope.config.buttons[i].disableBtn != \"undefined\") {\r\n                                scope.config.buttons[i].disableBtn = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.isCheckSelect = false;\r\n                    if (typeof scope.config.isCheckSelect != 'undefined') {\r\n                        scope.isCheckSelect = scope.config.isCheckSelect;\r\n                    }\r\n                    scope.showN = notification.show;\r\n\r\n                    angular.element('body').css('overflow', 'hidden');\r\n                    $timeout(function () {\r\n                        var $firstField = element.find(':focusable')[0];\r\n                        $focusOnField($firstField);\r\n                        $(window).on('keyup', onWindowKeyUp);\r\n                        //  remove picker tabindex when popup to avoid focus on picker element\r\n                        angular.element('.picker').removeAttr(\"tabindex\");\r\n                        scope.notifyClass = scope.notifyClass + ' notificationanimate--active';\r\n                    }, 250);\r\n                    topPositionBeforeModalOpen = angular.element(document).scrollTop();\r\n                });\r\n\r\n                scope.showN = false;\r\n                scope.bindforTab = false;\r\n                scope.overlayCLicked = function () {\r\n                    if (scope.dismissible) {\r\n                        //scope.showN = false;\r\n                        //cleanUpNotificationPopup();\r\n                    }\r\n                }\r\n                scope.$on('LastRepeaterElement', function () {\r\n                    scope.bindforTab = true;\r\n                });\r\n                scope.onChangeNotification = function () {\r\n                    var cnt = 0;\r\n                    for (var i in scope.config.multipleCheckList) {\r\n                        if (scope.config.multipleCheckList[i].model.isCheck) {\r\n                            if (typeof scope.config.multipleCheckList[i].isMandatory != \"undefined\" && scope.config.multipleCheckList[i].isMandatory) {\r\n\t\t\t\t\t\t\t\tcnt++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n                        }\r\n\t\t\t\t\t\tif (typeof scope.config.multipleCheckList[i].disable != \"undefined\" && typeof scope.config.multipleCheckList[i].enableOn != \"undefined\") {\r\n\t\t\t\t\t\t\t\tscope.config.multipleCheckList[i].disable=!getStatus(scope.config.multipleCheckList[i].enableOn);\r\n\t\t\t\t\t\t}\r\n                    }\r\n                    for (var i in scope.config.buttons) {\r\n                        if (typeof scope.config.buttons[i].disableBtn != \"undefined\") {\r\n                            if (cnt > 0) {\r\n                                scope.config.buttons[i].disableBtn = false;\r\n                            } else {\r\n                                scope.config.buttons[i].disableBtn = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n\t\t\t\t function getStatus(mdlName){\r\n\t\t\t\t    for (var i in scope.config.multipleCheckList) {\r\n                        if (scope.config.multipleCheckList[i].model.modelName == mdlName) {\r\n                           return scope.config.multipleCheckList[i].model.isCheck;\r\n                        }\r\n                    }\r\n\t\t\t\t}\r\n                scope.clickCallbackFunction = function (e) {\r\n                    $timeout(function () {\r\n                        scope.showN = false;\r\n                        scope.bindforTab = false;\r\n                        var responceObj = {\r\n                            \"result\": e\r\n                        };\r\n                        if (scope.customTemplate) {\r\n                            for (var i in scope.config.multipleCheckList) {\r\n                                responceObj[scope.config.multipleCheckList[i].model.modelName] = scope.config.multipleCheckList[i].model.isCheck\r\n                            }\r\n                        } else {\r\n                            responceObj[\"isChecked\"] = scope.isCheckSelect;\r\n                        }\r\n                        cleanUpNotificationPopup();\r\n                        notification.resultCallBack(responceObj);\r\n                        $rootScope.$broadcast(\"closedPopup\");\r\n                    });\r\n                };\r\n                function cleanUpNotificationPopup() { // empty 'scope.buttons' object to avoid getting display multiple notification buttons\r\n                    scope.notifyClass = '';\r\n                    scope.buttons = [];\r\n                    angular.element('body').css('overflow', '');\r\n                    angular.element('.notification-massage .modal-content').css('display', 'none');\r\n                    angular.element('.notification-massage .modal-footer').css('display', 'none');\r\n                }\r\n                scope.$on('$destroy', function () {\r\n                    reset();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/notification/notificationTemplate.html',\r\n        }\r\n    }]);\r\n})();","(function() {\r\n\t'use strict';\r\n\tangular\r\n    .module('SMART2')\r\n    .directive('onCaptureClick', ['$parse', function ($parse) {\r\n      return {\r\n        restrict: 'A',\r\n        compile: function(element, attrs) {\r\n          var fn = $parse(attrs.onCaptureClick);\r\n          return function(scope, element) {\r\n            element[0].addEventListener('click', function(event) {\r\n              scope.$apply(function() {\r\n                fn(scope, {\r\n                  $event: event\r\n                });\r\n              });\r\n            }, true);\r\n          };\r\n        }\r\n      }\r\n    }]);\r\n})(angular);","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('onLoad', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            scope: {\r\n                onLoadCallback: '&',\r\n            },\n            link: function (scope, element, attrs) {\r\n                (scope.onLoadCallback) ? scope.onLoadCallback = scope.$eval(scope.onLoadCallback) : null;\n                if (angular.isFunction(scope.onLoadCallback)) {\r\n                    $timeout(function () {\r\n                        scope.onLoadCallback();\r\n                    }, 0);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();\n","    (function() {\r\n    \t'use strict';        \r\n    \tangular.module('SMART2').directive('profilePic', ['notification', '$translate', function (notification, $translate) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.isProfilePicEditable = false;\r\n            scope.isUserProfile = false;\r\n            if (attrs.circular == 'true') {\r\n                scope.isUserProfile = true;\r\n            }\r\n            if (attrs.editable == 'true') {\r\n                scope.isProfilePicEditable = true;\r\n            }\r\n            scope.dummyimg = false;\r\n            if (attrs.dummyimg == 'true') {\r\n                scope.dummyimg = true;\r\n            }\r\n     \r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? 'shared/resources/images/dummyImage.jpg' : attrs.imgsrc;\r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? scope.dummyimg = true : scope.dummyimg = false;\r\n            //var dummySrc = typeof attrs.dummysrc === 'undefined' ? 'shared/resources/images/user_default_BIG.PNG' : attrs.dummysrc;\r\n            //scope.dummyimg = typeof attrs.dummyimg === 'undefined' ? false : attrs.dummyimg;\r\n            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n            //debugger;\r\n            if (scope.isUserProfile == true) {\r\n                if (!scope.dummyimg) {\r\n                    scope.imgsrc = 'shared/resources/images/dummyImage.jpg';\r\n                    //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n                }\r\n            }\r\n            else {\r\n                if (!scope.dummyimg) {\r\n                    scope.imgsrc = 'shared/resources/images/kelloggs_logo.png';\r\n                }\r\n            }\r\n            var readURL = function (input) {\r\n                if (input.files && input.files[0]) {\r\n                    var reader = new FileReader();\r\n                    reader.onload = function (e) {\r\n                        angular.element('.user-profile').addClass('is-profile-pic');\r\n                        scope.dummyimg = false;\r\n                        scope.imgsrc = e.target.result;\r\n                        scope.$apply();\r\n                    }\r\n                    reader.readAsDataURL(input.files[0]);\r\n                }\r\n            }\r\n\r\n            element.find(\"#callFileFOrProfile\").on('change', function () {\r\n                readURL(this);\r\n            });\r\n\r\n            scope.profilePicEdit = function () {\r\n               element.find(\"#callFileFOrProfile\").get(0).click();\r\n            }\r\n\r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? 'shared/resources/images/dummyImage.jpg' : attrs.imgsrc;\r\n            // var imgsrc = typeof attrs.imgsrc === 'undefined' ? scope.dummyimg = true : scope.dummyimg = false;\r\n            //var dummySrc = typeof attrs.dummysrc === 'undefined' ? 'shared/resources/images/user_default_BIG.PNG' : attrs.dummysrc;\r\n            //scope.dummyimg = typeof attrs.dummyimg === 'undefined' ? false : attrs.dummyimg;\r\n            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n            // scope.isDeleted = false;\r\n\r\n            scope.clearProfilePicEdit = function () {\r\n            \tvar confi = {\r\n            \t\ttype: \"confirm\",\r\n            \t\tmessage: \"<p class='left-align'>\" + $translate.instant(\"confirmationMsg\") + \"</p>\",\r\n            \t\t//checkMessage: \"Do not show again.\",\r\n            \t\tbuttons: [\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t    \"title\": $translate.instant(\"notificationButtonYes\"),\r\n\t\t    \t\t\t\t\"result\": \"yes\"\r\n\t\t    \t\t\t},\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t    \"title\": $translate.instant(\"cancelBtn\"),\r\n\t\t    \t\t\t\t\"result\": \"no\"\r\n\t\t    \t\t\t}\r\n            \t\t]\r\n            \t};\r\n            \tnotification.notify(confi, function (responce) {\r\n            \t\tif (responce.result == \"yes\") {\r\n            \t\t\tangular.element('.overL').prev().toggleClass('changeImage');\r\n            \t\t\t\r\n\r\n            \t\t\t//if (angular.element('.overL').prev().hasClass(\"changeImage\") == true) {\r\n            \t\t\t//    scope.imgsrc = imgsrc;\r\n            \t\t\t\t\r\n            \t\t\t//\t//scope.isDeleted = true;\r\n            \t\t\t//}\r\n            \t\t\tif (angular.element('.user-profile img').hasClass(\"changeImage\")) {\r\n            \t\t\t    scope.imgsrc = false;\r\n            \t\t\t   element.find(\"#callFileFOrProfile\").val('');\r\n            \t\t\t    scope.dummyimg = true;\r\n            \t\t\t    //scope.isDeleted = true;\r\n            \t\t\t    if (scope.isUserProfile == true) {            \t\t\t       \r\n            \t\t\t        scope.imgsrc = 'shared/resources/images/user_default_BIG.PNG';\r\n            \t\t\t        angular.element('.user-profile').removeClass('is-profile-pic');\r\n            \t\t\t            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;            \t\t\t        \r\n            \t\t\t    }\r\n            \t\t\t}\r\n            \t\t\telse {\r\n            \t\t\t\tscope.imgsrc = dummySrc;\r\n            \t\t\t\tscope.isDeleted = false;\r\n            \t\t\t\tangular.element('.user-profile').addClass('is-profile-pic');\r\n            \t\t\t\t//console.log(isDeleted)\r\n            \t\t\t}\r\n            \t\t} else {\r\n            \t\t\treturn;\r\n            \t\t}\r\n            \t});\r\n            }\r\n        },\r\n        templateUrl: 'shared/components/directives/profilePic/profilePic.html'\r\n    };\r\n}]);\r\n    })();","angular.module('SMART2').directive('progressMeter', ['$timeout', function ($timeout) {\r\n\treturn {\r\n\t\trestrict: 'EA',\r\n\t\treplace: true,\r\n\t\tscope: {\r\n\t\t\tpercent: \"=?\"\r\n\t\t},\r\n\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\tvar unbindPercent = scope.$watch('percent', function (newVal, oldVal) {\r\n\t\t\t\t//if (newVal) {\r\n\t\t\t\t\tgetMeter();\r\n\t\t\t\t//}\r\n\t\t\t});\r\n\r\n\t\t\tfunction getMeter() {\r\n\t\t\t\tscope.value = parseInt(scope.percent);\r\n\t\t\t\tif (scope.value) {\r\n\t\t\t\t\tscope.c = Math.PI * (25 * 2);\r\n\t\t\t\t\tscope.pct = 156;\r\n\t\t\t\t\tif (scope.value < 0)\r\n\t\t\t\t\t\tscope.value = 0;\r\n\t\t\t\t\tif (scope.value > 100)\r\n\t\t\t\t\t\tscope.value = 100;\r\n\t\t\t\t\t$timeout(function () {\r\n\t\t\t\t\t\tscope.pct = ((100 - scope.value) / 100) * scope.c;\r\n\t\t\t\t\t\tscope.strokeStyle = { \"stroke-dashoffset\": scope.pct }\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\tunbindPercent();\r\n\t\t\t});\r\n\t\t},\r\n\t\ttemplateUrl: 'shared/directives/progressMeter/progressMeterTemplate.html'\r\n\t}\r\n}]);","//div resizer\r\nangular.module('SMART2').directive('isResizable', function () {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            'handle': '@',\r\n            'onresize': '&',\r\n            'onstart': '&',\r\n            'onstop': '&'\r\n        },\r\n        link: function postLink(scope, elem, attrs) {\r\n            elem.resizable({\r\n                handles: scope.handle,\r\n                resize: function (event, ui) {\r\n                    scope.onresize({ event: event, ui: ui })\r\n                },\r\n                start: function (event, ui) {\r\n                    scope.onstart({ event: event, ui: ui });\r\n                }\r\n                 ,\r\n                stop: function (event, ui) {\r\n\r\n                    scope.onstop({ event: event, ui: ui });\r\n                }\r\n            });\r\n\r\n            if (attrs.maxheight != undefined) {\r\n                attrs.$observe('maxheight', function () {\r\n                    elem.resizable(\"option\", \"maxHeight\", attrs.maxheight);\r\n                });\r\n            }\r\n            if (attrs.minheight != undefined) {\r\n                attrs.$observe('minheight', function () {\r\n                    elem.resizable(\"option\", \"minHeight\", attrs.minheight);\r\n                });\r\n\r\n            }\r\n            if (attrs.maxwidth != undefined) {\r\n                attrs.$observe('maxwidth', function () {\r\n                    elem.resizable(\"option\", \"maxWidth\", attrs.maxwidth);\r\n                });\r\n            }\r\n            if (attrs.minwidth != undefined) {\r\n                attrs.$observe('minwidth', function () {\r\n                    elem.resizable(\"option\", \"minWidth\", attrs.minwidth);\r\n                });\r\n\r\n            }\r\n            if (attrs.alsoResizeRevert != undefined) {\r\n                elem.resizable(\"option\", \"alsoResizeReverse\", attrs.alsoResizeRevert);\r\n            }\r\n            if (attrs.alsoResize != undefined) {\r\n                elem.resizable(\"option\", \"alsoResize\", attrs.alsoResizeRevert);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n//window resizer\r\nangular.module('SMART2').directive('smartWindowResizer', ['$window', function ($window) {\r\n    return {\r\n        restrict: 'AE',\r\n        replace:false,\r\n        scope: {\r\n            'pageHeight': '@'\r\n        },\r\n        link: function postLink(scope, elem, attrs) {\r\n            \r\n            scope.pageHeight = ($window.innerHeight - 114) + 'px';\r\n            elem.css('height', scope.pageHeight);\r\n\r\n            angular.element($window).bind('resize', function (e) {\r\n                if (scope.fixedSubHeader) {\r\n                    scope.pageHeight = ($window.innerHeight - 50) + 'px';\r\n                }\r\n                else {\r\n                    scope.pageHeight = ($window.innerHeight - 114) + 'px';\r\n                }\r\n\r\n                scope.$apply();\r\n                console.log(scope.pageHeight);\r\n                elem.css('height', scope.pageHeight);\r\n            });\r\n\r\n        }\r\n    };\r\n}]);","angular.module('SMART2').directive('scrollContent', ['$window', '$filter', '$rootScope', 'scrollPosition', function ($window, $filter, $rootScope, scrollPosition) {\r\n\treturn {\r\n\t\trestrict: 'A',\r\n\t\tscope: true,\r\n\t\tlink: function ($scope, elem, $attrs) {\r\n\t\t\t$rootScope.$on('$locationChangeSuccess', function() {\r\n\t\t\t\tif (scrollPosition.getEnableScroll() == true) {\r\n\t\t\t\t\tvar foundItem = $filter('filter')(scrollPosition.get(), { 'currentUrl': $window.location.hash }, true)[0];\r\n\t\t\t\t\tif(foundItem)\r\n\t\t\t\t\t\tscrollPosition.performScroll(scrollPosition.get()[scrollPosition.get().indexOf(foundItem)].scroll, 500);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tangular.element($window).bind('scroll', function (e) {\r\n\t\t\t\tvar windowScrollTop = this.scrollY || this.pageYOffset;\r\n\t\t\t\tif (windowScrollTop > 0)\r\n\t\t\t\tscrollPosition.set(windowScrollTop, $window.location.hash);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}]);","  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Sliding-menu\n   * @description This directive is useful for creating a sliding menu.\n   * \n   * @attr {Number} right\n   *    Menu's right position\n   * @attr {Number} top\n   *    Menu's top position\n   * @attr {Boolean} show\n   *    Sliding menu will toggle as soon as value of this attribute changes\n   * @attr {Boolean} modify-parent-style\n   *    This attribute is useful when parent does not need to animated. For e.g. Default behaviour is when 'show' is set to true, \n   *    parent element gets resized depending upon the width of sliding-menu.\n   * @attr {Boolean} detach-default-class\n   *    If this attribute is set to true, default class will not be applied to directive's template\n   * @attr {String} include-template\n   *    Template to be used\n   * @attr {Object} tabData\n   *    used for two-way communication based on this property\n   *\n   * @example\n   Usage:\n   <smart-sliding-menu>\n        //  Contents will go here\n   </smart-sliding-menu>\n   */\n\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartSlidingMenu', ['RuleEngine', '$timeout', '$compile', '$translate', '$rootScope', function (RuleEngine, $timeout, $compile, $translate, $rootScope) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            transclude: true,\n            scope: {\r\n                right: '@',\n                top: '@',\n                show: '=',\n                detachDefaultClass: '@',\n                includeTemplate: '@',\n                model: '@',\n                modifyParentStyle: '@',\r\n                tabData: '='\r\n            },\n            link: function (scope, $element, $attrs, controller) {\r\n                scope.getModel = function () {\r\n                    return JSON.parse(scope.model);\r\n                };\n                scope.logoutSession = function () {\r\n                    requestClicked.navCircle(\"request\", '#', null);\r\n                };\n                if (scope.detachDefaultClass) {\r\n                    if (scope.detachDefaultClass.toLowerCase() === \"true\") {\r\n                    } else {\r\n                        $element.addClass('secondary-navigation white');\r\n                    }\r\n                } else {\r\n                    $element.addClass('secondary-navigation white');\r\n                }\n\n                scope.slidingMenuId = 'sliding-menu-' + new Date().getTime();\n                scope.rightPos = scope.right ? scope.right : 0;\n                scope.leftPos = window.innerWidth - scope.rightPos;\n\n                scope.$watch('show', function (newValue, oldValue) {\r\n                    if (newValue != undefined || newValue != null) {\r\n                        if (newValue) {\r\n                            if (scope.modifyParentStyle) {\r\n                                if (scope.modifyParentStyle.toLowerCase() !== 'false') {\r\n                                    $element.parent().css({\r\n                                        width: 'calc(100% - ' + $element.outerWidth(true) + 'px)'\r\n                                    });\r\n                                }\r\n                            }\n                            $element.css({\r\n                                transform: 'translateX(-' + ($element.outerWidth(true) - scope.rightPos) + 'px)'\r\n                            });\r\n                            $('body').addClass('is-overflowHidden');\r\n                        }\n                        else {\r\n                            if (scope.modifyParentStyle) {\r\n                                if (scope.modifyParentStyle.toLowerCase() !== 'false') {\r\n                                    $element.parent().css({\r\n                                        width: 'calc(100% - ' + scope.rightPos + 'px)'\r\n                                    });\r\n                                }\r\n                            }\n                            $element.css({\r\n                                transform: 'translateX(0px)'\r\n                            });\r\n                            $('body').removeClass('is-overflowHidden');\r\n                            $('body').css('overflow','auto');\r\n                        }\r\n                    }\r\n                });\r\n            },\n            templateUrl: 'shared/directives/slidingMenu/slidingMenuTemplate.html'\r\n        };\r\n    }]);\r\n})();","\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartAccordion', ['$timeout','$parse','$rootScope', function ($timeout,$parse,$rootScope) {\r\n        return {\r\n            restrict: 'EA',\r\n            transclude: true,\r\n            replace: true,\r\n            scope: true,\r\n            link: function (scope, elem, attr) {\r\n                var accordian = {\r\n                    target: elem.find('.accordion-header'),\r\n                    content: elem.find('.accordion-content')\r\n                }, onChange = $parse(attr.onChange);\r\n\r\n                accordian.target.data('isOpen', false);\r\n                accordian.content.hide(0).slideUp(0);\r\n\r\n                attr.$observe('show', function (a, b) {\r\n                    showHideAccordian.call(accordian.target, a == 'true' ? true : false);\r\n                });\r\n\r\n                accordian.target.click(function () {\r\n                    showHideAccordian.call(this, !$(this).data('isOpen'));\r\n                    accEvents();\r\n                    scope.$digest();\r\n                });\r\n                function accEvents() {\r\n                    onChange(scope, {\r\n                        e: {\r\n                            isOpen: accordian.target.data('isOpen')\r\n                        }\r\n                    });\r\n                   \r\n                }\r\n                function showHideAccordian(val) {\r\n                    var _this = $(this),\r\n                        _isOpen = _this.data(\"isOpen\");\r\n                    if (val && !_isOpen) {\r\n                        _this.data(\"isOpen\", true);\r\n                        accordian.content.slideDown();\r\n                    } else if (!val && _isOpen) {\r\n                        _this.data(\"isOpen\", false);\r\n                        accordian.content.slideUp();\r\n                    };\r\n                };\r\n            },\r\n            template: \"<div class='smart-accordion-container' ng-transclude></div>\"\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartAccumulator', ['$timeout', function ($timeout) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\tscope: {\r\n\t\t\t\tngModel: '=?',\r\n\t\t\t\toptions: '=',\r\n\t\t\t\tisSearch: '=',\r\n\t\t\t\tleftLoader: '=',\r\n\t\t\t\trightLoader: '=',\r\n\t\t\t\tmodelCount: '=?',\r\n\t\t\t\toptionCount: '=?',\r\n\t\t\t\tcolumnMappingError: '=',\r\n\t\t\t\tselectionCallback: '&',\r\n\t\t\t\tsearchCallback: '&',\r\n\t\t\t\tmaxLimit: '=',\r\n\t\t\t\tscrollEndRightCallback: '&',\r\n\t\t\t\tscrollEndLeftCallback: '&'\r\n                },\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\t\t\t    scope.label = attrs.label;\r\n\t\t\t    scope.optionCount = angular.isDefined(scope.optionCount) ? scope.optionCount : true;\r\n\t\t\t    scope.modelCount = angular.isDefined(scope.modelCount) ? scope.modelCount : true;\r\n\t\t\t    scope.iconInfo = scope.$eval(attrs.iconInfo);\r\n\t\t\t\tscope.accumulatorHeight = attrs.height + 'px';\r\n\t\t\t\tscope.accumulatorLeftScrollHeight = (attrs.height - 48) + 'px';\r\n\t\t\t    scope.loaderFlag = {\r\n\t\t\t\t    plain: true,\r\n\t\t\t\t    center: true,\r\n\t\t\t\t    message:\"\",\r\n\t\t\t\t    top:'50',\r\n                    left:'131'\r\n\t\t\t\t};\r\n\t\t\t\t//if (scope.isSearch) {\r\n\t\t\t\t//\tscope.accumulatorLeftScrollHeight = (attrs.height - 48) + 'px';            \t\t\r\n\t\t\t\t//}           \t\r\n\t\t\t\tscope.focusAccumulatorSearch = false;\r\n\t\t\t\tscope.isAccumulatorSearchActive = false;\r\n\t\t\t\tscope.showAccumulatorSearch = false;\r\n\t\t\t\tscope.accumulatorSearchModel = \"\";\r\n\t\t\t\tscope.showAccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isAccumulatorSearchActive = true;\r\n\t\t\t\t\tscope.focusAccumulatorSearch = true;\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t    $(\"#searchLeftTextbox\").find(\"input\").focus();\r\n\t\t\t\t}, 500);\r\n\t\t\t\t\t//scope.showMe = true;\r\n\t\t\t\t\tscope.hideAccumulatorSearchClose = true;\r\n\t\t\t\t}\r\n\t\t\t\tscope.hideAcccumulatorSearch = function () {\r\n\t\t\t\t    scope.leftCheckedCount = 0;\r\n\t\t\t\t\tif (scope.accumulatorSearchModel != \"\") {\r\n\t\t\t\t\t    scope.accumulatorSearchModel = \"\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t    scope.isAccumulatorSearchActive = false;\r\n\t\t\t\t\t    scope.focusAccumulatorSearch = false;\r\n\t\t\t\t\t    scope.hideAccumulatorSearchClose = false;\r\n\t\t\t\t\t    $(\"#accumulatorLeftShowSearch\").focus();\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($.isFunction(scope.searchCallback)) {\r\n\t\t\t\t\t    scope.searchCallback({ $data: { text: scope.accumulatorSearchModel, type: \"close\" } });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t    // Right side Search\r\n\t\t\t\tscope.smartScrollLeftEnd = function () {\r\n\t\t\t\t    if ($.isFunction(scope.scrollEndLeftCallback)) {\r\n\t\t\t\t        scope.scrollEndLeftCallback();\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.smartScrollRightEnd = function () {\r\n\t\t\t\t    if ($.isFunction(scope.scrollEndRightCallback)) {\r\n\t\t\t\t        scope.scrollEndRightCallback();\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.focusRightAccumulatorSearch = false;\r\n\t\t\t\tscope.isRightAccumulatorSearchActive = false;\r\n\t\t\t\tscope.showRightAccumulatorSearch = false;\r\n\t\t\t\tscope.showRightAccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isRightAccumulatorSearchActive = true;\r\n\t\t\t\t\tscope.focusRightAccumulatorSearch = true;\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t    $(\"#searchRightTextbox\").find(\"input\").focus();\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t\t//scope.showMe = true;\r\n\t\t\t\t\tscope.hideRightAccumulatorSearchClose = true;\r\n\t\t\t\t}\r\n\t\t\t\tscope.hideRightAcccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isRightAccumulatorSearchActive = false;\r\n\t\t\t\t\tscope.focusRightAccumulatorSearch = false;\r\n\t\t\t\t\tscope.hideRightAccumulatorSearchClose = false;\r\n\t\t\t\t\t$(\"#accumulatorRightShowSearch\").focus();\r\n\r\n\t\t\t\t}\r\n\t\t\t\tscope.searchTextKeyUpFn = function (e) {\r\n\t\t\t\t    if ($.isFunction(scope.searchCallback)) {\r\n\t\t\t\t        scope.searchCallback({ $data: { text: e.target.value, type: \"textfield\", \"e\": e } });\r\n\t\t\t\t    }\r\n\t\t\t\t    scope.leftCheckedCount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\tscope.leftCheckedCount = 0;\r\n\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\tscope.leftBoxListCheck = function (arg) {\r\n\t\t\t\t    if (arg.isChecked)\r\n\t\t\t\t        scope.leftCheckedCount++;\r\n\t\t\t\t    else\r\n\t\t\t\t        scope.leftCheckedCount--;\r\n\r\n\t\t\t\t    for (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t        if (((scope.leftCheckedCount + scope.ngModel.length >= scope.maxLimit) && !scope.options[i].isChecked) || (scope.maxLimit == scope.leftCheckedCount && !scope.options[i].isChecked)) {\r\n\t\t\t\t            scope.options[i].isDisabled = true;\r\n\t\t\t\t        } else {\r\n\t\t\t\t            if (scope.ngModel.length >= scope.maxLimit && scope.options[i].$$hashKey == arg.$$hashKey)\r\n\t\t\t\t                scope.options[i].isChecked = false;\r\n\t\t\t\t                 scope.options[i].isDisabled = false;\r\n\t\t\t\t        }\r\n\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\tscope.rightBoxListCheck = function () {\r\n\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\tfor (var i = 0; i < scope.ngModel.length; i++) {\r\n\t\t\t\t\t\tif (!scope.ngModel[i].isDisabled) {\r\n\t\t\t\t\t\t\tif (scope.ngModel[i].isChecked) {\r\n\t\t\t\t\t\t\t\tscope.rightCheckedCount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            function generateKey(obj) {\r\n\t\t\t\t\tvar getProperty = \"\";\r\n\t\t\t\t\tvar getKey = \"\";\r\n\t\t\t\t\tvar addedKeys = scope.$eval(attrs.addKeys);\r\n\t\t\t\t\tfor (var i = 0; i < addedKeys.length; i++) {\r\n\t\t\t\t\t\tgetProperty = addedKeys[i];\r\n\t\t\t\t\t\tgetKey = getKey + \" \" + obj[getProperty];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn getKey;\r\n\t\t\t\t}\r\n\t\t\t\tscope.$watch('options', function (newOptions) {\r\n\t\t\t\t\tscope.options = newOptions;\r\n\t\t\t\t\tfor (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t\t\tif (scope.options[i].isGroup) {\r\n\t\t\t\t\t\t\tfor (var j = 0; j < scope.options[i].group.length; j++) {\r\n\t\t\t\t\t\t\t\tscope.options[i].group[j].optionKey = generateKey(scope.options[i].group[j]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tscope.options[i].optionKey = generateKey(scope.options[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true);\r\n\t\t\t\t\r\n\t\t\t\t// move the selected item to the right\r\n\t\t\t\tscope.moveRight = function (accData) {\r\n\t\t\t\t\tvar selectedOptions = [];\r\n\t\t\t\t\tif (scope.leftCheckedCount > 0) {\r\n\t\t\t\t\t\tfor (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t\t\t\tif (scope.options[i].isChecked) {\r\n\t\t\t\t\t\t\t\tif (scope.options[i].isGroup) {\r\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < scope.options[i].group.length; j++) {\r\n\t\t\t\t\t\t\t\t\t\tscope.ngModel.push(scope.options[i].group[j]);\r\n\t\t\t\t\t\t\t\t\t\tscope.options[i].group[j].isChecked = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tscope.options[i].isChecked = true;\r\n\t\t\t\t\t\t\t\t\tselectedOptions.push(scope.options[i]);\r\n\t\t\t\t\t\t\t\t\tscope.ngModel.push(scope.options[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// get the add objects\r\n\t\t\t\t\t\t\t\t//scope.addscope.push(scope.leftBoxList[i]);\r\n\t\t\t\t\t\t\t\tvar index = scope.options.indexOf(scope.options[i]);\r\n\t\t\t\t\t\t\t\tscope.options.splice(index, 1);\r\n\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($.isFunction(scope.selectionCallback)) {\r\n\t\t\t\t\t\t\tscope.selectionCallback({ e: selectedOptions, direction: 'LTR' });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.rightBoxListCheck();\r\n\t\t\t\t\tscope.leftCheckedCount = 0;\r\n\t\t\t\t    //scope.leftSelectAll = false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// move the selected item to the left\r\n\t\t\t\tvar selectedOptions = [];\r\n\t\t\t\tscope.moveLeft = function (accData) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (scope.rightCheckedCount > 0) {\r\n\t\t\t\t\t\tfor (var i = 0; i < scope.ngModel.length; i++) {\r\n\t\t\t\t\t\t\tif (!scope.ngModel[i].isDisabled) {\r\n\t\t\t\t\t\t\t\tif (scope.ngModel[i].isChecked) {\r\n\r\n\t\t\t\t\t\t\t\t\tscope.ngModel[i].isChecked = false;\r\n\t\t\t\t\t\t\t\t\tscope.options.push(scope.ngModel[i]);\r\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < scope.options.length; j++) {\r\n\t\t\t\t\t\t\t\t\t    scope.options[j].isDisabled = false;\r\n\t\t\t\t\t\t\t\t\t    scope.rightCheckedCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tselectedOptions.push(scope.ngModel[i]);\r\n\r\n\t\t\t\t\t\t\t\t\t// get the remove objects\r\n\t\t\t\t\t\t\t\t\t//scope.removescope.push(scope.rightBoxList[i]);\r\n\t\t\t\t\t\t\t\t\tvar index = scope.ngModel.indexOf(scope.ngModel[i]);\r\n\t\t\t\t\t\t\t\t\tscope.ngModel.splice(index, 1);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($.isFunction(scope.selectionCallback)) {\r\n\t\t\t\t\t\t\tscope.selectionCallback({ e: selectedOptions, direction: 'RTL' });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\t//scope.rightSelectAll = false;\r\n\t\t\t\t};\r\n\t\t\t\tscope.$watch('ngModel', function (newModel) {\r\n\t\t\t\t    scope.accumulatorSearchModel = \"\";\r\n\t\t\t\t    scope.accumulatorRightSearchModel = \"\";\r\n\t\t\t\t\tscope.ngModel = newModel;\r\n\t\t\t\t\tif (scope.ngModel.length <= 0) {\r\n\t\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tscope.$watch('rightLoader', function (rightLoaderUpdate) {\r\n\t\t\t\t    scope.rightLoader = rightLoaderUpdate;\r\n\t\t\t\t});\r\n\t\t\t\tscope.$watch('leftLoader', function (leftLoaderUpdate) {\r\n\t\t\t\t    scope.leftLoader = leftLoaderUpdate;\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/smartAccumulator/smartAccumulatorTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartCarousel', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                \"apiObj\": \"=\",\r\n                \"carouselArr\": \"=\",\r\n                \"arrowClick\": \"&\",\r\n                \"getItem\": \"&\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var margin = 0;\r\n                var marginToChange = \"margin-left\";\r\n                var dimensionToChange = \"width\";\r\n                var textAlign = \"left\";\r\n                var stepSize = 94;\r\n\r\n                scope.scrollBarClass = \"scrollBarClass \" + scope.carouselArr.classes;\r\n                scope.arrowClass = \"icon iconMedium reqNavArrow \" + scope.carouselArr.arrow;\r\n\r\n                if (scope.carouselArr.type === \"horizontal\" && scope.carouselArr.id === \"leftBar\") {\r\n                    textAlign = \"right\";\r\n                }\r\n\r\n                if (scope.carouselArr.type == \"vertical\") {\r\n                    marginToChange = \"margin-top\";\r\n                    dimensionToChange = \"height\";\r\n                    textAlign = \"top\";\r\n                    stepSize = 94;\r\n                }\r\n\r\n                scope.internalAPIObj = scope.apiObj || {};\r\n                scope.internalAPIObj.arrowClick = function (item) {\r\n                    scope.arrowClick(scope, {\r\n                        e: item\r\n                    });\r\n                };\r\n\r\n                scope.getClickedItem = function (item) {\r\n                    scope.getItem({ e: item });\r\n                }\r\n                scope.animate = false;\r\n\r\n                scope.internalAPIObj.resetUI = function (availableLength, addAnimation) {\r\n                    var collectionEle = angular.element(element.children()[1]);\r\n\r\n                    var length = scope.carouselArr.items.length * stepSize;\r\n\r\n                    scope.animate = true;\r\n\r\n                    if (dimensionToChange == \"height\") {\r\n                        collectionEle.css(\"height\", availableLength);\r\n                    } else {\r\n                        collectionEle.css(\"width\", \"100%\");\r\n                    }\r\n\r\n                    if ((availableLength) <= length) {\r\n\r\n                        if (scope.carouselArr.id === \"topBar\") {\r\n                            collectionEle.removeClass('topBarOverflow').addClass('topBarOverflowHidden');\r\n                        }\r\n                        scope.carouselArr.showArrow = true;\r\n                    } else {\r\n\r\n                        if (scope.carouselArr.id === \"topBar\") {\r\n                            collectionEle.removeClass('topBarOverflowHidden').addClass('topBarOverflow');\r\n                        }\r\n                        scope.carouselArr.showArrow = false;\r\n                    }\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/smartCarousel/smartCarousel.html'\r\n        };\r\n    }]);\r\n})();\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tangular.module('SMART2').directive('countdown', ['$interval', function ($interval) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\ttransclude: true,\r\n\t\t\tscope: {\r\n\t\t\t    date: '@',\r\n                timeoutCallback: '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tvar from = new Date(attrs.date);\r\n\r\n\t\t\t\tfunction timer(t) {\r\n\t\t\t\t\tvar days = Math.floor(t / 86400);\r\n\t\t\t\t\tt -= days * 86400;\r\n\t\t\t\t\tvar hours = Math.floor(t / 3600) % 24;\r\n\t\t\t\t\tt -= hours * 3600;\r\n\t\t\t\t\tvar minutes = Math.floor(t / 60) % 60;\r\n\t\t\t\t\tt -= minutes * 60;\r\n\t\t\t\t\tvar seconds = t % 60;\r\n\t\t\t\t\tif (!days && !hours && !minutes && !seconds) {\r\n\t\t\t\t\t\tif (angular.isDefined(timerObj)) {\r\n\t\t\t\t\t\t\t$interval.cancel(timerObj);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (attrs.timeoutCallback && angular.isFunction(scope.timeoutCallback)) {\r\n\t\t\t\t\t\t    scope.timeoutCallback();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn days + 'd ' + hours + 'h ' + minutes + 'm ' + seconds + 's';\r\n\t\t\t\t}\r\n\t\t\t\tvar timerObj = $interval(function () {\r\n\t\t\t\t\tvar diff = Math.floor((from.getTime() - new Date().getTime()) / 1000);\r\n\t\t\t\t\t$(element).text(timer(diff));\r\n\t\t\t\t}, 1000)\r\n\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartDocSlider', ['$parse', '$focusOnField', function ($parse, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n             scope: true,\r\n            link: function (scope, element, attrs) {\r\n\r\n                var onHide = $parse(attrs.onHide);\r\n                scope.commonSelectedOptionInside = { title: '' };\r\n\r\n                attrs.$observe(\"slideObj\", function (value) {\r\n                    if (attrs.slideObj) {\r\n\r\n                        var slideObj = JSON.parse(attrs.slideObj);\r\n                        scope.src = slideObj.src;\r\n                        scope.list = slideObj.list;\r\n                        scope.index = slideObj.index;\r\n                        scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                        scope.updateTheIndexInController = function (obj) {\r\n                            scope.index = scope.list.indexOf(obj);\r\n                            scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                            scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                            var listLength = scope.list.length;\r\n                            if (scope.index == 0) {\r\n                                scope.prevIndex = listLength - 1;\r\n                            }\r\n                            else if (scope.index == listLength - 1) {\r\n                                scope.nextIndex = 0;\r\n                            }\r\n\r\n                        }\r\n\r\n                        scope.nextIndex = angular.copy(scope.index);\r\n                        scope.prevIndex = angular.copy(scope.index);\r\n\r\n                        var listLength = scope.list.length;\r\n\r\n                        if (scope.index == 0) {\r\n                            scope.nextIndex++;\r\n                            scope.prevIndex = listLength - 1;\r\n                        }\r\n                        else if (scope.index == listLength - 1) {\r\n                            scope.nextIndex = 0;\r\n                            scope.prevIndex--;\r\n                        }\r\n                        else if (scope.index < listLength - 1) {\r\n                            scope.nextIndex++;\r\n                            scope.prevIndex--;\r\n                        }\r\n                    }\r\n                });\r\n                scope.tabbingFocus = false;\r\n                //Need to change the code\r\n                scope.$watch(attrs.ngShow, function (value) {\r\n                    if (value) {\r\n                        angular.element('body').css('overflow', 'hidden');\r\n                        angular.element(document.activeElement).addClass(\"sliderDocTrigger\");\r\n                        setTimeout(function () { firstFieldFocused();}, 500);\r\n                      \r\n                    } else {\r\n                        angular.element('body').css('overflow', '');\r\n                        angular.element('.sliderDocTrigger').focus().removeClass('sliderDocTrigger');\r\n                        scope.tabbingFocus = false;\r\n                    }\r\n                });\r\n\r\n                scope.next = function () {\r\n                    scope.tabbingFocus = false;\r\n                    var listLength = scope.list.length;\r\n                    var modal = angular.element('.slide-view-modal');\r\n\r\n                    modal.css('left', '-50%');\r\n\r\n                    if (scope.index < listLength - 1)\r\n                        scope.index++;\r\n                    else if (scope.index == listLength - 1)\r\n                        scope.index = 0;\r\n\r\n                    if (scope.index == 0) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = listLength - 1;\r\n                    }\r\n                    else if (scope.index == listLength - 1) {\r\n                        scope.nextIndex = 0;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    else if (scope.index < listLength - 1) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    setTimeout(function () {\r\n                        modal.css('transition', 'none');\r\n                        modal.css('display', 'none');\r\n                        modal.css('left', '150%');\r\n                        modal.css('display', 'block');\r\n                    }, 350);\r\n                    setTimeout(function () {\r\n                        modal.css('transition', '0.5s ease-in-out');\r\n                        modal.css('left', '50%');\r\n                        firstFieldFocused();\r\n                    }, 370);\r\n                    scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                 \r\n                }\r\n\r\n                scope.prev = function () {\r\n                    scope.tabbingFocus = false;\r\n                    var listLength = scope.list.length;\r\n                    var modal = angular.element('.slide-view-modal');\r\n\r\n                    modal.css('left', '150%');\r\n\r\n                    if (scope.index > 0)\r\n                        scope.index--;\r\n                    else if (scope.index == 0)\r\n                        scope.index = listLength - 1;\r\n\r\n                    if (scope.index == 0) {\r\n                        scope.prevIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = listLength - 1;\r\n                    }\r\n                    else if (scope.index == listLength - 1) {\r\n                        scope.prevIndex = 0;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    else if (scope.index < listLength - 1) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    setTimeout(function () {\r\n                        modal.css('transition', 'none');\r\n                        modal.css('display', 'none');\r\n                        modal.css('left', '-50%');\r\n                        modal.css('display', 'block');\r\n                    }, 350);\r\n                    setTimeout(function () {\r\n                        modal.css('transition', '0.7s ease-in-out');\r\n                        modal.css('left', '50%');\r\n                        firstFieldFocused();\r\n                    \r\n                    }, 370);\r\n                    scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                   \r\n                };\r\n\r\n\r\n                scope.close = function () {\r\n\r\n                    if (angular.isFunction(onHide)) {\r\n                        //scope.$apply(function () {\r\n                        onHide(scope, { e: \"\" });\r\n                        //});\r\n                    };\r\n                    scope.tabbingFocus = false;\r\n                };\r\n\r\n                var firstFieldFocused = function () {\r\n                    scope.tabbingFocus = true;\r\n                    var $fistField = angular.element('.docSlider-content').find(\"a, input, button, textarea\").first();\r\n                    $focusOnField($fistField);\r\n                };\r\n\r\n                scope.funcOnKeyDown = function (e) {\r\n                    if (e.keyCode == 27) {\r\n                        scope.close();\r\n                    } else if (e.keyCode == 37) {\r\n                        scope.prev()\r\n                    } else if (e.keyCode == 39) {\r\n                        scope.next()\r\n                    }\r\n                };\r\n              \r\n            },\r\n            templateUrl: 'shared/directives/smartDocSlider/smartDocSlider.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('httpLoaderInterceptor', ['$rootScope', '$timeout', function ($rootScope, $timeout) {\r\n\r\n        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n            $rootScope.pageLoaderFlagController = true;\r\n        });\r\n\r\n        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\r\n            //$timeout(function () {\r\n                $rootScope.pageLoaderFlagController = false;\r\n            //}, 2000);\r\n        });\r\n\r\n        var requestCount = 0;\r\n        function startRequest(config) {\r\n            if (!requestCount) {\r\n                //$rootScope.pageLoaderFlagController = true;\r\n            }\r\n            requestCount++;\r\n            return config;\r\n        }\r\n        function endRequest(arg) {\r\n            if (!requestCount)\r\n                return;\r\n            requestCount--;\r\n            if (!requestCount) {\r\n                //$rootScope.pageLoaderFlagController = false;\r\n            }\r\n            return arg;\r\n        }\r\n        return {\r\n            'request': startRequest,\r\n            'requestError': endRequest,\r\n            'response': endRequest,\r\n            'responseError': endRequest\r\n        };\r\n    }]);\r\n\r\n    angular.module('SMART2').config(['$httpProvider', function ($httpProvider) {\r\n        $httpProvider.interceptors.push('httpLoaderInterceptor');\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartGlobalLoader', ['$timeout', '$translate', function ($timeout, $translate) {\r\n        return {\r\n            restrict: 'AE',\r\n            replace: true,\r\n            scope: {\r\n                isFixed: '=?',\r\n                config: '=?',\r\n                onCancel: \"&\",\r\n            },\r\n            link: function (scope, element, attrs) {\r\n            \tvar message = $translate.instant(\"loadingMsg\");\r\n            \t\r\n                scope.conf = angular.extend({\r\n                    message: message,\r\n                    center: false,\r\n                    plain: false,\r\n                    bgwhite: false,\r\n                    top: undefined,\r\n                    left: undefined\r\n                }, scope.config);\r\n                scope.messageArray = scope.conf.message.split(\"\\n\");\r\n                //Count left\r\n                $timeout(function () {\r\n                    var widthCount = angular.element(element[0].querySelector('.relative-loader-container')).width();\r\n                    var heightCount = angular.element(element[0].querySelector('.relative-loader-container')).height();\r\n                    scope.leftTopCount = {\r\n                        left: (scope.conf.left == undefined || scope.conf.left == null || scope.conf.left == '') ? \"calc(50% - \" + widthCount / 2 + \"px)\" : scope.conf.left + \"px\",\r\n                        top: (scope.conf.top == undefined || scope.conf.top == null || scope.conf.top == '') ? \"calc(50% - \" + heightCount / 2 + \"px)\" : scope.conf.top+\"px\"\r\n                    };\r\n                });\r\n\t\t\t\t\n                if (angular.isDefined(attrs.onCancel)) {\r\n                \tscope.cancelBtn = { title: $translate.instant(\"cancelBtn\") };\r\n                \tscope.conf.isCancel = true;\n                }\n\n                scope.cancelCallback = function (e) {\r\n                \tscope.onCancel({ $event: e });\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/smartGlobalLoader/smartGlobalLoader.html'\r\n        };\r\n    }]);\r\n})();","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name SmartHierarchy\r\n * @description This directive is useful for creating hierarchical structure.\r\n * \r\n * @attr {Object} config\r\n *    Config object is expected to decide the behaviour of the component.\r\n * @attr {Function} callback\r\n *    Callback function when selections are done in component\r\n * \r\n * @example\r\nController : \r\n    config :\r\n     $scope.treeComponentConfig = {\r\n                selectedNodes: \"\", // Coma seperated codes string given to component for pre selection, \r\n                \t\t\t\t   // so the default selections can be shown selected when the component \r\n                \t\t\t\t   // in initialized.\r\n                isRadio: false, // Boolean values to toggle between checkBox & radioButton\r\n                getHierarchyOnSelection: true, // If set to true , selection hierarchy\r\n                                               // (uptil the relevent parent) also will be recieved \r\n                                               // in selection callback.\r\n                isLazyLoad: true, // If set to true, data would be fetched from the server on demand \r\n                                  // (lazyLoading on scroll & node expansion)\r\n                data: null, // Custom data can also be passed to component, representation would be in hierarchical manner.\r\n                disableLevelSelection: '', // comma seperated string values of levels to be shown disabled eg. \"1,2,3\".\r\n                title: 'Category', // Title of the component.\r\n                getSelections: false, // On setting it true, it will call the callback function \r\n                                      // provided to the component with seleted values in the ouput.\r\n                clearCache: false, // On setting it true, it will clear the Java script heap \r\n                                   // runtime memory which will reduce the memory foot print of the web page.\r\n                height: '328px', // Height can be set to the component.\r\n                isSearchEnabled : true, // Bollean value to toggle the visibility of search bar.\r\n                requestParameter: { // Request parameter is expected to fetch the data from the server. \r\n                    navigationContext: \"PAS\",\r\n                    userExecutionContext: '{\"ClientName\":\"abc,....}',\r\n                    documentCode: null,\r\n                    contactCode: null,\r\n                }\r\n            };\r\n    callback :\r\n         $scope.treeComponentCallback = function (e) {\r\n                console.log(e);\r\n\r\n                // Un comment the below logic to see admin use case.\r\n                // TODO : getHierarchyOnSelection:true (in tree config)\r\n\r\n                // var obj = { 'PASList': [] };\r\n                // var levelData = _.groupBy(_.flatten(e.selectionHierarchy), \"Level\");\r\n                // _.each(levelData, function (data, key) {\r\n                    // _.each(data, function (n) {\r\n                        // n['selection'] = \"0\";\r\n                    // });\r\n                    // obj['PASList'].push({\r\n                        // \"Level\": key,\r\n                        // \"PASDetails\": data\r\n                    // });\r\n                // });\r\n                // $scope.treeComponentConfig.isRadio = true;\r\n                // $scope.treeComponentConfig.data = obj;\r\n                // $scope.treeComponentConfig.selectedNodes = e.selections[0]['ID'].toString();\r\n         }\r\n  Usage:\r\n      <smart-hierarchy-component config=\"treeComponentConfig\" callback=\"treeComponentCallback\"></smart-hierarchy-component>\r\n      */\r\n(function (angular) {\r\n    'use strict';\r\n    var hierarchyCounter = 0;\r\n    angular.module('smartHierarchyComponent', [])\r\n    .directive('smartHierarchyComponent', ['$timeout', 'RESTApi', '$q', '$rootScope', 'APPCONSTANTS', '$translate',\r\n      function ($timeout, RESTApi, $q, $rootScope, APPCONSTANTS, $translate) {\r\n          return {\r\n              restrict: 'E',\r\n              replace: true,\r\n              scope: {\r\n                  config: '=',\r\n                  callback: '&'\r\n              },\r\n              link: function (scope, element, attrs) {\r\n                  /*config for the directive*/\r\n                  scope.hierarchyCounter = hierarchyCounter++;\r\n                  scope.treeConfig = scope.config;\r\n                  scope.searchFieldVal = '';\r\n                  scope.cancelTitle = scope.searchFieldVal == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                  scope.checkCondForTemplate = function (a_data) {\r\n                      var boolTemplate = false;\r\n                      if (scope.searchFieldVal.length <= 2 && !scope.treeConfig.isReadOnly) {\r\n                          boolTemplate = true;\r\n                      } else if (scope.searchFieldVal.length <= 2 && scope.treeConfig.isReadOnly && a_data.selection != '0' && !scope.treeConfig.selectAllToggle) {\r\n                          boolTemplate = true;\r\n                      } else if (scope.searchFieldVal.length <= 2 && scope.treeConfig.isReadOnly && scope.treeConfig.selectAllToggle) {\r\n                          boolTemplate = true;\r\n                      }\r\n                      return boolTemplate;\r\n                  }\r\n                  scope.templateCheck2 = function (a_category) {\r\n                      var boolTemplate = false;\r\n                      if (scope.treeConfig.isReadOnly && a_category.selection != '0') {\r\n                          boolTemplate = true;\r\n                      } else if(!scope.treeConfig.isReadOnly) {\r\n                          boolTemplate = true;\r\n                      }\r\n                      return boolTemplate;\r\n                  }\r\n                  scope.secondaryLinkCallback = function () {\r\n                      scope.treeConfig.secondaryLink.callback();\r\n                  }\r\n                  scope.treeConfig.isSelectedOnly = false;\r\n                  scope.noRecordsFound = false;\r\n                  if (!scope.treeConfig.hasOwnProperty('modalButtonShow')) {\r\n                      scope.treeConfig.modalButtonShow = false;\r\n                  }\r\n\r\n                  if (!scope.treeConfig.hasOwnProperty('isMandatory')) {\r\n                      scope.treeConfig.isMandatory = true;\r\n                  }\r\n                  if (!scope.treeConfig.hasOwnProperty('listIcon')) {\r\n                      scope.treeConfig.listIcon = null;\r\n                  }\r\n                  if (!scope.treeConfig.hasOwnProperty('selectAllToggle')) {\r\n                      scope.treeConfig.selectAllToggle = false;\r\n                  }\r\n\r\n\r\n                  var doneCallback = scope.$eval(scope.callback);\r\n\r\n                  scope.config.refreshConfig = function (newData) {\r\n                      scope.treeConfig = newData;\r\n                      resetValue(scope.treeConfig);\r\n\r\n                  }\r\n\r\n                  var resetValue = function (data) {\r\n                      if (scope.treeConfig.isRadio) {\r\n\r\n                          scope.uniqueRadioGroupName = uniqueIDGenerator();\r\n                      }\r\n\r\n                      if (scope.treeConfig.clearCache) {\r\n                          resetDataSourcesAndPromises();\r\n                          scope.isLoading = false;\r\n                          scope.treeConfig.clearCache = false;\r\n                      }\r\n\r\n                      dataRecievedCallPromise;\r\n                      preselectionRecievedPromise;\r\n                      promises = [];\r\n\r\n                      /*Local variables*/\r\n                      navContext = scope.treeConfig.navigationContext;\r\n                      isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                      dataSet;\r\n                      searchBucket = 50;\r\n                      lazyLoadingBucket = 50;\r\n                      maxLevel = 1;\r\n                      lazyLoadOffset;\r\n                      lazyLoadMarker = [];\r\n                      levelKey = 'level';\r\n\r\n                      //levelWiseData = {};\r\n                      parentStringConstant = \"parentString\";\r\n                      parentCodeStringConstant = \"parentCodeString\";\r\n                      preselection;\r\n                      isInitialServiceCalled = false;\r\n                      searchCategories = [];\r\n                      baseLevelExpectNode = [];\r\n\r\n                      nodeExpandingCodeProperty;\r\n                      dataProperty;\r\n                      levelWiseDataProperty;\r\n                      searchProperty;\r\n                      modelProperty;\r\n\r\n                      //scope.totalSelection = 0;\r\n                      //totalID = [];\r\n                      //totalName = [];\r\n\r\n                      selectAllBool = false;\r\n\r\n                      scope.getUserSelectionArray = [];\r\n                      scope.selectionAndCountOptions = false;\r\n\r\n                      scope.treeType = scope.treeConfig.treeType;\r\n\r\n                      scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                      scope.isDisabled = scope.treeConfig.isDisabled;\r\n                      scope.isSingleSelect = scope.treeConfig.isRadio ? scope.treeConfig.isRadio : false;\r\n\r\n\r\n\r\n                      // if(scope.treeConfig.requestParameter)\r\n                      // {\r\n\r\n                      //           //scope.treeConfig.requestParameter = n;\r\n                      //           RESTApi.setDocumentId(scope.treeConfig.requestParameter.documentCode);\r\n                      //           RESTApi.setContactCode(scope.treeConfig.requestParameter.contactCode);\r\n                      //           RESTApi.setUserContext(scope.treeConfig.requestParameter.userExecutionContext);\r\n                      //           RESTApi.setEnvironment(scope.treeConfig.requestParameter.environment);\r\n                      //           RESTApi.setRequestObject(scope.treeConfig.requestParameter.requestObject);\r\n                      //           setKeysAsPerNavigationContext(scope.treeConfig.requestParameter.navigationContext);\r\n                      //           navContext = scope.treeConfig.requestParameter.navigationContext;\r\n\r\n                      //         init();\r\n\r\n                      // }\r\n\r\n                      scope.showSelectAll = scope.treeConfig.showSelectAll;\r\n                      scope.showClearSelection = scope.treeConfig.showClearSelection;\r\n                      scope.showSelectionCount = scope.treeConfig.showSelectionCount;\r\n                      scope.enableLastLevelSelection = scope.treeConfig.enableLastLevelSelection;\r\n\r\n                  };\r\n\r\n\r\n                  /* scope.$watch('config', function (n, o) {\r\n                    if (n) {\r\n                      scope.treeConfig = null;\r\n                      scope.treeConfig = scope.config;\r\n                      clearAllsearch();\r\n                     \r\n                      dataRecievedCallPromise;\r\n                      preselectionRecievedPromise;\r\n                      promises = [];\r\n                     \r\n                      navContext = scope.treeConfig.navigationContext;\r\n                      isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                      dataSet;\r\n                      searchBucket = 50;\r\n                      lazyLoadingBucket = 50;\r\n                      maxLevel = 1;\r\n                      lazyLoadOffset;\r\n                      lazyLoadMarker = [];\r\n                      levelKey = 'level';\r\n                      levelWiseData = {};\r\n                      parentStringConstant = \"parentString\";\r\n                      parentCodeStringConstant = \"parentCodeString\";\r\n                      preselection;\r\n                      isInitialServiceCalled = false;\r\n                      searchCategories = [];\r\n                      baseLevelExpectNode = [];\r\n                      nodeExpandingCodeProperty;\r\n                      dataProperty;\r\n                      levelWiseDataProperty;\r\n                      searchProperty;\r\n                      modelProperty;\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n                      selectAllBool = false;\r\n                      scope.getUserSelectionArray =[];\r\n                      scope.treeType = scope.treeConfig.treeType;\r\n                      scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                      scope.isDisabled = scope.treeConfig.isDisabled;\r\n                    }\r\n                  });*/\r\n\r\n                  function clearAllsearch() {\r\n                      serverSearchVal = \"\";\r\n                      scope.searchResults.length = 0;\r\n                      searchDataYetToBeDisplayed.length = 0;\r\n                      searchWithContainsHitResult.length = 0;\r\n                      scope.searchText = '';\r\n                      scope.searchFieldVal = '';\r\n                  }\r\n\r\n\r\n                  /*scope.$watch('config.clearCache', function (n, o) {\r\n                    if (n) {\r\n                     resetDataSourcesAndPromises();\r\n                     scope.isLoading = false;\r\n                     scope.config.clearCache = false;\r\n                   }\r\n                });*/\r\n\r\n\r\n                  var deregisterConfigSelection = scope.$watch('config.getSelections', function (n, o) {\r\n                      if (n) {\r\n                          getSelections();\r\n                          scope.config.getSelections = false;\r\n                      }\r\n                  });\r\n\r\n\r\n                  var deregReqContactCode = scope.$watch('config.requestParameter.contactCode', function (n, o) {\r\n                      if (n != o) {\r\n                          RESTApi.setContactCode(n);\r\n                          init();\r\n                      }\r\n                  });\r\n                  var deregReqParam = scope.$watch('config.requestParameter', function (n, o) {\r\n                      //if (!scope.treeConfig.data && n) {\r\n                      if (n) {\r\n                          scope.treeConfig.requestParameter = n;\r\n\r\n                          RESTApi.setDocumentId(n.documentCode);\r\n                          RESTApi.setContactCode(n.contactCode);\r\n                          RESTApi.setUserContext(n.userExecutionContext);\r\n                          RESTApi.setEnvironment(APPCONSTANTS.userPreferences.URLs.AppURL);\r\n                          RESTApi.setRequestObject(n.requestObject);\r\n\r\n                          setKeysAsPerNavigationContext(n.navigationContext);\r\n                          navContext = n.navigationContext;\r\n\r\n                          if (n.hasOwnProperty('url')) {\r\n                              RESTApi.setUrl(n.url);\r\n                          }\r\n\r\n                          //request params than it must go in \r\n                          //if (!isInitialServiceCalled)\r\n                          init();\r\n                      }\r\n                      //scope.treeConfig.requestParameter = null;\r\n                  });\r\n                  scope.selectOptions = [{\r\n                      \"code\": 1,\r\n                      \"name\": \"Select All\"\r\n                  }, {\r\n                      \"code\": 0,\r\n                      \"name\": \"Single Select\"\r\n                  }];\r\n\r\n                  scope.selectType = { \"code\": 0, \"name\": \"Single Select\" };\r\n\r\n                  var initSelectallModel = function () {\r\n                      //----SelectAllToggle----//\r\n                      scope.onSelectTypeChange = function (selectType) {\r\n                          scope.selectType = selectType;\r\n\r\n                          if (selectType.code == 1) {\r\n                              scope.clearAllSelection();\r\n                              //scope.treeConfig.isReadOnly = true;\r\n                          }\r\n                      }\r\n                      if (scope.treeConfig.selectType === 1) {\r\n                          scope.clearAllSelection();\r\n                          scope.selectType = { \"code\": 1, \"name\": \"Select All\" };\r\n                      } else {\r\n                          scope.selectType = { \"code\": 0, \"name\": \"Single Select\" };\r\n                      }\r\n                  }\r\n\r\n                  var deregConfigData = scope.$watch('config.data', function (n, o) {\r\n                      if (n) {\r\n                          initSelectallModel();\r\n                          if (scope.config.selectedNodes && scope.selectedData.length > 0) {\r\n                              scope.config.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : !scope.treeConfig.isRadio;\r\n                          } else if (!scope.config.selectedNodes || !scope.config.selectedNodes) {\r\n                              scope.config.isReadOnly = false;\r\n                          }\r\n                          setKeysAsPerNavigationContext(scope.treeConfig.navigationContext);\r\n                          navContext = scope.treeConfig.navigationContext;\r\n                          resetDataSourcesAndPromises(true);\r\n                          createLevelWiseDataSet(_.sortBy(n[dataProperty], 'Level'));\r\n                          dataRecievedCallPromise.resolve();\r\n                          renderLevels();\r\n                      }\r\n                      scope.config.data = null;\r\n                  });\r\n\r\n                  var deregSelectedNodes = scope.$watch('config.selectedNodes', function (n, o) {\r\n                      if (n) {\r\n                          preselection = n.split(',');\r\n                          if (preselection && preselection.length == 0) {\r\n                              scope.treeConfig.isReadOnly = false;\r\n                          }\r\n                          if (preselectionRecievedPromise)\r\n                              preselectionRecievedPromise.resolve();\r\n                      }\r\n                      scope.config.selectedNodes = null;\r\n                  });\r\n\r\n\r\n\r\n                  /*scope.$watch('config.isRadio', function(n, o) {\r\n                    scope.isSingleSelect = n;\r\n                    if (scope.isSingleSelect) {\r\n                     scope.uniqueRadioGroupName = uniqueIDGenerator();\r\n                   }\r\n                   scope.config.isRadio = false;\r\n                 });*/\r\n\r\n\r\n\r\n\r\n\r\n                  var navContext;\r\n                  /*promise*/\r\n                  var dataRecievedCallPromise;\r\n                  var preselectionRecievedPromise;\r\n                  var promises = [];\r\n                  var selectAllBool = false;\r\n                  /*Local variables*/\r\n                  var isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                  var dataSet;\r\n                  var searchBucket = 50;\r\n                  var lazyLoadingBucket = 50;\r\n                  var maxLevel = 1;\r\n                  var lazyLoadOffset;\r\n                  var lazyLoadMarker = [];\r\n                  var levelKey = 'level';\r\n                  var levelWiseData = {};\r\n                  var parentStringConstant = \"parentString\";\r\n                  var parentCodeStringConstant = \"parentCodeString\";\r\n                  var preselection;\r\n                  var isInitialServiceCalled = false;\r\n                  var searchCategories = [];\r\n                  var baseLevelExpectNode = [];\r\n                  var nodeExpandingCodeProperty;\r\n                  var dataProperty;\r\n                  var levelWiseDataProperty;\r\n                  var searchProperty;\r\n                  var modelProperty;\r\n                  var treeTypeObject = \"Generic\";\r\n                  scope.codeProperty = 'ID';\r\n                  scope.titleProperty = 'Name';\r\n                  scope.levelProperty = 'Level';\r\n                  scope.parentProperty = 'ParentID';\r\n                  scope.getUserSelectionArray = [];\r\n                  scope.treeType = \"Generic\";\r\n                  scope.totalSelection = 0;\r\n\r\n                  scope.isReadOnly = false;\r\n                  scope.isDisabled = false;\r\n\r\n                  scope.showSelectAll = false;\r\n                  scope.showClearSelection = false;\r\n                  scope.showSelectionCount = false;\r\n                  scope.enableLastLevelSelection = false;\r\n\r\n\r\n\r\n\r\n                  scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                  scope.isDisabled = scope.treeConfig.isDisabled;\r\n                  scope.isSingleSelect = scope.treeConfig.isRadio;\r\n\r\n                  scope.showSelectAll = scope.treeConfig.showSelectAll;\r\n                  scope.showClearSelection = scope.treeConfig.showClearSelection;\r\n                  scope.showSelectionCount = scope.treeConfig.showSelectionCount;\r\n                  scope.enableLastLevelSelection = scope.treeConfig.enableLastLevelSelection;\r\n\r\n\r\n                  scope.selectionAndCountOptions = false;\r\n\r\n                  scope.closeButton = { title: $translate.instant(\"closeBtn\") };\r\n                  scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                  scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n                  scope.resetButton = { title: $translate.instant(\"resetButton\") };\r\n                  scope.editButton = { title: $translate.instant(\"editButton\") };\r\n                  scope.isPartiallySelected = false;\r\n\r\n                  var totalID = [];\r\n                  var totalName = [];\r\n\r\n                  function setKeysAsPerNavigationContext(mode) {\r\n                      switch (mode) {\r\n                          case 'PAS':\r\n                              nodeExpandingCodeProperty = 'PASCodes';\r\n                              dataProperty = 'PASList';\r\n                              levelWiseDataProperty = 'PASDetails';\r\n                              searchProperty = 'PAS_SearchList';\r\n                              scope.codeProperty = 'ID';\r\n                              scope.titleProperty = 'Name';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentID';\r\n                              modelProperty = 'SelectedPasCodeList';\r\n                              break;\r\n                          case 'REG':\r\n                              nodeExpandingCodeProperty = 'RegionId';\r\n                              levelWiseDataProperty = 'RegionDetails';\r\n                              dataProperty = 'RegionList';\r\n                              searchProperty = 'Region_SearchList';\r\n                              scope.codeProperty = 'ID';\r\n                              scope.titleProperty = 'Name';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentID';\r\n                              modelProperty = 'SelectedRegionList';\r\n                              break;\r\n                          case 'ORG':\r\n                              nodeExpandingCodeProperty = 'EntityDetailCode';\r\n                              levelWiseDataProperty = 'EntityDetails';\r\n                              dataProperty = 'Org_DetailsList';\r\n                              searchProperty = 'Org_SearchList';\r\n                              scope.codeProperty = 'EntityDetailCode';\r\n                              scope.titleProperty = 'EntityDisplayName';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentEntityDetailCode';\r\n                              modelProperty = 'SelectedORGList';\r\n                              break;\r\n                      };\r\n                  };\r\n\r\n                  scope.selectedData = [];\r\n\r\n                  /*Local member fuctions*/\r\n\r\n                  function resetDataSourcesAndPromises(isPromiseInit) {\r\n                      levelWiseData = {};\r\n                      scope.categories = [];\r\n                      lazyLoadMarker = [];\r\n                      scope.isLoading = true;\r\n                      scope.isError = false;\r\n\r\n                      scope.selectedData = [];\r\n                      scope.getUserSelectionArray = [];\r\n\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n\r\n                      if (isPromiseInit) initializePromise(true, true);\r\n                  };\r\n\r\n                  function init() {\r\n                      initSelectallModel();\r\n                      scope.isError = false;\r\n                      scope.noRecordsFound = false;\r\n                      scope.selectionAndCountOptions = false;\r\n                      scope.isPartiallySelected = false;\r\n                      //scope.treeConfig.isReadOnly = typeof scope.config.isReadOnly !== 'undefined' ? scope.config.isReadOnly : false;\r\n                      scope.treeConfig.isReadOnly = function () {\r\n                          var isReadOnly, sn;\r\n                          if (scope.selectedData.length == 0 || scope.config.selectedNodes === null) {\r\n                              isReadOnly = false;\r\n                          } else {\r\n                              isReadOnly = scope.config.isReadOnly\r\n                          }\r\n\r\n                          if (!scope.treeConfig.selectAllToggle) {\r\n                              //.requestParameter.requestObject.selectedNodes\r\n                              sn = scope.treeConfig.requestParameter.requestObject && scope.treeConfig.requestParameter.requestObject.selectedNodes && scope.treeConfig.requestParameter.requestObject.selectedNodes.length;\r\n                              if (sn) {\r\n                                  isReadOnly = true;\r\n                              } else {\r\n                                  isReadOnly = false;\r\n                              }\r\n                          }\r\n\r\n                          return isReadOnly;\r\n                      }();\r\n                      isInitialServiceCalled = true;\r\n                      resetDataSourcesAndPromises(true);\r\n                      RESTApi.getData(navContext,\r\nfunction (response) {\r\n                          var respData = response.data,\r\n                              data = respData.data;\r\n                          isInitialServiceCalled = false;\r\n                          if (response.action == 'success' && (respData && respData.status != 404)) {\r\n                              scope.noRecordsFound = !data[dataProperty] || data[dataProperty].length <= 0;\r\n                              if (!scope.noRecordsFound) {\r\n                                  if (isLazyLoadServerData) {\r\n                                      //setLevelWiseData(response.data.data);\r\n                                      setLevelWiseDataSource(data);\r\n                                  } else {\r\n                                      createLevelWiseDataSet(_.sortBy(data[dataProperty], 'Level'));\r\n                                  }\r\n                                  if (data[modelProperty] && data[modelProperty].length > 0) {\r\n                                      scope.treeConfig.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : true;\r\n                                  }\r\n                                  renderLevels();\r\n\r\n                                  //createSelectedModelIfRecieved(response.data.data.SelectedPasCodeList);\r\n                                  createSelectedModelIfRecieved(data[modelProperty]);\r\n                                  dataRecievedCallPromise.resolve();\r\n\r\n                                  if (scope.treeType == treeTypeObject) {\r\n                                  } else { //working perfect in porject team case\r\n                                      scope.totalSelection = scope.selectedData.length;\r\n                                  }\r\n                              }\r\n                              else {\r\n                                  scope.isLoading = false;\r\n                              }\r\n\r\n                          } else {\r\n                              if (scope.isLoading) scope.isLoading = false;\r\n                              if (!scope.categories.length) scope.isError = true;\r\n                          }\r\n                      }, (isLazyLoadServerData) ? {\r\n                          \"LevelAt\": \"1\",\r\n                          \"PageNumber\": 1,\r\n                          \"PageSize\": lazyLoadingBucket\r\n                      } : {},false, scope.treeType);\r\n                  };\r\n\r\n                  scope.getSelectAllBool = function () {\r\n                      if (scope.categories && scope.categories.length > 0) {\r\n                          var selectedNodes = _.filter(scope.categories, function (node) {\r\n                              return (node.selection == \"1\" || node.disabled == true)\r\n                          });\r\n                          if (scope.categories.length > 0 && selectedNodes.length == scope.categories.length) {\r\n                              selectAllBool = true;\r\n                          } else {\r\n                              selectAllBool = false;\r\n                          }\r\n\r\n                      } else {\r\n                          selectAllBool = false;\r\n                      }\r\n                      return selectAllBool;\r\n                  }\r\n\r\n                  scope.doneClickHandler = function () {\r\n                      scope.treeConfig.getSelections = true;\r\n\r\n                      // timeout required for delaying the $digest cycle\r\n                      var cancelTimer = $timeout(function () {\r\n                          scope.treeConfig.isReadOnly = false;\r\n                          $timeout.cancel(cancelTimer);\r\n                          cancelTimer = null;\r\n                      }, 10);\r\n                  }\r\n                  function createSelectedModelIfRecieved(data) {\r\n\r\n                      if (data && data.length > 0) {\r\n                          scope.selectedData = getLeafNodeWithParentHierarchy(data);\r\n                          scope.treeConfig.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : true;\r\n                      }\r\n                  };\r\n\r\n                  function renderLevels() {\r\n                      if (levelWiseData[levelKey + '1'] != undefined) {\r\n                          scope.categories = !scope.treeConfig.isReadOnly ? levelWiseData[levelKey + '1'].slice(0, lazyLoadingBucket) : levelWiseData[levelKey + '1'];\r\n                          if (!scope.treeConfig.isReadOnly && scope.categories.length % lazyLoadingBucket == 0)\r\n                              lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                          scope.isLoading = false;\r\n                          if (scope.categories.length > 0) {\r\n                              scope.selectionAndCountOptions = true;\r\n                          }\r\n                      }\r\n                      scope.config.levelWiseData = levelWiseData;\r\n                  };\r\n\r\n\r\n                  function initializePromise(dataRievedPromiseBool, preselectionRecievedPromiseBool) {\r\n                      dataRecievedCallPromise = null;\r\n                      preselectionRecievedPromise = null;\r\n                      promises.length = 0;\r\n                      if (dataRievedPromiseBool) {\r\n                          dataRecievedCallPromise = $q.defer();\r\n                          promises.push(dataRecievedCallPromise.promise);\r\n                      }\r\n                      if (preselectionRecievedPromiseBool) {\r\n                          preselectionRecievedPromise = $q.defer();\r\n                          promises.push(preselectionRecievedPromise.promise);\r\n                      }\r\n                      $q.all(promises).then(promiseResolved);\r\n                  }\r\n\r\n\r\n\r\n                  function promiseResolved() {\r\n                      initatePreSelection();\r\n                      initializePromise(false, true);\r\n                  }\r\n\r\n                  function createLevelWiseDataSet(dataSet) {\r\n                      if (dataSet.length > 0) {\r\n                          var level = 1;\r\n                          var parentNodes = dataSet[level - 1][levelWiseDataProperty];\r\n                          insertParentHierarchyForFlatStrucure(parentNodes);\r\n                          while (parentNodes) {\r\n                              var instance = levelWiseData[levelKey + level];\r\n                              levelWiseData[levelKey + level] = (instance) ? _.map(_.groupBy(_.union(instance, parentNodes), function (doc) {\r\n                                  return doc[scope.codeProperty];\r\n                              }), function (grouped) {\r\n                                  return grouped[0];\r\n                              }) : parentNodes;\r\n                              if (dataSet[level]) {\r\n                                  insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet);\r\n                              };\r\n                              maxLevel = level;\r\n                              level = level + 1;\r\n                              if (typeof (scope.treeConfig.to) !== 'undefined') {\r\n                                  if (level > scope.treeConfig.to) {\r\n                                      var len = parentNodes.length;\r\n                                      for (var levelDataIndex = 0; levelDataIndex < len; levelDataIndex++) {\r\n                                          parentNodes[levelDataIndex].ChildCount = 0;\r\n                                      }\r\n                                      parentNodes = null;\r\n                                  } else {\r\n                                      parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                                  }\r\n                              } else {\r\n                                  parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                              }\r\n                          };\r\n                      }\r\n                  };\r\n\r\n                  function insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet) {\r\n                      var fetchedData = (level) ? _.groupBy(dataSet[level][levelWiseDataProperty], scope.parentProperty) : null;\r\n                      _.each(parentNodes, function (parent) {\r\n                          var childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n                          if (childForParent) {\r\n                              _.each(childForParent, function (node, index) {\r\n                                  node[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n                                  node[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n                                  node['isExpanded'] = false;\r\n                                  var nodeSelection = node.selection,\r\n                                      isNodeSelected = node.IsSelected;\r\n                                  node['selection'] = (node && nodeSelection && (nodeSelection == \"1\" || nodeSelection == \"0\") /*&& !scope.isSingleSelect*/) ? nodeSelection : (isNodeSelected == false || isNodeSelected == null || isNodeSelected) ? getSelectionState(isNodeSelected) : '0',\r\n                                  //checkDisableForPartialNode(node);\r\n                                  node['index'] = index;\r\n\r\n                                  if (nodeSelection == \"1\") {\r\n\r\n                                      var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                      if (index > -1) {\r\n                                      } else {\r\n                                          totalID.push(node[scope.codeProperty]);\r\n                                          totalName.push(node[scope.titleProperty]);\r\n                                          scope.totalSelection++;\r\n                                      }\r\n                                  }\r\n\r\n\r\n                              });\r\n                          }\r\n                      });\r\n                  };\r\n\r\n\r\n\r\n                  function checkDisableForPartialNode(node) {\r\n                      if (scope.treeConfig.requestParameter) {\r\n                          if (!scope.treeConfig.requestParameter.getComplete && scope.treeConfig.requestParameter.contactCode && node.selection == '2') {\r\n\r\n                              node.disabled = true;\r\n\r\n                          } else {\r\n                              node.disabled = false;\r\n                          }\r\n                      } else {\r\n                          node.disabled = false;\r\n                      }\r\n\r\n                  };\r\n\r\n                  function setLevelWiseDataSource(data, parent) {\r\n                      _.each(data[dataProperty], function (n) {\r\n                          _.each(n[levelWiseDataProperty], function (d) {\r\n                              d.selection = (parent && parent.selection && (parent.selection == \"1\" || parent.selection == \"0\") /*&& !scope.isSingleSelect*/) ? parent.selection : (d.IsSelected == false || d.IsSelected == null || d.IsSelected) ? getSelectionState(d.IsSelected) : '0';\r\n                              //checkDisableForPartialNode(d);\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };\r\n                  function setLevelWiseData(data, parent) {\r\n                      _.each(data[dataProperty], function (n) {\r\n                          _.each(n[levelWiseDataProperty], function (d) {\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  var parentSelection = parent.selection,\r\n                                      dIsSelected = d.IsSelected;\r\n                                  d.selection = (parent && parentSelection && (parentSelection == \"1\" || parentSelection == \"0\") /*&& !scope.isSingleSelect*/) ? parent.selection : (dIsSelected == false || dIsSelected == null || dIsSelected) ? getSelectionState(dIsSelected) : '0';\r\n\r\n                              }\r\n                              else {\r\n                                  d.selection = '0';\r\n                              }\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  if (isLazyLoadServerData) {\r\n                                      totalID.push(d[scope.codeProperty]);\r\n                                      totalName.push(d[scope.titleProperty]);\r\n                                      scope.totalSelection++;\r\n                                  }\r\n                              }\r\n\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };\r\n\r\n                  /*function createLevelWiseDataSet(dataSet) {\r\n                      var level = 1;\r\n                      var parentNodes = dataSet[level - 1][levelWiseDataProperty];\r\n                      insertParentHierarchyForFlatStrucure(parentNodes);\r\n                      while (parentNodes) {\r\n                          levelWiseData[levelKey + level] = parentNodes;\r\n                          if (dataSet[level]) {\r\n                              insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet);\r\n                          };\r\n                          maxLevel = level;\r\n                          level = level + 1;\r\n                          parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                      };\r\n                  };\r\n      \r\n                  function insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet) {\r\n                      var fetchedData = (level) ? _.groupBy(dataSet[level][levelWiseDataProperty], scope.parentProperty) : null;\r\n                      _.each(parentNodes, function(parent) {\r\n                          var childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n                          if (childForParent) {\r\n                              _.each(childForParent, function(node, index) {\r\n                                  node[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n                                  node[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n                                  node['isExpanded'] = false;\r\n                                  node['selection'] = node['selection'] ? node['selection'] : \"0\";\r\n                                  node['index'] = index;\r\n                              });\r\n                          }\r\n                      });\r\n                  };\r\n      \r\n                  function setLevelWiseData(data, parent) {\r\n                      _.each(data[dataProperty], function(n) {\r\n                          _.each(n[levelWiseDataProperty], function(d) {\r\n                              d.selection = (parent && parent.selection && (parent.selection == \"1\" || parent.selection == \"0\") && !scope.isSingleSelect) ? parent.selection : (d.IsSelected == false || d.IsSelected == null || d.IsSelected) ? getSelectionState(d.IsSelected) : '0';\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n      \r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };*/\r\n\r\n                  function getSelectionState(val) {\r\n                      if (val) {\r\n                          return '1';\r\n                      } else if (val == false) {\r\n                          return '2';\r\n                      } else if (val == null) {\r\n                          return '0';\r\n                      }\r\n                  };\r\n\r\n                  function resetSelectionState() {\r\n                      _.each(scope.selectedData, function (_node) {\r\n                          scope.selectNode(_node, '0');\r\n                      });\r\n                  };\r\n\r\n                  function initatePreSelection() {\r\n                      resetSelectionState();\r\n                      _.each(preselection, function (preselectionNode) {\r\n                          var searchLevel = 1;\r\n                          while (searchLevel <= maxLevel) {\r\n                              var foundNode = _.groupBy(levelWiseData[levelKey + searchLevel], scope.codeProperty)[preselectionNode];\r\n                              if (foundNode) {\r\n                                  scope.selectNode(foundNode[0], '1');\r\n                                  break;\r\n                              }\r\n                              searchLevel = searchLevel + 1;\r\n                          }\r\n                      });\r\n                  };\r\n\r\n                  function getNodesFromServer(parent, level, bucket, pageIndex, callback) {\r\n                      scope.isLoading = true;\r\n                      if (scope.isError) scope.isError = false;\r\n                      if (parent)\r\n                          parent.childLoading = true;\r\n\r\n                      var reqPayLoad = {\r\n                          \"LevelAt\": level,\r\n                          \"PageNumber\": (!parent) ? pageIndex : null,\r\n                          \"PageSize\": (!parent) ? bucket : null\r\n                      };\r\n                      reqPayLoad[nodeExpandingCodeProperty] = (parent) ? parent[scope.codeProperty] : null;\r\n                      //RESTApi.getData(scope.treeConfig.navigationContext, function (responseData) {\r\n                      //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function (responseData) {\r\n                      RESTApi.getData(navContext,\r\n                          function (responseData) {\r\n                          if (responseData.action == 'success') {\r\n                              scope.isLoading = false;\r\n                          } else {\r\n                              scope.isError = true;\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          var level = (responseData.data.data[dataProperty] && responseData.data.data[dataProperty].length > 0) ? responseData.data.data[dataProperty][0].Level : null;\r\n                          maxLevel = (level && maxLevel < level) ? level : maxLevel;\r\n                          callback(parent, responseData, true, bucket, pageIndex);\r\n                      }, reqPayLoad, false, scope.treeType);\r\n                  };\r\n\r\n\r\n                  function getRequestedDataFromCache(parent, bucket, pageIndex) {\r\n                      var childSearchLevel = (parent) ? parent[scope.levelProperty] + 1 : 1;\r\n                      var parentCodeStringIterator;\r\n                      var result = (parent) ? _.groupBy(levelWiseData[levelKey + childSearchLevel], scope.parentProperty)[parent[scope.codeProperty]] : levelWiseData[levelKey + childSearchLevel];\r\n                      if (scope.treeConfig.isReadOnly) {\r\n                          result = result ? result : [];\r\n                          return {\r\n                              \"data\": result,\r\n                              \"searchLevel\": childSearchLevel\r\n                          };\r\n                      }\r\n                      var startIndex = (pageIndex - 1) * bucket;\r\n                      var bucketData = (bucket && result) ? result.slice(startIndex, startIndex + bucket) : (result) ? result : [];\r\n                      return {\r\n                          \"data\": bucketData,\r\n                          \"searchLevel\": childSearchLevel\r\n                      };\r\n                  };\r\n\r\n                  function getChildsForParentAsPerBucket(parent, bucket, pageIndex, callback) {\r\n                      if (parent != undefined) {\r\n                          if (parent.ChildCount != undefined && parent.ChildCount > 0) {\r\n                              bucket = parent.ChildCount;\r\n                          }\r\n                      }\r\n                      var cachedDataSet = getRequestedDataFromCache(parent, bucket, pageIndex);\r\n                      var bucketData = cachedDataSet.data;\r\n                      var searchLevel = cachedDataSet.searchLevel;\r\n\r\n                      if (bucketData.length > 0) {\r\n                          callback(parent, bucketData, false, bucket, pageIndex);\r\n                      } else {\r\n                          getNodesFromServer(parent, searchLevel, bucket, pageIndex, callback);\r\n                      }\r\n                  };\r\n\r\n                  function lazyLoadLevelWiseData(markerNode) {\r\n                      var parentSearchLevel = markerNode[scope.levelProperty] - 1;\r\n                      var markerNodeParent = markerNode[scope.parentProperty];\r\n                      var parent = _.find(levelWiseData[levelKey + parentSearchLevel], function (node) {\r\n                          return node[scope.codeProperty] == markerNodeParent;\r\n                      });\r\n\r\n                      if (parent && parent.children && parent.children.length % lazyLoadingBucket != 0) {\r\n                          return;\r\n                      };\r\n\r\n                      getChildsForParentAsPerBucket(parent, lazyLoadingBucket, (parent) ? (parent.children.length / lazyLoadingBucket) + 1 : (scope.categories.length / lazyLoadingBucket) + 1, createTreeStructure);\r\n                  };\r\n\r\n                  var searchString = \"\";\r\n                  var searchLevel;\r\n                  var searchDataYetToBeDisplayed = [];\r\n                  var searchWithContainsHitResult = [];\r\n                  scope.searchResults = [];\r\n\r\n                  function searchAsPerBucketSize(searchStr, bucket, isMaintainSearchPointer) {\r\n                      if (!isMaintainSearchPointer) {\r\n                          if (searchString != searchStr) {\r\n                              searchString = searchStr;\r\n                              searchLevel = maxLevel;\r\n                              searchDataYetToBeDisplayed.length = 0;\r\n                              searchWithContainsHitResult.length = 0;\r\n                              scope.searchResults.length = 0;\r\n                          };\r\n                      }\r\n                      var searchData = getDataAsPerBucketSize(searchStr, bucket);\r\n                      if (!isMaintainSearchPointer && searchData.length == 0 && scope.searchResults.length === 0) {\r\n                          scope.noRecordsFound = true;\r\n                      } else {\r\n                          scope.noRecordsFound = false;\r\n                      }\r\n\r\n                      var cancelTout = $timeout(function () {\r\n                          scope.searchResults = scope.searchResults.concat(searchData);\r\n                          if (scope.searchResults.length > 0) {\r\n                              scope.noRecordsFound = false;\r\n                          } else {\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          $timeout.cancel(cancelTout);\r\n                          cancelTout = null;\r\n                      });\r\n                  };\r\n\r\n                  function getOffsetSearchData(bucket) {\r\n                      var partitionedData = _.partition(searchDataYetToBeDisplayed, function (data, index) {\r\n                          return index > (bucket - 1);\r\n                      });\r\n                      searchDataYetToBeDisplayed = partitionedData[0];\r\n                      return partitionedData[1];\r\n                  };\r\n\r\n                  function getOffsetSearchDataForContainsSearch(bucket) {\r\n                      var partitionedData = _.partition(searchWithContainsHitResult, function (data, index) {\r\n                          return index > (bucket - 1);\r\n                      });\r\n                      searchWithContainsHitResult = partitionedData[0];\r\n                      return partitionedData[1];\r\n                  };\r\n\r\n                  function getDataAsPerBucketSize(searchStr, bucket) {\r\n                      var bucketData = [];\r\n                      while (bucketData.length < bucket && searchLevel > 0) {\r\n                          var offsetSearchData = getOffsetSearchData(bucket);\r\n                          if (offsetSearchData.length == bucket) {\r\n                              bucketData = offsetSearchData;\r\n                              break;\r\n                          }\r\n                          var searchData = _.filter(levelWiseData[levelKey + searchLevel], function (node) {\r\n                              return -1 != node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n                          });\r\n\r\n                          var containsSarchResult = _.filter(levelWiseData[levelKey + searchLevel], function (node) {\r\n                              return new RegExp(\"(\" + _.compact(searchString.split(' ')).join('|') + \")\", \"gi\").test(node[scope.titleProperty]) && -1 == node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n                          });\r\n                          searchWithContainsHitResult = searchWithContainsHitResult.concat(containsSarchResult);\r\n                          var qumulativeData = offsetSearchData.concat(searchData);\r\n                          var partitionedData = _.partition(qumulativeData, function (data, index) {\r\n                              return index > (bucket - 1);\r\n                          });\r\n                          searchDataYetToBeDisplayed = searchDataYetToBeDisplayed.concat(partitionedData[0]);\r\n                          bucketData = bucketData.concat(partitionedData[1]);\r\n                          searchLevel = searchLevel - 1;\r\n                      }\r\n                      if (searchLevel == 0) {\r\n                          while (bucketData.length < bucket) {\r\n                              var containsSearchDataToBeAppended = getOffsetSearchDataForContainsSearch(bucket);\r\n                              if (containsSearchDataToBeAppended.length > 0) {\r\n                                  bucketData = bucketData.concat(containsSearchDataToBeAppended);\r\n                              } else {\r\n                                  break;\r\n                              }\r\n                          }\r\n                      }\r\n                      return bucketData;\r\n                  };\r\n\r\n                  function closeChildsForParent(parent) {\r\n                      getChildsForParentAsPerBucket(parent, null, null, function (parent, data) {\r\n                          var childs = _.filter(data, function (childNode) {\r\n                              return childNode.isExpanded;\r\n                          });\r\n                          _.each(childs, function (child) {\r\n                              child.isExpanded = false;\r\n                              child.children = [];\r\n                              closeChildsForParent(child);\r\n                          });\r\n                      });\r\n\r\n                  };\r\n\r\n                  scope.searchText = '';\r\n                  scope.searchFieldVal = '';\r\n\r\n                  scope.expandNode = function (node, index) {\r\n                      node.isExpanded = !node.isExpanded;\r\n                      if (node.isExpanded) {\r\n                          getChildsForParentAsPerBucket(node, lazyLoadingBucket, 1, createTreeStructure);\r\n                      } else {\r\n                          node.children = [];\r\n                          removeMarkerForParent(node);\r\n                      }\r\n                  };\r\n\r\n                  var createTreeStructure = function (node, data, isService, bucket, pageIndex) {\r\n                      if (isService) {\r\n                          if (node) {\r\n                              node.childLoading = false;\r\n                              node.lazyLoading = false;\r\n                          }\r\n                          if (data.action == 'success') {\r\n                              setLevelWiseData(data.data.data, node);\r\n                              if (node && data.data.data[dataProperty][0]) {\r\n                                  if (!node.children) {\r\n                                      node.children = getRequestedDataFromCache(node, bucket, pageIndex).data;\r\n                                  } else {\r\n                                      node.children = node.children.concat(getRequestedDataFromCache(node, bucket, pageIndex).data);\r\n                                  }\r\n                                  if (node.children.length % lazyLoadingBucket == 0) {\r\n                                      lazyLoadMarker.push(node.children[node.children.length - 1]);\r\n                                  }\r\n                              } else {\r\n                                  scope.categories[scope.categories.length - 1].lazyLoading = false;\r\n                                  scope.categories = scope.categories.concat(data.data.data[dataProperty][0][levelWiseDataProperty]);\r\n                                  if (scope.categories.length % lazyLoadingBucket == 0) {\r\n                                      lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                                  }\r\n                              }\r\n                          } else {\r\n                              console.log('service failure');\r\n                          }\r\n                      } else {\r\n                          var toutCancel = $timeout(function () {\r\n                              if (node) {\r\n                                  if (node && node.children && node.children.length > 0)\r\n                                      node.children[node.children.length - 1].lazyLoading = false;\r\n                                  //node.children = (node.children) ? node.children.concat(data) : data;\r\n                                  node.children = (node.children) ? ((scope.treeConfig.getAllLazyLoadedData) ? data : node.children.concat(data)) : data;\r\n\r\n                                  if ((!scope.treeConfig.isReadOnly) && (node.children.length % lazyLoadingBucket == 0)) {\r\n                                      lazyLoadMarker.push(node.children[node.children.length - 1]);\r\n                                  }\r\n                              } else {\r\n                                  scope.categories[scope.categories.length - 1].lazyLoading = false;\r\n                                  scope.categories = scope.categories.concat(data);\r\n                                  if ((!scope.treeConfig.isReadOnly) && (scope.categories.length % lazyLoadingBucket == 0)) {\r\n                                      lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                                  }\r\n                              }\r\n                              $timeout.cancel(toutCancel);\r\n                              toutCancel = null;\r\n                          });\r\n                      }\r\n                  };\r\n\r\n                  function removeMarkerForParent(parent) {\r\n                      var childMarkers = _.filter(lazyLoadMarker, function (node, index) {\r\n                          return -1 != node[parentCodeStringConstant].indexOf(parent[scope.codeProperty]);\r\n                      });\r\n                      lazyLoadMarker = _.difference(lazyLoadMarker, childMarkers);\r\n                      closeChildsForParent(parent);\r\n                  };\r\n\r\n                  var filterTextTimeout;\r\n                  scope.searchAndSelectNode = function (e) {\r\n                      \r\n                      //scope.$apply();\r\n                      //if (filterTextTimeout) {\r\n                          //$timeout.cancel(filterTextTimeout);\r\n                          //filterTextTimeout = null;\r\n                      //}\r\n                      //if (scope.searchFieldVal.length <= 2) {\r\n                         // scope.noRecordsFound = false;\r\n                          //serverSearchVal = \"\";\r\n                         // scope.searchResults.length = 0;\r\n                          //searchDataYetToBeDisplayed.length = 0;\r\n                          //searchWithContainsHitResult.length = 0;\r\n                      //} else {\r\n                          //scope.noRecordsFound = false;\r\n                      var filterTextTimeout = $timeout(function () {\r\n                          scope.noRecordsFound = false;\r\n                              if (scope.searchFieldVal.length <= 2) {\r\n                                  // scope.noRecordsFound = false;\r\n                                  serverSearchVal = \"\";\r\n                                  // scope.searchResults.length = 0;\r\n                                  searchDataYetToBeDisplayed.length = 0;\r\n                                  searchWithContainsHitResult.length = 0;\r\n                              } else if (scope.searchFieldVal.length >= 3) {\r\n                                  if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket, false);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal);\r\n                              }\r\n                              }\r\n                              $timeout.cancel(filterTextTimeout);\r\n                              filterTextTimeout = null;\r\n                              scope.cancelTitle = e.target.value == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                          }, 500);\r\n                      //}\r\n                  };\r\n\r\n\r\n                  scope.selectAll = function () {\r\n                      scope.isPartiallySelected = false;\r\n                      if (selectAllBool) {\r\n                          for (var key in levelWiseData) {\r\n                              _.each(levelWiseData[key], function (data, n) {\r\n                                  //if (data.disabled == false) {\r\n                                      data.selection = \"0\";\r\n                                  //}\r\n                                  scope.selectedData = (key == (levelKey + '1')) ? [] : [];\r\n                              });\r\n                          }\r\n                          scope.getUserSelectionArray = [];\r\n                          scope.totalSelection = 0;\r\n                          totalID = [];\r\n                          totalName = [];\r\n                      } else {\r\n                          for (var key in levelWiseData) {\r\n                              _.each(levelWiseData[key], function (data, n) {\r\n                                  if (data.disabled != true) {\r\n                                      data.selection = \"1\";\r\n                                  }\r\n                                  scope.selectedData = (key == (levelKey + '1')) ? levelWiseData[levelKey + '1'] : scope.selectedData;\r\n                                  var index = totalID.indexOf(data[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                  } else {\r\n                                      totalID.push(data[scope.codeProperty]);\r\n                                      totalName.push(data[scope.titleProperty]);\r\n                                      scope.totalSelection++;\r\n                                  }\r\n                              });\r\n                          }\r\n                      }\r\n                  }\r\n\r\n                  scope.clearAllSelection = function () {\r\n                      for (var key in levelWiseData) {\r\n                          _.each(levelWiseData[key], function (data, n) {\r\n                              data.selection = \"0\";\r\n                              //scope.selectedData = (key == (levelKey + '1'))  ? [] : [];\r\n                              //scope.getUserSelectionArray = [];\r\n                          });\r\n                      }\r\n                      scope.selectedData = [];\r\n                      scope.getUserSelectionArray = [];\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n                      scope.isPartiallySelected = false;\r\n                  }\r\n\r\n\r\n                  scope.selectNode = function (node, selectionState, byPassIsLazyLoadCheck, recursive, siblingNods) {\r\n                      if (isLazyLoadServerData && scope.searchFieldVal.length > 0 && !byPassIsLazyLoadCheck) {\r\n                          completeModelFromServerIfNeeded(node);\r\n                          if (scope.config.useAs == 'inline') {\r\n                              getSelections();\r\n                          }\r\n                          return;\r\n                      }\r\n\r\n                      //updateSelectionObject(node, selectionState);\r\n                      if (scope.isSingleSelect) {\r\n                          if (scope.selectedData.length > 0 && scope.selectedData[0][scope.codeProperty] == node[scope.codeProperty]) {\r\n                              if (scope.config.useAs == 'inline') {\r\n                                  getSelections();\r\n                              }\r\n                              return;\r\n                          }\r\n                          if (scope.selectedData.length > 0 && scope.selectedData[0][scope.codeProperty] != node[scope.codeProperty]) {\r\n                              scope.clearAllSelection();\r\n                          };\r\n                          node.selection = selectionState;\r\n                          scope.selectedData = [node];\r\n                          scope.totalSelection = scope.selectedData.length;\r\n                      } else {\r\n                          node.selection = selectionState;\r\n                          updateSelectionObject(node, selectionState);\r\n                          updateChildsForNode(node, selectionState);\r\n                      }\r\n                      //updateChildsForNode(node, selectionState);\r\n                      updateParentForNode(node, selectionState, recursive);\r\n                      updateUserSelection(node, selectionState);\r\n                      if (scope.treeType == treeTypeObject) {\r\n                      } else {\r\n                          //working perfect in project team\r\n                          scope.totalSelection = scope.selectedData.length;\r\n                      }\r\n\r\n                      if (scope.config.useAs == 'inline') {\r\n                          getSelections();\r\n                      }\r\n\r\n                      if (scope.totalSelection == 0) {\r\n                          scope.isPartiallySelected = false;\r\n                      } else {\r\n                          scope.isPartiallySelected = !scope.getSelectAllBool();\r\n                      }\r\n                  };\r\n                  function getInsSelectedNode(siblingNods) {\r\n                      var r,\r\n                          len = siblingNods.length;\r\n                      for (var x = 0; x < len; x++) {\r\n                          var selection = siblingNods[x].selection;\r\n                          if (selection == \"1\" || selection == \"2\") {\r\n                              r = siblingNods[x];\r\n                              break;\r\n                          }\r\n                      }\r\n                      return r;\r\n                  };\r\n                  function updateSelectionObject(node, selectionState) {\r\n                      switch (selectionState) {\r\n                          case '0':\r\n                              //scope.selectedData = _.without(scope.selectedData, node);\r\n                              scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                  return data[scope.codeProperty] != node[scope.codeProperty];\r\n                              });\r\n                              scope.totalSelection = scope.totalSelection - 1;\r\n                              var index = totalID.indexOf(node[scope.codeProperty]);\r\n                              if (index > -1) {\r\n                                  totalID.splice(index, 1);\r\n                                  totalName.splice(index, 1);\r\n                              }\r\n                              break;\r\n                          case '1':\r\n                              scope.selectedData.push(node);\r\n                              scope.totalSelection = scope.totalSelection + 1;\r\n                              totalID.push(node[scope.codeProperty]);\r\n                              totalName.push(node[scope.titleProperty]);\r\n                              break;\r\n                      }\r\n                  };\r\n                  function updateUserSelection(node, selectionState) {\r\n                      switch (selectionState) {\r\n                          case '0':\r\n                              scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });//_.without(scope.getUserSelectionArray, node);\r\n                              break;\r\n                          case '1':\r\n                              scope.getUserSelectionArray.push(node);\r\n                              break;\r\n                      }\r\n                  }\r\n\r\n                  /*function updateParentForNode(node, selectionState) {\r\n                   var depthLevel = node[scope.levelProperty] - 1;\r\n                   var immediateParentCode = node[scope.parentProperty].toString();\r\n                   while (depthLevel > 0) {\r\n                    var parent = _.find(levelWiseData[levelKey + depthLevel], function(node) {\r\n                     return node[scope.codeProperty] == immediateParentCode;\r\n                   });\r\n                    if (!parent && depthLevel == 1) {\r\n                     baseLevelExpectNode[node[parentCodeStringConstant].split('>')[0]] = true;\r\n                     parent = {};\r\n                     parent[scope.codeProperty] = node[parentCodeStringConstant].split('>')[0];\r\n                     parent[scope.levelProperty] = 1;\r\n                     parent[scope.parentProperty] = parent[scope.codeProperty];\r\n                   }\r\n                   if (parent) {\r\n                     immediateParentCode = parent[scope.parentProperty].toString();\r\n                     if (!parent['isExpanded']) {\r\n                      scope.expandNode(parent);\r\n                    }\r\n                    if (!scope.isSingleSelect) {\r\n                      parent.selection = getStateForNode(parent);\r\n                    }\r\n                  }\r\n                  depthLevel = depthLevel - 1;\r\n                }\r\n              };*/\r\n\r\n                  function updateParentForNode(node, selectionState, recursive) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] - 1;\r\n                      var immediateParentCode = node[scope.parentProperty].toString();\r\n\r\n                      while (depthLevel > 0) {\r\n                          var parent = _.find(levelWiseData[levelKey + depthLevel], function (node) {\r\n                              return node[scope.codeProperty] == immediateParentCode;\r\n                          });\r\n                          if (!parent && depthLevel == 1) {\r\n                              baseLevelExpectNode[node[parentCodeStringConstant].split('>')[0]] = true;\r\n                              parent = {};\r\n                              parent[scope.codeProperty] = node[parentCodeStringConstant].split('>')[0];\r\n                              parent[scope.levelProperty] = 1;\r\n                              parent[scope.parentProperty] = parent[scope.codeProperty];\r\n                          }\r\n                          //if (parent && !parent.disabled) {\r\n                          if (parent && !parent.disabled) {\r\n                              immediateParentCode = parent[scope.parentProperty].toString();\r\n                              if (!parent['isExpanded']) {\r\n                                  scope.expandNode(parent);\r\n                              }\r\n                              //if (!scope.isSingleSelect) {\r\n                              parent.selection = getStateForNode(parent, parent.selection);\r\n                              //}\r\n                          } else {\r\n                              immediateParentCode = parent[scope.parentProperty].toString();\r\n                              if (!parent['isExpanded']) {\r\n                                  scope.expandNode(parent);\r\n                              }\r\n                              //if (!scope.isSingleSelect) {\r\n                              var tempSelection = getStateForNode(parent, parent.selection);\r\n                              parent.selection = \"2\";\r\n                              //}\r\n                          }\r\n                          depthLevel = depthLevel - 1;\r\n\r\n                          immediateParentCode = parent[scope.parentProperty].toString();\r\n                      }\r\n                  };\r\n\r\n                  function getStateForNode(node, parentSelection) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] + 1;\r\n                      var parentCode = node[scope.codeProperty];\r\n                      var groupByData = _.groupBy(levelWiseData[levelKey + depthLevel], scope.parentProperty);\r\n                      var childCount = groupByData[parentCode].length;\r\n                      var selectedChild = _.filter(groupByData[parentCode], function (node) {\r\n                          return node.selection == '1';\r\n                      });\r\n                      var partiallySelectedChild = _.filter(groupByData[parentCode], function (node) {\r\n                          return node.selection == '2';\r\n                      });\r\n\r\n\r\n                      /*\r\n                        if (childCount == selectedChild.length) {\r\n                          //scope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n                          //JJ Add Later\r\n                          scope.selectedData = _.filter(scope.selectedData,function(data,n)\r\n                          {\r\n                            return data[scope.parentProperty] !=parentCode;\r\n                          });\r\n                      \r\n                          scope.selectedData.push(node);\r\n                          return \"1\";\r\n                        } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n                         scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                      \r\n                         scope.selectedData = _.uniq(scope.selectedData,function(item,jey,a) {\r\n                          return item[scope.codeProperty]; \r\n                        });\r\n                         //scope.selectedData = _.without(scope.selectedData, node);\r\n                         scope.selectedData = _.filter(scope.selectedData,function(data,n)\r\n                         {\r\n                          return data[scope.codeProperty] != node[scope.codeProperty];\r\n                        });\r\n                      \r\n                         return \"2\";\r\n                       } else {\r\n                         scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                         scope.selectedData = _.filter(scope.selectedData, function(data)\r\n                         {\r\n                          return data[scope.codeProperty] != node[scope.codeProperty];\r\n                        });\r\n                         //scope.selectedData = _.without(scope.selectedData, node);\r\n                         return \"0\";\r\n                       }\r\n                       */\r\n\r\n                      if (scope.isSingleSelect) {\r\n                          return \"0\";\r\n                      } else {\r\n                          if (scope.treeType == treeTypeObject) {\r\n                              if (childCount == selectedChild.length) {\r\n\r\n                                  ///scope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.parentProperty] != parentCode;\r\n                                  });\r\n\r\n                                  scope.selectedData.push(node);\r\n                                  //Manage Total Selection and TotalName nd ID  \r\n                                  scope.totalSelection = scope.totalSelection + 1;\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                  } else {\r\n                                      totalID.push(node[scope.codeProperty]);\r\n                                      totalName.push(node[scope.titleProperty]);\r\n                                  }//Ends\r\n\r\n                                  return \"1\";\r\n\r\n                              } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.uniq(scope.selectedData, function (item, key, a) {\r\n                                      return item[scope.codeProperty];\r\n                                  });\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != node[scope.codeProperty]\r\n                                  }); //_.without(scope.selectedData, node);\r\n\r\n\r\n\r\n                                  //Manage Total Selection and TotalName nd ID\r\n                                  if (parentSelection != \"0\" && parentSelection != \"2\") {\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                  }\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                      totalID.splice(index, 1);\r\n                                      totalName.splice(index, 1);\r\n                                  }\r\n                                  //Ends\r\n\r\n\r\n                                  return \"2\";\r\n                              } else {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != node[scope.codeProperty]\r\n                                  });\r\n\r\n                                  //_.without(scope.selectedData, node);\r\n\r\n                                  //Manage Total Selection and TotalName nd ID\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                      totalID.splice(index, 1);\r\n                                      totalName.splice(index, 1);\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                  }//Ends\r\n                                  return \"0\";\r\n                              }\r\n                          } else {\r\n\r\n                              //Non Generic Tree management\r\n                              //it will not having parent selection full means 1 even if all childs are selected.\r\n                              if (childCount == selectedChild.length) {\r\n                                  //scope.selectedData = selectedChild;\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                                  return \"2\";\r\n\r\n                              } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.uniq(scope.selectedData, function (item, key, a) {\r\n                                      return item[scope.codeProperty];\r\n                                  });\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });\r\n                                  //_.without(scope.selectedData, node);\r\n                                  return \"2\";\r\n                              } else {\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });//_.without(scope.selectedData, node);\r\n                                  return \"0\";\r\n                              }\r\n                          }\r\n                      }\r\n\r\n\r\n                  };\r\n\r\n\r\n\r\n                  /*\r\n                  function updateChildsForNode(node, selectionState) {\r\n                    var depthLevel = node[scope.levelProperty] + 1;\r\n                    var parentCode = node[scope.codeProperty].toString();\r\n                    while (depthLevel <= maxLevel) {\r\n                     var childs = _.filter(levelWiseData[levelKey + depthLevel], function(node) {\r\n                      return -1 != node[parentCodeStringConstant].indexOf(parentCode);\r\n                    });\r\n                     _.each(childs, function(child) {\r\n                      child.selection = selectionState;\r\n                      if (selectionState == \"1\") {\r\n                       //scope.selectedData = _.without(scope.selectedData, child);\r\n                       scope.selectedData =_.filter(scope.selectedData,function(data)\r\n                       {\r\n                        return data[scope.codeProperty] != child[scope.codeProperty];\r\n                      });\r\n                     };\r\n                   });\r\n                     depthLevel = depthLevel + 1;\r\n                   }\r\n                   if (isLazyLoadServerData) {\r\n                     updateChildsForSelectedData(node);\r\n                   }\r\n                  }*/\r\n\r\n                  function updateChildsForNode(node, selectionState) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] + 1;\r\n                      var parentCode = node[scope.codeProperty].toString();\r\n                      var tempNode = node;\r\n                      while (depthLevel <= maxLevel) {\r\n                          var childs = _.filter(levelWiseData[levelKey + depthLevel], function (node) {\r\n                              //return -1 != node[parentCodeString].indexOf(parentCode)\r\n                              var parentCodesofNode = node[parentCodeStringConstant].split(\">\");\r\n                              return -1 != parentCodesofNode.indexOf(parentCode);\r\n                          });\r\n\r\n\r\n                          _.each(childs, function (child) {\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  var codeProp = child[scope.codeProperty];\r\n                                  if (selectionState == \"1\") {\r\n                                      //Work in laziloading false\r\n                                      scope.totalSelection = (child.selection == \"1\") ? scope.totalSelection : scope.totalSelection + 1;\r\n                                      scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                          return data[scope.codeProperty] != codeProp;\r\n                                      });\r\n                                      //closed//_.without(scope.selectedData, child);\r\n                                      var index = totalID.indexOf(codeProp);\r\n                                      if (index > -1) {\r\n                                      } else {\r\n                                          totalID.push(codeProp);\r\n                                          totalName.push(codeProp);\r\n                                      }\r\n                                  } else {\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                      var index = totalID.indexOf(codeProp);\r\n                                      if (index > -1) {\r\n                                          totalID.splice(index, 1);\r\n                                          totalName.splice(index, 1);\r\n                                      }\r\n                                  }\r\n\r\n                                  if (!(selectionState == \"1\" && scope.isSingleSelect)) {\r\n                                      child.selection = selectionState;\r\n                                  }\r\n\r\n                                  scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray, function (data) {\r\n                                      return data[scope.codeProperty] != child[scope.codeProperty]\r\n                                  });//_.without(scope.selectedData, child);\r\n                                  //jayesh add\r\n                              } else {\r\n                                  child.selection = \"0\";\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != child[scope.codeProperty]\r\n                                  });//_.without(scope.selectedData, child);\r\n                              }\r\n                              /*scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray,function(data){\r\n                              \r\n                                return data[scope.codeProperty] != child[scope.codeProperty]\r\n                              });//_.without(scope.selectedData, child);*/\r\n                          });\r\n\r\n                          depthLevel = depthLevel + 1;\r\n                      }\r\n                      //if (isLazyLoadServerData) {\r\n                      updateChildsForSelectedData(node);\r\n                      //}\r\n                  }\r\n\r\n\r\n\r\n                  function updateChildsForSelectedData(node) {\r\n                      var searchHits = [];\r\n                      _.each(scope.selectedData, function (data) {\r\n                          if (-1 != data[parentCodeStringConstant].indexOf(node[scope.codeProperty].toString())) {\r\n                              searchHits.push(data);\r\n                          }\r\n                      });\r\n                      _.each(searchHits, function (hits) {\r\n\r\n                          //scope.selectedData = _.without(scope.selectedData, hits);\r\n                          scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                              return data[scope.codeProperty] != hits[scope.codeProperty];\r\n                          });\r\n\r\n\r\n                      });\r\n                  }\r\n\r\n                  var uniqueIDGenerator = function () {\r\n                      var d = new Date().getTime();\r\n                      var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                          var r = (d + Math.random() * 16) % 16 | 0;\r\n                          d = Math.floor(d / 16);\r\n                          return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                      });\r\n                      return uniqueID;\r\n                  };\r\n                  var cancelToutOnScroll;\r\n                  scope.scroll = function () {\r\n                      if (cancelToutOnScroll) {\r\n                          $timeout.cancel(cancelToutOnScroll);\r\n                          cancelToutOnScroll = null;\r\n                      }\r\n                      cancelToutOnScroll = $timeout(function () {\r\n                          if (!lazyLoadOffset) {\r\n                              //lazyLoadOffset = angular.element(\"#treeComponentContainer-\" + scope.hierarchyCounter)[0].getBoundingClientRect().bottom;\r\n                              var link = (angular.element(\"#treeComponentContainer\"));\r\n                              var position = link.position();\r\n                              var right = $(window).width();\r\n                              lazyLoadOffset = $(window).height();\r\n                          };\r\n                          var lazyLoadLen = lazyLoadMarker.length;\r\n                          if (lazyLoadLen > 0 && scope.searchFieldVal.length == 0) {\r\n                              var markerNode = lazyLoadMarker[lazyLoadLen - 1],\r\n                                  markerNodeSelect = angular.element(\"#\" + markerNode[scope.codeProperty]);\r\n                              if ((markerNodeSelect.length > 0) && markerNodeSelect[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n                                  markerNode.lazyLoading = true;\r\n                                  lazyLoadMarker.length = (lazyLoadLen > 0) ? lazyLoadLen - 1 : 0;\r\n                                  lazyLoadLevelWiseData(markerNode);\r\n                              }\r\n                          }\r\n                      }, 20);                      \r\n                  };\r\n                  var scrollEndTout;\r\n                  scope.scrollEnd = function () {\r\n                      if (scrollEndTout) {\r\n                          $timeout.cancel(scrollEndTout);\r\n                          scrollEndTout = null;\r\n                      }\r\n                      scrollEndTout = $timeout(function () {\r\n                          if (scope.searchFieldVal.length > 2) {\r\n                              if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket, true);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal, true);\r\n                              }\r\n                           }                              \r\n                      }, 20);\r\n                      \r\n                  };\r\n\r\n                  /*lazyLoadOffset = angular.element(\"#treeComponentContainer\")[0].getBoundingClientRect().bottom;\r\n                  console.log(lazyLoadOffset);\r\n                  angular.element('.scrollbar-outer').scrollbar({\r\n                      onScroll : function(y, x) {\r\n                          //console.log('marker length -- '+lazyLoadMarker.length);\r\n                          if (lazyLoadMarker.length > 0 && scope.searchFieldVal.length == 0) {\r\n                              var markerNode = lazyLoadMarker[lazyLoadMarker.length - 1];\r\n                              if (angular.element(\"#\"+markerNode[scope.codeProperty])[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n                                  console.log(markerNode);\r\n                                  markerNode.lazyLoading = true;\r\n                                  lazyLoadMarker.length = (lazyLoadMarker.length > 0) ? lazyLoadMarker.length - 1 : 0;\r\n                                  lazyLoadLevelWiseData(markerNode);\r\n                                  console.log(lazyLoadMarker.length);\r\n                              }\r\n                          }\r\n                          if (y.maxScroll > 0 && y.scroll == y.maxScroll && scope.searchFieldVal.length > 0) {\r\n                              if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal, true);\r\n                              }\r\n                          }\r\n                      }\r\n                  });*/\r\n\r\n                  var massageSelectedData = function (data) {\r\n                      _.each(data, function (e) {\r\n                          if (e['children'])\r\n                              delete e['children'];\r\n                      });\r\n                      return data;\r\n                  };\r\n\r\n\r\n                  var newtotalID = [];\r\n                  var newtotalName = [];\r\n\r\n\r\n                  var getSelections = function () {\r\n\r\n                      _.each(scope.selectedData, function (node) {\r\n                          if (node.disabled) {\r\n                              scope.selectedData = _.without(scope.selectedData, node);\r\n                          }\r\n                      });\r\n\r\n                      newtotalID = [];\r\n                      newtotalName = [];\r\n\r\n                      var tCancel = $timeout(function () {\r\n                          scope.treeConfig.selectType = scope.selectType.code;\r\n                          var outPutObject = {\r\n                              'selectType': scope.selectType.code,\r\n                              'selections': massageSelectedData(scope.selectedData)\r\n                          };\r\n\r\n                          _.each(outPutObject.selections, function (data) {\r\n                              newtotalID.push(data[scope.codeProperty]);\r\n                              newtotalName.push(data[scope.titleProperty]);\r\n                          });\r\n\r\n                          outPutObject[\"selectionIds\"] = newtotalID;\r\n                          outPutObject[\"selectionNames\"] = newtotalName;\r\n                          if (scope.treeType == treeTypeObject) {\r\n                              outPutObject[\"selectionAllIds\"] = totalID;\r\n                              outPutObject[\"selectionAllNames\"] = totalName;\r\n                          }\r\n\r\n                          var hierarchyCollection = [];\r\n                          _.each(scope.selectedData, function (node) {\r\n                              if (node[scope.levelProperty] > 1) {\r\n                                  var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                                  var parentTraversalArray = [];\r\n                                  _.each(parentHierarchy, function (parentNode, index) {\r\n                                      var found = _.clone(_.find(levelWiseData[levelKey + (index + 1)], function (data) {\r\n                                          return data[scope.codeProperty] == parentNode;\r\n                                      }));\r\n                                      if (found && found['children'])\r\n                                          delete found['children'];\r\n                                      parentTraversalArray.push(found);\r\n                                  });\r\n                                  hierarchyCollection.push(parentTraversalArray);\r\n                              } else {\r\n                                  hierarchyCollection.push([node]);\r\n                              }\r\n                          });\r\n\r\n                          /*if(scope.treeConfig.getHierarchyOnSelection)\r\n                          {\r\n                            outPutObject['selectionHierarchy'] =  massageSelectedData(hierarchyCollection);\r\n                          }\r\n                          if(scope.treeConfig.getAllLazyLoadedData)\r\n                          {\r\n                            outPutObject['allLazyLoadedData'] = levelWiseData;\r\n                          }*/\r\n\r\n\r\n                          if (scope.treeConfig.getHierarchyOnSelection && (scope.treeType == treeTypeObject)) {\r\n                              outPutObject['selectionHierarchy'] = massageSelectedData(hierarchyCollection);\r\n                          }\r\n                          if (scope.treeConfig.getUserSelection && (scope.treeType == treeTypeObject)) {\r\n                              outPutObject['userSelection'] = massageSelectedData(scope.getUserSelectionArray);\r\n                          }\r\n                          if (scope.treeConfig.getAllLazyLoadedData) {\r\n                              outPutObject['allLazyLoadedData'] = levelWiseData;\r\n                          }\r\n                          if (scope.isActive) {\r\n                              scope.searchFieldVal = '';\r\n                              scope.hideSearch();\r\n                          }\r\n\r\n                          doneCallback(outPutObject);\r\n                          $timeout.cancel(tCancel);\r\n                          tCancel = null;\r\n                      });\r\n                  };\r\n\r\n                  /** seacrh for server **/\r\n\r\n                  var searchResultPageNumber = 0;\r\n                  var serverSearchVal = \"\";\r\n                  var isLazyLoadingNode;\r\n                  var ongoingService;\r\n                  function getSearchDataFromServer(searchBucket, callback, searchVal, isLazyLoad) {\r\n                      if (searchVal != serverSearchVal) {\r\n                          serverSearchVal = searchVal;\r\n                          searchResultPageNumber = 0;\r\n                          scope.searchResults.length = 0;\r\n                      }\r\n\r\n                      scope.isLoading = true;\r\n                      if (scope.isError) scope.isError = false;\r\n\r\n                      if (scope.searchResults.length > 0) {\r\n                          isLazyLoadingNode = scope.searchResults[scope.searchResults.length - 1];\r\n                          isLazyLoadingNode.lazyLoading = true;\r\n                      }\r\n\r\n                      if (ongoingService && !isLazyLoad) {\r\n                          RESTApi.abort(ongoingService);\r\n                      }\r\n\r\n                      ongoingService = {\r\n                          \"PageNumber\": searchResultPageNumber = searchResultPageNumber + 1,\r\n                          \"PageSize\": searchBucket,\r\n                          \"SearchText\": scope.searchFieldVal\r\n                      };\r\n\r\n                      //RESTApi.getData(scope.treeConfig.navigationContext, function(responseData) {\r\n                      //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function(responseData) {\r\n                      RESTApi.getData(navContext,\r\n                          function (responseData) {\r\n                          ongoingService = null;\r\n                          if (responseData.action == 'success') {\r\n                              scope.isLoading = false;\r\n                          } else {\r\n                              scope.isError = true;\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          callback(responseData);\r\n                      }, ongoingService, false, scope.treeType);\r\n                  }\r\n\r\n                  function createModelForSearchData(data) {\r\n                      if (isLazyLoadingNode)\r\n                          isLazyLoadingNode.lazyLoading = false;\r\n                      scope.searchResults = scope.searchResults.concat(getLeafNodeWithParentHierarchy(data.data.data[searchProperty]));\r\n                  };\r\n\r\n                  function getLeafNodeWithParentHierarchy(data) {\r\n                      var searchList = data;\r\n                      var searchDataCollection = [];\r\n                      var selectedData = _.groupBy(scope.selectedData, scope.codeProperty);\r\n                      _.each(searchList, function (searchData) {\r\n                          var searchDataHierarchy = searchData[levelWiseDataProperty];\r\n                          var sortedLevelSearchedData = _.sortBy(searchDataHierarchy, 'Level');\r\n                          var searchHitNode = sortedLevelSearchedData[sortedLevelSearchedData.length - 1];\r\n                          var parentString = \"\";\r\n                          var parentCodeString = \"\";\r\n\r\n                          _.each(sortedLevelSearchedData, function (data) {\r\n                              parentString = (parentString.length > 0) ? parentString + ' > ' + data[scope.titleProperty] : data[scope.titleProperty];\r\n                              parentCodeString = (parentCodeString.length > 0) ? parentCodeString + '>' + data[scope.codeProperty].toString() : data[scope.codeProperty].toString();\r\n                              data[parentStringConstant] = parentString;\r\n                              data[parentCodeStringConstant] = parentCodeString;\r\n                              data.selection = getSelectionFromLevelWiseData(data);\r\n                          });\r\n\r\n                          //searchHitNode.serverData = _.groupBy(sortedLevelSearchedData, scope.codeProperty);\r\n                          searchDataCollection.push(searchHitNode);\r\n                      });\r\n                      return searchDataCollection;\r\n                  };\r\n\r\n                  function resetSelectionForSearchNodes(node) {\r\n                      _.each(scope.searchResults, function (searchNode) {\r\n                          if (node[scope.codeProperty] != searchNode[scope.codeProperty] && searchNode[parentCodeStringConstant].indexOf((node[parentCodeStringConstant].length > 0) ? node[parentCodeStringConstant] : node[scope.codeProperty].toString()) != -1) {\r\n                              searchNode.selection = node.selection;\r\n                          } else {\r\n                              searchNode.selection = getSelectionFromLevelWiseData(searchNode);\r\n                          }\r\n                      });\r\n                  };\r\n\r\n                  function getSelectionFromLevelWiseData(node) {\r\n                      var searchLevel = node[scope.levelProperty];\r\n                      var groupedLevelData = _.groupBy(levelWiseData[levelKey + searchLevel], scope.codeProperty);\r\n                      var selectionState = (groupedLevelData[node[scope.codeProperty]]) ? groupedLevelData[node[scope.codeProperty]][0].selection : isPresentInInternalHierarchy(node) ? '1' : (node.IsSelected == false || node.IsSelected == null || node.IsSelected) ? getSelectionState(node.IsSelected) : '0';\r\n                      return selectionState;\r\n                  };\r\n\r\n                  function isPresentInInternalHierarchy(searchNode) {\r\n                      var retVal = false,\r\n                          len = scope.selectedData.length;\r\n                      for (var i = 0; i < len; i++) {\r\n                          var node = scope.selectedData[i];\r\n                          if (searchNode[parentCodeStringConstant].indexOf((node[parentCodeStringConstant].length > 0) ? node[parentCodeStringConstant] : node[scope.codeProperty].toString()) != -1) {\r\n                              retVal = true;\r\n                              break;\r\n                          }\r\n                      }\r\n                      return retVal;\r\n                  };\r\n\r\n                  /*function completeModelFromServerIfNeeded(node) {\r\n                      var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                      var dataRetrivalCount = parentHierarchy.length;\r\n                      parentHierarchy.length = dataRetrivalCount - 1;\r\n                      var recievedData = [];\r\n                      if (parentHierarchy.length > 0) {\r\n                          _.each(parentHierarchy, function(PASCode, index) {\r\n                              getChildsForParentAsPerBucket(node.serverData[PASCode][0], lazyLoadingBucket, 1, function(_node, data, isService, bucket, pageIndex) {\r\n                                  if (isService) {\r\n                                      if (data.action == 'success')\r\n                                          setLevelWiseData(data.data.data, _node);\r\n                                  };\r\n                                  dataRetrivalCount = dataRetrivalCount - 1;\r\n                                  if (dataRetrivalCount == 1) {\r\n                                      updateSelectionInDataSource(node);\r\n                                  }\r\n                              });\r\n                          });\r\n                      } else {\r\n                          updateSelectionInDataSource(node);\r\n                      }\r\n                  }*/\r\n\r\n                  function completeModelFromServerIfNeeded(node) {\r\n\r\n                      var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                      var levelNumber = node['Level'];\r\n                      var recievedData = [];\r\n\r\n                      if (!(levelWiseData[levelKey + node[scope.levelProperty]] && _.find(levelWiseData[levelKey + node[scope.levelProperty]], function (data) {\r\n                          return node[scope.codeProperty] == data[scope.codeProperty];\r\n                      }))) {\r\n                          var reqObj = {};\r\n                          reqObj[nodeExpandingCodeProperty] = [parseInt(parentHierarchy[parentHierarchy.length - 1])];\r\n\r\n                          //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function(responseData) {\r\n                          RESTApi.getData(navContext,\r\n                              function (responseData) {\r\n                              if (responseData.action == 'success') {\r\n                                  var allResultData = responseData.data.data.PAS_SearchList[0][levelWiseDataProperty];\r\n                                  var result = _.groupBy(allResultData, \"Level\");\r\n                                  var level = 1;\r\n                                  var levelData = [];\r\n                                  while (level) {\r\n                                      var obj = {};\r\n                                      obj[levelWiseDataProperty] = result[level];\r\n                                      obj['Level'] = level;\r\n                                      levelData.push(obj);\r\n                                      level = level + 1;\r\n                                      if (!result[level])\r\n                                          break;\r\n                                  };\r\n                                  createLevelWiseDataSet(levelData);\r\n                                  updateSelectionInDataSource(node);\r\n                              } else {\r\n                                  console.log('error');\r\n                              }\r\n                          }, reqObj, true, scope.treeType);\r\n                      } else {\r\n                          updateSelectionInDataSource(node);\r\n                      }\r\n                  }\r\n\r\n                  function updateSelectionInDataSource(node) {\r\n                      scope.selectNode(_.find(levelWiseData[levelKey + node.Level], function (data) {\r\n                          return data[scope.codeProperty] == node[scope.codeProperty];\r\n                      }), (node.selection == \"1\") ? \"0\" : \"1\", true);\r\n                      resetSelectionForSearchNodes(node);\r\n                  };\r\n\r\n                  scope.focusSearch = false;\r\n                  scope.isActive = false;\r\n                  scope.showMe = false;\r\n                  scope.showSearch = function () {\r\n                      scope.isActive = true;\r\n                      scope.showMe = true;\r\n                      scope.hideClose = true;\r\n                      $timeout(function () {\r\n                          scope.focusSearch = true;\r\n                      }, 100); \r\n                  }\r\n\r\n                  scope.hideSearch = function () {\r\n                    if(scope.searchFieldVal != \"\")\r\n                    {\r\n                        scope.searchFieldVal = \"\";    \r\n                        scope.noRecordsFound = false;\r\n                    }\r\n                    else\r\n                    {\r\n                            scope.searchFieldVal = \"\";\r\n                            scope.isActive = false;\r\n                            scope.focusSearch = false;\r\n                            scope.hideClose = false;\r\n                            scope.noRecordsFound = false;\r\n                            $(\"#SearchBtn\").focus();\r\n                    }\r\n                    scope.cancelTitle = scope.searchFieldVal == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                  }\r\n                  scope.editCallback = function () {\r\n\r\n                      scope.treeConfig.isReadOnly = false;\r\n                      scope.categories = [];\r\n                      lazyLoadMarker = [];\r\n                      scope.isLoading = true;\r\n                      scope.isError = false;\r\n                      totalID = [];\r\n                      totalName = [];\r\n\r\n                      initializePromise(true, true);\r\n                      renderLevels();\r\n                  }\r\n\r\n                  if (scope.config.useAs == \"inline\" && scope.config.export) {\r\n                      var exportLen = scope.config.export.length;\r\n                      for (var ex = 0; ex < exportLen; ex++) {\r\n                          setExport(scope.config.export[ex]);\r\n                      };\r\n                  }\r\n\r\n                  function setExport(key) { // setExport allow to access the isolated scope's functionality outside of directive\r\n                      if (scope.config.useAs != \"inline\") return; // if not useAs inline;\r\n                      !scope.config._export && (scope.config._export = {});\r\n                      if (key !== undefined) {\r\n                          scope.config._export[key] = typeof scope[key] == \"function\" ? function () {\r\n                              scope[key]()\r\n                          } : function () { return scope[key]; };\r\n                      }\r\n                  };\r\n\r\n                  scope.$on('$destroy', function () {\r\n                      deregisterConfigSelection();\r\n                      deregReqParam();\r\n                      deregReqContactCode();\r\n                      deregConfigData();\r\n                      deregSelectedNodes();\r\n                  });\r\n              },\r\n              templateUrl: 'shared/directives/smartHierarchy/smartHierarchyTemplate.html'\r\n          };\r\n      }])\r\n    .directive('myTemplate', function () {\r\n            return {\r\n                restrict: 'EA',\r\n                templateUrl: function (elem, attr) {\r\n                    return attr.type;\r\n                }\r\n            };\r\n        })\r\n.directive('ngIndeterminate', [\"$compile\", function ($compile) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attributes) {\r\n            scope.$watch(attributes['ngIndeterminate'], function (value) {\r\n                element.prop('indeterminate', value);\r\n            });\r\n        }\r\n    };\r\n}])\r\n.directive('ngHighlight', ['$compile', 'hilitor', function ($compile, hilitor) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attributes) {\r\n            scope.$watch(attributes['ngHighlight'], function (value) {\r\n                new Hilitor(\"treeComponentContainer-\" + scope.hierarchyCounter).apply(value);\r\n            });\r\n        }\r\n    };\r\n}])\r\n.service('RESTApi', ['$http', '$q','APPCONSTANTS',\r\nfunction ($http, $q, APPCONSTANTS) {\r\n    var baseUrl;\r\n    var documenttype='';\r\n    if (APPCONSTANTS != undefined) {\r\n        if (APPCONSTANTS.userPreferences.OrderData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.OrderData.type.id;\r\n        }\r\n        else if (APPCONSTANTS.userPreferences.RequisitionData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.RequisitionData.type.id;\r\n        }\r\n        else if (APPCONSTANTS.userPreferences.ProcurementProfileData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.ProcurementProfileData.type.id;\r\n        }\r\n        else if (APPCONSTANTS.userPreferences.InvoiceData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.InvoiceData.type.id;\r\n        }\r\n        else if (APPCONSTANTS.userPreferences.IRData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.IRData.type.id;\r\n        }\r\n\r\n    }\r\n    var callbackTracker = [];\r\n    var userExecutionContext;\r\n    var documentId;\r\n    var contactCode;\r\n    var requestObjectToBeExtended = null;\r\n    var customeURL;\r\n\r\n    /*if(windows.location.origin.indexOf('smartdev') > -1 || windows.location.origin.indexOf('127') > -1)\r\n    {\r\n      env = \"DEV\";\r\n    }else if(windows.location.origin.indexOf('smartqc') > -1)\r\n    {\r\n      env = \"QC\";\r\n    }else if(windows.location.origin.indexOf('smartuat') > -1)\r\n    {\r\n      env = \"UAT\";\r\n    }else\r\n    {\r\n      env = \"PROD\";\r\n    }*/\r\n\r\n    /*this.setEnvironment = function(env)\r\n    {\r\n      switch(env) {\r\n        case \"DEV\":\r\n        baseUrl = 'https://gepdevsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"QC\":\r\n        baseUrl = 'https://gepqcsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"UAT\":\r\n        baseUrl = 'https://gepuatsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"PROD\":\r\n        baseUrl = 'https://gepsmart-rest.servicebus.windows.net/PortalRestService/';\r\n      }\r\n    }*/\r\n    this.setEnvironment = function (newURL) {\r\n        baseUrl = newURL + \"PortalRestService/\";\r\n    };\r\n    //baseUrl = APPCONSTANTS.userPreferences.URLs.AppURL;\r\n\r\n    this.setDocumentId = function (val) {\r\n        documentId = val;\r\n    };\r\n    this.setContactCode = function (val) {\r\n        contactCode = val;\r\n    };\r\n    this.setUserContext = function (val) {\r\n        userExecutionContext = val;\r\n    };\r\n    this.setRequestObject = function (val) {\r\n        requestObjectToBeExtended = val;\r\n    };\r\n    this.setUrl = function (val) {\r\n        customeURL = val;\r\n    };\r\n    function createRequest(mode, data, isOverrideInputPayload, treeType) {\r\n        var contactPasMappingMethod,\r\n             bpcCode ='&c=' + APPCONSTANTS.userPreferences.EncryptedBPC,\r\n            getPasDetailsMethod,\r\n            inputParameterKey,\r\n            getParentForNodeUrl;\r\n        if (!baseUrl) {\r\n            return null;\r\n        }\r\n        switch (mode) {\r\n            case \"PAS\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactPASMappingDetilsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactPASMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetPASDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'PASInputParam_Levels';\r\n                getParentForNodeUrl = \"GetPASLevelDetailsByPASCodes?oloc=218\" + bpcCode;\r\n                break;\r\n            case \"REG\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactRegionMappingDetailsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactRegionMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetRegionDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'RegionInputParam_Levels';\r\n                getParentForNodeUrl = \"GetREGIONLevelDetailsByRegionIds\";\r\n                break;\r\n\r\n            case \"ORG\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactORGMappingDetailsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactOrgMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetORGDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'ORG_InputParams';\r\n                getParentForNodeUrl = \"GetOrgEntityLevelDetailsByEntityDetailCodes\";\r\n                break;\r\n        }\r\n\r\n\r\n        var propmiseForThisInstance = $q.defer();\r\n        var requestObject = {\r\n            'url': baseUrl,\r\n            'headers': {\r\n                'Content-Type': 'application/json',\r\n                'UserExecutionContext': null\r\n            },\r\n            'data': {},\r\n            'method': 'POST',\r\n            'timeout': propmiseForThisInstance.promise\r\n        };\r\n        requestObject['data'][inputParameterKey] = {\r\n            'ContactCode': null,\r\n            'DocumentCode': null\r\n        };\r\n        if (mode != undefined) {\r\n            if (mode.toLowerCase() == 'pas' && (documenttype == '8' || documenttype == '7' || documenttype == '38' || documenttype == '9' || documenttype == '14')) {\r\n                var userRestrictCategoryTree = _.where(APPCONSTANTS.userPreferences.CommonSettings.lstSettings, { \"FieldName\": \"RestrictUserMappedCategorySelection\" });\r\n                if (userRestrictCategoryTree != undefined && userRestrictCategoryTree.length > 0) {\r\n                    if (userRestrictCategoryTree[0].FieldValue.toLowerCase() == 'false') {\r\n                        contactCode = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isOverrideInputPayload == true) {\r\n            requestObject.url = requestObject.url + getParentForNodeUrl;\r\n            requestObject.data = data;\r\n        } else {\r\n            if (contactCode) {\r\n                requestObject.data[inputParameterKey].ContactCode = contactCode;\r\n                requestObject.url = requestObject.url + contactPasMappingMethod;\r\n            } else {\r\n                requestObject.data[inputParameterKey].ContactCode = null;\r\n                requestObject.url = requestObject.url + getPasDetailsMethod;\r\n            }\r\n            requestObject.data[inputParameterKey].DocumentCode = (documentId) ? documentId : null;\r\n\r\n        }\r\n\r\n        if (customeURL) {\r\n            requestObject.url = customeURL;\r\n            //getPasDetailsMethod = 'GetORGDetails';\r\n            //inputParameterKey = 'ORG_InputParams';\r\n            //getParentForNodeUrl = \"GetOrgEntityLevelDetailsByEntityDetailCodes\";\r\n        }\r\n        requestObject.headers.UserExecutionContext = userExecutionContext;\r\n        requestObject.promise = propmiseForThisInstance;\r\n        if (requestObjectToBeExtended == null && contactCode == null) {\r\n            requestObject.data[inputParameterKey] = _.extend(requestObject.data[inputParameterKey], data);\r\n        } else {\r\n            requestObject.data[inputParameterKey] = _.extend(_.extend(requestObject.data[inputParameterKey], data), requestObjectToBeExtended)\r\n        }\r\n        return requestObject;\r\n    };\r\n    this.abort = function (reqParam) {\r\n        var dataFoundOnIndex;\r\n        var promise = _.find(callbackTracker, function (reqObj, index) {\r\n            dataFoundOnIndex = index;\r\n            return _.isEqual(reqParam, reqObj.data);\r\n        }).promise;\r\n        if (promise) {\r\n            promise.resolve();\r\n            console.log('canceled - ' + reqParam);\r\n        }\r\n    };\r\n\r\n    this.getData = function (mode, callback, data, isOverrideInputPayload, treeType) {\r\n        var requestObject = new createRequest(mode, data, isOverrideInputPayload, treeType);\r\n        if (!(_.isEmpty(requestObject))) {\r\n            callbackTracker.push({\r\n                'key': JSON.stringify(requestObject.data),\r\n                'callback': callback,\r\n                'promise': requestObject.promise,\r\n                'data': data\r\n            });\r\n            serviceCall(requestObject);\r\n        }\r\n    };\r\n\r\n    function serviceCall(req) {\r\n        $http(req).then(function (response) {\r\n            var dataFoundOnIndex;\r\n            var Callback = _.find(callbackTracker, function (reqObj, index) {\r\n                dataFoundOnIndex = index;\r\n                return _.isEqual(JSON.parse(reqObj.key), req.data);\r\n            }).callback;\r\n            callbackTracker.splice(dataFoundOnIndex, 1);\r\n            Callback({\r\n                'action': 'success',\r\n                'data': response\r\n            });\r\n        }, function (error) {\r\n            var dataFoundOnIndex;\r\n            var Callback = _.find(callbackTracker, function (reqObj, index) {\r\n                dataFoundOnIndex = index;\r\n                return _.isEqual(JSON.parse(reqObj.key), req.data);\r\n            }).callback;\r\n            callbackTracker.splice(dataFoundOnIndex, 1);\r\n            Callback({\r\n                'action': 'failure',\r\n                'data': error\r\n            });\r\n        });\r\n    };\r\n}]);\r\n\r\n})(angular);","// Original JavaScript code by Chirp Internet: www.chirp.com.au\n// Please acknowledge use of this code by including this header.\n// 2/2013 jon: modified regex to display any match, not restricted to word boundaries.\n\n// License at http://www.the-art-of-web.com/copyright.html\n\n(function ( window, factory ) {\n\n  if ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n    // Expose a factory as module.exports in loaders that implement the Node\n    // module pattern (including browserify).\n    // This accentuates the need for a real window in the environment\n    // e.g. var jQuery = require(\"jquery\")(window);\n    module.exports = function( w ) {\n      w = w || window;\n      if ( !w.document ) {\n        throw new Error(\"Hilitor requires a window with a document\");\n      }\n      return factory( w.document );\n    };\n  } else {\n    if ( typeof define === \"function\" && define.amd ) {\n      // AMD. Register as a named module.\n      define( [], function() {\n        return factory(document);\n      });\n    } else {\n        // Browser globals\n        window.Hilitor = factory(document);\n    }\n  }\n\n// Pass this, window may not be defined yet\n}(this, function ( document, undefined ) {\n\n\nfunction Hilitor(id, tag, options)\n{\n  var targetNode = document.getElementById(id) || document.body;\n  var hiliteTag = tag || \"EM\";\n  var skipTags = new RegExp(\"^(?:SCRIPT|FORM|INPUT|TEXTAREA|IFRAME|VIDEO|AUDIO)$\");\n  var colors = [\"#ff6\"];\n  var wordColor = [];\n  var colorIdx = 0;\n  var matchRegex = \"\";\n  var openLeft = true;\n  var openRight = true;\n  options = options || {};\n  if (typeof options.onStart !== 'function') {\n    options.onStart = function () { /* return FALSE when you want to abort */ };\n  }\n  if (typeof options.onFinish !== 'function') {\n    options.onFinish = function () { /* What you return here is returned by Hilitor.apply() */ return true; };\n  }\n  if (typeof options.onDoOne !== 'function') {\n    options.onDoOne = function (node) { /* return FALSE when you want to skip the highlighting change for this node */ };\n  }\n\n  this.setMatchType = function(type)\n  {\n    switch(type)\n    {\n    case \"left\":\n      openLeft = false;\n      openRight = true;\n      break;\n    case \"right\":\n      openLeft = true;\n      openRight = false;\n      break;\n    default:\n    case \"open\":\n      openLeft = openRight = true;\n      break;\n    case \"complete\":\n      openLeft = openRight = false;\n      break;\n    }\n  };\n\n  this.setRegex = function (input)\n  {\n    input = input.replace(/^[^\\w]+|[^\\w]+$/g, \"\").replace(/[^\\w'\\-]+/g, \"|\");\n    var re = \"(\" + input + \")\";\n    if(!openLeft) re = \"\\\\b\" + re;\n    if(!openRight) re = re + \"\\\\b\";\n    matchRegex = new RegExp(re, \"i\");\n  };\n\n  this.getRegex = function ()\n  {\n    var retval = matchRegex.toString();\n    retval = retval.replace(/^\\/(\\\\b)?|(\\\\b)?\\/i$/g, \"\");\n    retval = retval.replace(/\\|/g, \" \");\n    return retval;\n  };\n\n  // recursively apply word highlighting\n  this.hiliteWords = function (node)\n  {\n    var i;\n\n    if(!node)\n      return;\n    if(!matchRegex)\n      return;\n    if(skipTags.test(node.nodeName))\n       return;\n    if(node.nodeName === hiliteTag && node.className === \"hilitor\")\n      return;\n\n    if(node.hasChildNodes()) {\n      for(i = 0; i < node.childNodes.length; i++) {\n        this.hiliteWords(node.childNodes[i]);\n      }\n    }\n    if(node.nodeType === 3) { // NODE_TEXT\n      if((nv = node.nodeValue) && (regs = matchRegex.exec(nv))) {\n        if (false !== options.onDoOne.call(this, node)) {\n          if(!wordColor[regs[0].toLowerCase()]) {\n            wordColor[regs[0].toLowerCase()] = colors[colorIdx++ % colors.length];\n          }\n\n          var match = document.createElement(hiliteTag);\n          match.appendChild(document.createTextNode(regs[0]));\n          match.className = \"hilitor\";\n          match.style.backgroundColor = wordColor[regs[0].toLowerCase()];\n          match.style.fontStyle = \"inherit\";\n          match.style.color = \"#000\";\n\n          var after = node.splitText(regs.index);\n          after.nodeValue = after.nodeValue.substring(regs[0].length);\n          node.parentNode.insertBefore(match, after);\n        }\n      }\n    }\n  };\n\n  // remove highlighting\n  this.remove = function ()\n  {\n    var arr, i;\n    do {\n      arr = document.querySelectorAll(hiliteTag + \".hilitor\");\n      i = 0;\n      while (i < arr.length && (el = arr[i])) {\n        // store the reference to the parent of the hilite tag as that node itself, \n        // and all its links, is invalidated in the next .replaceChild() call:\n        var parentNode = el.parentNode;\n        if (!parentNode) {\n          i++;      \n          // this entry would otherwise crash in the code below; we can however improve \n          // on the total run-time costs by cutting back on the number of times we trigger\n          // the outer loop (which serves as a recovery mechanism anyway) by continuing\n          // with this querySelectorAll()'s results, but at it's higher indexes, which\n          // are very probably still valid/okay. This saves a number of outer loops and \n          // thus a number of querySelectorAll calls.\n          continue;\n        }\n        // Note that this stuff can crash (due to the parentNode being nuked) when multiple\n        // snippets in the same text node sibling series are merged. That's what the\n        // parentNode check is for. Ugly. Even while the .querySelectorAll() 'array' is updated\n        // automatically, which would imply that this never occurs, yet: it does. :-(\n        parentNode.replaceChild(el.firstChild, el);\n        // and merge the text snippets back together again.\n        parentNode.normalize();\n      }\n    } while (arr.length > 0);\n  };\n\n  // start highlighting at target node\n  this.apply = function (input)\n  {\n    // always remove all highlight markers which have been done previously\n    this.remove();\n    if(!input) {\n      return false;\n    }\n    this.setRegex(input);\n    var rv = options.onStart.call(this);\n    if (rv === false) {\n      return rv;\n    }\n    // ensure all text node series are merged, etc. so that we don't have to bother with fragmented texts in the search/scan.\n    targetNode.normalize();\n    this.hiliteWords(targetNode);\n    return options.onFinish.call(this);\n  };\n}\n\n\n  return Hilitor;\n}));\n","(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartLastRepeaterElement', function () {\r\n\t\treturn function (scope, element, attrs) {\r\n\t\t    if (attrs.callbackOnItem === 'true') {\r\n\t\t        scope.$emit('AllRepeaterElement', element, attrs);\r\n\t\t    }\r\n\t\t    if (scope.$last) {\r\n\t\t        scope.$emit('LastRepeaterElement', element, attrs);\r\n\t\t    }\r\n\t\t};\r\n\t});\r\n})(angular);","(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartMaps', [\"$compile\", \"$sce\", \"$templateRequest\", \"$timeout\", \"$translate\", function ($compile, $sce, $templateRequest, $timeout, $translate) {\r\n        return {\r\n            restrict: 'E',\r\n            template: '<div><div ng-if=\"!mapLoaded\" class=\"row\"><div class=\"mapinfocontainer center-align\"> <i class=\"icon grey-text\"><svg><use xlink:href=\"#icon_Info\"></use></svg></i> <span class=\"center-align displayBlock\">' + $translate.instant('couldNotLoadMap') + '</span> <span class=\"center-align displayBlock\">' + $translate.instant('checkAccessPermission') + '<a href=\"javascript:void(0)\" ng-click=\"viewSwitcher()\">' + $translate.instant('tableView') + '</a>.</span></div></div></div>',\r\n            scope: true,\r\n            replace: true,\r\n            link: function (scope, element, attrs) {\r\n\r\n                //scope.locations = scope[attrs.locations];\r\n                var locationsOpt = scope.$eval(attrs.locations);\r\n                scope.locations = scope[locationsOpt[0]][locationsOpt[1]];\r\n\r\n                scope.mapLoaded = true;\r\n                if (typeof window.google !== 'object' || typeof window.google.maps !== 'object') {\r\n                    scope.mapLoaded = false;\r\n                    scope.viewSwitcher = function () {\r\n                        scope.locations.viewSwitcherFlag.flag = false;\r\n                    };\r\n                    return false;\r\n                }\r\n\r\n                var myLatLng = new google.maps.LatLng(21, 78);\r\n                var mapOptions = {\r\n                    center: myLatLng,\r\n                    maxZoom: 14,\r\n                    minZoom: 2,\r\n                    streetViewControl: false,\r\n                    mapTypeControl: false,\r\n                    mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n                    styles: [\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"elementType\": \"labels.text.fill\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                               {\r\n                                   \"visibility\": \"on\"\r\n                               },\r\n                               {\r\n                                   \"color\": \"#6fa4e4\",\r\n                                   \"font-weight\": \"normal\"\r\n                               }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t   {\r\n\t\t\t\t\t\t       \"elementType\": \"labels.text.stroke\",\r\n\t\t\t\t\t\t       \"stylers\": [\r\n                                 {\r\n                                     \"visibility\": \"off\"\r\n                                 }\r\n\t\t\t\t\t\t       ]\r\n\t\t\t\t\t\t   },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.fill\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.stroke\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"labels\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#6fa4e4\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.land_parcel\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.locality\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                              {\r\n                                  \"color\": \"#6fa4e4\",\r\n                                  \"font-weight\": \"normal\"\r\n                              },\r\n                               {\r\n                                   \"visibility\": \"simplified\"\r\n                               }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.neighborhood\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"e6ebf1\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.stroke\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"elementType\": \"labels\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#6fa4e4\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.man_made\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"on\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural.landcover\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural.terrain\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"poi\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"road\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.airport\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.bus\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.rail\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"water\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#ffffff\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t }\r\n                    ]\r\n                };\r\n                element.height(480);\r\n\r\n                var map = new google.maps.Map(document.getElementById(attrs.id), mapOptions);\r\n\r\n                var mcOptions = { gridSize: 50, maxZoom: 14, imagePath: scope.locations.baseImgUrl + 'm' };\r\n\r\n                var infowindow = new google.maps.InfoWindow({\r\n                    maxWidth: 360\r\n                });\r\n                var latlngbounds = new google.maps.LatLngBounds();\r\n                var markers = [];\r\n                var img;\r\n                var key;\r\n                var mapDataLeng = scope.locations.locData.length,\r\n                    dataGeoDataTemp,\r\n\t\t\t        markerCluster;\r\n\r\n                markerCluster = new MarkerClusterer(map, markers, mcOptions);\r\n                markerCluster.styles_.forEach(function (val, ind) {\r\n                    val.textColor = \"white\";\r\n                });\r\n\r\n                // onClickZoom OVERRIDE\r\n                markerCluster.onClickZoom = function (event) { return multiChoice(markerCluster, event); };\r\n                scope.locationClusterMarker = {};\r\n                for (key = 0; key < mapDataLeng; key++) {\r\n                    var geocoder = new google.maps.Geocoder();\r\n                    (function (value, key) {\r\n                        mapGeocodeFn(value, key, mapDataLeng)\r\n\r\n                    })(scope.locations.locData[key], key);\r\n                };\r\n\r\n                function infoWindowStyle() {\r\n\r\n                    var iwOuter = $('.gm-style-iw');\r\n                    var iwBackground = iwOuter.prev();\r\n                    var $infoWin = iwOuter.parent('div').parent('div').parent('div');\r\n\r\n                    $infoWin.css({ visibility: 'hidden' });\r\n                    iwOuter.next().css('display', 'none');\r\n                    iwOuter.children(':nth-child(1)').css({ 'overflow': 'visible' });\r\n                    iwBackground.children(':nth-child(2)').css({ 'display': 'none' });\r\n                    iwBackground.children(':nth-child(4)').css({ 'display': 'none' });\r\n                    iwOuter.parent().css({ width: '360px' });\r\n                    iwOuter.css({ 'z-index': '-1' });\r\n                    $infoWin.css({ visibility: 'visible' });\r\n\r\n                }\r\n\r\n                function mapGeocodeFn(value, key, mapDataLeng) {\r\n                    var addressData = value.countryInfo ? value.countryInfo.CountryCode.toString() : value.state ? value.state.toString() : '',\r\n                        zipcode = value.zipcode ? value.zipcode.toString() : '';\r\n                    geocoder.geocode({\r\n                        componentRestrictions: {\r\n                            country: addressData,\r\n                            postalCode: zipcode\r\n                        }\r\n                    }, function (results, status) {\r\n                        if (status == google.maps.GeocoderStatus.OK) {\r\n\r\n                            if (key >= 7) {\r\n                                img = key % 7;\r\n                            } else {\r\n                                img = key;\r\n                            }\r\n\r\n                            var marker = new google.maps.Marker({\r\n                                position: new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()),\r\n                                map: map,\r\n                                title: value.state,\r\n                                id: key,\r\n                                //animation: google.maps.Animation.DROP,\r\n                                icon: scope.locations.baseImgUrl + \"cmarker\" + img + \".png\"\r\n                            });\r\n                            marker.setMap(map);\r\n                            markers.push(marker);\r\n\r\n                            markerCluster.addMarkers(markers);\r\n\r\n                            google.maps.event.addListener(marker, 'click', function () {\r\n                                var marker = this;\r\n                                //infowindow.setContent($compile(linker)(scope)[0]);\r\n                                scope.locations.id = marker.id;\r\n                                infowindow.open(map, marker);\r\n                                infoWindowStyle();\r\n                            });\r\n\r\n                            //AutoZoom map to fit all markers\r\n                            latlngbounds.extend(new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()));\r\n                            map.fitBounds(latlngbounds);\r\n                        }\r\n                        dataGeoDataTemp = markers.length ? false : true;\r\n                        if (dataGeoDataTemp != scope.locations.dataGeoData) {\r\n                            scope.$apply(function () {\r\n                                scope.locations.dataGeoData = dataGeoDataTemp;\r\n                            });\r\n                        }\r\n\r\n                        if (dataGeoDataTemp && scope.locations.viewSwitcherFlag.flag) {\r\n                            scope.$apply(function () {\r\n                                scope.locations.viewSwitcherFlag.flag = false;\r\n                            });\r\n                        }\r\n                    });\r\n                };\r\n                function multiChoice(mc, event) {\r\n\r\n                    scope.locationClusterMarker = event.cluster_;\r\n\r\n                    //map.panTo(event.cluster_.markers_[0].position);\r\n\r\n                    var clusterDom = '<ul id=\"dropdown1\" class=\"dropdown-content clusterDomContainer\"><li ng-click=\"clusterListFn(marker)\" ng-repeat=\"marker in locationClusterMarker.markers_\"><a href=\"javascript:void(0)\" class=\"grey-text text-darken-4\">{{locations.locData[marker.id].locname}}</a></li></ul>';\r\n                    clusterDom = $compile(clusterDom)(scope);\r\n                    if (!angular.element(event.div_).hasClass('clusterDomContainer-dropdown-button')) {\r\n                        angular.element(event.div_).addClass('clusterDomContainer-dropdown-button').attr({ 'data-activates': 'dropdown1', 'data-stoppropagation': true }).append(clusterDom);\r\n                        setTimeout(function () {\r\n                            var $dropBtn = angular.element('.clusterDomContainer-dropdown-button');\r\n                            $dropBtn.dropdown({\r\n                                constrain_width: false\r\n                            });\r\n                            $dropBtn.trigger('click');\r\n\r\n                        }, 10)\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                var unbindWatch = scope.$watch('locations.mapReinit', function (val) {\r\n                    if (val.reinit) {\r\n                        mapDataLeng = scope.locations.locData.length;\r\n                        infowindow.close();\r\n                        if (markerCluster) {\r\n                            markerCluster.clearMarkers();\r\n                            markers = [];\r\n                        }\r\n                        for (key = 0; key < mapDataLeng; key++) {\r\n                            var geocoder = new google.maps.Geocoder();\r\n                            (function (value, key) {\r\n                                mapGeocodeFn(value, key, mapDataLeng);\r\n                            })(scope.locations.locData[key], key);\r\n                        };\r\n                    }\r\n\r\n                    if (val.refresh) {\r\n                        setTimeout(function () {\r\n                            google.maps.event.trigger(map, \"resize\");\r\n                            map.fitBounds(latlngbounds);\r\n                            var zoom = map.getZoom();\r\n                            map.setZoom(zoom > 14 ? 14 : zoom);\r\n                        }, 100);\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    unbindWatch();\r\n                    scope.dataOption = null;\r\n                    infowindow = null;\r\n                    latlngbounds = null;\r\n                    markers = null;\r\n                    mapOptions = null;\r\n                    map = null;\r\n                    geocoder = null;\r\n                });\r\n\r\n                scope.clusterListFn = function (data) {\r\n                    var marker = data;\r\n                    $timeout(function () {\r\n                        scope.locations.id = marker.id;\r\n                        infowindow.setPosition(marker.position);\r\n                        infowindow.open(map);\r\n                        infoWindowStyle();\r\n                    }, 10);\r\n                };\r\n\r\n                google.maps.event.addListener(map, 'click', function (event) {\r\n                    if (infowindow) {\r\n                        var $locationCardDropdown = angular.element('.mapdropdownbtn');\r\n                        if ($locationCardDropdown.hasClass('active')) {\r\n                            $locationCardDropdown.trigger('click');\r\n                        }\r\n                        infowindow.close();\r\n                    }\r\n                });\r\n                var templateUrl = $sce.getTrustedResourceUrl(scope.locations.infoTemplateURL);\r\n                var linker;\r\n                $templateRequest(templateUrl).then(function (template) {\r\n                    linker = template;\r\n                    infowindow.setContent($compile(linker)(scope)[0]);\r\n                });\r\n                google.maps.event.addDomListener(map, 'zoom_changed', function () {\r\n                    if (infowindow) {\r\n                        var $locationCardDropdown = angular.element('.mapdropdownbtn');\r\n                        if ($locationCardDropdown.hasClass('active')) {\r\n                            $locationCardDropdown.trigger('click');\r\n                        }\r\n                        infowindow.close();\r\n                    }\r\n                    angular.element('#dropdown1').remove();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})(angular);","(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartMetadataChips', ['debouncer', function (debouncer) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\tscope: {\r\n\t\t\t\t\"smartmetadata\": \"=metadata\",\r\n\t\t\t\t\"metadatatitle\": \"@\",\r\n\t\t\t\t\"maxlength\": \"@\",\r\n\t\t\t\t\"callBack\": \"&\"\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tscope.fieldClass = typeof attrs.fieldClass === 'undefined' ? 's4' : attrs.fieldClass;\r\n\t\t\t\tscope.itemTotal = typeof attrs.itemTotal === 'undefined' ? 3 : (parseInt(attrs.itemTotal, 10) <= 0 ? 0 : parseInt(attrs.itemTotal, 10));\r\n\t\t\t\tscope.fieldkey = typeof attrs.fieldkey === 'undefined' ? 'name' : attrs.fieldkey;\r\n\t\t\t\tscope.showMoreChips = 0;\r\n\r\n\t\t\t\tattrs.$observe('optionId', function () {\r\n\t\t\t\t\tscope.optionId = attrs.optionId;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.$on('LastRepeaterElement', function (scope, element, attrs) {\r\n\t\t\t\t\tdebouncer.add(function () {\r\n\t\t\t\t\t\tvar $chipsActiceContainer;\r\n\t\t\t\t\t\t$chipsActiceContainer = typeof $chipsActiceContainer !== 'undefined' ? $chipsActiceContainer : angular.element('#' + scope.targetScope.$parent.optionId + '-chips-0');\r\n\t\t\t\t\t\tif ($chipsActiceContainer) {\r\n\t\t\t\t\t\t\t$chipsActiceContainer.css({ 'transition': 'all .5s ease-in-out', 'background': '#e4e4e4', 'color': '#000' });\r\n\t\t\t\t\t\t\t$chipsActiceContainer.find('.chips-icon').css({ 'transition': 'all .5s ease-in-out', 'color': '#9e9e9e' });\r\n\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\t$chipsActiceContainer.css('transition', 'none').find('.chips-icon').css('transition', 'none');\r\n\t\t\t\t\t\t\t}, 500);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 100);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.metadataAdd = function (data, $e) {\r\n\t\t\t\t\tvar metadataContainer = angular.element('#' + scope.optionId).width() - 200,\r\n\t\t\t\t\t\t$chipsActiceContainer,\r\n\t\t\t\t\t\tfieldKey = scope.fieldkey;\r\n\t\t\t\t\tif (angular.isString(data.displayfield.title)) {\r\n\t\t\t\t\t    data.displayfield.title = data.displayfield.title.trim();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!data.displayfield.title) {\r\n\t\t\t\t\t    data.displayfield.isfocus = true;\r\n\t\t\t\t\t    return 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$chipsActiceContainer = angular.element('#' + scope.optionId + '-chips-0');\r\n\t\t\t\t\tif ($chipsActiceContainer) {\r\n\t\t\t\t\t\t$chipsActiceContainer.css({ 'transition': 'none', 'background': '#159dfc', 'color': '#fff' });\r\n\t\t\t\t\t\t$chipsActiceContainer.find('.chips-icon').css({ 'transition': 'none', 'color': '#fff' });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.options.unshift({});\r\n\t\t\t\t\tdata.options[0][fieldKey] = data.displayfield.title;\r\n\t\t\t\t\tdata.displayfield.title = \"\";\r\n\t\t\t\t\tdata.displayfield.isfocus = true;\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataCheck = function (data, $e) {\r\n\t\t\t\t\tvar char = $e.which || $e.keyCode,\r\n\t\t\t\t\t\tcharReq = [13, 188, 186],\r\n\t\t\t\t\t\tcharReqLength = charReq.length,\r\n\t\t\t\t\t\tcharReqKey,\r\n\t\t\t\t\t\ti;\r\n\r\n\t\t\t\t\tif (data.displayfield.title) {\r\n\t\t\t\t\t\tfor (i = 0; i < charReqLength; i++) {\r\n\t\t\t\t\t\t\tif (char === charReq[i]) {\r\n\t\t\t\t\t\t\t\tcharReqKey = charReq[i] === 188 ? ',' : charReq[i] === 186 ? ';' : '';\r\n\t\t\t\t\t\t\t\tif (charReqKey) {\r\n\t\t\t\t\t\t\t\t\tdata.displayfield.title = data.displayfield.title.replace(charReqKey, '');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tangular.element($e.currentTarget).blur();\r\n\t\t\t\t\t\t\t\tscope.metadataAdd(data, $e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar beforeDelete = function (obj) {\r\n\t\t\t\t    scope.callBack({\r\n\t\t\t\t        data: {\r\n\t\t\t\t            'data': obj.data.chipData.options[obj.data.index],\r\n\t\t\t\t            'type': 'delete', callback: deleteCallback\r\n\t\t\t\t        }\r\n\t\t\t\t    });\r\n\t\t\t\t    function deleteCallback(a) {\r\n\t\t\t\t        if (a) { obj.success() }\r\n\t\t\t\t        else { obj.reject() }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.metadataDelete = function (data, ind) {\r\n\t\t\t\t    if (attrs.callBack) {\r\n\t\t\t\t        beforeDelete({\r\n\t\t\t\t            data: { chipData: data, index: ind },\r\n\t\t\t\t            success: function () {\r\n\t\t\t\t                // user wants to delete\r\n\t\t\t\t                data.options.splice(ind, 1);\r\n\t\t\t\t                scope.$apply();\r\n\t\t\t\t            },\r\n\t\t\t\t            reject: function () {\r\n\t\t\t\t                // deletion rejected!\r\n\t\t\t\t            }\r\n\t\t\t\t        });\r\n\t\t\t\t    } else {\r\n\t\t\t\t        data.options.splice(ind, 1);\r\n\t\t\t\t    }\r\n\t\t\t\t};\r\n\t\t\t\tscope.smartmetachipTitleClick = function (data, ind) {\r\n\t\t\t\t\tangular.isFunction(scope.callBack) && scope.callBack({ data: { 'data': data.options[ind], 'type': 'add' } });\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataShowMore = function (cont) {\r\n\t\t\t\t\tangular.element('#' + cont).css('transition', '1s ease-in-out');\r\n\t\t\t\t\tdebouncer.add(function () {\r\n\t\t\t\t\t\tscope.showMoreChips = 1;\r\n\t\t\t\t\t}, 10);\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataLessMore = function (cont) {\r\n\t\t\t\t\tangular.element('#' + cont).css('transition', 'none');\r\n\t\t\t\t\tscope.showMoreChips = 0;\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/smartMetadataChips/smartMetadataChipsTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})(angular);","(function () {\r\n\t'use strict';\r\n\tangular.module('SMART2').value('uiSliderConfig', {}).directive('smartRangeSlider', ['uiSliderConfig', '$timeout', function (uiSliderConfig, $timeout) {\r\n\t\tuiSliderConfig = uiSliderConfig || {};\r\n\t\treturn {\r\n\t\t\trequire: 'ngModel',\r\n\t\t\tcompile: function () {\r\n\t\t\t\tvar preLink = function (scope, elm, attrs, ngModel) {\r\n\r\n\t\t\t\t\tfunction parseNumber(n, decimals) {\r\n\t\t\t\t\t\treturn (decimals) ? parseFloat(n) : parseInt(n, 10);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar directiveOptions = angular.copy(scope.$eval(attrs.uiSlider));\r\n\t\t\t\t\tvar options = angular.extend(directiveOptions || {}, uiSliderConfig);\r\n\t\t\t\t\t// Object holding range values\r\n\t\t\t\t\tvar prevRangeValues = {\r\n\t\t\t\t\t\tmin: null,\r\n\t\t\t\t\t\tmax: null\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// convenience properties\r\n\t\t\t\t\tvar properties = ['min', 'max', 'step', 'lowerBound', 'upperBound'];\r\n\t\t\t\t\tvar useDecimals = (!angular.isUndefined(attrs.useDecimals)) ? true : false;\r\n\t\t\t\t\tvar updateOn = (angular.isDefined(options['updateOn'])) ? options['updateOn'] : 'slide'\r\n\r\n\t\t\t\t\tvar init = function () {\r\n\t\t\t\t\t\t// When ngModel is assigned an array of values then range is expected to be true.\r\n\t\t\t\t\t\t// Warn user and change range to true else an error occurs when trying to drag handle\r\n\t\t\t\t\t\tif (angular.isArray(ngModel.$viewValue) && options.range !== true) {\r\n\t\t\t\t\t\t\tconsole.warn('Change your range option of ui-slider. When assigning ngModel an array of values then the range option should be set to true.');\r\n\t\t\t\t\t\t\toptions.range = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Ensure the convenience properties are passed as options if they're defined\r\n\t\t\t\t\t\t// This avoids init ordering issues where the slider's initial state (eg handle\r\n\t\t\t\t\t\t// position) is calculated using widget defaults\r\n\t\t\t\t\t\t// Note the properties take precedence over any duplicates in options\r\n\t\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\t\tif (angular.isDefined(attrs[property])) {\r\n\t\t\t\t\t\t\t\toptions[property] = parseNumber(attrs[property], useDecimals);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\telm.slider(options);\r\n\t\t\t\t\t\tinit = angular.noop;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Find out if decimals are to be used for slider\r\n\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\t// support {{}} and watch for updates\r\n\t\t\t\t\t\tattrs.$observe(property, function (newVal) {\r\n\t\t\t\t\t\t\tif (!!newVal) {\r\n\t\t\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\t\t\toptions[property] = parseNumber(newVal, useDecimals);\r\n\t\t\t\t\t\t\t\telm.slider('option', property, parseNumber(newVal, useDecimals));\r\n\t\t\t\t\t\t\t\tngModel.$render();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\tattrs.$observe('disabled', function (newVal) {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\telm.slider('option', 'disabled', !!newVal);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Watch ui-slider (byVal) for changes and update\r\n\t\t\t\t\tscope.$watch(attrs.uiSlider, function (newVal) {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\tif (newVal !== undefined) {\r\n\t\t\t\t\t\t\telm.slider('option', newVal);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\t// Late-bind to prevent compiler clobbering\r\n\t\t\t\t\t$timeout(init, 0, true);\r\n\r\n\t\t\t\t\t// Update model value from slider\r\n\t\t\t\t\telm.bind(updateOn, function (event, ui) {\r\n\t\t\t\t\t\tvar valuesChanged;\r\n\r\n\t\t\t\t\t\tif (ui.values) {\r\n\t\t\t\t\t\t\tvar boundedValues = ui.values.slice();\r\n\r\n\t\t\t\t\t\t\tif (options.lowerBound && boundedValues[0] < options.lowerBound) {\r\n\t\t\t\t\t\t\t\tboundedValues[0] = Math.max(boundedValues[0], options.lowerBound);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (options.upperBound && boundedValues[1] > options.upperBound) {\r\n\t\t\t\t\t\t\t\tboundedValues[1] = Math.min(boundedValues[1], options.upperBound);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (boundedValues[0] !== ui.values[0] || boundedValues[1] !== ui.values[1]) {\r\n\t\t\t\t\t\t\t\tvaluesChanged = true;\r\n\t\t\t\t\t\t\t\tui.values = boundedValues;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar boundedValue = ui.value;\r\n\r\n\t\t\t\t\t\t\tif (options.lowerBound && boundedValue < options.lowerBound) {\r\n\t\t\t\t\t\t\t\tboundedValue = Math.max(boundedValue, options.lowerBound);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (options.upperBound && boundedValue > options.upperBound) {\r\n\t\t\t\t\t\t\t\tboundedValue = Math.min(boundedValue, options.upperBound);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (boundedValue !== ui.value) {\r\n\t\t\t\t\t\t\t\tvaluesChanged = true;\r\n\t\t\t\t\t\t\t\tui.value = boundedValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tngModel.$setViewValue(ui.values || ui.value);\r\n\t\t\t\t\t\t$(ui.handle).find('.ui-slider-tip').text(ui.value);\r\n\t\t\t\t\t\tscope.$apply();\r\n\r\n\t\t\t\t\t\tif (valuesChanged) {\r\n\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\telm.slider('value', ui.values || ui.value);\r\n\t\t\t\t\t\t\t}, 0);\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Update slider from model value\r\n\t\t\t\t\tngModel.$render = function () {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\tvar method = options.range === true ? 'values' : 'value';\r\n\r\n\t\t\t\t\t\tif (options.range !== true && isNaN(ngModel.$viewValue) && !(ngModel.$viewValue instanceof Array)) {\r\n\t\t\t\t\t\t\tngModel.$viewValue = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (options.range && !angular.isDefined(ngModel.$viewValue)) {\r\n\t\t\t\t\t\t\tngModel.$viewValue = [0, 0];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Do some sanity check of range values\r\n\t\t\t\t\t\tif (options.range === true) {\r\n\t\t\t\t\t\t\t// previously, the model was a string b/c it was in a text input, need to convert to a array.\r\n\t\t\t\t\t\t\t// make sure input exists, comma exists once, and it is a string.\r\n\t\t\t\t\t\t\tif (ngModel.$viewValue && angular.isString(ngModel.$viewValue) && (ngModel.$viewValue.match(/,/g) || []).length === 1) {\r\n\t\t\t\t\t\t\t\t// transform string model into array.\r\n\t\t\t\t\t\t\t\tvar valueArr = ngModel.$viewValue.split(',');\r\n\t\t\t\t\t\t\t\tngModel.$viewValue = [Number(valueArr[0]), Number(valueArr[1])];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Check outer bounds for min and max values\r\n\t\t\t\t\t\t\tif (angular.isDefined(options.min) && options.min > ngModel.$viewValue[0]) {\r\n\t\t\t\t\t\t\t\tngModel.$viewValue[0] = options.min;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(options.max) && options.max < ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\tngModel.$viewValue[1] = options.max;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check min and max range values\r\n\t\t\t\t\t\t\tif (ngModel.$viewValue[0] > ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\t// Min value should be less to equal to max value\r\n\t\t\t\t\t\t\t\tif (prevRangeValues.min >= ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\t\tngModel.$viewValue[1] = prevRangeValues.min;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Max value should be less to equal to min value\r\n\t\t\t\t\t\t\t\tif (prevRangeValues.max <= ngModel.$viewValue[0]) {\r\n\t\t\t\t\t\t\t\t\tngModel.$viewValue[0] = prevRangeValues.max;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Store values for later user\r\n\t\t\t\t\t\t\tprevRangeValues.min = ngModel.$viewValue[0];\r\n\t\t\t\t\t\t\tprevRangeValues.max = ngModel.$viewValue[1];\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telm.slider(method, ngModel.$viewValue);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tscope.$watch(attrs.ngModel, function () {\r\n\t\t\t\t\t\tif (options.range === true) {\r\n\t\t\t\t\t\t\tngModel.$render();\r\n\r\n\t\t\t\t\t\t\t$(elm).find('.ui-slider-tip').each(function (i, tipElm) {\r\n\t\t\t\t\t\t\t\t$(tipElm).text(ngModel.$viewValue[i]);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$(elm).find('.ui-slider-tip').text(ngModel.$viewValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\tfunction destroy() {\r\n\t\t\t\t\t\tif (elm.hasClass('ui-slider')) {\r\n\t\t\t\t\t\t\telm.slider('destroy');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.$on(\"$destroy\", destroy);\r\n\t\t\t\t\telm.one('$destroy', destroy);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar postLink = function (scope, element, attrs, ngModel) {\r\n\t\t\t\t\t// Add tick marks if 'tick' and 'step' attributes have been setted on element.\r\n\t\t\t\t\t// Support horizontal slider bar so far. 'tick' and 'step' attributes are required.\r\n\t\t\t\t\tvar options = angular.extend({}, scope.$eval(attrs.uiSlider));\r\n\t\t\t\t\tvar properties = ['min', 'max', 'step', 'tick', 'tip'];\r\n\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\tif (angular.isDefined(attrs[property])) {\r\n\t\t\t\t\t\t\toptions[property] = attrs[property];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (angular.isDefined(options['tick']) && angular.isDefined(options['step'])) {\r\n\t\t\t\t\t\tvar total = parseInt((parseInt(options['max']) - parseInt(options['min'])) / parseInt(options['step']));\r\n\t\t\t\t\t\tfor (var i = total; i >= 0; i--) {\r\n\t\t\t\t\t\t\tvar left = ((i / total) * 100) + '%';\r\n\t\t\t\t\t\t\t$(\"<div/>\").addClass(\"ui-slider-tick\").appendTo(element).css({ left: left });\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (angular.isDefined(options['tip'])) {\r\n\t\t\t\t\t\t$timeout(function () {\r\n\t\t\t\t\t\t\tvar handles = element.find('.ui-slider-handle');\r\n\t\t\t\t\t\t\tif (handles && handles.length > 1 && ngModel.$viewValue && angular.isArray(ngModel.$viewValue)) {\r\n\t\t\t\t\t\t\t\t$(handles[0]).append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue[0] + '</div>');\r\n\t\t\t\t\t\t\t\t$(handles[1]).append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue[1] + '</div>');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\telement.find('.ui-slider-handle').append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue + '</div>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 10);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpre: preLink,\r\n\t\t\t\t\tpost: postLink\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();","(function (angular,$) {\r\n    /*\r\n        :: directive attributes\r\n                onResize    :   & // fires when element changes size\r\n          onHeightChange    :   & // fires when element's height change\r\n           onWidthChange    :   & // fires when element's width change\r\n    */\r\n    \"use strict\";\r\n    angular.module(\"SMART2\")\r\n        .directive(\"smartResize\", [\"$timeout\", \"$parse\", smartResizeDir]);\r\n\r\n    function smartResizeDir($timeout, $parse) {\r\n        return {\r\n            link: function (scope, element, attrs) {\r\n                var callbacks = {\r\n                    onResize: attrs.onResize ? $parse(addArguments(attrs.onResize)) : null,\r\n                    onHeightChange: attrs.onHeightChange ? $parse(addArguments(attrs.onHeightChange)) : null,\r\n                    onWidthChange: attrs.onWidthChange ? $parse(addArguments(attrs.onWidthChange)) : null\r\n                };\r\n                function addArguments(fn) {\r\n                    return fn.replace(/\\(\\)/, '(e)');\r\n                }\r\n                $timeout(function () {\r\n                    resizeElement({\r\n                        element: element.get(0),\r\n                        onResize: function (a) {\r\n                            callbacks.onResize(scope, { e: a });\r\n                        },\r\n                        onHeightChange: function (a) {\r\n                            callbacks.onHeightChange(scope, { e: a });\r\n                        },\r\n                        onWidthChange: function (a) {\r\n                            callbacks.onWidthChange(scope, { e: a });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function resizeElement(config) {\r\n                    var config = $.extend({\r\n                        element: null, // html element :: accepts Html Element not selector\r\n                        onResize: null, // callback fires after changed size of element :: accepts function\r\n                        onHeightChange: null, // callback fires after changed height of element :: accepts function\r\n                        onWidthChange: null // callback fires after changed width of element :: accepts function\r\n                    }, config),\r\n                        resizeSensorCss = 'width:100%;height:100%;position:absolute;left:0;top:0;z-index:-1;',\r\n                        sensorCss = 'position:absolute;left:0;top:0;overflow:hidden;height:100%;width:100%;',\r\n                        sensorElementCss = 'position:relative;top:0;',\r\n                        html = '<div class=\"resize-sensor\" style=\"' + resizeSensorCss + '\"><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"shrink\"><div class=\"sensor-element-shrink\" style=\"' + sensorElementCss + '\"></div></div><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"expand\"><div class=\"sensor-element-expand\" style=\"' + sensorElementCss + '\"></div></div></div>';\r\n\r\n                    var el = $(config.element),\r\n                        PD = { height: 0, width: 0 },\r\n                        PDC = { height: 0, width: 0 };\r\n                    if (el.length > 0) {\r\n                        var mainSensor = $(html);\r\n                        el.css(\"position\", \"relative\").append(mainSensor);\r\n                        mainSensor.find(\".sensor\").each(function () {\r\n                            var sensor = $(this);\r\n                            if (sensor.data(\"el\") == \"expand\") {\r\n                                sensor.find(\".sensor-element-expand\")\r\n                                    .css({ width: el.outerWidth() * 2, height: el.outerHeight() * 2 });\r\n                            } else if (sensor.data(\"el\") == \"shrink\") {\r\n                                sensor.find(\".sensor-element-shrink\")\r\n                                    .css({ width: \"200%\", height: \"200%\" });\r\n                            }\r\n                            sensor.scrollLeft(el.outerWidth() * 2);\r\n                            sensor.scrollTop(el.outerHeight() * 2);\r\n                        }).each(function () {\r\n                            var sensor = $(this);\r\n                            sensor.scroll(function (e) {\r\n                                var _this = $(this);\r\n                                if ((el.outerWidth() != PD.width || el.outerHeight() != PD.height) && (PD.height != 0 && PD.width != 0)) {\r\n                                    PD.height = el.outerHeight();\r\n                                    PD.width = el.outerWidth()\r\n                                    if (_this.data(\"el\") == \"shrink\") {\r\n                                        mainSensor\r\n                                            .find(\".sensor-element-expand\")\r\n                                            .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2);\r\n\r\n                                    } else if (_this.data(\"el\") == \"expand\") {\r\n                                        mainSensor\r\n                                            .find(\".sensor-element-shrink\")\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2)\r\n                                            .next()\r\n                                            .find(\".sensor-element-expand\")\r\n                                            .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2);\r\n                                    }\r\n\r\n                                    initHandlers(PD, PDC); // invoke callbacks\r\n                                } else {\r\n                                    PD.height = el.outerHeight();\r\n                                    PD.width = el.outerWidth();\r\n\r\n                                    PDC.height = PD.height;\r\n                                    PDC.width = PD.width;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    function initHandlers(size, previousSize) {\r\n                        if (callbacks.onResize) {\r\n                            config.onResize.call(config.element, size); // execute resize callback\r\n                        }\r\n\r\n                        if (size.height != previousSize.height && callbacks.onHeightChange) {\r\n                            config.onHeightChange.call(config.element, size); // execute height resize callback\r\n                        } else if (size.width != previousSize.width && callbacks.onWidthChange) {\r\n                            config.onWidthChange.call(config.element, size); // execute width resize callback\r\n                        }\r\n\r\n                        // save new dimention\r\n                        previousSize.height = size.height;\r\n                        previousSize.width = size.width;\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    $.fn.resizeSensor = function (setting) {\r\n\r\n        var resizeSensorCss = 'width:100%;height:100%;position:absolute;left:0;top:0;z-index:-1;',\r\n            sensorCss = 'position:absolute;left:0;top:0;overflow:hidden;height:100%;width:100%;',\r\n            sensorElementCss = 'position:relative;top:0;',\r\n            html = '<div class=\"resize-sensor\" style=\"' + resizeSensorCss + '\"><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"shrink\"><div class=\"sensor-element-shrink\" style=\"' + sensorElementCss + '\"></div></div><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"expand\"><div class=\"sensor-element-expand\" style=\"' + sensorElementCss + '\"></div></div></div>',\r\n         defaultConfig = {\r\n             onResize: null, // callback fires after changed size of element :: accepts function\r\n             onHeightChange: null, // callback fires after changed height of element :: accepts function\r\n             onWidthChange: null // callback fires after changed width of element :: accepts function\r\n         };\r\n\r\n        return this.each(function () {\r\n\r\n            var config = $.extend(defaultConfig, setting),\r\n                el = $(this),\r\n                    PD = { height: 0, width: 0 },\r\n                    PDC = { height: 0, width: 0 };\r\n            if (el.length > 0) {\r\n                var mainSensor = $(html);\r\n                if (el.css('position') === 'static') {\r\n                    el.css(\"position\", \"relative\")\r\n                }\r\n                el.append(mainSensor);\r\n\r\n                mainSensor.find(\".sensor\").each(function () {\r\n                    var sensor = $(this);\r\n                    if (sensor.data(\"el\") == \"expand\") {\r\n                        sensor.find(\".sensor-element-expand\")\r\n                            .css({ width: el.outerWidth() * 2, height: el.outerHeight() * 2 });\r\n                    } else if (sensor.data(\"el\") == \"shrink\") {\r\n                        sensor.find(\".sensor-element-shrink\")\r\n                            .css({ width: \"200%\", height: \"200%\" });\r\n                    }\r\n                    sensor.scrollLeft(el.outerWidth() * 2);\r\n                    sensor.scrollTop(el.outerHeight() * 2);\r\n                }).each(function () {\r\n                    var sensor = $(this);\r\n                    sensor.scroll(function (e) {\r\n                        var _this = $(this);\r\n                        if ((el.outerWidth() != PD.width || el.outerHeight() != PD.height) && (PD.height != 0 && PD.width != 0)) {\r\n                            PD.height = el.outerHeight();\r\n                            PD.width = el.outerWidth()\r\n                            if (_this.data(\"el\") == \"shrink\") {\r\n                                mainSensor\r\n                                    .find(\".sensor-element-expand\")\r\n                                    .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2);\r\n\r\n                            } else if (_this.data(\"el\") == \"expand\") {\r\n                                mainSensor\r\n                                    .find(\".sensor-element-shrink\")\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2)\r\n                                    .next()\r\n                                    .find(\".sensor-element-expand\")\r\n                                    .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2);\r\n                            }\r\n\r\n                            initHandlers(sensor, PD, PDC); // invoke callbacks\r\n                        } else {\r\n                            PD.height = el.outerHeight();\r\n                            PD.width = el.outerWidth();\r\n\r\n                            PDC.height = PD.height;\r\n                            PDC.width = PD.width;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function initHandlers(sensor, size, previousSize) {\r\n                    if (config.onResize) {\r\n                        config.onResize.call(sensor, size); // execute resize callback\r\n                    }\r\n\r\n                    if (size.height != previousSize.height && config.onHeightChange) {\r\n                        config.onHeightChange.call(sensor, size); // execute height resize callback\r\n                    } else if (size.width != previousSize.width && config.onWidthChange) {\r\n                        config.onWidthChange.call(sensor, size); // execute width resize callback\r\n                    }\r\n\r\n                    // save new dimention\r\n                    previousSize.height = size.height;\r\n                    previousSize.width = size.width;\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    };\r\n})(angular, jQuery);\r\n","(function (angular) {\r\n    \"use strict\";\r\n    angular.module(\"SMART2\")\r\n        .directive(\"smartRevision\", [\"$timeout\", \"$sce\", \"$translate\", smartRevisionDir]);\r\n\r\n    function smartRevisionDir($timeout, $sce, $translate) {\r\n        return {\r\n            restrict: \"E\",\r\n            replace: true,\r\n            transclude: {\r\n                oldData: \"?span\",\r\n                newData:\"?div\"\r\n            },\r\n            scope: {\r\n                align: \"@\",\r\n                oldData: \"=?\",\r\n                newData: \"=?\",\r\n                label: \"@\",\r\n                type: \"=?\",\r\n                changes: \"@\",\r\n                imgDimention: \"@\",\r\n                treeCallback: \"&\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var value = {\r\n                    image: \"image\",\r\n                    normal: \"normal\",\r\n                    defaultDimention: 150,\r\n                    tree: \"tree\"\r\n                };\r\n                scope.type = scope.type || value.normal;\r\n                scope.align = scope.align ? scope.align : \"left\";\r\n                scope.treemode = attrs.treemode;\r\n                //scope.oldData = scope.oldData ? scope.oldData : attrs.oldData;\r\n                //scope.newData = scope.newData ? scope.newData : attrs.newData;\r\n\r\n                scope.closeButton = { title: $translate.instant(\"closeBtn\") };\r\n\r\n                scope.multiRows = function (data) {\r\n                    var ismultiRows = false;\r\n                    if (data) {\r\n                        var type = data.constructor.toString().match(/function ([A-Za-z]+)/)[1];\r\n                        if (type == \"Array\") {\r\n                            ismultiRows = true;\r\n                        }\r\n                    }\r\n                    return ismultiRows;\r\n                }(scope.oldData || scope.newData);\r\n                if (!scope.oldData && !scope.newData) { // for transclude element\r\n                    scope.transclude = true;\r\n                    $timeout(function () {\r\n                        element\r\n                            .find(\"[old-data]\")\r\n                            .addClass(\"revision-old-val\")\r\n                            .wrap(\"<span>\")\r\n                            .parent()\r\n                            .addClass(\"revision-old-data\");\r\n                        element\r\n                            .find(\"[new-data]\")\r\n                            .wrap(\"<span>\")\r\n                            .parent()\r\n                            .addClass(\"revision-new-data\");\r\n                    });\r\n                } else if (scope.oldData && scope.newData) {\r\n                    scope.isChanged = true;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.oldDataHtml = $sce.trustAsHtml(scope.oldData);\r\n                        scope.newDataHtml = $sce.trustAsHtml(scope.newData);\r\n                    }\r\n                } else if (scope.oldData && !scope.newData) {\r\n                    scope.isChanged = false;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.oldDataHtml = $sce.trustAsHtml(scope.oldData);\r\n                    }\r\n                } else if (!scope.oldData && scope.newData) {\r\n                    scope.isChanged = true;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.newDataHtml = $sce.trustAsHtml(scope.newData);\r\n                    }\r\n                }\r\n                if (scope.type == value.image) {\r\n                    if (scope.imgDimention) {\r\n                        scope.diagonal = {}\r\n                    } else {\r\n                        var diagonalWidth = calculateRectdiagonal(value.defaultDimention, value.defaultDimention);\r\n                        scope.diagonal = {\r\n                            width: diagonalWidth,\r\n                            left: -(diagonalWidth / 2 - value.defaultDimention / 2)\r\n                        }\r\n                    }\r\n                } else if (scope.type == value.tree) {\r\n                    scope.popup = {\r\n                        url: \"shared/directives/smartRevision/treeviewChanges.html\",\r\n                        show: false,\r\n                        callback: function (a) {\r\n                            scope.popup.show = false;\r\n                            if (attrs.treeCallback) {\r\n                                scope.treeCallback({\r\n                                    data: {\r\n                                        'oldData': scope.oldData,\r\n                                        'newData': scope.newData,\r\n                                        'type': 'close',\r\n                                        'label': scope.label\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                scope.treeChange = function () {\r\n                    if (attrs.treeCallback) {\r\n                        scope.treeCallback({\r\n                            data: {\r\n                                'oldData': scope.oldData,\r\n                                'newData': scope.newData,\r\n                                'type': 'open',\r\n                                'label': scope.label\r\n                            }\r\n                        });\r\n                    }\r\n                    scope.popup.show = true;\r\n                }\r\n            },\r\n            templateUrl: \"shared/directives/smartRevision/smartRevisionTemplate.html\"\r\n        }\r\n    }\r\n    function calculateRectdiagonal(w, h) {\r\n        return Math.sqrt(w * w + h * h);\r\n    }\r\n    function checkJson(a) {\r\n        if (a) {\r\n            try{\r\n                a = JSON.parse(a);\r\n            }catch(e){}\r\n        }\r\n\r\n        return a;\r\n    }\r\n})(angular);","(function() {\r\n    'use strict';\r\n    angular.module('SMART2')\r\n        .directive('smartSavedViewPopup', ['notification', 'cacheHelperService', 'smartSavedViewPopupCollection', '$translate', smartSavedViewPopupFunc])\r\n        .service(\"smartSavedViewPopupCollection\", function () {\r\n            this.collection = [];\r\n            this.set = function (x) {\r\n                this.collection.push(x);\r\n            }\r\n            this.get = function (x) {\r\n                return this.collection;\r\n            }\r\n        });\r\n\r\n    function smartSavedViewPopupFunc(notification, cacheHelperService, smartSavedViewPopupCollection, $translate) {\r\n        return {\r\n            restrict: 'E',\r\n            transclude: true,\r\n            scope: {\r\n                show: '=',\r\n                hide: '&',\r\n                loader: '=',\r\n                model: '=ngModel',\r\n                config: '=',\r\n                isApplyFilters: \"=\",\r\n                isSavedView: \"=\",\r\n                isSavedViewModified: \"=\",\r\n                openPopupSavedView: \"=\",\r\n                api: \"=\",\r\n                setTitle: '@',\r\n                callbackFunc: \"&\"\r\n            },\r\n            controller: [\"$scope\", \"$http\", \"$timeout\", \"smartSavedViewPopupCollection\", function ($scope, $http, $timeout, smartSavedViewPopupCollection) {\r\n                //  $scope.collection = smartSavedViewPopupCollection.get(\"all\").length;\r\n                smartSavedViewPopupCollection.set($scope);\r\n                $scope.popupInc = smartSavedViewPopupCollection.get().length;\r\n                \r\n                $scope.disableDoneButton = true;\r\n                $scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n                $scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                $scope.uncheckMarkAsDefault;\r\n                /*for Done button disabled*/\r\n                var handleDoneButtonVisibility = function () {\r\n                    var isDefaultSelected = _.find($scope.config, { \"isDefault\": true });\r\n                    if (isDefaultSelected) {\r\n                        $scope.disableDoneButton = false;\r\n                    } else {\r\n                        $scope.disableDoneButton = true;\r\n                    }\r\n                }\r\n                handleDoneButtonVisibility();\r\n                $scope.defaultCheckUncheck = true;\r\n                var handleMarkAsDefault = function () {\r\n                    $scope.isMarkAsDefault.check = false;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].isDefault && $scope.config[i].isDefaultTxt) {\r\n                            $scope.isMarkAsDefault.check = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                $scope.setDefaultFiler = function (isDefaultTrue) {\r\n                    $scope.defaultCheckUncheck = true;\r\n                    if (isDefaultTrue) {\r\n                        $scope.uncheckMarkAsDefault = false;\r\n                    } else {\r\n                        $scope.uncheckMarkAsDefault = true;\r\n                    }\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].isDefault && $scope.config[i].isDefaultTxt) {\r\n                            $scope.defaultCheckUncheck = isDefaultTrue;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                $scope.showSavedViewPopup = true;\r\n                $scope.showSaveView = true;\r\n                $scope.radioChangeCallback = function (index, currentItem) {\r\n                    var view = _.find($scope.config, { \"index\": $scope.model.name });\r\n                    if (!view) {\r\n                        view = _.find($scope.config, { \"index\": $scope.model.index });\r\n                    }\r\n                    $scope.selectedFilter = view;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        $scope.config[i].isDefault = false;\r\n                    }\r\n                    \r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if (currentItem) {\r\n                            if ($scope.config[i].index === currentItem.index) {\r\n                                $scope.config[i].isDefault = true;\r\n                            }\r\n                        } else {\r\n                            if ($scope.config[i].index === (view && view.index)) {\r\n                                $scope.config[i].isDefault = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    handleDoneButtonVisibility();\r\n                    handleMarkAsDefault();\r\n                }\r\n                $scope.currentDefault;\r\n                $scope.showSavedView = function () {\r\n                    $scope.currentDefault = _.find($scope.config, { \"isDefaultTxt\": true });\r\n                    var currentCheck = $scope.defaultCheckUncheck;\r\n                    $scope.isSavedView = true;\r\n                    $scope.isSavedFilter = true;\r\n                    if ($scope.uncheckMarkAsDefault && $scope.uncheckMarkAsDefault != undefined) {\r\n                        for (var i = 0; i < $scope.config.length; i++) {\r\n                            $scope.config[i].isDefaultTxt = false;\r\n                        }\r\n                    }\r\n                    $scope.uncheckMarkAsDefault = false;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.isMarkAsDefault.check == true) {\r\n                            $scope.config[i].isDefaultTxt = false;\r\n                            if ($scope.config[i].isDefault == true) {\r\n                                $scope.config[i].isDefaultTxt = true;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!$scope.selectedFilter.name) {\r\n                        $scope.selectedFilter.name = $scope.api.currentViewApplied.name;\r\n                    }\r\n                    if ($scope.api) {\r\n                        $scope.api.currentViewApplied = _.find($scope.config, { index: $scope.selectedFilter.index });\r\n                        if ($scope.api.currentViewApplied == null) {\r\n                            cacheHelperService.setFilterDef('{\"defaultFilterType\":3,\"filters\":[]}');\r\n                        }\r\n                        if ($scope.api.currentViewApplied != undefined) {\r\n                            cacheHelperService.setFilterDef($scope.api.currentViewApplied.Filters);\r\n                        }\r\n                        $scope.api.selectedSavedview = { \"name\": $scope.selectedFilter.name };\r\n                        $scope.api.selectedFilterView = { \"name\": $scope.selectedFilter.name };\r\n                        if ($scope.currentDefault != undefined) {\r\n                            if ($scope.currentDefault.index != $scope.api.currentViewApplied.index) {\r\n                                $scope.currentDefault.isDefault = currentCheck;\r\n                                SaveResetOrMarkAsDefault($scope.currentDefault);\r\n                            }\r\n                        }\r\n                        if ($scope.isMarkAsDefault.check == true) {\r\n                            $scope.api.currentViewApplied.isDefault = true;\r\n                            SaveResetOrMarkAsDefault($scope.api.currentViewApplied);\r\n                            $scope.isMarkAsDefault.check = false;\r\n                        } else {\r\n                            $scope.api.currentViewApplied.isDefault = false;\r\n                            SaveResetOrMarkAsDefault($scope.api.currentViewApplied);\r\n                        }\r\n                        if($scope.setTitle != \"SAVED FILTERS\")\r\n                            $scope.api.applyViewOnGrid();\r\n                    }\r\n                    $scope.callbackFunc({\r\n                        e: {\r\n                            'model': $scope.selectedFilter,\r\n                            'currOperation': 'applyFilter'\r\n                        }\r\n                    });\r\n\r\n                };\r\n\r\n                $scope.Reset = function() {\r\n                    var sysDefault = _.find($scope.config, { IsSystemDefault: true });\r\n                    sysDefault.isDefault = true;\r\n                    $scope.api.currentViewApplied = sysDefault;\r\n                    var req = {\r\n                        method: 'POST',\r\n                        url: $scope.api.UpdateSavedViewURL,\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        }\r\n                    };\r\n                    _.each($scope.config, function(n) {\r\n                        if (!n.IsSystemDefault) {\r\n                            if (n.isDefault) {\r\n                                req.data = n;\r\n                                $http(req).then(function(response) {}).catch(function (errorCallback) {\r\n                                    console.log(errorCallback.statusText);\r\n                                });\r\n                            }\r\n                            n.isDefault = false;\r\n                        }\r\n                    })\r\n                    if($scope.setTitle != \"SAVED FILTERS\")\r\n                        $scope.api.applyViewOnGrid();\r\n                };\r\n\r\n                $scope.isMarkAsDefault = { 'check': false };\r\n                $scope.SystemAsDefault = { 'check': false };\r\n                $scope.showSavedViewPopup = false;\r\n                $scope.showSaveView = false;\r\n                $scope.focusSearch = false;\r\n                $scope.isActive = false;\r\n                $scope.showMe = false;\r\n\r\n                $scope.showSearch = function() {\r\n                    $scope.isActive = true;\r\n                    $scope.focusSearch = true;\r\n                    $scope.showMe = true;\r\n                    $scope.hideClose = true;\r\n                }\r\n\r\n                $scope.hideSearch = function() {\r\n                    $scope.isActive = false;\r\n                    $scope.focusSearch = false;\r\n                    $scope.hideClose = false;\r\n                }\r\n\r\n                var msg = {\r\n                    type: \"inform\",\r\n                    buttons: [{\r\n                        \"title\": $translate.instant('notificationButtonOk'),\r\n                        \"result\": \"true\"\r\n                    }]\r\n                }\r\n\r\n                $scope.deleteItem = function(index, currentItem, currOperation) {\r\n                    if (currentItem.IsSystemDefault && $scope.setTitle != \"SAVED FILTERS\") {\r\n                        msg.message = $translate.instant('deleteSystemDefaultMsg');\r\n                        notification.notify(msg, function(result) {});\r\n                    } else if (currentItem.isDefault == true && $scope.setTitle != \"SAVED FILTERS\") {\r\n                        msg.message = \"You can not delete a saved view when it is marked as default.\";\r\n                        notification.notify(msg, function(result) {});\r\n                    } else {\r\n                        var config = {\r\n                            type: \"warning\",\r\n                            message: $translate.instant('deleteMessage'),\r\n                            buttons: [{\r\n                                \"title\": $translate.instant('notificationButtonYes'),\r\n                                \"result\": \"true\"\r\n                            }, {\r\n                                \"title\": $translate.instant('notificationButtonNo'),\r\n                                \"result\": \"false\"\r\n                            }]\r\n                        };\r\n                        var alterView = cacheHelperService.getDefaultSavedView($scope.config, false) || cacheHelperService.getDefaultSavedView($scope.config, true);\r\n                        notification.notify(config, function(result) {\r\n                            if (result.result == \"true\") {\r\n                                var deletedView;\r\n                                for (var i = 0; i < $scope.config.length; i++) {\r\n                                    if ($scope.config[i].index === currentItem.index) {\r\n                                        deletedView = $scope.config.splice(i, 1);\r\n                                    }\r\n                                }\r\n\r\n                                handleDoneButtonVisibility();\r\n                                handleMarkAsDefault();\r\n                                $scope.callbackFunc({\r\n                                    e: {\r\n                                        'index': currentItem.index,\r\n                                        'currentItem': currentItem,\r\n                                        'currOperation': currOperation\r\n                                    }\r\n                                });\r\n                                var req = {\r\n                                    method: 'DELETE',\r\n                                    url: $scope.api.deleteSavedViewURL,\r\n                                    data: { \"data\": { \"savedViewId\": deletedView[0].ViewId } },\r\n                                    headers: {\r\n                                        \"Content-Type\": \"application/json\"\r\n                                    }\r\n                                };\r\n                                $http(req).then(function(response) {\r\n                                    if (response.data != null) {\r\n                                        if(alterView){\r\n                                            $scope.api.currentViewApplied = alterView;\r\n                                            $scope.selectedFilter.name = alterView.name;\r\n                                            $scope.api.applyViewOnGrid();\r\n                                            console.log(\"Saved View Deleted\");\r\n                                        }\r\n                                    }\r\n                                }).catch(function(errorCallback) {\r\n                                    console.log(errorCallback.statusText);\r\n                                });\r\n                            }\r\n\r\n                        });\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.showEditor = false;\r\n\r\n                $scope.editCurrentViewName = function (index, currentItem) {\r\n                    var _this = $scope;\r\n                    angular.forEach(_this.config, function (key, value) {\r\n                        if (_this.config[value].showCurrentItemEditor == true) {\r\n                            _this.config[value].showCurrentItemEditor = false;\r\n                        }\r\n                    });\r\n                    if (!currentItem.IsSystemDefault) {\r\n                        //$scope.config[index].showCurrentItemEditor = true;\r\n                        //$scope.getEditedviewName.name = $scope.config[index].name;\r\n\r\n                        for (var i = 0; i < _this.config.length; i++) {\r\n                            if (_this.config[i].index === currentItem.index) {\r\n                                _this.config[i].showCurrentItemEditor = true;\r\n                            }\r\n                        }\r\n                        _this.getEditedviewName.name = currentItem.name;\r\n                    } else {\r\n                        msg.message = $translate.instant('renameSystemDefaultMsg');\r\n                        notification.notify(msg, function(result) {});\r\n                    }\r\n                    $timeout(function() {\r\n                        _this.getEditedviewName.isFocus = true;\r\n                    }, 900);\r\n                }\r\n\r\n                $scope.getEditedviewName = { \"name\": \"\", isFocus: false };\r\n\r\n                $scope.updateViewName = function (index, currentItem, currOperation) {\r\n                    $scope.closeEditPanel(index, currentItem);\r\n                    $scope.callbackFunc({\r\n                        e: {\r\n                            'index': currentItem.index,\r\n                            'currentItem': currentItem,\r\n                            'currOperation': currOperation,\r\n                            'editedName': $scope.getEditedviewName.name\r\n                        }\r\n                    });\r\n                    if ($scope.getEditedviewName.name.length == 0) {\r\n                        keepPopupOpen();\r\n                        return false;\r\n                    }\r\n                    var duplicateItem = $scope.config.filter(function(view) {\r\n                        return (view.name === $scope.getEditedviewName.name && view.ViewId !== $scope.config[index].ViewId)\r\n                    });\r\n                    if (duplicateItem.length != 0) {\r\n                        showAlertMessage($scope.api.duplicateErrorMessage);\r\n                    } else if (greaterThanMaxCharacterLength($scope.getEditedviewName.name)) {\r\n                        showAlertMessage($scope.api.maxCharacterLength);\r\n                    } else {\r\n                        $scope.config[currentItem.index].name = $scope.getEditedviewName.name;\r\n                        $scope.config[currentItem.index].showCurrentItemEditor = false;\r\n                        var obj = {\r\n                            'ViewName': $scope.config[currentItem.index].name || $scope.config[currentItem.index].ViewName,\r\n                            'IsDefaultView': $scope.config[currentItem.index].isDefault,\r\n                            'IsSystemDefault': $scope.config[currentItem.index].IsSystemDefault,\r\n                            'SortColumn': $scope.config[currentItem.index].SortColumn,\r\n                            'SortOrder': $scope.config[currentItem.index].SortOrder,\r\n                            'ViewId': $scope.config[currentItem.index].ViewId,\r\n                            'GroupColumn': $scope.config[currentItem.index].GroupColumn,\r\n                            'Filters': $scope.config[currentItem.index].Filters,\r\n                            'DocumentTypeCode': $scope.config[currentItem.index].DocumentTypeCode,\r\n                            'ContactCode': $scope.config[currentItem.index].ContactCode,\r\n                            'ColumnList': $scope.config[currentItem.index].ColumnList\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.UpdateSavedViewURL,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n                        $http(req).then(function(response) {\r\n                            if (response.data != null) {\r\n                                console.log($scope.api.updateMessage);\r\n                            }\r\n                        }).catch(function(errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.closeEditPanel = function (index, currentItem) {\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].index === currentItem.index) {\r\n                            $scope.config[i].showCurrentItemEditor = false;\r\n                        }\r\n                    }\r\n                    currentItem.validate = false;\r\n                };\r\n\r\n                $scope.viewObject = {};\r\n                $scope.viewObject.SaveViewName = \"\";\r\n\r\n                $scope.saveCurrentView = function(passData) {\r\n                    if (passData != '') {\r\n                        if (isNameDuplicate(passData)) {\r\n                            showAlertMessage($scope.api.duplicateErrorMessage);\r\n                        } else if (greaterThanMaxCharacterLength(passData)) {\r\n                            showAlertMessage($scope.api.maxCharacterLength);\r\n                        } else {\r\n                            $scope.isApplyFilters = false;\r\n\r\n                            $scope.model = { 'name': passData, 'isDefault': false, 'showCurrentItemEditor': false };\r\n\r\n                            var req = {\r\n                                method: 'POST',\r\n                                url: $scope.api.insertSavedViewURL,\r\n                                data: {\r\n                                    \"ViewId\": 0,\r\n                                    \"ViewName\": passData,\r\n                                    \"ContactCode\": $scope.api.contactCode,\r\n                                    \"ColumnList\": cacheHelperService.getColDef() || \"\",\r\n                                    \"Filters\": cacheHelperService.getFilterDef() || \"\",\r\n                                    \"SortColumn\": \"NeedByDate\",\r\n                                    \"SortOrder\": \"Ascending\",\r\n                                    \"GroupColumn\": cacheHelperService.getGroupDef() || \"\",\r\n                                    \"IsDefaultView\": false,\r\n                                    \"IsSystemDefault\": false,\r\n                                    \"DocumentTypeCode\": $scope.api.documentTypeCode\r\n                                },\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                }\r\n                            };\r\n                            $http(req).then(function(response) {\r\n                                if (response.data != null) {\r\n                                    $scope.isSavedView = true;\r\n                                    $scope.config.push({\r\n                                        \"ViewId\": response.data,\r\n                                        \"ViewName\": passData,\r\n                                        \"ContactCode\": $scope.api.contactCode,\r\n                                        \"ColumnList\": cacheHelperService.getColDef() || \"\",\r\n                                        \"Filters\": cacheHelperService.getFilterDef() || \"\",\r\n                                        \"SortColumn\": \"NeedByDate\",\r\n                                        \"SortOrder\": \"Ascending\",\r\n                                        \"GroupColumn\": cacheHelperService.getGroupDef() || \"\",\r\n                                        \"IsDefaultView\": false,\r\n                                        \"IsSystemDefault\": false,\r\n                                        \"DocumentTypeCode\": $scope.api.documentTypeCode,\r\n                                        \"showCurrentItemEditor\": false,\r\n                                        \"name\": passData,\r\n                                        \"isDefault\": false\r\n                                    });\r\n                                    $scope.api.currentViewApplied = _.find($scope.config, { name: $scope.selectedFilter.name });\r\n                                    console.log(\"Saved View Created\");\r\n                                }\r\n                            }).catch(function(errorCallback) {\r\n                                console.log(errorCallback.statusText);\r\n                            });\r\n                            $scope.isSavedFilter = true;\r\n                            $scope.viewObject.SaveViewName = '';\r\n\r\n\r\n                        }\r\n                    } else {\r\n                        keepPopupOpen();\r\n                    }\r\n                }\r\n\r\n                function keepPopupOpen(e) {\r\n                    if (!e) {\r\n                        var e = window.event;\r\n                    }\r\n                    e.cancelBubble = true;\r\n                    if (e.stopPropagation) {\r\n                        e.stopPropagation();\r\n                    }\r\n                }\r\n\r\n                function isNameDuplicate(editedSavedName) {\r\n                    var duplicateName = \"\";\r\n                    duplicateName = _.find($scope.config, { name: editedSavedName });\r\n                    if (typeof duplicateName === 'undefined') {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                function greaterThanMaxCharacterLength(editedSavedName) {\r\n                    if (editedSavedName.length > $scope.api.viewNameLength) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                function showAlertMessage(alertMessage) {\r\n                    notification.notify(alertMessage, function(result) { });\r\n                }\r\n                $scope.$watch('show', function(n, o) {\r\n                    angular.forEach($scope.config, function(key, value) {\r\n                        if ($scope.config[value].showCurrentItemEditor == true) {\r\n                            $scope.config[value].showCurrentItemEditor = false;\r\n                        }\r\n                    }); //clearing if anything in edit state\r\n                    if ($scope.openPopupSavedView == true && n == true) {\r\n                        $scope.showPopUp = true;\r\n                        $scope.showSavedViewPopup = true;\r\n                        $scope.showSaveView = false;\r\n                        $scope.hideSearch();\r\n                    } else if ($scope.openPopupSavedView != true && n == true) {\r\n                        $scope.showSavedViewPopup = false;\r\n                        $scope.showSaveView = true;\r\n                    } else {\r\n                        $scope.showSavedViewPopup = false;\r\n                        $scope.showSaveView = false;\r\n                        $scope.show = false;\r\n                        $scope.showPopUp = false;\r\n                    }\r\n                    $timeout(function () {\r\n                        angular.element('.searchWithHiddenTextField input').blur();\r\n                        angular.element('.savedFiltersPopUpLists').find(angular.element('input[checked=\"checked\"]')).prop('checked', true);\r\n                    }, 1000);\r\n                    $scope.radioChangeCallback();\r\n                });\r\n\r\n\r\n                $scope.loaderFlag = {\r\n                    plain: true,\r\n                    message: $translate.instant('loadingMsg'),\r\n                    center: true\r\n                };\r\n\r\n                $scope.$watch('setTitle', function (value) {\r\n                    if (value == 'SAVED FILTERS') {\r\n                        $scope.title = $translate.instant('savedFilters');\r\n                    }\r\n                    if (value == 'SAVED VIEWS') {\r\n                        $scope.title = $translate.instant('savedViews');\r\n                    }\r\n                    \r\n                });\r\n\r\n                function SaveResetOrMarkAsDefault(currentViewApplied) {\r\n                    if ($scope.setTitle == \"SAVED FILTERS\") {\r\n                        console.log(currentViewApplied);\r\n\r\n                        var obj =\r\n                        {\r\n                            \"rowKey\": currentViewApplied.rowKey,\r\n                            \"moduleName\": currentViewApplied.module,\r\n                            \"removeDefaultFilter\": currentViewApplied.isDefault ? false : true\r\n\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.MarkasDefault,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n\r\n                        $http(req).then(function (response) {\r\n                            if (response.data != null) {\r\n\r\n                                /*if (currentViewApplied.isDefault) {\r\n                                    for (var i = 0; i < $scope.config.length; i++) {\r\n                                        if ($scope.config[i].rowKey != currentViewApplied.rowKey && $scope.config[i].isDefault) {\r\n                                            $scope.config[i].isDefault = false; \r\n                                        }\r\n                                    }\r\n                                }*/\r\n\r\n                                var view = _.find($scope.config, { \"name\": $scope.selectedFilter.name || $scope.api.currentViewApplied.name });\r\n                                if (view) {\r\n                                    if (view.isDefault) {\r\n                                        $scope.isMarkAsDefault.check = true;\r\n                                    } else {\r\n                                        $scope.isMarkAsDefault.check = false;\r\n                                    }\r\n                                }\r\n\r\n                                for (var i = 0; i < $scope.config.length; i++) {\r\n                                    $scope.config[i].isDefault = false;\r\n                                }\r\n\r\n                                view.isDefault = true;\r\n                            }\r\n                        }).catch(function (errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n\r\n                    } else {\r\n                        var obj = {\r\n                            \"ViewId\": currentViewApplied.ViewId,\r\n                            \"ViewName\": currentViewApplied.name,\r\n                            \"ContactCode\": currentViewApplied.ContactCode,\r\n                            \"ColumnList\": currentViewApplied.ColumnList,\r\n                            \"Filters\": currentViewApplied.Filters,\r\n                            \"SortColumn\": \"NeedByDate\",\r\n                            \"SortOrder\": \"Ascending\",\r\n                            \"GroupColumn\": currentViewApplied.GroupColumn,\r\n                            \"IsDefaultView\": currentViewApplied.isDefault,\r\n                            \"IsSystemDefault\": currentViewApplied.IsSystemDefault,\r\n                            \"DocumentTypeCode\": currentViewApplied.DocumentTypeCode\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.UpdateSavedViewURL,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n                        $http(req).then(function(response) {\r\n                            if (response.data != null) {\r\n                                console.log($scope.api.updateMessage);\r\n                                if (currentViewApplied.isDefault) {\r\n                                    for (var i = 0; i < $scope.config.length; i++) {\r\n                                        if ($scope.config[i].ViewId != currentViewApplied.ViewId && $scope.config[i].isDefault) {\r\n                                            $scope.config[i].isDefault = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }).catch(function(errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n                    }\r\n                }\r\n                $scope.search_data = $scope.config;\r\n                var b = [];\r\n                $scope.search_savedpopup = function(e) {\r\n                    $scope.config = [];\r\n\r\n                    if (e.data[0].value != null && e.data[0].value != \"\") {\r\n\r\n                        b = [];\r\n                        for (var i = 0; i < $scope.search_data.length; i++) {\r\n                            var lowerStr = ($scope.search_data[i].name + \"\").toLowerCase();\r\n                            var s = lowerStr.indexOf(e.data[0].value.toLowerCase()) === 0;\r\n                            if (s) {\r\n                                if (b.indexOf($scope.search_data[i].name) == -1) {\r\n                                    b.push({ 'name': $scope.search_data[i].name, 'isDefault': $scope.search_data[i].isDefault, 'showCurrentItemEditor': $scope.search_data[i].showCurrentItemEditor });\r\n                                }\r\n                            }\r\n                        }\r\n                        $scope.config = b;\r\n                    } else {\r\n                        b = [];\r\n                        $scope.config = $scope.search_data;\r\n                    }\r\n                }\r\n\r\n                $scope.onHide = function() {\r\n                    $scope.viewObject.SaveViewName = '';\r\n                    $scope.hide();\r\n                };\r\n\r\n            }],\r\n            templateUrl: 'shared/directives/smartSavedViewPopup/smartSavedViewPopupTemplate.html'\r\n        };\r\n    }\r\n})();","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartSearch', ['httpService', '$timeout', 'APPCONSTANTS', '$translate', function (httpService, $timeout, APPCONSTANTS, $translate) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            transclude: true,\n            scope: {\r\n                type: '@'\r\n            },\n            link: function (scope, element, attrs) {\r\n                var scopeValues = { \"RFX\": { \"value\": \"0\", \"string\": \"RFX\", \"SubAppCodes\": 103 }, \"RFP\": { \"value\": \"1\", \"string\": \"RFP\", \"SubAppCodes\": 103 }, \"RFQ\": { \"value\": \"2\", \"string\": \"RFQ\", \"SubAppCodes\": 103 }, \"RFI\": { \"value\": \"3\", \"string\": \"RFI\", \"SubAppCodes\": 103 }, \"Auction\": { \"value\": \"4\", \"string\": \"Auction\", \"SubAppCodes\": 103 }, \"Contract\": { \"value\": \"5\", \"string\": \"Contract\", \"SubAppCodes\": 104 }, \"Catalog\": { \"value\": \"6\", \"string\": \"Catalog\", \"SubAppCodes\": 108 }, \"Requisition\": { \"value\": \"7\", \"string\": \"Requisition\", \"SubAppCodes\": 107 }, \"PO\": { \"value\": \"8\", \"string\": \"PO\", \"SubAppCodes\": 107 }, \"Order\": { \"value\": \"8\", \"string\": \"Order\", \"SubAppCodes\": 107 }, \"Invoice\": { \"value\": \"9\", \"string\": \"Invoice\", \"SubAppCodes\": 107 }, \"Receipts\": { \"value\": \"10\", \"string\": \"Receipt\", \"SubAppCodes\": 107 }, \"Forms\": { \"value\": \"11\", \"string\": \"Forms\", \"SubAppCodes\": 105 }, \"Scorecards\": { \"value\": \"12\", \"string\": \"Scorecards\", \"SubAppCodes\": 105 }, \"Workbench\": { \"value\": \"13\", \"string\": \"Workbench\", \"SubAppCodes\": 110 }, \"InvoiceReconciliation\": { \"value\": \"14\", \"string\": \"InvoiceReconciliation\", \"SubAppCodes\": 107 }, \"Items\": { \"value\": \"20\", \"string\": \"Items\" }, \"Templates\": { \"value\": \"15\", \"string\": \"Templates\", \"SubAppCodes\": 111 }, \"Partners\": { \"value\": \"19\", \"string\": \"Partners\", \"SubAppCodes\": 105 }, \"ContractRequest\": { \"value\": \"16\", \"string\": \"ContractRequest\" }, \"RFxRequest\": { \"value\": \"17\", \"string\": \"RFxRequest\" }, \"AuctionRequest\": { \"value\": \"18\", \"string\": \"AuctionRequest\" }, \"PaymentRequest\": { \"value\": \"27\", \"string\": \"PaymentRequest\" }, \"Project\": { \"value\": \"21\", \"string\": \"Project\", \"SubAppCodes\": 113 }, \"CreditMemo\": { \"value\": \"22\", \"string\": \"CreditMemo\", \"SubAppCodes\": 107 }, \"ReturnNote\": { \"value\": \"20\", \"string\": \"ReturnNote\", \"SubAppCodes\": 107 }, \"ActionPlan\": { \"value\": \"23\", \"string\": \"ActionPlan\", \"SubAppCodes\": 105 }, \"Blanket\": { \"value\": \"30\", \"string\": \"Blanket\", \"SubAppCodes\": 104 }, \"CategoryWorkbench\": { \"value\": \"28\", \"string\": \"CategoryWorkbench\", \"SubAppCodes\": 116 }, \"ProjectDashboard\": { \"value\": \"101\", \"string\": \"ProjectDashboard\", \"SubAppCodes\": 113 } };\r\n\r\n                /*\r\n                 *  Get current module scope\r\n                 */\r\n                var getCurrentModuleScope = function () {\r\n                    var selectedModules = scope.selectedModule.FilterKey.split(',');\r\n                    var moduleScopeString = \"\";\r\n\r\n                    for (var i = 0; i < selectedModules.length; i++) {\r\n                        switch (selectedModules[i]) {\r\n                            case (scopeValues.RFI.value):\r\n                                moduleScopeString += scopeValues.RFI.string + \",\";\r\n                                break;\r\n                            case (scopeValues.RFP.value):\r\n                                moduleScopeString += scopeValues.RFP.string + \",\";\r\n                                break;\r\n                            case (scopeValues.RFQ.value):\r\n                                moduleScopeString += scopeValues.RFQ.string + \",\";\r\n                                break;\r\n                            case (scopeValues.Auction.value):\r\n                                moduleScopeString += scopeValues.Auction.string + \",\";\r\n                                break;\r\n                            case scopeValues.Workbench.value:\r\n                                moduleScopeString += scopeValues.Workbench.string + \",\";\r\n                                break;\r\n                            case scopeValues.Contract.value:\r\n                                moduleScopeString += scopeValues.Contract.string + \",\";\r\n                                break;\r\n                            case scopeValues.Scorecards.value:\r\n                                moduleScopeString += scopeValues.Scorecards.string + \",\";\r\n                                break;\r\n                            case scopeValues.Forms.value:\r\n                                moduleScopeString += scopeValues.Forms.string + \",\";\r\n                                break;\r\n                            case scopeValues.Requisition.value:\r\n                                moduleScopeString += scopeValues.Requisition.string + \",\";\r\n                                break;\r\n                            case scopeValues.Order.value:\r\n                                moduleScopeString += scopeValues.Order.string + \",\";\r\n                                break;\r\n                            case scopeValues.Invoice.value:\r\n                                moduleScopeString += scopeValues.Invoice.string + \",\";\r\n                                break;\r\n                            case scopeValues.InvoiceReconciliation.value:\r\n                                moduleScopeString += scopeValues.InvoiceReconciliation.string + \",\";\r\n                                break;\r\n                            case scopeValues.Receipts.value:\r\n                                moduleScopeString += scopeValues.Receipts.string + \",\";\r\n                                break;\r\n                            case scopeValues.AuctionRequest.value:\r\n                                moduleScopeString += scopeValues.AuctionRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.RFxRequest.value:\r\n                                moduleScopeString += scopeValues.RFxRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.ContractRequest.value:\r\n                                moduleScopeString += scopeValues.ContractRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.PaymentRequest.value:\r\n                                moduleScopeString += scopeValues.PaymentRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.Partners.value:\r\n                                moduleScopeString += scopeValues.Partners.string + \",\";\r\n                                break;\r\n                            case scopeValues.Templates.value:\r\n                                moduleScopeString += scopeValues.Templates.string + \",\";\r\n                                break;\r\n                            case scopeValues.Catalog.value:\r\n                                moduleScopeString += scopeValues.Catalog.string + \",\";\r\n                                break;\r\n                                //PPST\r\n                            case scopeValues.Project.value:\r\n                                moduleScopeString += scopeValues.Project.string + \",\";\r\n                                break;\r\n                            case scopeValues.CreditMemo.value:\r\n                                moduleScopeString += scopeValues.CreditMemo.string + \",\";\r\n                                break;\r\n                            case scopeValues.ReturnNote.value:\r\n                                moduleScopeString += scopeValues.ReturnNote.string + \",\";\r\n                                break;\r\n                            case scopeValues.ActionPlan.value:\r\n                                moduleScopeString += scopeValues.ActionPlan.string + \",\";\r\n                                break;\r\n                            case scopeValues.Blanket.value:\r\n                                moduleScopeString += scopeValues.Blanket.string + \",\";\r\n                                break;\r\n                            case scopeValues.CategoryWorkbench.value:\r\n                                moduleScopeString += scopeValues.CategoryWorkbench.string + \",\";\r\n                                break;\r\n                            case scopeValues.ProjectDashboard.value:\r\n                                moduleScopeString += scopeValues.ProjectDashboard.string + \",\";\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    //if ModuleScope is 'RFI,RFQ & RFP' than it should be RFx\r\n                    if ((moduleScopeString.indexOf(scopeValues.RFI.string) !== -1) ||\r\n                        (moduleScopeString.indexOf(scopeValues.RFP.string) !== -1) ||\r\n                        (moduleScopeString.indexOf(scopeValues.RFQ.string) !== -1)) {\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFI.string + \",\", '');\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFP.string + \",\", '');\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFQ.string + \",\", '');\r\n                        moduleScopeString += scopeValues.RFX.string;\r\n                    }\r\n\r\n                    // Remove last comma from modulescopestring\r\n                    var lastChar = moduleScopeString.slice(-1);\r\n                    if (lastChar == ',') {\r\n                        moduleScopeString = moduleScopeString.slice(0, -1);\r\n                    }\r\n\r\n                    return moduleScopeString;\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Get search navigation url\r\n                 */\r\n                scope.getSearchNavigateURL = function (moduleScope, fieldKey) {\r\n                    var redirectURL = generateUrl(moduleScope);\r\n                    if (fieldKey) {\r\n                        redirectURL += \"&fieldkey=\" + fieldKey;\r\n                    }\r\n                    return redirectURL;\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Get scope from module type\r\n                 */\r\n                var getScopeFromModuleType = function (moduleType) {\r\n                    var scope = '';\r\n                    var array = $.makeArray(\"16,17,18,27\".split(','), moduleType.split(',')[0]);\r\n\r\n                    if (moduleType == \"1,2,3\") {\r\n                        scope = scopeValues.RFX.string.toLowerCase();\r\n                    }\r\n                    else if (array == \"16\" || array == \"17\" || array == \"18\" || array == \"27\") {\r\n                        scope = \"request\";\r\n                    }\r\n                    else {\r\n                        for (var key in scopeValues) {\r\n                            if (scopeValues[key].value == moduleType) {\r\n                                scope = scopeValues[key].string.toLowerCase();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    return scope;\r\n                };\r\n\r\n                var getModuleTypeFromScope = function (moduleScope) {\r\n                    var type = '';\r\n                    for (var key in scopeValues) {\r\n                        if (scopeValues[key].string.toLowerCase() == moduleScope) {\r\n                            type = scopeValues[key].value;\r\n                            break;\r\n                        }\r\n                    }\r\n                    return type;\r\n                };\r\n\r\n                var IsAdvanceSearchEnabled = function (moduleScope) {\r\n                    var productsArray = getAdvanceSearchEnabledProducts();\r\n                    var type = getModuleTypeFromScope(moduleScope);\r\n                    if (productsArray.length > 0) {\r\n                        if (productsArray.indexOf(type) != -1)\r\n                            return true;\r\n                        else\r\n                            return false;\r\n                    }\r\n                };\r\n\r\n                var getAdvanceSearchEnabledProducts = function () {\r\n                    var productsArray = scope.advancedSearchDocTypes != null ? scope.advancedSearchDocTypes.split(\",\") : [];\r\n                    return productsArray;\r\n                };\r\n\r\n                /*\r\n                 *  Create redirection url\r\n                 */\r\n                var generateUrl = function (moduleScope) {\r\n                    var searchText = scope.searchText.trim();\r\n                    var url = '';\r\n                    if (IsAdvanceSearchEnabled(moduleScope)) {\r\n                        url = searchConstants.portalURL + 'Portal/Dashboard/Documents?scope=' + moduleScope + '&q=' + searchText + '&oloc=' + searchConstants.documentTypeCodes;\r\n                    }\r\n                    else {\r\n                        url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&oloc=' + searchConstants.documentTypeCodes;\r\n                    }\r\n\r\n                    switch (moduleScope.toLowerCase()) {\r\n                        case scopeValues.Catalog.string.toLowerCase():\r\n                            url = searchConstants.portalURL + '/Catalog/Manage/Navigation?bpc=' + searchConstants.encryptedBPC + '&navTo=1&q=' + searchText + '&scope=' + moduleScope + '&' + searchConstants.catalogQueryString + '&oloc=' + scopeValues.Catalog.SubAppCodes;\r\n                            break;\r\n                        case scopeValues.Order.string.toLowerCase():\r\n                            url += '&' + searchConstants.orderQueryString;\r\n                            break;\r\n                        case scopeValues.Invoice.string.toLowerCase():\r\n                            url += '&' + searchConstants.invoiceQueryString;\r\n                            break;\r\n                        case scopeValues.Receipts.string.toLowerCase():\r\n                            url += '&' + searchConstants.receiptQueryString;\r\n                            break;\r\n                        case scopeValues.Requisition.string.toLowerCase():\r\n                            url += '&' + searchConstants.requisitionQueryString;\r\n                            break;\r\n                        case scopeValues.InvoiceReconciliation.string.toLowerCase():\r\n                            url += '&' + searchConstants.invoiceReconcillationQueryString;\r\n                            break;\r\n                        case scopeValues.CreditMemo.string.toLowerCase():\r\n                            url += '&' + searchConstants.creditMemoQuerystring;\r\n                            break;\r\n                        case scopeValues.Blanket.string.toLowerCase():\r\n                            url += '&' + searchConstants.blanketQueryString;\r\n                            break;\r\n                        case scopeValues.CategoryWorkbench.string.toLowerCase():\r\n                            url += '&' + searchConstants.categoryWorkbenchQueryString;\r\n                            break;\r\n                        case scopeValues.Partners.string.toLowerCase():\r\n                            url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&' + searchConstants.partnersQueryString + '&oloc=' + searchConstants.documentTypeCodes;\r\n                            break;\r\n                        case scopeValues.Forms.string.toLowerCase():\r\n                            url += '&' + searchConstants.formQueryString;\r\n                            break;\r\n                        case scopeValues.Scorecards.string.toLowerCase():\r\n                            url += '&' + searchConstants.assessmentQueryString;\r\n                            break;\r\n                        case scopeValues.Workbench.string.toLowerCase():\r\n                            url += '&' + searchConstants.workBenchQueryString;\r\n                            break;\r\n                        case scopeValues.RFX.string.toLowerCase():\r\n                        case scopeValues.RFP.string.toLowerCase():\r\n                        case scopeValues.RFQ.string.toLowerCase():\r\n                        case scopeValues.RFI.string.toLowerCase():\r\n                            url += '&' + searchConstants.rfxQueryString;\r\n                            break;\r\n                        case scopeValues.Auction.string.toLowerCase():\r\n                            url += '&' + searchConstants.auctionQueryString;\r\n                            break;\r\n                        case scopeValues.ActionPlan.string.toLowerCase():\r\n                            url += '&' + searchConstants.actionPlanQueryString;\r\n                            break;\r\n                        case scopeValues.Contract.string.toLowerCase():\r\n                            url += '&' + searchConstants.contractQueryString;\r\n                            break;\r\n                        case scopeValues.Templates.string.toLowerCase():\r\n                            url += '&' + searchConstants.catalogQueryString;\r\n                            break;\r\n                        case \"request\":\r\n                            moduleScope = scopeValues.RFxRequest.string.toLowerCase() + \",\" + scopeValues.AuctionRequest.string.toLowerCase() + \",\" + scopeValues.ContractRequest.string.toLowerCase() + \",\" + scopeValues.PaymentRequest.string.toLowerCase();\r\n                            url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&oloc=' + searchConstants.documentTypeCodes;\r\n                            break;\r\n                        case \"returnnote\":\r\n                            url += '&' + searchConstants.returnNoteQuerystring;\r\n                            break;\r\n                        case scopeValues.Project.string.toLowerCase():\r\n                            url = searchConstants.portalURL + 'PPST/Project/ProjectHome?oloc=113&q=' + searchText + '&' + searchConstants.projectQueryString;\r\n                            break;\r\n                        default:\r\n                            if ((moduleScope.toLowerCase().indexOf(scopeValues.AuctionRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.RFxRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.ContractRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.PaymentRequest.string.toLowerCase()) !== -1)) {\r\n                                url += '&' + searchConstants.auctionQueryString;\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    if (APPCONSTANTS.userPreferences.UserBasicDetails.IsSupplier) {\r\n                        url = url + \"&dd=\" + searchConstants.encryptedBPC;\r\n                    }\r\n\r\n                    return url;\r\n                };\r\n\r\n\r\n                scope.searchText = '';\n\n                var request, searchConstants, lastSearchedText;\n\n                /*\n                 *  Get search constants from .net controller\n                 */\n                if (APPCONSTANTS && APPCONSTANTS.userPreferences && APPCONSTANTS.userPreferences.constantURLAndQueryStringValue)\n                    searchConstants = APPCONSTANTS.userPreferences.constantURLAndQueryStringValue;\n                else {\r\n                    request = {\r\n                        method: 'GET',\r\n                        url: '/' + APPCONSTANTS.userPreferences.AreaName + '/GetConstantURLAndQueryStringValues?oloc=216'\r\n                    };\r\n\r\n                    httpService.directhttp(request).then(function (result) {\r\n                        searchConstants = result;\r\n                    }, function (errorData) {\r\n                        searchConstants = {};\r\n                    });\r\n                }\n\n                request = {\r\n                    method: 'GET',\r\n                    url: '/' + APPCONSTANTS.userPreferences.AreaName + '/GetAllowedModulesList?oloc=216&BuyerPartnerCode=' + APPCONSTANTS.userPreferences.UserBasicDetails.BuyerPartnerCode\r\n                };\n\n                function setAllowedModuleListData(result) {\r\n                    var modules = result.Output;\n                    var orderIndex = -1;\n                    for (var i = 0; i < modules.length; i++) {\r\n                        if (modules[i].FilterKey == 8) {\r\n                            orderIndex = i;\r\n                            break;\r\n                        }\r\n                    }\n                    if (orderIndex > -1) {\r\n                        var quickSearchItem = modules.splice(orderIndex, 1);\r\n                        modules.splice(1, 0, quickSearchItem[0]);\r\n                    }\n                    scope.modules = angular.copy(modules);\n                    scope.selectedModule = scope.modules[0];\r\n                    scope.advancedSearchDocTypes = result.AdvancedSearchDocTypes;\r\n                };\n\n                if (APPCONSTANTS.userPreferences.allowedModulesList){\n                    setAllowedModuleListData(APPCONSTANTS.userPreferences.allowedModulesList);\n                }else{\n                    httpService.directhttp(request).then(function (result) {\r\n                        setAllowedModuleListData(result);\r\n                    }, function (errorData) { });\r\n                }\n                \n                /*\n                 *  On module item click handler\n                 */\n                scope.onModuleClick = function (module) {\r\n                    scope.selectedModule = module;\r\n                    scope.showFilterList = false;\r\n                    scope.recentSearches = null;\r\n                    scope.searchResult = null;\r\n                };\n\n\n                /*\n                 *  Get recent searches\n                 */\n                var getRecentSearches = function () {\r\n                    if (scope.recentSearches) {\r\n                        scope.recentSearches = scope.recentSearches.splice(0, 5);\r\n                        scope.showRecentSearches = true;\r\n                        return;\r\n                    }\r\n\r\n                    scope.recentSearches = null;\r\n\r\n                    scope.isRecentSearchesLoading = true;\r\n\r\n                    request = {\r\n                        method: 'GET',\r\n                        url: '/Controls/HeaderBar/GetRecentSearches?oloc=101&moduleType=' + (scope.selectedModule.IsAllMenu ? 0 : scope.selectedModule.FilterKey.split(',')[0]) + '&fieldKey=' + (scope.selectedModule.FieldKey != undefined ? scope.selectedModule.FieldKey : 0)\r\n                    };\r\n\r\n                    httpService.directhttp(request).then(function (result) {\r\n                        scope.showRecentSearches = true;\r\n                        scope.isRecentSearchesLoading = false;\r\n                        try {\r\n                            scope.recentSearches = JSON.parse(result.RecentSearches).splice(0, 5);\r\n                        }\r\n                        catch (e) {\r\n                            scope.recentSearches = [];\r\n                        }\r\n                    }, function (errorData) {\r\n                        scope.isRecentSearchesLoading = false;\r\n                    });\r\n                };\n\n\n                /*\n                 *  Get search results\n                 */\n                scope.onSearchTextChange = function (event) {\r\n                    if (event.keyCode === 13 && scope.searchText.trim().length > 2) {\r\n                        if (!scope.selectedModule.IsAllMenu) {\r\n                            window.location.href = scope.getSearchNavigateURL(getScopeFromModuleType(scope.selectedModule.FilterKey), scope.selectedModule.FieldKey);\r\n                            return;\r\n                        }\r\n\r\n                        scope.showRecentSearches = false;\r\n                        scope.showFilterList = false;\r\n                        scope.showSearchResult = true;\r\n                        scope.isSearchResultLoading = true;\r\n\r\n                        //  If user has recently searched for the text entered, do not hit the service\r\n                        if (lastSearchedText === scope.searchText.trim() && scope.searchResult) {\r\n                            scope.isSearchResultLoading = false;\r\n                            return;\r\n                        }\r\n\r\n                        if (!scope.recentSearches) {\r\n                            getSearchResults();\r\n                            return;\r\n                        }\r\n\r\n                        var recentSearches = [{ \"Sequence\": 0, \"SearchText\": scope.searchText.trim() }];\r\n\r\n                        //  Remove duplicate entries from recent searches and generate recent search sequence\r\n                        for (var i = 0; i < scope.recentSearches.length; i++) {\r\n                            if (scope.recentSearches[i].SearchText != scope.searchText.trim()) {\r\n                                recentSearches.push({\r\n                                    \"Sequence\": recentSearches.length,\r\n                                    \"SearchText\": scope.recentSearches[i].SearchText\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        scope.recentSearches = angular.copy(recentSearches);\r\n\r\n                        request = {\r\n                            method: 'POST',\r\n                            url: '/Controls/HeaderBar/SaveRecentSearches?oloc=101',\r\n                            data: {\r\n                                \"recentSearches\": JSON.stringify(recentSearches),\r\n                                \"moduleType\": scope.selectedModule.IsAllMenu ? 0 : scope.selectedModule.FilterKey.split(\",\")[0],\r\n                                \"fieldKey\": scope.selectedModule.FieldKey != undefined ? scope.selectedModule.FieldKey : 0\r\n                            }\r\n                        };\r\n\r\n                        httpService.directhttp(request).then(function (result) {\r\n                            getSearchResults();\r\n                        }, function (errorData) {\r\n                            getSearchResults();\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (scope.searchText.trim().length == 0) {\r\n                            scope.showSearchResult = false;\r\n                            getRecentSearches();\r\n                        }\r\n                    }\r\n                };\n\n\n                var getSearchResults = function () {\r\n                    lastSearchedText = angular.copy(scope.searchText.trim());\r\n\r\n                    scope.searchResult = null;\r\n\r\n                    request = {\r\n                        method: 'POST',\n                        url: '/Controls/BaseSearch/GetSearchResultForWeb?oloc=101',\r\n                        data: {\r\n                            \"searchKeyword\": scope.searchText.trim(),\r\n                            \"Filters\": [\"searchScope:All\", \"pageNumber:1\", \"isGlobalSearch:true\", \"module:all\", \"moduleScope:\" + getCurrentModuleScope(), \"noOfRecords:0\"]\r\n                        }\r\n                    };\n\n                    if (scope.selectedModule.FieldKey) {\r\n                        request.data.Filters.push(\"fieldkey:\" + scope.selectedModule.FieldKey);\r\n                    }\n\n                    httpService.directhttp(request).then(function (result) {\r\n                        scope.isSearchResultLoading = false;\r\n                        if (result.DataSearchResult.GroupTotal.TotalCount > 0) {\r\n                            scope.searchResult = result.DataSearchResult.GroupTotal;\r\n                        }\r\n                        else {\r\n                            scope.searchResult = [];\r\n                        }\r\n                    }, function (errorData) {\r\n                        scope.isSearchResultLoading = false;\r\n                    });\r\n                };\n\n\n                /*\n                 *  On search-text focus\n                 */\n                scope.onSearchTextFocus = function (e) {\r\n                    if (scope.searchText.trim().length == 0) {\r\n                        scope.showSearchResult = false;\r\n                        getRecentSearches();\r\n                    }\r\n                };\n\n\n                /*\n                 *  On recent search item click handler\n                 */\n                scope.onRecentSearchItemClick = function (text) {\r\n                    scope.searchText = text;\r\n                    scope.onSearchTextChange({ keyCode: 13 });\r\n                };\n\n\n                /*\n                 *  Get translated label\n                 */\n                scope.getTranslatedLabel = function (label) {\r\n                    return $translate.instant(label);\r\n                };\n\n\n                /*\n                 *  On document click handler\n                 */\n                var onDocumentClick = function () {\r\n                    $timeout(function () {\r\n                        scope.showRecentSearches = false;\n                        scope.showFilterList = false;\r\n                        scope.showSearchResult = false;\r\n                        try {\r\n                            httpService.abort(request);\r\n                        }\r\n                        catch (e) { }\r\n                    });\r\n                };\n\n                $(document).on('click', onDocumentClick);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    $(document).off('click', onDocumentClick);\r\n                })\r\n            },\n            templateUrl: 'shared/directives/smartSearch/smartSearchTemplate.html'\r\n        };\r\n    }]);\r\n})();","/*\r\n    ::attributes {\r\n        getCheckboxInfo : & (callback for getting selected items and total length of set)\r\n                   data : @ (takes pipe \"|\" sepereted values like eg. \"dataset|selector\")\r\n            checkerFlag : @\r\n            disableFlag : @\r\n    }\r\n*/\r\n\r\n(function (angular) {\r\n    \"use strict\";\r\n    angular\r\n        .module(\"SMART2\")\r\n        .directive(\"smartSelectall\", [\"$parse\", \"$timeout\", smartSelectallFun]);\r\n\r\n    function smartSelectallFun($parse, $timeout) {\r\n        return {\r\n            restrict: \"A\",\r\n            require: \"ngModel\",\r\n            link: function (scope, element, attrs, ngModel) {\r\n                var getCheckboxInfo = attrs.getCheckboxInfo ? $parse(attrs.getCheckboxInfo.replace(/\\(\\)/, '(selected, length)')) : false, // callback for to get checkbox selection status info\r\n                    config = function () {\r\n                        var a = attrs.data.split(\"|\"),\r\n                        scopeDeep = a[0] ? a[0].replace(/\\s+/ig, '') : null,\r\n                        checkboxSelector = a[1] ? a[1].replace(/\\s+/ig, '') : null,\r\n                        checkerFlag = attrs.checkerFlag ? attrs.checkerFlag : \"checked\",\r\n                        disableFlag = attrs.disableFlag ? attrs.disableFlag : \"disable\",\r\n                        //checkerStyle = attrs.checkerFlag.indexOf(\"{\") == 0 ? \"eval\" : \"flag\",\r\n                        disableStyle = disableFlag.indexOf(\"{\") == 0 ? \"eval\" : \"flag\",\r\n                        sc = getScope(scope, scopeDeep);\r\n\r\n                        return {\r\n                            checkerFlag: checkerFlag,\r\n                            //checkerStyle: checkerStyle,\r\n                            disableFlag: disableFlag,\r\n                            disableStyle: disableStyle,\r\n                            scopeDeep: scopeDeep,\r\n                            scopeData: sc, // set of list items\r\n                            selector: checkboxSelector,\r\n                            selected: 0,\r\n                            length: sc.length\r\n                        };\r\n                    }(),\r\n                    mainCheckbox = element.find(\"input[type=checkbox]\");\r\n\r\n                if (scope.__selectallExoprt) {\r\n                    !scope.__selectallExoprt && (scope.__selectallExoprt = {});\r\n                    scope.__selectallExoprt.selectall = function (check) {\r\n                        mainCheckbox.prop('checked', check).change();\r\n                    };\r\n                };\r\n\r\n                mainCheckbox.change(function (e) {\r\n                    var el = $(this),\r\n                        _scope = scope,\r\n                        isChecked = el.prop(\"checked\");\r\n\r\n                    config.scopeData.forEach(function (a) {\r\n                        var isDisabled = function () {\r\n                            var r;\r\n                            if (config.disableStyle == \"flag\") {\r\n                                r = a[config.disableFlag];\r\n                            } else if (config.disableStyle == \"eval\") {\r\n                                r = eval(config.disableFlag.replace(/(\\{|\\})/ig, '').replace(/this/ig, 'a'));\r\n                            }\r\n                            return r;\r\n                        }();\r\n                        if (!isDisabled) {\r\n                            a[config.checkerFlag] = isChecked;\r\n                        }\r\n                    });\r\n                    element.removeClass(\"filled-partial\");\r\n                    config.selected = isChecked ? config.scopeData.length : 0;\r\n                    if (getCheckboxInfo)\r\n                        scope.$apply(function () {\r\n                            getCheckboxInfo(scope, getInfo());\r\n                        });\r\n                });\r\n\r\n\r\n                scope.$watchCollection(config.scopeData, function () {\r\n                    refresh();\r\n                });\r\n\r\n                scope.$watch(config.scopeDeep + \".length\", function () {\r\n                    refresh();\r\n                });\r\n\r\n                initCheckbox(); // applying events to checkbox\r\n\r\n\r\n                function initCheckbox() {\r\n                    $timeout(function () {\r\n                        initCheckboxItem();\r\n                    });\r\n                }\r\n                function initCheckboxItem() {\r\n                    var allCheckbox = $(config.selector).find(\"input[type=checkbox]\");\r\n                    if (allCheckbox && allCheckbox.length > 0) {\r\n                        allCheckbox.unbind(\"change\").change(function (e) {\r\n                            var el = $(this),\r\n                                isChecked = el.prop(\"checked\");\r\n\r\n                            config.selected = isChecked ? config.selected += 1 : config.selected -= 1;\r\n                            if (config.selected < config.length) {\r\n                                config.selected == 0 ? element.removeClass(\"filled-partial\") : element.addClass(\"filled-partial\");\r\n                                ngModel.$setViewValue(false);\r\n                                ngModel.$render();\r\n                            } else if (config.selected == config.length) {\r\n                                element.removeClass(\"filled-partial\");\r\n                                ngModel.$setViewValue(true);\r\n                                ngModel.$render();\r\n                            }\r\n                            if (getCheckboxInfo)\r\n                                scope.$apply(function () {\r\n                                    getCheckboxInfo(scope, getInfo());\r\n                                });\r\n                        });\r\n                    }\r\n                }\r\n                function resetConfig() {\r\n                    var selected = 0;\r\n                    config.scopeData = getScope(scope, config.scopeDeep);\r\n                    config.scopeData.forEach(function (a) {\r\n                        if (a[config.checkerFlag]) selected++;\r\n                    });\r\n\r\n                    config.selected = selected;\r\n                    config.length = config.scopeData.length;\r\n\r\n                    if (config.selected < config.length) {\r\n                        config.selected == 0 ? element.removeClass(\"filled-partial\") : element.addClass(\"filled-partial\");\r\n                        ngModel.$setViewValue(false);\r\n                        ngModel.$render();\r\n                    } else if (config.selected == config.length) {\r\n                        element.removeClass(\"filled-partial\");\r\n                        ngModel.$setViewValue(true);\r\n                        ngModel.$render();\r\n                    }\r\n\r\n                    if (getCheckboxInfo)\r\n                        scope.$applyAsync(function () {\r\n                            getCheckboxInfo(scope, getInfo());\r\n                        });\r\n                }\r\n                function getScope(scope, deep) {\r\n                    var a, b = deep.split(\".\");\r\n                    if (b.length > 1) {\r\n                        a = scope;\r\n                        for (var i = 0; i < b.length; i++) {\r\n                            a = a[b[i]];\r\n                        }\r\n                    } else {\r\n                        a = scope[deep];\r\n                    }\r\n                    return a;\r\n                }\r\n                function refresh() {\r\n                    initCheckbox();\r\n                    resetConfig();\r\n                }\r\n                function getInfo() {\r\n                    return {\r\n                        selected: config.selected,\r\n                        length: config.length\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n})(angular);","angular.module('SMART2').directive('smartSort', function () {\r\n    return {\r\n        restrict: 'E',\r\n       \ttransclude: true,\r\n       \ttemplate:'<a href=\\\"javascript:void(0)\\\" class=\"waves-circle waves-effect waves-grey\" ng-click=\\\"ascDescToggler()\\\">\\n<i ng-if=\"currentCell != sortBy\" class=\\\"icon iconSmall grey-text\\\" smart-tooltip position=\\\"bottom\\\" delay=\\\"50\\\" message=\\\"{{ \\'Sort By \\' | translate }}\\\">\\n<svg>\\n<use xlink:href=\\\"{{ \\'#icon_Sort\\' }}\\\"><\\/use>\\n<\\/svg><\\/i><i class=\\\"icon iconSmall grey-text\\\" ng-if=\"currentCell == sortBy\" ng-class=\\\" { \\'s-dd-icon-wth-color\\':  currentCell == sortBy }\\\"  smart-tooltip position=\\\"bottom\\\" delay=\\\"50\\\" message=\\\"{{ iconWithTooltip.tooltip | translate }}\\\">\\n<svg>\\n<use xlink:href=\\\"{{ iconWithTooltip.sortbyIcon }}\\\"><\\/use>\\n<\\/svg><\\/i><\\/a>',\r\n       \tscope:{\r\n       \t\tsortBy:\"=\",\r\n       \t\tsortReverse:\"=\",\r\n\t\t\tcurrentCell:\"@\"\r\n       \t},\r\n       \tlink:function($scope, $element, $attrs){\r\n\r\n       \t\t$scope.iconWithTooltip = {\r\n\t\t\t\tsortbyIcon : \"\",\r\n       \t\t\ttooltip\t:\t\"\"\r\n\r\n       \t\t}\r\n\r\n       \t\t\r\n\t       \t\t$scope.ascDescToggler = function(){\r\n              \r\n       \t\t\t$scope.sortBy = $scope.currentCell;\r\n\t       \t\t\t$scope.sortReverse = !$scope.sortReverse;\r\n\r\n\t       \t\t\tif($scope.sortBy == $scope.currentCell && $scope.sortReverse == false ){\r\n\t\t\t\t\t\t\t$scope.iconWithTooltip.sortbyIcon = \"#icon_SortDescending\";\r\n\t       \t\t\t\t\t$scope.iconWithTooltip.tooltip\t=\t\"Descending\";\r\n\t       \t\t\t}\r\n\t       \t\t\telse if($scope.sortBy == $scope.currentCell && $scope.sortReverse == true ){\r\n\t\t\t\t\t\t\t$scope.iconWithTooltip.sortbyIcon = \"#icon_SortAscending\";\r\n\t       \t\t\t\t\t$scope.iconWithTooltip.tooltip\t=\t\"Ascending\";\r\n\t       \t\t\t}\r\n\t       \t\t\t\r\n       \t\t\t};\r\n       \t\t\r\n       \t}\r\n       \r\n    }\r\n});"," var isRegionalSettingEnabled = typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable;\r\n(function () {\r\n    'use strict';\r\n\r\n    var app = angular.module('SMART2');\r\n\r\n\r\n    window.onmousedown = function (e) {\r\n        if ($(e.target).closest('.smart-table-cell-template').length > 0) {\r\n            window.isSmartTableCellClicked = true;\r\n        }\r\n\r\n        //\tIf autosuggest option is not clicked, allow scope to be cleared\r\n        if (window.lastActiveCellScope && ($(e.target).closest('.daterangepicker').length > 0 || $(e.target).closest('.autocomplete-suggestion').length > 0 ||\r\n        $(e.target).closest('.autocomplete-suggestions').length > 0 || $(e.target).closest('.modal').length > 0 || $(e.target).closest('.lean-overlay').length > 0)) {\r\n            return;\r\n        }\r\n\r\n        //\tClear and update last rendered cell when selection or tree icon is clicked\r\n        if ($(e.target).closest('.smart-table-row-cell').length == 0 || $(e.target).closest('.smart-table-icon-holder').length > 0) {\r\n            if (window.lastActiveCellScope) {\r\n                window.lastActiveCellScope.stopEdit();\r\n                window.lastActiveCellScope = undefined;\r\n            }\r\n            return;\r\n        }\r\n    };\r\n\r\n\r\n    window.focusHandler = function (element) {\r\n        element.focus(function () {\r\n            setTimeout((function (el) {\r\n                var strLength = el.value.length;\r\n                return function () {\r\n                    if (el.setSelectionRange !== undefined) {\r\n                        el.setSelectionRange(strLength, strLength);\r\n                    }\r\n                    else {\r\n                        $(el).val(el.value);\r\n                    }\r\n                }\r\n            }(this)), 0);\r\n        });\r\n    };\r\n\r\n\r\n    //  To handle date picker control issue\r\n    setTimeout(function () {\r\n        window.onkeydown = function (e) {\r\n            if ($(e.target).is('body') && window.lastActiveCellScope &&\r\n                window.lastActiveCellScope.column.attributes && window.lastActiveCellScope.column.attributes.type == 'date') {\r\n                window.lastActiveCellScope.onElementKeyDown(e);\r\n                return false;\r\n            }\r\n        };\r\n    }, 500);\r\n\r\n\r\n    function getObjectValue(obj, keys) {\r\n        try {\r\n            var arr = keys.split('.');\r\n            while (arr.length) {\r\n                obj = obj[arr.shift()];\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return obj;\r\n    };\r\n\r\n    function getObjectValueForAutoSuggest(obj, keys) {\r\n        var arr = keys.split('.');\r\n        if (arr.length > 1) {\r\n            arr.splice(arr.length - 1, 1);\r\n            return getObjectValue(obj, arr.join('.'));\r\n        }\r\n        return obj[arr[0]];\r\n    };\r\n\r\n    function setObjectValue(obj, keys, value) {\r\n        try {\r\n            var arr = keys.split('.');\r\n            if (arr.length == 1) {\r\n                obj[arr[0]] = value;\r\n            }\r\n            else {\r\n                var obj = obj[arr[0]];\r\n                arr.shift();\r\n                var keys = arr.join('.');\r\n                setObjectValue(obj, keys, value);\r\n            }\r\n        }\r\n        catch (e) { }\r\n    };\r\n\r\n    function updateCell(obj, keys, value) {\r\n        if (!angular.isObject(value)) {\r\n            setObjectValue(obj, keys, value);\r\n            return;\r\n        }\r\n        else if (!angular.isObject(obj[keys.split('.')[0]]) && angular.isObject(value)) {\r\n            setObjectValue(obj, keys, value[keys.split('.')[0]]);\r\n            return;\r\n        }\r\n        angular.extend(obj[keys.split('.')[0]], value);\r\n    };\r\n\r\n    function getFormattedData(data, displayFormat) {\r\n        if (!data || data.length == 0) {\r\n            return [];\r\n        }\r\n        for (var i = 0; i < data.length; i++) {\r\n            var str = displayFormat;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) { }\r\n            data[i].value = str.trim();\r\n        }\r\n        return data;\r\n    };\r\n\r\n    function getDisplayData(data, displayFormat) {\r\n        if (data == undefined || data == null || data == '') {\r\n            return '';\r\n        }\r\n        var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n        try {\r\n            var parentSplit = str.split('{');\r\n            for (var j = 0; j < parentSplit.length; j++) {\r\n                var childSplit = parentSplit[j].split('}');\r\n                for (var k = 0; k < childSplit.length; k++) {\r\n                    if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                        evalResult = eval('data.' + childSplit[k]);\r\n                        evaluatedKeysCounter++;\r\n                        if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                            evalResult = '';\r\n                            nullKeysCounter++;\r\n                        }\r\n                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                    }\r\n                }\r\n            }\r\n            if (evaluatedKeysCounter == nullKeysCounter) {\r\n                str = '';\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n    };\r\n\r\n    function convertNumberToFixed(number, minPrecision, maxPrecision) {\r\n        var arrTmpInputValue, tmpStrAfterPrecision;\r\n        arrTmpInputValue = (number + '').split('.');\r\n\r\n        if (arrTmpInputValue.length > 1) {\r\n            tmpStrAfterPrecision = arrTmpInputValue[arrTmpInputValue.length - 1];\r\n            if (maxPrecision > 0 && tmpStrAfterPrecision.length >= maxPrecision) {\r\n                return number.toString().match(new RegExp('^-?\\\\d+(?:\\.\\\\d{0,' + (maxPrecision || -1) + '})?'))[0];\r\n            }\r\n            else if (minPrecision > 0 && tmpStrAfterPrecision.length <= minPrecision) {\r\n                return Number(Math.round(number + 'e' + minPrecision) + 'e-' + minPrecision);             \r\n            }\r\n            else {\r\n                return number;\r\n            }\r\n        }\r\n        else {\r\n            return Number(Math.round(number + 'e' + minPrecision) + 'e-' + minPrecision);\r\n        }\r\n    };\r\n\r\n    function sortSmartTableData(data, column, isAscending, translate) {\r\n        return data.sort(function (a, b) {\r\n            var strOne = getObjectValue(a, column.field);\r\n            var strTwo = getObjectValue(b, column.field);\r\n\r\n            var intOne = parseFloat(strOne);\r\n            var intTwo = parseFloat(strTwo);\r\n\r\n            if (isNaN(intOne) && isNaN(intTwo)) {\r\n                try {\r\n                    if (column.enableTranslation) {\r\n                        strOne = translate.instant(strOne);\r\n                        strTwo = translate.instant(strTwo);\r\n                    }\r\n                    strOne = strOne.toLowerCase();\r\n                    strTwo = strTwo.toLowerCase();\r\n                }\r\n                catch (e) { }\r\n                return strOne > strTwo ? (isAscending ? -1 : 1) : (strOne < strTwo ? (isAscending ? 1 : -1) : 0);\r\n            }\r\n            else if (isNaN(intOne)) {\r\n                return isAscending ? -1 : 1;\r\n            }\r\n            else if (isNaN(intTwo)) {\r\n                return isAscending ? 1 : -1;\r\n            }\r\n            else {\r\n                return intOne > intTwo ? (isAscending ? -1 : 1) : (intOne < intTwo ? (isAscending ? 1 : -1) : 0);\r\n            }\r\n        });\r\n    };\r\n\r\n    app.filter('smartTableFilter', ['$filter', '$translate', 'smartTableUtils', function ($filter, $translate, smartTableUtils) {\r\n        var isParentRowToBeDisplayed = function (data, index, filters) {\r\n            var result = false;\r\n\r\n            for (var i = index + 1; i < data.length; i++) {\r\n                if (data[i].$$treeLevel == 0) {\r\n                    break;\r\n                }\r\n                else {\r\n                    for (var j = 0; j < filters.length; j++) {\r\n                        if (((getObjectValue(data[i], filters[j].filterKey) + \"\").toLowerCase()).indexOf((filters[j].filterText + \"\").toLowerCase()) > -1) {\r\n                            result = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        var getChildrenNodes = function (data, nodeIndex) {\r\n            var tmpRows = $filter('filter')(data, function (row, i) {\r\n                return row.$$treeLevel > 0 && row.$$nodeIndex == nodeIndex;\r\n            });\r\n            tmpRows = $filter('orderBy')(tmpRows, '$$treeLevel', false);\r\n            return tmpRows;\r\n        };\r\n\r\n        return function (data, filters, sortState, enableTreeView, showTreeView, offset, limit, useExternalPagination, smartTableId) {\r\n            var outputData;\r\n            if (filters.length == 0) {\r\n                if (data) {\r\n                    if (enableTreeView) {\r\n                        var nodeIndex = -1;\r\n                        var parentIndex = -1;\r\n\r\n                        outputData = $filter('filter')(data, function (row, index) {\r\n                            if (row.$$treeLevel == 0) {\r\n                                nodeIndex++;\r\n                                parentIndex = index;\r\n                                row.$$enableTreeView = false;\r\n                            }\r\n                            else {\r\n                                try {\r\n                                    data[parentIndex].$$enableTreeView = true;\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n\r\n                            row.$$nodeIndex = nodeIndex;\r\n                            row.$$index = (useExternalPagination ? offset : 0) + index;\r\n                            row.$$parentIndex = parentIndex;\r\n                            row.$$isExpanded = data[parentIndex].$$isExpanded || !showTreeView;\r\n                            row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n\r\n                            return row.$$treeLevel == 0 || row.$$isExpanded;\r\n                        });\r\n                    }\r\n                    else {\r\n                        outputData = $filter('filter')(data, function (row, index) {\r\n                            row.$$index = (useExternalPagination ? offset : 0) + index;\r\n                            row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                            return true;\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    outputData = [];\r\n                }\r\n            }\r\n            else {\r\n                var keysMatchCounter = 0;\r\n                var nodeIndex = -1;\r\n                var parentIndex = -1;\r\n                var cellValue;\r\n\r\n                if (enableTreeView) {\r\n                    outputData = $filter('filter')(data, function (row, index) {\r\n                        if (row.$$treeLevel == 0) {\r\n                            nodeIndex++;\r\n                            parentIndex = index;\r\n                            row.$$enableTreeView = false;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                data[parentIndex].$$enableTreeView = true;\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n\r\n                        row.$$nodeIndex = nodeIndex;\r\n                        row.$$index = index;\r\n                        row.$$parentIndex = parentIndex;\r\n                        row.$$isExpanded = data[parentIndex].$$isExpanded || !showTreeView;\r\n                        row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                        keysMatchCounter = 0;\r\n\r\n                        for (var j = 0; j < filters.length; j++) {\r\n                            cellValue = (filters[j].colDef.enableTranslation && $translate.instant(getObjectValue(row, filters[j].filterKey) + '')) || getObjectValue(row, filters[j].filterKey) + '';\r\n\r\n                            if ((cellValue.toLowerCase()).indexOf((filters[j].filterText + '').toLowerCase()) > -1 ||\r\n                            (angular.isFunction(filters[j].condition) && filters[j].condition(filters[j].filterText, row, filters[j].colDef))) {\r\n                                keysMatchCounter++;\r\n                            }\r\n                        }\r\n\r\n                        return (row.$$treeLevel == 0 && keysMatchCounter == filters.length) ||\r\n                            (row.$$treeLevel != 0 && row.$$isExpanded && keysMatchCounter == filters.length) ||\r\n                            (row.$$treeLevel == 0 && isParentRowToBeDisplayed(data, index, filters));\r\n                    });\r\n                }\r\n                else {\r\n                    outputData = $filter('filter')(data, function (row, index) {\r\n                        row.$$index = index;\r\n                        row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                        keysMatchCounter = 0;\r\n\r\n                        for (var j = 0; j < filters.length; j++) {\r\n                            cellValue = (filters[j].colDef.enableTranslation && $translate.instant(getObjectValue(row, filters[j].filterKey) + '')) || getObjectValue(row, filters[j].filterKey) + '';\r\n\r\n                            if ((cellValue.toLowerCase()).indexOf((filters[j].filterText + '').toLowerCase()) > -1 ||\r\n                            (angular.isFunction(filters[j].condition) && filters[j].condition(filters[j].filterText, row, filters[j].colDef))) {\r\n                                keysMatchCounter++;\r\n                            }\r\n                        }\r\n\r\n                        return keysMatchCounter == filters.length;\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (sortState) {\r\n                if (enableTreeView) {\r\n                    //\treorder tree data\r\n                    var arrParentNodes = $filter('filter')(outputData, function (row) {\r\n                        return row.$$treeLevel == 0;\r\n                    });\r\n                    if (sortState.order > -1) {\r\n                        if (angular.isFunction(sortState.condition)) {\r\n                            arrParentNodes = sortState.condition(arrParentNodes, sortState.column, sortState.order == 0 ? false : true);\r\n                        }\r\n                        else {\r\n                            arrParentNodes = sortSmartTableData(arrParentNodes, sortState.column, sortState.order == 0 ? false : true, $translate);\r\n                        }\r\n                    }\r\n                    var arrOrderedData = [];\r\n                    angular.forEach(arrParentNodes, function (row) {\r\n                        arrOrderedData = arrOrderedData.concat([row]).concat(getChildrenNodes(outputData, row.$$nodeIndex));\r\n                    });\r\n                    outputData = arrOrderedData;\r\n                }\r\n                else {\r\n                    if (sortState.order > -1) {\r\n                        if (angular.isFunction(sortState.condition)) {\r\n                            outputData = sortState.condition(outputData, sortState.column, sortState.order == 0 ? false : true);\r\n                        }\r\n                        else {\r\n                            outputData = sortSmartTableData(outputData, sortState.column, sortState.order == 0 ? false : true, $translate);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!useExternalPagination) {\r\n                //\tUpdate total number of pages\r\n                smartTableUtils.broadcast('dataChange', { totalRecords: outputData.length, smartTableId: smartTableId });\r\n\r\n                outputData = outputData.slice(offset, limit);\r\n\r\n                //\tUpdate currently displayed records count\r\n                smartTableUtils.broadcast('pageIndexChanged', { currentPageDataLength: outputData.length, smartTableId: smartTableId });\r\n            }\r\n\r\n            return outputData;\r\n        }\r\n    }]);\r\n\r\n\r\n    app.directive('smartTable', ['$filter', '$timeout', '$templateCache', 'smartTableUtils', function ($filter, $timeout, $templateCache, smartTableUtils) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                smartTable: '=?'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var areEventListenersAdded = false, arrSelectedRowsIndexes = [], smartTableState;\r\n                var pageIndex = 0;\r\n                var recordsFetchedCount = 0;\r\n                var totalPages;\r\n                var apis;\r\n                var isStatePageIndexSet = false;\r\n\r\n                var sortOrder = 1;  //  1 = descending, 0 = ascending, -1 = reset\r\n                scope.filters = [];\r\n                scope.enableRowSelection = false;\r\n                scope.enableTreeView = false;\r\n                scope.showTreeView = false;\r\n                scope.arrRowsPerPageOptions = [10, 20, 30, 40, 50];\r\n                scope.rowsPerPage = \"10\";\r\n                scope.useExternalPagination = false;\r\n                scope.smartTableId = 'smart-table-' + (new Date().getTime());\r\n\r\n                scope.listeners = {};\r\n\r\n                var limit = parseInt(scope.rowsPerPage);\r\n\r\n                var addEventListeners = function (smartTable) {\r\n                    apis = {\r\n                        core: {\r\n                            getActiveColumns: function () {\r\n                                return scope.smartTableConfig.columnDefs;\r\n                            },\r\n                            getColDefs: function () {\r\n                                return scope.smartTableConfig.columnDefs;\r\n                            },\r\n                            notifyColumnChange: function () {\r\n                                init('columnChange');\r\n                            },\r\n                            notifyRowDataChange: function (rowIndex) {\r\n                                smartTableUtils.broadcast('rowDataChange', { rowIndex: rowIndex, smartTableId: scope.smartTableId });\r\n                            },\r\n                            notifyDataChange: function (isToBeRefreshed) {\r\n                                if (isToBeRefreshed) {\r\n                                    init('refresh');\r\n                                }\r\n                                else {\r\n                                    smartTableUtils.broadcast('dataChange', { smartTableId: scope.smartTableId, updateCell: true });\r\n                                }\r\n                            },\r\n                            refresh: function () {\r\n                                scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                                scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                                scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                                scope.useExternalPagination = scope.smartTableConfig.useExternalPagination ? true : false;\r\n                                init('refresh');\r\n                                angular.isFunction(smartTable.onRefresh) && smartTable.onRefresh(apis);\r\n                            },\r\n                            update: function () {\r\n                                init('dataChange');\r\n                            },\r\n                            stopEdit: function () {\r\n                                if (window.lastActiveCellScope) {\r\n                                    window.lastActiveCellScope.stopEdit();\r\n                                    window.lastActiveCellScope = undefined;\r\n                                }\r\n                            },\r\n                            pagination: {\r\n                                on: {\r\n                                    nextButtonClick: function (scopeRef, onNextButtonClick) {\r\n                                        scope.listeners['nextButtonClick'] = onNextButtonClick;\r\n                                    },\r\n                                    previousButtonClick: function (scopeRef, onPreviousButtonClick) {\r\n                                        scope.listeners['previousButtonClick'] = onPreviousButtonClick;\r\n                                    },\r\n                                    sort: function (scopeRef, onSort) {\r\n                                        scope.listeners['sort'] = onSort;\r\n                                    },\r\n                                    filter: function (scopeRef, onFilter) {\r\n                                        scope.listeners['filter'] = onFilter;\r\n                                    }\r\n                                },\r\n                                setDataLength: function (totalItemsCount) {\r\n                                    scope.displayedRecords = totalItemsCount;\r\n                                },\r\n                                setData: function (items) {\r\n                                    scope.smartTableConfig.data = items;\r\n                                    scope.currentPageDataLength = items.length;\r\n                                },\r\n                                setOffset: function (offset) {\r\n                                    scope.offset = offset;\r\n                                },\r\n                                setLimit: function (limit) {\r\n                                    scope.limit = limit;\r\n                                },\r\n                                getOffset: function () {\r\n                                    return scope.offset;\r\n                                },\r\n                                getRowsPerPage: function () {\r\n                                    return scope.rowsPerPage;\r\n                                }\r\n                            },\r\n                            on: {\r\n                                columnRefresh: function (scopeRef, onColumnRefresh) {\r\n                                    scope.listeners['columnRefresh'] = onColumnRefresh;\r\n                                }\r\n                            }\r\n                        },\r\n                        cell: {\r\n                            on: {\r\n                                click: function (scopeRef, onCellClick) {\r\n                                    scope.listeners['cellClick'] = onCellClick;\r\n                                },\r\n                                change: function (scopeRef, onCellChange) {\r\n                                    scope.listeners['cellChange'] = onCellChange;\r\n                                },\r\n                                optionsChange: function (scopeRef, onOptionsChange) {\r\n                                    scope.listeners['optionsChange'] = onOptionsChange;\r\n                                },\r\n                                optionSelect: function (scopeRef, onOptionSelect) {\r\n                                    scope.listeners['optionSelect'] = onOptionSelect;\r\n                                }\r\n                            }\r\n                        },\r\n                        cellNav: {\r\n                            scrollToFocus: function (rowIndex, colField) {\r\n                                var columnIndex, toBeFocused = true;\r\n\r\n                                for (var i = 0; i < scope.colDefs.length; i++) {\r\n                                    if (scope.colDefs[i].field == colField) {\r\n                                        columnIndex = i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n\r\n                                if (scope.enableTreeView && scope.showTreeView && !scope.smartTableConfig.data[scope.smartTableConfig.data[rowIndex].$$parentIndex].$$isExpanded) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.smartTableConfig.data[scope.smartTableConfig.data[rowIndex].$$parentIndex].$$isExpanded = true;\r\n                                    toBeFocused = false;\r\n                                }\r\n\r\n                                //  Load next page\r\n                                if (rowIndex > (scope.limit > scope.displayedRecords ? scope.displayedRecords : scope.limit) - 1) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.updatePagination(true, false);\r\n                                }\r\n                                    //  Load previous page\r\n                                else if (rowIndex < scope.offset) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.updatePagination(false, false);\r\n                                }\r\n                                else if (toBeFocused) {\r\n                                    scope.pendingFocus = undefined;\r\n                                    $('#' + scope.smartTableId + '-smart-table-cell-' + ((scope.pinnedColumns.length + scope.unpinnedColumns.length) * (rowIndex - scope.offset) + columnIndex)).focus();\r\n                                    //smartTableUtils.broadcast('focusCell', { rowIndex: rowIndex - scope.offset, colField: colField, smartTableId: scope.smartTableId });\r\n                                }\r\n\r\n                                document.getSelection().removeAllRanges();\r\n                            }\r\n                        },\r\n                        edit: {\r\n                            on: {\r\n                                beginCellEdit: function (scopeRef, onBeginCellEdit) {\r\n                                    scope.listeners['beginCellEdit'] = onBeginCellEdit;\r\n                                },\r\n                                endCellEdit: function (scopeRef, onEndCellEdit) {\r\n                                    scope.listeners['endCellEdit'] = onEndCellEdit;\r\n                                },\r\n                                afterCellEdit: function (scopeRef, onAfterCellEdit) {\r\n                                    scope.listeners['afterCellEdit'] = onAfterCellEdit;\r\n                                }\r\n                            }\r\n                        },\r\n                        saveState: {\r\n                            save: function () {\r\n                                var columnsState = [];\r\n                                var tmpColDefs = getReOrderedColumnDefsForState(scope.smartTableConfig.columnDefs);\r\n\r\n                                for (var i = 0; i < tmpColDefs.length; i++) {\r\n                                    columnsState.push({\r\n                                        displayKey: tmpColDefs[i].displayKey,\r\n                                        displayName: tmpColDefs[i].displayName,\r\n                                        field: tmpColDefs[i].field,\r\n                                        width: tmpColDefs[i].width,\r\n                                        visible: tmpColDefs[i].visible\r\n                                    });\r\n                                }\r\n\r\n                                return {\r\n                                    columns: JSON.stringify(columnsState),\r\n                                    filters: scope.filters,\r\n                                    sort: scope.sortState,\r\n                                    enableRowSelection: scope.enableRowSelection,\r\n                                    enableTreeView: scope.enableTreeView,\r\n                                    showTreeView: scope.showTreeView,\r\n                                    pagination: {\r\n                                        pageIndex: pageIndex,\r\n                                        limit: limit,\r\n                                        paginationCurrentPage: 1,\r\n                                        paginationPageSize: 10\r\n                                    },\r\n                                    timestamp: new Date(),\r\n                                    documentURL: window.location.href,\r\n                                    isSmartTable: true\r\n                                };\r\n                            },\r\n                            restore: function (scopeRef, state) {\r\n                                //\trestore table state\r\n                                if (state.isSmartTable) {\r\n                                    scope.enableRowSelection = state.enableRowSelection ? true : false;\r\n                                    scope.enableTreeView = state.enableTreeView ? true : false;\r\n                                    scope.showTreeView = state.showTreeView ? true : false;\r\n\r\n                                    if (state.filters && !scope.useExternalPagination && scope.smartTable.showFilters != undefined) {\r\n                                        scope.filters = state.filters;\r\n                                    }\r\n                                    if (angular.isDefined(state.columns)) {\r\n                                        scope.smartTableConfig.columnDefs = getReOrderedColumnDefs(state.columns);\r\n                                    }\r\n                                    if (!scope.useExternalPagination) {\r\n                                        if (state.pagination) {\r\n                                            pageIndex = state.pagination.limit > 10 ? 0 : (state.pagination.pageIndex > (Math.ceil(scope.smartTableConfig.data.length / 10) - 1) ? 0 : state.pagination.pageIndex);\r\n                                            limit = 10; // state.pagination.limit;\r\n                                            scope.offset = pageIndex * limit;\r\n                                            scope.limit = (pageIndex * limit) + limit;\r\n                                            scope.rowsPerPage = \"10\";\r\n                                            isStatePageIndexSet = true;\r\n                                        }\r\n                                        if (state.sort) {\r\n                                            scope.sortState = state.sort;\r\n                                            sortOrder = state.sort.order;\r\n                                        }\r\n                                    }\r\n                                    refreshColumns();\r\n                                    angular.isFunction(smartTable.onRefresh) && smartTable.onRefresh(apis);\r\n                                }\r\n                                else {\r\n                                    scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                                    scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                                    scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                                    init('refresh');\r\n                                }\r\n                            }\r\n                        },\r\n                        selection: {\r\n                            clearSelectedRows: function () {\r\n                                for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                                    scope.smartTableConfig.data[i].$$isSelected = false;\r\n                                }\r\n                                arrSelectedRowsIndexes = [];\r\n                                scope.isAllRowSelected = false;\r\n                            },\r\n                            getSelectedRows: function () {\r\n                                var tmpSelectedRows = [], tmpRow, arrDeletedIndexes = [];\r\n                                for (var i = 0; i < arrSelectedRowsIndexes.length; i++) {\r\n                                    tmpRow = angular.copy(scope.smartTableConfig.data[arrSelectedRowsIndexes[i]]);\r\n                                    if (tmpRow) {\r\n                                        tmpRow.$$isSelected = false;\r\n                                        tmpSelectedRows.push({ entity: tmpRow, index: arrSelectedRowsIndexes[i] });\r\n                                    }\r\n                                    else {\r\n                                        arrDeletedIndexes.push(i);\r\n                                    }\r\n                                }\r\n                                for (var i = arrDeletedIndexes.length - 1; i >= 0; i--) {\r\n                                    arrSelectedRowsIndexes.splice(arrDeletedIndexes[i], 1);\r\n                                }\r\n                                return tmpSelectedRows;\r\n                            },\r\n                            on: {\r\n                                rowSelectionChanged: function (scopeRef, onRowSelectedChanged) {\r\n                                    scope.listeners['rowSelectionChanged'] = onRowSelectedChanged;\r\n                                }\r\n                            }\r\n                        },\r\n                        options: scope.smartTableConfig\r\n                    };\r\n                    angular.isFunction(smartTable.onRegister) && smartTable.onRegister(apis);\r\n                };\r\n\r\n\r\n                var onSmartTableConfigChange = scope.$watch('smartTable', function (newConfig) {\r\n                    if (!newConfig) {\r\n                        return;\r\n                    }\r\n\r\n                    scope.smartTableConfig = newConfig;\r\n                    scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                    scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                    scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                    scope.useExternalPagination = scope.smartTableConfig.useExternalPagination ? true : false;\r\n\r\n                    scope.smartTableConfig.columnDefs = newConfig.columnDefs ? newConfig.columnDefs : [];\r\n                    scope.smartTableConfig.data = newConfig.data ? newConfig.data : [];\r\n\r\n                    init('refresh');\r\n\r\n                    if (!areEventListenersAdded) {\r\n                        addEventListeners(scope.smartTable);\r\n                        areEventListenersAdded = true;\r\n                    }\r\n                });\r\n\r\n\r\n                var getColumnDef = function (srcConfig, colField) {\r\n                    for (var i = 0; i < srcConfig.length; i++) {\r\n                        if (srcConfig[i].field == colField) {\r\n                            return srcConfig[i];\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n\r\n\r\n                var getColumFilterText = function (colField) {\r\n                    for (var i = 0; i < scope.filters.length; i++) {\r\n                        if (scope.filters[i].filterKey == colField) {\r\n                            return scope.filters[i].filterText;\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n\r\n\r\n                var getReOrderedColumnDefs = function (colDefs) {\r\n                    colDefs = typeof colDefs == 'string' ? JSON.parse(colDefs) : colDefs;\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        if (angular.isUndefined(getColumnDef(colDefs, scope.smartTableConfig.columnDefs[i].field))) {\r\n                            return scope.smartTableConfig.columnDefs;\r\n                        }\r\n                    }\r\n                    var reOrderedColumns = [];\r\n                    var colDef;\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        colDef = getColumnDef(scope.smartTableConfig.columnDefs, colDefs[i].field);\r\n                        if (angular.isUndefined(colDef)) {\r\n                            return scope.smartTableConfig.columnDefs;\r\n                        }\r\n                        reOrderedColumns.push(angular.extend(colDef, {\r\n                            width: colDefs[i].width,\r\n                            visible: angular.isUndefined(colDefs[i].visible) ? colDef.visible : colDefs[i].visible,\r\n                            filterText: getColumFilterText(colDefs[i].field)\r\n                        }));\r\n                    }\r\n                    return reOrderedColumns;\r\n                };\r\n\r\n\r\n                var getReOrderedColumnDefsForState = function (colDefs) {\r\n                    var pinnedColumns = [];\r\n                    var unpinnedColumns = [];\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    return pinnedColumns.concat(unpinnedColumns);\r\n                };\r\n\r\n\r\n                function setFilterText() {\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        var field = scope.smartTableConfig.columnDefs[i].field;\r\n                        var filterDef = '';\r\n                        for (var j = 0; j < scope.filters.length; j++) {\r\n                            if (scope.filters[j] && scope.filters[j].filterKey == field) {\r\n                                filterDef = scope.filters[j];\r\n                                break;\r\n                            }\r\n                        }\r\n                        scope.smartTableConfig.columnDefs[i].filterText = filterDef ? filterDef.filterText : \"\";\r\n                    }\r\n                };\r\n\r\n                var refreshColumns = function () {\r\n                    var pinnedColumns = [];\r\n                    var unpinnedColumns = [];\r\n                    var pinnedContainerWidth = 0;\r\n\r\n                    setFilterText();\r\n\r\n                    var colDefs = angular.copy(scope.smartTableConfig.columnDefs);\r\n                    var tmpColDefs = [];\r\n                    var leftPos = (scope.enableRowSelection ? 40 : 0) + (scope.enableTreeView && scope.showTreeView ? 40 : 0);\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].visible == false) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            colDefs[i].pinnedLeft = false;\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    colDefs = pinnedColumns.concat(unpinnedColumns);\r\n                    pinnedColumns = [];\r\n                    unpinnedColumns = [];\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].visible == false) {\r\n                            continue;\r\n                        }\r\n\r\n                        colDefs[i].left = leftPos;\r\n\r\n                        leftPos = leftPos + colDefs[i].width;\r\n\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedContainerWidth = pinnedContainerWidth + (colDefs[i].visible ? (colDefs[i].width ? colDefs[i].width : '100') : 0);\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    tmpColDefs = pinnedColumns.concat(unpinnedColumns);\r\n\r\n                    scope.colDefs = angular.copy(tmpColDefs);\r\n\r\n                    $(element.find('.smart-table-unpinned-container')).css('margin-left', pinnedContainerWidth + (scope.enableRowSelection ? 40 : 0) + (scope.enableTreeView && scope.showTreeView ? 40 : 0));\r\n\r\n                    scope.pinnedColumns = pinnedColumns;\r\n                    scope.unpinnedColumns = unpinnedColumns;\r\n\r\n                    scope.updateSmartTableColumnResizer = true;\r\n                    scope.updateSmartTableColumnSorter = true;\r\n                };\r\n\r\n\r\n                var init = function (eventType) {\r\n                    switch (eventType) {\r\n                        case 'refresh':\r\n                            pageIndex = 0;\r\n                            scope.rowsPerPage = \"10\";\r\n                            limit = parseInt(scope.rowsPerPage); // 10;\r\n                            recordsFetchedCount = 0;\r\n\r\n                            sortOrder = 1;\r\n\r\n                            scope.filters = [];\r\n                            scope.sortState = undefined;\r\n\r\n                            scope.isRowSelectionEnabled = true;\r\n                            scope.isAllRowSelected = false;\r\n\r\n                            refreshColumns();\r\n\r\n                            scope.updatePagination(false, true);\r\n                            break;\r\n\r\n                        case 'columnChange':\r\n                        case 'dataChange':\r\n                            refreshColumns();\r\n                            break;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.updatePagination = function (isNextButtonClicked, isRefresh) {\r\n                    if (scope.useExternalPagination) {\r\n                        if (isNextButtonClicked) {\r\n                            angular.isFunction(scope.listeners.nextButtonClick) && scope.listeners.nextButtonClick();\r\n                        }\r\n                        else {\r\n                            angular.isFunction(scope.listeners.previousButtonClick) && scope.listeners.previousButtonClick();\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (isRefresh) {\r\n                        scope.offset = 0;\r\n                        scope.limit = parseInt(scope.rowsPerPage); // 10\r\n                        pageIndex = 0;\r\n                    }\r\n                    else {\r\n                        if (isNextButtonClicked && pageIndex < totalPages) {\r\n                            pageIndex++;\r\n                        }\r\n                        else if (!isNextButtonClicked && pageIndex > 0) {\r\n                            pageIndex--;\r\n                        }\r\n                        scope.offset = pageIndex * limit;\r\n                        scope.limit = (pageIndex * limit) + limit;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.onRowsPerPageOptionChange = function (rowsPerPage) {\r\n                    limit = parseInt(rowsPerPage);\r\n                    scope.updatePagination(false, true);\r\n                };\r\n\r\n\r\n                scope.filterData = function (column) {\r\n                    for (var i = 0; i < scope.filters.length; i++) {\r\n                        if (scope.filters[i].filterKey == column.field) {\r\n                            if (column.filterText.trim() == '') {\r\n                                scope.filters.splice(i, 1);\r\n                            }\r\n                            else {\r\n                                scope.filters[i].filterText = column.filterText;\r\n                            }\r\n                            scope.updatePagination(false, true);\r\n                            return;\r\n                        }\r\n                    }\r\n                    scope.filters.push({\r\n                        filterKey: column.field,\r\n                        filterText: column.filterText,\r\n                        colDef: column,\r\n                        condition: column.hasOwnProperty('filter') && column.filter.condition\r\n                    });\r\n                    scope.updatePagination(false, true);\r\n                };\r\n\r\n\r\n                scope.sortData = function (column) {\r\n                    smartTableUtils.debounce.add(function () {\r\n                        //\tIf new column needs to be sorted, then reset sort flag\r\n                        if (scope.sortState && scope.sortState.column.field != column.field || sortOrder < -1) {\r\n                            sortOrder = 1;\r\n                        }\r\n                        refreshColumns();\r\n                        scope.updatePagination(false, true);\r\n                        scope.sortState = {\r\n                            column: column,\r\n                            order: sortOrder,\r\n                            condition: column.sortCondition\r\n                        };\r\n                        sortOrder--;\r\n                    }, 250);\r\n                };\r\n\r\n\r\n                scope.selectRow = function (row, rowIndex, shouldSelectedAllRows) {\r\n                    if (shouldSelectedAllRows) {\r\n                        scope.isAllRowSelected = !scope.isAllRowSelected;\r\n                        if (scope.isAllRowSelected) {\r\n                            arrSelectedRowsIndexes = [];\r\n                        }\r\n                        for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                            scope.smartTableConfig.data[i].$$isSelected = scope.smartTableConfig.data[i].$$isSelectable && scope.isAllRowSelected;\r\n                            if (scope.isAllRowSelected && scope.smartTableConfig.data[i].$$isSelected) {\r\n                                arrSelectedRowsIndexes.push(i);\r\n                            }\r\n                        }\r\n                        if (!scope.isAllRowSelected) {\r\n                            arrSelectedRowsIndexes = [];\r\n                        }\r\n                    }\r\n                    else {\r\n                        row.$$isSelected = row.$$isSelectable && !row.$$isSelected;\r\n                        if (row.$$isSelected) {\r\n                            arrSelectedRowsIndexes.push(rowIndex);\r\n                        }\r\n                        else {\r\n                            if (arrSelectedRowsIndexes.indexOf(rowIndex) > -1) {\r\n                                arrSelectedRowsIndexes.splice(arrSelectedRowsIndexes.indexOf(rowIndex), 1);\r\n                            }\r\n                        }\r\n                        scope.isAllRowSelected = arrSelectedRowsIndexes.length == scope.smartTableConfig.data.length;\r\n                    }\r\n\r\n                    if (/*rowIndex > -1 &&*/ angular.isFunction(scope.listeners.rowSelectionChanged)) {\r\n                        scope.listeners.rowSelectionChanged({\r\n                            row: {\r\n                                entity: row,\r\n                                index: rowIndex,\r\n                                isSelected: scope.isAllRowSelected || (row && row.$$isSelected)\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n\r\n                scope.expandRow = function (row, rowIndex, shouldExpandAllRows) {\r\n                    if (shouldExpandAllRows) {\r\n                        for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                            if (scope.smartTableConfig.data[i].$$treeLevel == 0) {\r\n                                scope.smartTableConfig.data[i].$$isExpanded = !scope.isAllRowExpanded\r\n                            }\r\n                        }\r\n                        scope.isAllRowExpanded = !scope.isAllRowExpanded;\r\n                        scope.updatePagination(false, true);\r\n                    }\r\n                    else {\r\n                        if (row.$$treeLevel > 0) {\r\n                            return;\r\n                        }\r\n                        row.$$isExpanded = !row.$$isExpanded;\r\n                        scope.isAllRowExpanded = false;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.onColumnSort = function (e) {\r\n                    var activeColDefs = angular.copy(scope.colDefs);\r\n                    var startIndex, endIndex, toBeSorted;\r\n\r\n                    var startCol = activeColDefs[e.startIndex];\r\n                    var endCol = activeColDefs[e.endIndex];\r\n\r\n                    if (startCol.pinnedLeft != endCol.pinnedLeft || startCol.field == endCol.field) {\r\n                        return;\r\n                    }\r\n\r\n                    scope.$apply(function () {\r\n                        for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                            if (scope.smartTableConfig.columnDefs[i].field == startCol.field) {\r\n                                startIndex = i;\r\n                                if (angular.isDefined(endIndex)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (scope.smartTableConfig.columnDefs[i].field == endCol.field) {\r\n                                endIndex = i;\r\n                                if (angular.isDefined(startIndex)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var tmpColDefs = angular.copy(scope.smartTableConfig.columnDefs);\r\n                        var item = tmpColDefs.splice(startIndex, 1);\r\n                        tmpColDefs.splice(endIndex, 0, item[0]);\r\n                        scope.smartTableConfig.columnDefs = angular.copy(tmpColDefs);\r\n                        tmpColDefs = null;\r\n\r\n                        init('columnChange');\r\n                        angular.isFunction(scope.listeners.columnRefresh) && scope.listeners.columnRefresh(scope.colDefs);\r\n                    });\r\n                };\r\n\r\n\r\n                scope.onColumnResize = function (e) {\r\n                    var activeColDefs = angular.copy(scope.colDefs);\r\n                    var colToBeResized;\r\n\r\n                    for (var i = 0; i < activeColDefs.length; i++) {\r\n                        if (e.columnIndex == i) {\r\n                            colToBeResized = activeColDefs[i];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        if (scope.smartTableConfig.columnDefs[i].field == colToBeResized.field) {\r\n                            scope.smartTableConfig.columnDefs[i].width = e.width;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    init('columnChange');\r\n                    angular.isFunction(scope.listeners.columnRefresh) && scope.listeners.columnRefresh(scope.colDefs);\r\n                };\r\n\r\n\r\n                var watchers;\r\n\r\n                scope.onSmartTableRenderingStart = function () {\r\n                    watchers = scope.$$watchers;\r\n                    scope.$$watchers = [];\r\n                    // window.startTime = performance.now();\r\n                    // console.log('rendering start');\r\n                };\r\n\r\n                scope.onSmartTableRenderingDone = function () {\r\n                    if (watchers) {\r\n                        scope.$$watchers = watchers;\r\n                    }\r\n                    // discard our copy of the watchers\r\n                    watchers = void 0;\r\n                    // console.log('rendering done in => ' + ((performance.now() - window.startTime) / 1000) + ' seconds');\r\n                };\r\n\r\n                var onDataChange = smartTableUtils.on('dataChange', function (e) {\r\n                    if (angular.isDefined(e.totalRecords) && e.smartTableId == scope.smartTableId) {\r\n                        totalPages = Math.ceil(e.totalRecords / limit) - 1;\r\n                        scope.displayedRecords = e.totalRecords;\r\n                    }\r\n                });\r\n\r\n                var onPageIndexChanged = smartTableUtils.on('pageIndexChanged', function (e) {\r\n                    if (e.smartTableId == scope.smartTableId) {\r\n                        scope.currentPageDataLength = e.currentPageDataLength;\r\n                    }\r\n                });\r\n\r\n                var onSmartTableCurrentPageDataLength = scope.$watch('currentPageDataLength', function (newLength) {\r\n                    if (newLength == 0 && pageIndex > 0 && !isStatePageIndexSet) {\r\n                        scope.updatePagination(false, false);\r\n                    }\r\n                    isStatePageIndexSet = false;\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onSmartTableConfigChange();\r\n                    onPageIndexChanged();\r\n                    onSmartTableCurrentPageDataLength();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/smartTable/smartTableTemplate.html'\r\n        };\r\n    }]);\r\n\r\n    app.service('smartTableUtils', ['$timeout', function ($timeout) {\r\n        var _this = this;\r\n\r\n        /*\r\n         *  Alternative of broadcast event\r\n         */\r\n        var arrEvents = [];\r\n        var eventCounter = 0;\r\n\r\n\r\n        /*\r\n         *  Deregister an event or events\r\n         */\r\n        this.removeEventListener = function (event) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (arrEvents[i].eventName == event.eventName && arrEvents[i].eventId == event.eventId) {\r\n                    arrEvents[i].callback = null;\r\n                    arrEvents.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n         *  Register a listener\r\n         */\r\n        this.on = function (eventName, callback) {\r\n            eventCounter++;\r\n            arrEvents.push({\r\n                eventName: eventName,\r\n                callback: callback,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            });\r\n            var objEvent = {\r\n                eventName: eventName,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            };\r\n            return function () {\r\n                _this.removeEventListener(objEvent);\r\n            };\r\n        };\r\n\r\n\r\n        /*\r\n         *  Fire an event\r\n         */\r\n        this.broadcast = function (eventName, data) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (eventName == arrEvents[i].eventName) {\r\n                    angular.isFunction(arrEvents[i].callback) && arrEvents[i].callback(data);\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n\t     *\tDebouncer logic\r\n\t\t */\r\n        var functionTimeout, isAngularTimeout;\r\n\r\n        this.debounce = {\r\n            add: function (callback, duration, isDigestCycleToBeTriggered) {\r\n                if (functionTimeout) {\r\n                    if (angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false) {\r\n                        clearTimeout(functionTimeout);\r\n                    }\r\n                    else {\r\n                        $timeout.cancel(functionTimeout);\r\n                    }\r\n                }\r\n                functionTimeout = angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false ? setTimeout(function () {\r\n                    angular.isFunction(callback) && callback();\r\n                }, duration ? duration : 1000) : $timeout(function () {\r\n                    angular.isFunction(callback) && callback();\r\n                }, duration ? duration : 1000);\r\n                isAngularTimeout = !angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false;\r\n            },\r\n            cancel: function () {\r\n                if (isAngularTimeout) {\r\n                    $timeout.cancel(functionTimeout);\r\n                }\r\n                else {\r\n                    clearTimeout(functionTimeout);\r\n                }\r\n                functionTimeout = null;\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableCellStyle', ['$compile', '$timeout',\r\n\tfunction () {\r\n\t    return {\r\n\t        restrict: 'A',\r\n\t        link: function (scope, element, attrs) {\r\n\t            //\tto watch the rendering changes e.g. sort or filter\r\n\t            var onColumnConfigChange = scope.$watch('column', function (n) {\r\n\t                init();\r\n\t            });\r\n\r\n\t            var init = function () {\r\n\t                element.removeClass('smart-table-pinned-column smart-table-unpinned-column');\r\n\t                if (scope.column.pinnedLeft) {\r\n\t                    element.addClass('smart-table-pinned-column');\r\n\t                    element.css('left', scope.column.left);\r\n\t                    element.css('width', scope.column.width);\r\n\t                }\r\n\t                else {\r\n\t                    element.addClass('smart-table-unpinned-column');\r\n\t                }\r\n\t            };\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                onColumnConfigChange();\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t}]);\r\n\r\n    app.directive('smartTableHeaderCellTextContainer', ['$compile', '$timeout',\r\n\tfunction () {\r\n\t    return {\r\n\t        restrict: 'C',\r\n\t        link: function (scope, element, attrs) {\r\n\t            //\tto watch the rendering changes e.g. sort or filter\r\n\t            var onColumnConfigChange = scope.$watch('column', function (n) {\r\n\t                init();\r\n\t            });\r\n\r\n\t            var init = function () {\r\n\t                element.css('width', scope.column.width - (scope.column.pinnedLeft ? 12 : 0));\r\n\t            };\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                onColumnConfigChange();\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t}]);\r\n\r\n    app.directive('smartTableColumnResizer', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var isMouseDown, canBeResized, resizer, leftPosLimit = 0, columnIndex, maxWidth, width, newWidth;\r\n\r\n                var onMouseMove = function (e) {\r\n                    if (isMouseDown) {\r\n                        if (e.clientX > leftPosLimit && (angular.isUndefined(maxWidth) || (angular.isDefined(maxWidth) && e.clientX - leftPosLimit < maxWidth))) {\r\n                            resizer.css({\r\n                                left: e.clientX\r\n                            });\r\n                        }\r\n                        document.getSelection().removeAllRanges();\r\n                    }\r\n                    else {\r\n                        if (e.offsetX > (($(this).outerWidth(true) - 2) - 5) && e.offsetX < (($(this).outerWidth(true) - 2))) {\r\n                            $(this).css('cursor', 'col-resize');\r\n                        }\r\n                        else {\r\n                            $(this).css('cursor', 'default');\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var onMouseUp = function (e) {\r\n                    if (isMouseDown) {\r\n                        resizer.off('mousemove', onMouseMove);\r\n                        resizer.off('mouseup', onMouseUp);\r\n                        resizer.remove();\r\n                        canBeResized = false;\r\n                        isMouseDown = false;\r\n                        newWidth = (angular.isDefined(maxWidth) && e.clientX - leftPosLimit > maxWidth) ? maxWidth : e.clientX - leftPosLimit;\r\n\r\n                        if (Math.abs(newWidth - width) > 5) {\r\n                            scope.$apply(function () {\r\n                                scope.onColumnResize({\r\n                                    columnIndex: columnIndex,\r\n                                    width: newWidth < 20 ? 20 : newWidth\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var onMouseDown = function (e) {\r\n                    if (e.offsetX >= (($(this).outerWidth(true) - 2) - 5) && e.offsetX < (($(this).outerWidth(true) - 2))) {\r\n                        $(this).css('cursor', 'col-resize');\r\n                        leftPosLimit = $(this).offset().left;\r\n                        resizer = $(document.createElement('div'));\r\n                        columnIndex = parseInt($(this).attr('column-index'));\r\n                        maxWidth = scope.colDefs[columnIndex].maxWidth;\r\n                        width = scope.colDefs[columnIndex].width;\r\n\r\n                        resizer.css({\r\n                            position: 'absolute',\r\n                            left: $(this).offset().left + $(this).outerWidth(true),\r\n                            top: $(this).offset().top,\r\n                            width: '1px',\r\n                            height: $(this).closest('table').outerHeight(true),\r\n                            'z-index': 1000,\r\n                            border: 'dotted'\r\n                        });\r\n\r\n                        resizer.on('mousemove', onMouseMove);\r\n                        resizer.on('mouseup', onMouseUp);\r\n\r\n                        $(document.body).append(resizer);\r\n\r\n                        isMouseDown = true;\r\n                    }\r\n                    else {\r\n                        $(this).css('cursor', 'default');\r\n                    }\r\n                };\r\n\r\n                var bindEvents = function () {\r\n                    setTimeout(function () {\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousemove', onMouseMove);\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousemove', onMouseMove);\r\n                    }, 250);\r\n                };\r\n\r\n                scope.$watch('updateSmartTableColumnResizer', function (newValue) {\r\n                    if (newValue) {\r\n                        bindEvents();\r\n                        scope.updateSmartTableColumnResizer = false;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableColumnSorter', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var isMouseDown, startX, offsetX, isPinnedColumn, clone, mouseDownTimeout;\r\n\r\n                var onMouseMove = function (e) {\r\n                    if (isMouseDown) {\r\n                        $(clone).css({\r\n                            left: e.clientX - offsetX\r\n                        });\r\n                        document.getSelection().removeAllRanges();\r\n                    }\r\n                };\r\n\r\n                var onMouseUp = function (e) {\r\n                    $(clone).off('mousemove', onMouseMove);\r\n                    $(clone).off('mouseup', onMouseUp);\r\n                    $(clone).off('mouseleave', onMouseUp);\r\n                    $(clone).remove();\r\n\r\n                    if (isMouseDown && e.type == 'mouseup') {\r\n                        var startIndex, endIndex;\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').each(function (index, th) {\r\n                            if (angular.isUndefined(startIndex) && startX > $(th).offset().left && startX < $(th).offset().left + $(th).outerWidth(true)) {\r\n                                startIndex = index;\r\n                            }\r\n                            else if (angular.isUndefined(endIndex) && e.clientX > $(th).offset().left && e.clientX < $(th).offset().left + $(th).outerWidth(true)) {\r\n                                endIndex = index;\r\n                            }\r\n                        });\r\n\r\n                        if (angular.isDefined(startIndex) && angular.isDefined(endIndex)) {\r\n                            scope.onColumnSort({\r\n                                startIndex: startIndex,\r\n                                endIndex: endIndex,\r\n                                isPinnedColumn: isPinnedColumn\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    isMouseDown = false;\r\n\r\n                    if (mouseDownTimeout) {\r\n                        clearTimeout(mouseDownTimeout);\r\n                        mouseDownTimeout = undefined;\r\n                    }\r\n                };\r\n\r\n                var onMouseDown = function (e) {\r\n                    if ($(e.target).closest('.smart-table-search-container').length > 0 || e.offsetX >= $(this).outerWidth(true) - 20) {\r\n                        return;\r\n                    }\r\n\r\n                    var $this = this;\r\n\r\n                    mouseDownTimeout = setTimeout(function () {\r\n                        startX = e.clientX;\r\n                        offsetX = e.offsetX;\r\n                        isMouseDown = true;\r\n\r\n                        isPinnedColumn = $(e.target).closest('.smart-table-pinned-column').length > 0;\r\n                        clone = $($this).clone();\r\n\r\n                        $(clone).on('mousemove', onMouseMove);\r\n                        $(clone).on('mouseup', onMouseUp);\r\n                        $(clone).on('mouseleave', onMouseUp);\r\n\r\n                        $(clone).css({\r\n                            position: 'absolute',\r\n                            left: $($this).offset().left,\r\n                            top: $($this).offset().top,\r\n                            width: $($this).outerWidth(true),\r\n                            height: $($this).outerHeight(true),\r\n                            'z-index': 1000,\r\n                            border: 'dotted'\r\n                        });\r\n\r\n                        $(document.body).append(clone);\r\n\r\n                        mouseDownTimeout = undefined;\r\n                    }, 500);\r\n                };\r\n\r\n                var bindEvents = function () {\r\n                    setTimeout(function () {\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousemove', onMouseMove);\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousemove', onMouseMove);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mouseup', onMouseUp);\r\n                    }, 250);\r\n                };\r\n\r\n                scope.$watch('updateSmartTableColumnSorter', function (newValue) {\r\n                    if (newValue) {\r\n                        bindEvents();\r\n                        scope.updateSmartTableColumnSorter = false;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableCell', ['$rootScope', '$compile', '$timeout', 'smartTableUtils', '$filter', '$translate', 'APPCONSTANTS', 'httpService',\r\n\tfunction ($rootScope, $compile, $timeout, smartTableUtils, $filter, $translate, APPCONSTANTS, httpService) {\r\n\t    return {\r\n\t        restrict: 'EA',\r\n\t        replace: true,\r\n\t        link: function (scope, element, attrs) {\r\n\t            var tabIndex, oldCellValue, oldCellClass, tmpCellValue, tmpInputValue, tmpValueForAutoSuggest;\r\n\t            var isInEditMode = false, selectedOption, selectedDate;\r\n\r\n\t            var templateContainer, cellClassElement = $(element.closest('.smart-table-row-cell'));\r\n\t            var hasStopEditCalled = false, isLineNumberAssigned = false, isInputFieldFocused = false, isRenderingToBeSkipped = false, isFocusToBeSkipped = false;\r\n\r\n\t            var appScope = scope.$parent.$parent.$parent;\r\n\t            var smartTableScope = scope.$parent.$parent;\r\n\r\n\t            //\tto watch the rendering changes e.g. sort or filter, col def change\r\n\t            var onCellDataAndColDefChange = scope.$watchGroup(['value', 'column'], function (n) {\r\n\t                tabIndex = (scope.pinnedColumns.length + scope.unpinnedColumns.length) * scope.$parent.$index + scope.$index;\r\n\t                element.attr('id', smartTableScope.smartTableId + '-smart-table-cell-' + tabIndex);\r\n\t                element.attr('tabindex', tabIndex);\r\n\t                oldCellClass = undefined;\r\n\t                init(false, true);\r\n\t                if (angular.isDefined(smartTableScope.pendingFocus) && (smartTableScope.pendingFocus.rowIndex - smartTableScope.offset) == scope.rowIndex && smartTableScope.pendingFocus.columnIndex == scope.columnIndex) {\r\n\t                    element.trigger('focus');\r\n\t                    scope.pendingFocus = undefined;\r\n\t                }\r\n\t            });\r\n\r\n\t            var init = function (isRowDataUpdated, toBeTranslated) {\r\n\t                scope.row = {\r\n\t                    entity: scope.value\r\n\t                };\r\n\r\n\t                if (angular.isDefined(scope.column) && scope.column.uiType == 'editable' && scope.column.attributes.type == 'date' && isRegionalSettingEnabled) {\r\n\t                    scope.column.attributes.format = moment.localeData().longDateFormat('L').toLowerCase().replace(/m/g, 'M');\r\n\t                }\r\n\r\n\t                scope.enableCellEdit = angular.copy(scope.column.enableCellEdit);\r\n\r\n\t                cellClassElement.removeClass('smart-table-row-cell-invalid smart-table-row-cell-disabled smart-table-row-cell-canceled');\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css({\r\n\t                    border: '',\r\n\t                    width: scope.column.width + (scope.column.pinnedLeft ? -2 : 10)\r\n\t                });\r\n\r\n\t                if (!isRowDataUpdated) {\r\n\t                    //\trendering start callback\r\n\t                    if (!smartTableScope.hasSmartTableRenderingStarted) {\r\n\t                        scope.onSmartTableRenderingStart();\r\n\t                        smartTableScope.hasSmartTableRenderingStarted = true;\r\n\t                    }\r\n\r\n\t                    scope.pinned = attrs.pinned == 'true';\r\n\r\n\t                    scope.rowIndex = scope.$parent.$index;\r\n\t                    scope.columnIndex = scope.$index;\r\n\r\n\t                    if (scope.column.autoIncrement && !smartTableScope.useExternalPagination) {\r\n\t                        if (angular.isDefined(scope.row.entity.$$nodeIndex)) {\r\n\t                            updateCell(scope.row.entity, scope.column.field, scope.row.entity.$$nodeIndex + 1);\r\n\t                        }\r\n\t                        else {\r\n\t                            updateCell(scope.row.entity, scope.column.field, scope.row.entity.$$index + 1);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (angular.isDefined(scope.column.attributes) && scope.column.attributes.type == \"autocomplete\" &&\r\n                    angular.isDefined(scope.column.attributes.displayformat) && angular.isDefined(scope.column.field)) {\r\n\t                    tmpValueForAutoSuggest = getObjectValueForAutoSuggest(scope.row.entity, scope.column.field);\r\n\t                    if (angular.isObject(tmpValueForAutoSuggest)) {\r\n\t                        //scope.COL_FIELD = getDisplayData(getObjectValue(scope.row.entity, scope.column.field.split('.')[0]), scope.column.attributes.displayformat);\r\n\t                        scope.COL_FIELD = getDisplayData(tmpValueForAutoSuggest, scope.column.attributes.displayformat);\r\n\t                    }\r\n\t                    else {\r\n\t                        scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                }\r\n\r\n\t                if (angular.isFunction(scope.column.cellClass) /*&& oldCellValue != scope.COL_FIELD*/) {\r\n\t                    var tmpClass = scope.column.cellClass({}, { entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex, value: getObjectValue(scope.row.entity, scope.column.field) });\r\n\t                    if (angular.isObject(tmpClass)) {\r\n\t                        if (cellClassElement.find('.smart-table-row-cell-info-icon').length == 0) {\r\n\t                            var iconTemplate = '';\r\n\t                            switch (tmpClass.type) {\r\n\t                                case 'smart-table-row-cell-info':\r\n\t                                    iconTemplate += '<svg><use xlink:href=\"#icon_Info\"></use></svg>';\r\n\t                                    break;\r\n\t                                default:\r\n\t                                    iconTemplate += '<svg><use xlink:href=\"#icon_Info\"></use></svg>';\r\n\t                                    break;\r\n\t                            }\r\n\t                            cellClassElement.find('.smart-table-cell-text').append('<i class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + tmpClass.message + '\">' + iconTemplate + '</i>');\r\n\t                        }\r\n\t                        cellClassElement.addClass(tmpClass.class);\r\n\t                    }\r\n\t                    else {\r\n\t                        cellClassElement.addClass(tmpClass);\r\n\t                    }\r\n\t                    oldCellClass = tmpClass;\r\n\t                }\r\n\r\n\t                if (angular.isFunction(scope.column.cellEditableCondition)) {\r\n\t                    scope.enableCellEdit = scope.column.cellEditableCondition({ row: scope.row, index: scope.rowIndex, col: { colDef: scope.column, index: scope.columnIndex }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element });\r\n\t                }\r\n\r\n\t                updateCellTemplate(true, toBeTranslated);\r\n\r\n\t                if (!isRowDataUpdated) {\r\n\t                    //\trendering done callback\r\n\t                    if (scope.$parent.$last && scope.$last) {\r\n\t                        scope.onSmartTableRenderingDone();\r\n\t                        smartTableScope.hasSmartTableRenderingStarted = false;\r\n\t                    }\r\n\t                }\r\n\t            };\r\n\r\n\t            // init();\r\n\r\n\r\n\t            //  Update date\r\n\t            var updateDate = function (tmpDate) {\r\n                    if (selectedDate == '/Date(' + ((tmpDate.unix() * 1000) + 43200000) + '+0000)/') {\r\n\t                    return;\r\n\t                }\r\n                    selectedDate = '/Date(' + ((tmpDate.unix() * 1000) + 43200000) + '+0000)/';\r\n\t                element.find('input').val($filter('smartDateFormat')(selectedDate, scope.column.attributes.format));\r\n\t                if (scope.column.isRegUpdateCol) {\r\n\t                    //\tcell change listener\r\n\t                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: selectedDate });\r\n\t                }\r\n\t            };\r\n\r\n\r\n\t            //  Pop-up listeners\r\n\t            var onPopupOpened, onPopupClosed;\r\n\r\n\t            var addPopupListeners = function () {\r\n\t                var oldCellModel, newCellModel;\r\n\r\n\t                onPopupOpened = $rootScope.$on(\"popupOpened\", function () {\r\n\t                    oldCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                });\r\n\r\n\t                onPopupClosed = $rootScope.$on(\"popupClosed\", function () {\r\n\t                    if (angular.isDefined(scope.column.debounce) && scope.column.debounce > 0) {\r\n\t                        setTimeout(function () {\r\n\t                            newCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                            updateCellValueForPopup(oldCellModel, newCellModel);\r\n\t                        }, scope.column.debounce);\r\n\t                    }\r\n\t                    else {\r\n\t                        newCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                        updateCellValueForPopup(oldCellModel, newCellModel);\r\n\t                    }\r\n\r\n\t                    element.trigger('focus');\r\n\t                });\r\n\t            };\r\n\r\n\r\n\t            var updateCellValueForPopup = function (oldCellModel, newCellModel) {\r\n\t                if (!angular.equals(oldCellModel, newCellModel)) {\r\n\t                    scope.COL_FIELD = newCellModel;\r\n\t                    updateCellTemplate(true, true);\r\n\t                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }\r\n\t            };\r\n\r\n\r\n\t            var removePopupListeners = function () {\r\n\t                angular.isFunction(onPopupOpened) && onPopupOpened();\r\n\t                angular.isFunction(onPopupClosed) && onPopupClosed();\r\n\t            };\r\n\r\n\t            function triggerTaxesPopup() {\r\n\t                element.trigger(\"blur\");\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t            }\r\n\t            function triggerAdhocPopup() {            \r\n\t               \r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t                event.stopPropagation();\r\n\t                event.preventDefault();\r\n\t            }\r\n\t            function triggerSupplierCardPopup() {\r\n\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t                event.stopPropagation();\r\n\t                event.preventDefault();\r\n\t            }\r\n\t            var updateCellTemplate = function (toBeFiltered, toBeTranslated) {\r\n\t                if (angular.isFunction(scope.column.cellTemplate)) {\r\n\t                    tmpCellValue = scope.column.cellTemplate({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                    if (scope.column.uiType == 'popup' && angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\t                    element.find('.smart-table-cell-template').html((scope.column.uiType == 'popup' ? '<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' : '<span>') + tmpCellValue + (scope.column.uiType == 'popup' ? '</a>' : '</span>'));\r\n\t                    element.parent().attr('title', tmpCellValue);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (scope.column.uiType == 'editable') {\r\n\t                    switch (scope.column.attributes.type) {\r\n\t                        case 'number':\r\n\t                            if (toBeFiltered && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        case 'date':\r\n\t                            if (toBeFiltered) {\r\n\t                                scope.COL_FIELD = scope.COL_FIELD == '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : $filter('smartDateFormat')(scope.COL_FIELD, scope.column.attributes.format);\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        default:\r\n\t                            if (toBeTranslated && scope.column.enableTranslation) {\r\n\t                                scope.COL_FIELD = $translate.instant(scope.COL_FIELD);\r\n\t                            }\r\n\t                            if (toBeFiltered && angular.isDefined(scope.column.attributes.maxlength) && angular.isDefined(scope.COL_FIELD)) {\r\n\t                                scope.COL_FIELD = scope.COL_FIELD.substr(0, scope.column.attributes.maxlength);\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                    tmpCellValue = (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD);\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                    if (scope.column.uiType == \"editable\" && scope.column.adhocpopup && scope.column.adhocpopup===\"adhocpopup\") {                            \t                      \r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Common_AddAdhocLocation\") + '\"><svg><use xlink:href=\"#icon_Location\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerAdhocPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\t                      \r\n\t                    }\r\n\t                    else if (scope.column.uiType == \"editable\" && scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Req_SupplierName\") + '\"><svg><use xlink:href=\"#icon_ContactCard\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerSupplierCardPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\r\n\t                    }\r\n\t                    if (scope.row.entity.RequisitionSource != undefined && scope.row.entity.RequisitionSource == 3 && scope.column.uiType == \"editable\" && scope.column.Changereq && scope.column.Changereq === \"Changereq\") {\r\n\t                        if (scope.row.entity.IsAddedFromRequistion != undefined) {\r\n\t                            if (scope.row.entity.IsAddedFromRequistion == true) {\r\n\t                            }\r\n\t                            else {\r\n\t                                var icon = $('<i  style=\"float: right\" class=\"icon small red-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"\"><svg><use xlink:href=\"#icon_AddToDefault \"></use></svg></i>')\r\n\t                                element.find('.smart-table-cell-template').append(icon);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else if (scope.column.uiType == 'popup') {\r\n\t                    tmpCellValue = (scope.COL_FIELD === '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null) ? (scope.column.placeHolder ? scope.column.placeHolder : $translate.instant('P2P_Common_Add')) : scope.COL_FIELD;\r\n\t                    if (angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\t                    element.find('.smart-table-cell-template').html('<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' + tmpCellValue + '</a>');\r\n\t                }\r\n\t                else if (scope.column.uiType == 'dropdown') {\r\n\t                    tmpCellValue = toBeTranslated && scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : scope.COL_FIELD;\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                }\r\n\t                else if (scope.column.uiType == 'taxesPopup') {\r\n\t                    tmpCellValue = scope.row.entity[scope.column.field];\r\n\r\n\t                    if (angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\t                    \r\n\t\r\n\t                    element.find('.smart-table-cell-template').html('<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' + tmpCellValue + '</a>');\r\n\t                    if (scope.row.entity.isTaxExempt) {\r\n\t                        var taxExempt = $('<a>' + $translate.instant(\"P2P_Common_Exempt\") + '</a>');\r\n\t                        taxExempt.mousedown(function () {\r\n\t                            triggerTaxesPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').html(taxExempt);\r\n\t                    }\t                    \r\n\t                    var icon = $('<i style=\"float: right\" class=\"icon iconSmall tooltipped\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"ADD\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i>')\r\n\t                    icon.mousedown(function () {\r\n\t                        triggerTaxesPopup();\r\n\t                    })\r\n\t                    element.find('.smart-table-cell-template').append(icon);\r\n                        element.parent().attr('title', tmpCellValue);\r\n\t                }\r\n\t                else {\r\n\t                    if (toBeFiltered && scope.column.attributes && scope.column.attributes.type == 'number' && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                        scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                    }\r\n\t                    tmpCellValue = toBeTranslated && scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD);\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                }\r\n\t                element.parent().attr('title', tmpCellValue);\r\n\t            };\r\n\r\n\r\n\t            var getEditableTemplate = function () {\r\n\t                var template = '<div>';\r\n\t                switch (scope.column.uiType) {\r\n\t                    case 'editable':\r\n\t                        switch (scope.column.attributes.type) {\r\n\t                            case 'number':\r\n\t                                tmpInputValue = parseFloat(getObjectValue(scope.row.entity, scope.column.field));\r\n\r\n\t                                if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                    tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1])\r\n\t                                }\r\n\r\n\t                                template += '<input type=\"number\" autocomplete=\"off\" value=\"' + (tmpInputValue == 0 ? '' : tmpInputValue) + '\">';\r\n\t                                break;\r\n\r\n\t                            case 'date':\r\n\t                                template += '<input type=\"text\" autocomplete=\"off\" value=\"' + (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD) + '\" placeholder=\"' + (scope.column.attributes.format ? (scope.column.attributes.format).toUpperCase() : 'MM/DD/YYYY') + '\">';\r\n\t                                break;\r\n\r\n\t                            default:\r\n\t                                template += '<input type=\"text\" autocomplete=\"off\" value=\"' + (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD) + '\"' + (angular.isDefined(scope.column.attributes.maxlength) ? 'maxlength=\"' + scope.column.attributes.maxlength : '\"') + '>';\r\n\t                                break;\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'dropdown':\r\n\t                    case 'select':\r\n\t                        template += '<select style=\"display: block !important;\">';\r\n\t                        for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                            template += '<option ' + ($translate.instant(scope.column.attributes.options[i][scope.column.attributes.dataKey] + '') == $translate.instant(scope.COL_FIELD + '') ? 'selected' : '') + ' value=\"' + $translate.instant(scope.column.attributes.options[i][scope.column.attributes.idKey] + '') + '\">' + $translate.instant(scope.column.attributes.options[i][scope.column.attributes.dataKey] + '') + '</option>';\r\n\t                        }\r\n\t                        template += '</select>';\r\n\t                        break;\r\n\r\n\t                        //case 'popup':\r\n\t                        //    template += '<div><a>' + ((scope.COL_FIELD === '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null) ? (scope.column.placeHolder ? scope.column.placeHolder : 'ADD') : scope.COL_FIELD) + '</a></div>';\r\n\t                        //    break;\r\n\t                }\r\n\t                return template + '</div>'\r\n\t            };\r\n\r\n\r\n\t            var onElementKeyDown = function (e) {\r\n\t                window.lastKeyPressed = e.keyCode;\r\n\t                switch (e.keyCode) {\r\n\t                    //\tspace key\r\n\t                    case 32:\r\n\t                        if (scope.column.uiType == 'editable' && element.find('input').length > 0) {\r\n\t                            if (element.find('input:focus').length > 0) {\r\n\t                                isInputFieldFocused = true;\r\n\t                            }\r\n\t                            if (scope.column.attributes.type == 'date') {\r\n\t                                element.find('input').focus();\r\n\t                                e.stopPropagation();\r\n\t                                return false;\r\n\t                            }\r\n\t                            else {\r\n\t                                if (!isInputFieldFocused) {\r\n\t                                    isInputFieldFocused = true;\r\n\r\n\t                                    //if (element.find('input:focus').length == 0) {\r\n\t                                    tmpInputValue = element.find('input').val();\r\n\t                                    element.find('input').focus().val('').val(tmpInputValue);\r\n\t                                    //if (element.find('input').val().trim().length == 0) {\r\n\t                                    e.stopPropagation();\r\n\t                                    return false;\r\n\t                                    //}\r\n\t                                    //}\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'dropdown' && element.find('select').length > 0) {\r\n\t                            element.find('select').focus();\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'popup' && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }) && scope.column.isRegClickCol) {\r\n\t                            smartTableUtils.debounce.add(function () {\r\n\t                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                                //\tcell click listener\r\n\t                                angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                            }, 100);\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        else {\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                        //\tarrow keys\r\n\t                    case 37:\r\n\t                        if (!isInputFieldFocused) {\r\n\t                            if (element.find('input:focus').length > 0) {\r\n\t                                isInputFieldFocused = true;\r\n\t                                return;\r\n\t                            }\r\n\r\n\t                            if (scope.rowIndex == 0 && scope.columnIndex == 0) { }\r\n\t                            else {\r\n\t                                $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) - 1)).focus();\r\n\t                                scope.stopEdit();\r\n\t                            }\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                    case 39:\r\n\t                    case 9:\r\n\t                        if (e.keyCode == 39) {\r\n\t                            if (!isInputFieldFocused) {\r\n\t                                if (element.find('input:focus').length > 0) {\r\n\t                                    isInputFieldFocused = true;\r\n\t                                    return;\r\n\t                                }\r\n\r\n\t                                if (scope.$parent.$last && scope.$last) {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-0').focus();\r\n\t                                }\r\n\t                                else {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) + 1)).focus();\r\n\t                                }\r\n\t                                scope.stopEdit();\r\n\t                                e.stopPropagation();\r\n\t                                return false;\r\n\t                            }\r\n\t                        }\r\n\t                        else {\r\n\t                            if (e.shiftKey) {\r\n\t                                if (scope.rowIndex == 0 && scope.columnIndex == 0) {\r\n\t                                }\r\n\t                                else {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) - 1)).focus();\r\n\t                                    scope.stopEdit();\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) + 1)).focus();\r\n\t                                scope.stopEdit();\r\n\t                            }\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                    case 38:\r\n\t                        // if(!$(e.target).is('select')) {\r\n\t                        if (scope.rowIndex > 0) {\r\n\t                            var cellIndexFocus = parseInt(tabIndex) - (smartTableScope.pinnedColumns.length + smartTableScope.unpinnedColumns.length);\r\n\t                            $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + cellIndexFocus).focus();\r\n\t                            scope.stopEdit();\r\n\t                        }\r\n\t                        e.stopPropagation();\r\n\t                        return false;\r\n\t                        // }\r\n\t                        break;\r\n\t                    case 40:\r\n\t                    case 13:\r\n\t                        // if(!$(e.target).is('select')) {\r\n\t                        if (scope.rowIndex < smartTableScope.currentPageDataLength - 1) {\r\n\t                            var cellIndexFocus = parseInt(tabIndex) + (smartTableScope.pinnedColumns.length + smartTableScope.unpinnedColumns.length);\r\n\t                            $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + cellIndexFocus).focus();\r\n\t                            scope.stopEdit();\r\n\t                        }\r\n\t                        e.stopPropagation();\r\n\t                        return false;\r\n\t                        // }\r\n\t                        break;\r\n\t                        //  escape key\r\n\t                    case 27:\r\n\t                        if ((scope.column.uiType == 'editable' || scope.column.uiType == 'dropdown') && (scope.column.attributes.type != 'autocomplete' || (scope.column.attributes.type == 'autocomplete' &&\r\n                            scope.column.isFreeText && !selectedOption))) {\r\n\t                            isInputFieldFocused = false;\r\n\r\n\t                            if (scope.column.attributes.type == 'number') {\r\n\t                                tmpInputValue = parseFloat(oldCellValue);\r\n\t                                if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                    tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1]);\r\n\t                                }\r\n\t                                element.find('input').val(tmpInputValue == 0 ? '' : tmpInputValue).blur();\r\n\t                                if (isRegionalSettingEnabled) {\r\n\t                                    try {\r\n\t                                        element.find('input').autoNumeric('get');\r\n\t                                    }\r\n\t                                    catch (e) { }\r\n\t                                }\r\n\t                                updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                            }\r\n\t                            else if (scope.column.attributes.type == 'date') {\r\n\t                                element.find('input').val($filter('smartDateFormat')(oldCellValue, scope.column.attributes.format)).blur();\r\n\t                                updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                                selectedDate = undefined;\r\n\t                            }\r\n\t                            else {\r\n\t                                if (scope.column.uiType == 'dropdown') {\r\n\t                                    var tmpPreviousSelectedDropdownObj;\r\n\t                                    for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                        if (oldCellValue == scope.column.attributes.options[i][scope.column.attributes.dataKey]) {\r\n\t                                            tmpPreviousSelectedDropdownObj = scope.column.attributes.options[i];\r\n\t                                            updateCell(scope.row.entity, scope.column.field, scope.column.attributes.options[i]);\r\n\t                                            break;\r\n\t                                        }\r\n\t                                    }\r\n\t                                    element.find('select').val(tmpPreviousSelectedDropdownObj[scope.column.attributes.idKey]).blur();\r\n\t                                }\r\n\t                                else {\r\n\t                                    element.find('input').val(oldCellValue).blur();\r\n\t                                    updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                                }\r\n\t                            }\r\n\r\n\t                            isRenderingToBeSkipped = true;\r\n\t                            isFocusToBeSkipped = true;\r\n\t                            element.focus();\r\n\r\n\t                            if (scope.column.attributes.type == 'number' && scope.column.isRegUpdateCol) {\r\n\t                                smartTableUtils.debounce.add(function () {\r\n\t                                    //\tcell change listener\r\n\t                                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                    smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                }, 250, false);\r\n\t                            }\r\n\t                            else if (scope.column.attributes.type == 'date') {\r\n\t                                if (scope.column.isRegUpdateCol) {\r\n\t                                    //\tcell change listener\r\n\t                                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: selectedDate });\r\n\t                                }\r\n\t                            }\r\n\t                            else if (scope.column.uiType == 'dropdown') {\r\n\t                                // Options change listener\r\n\t                                angular.isFunction(smartTableScope.listeners.optionSelect) && smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpPreviousSelectedDropdownObj });\r\n\t                            }\r\n\t                        }\r\n\t                        break;\r\n\t                    default:\r\n\t                        //  disable focus on function and filter keys\r\n\t                        if ((e.keyCode >= 112 && e.keyCode <= 123) || [16, 20, 255, 17, 91, 18, 33, 34, 144, 45, 19, 145, 93, 173, 174, 175].indexOf(e.keyCode) > -1) {\r\n\t                            e.preventDefault();\r\n\t                            return false;\r\n\t                        }\r\n\t                        if ((scope.column.uiType == 'editable' || scope.column.uiType == 'taxesPopup') && element.find('input').length > 0) {\r\n\t                            //  HOME and END keys\r\n\t                            if (!isInputFieldFocused && [35, 36].indexOf(e.keyCode) > -1) {\r\n\t                                e.preventDefault();\r\n\t                                return false;\r\n\t                            }\r\n\t                            if (!isInputFieldFocused) {\r\n\t                                isInputFieldFocused = true;\r\n\r\n\t                                if (element.find('input:focus').length == 0) {\r\n\t                                    //tmpInputValue = element.find('input').val();\r\n\t                                    //element.find('input').focus().val('').val(tmpInputValue);\r\n\t                                    element.find('input').focus().val('');\r\n\r\n\t                                    if (scope.column.attributes.type == 'number' && !isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        var arrDecimalSplits = element.find('input').val().split('.');\r\n\r\n\t                                        if (arrDecimalSplits.length > 1) {\r\n\t                                            if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                                e.preventDefault();\r\n\t                                                return false;\r\n\t                                            }\r\n\t                                        }\r\n\t                                        else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                            e.preventDefault();\r\n\t                                            return false;\r\n\t                                        }\r\n\t                                    }\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'dropdown' && element.find('select').length > 0) {\r\n\t                            element.find('select').focus();\r\n\t                        }\r\n\t                        if (e.keyCode == 8 && element.find('input').length == 0) {\r\n\t                            e.preventDefault();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                }\r\n\t            };\r\n\r\n\t            scope.onElementKeyDown = onElementKeyDown;\r\n\r\n\t            element.on('keydown', onElementKeyDown);\r\n\r\n\r\n\t            scope.stopEdit = function (isWindowClickFired) {\r\n\t                isRenderingToBeSkipped = false;\r\n\t                isFocusToBeSkipped = false;\r\n\r\n\t                //  prevent stop edit \r\n\t                if (isWindowClickFired && scope.column.uiType == 'popup') {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                //\tscroll container to left\r\n\t\t\t\t\tif (scope.$last && window.lastKeyPressed != 37 && !window.isSmartTableCellClicked && (window.shiftKey && window.lastKeyPressed == 9)) {\r\n\t                    $(element.closest('.smart-table-unpinned-container')).scrollLeft(0);\r\n\t                }\r\n\r\n\t                if ((scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup' || (scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") || (scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\")) && scope.column.isRegClickCol) {\r\n\t                    removePopupListeners();\r\n\t                }\r\n\r\n\t                if (hasStopEditCalled) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                isInEditMode = false;\r\n\t                isInputFieldFocused = false;\r\n\r\n\t                //\tIf cell is editable\r\n\t                if (scope.column.enableCellEdit && (angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }))) {\r\n\t                    switch (scope.column.uiType) {\r\n\t                        case 'editable':\r\n\t                            switch (scope.column.attributes.type) {\r\n\t                                case 'number':\r\n\t                                    if (isRegionalSettingEnabled) {\r\n\t                                        try {\r\n\t                                            scope.COL_FIELD = element.find('input').autoNumeric('get') * 1;\r\n\t                                        }\r\n\t                                        catch (error) {\r\n\t                                            console.log(error);\r\n\t                                            console.log(\"Error in number get. \" + scope.column.field);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = parseFloat($(element.find('input')).val());\r\n\t                                    }\r\n\t                                    scope.COL_FIELD = isNaN(scope.COL_FIELD) ? 0 : scope.COL_FIELD;\r\n\t                                    updateCell(scope.row.entity, scope.column.field, angular.copy(scope.COL_FIELD));\r\n\t                                    if (angular.isDefined(scope.column.attributes) && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                                    }\r\n\t                                    break;\r\n\r\n\t                                case 'autocomplete':\r\n\t                                    if (element.find('input').devbridgeAutocomplete()) {\r\n\t                                        element.find('input').devbridgeAutocomplete().dispose();\r\n\t                                    }\r\n\t                                    if (selectedOption) {\r\n\t                                        scope.COL_FIELD = angular.isDefined(scope.column.attributes.displayformat) ? getDisplayData(selectedOption, scope.column.attributes.displayformat) : $(element.find('input')).val();\r\n\t                                        updateCell(scope.row.entity, scope.column.field, selectedOption);\r\n\t                                        selectedOption = undefined;\r\n\t                                    }\r\n\t                                    else if (scope.column.isFreeText) {\r\n\t                                        scope.COL_FIELD = $(element.find('input')).val();\r\n\t                                        updateCell(scope.row.entity, scope.column.field, scope.COL_FIELD);\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                                    }\r\n\t                                    break;\r\n\r\n\t                                case 'date':\r\n\t                                    if (element.find('input').daterangepicker()) {\r\n\t                                        element.find('input').daterangepicker().daterangepicker();\r\n\t                                    }\r\n\t                                    if (selectedDate == '') {\r\n\t                                        scope.COL_FIELD = '';\r\n\t                                        updateCell(scope.row.entity, scope.column.field, null);\r\n\t                                    }\r\n\t                                    else if (angular.isDefined(selectedDate) && selectedDate.indexOf('Date') > -1) {\r\n\t                                        scope.COL_FIELD = $filter('smartDateFormat')(selectedDate, scope.column.attributes.format);\r\n\t                                        updateCell(scope.row.entity, scope.column.field, selectedDate);\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = $filter('smartDateFormat')(getObjectValue(scope.row.entity, scope.column.field), scope.column.attributes.format);\r\n\t                                    }\r\n\t                                    selectedDate = undefined;\r\n\t                                    break;\r\n\r\n\t                                default:\r\n\t                                    scope.COL_FIELD = $(element.find('input')).val();\r\n\t                                    updateCell(scope.row.entity, scope.column.field, scope.COL_FIELD);\r\n\t                                    break;\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        case 'dropdown':\r\n\t                        case 'select':\r\n\t                            for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                if ($(element.find('select')).val() == scope.column.attributes.options[i][scope.column.attributes.idKey]) {\r\n\t                                    scope.COL_FIELD = scope.column.attributes.options[i][scope.column.attributes.dataKey];\r\n\t                                    updateCell(scope.row.entity, scope.column.field, scope.column.attributes.options[i]);\r\n\t                                    break;\r\n\t                                }\r\n\t                            }\r\n\t                            scope.COL_FIELD = scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : scope.COL_FIELD;\r\n\t                            break;\r\n\t                        case 'taxesPopup':\r\n\t                            if (isRegionalSettingEnabled) {\r\n\t                                try {\r\n\t                                    if (element.find('input').length > 0) {\r\n\t                                        scope.COL_FIELD = element.find('input').autoNumeric('get') * 1;\r\n\t                                    }\r\n\t                                }\r\n\t                                catch (error) {\r\n\t                                    console.log(error);\r\n\t                                    console.log(\"Error in number get. \" + scope.column.field);\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                scope.COL_FIELD = parseFloat($(element.find('input')).val());\r\n\t                            }\r\n\t                            scope.COL_FIELD = isNaN(scope.COL_FIELD) ? 0 : scope.COL_FIELD;\r\n\t                            updateCell(scope.row.entity, scope.column.field, angular.copy(scope.COL_FIELD));\r\n\t                            if (angular.isDefined(scope.column.attributes) && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                    updateCellTemplate();\r\n\t                }\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css('border', '');\r\n\t                templateContainer && templateContainer.empty();\r\n\r\n\t                if (scope.column.enableCellEdit && oldCellValue != scope.COL_FIELD) {\r\n\t                    if (oldCellValue != scope.COL_FIELD) {\r\n\t                        angular.isFunction(smartTableScope.listeners.afterCellEdit) && smartTableScope.listeners.afterCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\r\n\t                        smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                    }\r\n\r\n\t                    //\tend cell edit listener\r\n\t                    angular.isFunction(smartTableScope.listeners.endCellEdit) && smartTableScope.listeners.endCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }\r\n\r\n\t                if (scope.column.enableCellEdit && (scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup')) {\r\n\t                    smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                }\r\n\r\n\t                hasStopEditCalled = true;\r\n\t            };\r\n\r\n\r\n\t            var onFocus = function (e) {\r\n\t                if (isRenderingToBeSkipped) {\r\n\t                    if (element.find('input').length > 0 && !isFocusToBeSkipped) {\r\n\t                        element.find('input').focus();\r\n\t                    }\r\n\t                    return;\r\n\t                }\r\n\r\n\t                oldCellValue = scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : (scope.column.uiType == 'editable' && (scope.column.attributes.type == 'date' || scope.column.attributes.type == 'number') ? getObjectValue(scope.row.entity, scope.column.field) : scope.COL_FIELD);\r\n\r\n\t                //  Prevent from scrolling to left\r\n\t                if (scope.$last) {\r\n\t                    window.lastKeyPressed = 37;\r\n\t                }\r\n\r\n\t                if (window.lastActiveCellScope) {\r\n\t                    window.lastActiveCellScope.stopEdit();\r\n\t                    window.lastActiveCellScope = undefined;\r\n\t                }\r\n\r\n\t                window.lastActiveCellScope = scope;\r\n\r\n\t                hasStopEditCalled = false;\r\n\r\n\t                //\tscroll container to left\r\n\t                if (smartTableScope.pinnedColumns.length == scope.$index) {\r\n\t                    setTimeout(function () {\r\n\t                        $(element.closest('.smart-table-unpinned-container')).scrollLeft(0);\r\n\t                    }, 250);\r\n\t                }\r\n\r\n\t                if ((scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup' || (scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") || (scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\")) && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }) && scope.column.isRegClickCol) {\r\n\t                    addPopupListeners();\r\n\t                }\r\n\r\n\t                window.isSmartTableCellClicked = false;\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css('border', '1px solid ' + (cellClassElement.hasClass('smart-table-row-cell-invalid') ? 'red' : '#159dfc'));\r\n\t                if (isInEditMode || !scope.column.enableCellEdit || (angular.isFunction(scope.column.cellEditableCondition) && !scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }))) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                //\tBegin cell edit listener\r\n\t                angular.isFunction(smartTableScope.listeners.beginCellEdit) && smartTableScope.listeners.beginCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\r\n\t                if (scope.column.uiType != 'popup') {\r\n\t                     $(element.find('.smart-table-cell-template')).html(getEditableTemplate());\r\n\t                     if (scope.column.uiType == \"editable\" && scope.column.adhocpopup && scope.column.adhocpopup===\"adhocpopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Common_AddAdhocLocation\") + '\"><svg><use xlink:href=\"#icon_Location\"></use></svg></i>');\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerAdhocPopup();\r\n\t                        });\r\n\t                        var inputvalue = $(element.find('.smart-table-cell-template')).html(getEditableTemplate()).css(\"width\", $(element.find('.smart-table-cell-template')).parent().width() - 40 + \"px\");\r\n\t                      $(element.find('.smart-table-cell-template')).append(inputvalue).append(icon);\r\n\t                     }\r\n\t                     else if (scope.column.uiType == \"editable\" && scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\") {\r\n\t                         var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Req_SupplierName\") + '\"><svg><use xlink:href=\"#icon_ContactCard\"></use></svg></i>')\r\n\t                         icon.mousedown(function () {\r\n\t                             triggerSupplierCardPopup();\r\n\t                         })\r\n\t                         element.find('.smart-table-cell-template').append(icon);\r\n\t                     }\r\n\t                }\r\n\r\n\t                if (scope.column.uiType == 'taxesPopup') {\r\n\t                    var tmpInputValue = parseFloat(getObjectValue(scope.row.entity, scope.column.field));\r\n\t                    if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                        tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1]);\r\n\t                    }     \r\n\t                    var input = $('<input  type=\"number\" autocomplete=\"off\" value=\"' + (tmpInputValue == 0 ? '' : tmpInputValue) + '\">');\r\n\t                    if (scope.row.entity.isTaxExempt) {\r\n\t                        input = $('<a>' + $translate.instant(\"P2P_Common_Exempt\") + '</a>')\r\n\t                        input.mousedown(function () {\r\n\t                            triggerTaxesPopup();\r\n\r\n\t                        });\r\n\t                    }\r\n\t                    var icon = $('<i style=\"float: right\" class=\"icon iconSmall tooltipped\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i>');\r\n\t                    icon.mousedown(function () {\r\n\t                        triggerTaxesPopup();\r\n\t                    });\r\n\t                    input.css(\"width\", $(element.find('.smart-table-cell-template')).parent().width() - 40 + \"px\");\r\n\t                    $(element.find('.smart-table-cell-template')).html('').append(input).append(icon);\r\n\t                }\r\n\r\n\t                switch (scope.column.uiType) {\r\n\t                    case 'editable':\r\n\t                        switch (scope.column.attributes.type) {\r\n\t                            case 'number':\r\n\t                                setTimeout(function () {\r\n\t                                    var tmpVal;\r\n\t                                    if (isRegionalSettingEnabled) {\r\n\t                                        try {\r\n\t                                            element.find('input').attr('type', 'text');\t                                        \r\n\t                                            var mDec = scope.column.attributes.minmaxprecisionfilter != undefined && scope.column.attributes.minmaxprecisionfilter.split(':')[1] != '' ? scope.column.attributes.minmaxprecisionfilter.split(':')[1] : MaxPrecessionValue;\t                                           \r\n\t                                            element.find('input').autoNumeric('init', { mDec: mDec });\r\n\t                                        }\r\n\t                                        catch (error) {\r\n\t                                            console.log(\"Error in number init. \" + scope.column.field);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        var arrDecimalSplits;\r\n\r\n\t                                        element.find('input').on('keydown', function (e) {\r\n\t                                            arrDecimalSplits = $(this).val().split('.');\r\n\r\n\t                                            if (arrDecimalSplits.length > 1) {\r\n\t                                                if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                                    e.preventDefault();\r\n\t                                                    return false;\r\n\t                                                }\r\n\t                                            }\r\n\t                                            else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                                e.preventDefault();\r\n\t                                                return false;\r\n\t                                            }\r\n\t                                        });\r\n\t                                    }\r\n\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        if (isRegionalSettingEnabled) {\r\n\t                                            try {\r\n\t                                                tmpVal = $(this).autoNumeric('get')*1;\r\n\t                                            }\r\n\t                                            catch (error) {\r\n\t                                                console.log(\"Error in number format. \" + scope.column.field);\r\n\t                                            }\r\n\t                                        }\r\n\t                                        else {\r\n\t                                            if (tmpVal == $(this).val()) {\r\n\t                                                return;\r\n\t                                            }\r\n\t                                            tmpVal = $(this).val();\r\n\t                                        }\r\n\r\n\t                                        if (scope.column.isRegUpdateCol) {\r\n\t                                            smartTableUtils.debounce.add(function () {\r\n\t                                                updateCell(scope.row.entity, scope.column.field, parseFloat(tmpVal));\r\n\t                                                //\tcell change listener\r\n\t                                                angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                                smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                            }, 250, false);\r\n\t                                        }\r\n\t                                    });\r\n\t                                });\r\n\t                                break;\r\n\r\n\t                            case 'autocomplete':\r\n\t                                var filterKeys = scope.column.attributes.filterkeys ? scope.column.attributes.filterkeys : ['title'];\r\n\t                                var optionFormat = scope.column.attributes.optionformat ? scope.column.attributes.optionformat : '{title}';\r\n\t                                var displayFormat = scope.column.attributes.displayformat ? scope.column.attributes.displayformat + '' : '{title}';\r\n\r\n\t                                setTimeout(function () {\r\n\t                                    var serviceObj = scope.column.attributes.serviceObj;\r\n\t                                    var tmpVal = oldCellValue;\r\n\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        if (angular.isDefined(tmpVal) && $(this).val().trim().length > 0 && tmpVal.trim() == $(this).val().trim()) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        tmpVal = $(this).val();\r\n\r\n\t                                        if ([37, 38, 39, 40].indexOf(e.keyCode) > -1) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        //\tcell change listener\r\n\t                                        angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal });\r\n\r\n\t                                        if (angular.isDefined(tmpVal) && tmpVal.trim().length == 0 && !scope.column.attributes.populateListOnFocus) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        smartTableUtils.debounce.add(function () {\r\n\t                                            if (serviceObj != undefined) {\r\n\t                                                var req = {\r\n\t                                                    method: serviceObj.method === \"POST\" ? \"POST\" : \"GET\",\r\n\t                                                    url: serviceObj.url,\r\n\t                                                    params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", tmpVal)),\r\n\t                                                    timeout: 120000,\r\n\t                                                    headers: {\r\n\t                                                        \"Content-Type\": \"application/json\",\r\n\t                                                        \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n\t                                                    }\r\n\t                                                };\r\n\t                                                if (req.method == \"POST\") {\r\n\t                                                    req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", tmpVal));\r\n\t                                                    delete req.params;\r\n\t                                                }\r\n\t                                                httpService.directhttp(req).then(function (response) {\r\n\t                                                    if (serviceObj.CallbackObj) {\r\n\t                                                        response = serviceObj.CallbackObj(response, scope.column.field)\r\n\t                                                    }\r\n\r\n\t                                                    var resp = [];\r\n\r\n\t                                                    if (typeof response === \"string\") {\r\n\t                                                        response = JSON.parse(response);\r\n\t                                                    }\r\n\r\n\t                                                    if (serviceObj.isFlatArray) {\r\n\t                                                        _.each(response, function (x, index) {\r\n\t                                                            var obj = {};\r\n\t                                                            obj[\"name\"] = x;\r\n\t                                                            obj[\"code\"] = x;\r\n\t                                                            resp.push(obj);\r\n\t                                                        });\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        _.each(response, function (obj) {\r\n\t                                                            var mapperObj = (serviceObj.isObjectArray) ? obj : {};\r\n\t                                                            _.each(serviceObj.mapper, function (mapper) {\r\n\t                                                                var mapperstri = '';\r\n\t                                                                if (angular.isArray(mapper['toBeMapped'])) {\r\n\t                                                                    var mapperkey = mapper.key;\r\n\t                                                                    _.each(mapper['toBeMapped'], function (res) {\r\n\t                                                                        if (mapperkey != undefined && mapperkey == 'email' && res == 'EmailAddress') {\r\n\t                                                                            mapperstri += \"</br>\" + obj[res] + \" \";\r\n\t                                                                        }\r\n\t                                                                        else {\r\n\t                                                                            mapperstri += obj[res] + \" \";\r\n\t                                                                        }\r\n\t                                                                    });\r\n\t                                                                    mapperstri.trim();\r\n\t                                                                }\r\n\t                                                                else {\r\n\t                                                                    mapperstri = obj[mapper['toBeMapped']];\r\n\t                                                                }\r\n\t                                                                mapperObj[mapper['key']] = mapperstri;\r\n\t                                                            });\r\n\t                                                            _.each(serviceObj.staticValues, function (item) {\r\n\t                                                                mapperObj[item['key']] = item['value'];\r\n\t                                                            });\r\n\t                                                            resp.push(mapperObj);\r\n\t                                                        });\r\n\t                                                    }\r\n\r\n\t                                                    if (element.find('input').devbridgeAutocomplete()) {\r\n\t                                                        element.find('input').devbridgeAutocomplete().setLookup(getFormattedData(resp, displayFormat));\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        element.find('input').devbridgeAutocomplete({\r\n\t                                                            filterKeys: filterKeys,\r\n\t                                                            optionFormat: optionFormat,\r\n\t                                                            displayFormat: displayFormat,\r\n\t                                                            lookup: getFormattedData(resp, displayFormat),\r\n\t                                                            width: scope.column.width,\r\n\t                                                            minChars: scope.column.attributes.populateListOnFocus ? 0 : 1,\r\n\t                                                            onSelect: function (suggestion) {\r\n\t                                                                selectedOption = suggestion;\r\n\t                                                                isRenderingToBeSkipped = true;\r\n\t                                                                element.find('input').devbridgeAutocomplete().setLookup([]);\r\n\t                                                                //\tOption select listener\r\n\t                                                                angular.isFunction(smartTableScope.listeners.optionSelect) && smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal, option: selectedOption });\r\n\t                                                                element.trigger('focus');\r\n\t                                                            }\r\n\t                                                        });\r\n\t                                                    }\r\n\r\n\t                                                    if (resp.length == 1 && scope.column.attributes.populateListOnFocus) {\r\n\t                                                        try {\r\n\t                                                            element.find('input').devbridgeAutocomplete().onSelect(0);\r\n\t                                                        }\r\n\t                                                        catch (e) { }\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        //\tOptions change listener\r\n\t                                                        angular.isFunction(smartTableScope.listeners.optionsChange) && smartTableScope.listeners.optionsChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal, options: response });\r\n\t                                                    }\r\n\r\n\t                                                }, function () {\r\n\t                                                });\r\n\t                                            }\r\n\t                                        }, 250, false);\r\n\t                                    });\r\n\r\n\t                                    if (scope.column.attributes.populateListOnFocus) {\r\n\t                                        var triggerKeyUpOnfocus = function () {\r\n\t                                            if (!isInputFieldFocused) {\r\n\t                                                var tmpEvent = $.Event(\"keyup\", {\r\n\t                                                    keyCode: 32\r\n\t                                                });\r\n\t                                                element.find('input').trigger(tmpEvent);\r\n\t                                                isInputFieldFocused = true;\r\n\t                                            }\r\n\t                                        };\r\n\r\n\t                                        element.find('input').on('click', function (e) {\r\n\t                                            triggerKeyUpOnfocus();\r\n\t                                        });\r\n\r\n\t                                        if (element.find('input:focus').length > 0) {\r\n\t                                            triggerKeyUpOnfocus();\r\n\t                                        }\r\n\t                                    }\r\n\t                                });\r\n\t                                break;\r\n\r\n\t                            case 'date':\r\n\t                                setTimeout(function () {\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        selectedDate = $(this).val();\r\n\t                                    });\r\n\r\n\t                                    element.find('input').daterangepicker({\r\n\t                                        singleDatePicker: true,\r\n\t                                        showDropdowns: true,\r\n\t                                        locale: {\r\n\t                                            format: scope.column.attributes.format ? (scope.column.attributes.format).toUpperCase() : 'MM/DD/YYYY'\r\n\t                                        },\r\n\t                                        minDate: scope.column.attributes.min ? scope.column.attributes.min : null,\r\n\t                                        maxDate: scope.column.attributes.max ? scope.column.attributes.max : null,\r\n\t                                        autoUpdateInput: false\r\n\t                                    }, function (startDate, endDate) {\r\n                                            updateDate(startDate);\r\n\t                                    }).on('apply.daterangepicker', function (e, picker) {\r\n                                            updateDate(picker.startDate);\r\n\t                                    });\r\n\t                                });\r\n\t                                break;\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'dropdown':\r\n\t                        if (angular.isFunction(smartTableScope.listeners.optionSelect)) {\r\n\t                            setTimeout(function () {\r\n\t                                element.find('select').on('change', function () {\r\n\t                                    for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                        if ($(this).val() == scope.column.attributes.options[i][scope.column.attributes.idKey] + '') {\r\n\t                                            // Options change listener\r\n\t                                            smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: scope.column.attributes.options[i] });\r\n\t                                            break;\r\n\t                                        }\r\n\t                                    }\r\n\t                                });\r\n\t                            });\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'taxesPopup':\t                        \r\n\t                        setTimeout(function () {\r\n\t                            var tmpVal;\r\n\t                            if (isRegionalSettingEnabled) {\r\n\t                                try {\r\n\t                                    element.find('input').attr('type', 'text');\r\n\t                                    element.find('input').autoNumeric('init');\r\n\t                                }\r\n\t                                catch (error) {\r\n\t                                    console.log(\"Error in number init. \" + scope.column.field);\r\n\t                                }\r\n\t                            }\r\n\t                            else if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                var arrDecimalSplits;\r\n\r\n\t                                element.find('input').on('keydown', function (e) {\r\n\t                                    arrDecimalSplits = $(this).val().split('.');\r\n\r\n\t                                    if (arrDecimalSplits.length > 1) {\r\n\t                                        if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                            e.preventDefault();\r\n\t                                            return false;\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                        e.preventDefault();\r\n\t                                        return false;\r\n\t                                    }\r\n\t                                });\r\n\t                            }\r\n\r\n\t                            element.find('input').on('keyup', function (e) {\r\n\t                                if (isRegionalSettingEnabled) {\r\n\t                                    try {\r\n\t                                        tmpVal = $(this).autoNumeric('get')*1;\r\n\t                                    }\r\n\t                                    catch (error) {\r\n\t                                        console.log(\"Error in number format. \" + scope.column.field);\r\n\t                                    }\r\n\t                                }\r\n\t                                else {\r\n\t                                    if (tmpVal == $(this).val()) {\r\n\t                                        return;\r\n\t                                    }\r\n\t                                    tmpVal = $(this).val();\r\n\t                                }\r\n\r\n\t                                if (scope.column.isRegUpdateCol) {\r\n\t                                    smartTableUtils.debounce.add(function () {\r\n\t                                        updateCell(scope.row.entity, scope.column.field, parseFloat(tmpVal));\r\n\t                                        //\tcell change listener\r\n\t                                        angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                        smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                    }, 250, false);\r\n\t                                }\r\n\t                            });\r\n\t                        });\r\n\t                        break;\r\n\t                }\r\n\r\n\t                smartTableScope.lastActiveCell = {\r\n\t                    rowIndex: scope.rowIndex,\r\n\t                    columnIndex: scope.columnIndex\r\n\t                };\r\n\r\n\t                isInEditMode = true;\r\n\t            };\r\n\r\n\r\n\t            element.on('focus', onFocus);\r\n\r\n\t            element.on('click', function (e) {\r\n\t                if (scope.column.uiType == 'popup' && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }) && scope.column.isRegClickCol) {\r\n\t                    smartTableUtils.debounce.add(function () {\r\n\t                        window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                        //\tcell click listener\r\n\t                        angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                    }, 100);\r\n\t                }\r\n\t            });\r\n\r\n\t            var onFocusCell = smartTableUtils.on('focusCell', function (e) {\r\n\t                if (e.rowIndex == scope.rowIndex && e.columnIndex == scope.columnIndex && e.smartTableId == smartTableScope.smartTableId) {\r\n\t                    element.trigger('focus');\r\n\t                }\r\n\t            });\r\n\r\n\t            var onRowDataChange = smartTableUtils.on('rowDataChange', function (e) {\r\n\t                if (e.rowIndex == scope.rowIndex && e.smartTableId == smartTableScope.smartTableId) {\r\n\t                    //\tskip updating the field since being already in edit mode\r\n\t                    if (!isInEditMode) {\r\n\t                        init(true, true);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\r\n\t            var onDataChange = smartTableUtils.on('dataChange', function (e) {\r\n\t                if (e.smartTableId == smartTableScope.smartTableId && e.updateCell) {\r\n\t                    init(true, true);\r\n\t                }\r\n\t            });\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                // console.log('smart-cell scope destroyed');\r\n\t                onCellDataAndColDefChange();\r\n\t                onFocusCell();\r\n\t                onRowDataChange();\r\n\t                onDataChange();\r\n\t                element.off('keydown', onElementKeyDown);\r\n\t            });\r\n\t        },\r\n\t        template: '<span class=\"smart-table-cell-text\"><span class=\"smart-table-cell-template\"></span></span>'\r\n\t    };\r\n\t}]);\r\n})();","(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartTreePopup', ['$timeout',\r\n\tfunction($timeout) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\tscope : {\r\n\t\t\t\theader : \"@\",\r\n\t\t\t\tisRadio : \"@\",\r\n\t\t\t\ttoggle : \"@\",\r\n\t\t\t\tpreselection : \"@\",\r\n\t\t\t\tonHide : \"&\",\r\n\t\t\t\tonSelect : \"&\",\r\n                disableLevelSelection : \"@\"\r\n\t\t\t},\r\n\t\t\tlink : function(scope, element, attrs) {\r\n\t\t\t    //watch treePopupToggle boolean to toggle popup\r\n\t\t\t    var isInitServiceCall = true;\r\n\t\t\t\tscope.$watch('toggle', function(value) {\r\n\t\t\t\t    scope.showPopupBool = scope.$eval(value);\r\n\t\t\t\t    if (scope.showPopupBool) {\r\n\t\t\t\t        scope.treeConfig.hideSearch = false;\r\n\t\t\t\t        if (isInitServiceCall) {\r\n\t\t\t\t            $timeout(function () {\r\n\t\t\t\t                scope.treeConfig.initServiceCall();\r\n\t\t\t\t            });\r\n\t\t\t\t            isInitServiceCall = false;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t//watch preselection\r\n\t\t\t\tscope.$watch('preselection', function(value) {\r\n\t\t\t\t\tscope.treeConfig.SelectedNodes = value;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//on-hide callback\r\n\t\t\t\tvar hideCallback = scope.$eval(scope.onHide);\r\n\t\t\t\t\r\n\t\t\t\t//on-select callback\r\n\t\t\t\tvar selectCalback = scope.$eval(scope.onSelect);\r\n\r\n\t\t\t\t//creating Tree Component Config\r\n\t\t\t\tscope.treeConfig = {\r\n\t\t\t\t\tIsRadio : scope.$eval(scope.isRadio),\r\n\t\t\t\t\ttype : \"Category\",\r\n\t\t\t\t\tSelectedNodes : \"\",\r\n\t\t\t\t\ttitle: scope.header,\r\n\t\t\t\t\tdisableLevelSelection: scope.disableLevelSelection,\r\n                    hideSearch : false\r\n\t\t\t\t};\r\n\t\t\t\tscope.onDoneCallback = function(e) {\r\n\t\t\t\t\tif (angular.isFunction(selectCalback)) {\r\n\t\t\t\t\t\tselectCalback(e);\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// view bindings\r\n\t\t\t\tscope.showPopupBool = false;\r\n\t\t\t\tscope.onPopupHideCallback = function() {\r\n\t\t\t\t    scope.showPopupBool = false;\r\n\t\t\t\t    scope.treeConfig.hideSearch = true;\r\n\t\t\t\t\tif (angular.isFunction(hideCallback)) {\r\n\t\t\t\t\t\thideCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/smartTree/smartTreePopup.html'\r\n\t\t};\r\n\t}]);\r\n\r\n\t/*******----smartTreeComponent Module----*******/\r\n\r\n\tangular.module('smartTreeComponent', []).directive('smartTreeComponent', ['$timeout', '$translate', 'RESTApiSt', '$q', 'APPCONSTANTS', 'Common',\r\n\tfunction ($timeout, $translate, RESTApiSt, $q, APPCONSTANTS, Common) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\treplace : true,\r\n\t\t\tscope : {\r\n\t\t\t\tconfig : '=',\r\n\t\t\t\tonDone : '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t    // ID's generation\r\n\t\t\t    scope.parentId = 'Parent_' + Common.uniqueIDGenerator();\r\n\t\t\t    scope.templateId = 'Template_' + Common.uniqueIDGenerator() + '.html';\r\n\r\n\r\n\t\t\t\t/*config for the directive*/\r\n\t\t\t    scope.config.initServiceCall = function () {\r\n\t\t\t        RESTApiSt.getData(scope.treeConfig.type, RESTApiStCallback, req);\r\n\t\t\t    }\r\n\t\t\t\tscope.treeConfig = scope.config;\r\n\t\t\t\tvar doneCallback = scope.$eval(scope.onDone);\r\n\t\t\t\tscope.$watch('config.SelectedNodes', function(n, o) {\r\n\t\t\t\t\tif (n) {\r\n\t\t\t\t\t\tpreselection = n.split(',');\r\n\t\t\t\t\t\tif (preselectionRecievedPromise)\r\n\t\t\t\t\t\t\tpreselectionRecievedPromise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.$watch('config.hideSearch', function (n, o) {\r\n\t\t\t\t    if (n && scope.searchFieldVal.length > 0) {\r\n\t\t\t\t        $timeout(function () {\r\n\t\t\t\t            angular.element('#closeButton').trigger('click');\r\n\t\t\t\t        });\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\t/*promise*/\r\n\t\t\t\tvar dataRecievedCallPromise;\r\n\t\t\t\tvar preselectionRecievedPromise;\r\n\t\t\t\tvar promises = [];\r\n\t\t\t\tinitializePromise(true, true);\r\n\r\n\t\t\t\t/*Local variables*/\r\n\t\t\t\tvar dataSet;\r\n\t\t\t\tvar searchBucket = 50;\r\n\t\t\t\tvar lazyLoadingBucket = 50;\r\n\t\t\t\tvar maxLevel;\r\n\t\t\t\tvar lazyLoadOffset;\r\n\t\t\t\tvar lazyLoadMarker = [];\r\n\t\t\t\tvar levelKey = 'level';\r\n\t\t\t\tvar levelWiseData = {};\r\n\t\t\t\tvar parentStringConstant = \"parentString\";\r\n\t\t\t\tvar parentCodeStringConstant = \"parentCodeString\";\r\n\t\t\t\tvar preselection;\r\n\t\t\t\tvar searchCategories = [];\r\n\t\t\t\tvar req;\r\n\r\n\t\t\t\tswitch(scope.treeConfig.type) {\r\n\t\t\t\tcase 'Category':\r\n\t\t\t\t\tscope.codeProperty = 'PASCode';\r\n\t\t\t\t\tscope.titleProperty = 'PASName';\r\n\t\t\t\t\tscope.levelProperty = 'PASLevel';\r\n\t\t\t\t\tscope.parentProperty = 'ParentPASCode';\r\n\t\t\t\t\t/*req = {\r\n\t\t\t\t\t    method: 'POST',\r\n\t\t\t\t\t    url: 'https://gepqcsmart-rest.servicebus.windows.net/PortalRestService/GetPASForDeviceMob',\r\n\t\t\t\t\t    headers: {\r\n\t\t\t\t\t        'Content-Type': 'application/json',\r\n\t\t\t\t\t        'UserExecutionContext': '{\"ClientName\":\"BuyerSqlConn\",\"ClientID\":2,\"BuyerPartnerCode\":6315,\"Product\":2,\"UserId\":\"28082\",\"EntityType\":\"supplier registration\",\"EntityId\":8888,\"LoggerCode\":\"EC101\",\"Culture\":\"en-US\",\"UserName\":\"RiteAid.Admin@gep.com\",\"CompanyName\":\"BuyerSqlConn\",\"ContactCode\":63150040000001}'\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t    data: {\r\n\t\t\t\t\t        \"ContactCode\": 63150040000001,\r\n\t\t\t\t\t        \"entityDetailCode\": 7,\r\n\t\t\t\t\t        \"entityId\": 1\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t};*/\r\n\t\t\t\t\treq = {\r\n\t\t\t\t\t    method: 'POST',\r\n\t\t\t\t\t    url: APPCONSTANTS.userPreferences.URLs.AppURL + 'PortalRestService/GetPASForDeviceMob?oloc=218',\r\n\t\t\t\t\t    headers: {\r\n\t\t\t\t\t        'Content-Type': 'application/json',\r\n\t\t\t\t\t        'UserExecutionContext': JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails),\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t    data: {\r\n\t\t\t\t\t        \"ContactCode\": APPCONSTANTS.userPreferences.UserBasicDetails.ContactCode,\r\n\t\t\t\t\t        \"entityDetailCode\": APPCONSTANTS.userPreferences.ACEntityId,\r\n\t\t\t\t\t        \"entityId\": APPCONSTANTS.userPreferences.UserBasicDetails.EntityId\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'Region':\r\n\t\t\t\t\tscope.codeProperty = 'RegionId';\r\n\t\t\t\t\tscope.titleProperty = 'RegionName';\r\n\t\t\t\t\tscope.levelProperty = 'RegionLevel';\r\n\t\t\t\t\tscope.parentProperty = 'RegionParentId';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tscope.isLoading = true;\r\n\t\t\t\tscope.selectedData = [];\r\n\t\t\t\tscope.isSingleSelect = scope.treeConfig.IsRadio;\r\n\t\t\t\tscope.msg = $translate.instant('loadingMsg');\r\n\r\n\t\t\t\t/*Local member fuctions*/\r\n\r\n\t\t\t\tfunction initializePromise(dataRievedPromiseBool, preselectionRecievedPromiseBool) {\r\n\t\t\t\t\tdataRecievedCallPromise = null;\r\n\t\t\t\t\tpreselectionRecievedPromise = null;\r\n\t\t\t\t\tpromises.length = 0;\r\n\t\t\t\t\tif (dataRievedPromiseBool) {\r\n\t\t\t\t\t\tdataRecievedCallPromise = $q.defer();\r\n\t\t\t\t\t\tpromises.push(dataRecievedCallPromise.promise);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (preselectionRecievedPromiseBool) {\r\n\t\t\t\t\t\tpreselectionRecievedPromise = $q.defer();\r\n\t\t\t\t\t\tpromises.push(preselectionRecievedPromise.promise);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$q.all(promises).then(promiseResolved);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction promiseResolved() {\r\n\t\t\t\t\tinitatePreSelection();\r\n\t\t\t\t\tinitializePromise(false, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction createLevelWiseDataSet() {\r\n\t\t\t\t\tvar level = 1;\r\n\t\t\t\t\tvar parentNodes = dataSet[level];\r\n\t\t\t\t\tinsertParentHierarchyForFlatStrucure(parentNodes);\r\n\t\t\t\t\twhile (parentNodes) {\r\n\t\t\t\t\t\tlevelWiseData[levelKey + level] = parentNodes;\r\n\t\t\t\t\t\tinsertParentHierarchyForFlatStrucure(parentNodes, level);\r\n\t\t\t\t\t\tmaxLevel = level;\r\n\t\t\t\t\t\tlevel = level + 1;\r\n\t\t\t\t\t\tparentNodes = dataSet[level];\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction insertParentHierarchyForFlatStrucure(parentNodes, level) {\r\n\t\t\t\t\tvar fetchedData = (level) ? _.groupBy(dataSet[level + 1], scope.parentProperty) : null;\r\n\t\t\t\t\t_.each(parentNodes, function(parent) {\r\n\t\t\t\t\t\tvar childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n\t\t\t\t\t\tif (childForParent) {\r\n\t\t\t\t\t\t\t_.each(childForParent, function(node, index) {\r\n\t\t\t\t\t\t\t\tnode[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n\t\t\t\t\t\t\t\tnode[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n\t\t\t\t\t\t\t\tnode['isExpanded'] = false;\r\n\t\t\t\t\t\t\t\tnode['selection'] = \"0\";\r\n\t\t\t\t\t\t\t\tnode['index'] = index;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction RESTApiStCallback(response) {\r\n\t\t\t\t    try{\r\n\t\t\t\t        dataSet = _.groupBy(JSON.parse(response.data.GetPASForDeviceMobResult), scope.levelProperty);\r\n\t\t\t\t        createLevelWiseDataSet();\r\n\t\t\t\t        scope.categories = levelWiseData[levelKey + '1'].slice(0, lazyLoadingBucket);\r\n\t\t\t\t        lazyLoadMarker.push(levelWiseData[levelKey+'1'][levelWiseData[levelKey + '1'].length - 1]);\r\n\t\t\t\t        scope.isLoading = false;\r\n\t\t\t\t    }catch(e){\r\n\t\t\t\t        scope.msg = $translate.instant('loadingDataErr');\r\n\t\t\t\t    }\r\n\t\t\t\t    dataRecievedCallPromise.resolve();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction resetSelectionState() {\r\n\t\t\t\t\t_.each(scope.selectedData, function(_node) {\r\n\t\t\t\t\t\tscope.selectNode(_node, '0');\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction initatePreSelection() {\r\n\t\t\t\t\tresetSelectionState();\r\n\t\t\t\t\t_.each(preselection, function(preselectionNode) {\r\n\t\t\t\t\t\tvar searchLevel = 1;\r\n\t\t\t\t\t\twhile (searchLevel <= maxLevel) {\r\n\t\t\t\t\t\t\tvar foundNode = _.groupBy(levelWiseData[levelKey + searchLevel],scope.codeProperty)[preselectionNode];\r\n\t\t\t\t\t\t\tif (foundNode) {\r\n\t\t\t\t\t\t\t\tscope.selectNode(foundNode[0], '1');\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsearchLevel = searchLevel + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction openSelectionTree() {\r\n\t\t\t\t\tvar partialSeletedNodes = _.filter(levelWiseData[levelKey + 0], function(node) {\r\n\t\t\t\t\t\treturn node.selection = '2';\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_.each(partialSeletedNodes, function(nodes) {\r\n\t\t\t\t\t\tvar level = nodes[scope.levelProperty];\r\n\t\t\t\t\t\t//var childs = _.\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction getChildsForParentAsPerBucket(parent, bucket, startIndex) {\r\n\t\t\t\t\tvar childSearchLevel = parent[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCodeStringIterator;\r\n\t\t\t\t\tvar result = _.groupBy(levelWiseData[levelKey+childSearchLevel],scope.parentProperty)[parent[scope.codeProperty]];\r\n\t\t\t\t\t//var bucketData = (bucket) ? result.slice(startIndex, startIndex + bucket) : result;\r\n\t\t\t\t\tvar bucketData = result;\r\n\t\t\t\t\treturn bucketData;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction lazyLoadLevelWiseData(markerNode) {\r\n\t\t\t\t\tvar parentSearchLevel = markerNode[scope.levelProperty] - 1;\r\n\t\t\t\t\tvar markerNodeParent = markerNode[scope.parentProperty];\r\n\t\t\t\t\tvar parent = _.find(levelWiseData[levelKey + parentSearchLevel], function(node) {\r\n\t\t\t\t\t\treturn node[scope.codeProperty] == markerNodeParent;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\tvar bucketChilds = getChildsForParentAsPerBucket(parent, lazyLoadingBucket, markerNode.index + 1);\r\n\t\t\t\t\t\tconsole.log('childs appended = ' + bucketChilds.length);\r\n\t\t\t\t\t\tif (bucketChilds.length > 0) {\r\n\t\t\t\t\t\t\tparent.children = parent.children.concat(bucketChilds);\r\n\t\t\t\t\t\t\tlazyLoadMarker.push(bucketChilds[bucketChilds.length - 1]);\r\n\t\t\t\t\t\t\tscope.$apply();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar searchString = \"\";\r\n\t\t\t\tvar searchLevel;\r\n\t\t\t\tvar searchDataYetToBeDisplayed = [];\r\n\t\t\t\tvar searchWithContainsHitResult = [];\r\n\t\t\t\tscope.searchResults = [];\r\n\t\t\t\tfunction searchAsPerBucketSize(searchStr, bucket) {\r\n\t\t\t\t\tif (searchString != searchStr) {\r\n\t\t\t\t\t\tsearchString = searchStr;\r\n\t\t\t\t\t\tsearchLevel = maxLevel;\r\n\t\t\t\t\t\tsearchDataYetToBeDisplayed.length = 0;\r\n\t\t\t\t\t\tsearchWithContainsHitResult.length = 0;\r\n\t\t\t\t\t\tscope.searchResults.length = 0;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar searchData = getDataAsPerBucketSize(searchStr, bucket);\r\n\t\t\t\t\tscope.searchResults = scope.searchResults.concat(searchData);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getOffsetSearchData(bucket) {\r\n\t\t\t\t\tvar partitionedData = _.partition(searchDataYetToBeDisplayed, function(data, index) {\r\n\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsearchDataYetToBeDisplayed = partitionedData[0];\r\n\t\t\t\t\treturn partitionedData[1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getOffsetSearchDataForContainsSearch(bucket) {\r\n\t\t\t\t\tvar partitionedData = _.partition(searchWithContainsHitResult, function(data, index) {\r\n\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsearchWithContainsHitResult = partitionedData[0];\r\n\t\t\t\t\treturn partitionedData[1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getDataAsPerBucketSize(searchStr, bucket) {\r\n\t\t\t\t\tvar bucketData = [];\r\n\t\t\t\t\twhile (bucketData.length < bucket && searchLevel > 0) {\r\n\t\t\t\t\t\tvar offsetSearchData = getOffsetSearchData(bucket);\r\n\t\t\t\t\t\tif (offsetSearchData.length == bucket) {\r\n\t\t\t\t\t\t\tbucketData = offsetSearchData;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar searchData = _.filter(levelWiseData[levelKey + searchLevel], function(node) {\r\n\t\t\t\t\t\t\treturn -1 != node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvar containsSarchResult = _.filter(levelWiseData[levelKey + searchLevel], function(node) {\r\n\t\t\t\t\t\t\treturn new RegExp(\"(\" + _.compact(searchString.split(' ')).join('|') + \")\", \"gi\").test(node[scope.titleProperty]) && -1 == node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsearchWithContainsHitResult = searchWithContainsHitResult.concat(containsSarchResult);\r\n\t\t\t\t\t\tvar qumulativeData = offsetSearchData.concat(searchData);\r\n\t\t\t\t\t\tvar partitionedData = _.partition(qumulativeData, function(data, index) {\r\n\t\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsearchDataYetToBeDisplayed = searchDataYetToBeDisplayed.concat(partitionedData[0]);\r\n\t\t\t\t\t\tbucketData = bucketData.concat(partitionedData[1]);\r\n\t\t\t\t\t\tsearchLevel = searchLevel - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (searchLevel == 0) {\r\n\t\t\t\t\t\twhile (bucketData.length < bucket) {\r\n\t\t\t\t\t\t\tvar containsSearchDataToBeAppended = getOffsetSearchDataForContainsSearch(bucket);\r\n\t\t\t\t\t\t\tif (containsSearchDataToBeAppended.length > 0) {\r\n\t\t\t\t\t\t\t\tbucketData = bucketData.concat(containsSearchDataToBeAppended);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn bucketData;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction closeChildsForParent(parent) {\r\n\t\t\t\t\tvar childs = _.filter(getChildsForParentAsPerBucket(parent), function(childNode) {\r\n\t\t\t\t\t\treturn childNode.isExpanded;\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_.each(childs, function(child) {\r\n\t\t\t\t\t\tchild.isExpanded = false;\r\n\t\t\t\t\t\tchild.children = [];\r\n\t\t\t\t\t\tcloseChildsForParent(child);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.searchText = '';\r\n\t\t\t\tscope.searchFieldVal = '';\r\n\r\n\t\t\t\tscope.expandNode = function(node, index) {\r\n\t\t\t\t\tnode.isExpanded = !node.isExpanded;\r\n\t\t\t\t\tif (node.isExpanded) {\r\n\t\t\t\t\t\tnode.children = getChildsForParentAsPerBucket(node, lazyLoadingBucket, 0);\r\n\t\t\t\t\t\tlazyLoadMarker.push(node.children[node.children.length - 1]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode.children = [];\r\n\t\t\t\t\t\tremoveMarkerForParent(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction removeMarkerForParent(parent) {\r\n\t\t\t\t\tvar childMarkers = _.filter(lazyLoadMarker, function(node, index) {\r\n\t\t\t\t\t\treturn -1 != node[parentCodeStringConstant].indexOf(parent[scope.codeProperty]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlazyLoadMarker = _.difference(lazyLoadMarker, childMarkers);\r\n\t\t\t\t\tcloseChildsForParent(parent);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar filterTextTimeout;\r\n\t\t\t\tscope.searchAndSelectNode = function(node) {\r\n\t\t\t\t\tif (filterTextTimeout)\r\n\t\t\t\t\t\t$timeout.cancel(filterTextTimeout);\r\n\t\t\t\t\tfilterTextTimeout = $timeout(function() {\r\n\t\t\t\t\t\tif (scope.searchFieldVal.length > 2)\r\n\t\t\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tsearchDataYetToBeDisplayed.length = 0;\r\n\t\t\t\t\t\t\tsearchWithContainsHitResult.length = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 300);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.selectNode = function(node, selectionState) {\r\n\t\t\t\t\tnode.selection = selectionState;\r\n\t\t\t\t\tif (scope.isSingleSelect) {\r\n\t\t\t\t\t    if (scope.selectedData && scope.selectedData[0] && scope.selectedData[0][scope.codeProperty] != node[scope.codeProperty]) {\r\n\t\t\t\t\t        scope.selectedData[0].selection = '0';\r\n\t\t\t\t\t    };\r\n\t\t\t\t\t    scope.selectedData = (selectionState == '0') ? [] : [node];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdateSelectionObject(node, selectionState);\r\n\t\t\t\t\t\tupdateChildsForNode(node, selectionState);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tupdateParentForNode(node, selectionState);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateSelectionObject(node, selectionState) {\r\n\t\t\t\t\tswitch(selectionState) {\r\n\t\t\t\t\tcase '0':\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '1':\r\n\t\t\t\t\t\tscope.selectedData.push(node);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateParentForNode(node, selectionState) {\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] - 1;\r\n\t\t\t\t\tvar immediateParentCode = node[scope.parentProperty].toString();\r\n\t\t\t\t\twhile (depthLevel > 0) {\r\n\t\t\t\t\t\tvar parent = _.find(levelWiseData[levelKey + depthLevel], function(node) {\r\n\t\t\t\t\t\t\treturn node[scope.codeProperty] == immediateParentCode;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\timmediateParentCode = parent[scope.parentProperty].toString();\r\n\t\t\t\t\t\tif (!parent['isExpanded']) {\r\n\t\t\t\t\t\t\tscope.expandNode(parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!scope.isSingleSelect) {\r\n\t\t\t\t\t\t\tparent.selection = getStateForNode(parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdepthLevel = depthLevel - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getStateForNode(node) {\r\n\t\t\t\t\tvar childCount = node.ChildCount;\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCode = node[scope.codeProperty];\r\n\t\t\t\t\tvar groupByData = _.groupBy(levelWiseData[levelKey + depthLevel], scope.parentProperty);\r\n\t\t\t\t\tvar selectedChild = _.filter(groupByData[parentCode], function(node) {\r\n\t\t\t\t\t\treturn node.selection == '1';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tvar partiallySelectedChild = _.filter(groupByData[parentCode], function(node) {\r\n\t\t\t\t\t\treturn node.selection == '2';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (childCount == selectedChild.length) {\r\n\t\t\t\t\t\tscope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData.push(node);\r\n\t\t\t\t\t\treturn \"1\";\r\n\t\t\t\t\t} else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\t\t\t\t\t\tscope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\treturn \"2\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tscope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\treturn \"0\";\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateChildsForNode(node, selectionState) {\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCode = node[scope.codeProperty].toString();\r\n\t\t\t\t\twhile (depthLevel <= maxLevel) {\r\n\t\t\t\t\t\tvar childs = _.filter(levelWiseData[levelKey + depthLevel], function(node) {\r\n\t\t\t\t\t\t\treturn -1 != node[parentCodeStringConstant].indexOf(parentCode);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t_.each(childs, function(child) {\r\n\t\t\t\t\t\t\tchild.selection = selectionState;\r\n\t\t\t\t\t\t\tif (selectionState == \"1\") {\r\n\t\t\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, child);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdepthLevel = depthLevel + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniqueIDGenerator = function() {\r\n\t\t\t\t\tvar d = new Date().getTime();\r\n\t\t\t\t\tvar uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function(c) {\r\n\t\t\t\t\t\tvar r = (d + Math.random() * 16) % 16 | 0;\r\n\t\t\t\t\t\td = Math.floor(d / 16);\r\n\t\t\t\t\t\treturn (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn uniqueID;\r\n\t\t\t\t};\r\n\t\t\t\tif (scope.isSingleSelect) {\r\n\t\t\t\t\tscope.uniqueRadioGroupName = uniqueIDGenerator();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*$timeout(function() {\r\n\t\t\t\t\tlazyLoadOffset = angular.element(\"#treeComponentContainer\")[0].getBoundingClientRect().bottom;\r\n\t\t\t\t\tangular.element('.scrollbar-outer').scrollbar({\r\n\t\t\t\t\t\tonScroll : function(y, x) {\r\n\t\t\t\t\t\t\tif (lazyLoadMarker.length > 0 && scope.searchFieldVal.length == 0) {\r\n\t\t\t\t\t\t\t\tvar markerNode = lazyLoadMarker[lazyLoadMarker.length - 1];\r\n\t\t\t\t\t\t\t\tif (angular.element(\"#\"+markerNode[scope.codeProperty])[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n\t\t\t\t\t\t\t\t\tconsole.log(markerNode);\r\n\t\t\t\t\t\t\t\t\tlazyLoadMarker.length = (lazyLoadMarker.length > 0) ? lazyLoadMarker.length - 1 : 0;\r\n\t\t\t\t\t\t\t\t\tlazyLoadLevelWiseData(markerNode);\r\n\t\t\t\t\t\t\t\t\tconsole.log(lazyLoadMarker.length);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (y.maxScroll > 0 && y.scroll == y.maxScroll && scope.searchFieldVal.length > 0) {\r\n\t\t\t\t\t\t\t\t$timeout(function() {\r\n\t\t\t\t\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});*/\r\n\t\t\t\t\r\n\t\t\t\tscope.scrollEnd = function(e){\r\n\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n\r\n\t\t\t\tscope.doneClickHandler = function() {\r\n\t\t\t\t\tif (angular.isFunction(doneCallback)) {\r\n\t\t\t\t\t\tdoneCallback(scope.selectedData);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tscope.focusSearch = false;\r\n\t\t\t\tscope.isActive = false;\r\n\t\t\t\tscope.showMe = false;\r\n\t\t\t\tscope.showSearch = function () {\r\n\t\t\t\t    scope.isActive = true;\r\n\t\t\t\t    scope.focusSearch = true;\r\n\t\t\t\t    scope.showMe = true;\r\n\t\t\t\t    scope.hideClose = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.hideSearch = function () {\r\n\t\t\t\t    scope.isActive = false;\r\n\t\t\t\t    scope.focusSearch = false;\r\n\t\t\t\t    scope.hideClose = false;\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/smartTree/smartTreeTemplate.html'\r\n\t\t};\r\n\t}]).directive('ngIndeterminate', function($compile) {\r\n\t\treturn {\r\n\t\t\trestrict : 'A',\r\n\t\t\tlink : function(scope, element, attributes) {\r\n\t\t\t\tscope.$watch(attributes['ngIndeterminate'], function(value) {\r\n\t\t\t\t\telement.prop('indeterminate', value);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}).directive('ngHighlightSt',['$compile', 'hilitor', function($compile, hilitor) {\r\n\t\treturn {\r\n\t\t\trestrict : 'A',\r\n\t\t\tlink : function(scope, element, attributes) {\r\n\t\t\t\tscope.$watch(attributes['ngHighlight'], function(value) {\r\n\t\t\t\t\thilitor.getHilitor().apply(value);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}]).service('RESTApiSt', ['$http',\r\n\tfunction($http) {\r\n\t\tvar Callback;\r\n\r\n\t\tthis.getData = function(mode, callback, requestObject) {\r\n\t\t\tswitch(mode) {\r\n\t\t\tcase 'Category':\r\n\t\t\t\tCallback = callback;\r\n\t\t\t\tserviceCall(requestObject);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction serviceCall(req) {\r\n\t\t\t$http(req).then(function(response) {\r\n\t\t\t\tCallback(response);\r\n\t\t\t}, function(error) {\r\n\t\t\t\tCallback(error);\r\n\t\t\t});\r\n\t\t};\r\n\t}]).service('hilitor', [\r\n\tfunction() {\r\n\t\tvar hilitor = new Hilitor(\"treeComponentContainer\");\r\n\t\tthis.getHilitor = function() {\r\n\t\t\treturn hilitor;\r\n\t\t};\r\n\t}]);\r\n\r\n})(angular);\r\n","angular.module('SMART2').directive('stickOnScroll', function ($window, $compile) {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            setTop: '@',\r\n            setZindex: '@',\r\n            onScroll:'&',\r\n            setLeft:\"@\",\r\n            setRight:\"@\",\r\n        },\r\n        link: function (scope, elem, attrs) {\r\n\r\n\r\n            if (scope.setTop == '' || scope.setTop == undefined) {\r\n                scope.setTop = '0'\r\n            }\r\n            if (scope.setLeft == '' || scope.setLeft == undefined) {\r\n                scope.setLeft = '0'\r\n            }\r\n            if (scope.setRight == '' || scope.setRight == undefined) {\r\n                scope.setRight = '0'\r\n            }\r\n\r\n            if (scope.setZindex == '' || scope.setZindex == undefined) {\r\n                scope.setZindex = '1'\r\n            }\r\n            \r\n\r\n            var template = '<div id=\"fixedtoHeaderheight_' + scope.$id + '\" style=\"display:none\"></div>';\r\n            attrs.$observe('stickOnScroll', function (value) {\r\n                if (value == \"true\") {\r\n                    var newElement = $compile(template)(scope);\r\n                    elem.after(newElement);\r\n                    var scrollTop = elem.offset().top;\r\n                    angular.element($window).bind('scroll', function () {\r\n                        var elemHeight = elem.outerHeight(),\r\n                            winScrollTop = angular.element($window).scrollTop();\r\n\r\n                        if (winScrollTop >= scrollTop) {\r\n                            if (attrs.stickLimit != undefined) {\r\n                                var el = $(attrs.stickLimit),\r\n                                    config = {\r\n                                        top: el.offset().top,\r\n                                        height: el.outerHeight()\r\n                                    };\r\n                                if ((winScrollTop + elem.outerHeight()) > (config.top + config.height)) {\r\n                                    elem.removeClass('is-fixed-on-top').css({ 'top': \"\", \"left\": \"\", \"right\": \"\", 'z-index': \"\" });\r\n                                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                                } else {\r\n                                    elem.addClass('is-fixed-on-top ' + attrs.applyClassOnFixed).css({ 'top': scope.setTop, 'left': scope.setLeft, 'right': scope.setRight, 'z-index': scope.setZindex });\r\n                                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': elemHeight, 'display': 'block' });\r\n                                }\r\n                            } else {\r\n                                elem.addClass('is-fixed-on-top ' + attrs.applyClassOnFixed).css({ 'top': scope.setTop, 'left': scope.setLeft, 'right': scope.setRight, 'z-index': scope.setZindex });\r\n                                angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': elemHeight, 'display': 'block' });\r\n                            }\r\n                        } else {\r\n                            elem.removeClass('is-fixed-on-top').css({ 'top': \"\", \"left\": \"\", \"right\":\"\", 'z-index': \"\" });\r\n                            angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                        }\r\n\r\n                        scope.onScroll();\r\n                    });\r\n                }\r\n                else {\r\n                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                    elem.next('#fixedtoHeaderheight_' + scope.$id).remove();\r\n                    elem.removeClass('is-fixed-on-top').css({ 'top': \"\",   \"left\": \"\", \"right\":\"\",'z-index': \"\" });\r\n                    \r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n});\r\n\r\n","(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n.directive('customTab', [function () {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attrs) {\r\n            var tabbingOnKeyDown = function (e) {\r\n                var $this = $(this),\r\n                    tabType = angular.isDefined(attrs.tabType);\r\n                if (e.keyCode == 38 && !tabType && ($this.prev().length > 0) || e.keyCode == 37 && tabType && ($this.prev().length > 0)) {\r\n                    $this.prev().focus();\r\n                    e.preventDefault();\r\n                }\r\n                else if (e.keyCode == 40 && !tabType && ($this.next().length > 0) || e.keyCode == 39 && tabType && ($this.next().length > 0)) {\r\n                    $this.next().focus();\r\n                    e.preventDefault();\r\n                }\r\n               else if (e.keyCode == 13) {\r\n                   $this.trigger(\"click\");\r\n                   e.preventDefault();\r\n               }\r\n                \r\n            };\r\n            elem.bind(\"keydown\", tabbingOnKeyDown);\r\n            scope.$on('$destroy', function () {\r\n                elem.unbind(\"keydown\", tabbingOnKeyDown);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n})();","(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n  .directive('focusonkeypress', ['$focusOnField', function ($focusOnField) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attr) {\r\n            var prevFocus;\r\n            var bindKeyEventFunction = function (e) {\r\n                var focusInfunc = function () {\r\n                    if (!elem.hasClass(\"focused\")) {\r\n                        prevFocus = document.activeElement;\r\n                        elem.addClass(\"focused\");\r\n                        var firstFieldFocus = elem.find(\"a, input, textarea, [tabindex]\").first();\r\n                        $focusOnField(firstFieldFocus);\r\n                    }\r\n                },\r\n                focusOutfunc = function () {\r\n                    if (elem.hasClass(\"focused\")) {\r\n                        $focusOnField(prevFocus);\r\n                        prevFocus = ''\r\n                        elem.removeClass(\"focused\");\r\n\r\n                    }\r\n                };\r\n\r\n                if (attr.altkey && attr.altkey != 'false') {\r\n                    if (attr.focusin && e.key == attr.focusin && e.altKey == true) {\r\n                        focusInfunc();\r\n                    } else if (attr.focusout && e.key == attr.focusout && e.altKey == true) {\r\n                        focusOutfunc();\r\n                    };\r\n                }\r\n                else {\r\n                    if (attr.focusin && e.key == attr.focusin) {\r\n                        focusInfunc();\r\n                    } else if (attr.focusout && e.key == attr.focusout) {\r\n                        focusOutfunc();\r\n                    };\r\n                };\r\n\r\n            };\r\n            $(document).bind(\"keydown\", bindKeyEventFunction);\r\n          scope.$on('$destroy', function () {\r\n                $(document).unbind(\"keydown\", bindKeyEventFunction);\r\n            });\r\n        }\r\n    }\r\n  }]);\r\n})();","(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n  .directive('a', function () {\r\n      return {\r\n          restrict : 'E',\r\n          link: function (scope, elem, attr) {\r\n              var checkAttr = attr.href,\r\n                  svgIcon = elem.find('svg');\r\n                  \r\n              if(svgIcon){\r\n                  svgIcon.attr(\"focusable\",\"false\");// ie 11 not supported for this\r\n              }  \r\n              if(checkAttr == undefined){\r\n                  attr.$set(\"href\",\"\");\r\n              }\r\n          }\r\n      }\r\n  })\r\n.directive('menuItemList', ['menuListItemServ', function (menuListItemServ) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attr) {\r\n            menuListItemServ(elem);\r\n        }\r\n    }\r\n}])\r\n.directive('extraNavTitle', [function () {\r\n    return {\r\n        restrict: 'C',\r\n        link: function (scope, element, attrs) {\r\n            var firstField = element.find(\"a, input, button, textarea, [tabindex]\").not(\":disabled, :hidden, [tabindex = -1]\").first();\r\n            firstField.focus();\r\n        }\r\n    }\r\n\r\n}]);\r\n})();","(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n.directive('tabbingGroup', ['$focusOnField', function ($focusOnField) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attrs) {\r\n            elem.bind(\"keydown\", function (e) {\r\n                if (e.which == 9) {\r\n                    var focusableEle = \"a, input[type=text],input[type=radio]:checked,input[type=checkbox], button, textarea, [tabindex='0']\",\r\n                        avoidFocusableEle = \":disabled, :hidden, [tabindex=-1]\",\r\n                        $firstField = elem.find(focusableEle).not(avoidFocusableEle).first(),\r\n                        $lastField = elem.find(focusableEle).not(avoidFocusableEle).last();\r\n                    if (e.target == $firstField.get(0) && e.shiftKey) {\r\n                        e.preventDefault();\r\n                        $focusOnField($lastField);\r\n                    } else if (e.target == $lastField.get(0) && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        $focusOnField($firstField);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n}]);\r\n})();","(function () {\r\nangular.module(\"SMART2\").directive(\"searchableCube\", [function () {\r\n        \"use strict\";\r\n        return {\r\n            restrict: 'E',\r\n            transclude: true,\r\n            scope: {\r\n                cubeletList: '=?',\r\n                enableProceed: '&',\r\n                selectedCube: '=?',\r\n                formatKey: '@'\r\n            },\r\n            link: function (scope, $element, attrs) {\r\n                scope.proceed = false;\r\n\r\n                var enableProceed = scope.$eval(scope.enableProceed);\r\n                scope.options = JSON.parse(JSON.stringify(scope.cubeletList));\r\n\r\n                scope.selectedCube = scope.selectedCube || {};\r\n\r\n                var container,\r\n                    camera, scene, renderer,\r\n                    canvasMouseMove = false,\r\n                    mouse = new THREE.Vector2(),\r\n                    INTERSECTED, previousInt,\r\n                    group = new THREE.Group(),\r\n\r\n                    // mouseRotation vars\r\n                    mouseDown = false,\r\n                    mousemoved = false,\r\n                    startPosition = { x: 0, y: 0, z: 0 },\r\n                    rotateStartPoint = new THREE.Vector3(0, 0, 1),\r\n                    rotateEndPoint = new THREE.Vector3(0, 0, 1),\r\n                    curQuaternion,\r\n                    animationComplete = true,\r\n                    windowHalfX = window.innerWidth / 2,\r\n                    windowHalfY = window.innerHeight / 2,\r\n                    rotationSpeed = 2,\r\n                    lastMoveTimestamp,\r\n                    moveReleaseTimeDelta = 50,\r\n                    selectedCublet,\r\n                    startPoint = {\r\n                        x: 0,\r\n                        y: 0\r\n                    },\r\n                    deltaX = 0,\r\n                    deltaY = 0;\r\n                // mouseRotation vars End\r\n\r\n\r\n\r\n                init();\r\n                animate();\r\n\r\n                function init() {\r\n                    container = $element[0];\r\n\r\n                    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);\r\n                    camera.position.set(-360, 440, 700);\r\n\r\n                    scene = new THREE.Scene();\r\n                    //scene.background = new THREE.Color(0x0067b0);\r\n\r\n                    camera.lookAt(scene.position);\r\n\r\n                    scene.add(new THREE.AmbientLight(0x505050));\r\n\r\n                    var light = new THREE.SpotLight(0xffffff, 1.25);\r\n                    light.position.set(-650, 650, 650);\r\n                    // light.rotation.set(  37.32 * Math.PI/180,    -16.45* Math.PI/180,    204.184* Math.PI/180);\r\n                    light.castShadow = true;\r\n\r\n                    light.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(70, 1, 100, 10000));\r\n                    light.shadow.bias = 0.00001;\r\n\r\n                    light.shadow.mapSize.width = 4096;\r\n                    light.shadow.mapSize.height = 4096;\r\n\r\n                    scene.add(light);\r\n\r\n                    var cubletWidth = 90,\r\n                        cubeSeparation = 20,\r\n                        geometry,\r\n                        generateThreeByThree,\r\n                        generateTwoByTwo;\r\n\r\n                    var positionsArrayThreeByThree = [\r\n                            [-1, 1, 1],\r\n                            [-1, 0, 1],\r\n                            [-1, -1, 1],\r\n                            [0, 1, 1],\r\n                            [0, 0, 1],\r\n                            [0, -1, 1],\r\n                            [1, 1, 1],\r\n                            [1, 0, 1],\r\n                            [1, -1, 1],\r\n                            [1, 1, 0],\r\n                            [1, 0, 0],\r\n                            [1, -1, 0],\r\n                            [1, 1, -1],\r\n                            [1, 0, -1],\r\n                            [1, -1, -1],\r\n                            [0, 1, -1],\r\n                            [0, 0, -1],\r\n                            [0, -1, -1],\r\n                            [-1, 1, -1],\r\n                            [-1, 0, -1],\r\n                            [-1, -1, -1],\r\n                            [-1, 1, 0],\r\n                            [-1, 0, 0],\r\n                            [-1, -1, 0],\r\n                            [0, 1, 0],\r\n                            [0, -1, 0],\r\n                            [0, 0, 0]\r\n                        ],\r\n                        positionsArrayTwoByTwo = [\r\n                            [-1, 1, 1],\r\n                            [-1, -1, 1],\r\n                            [1, 1, 1],\r\n                            [1, -1, 1],\r\n                            [1, 1, -1],\r\n                            [1, -1, -1],\r\n                            [-1, 1, -1],\r\n                            [-1, -1, -1]\r\n                        ];\r\n\r\n\r\n                    generateThreeByThree = function () {\r\n                        geometry = new THREE.BoxGeometry(cubletWidth, cubletWidth, cubletWidth);\r\n                        var object;\r\n                        for (var i = 0; i < 27; i++) {\r\n                            if (i < scope.options.length) {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: \"#6fc2fb\" }));\r\n                            } else {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\r\n                                    color: 0xffffff,\r\n                                    transparent: true,\r\n                                    opacity: 0.7\r\n                                }));\r\n                            }\r\n                            object.position.x = positionsArrayThreeByThree[i][0] * (cubletWidth + cubeSeparation);\r\n                            object.position.y = positionsArrayThreeByThree[i][1] * (cubletWidth + cubeSeparation);\r\n                            object.position.z = positionsArrayThreeByThree[i][2] * (cubletWidth + cubeSeparation);\r\n\r\n                            object.scale.x = 1;\r\n                            object.scale.y = 1;\r\n                            object.scale.z = 1;\r\n\r\n                            \r\n                            object.dataID = i + 1;\r\n                            if (i < scope.options.length) {\r\n                                object.castShadow = true;\r\n                                object.receiveShadow = true;\r\n                                object.name = scope.options[i][scope.formatKey];\r\n                                object.disable = false;\r\n                            } else {\r\n                                object.disable = true;\r\n                            }\r\n\r\n                            group.add(object);\r\n                        }\r\n                    };\r\n\r\n                    generateTwoByTwo = function () {\r\n                        geometry = new THREE.BoxGeometry(cubletWidth + 45, cubletWidth + 45, cubletWidth + 45);\r\n                        var object;\r\n                        for (var i = 0; i < 8; i++) {\r\n                            if (i < scope.options.length) {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: \"#6fc2fb\" }));\r\n                            } else {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\r\n                                    color: 0xffffff,\r\n                                    transparent: true,\r\n                                    opacity: 0.7\r\n                                }));\r\n                            }\r\n\r\n                            object.position.x = positionsArrayTwoByTwo[i][0] * (cubletWidth + cubeSeparation + 45) / 2;\r\n                            object.position.y = positionsArrayTwoByTwo[i][1] * (cubletWidth + cubeSeparation + 45) / 2;\r\n                            object.position.z = positionsArrayTwoByTwo[i][2] * (cubletWidth + cubeSeparation + 45) / 2;\r\n\r\n                            object.scale.x = 1;\r\n                            object.scale.y = 1;\r\n                            object.scale.z = 1;\r\n                            object.dataID = i + 1;\r\n                            \r\n                            if (i < scope.options.length) {\r\n                                object.name = scope.options[i][scope.formatKey];\r\n                                object.castShadow = true;\r\n                                object.receiveShadow = true;\r\n                                object.disable = false;\r\n                            } else {\r\n                                object.disable = true;\r\n                            }\r\n\r\n                            group.add(object);\r\n                        }\r\n                    };\r\n                    \r\n\r\n                    if (scope.options.length > 8) {\r\n                        generateThreeByThree();\r\n                    } else {\r\n                        generateTwoByTwo();\r\n                    }\r\n\r\n                    scene.add(group);\r\n\r\n                    renderer = new THREE.WebGLRenderer({\r\n                            alpha: true,\r\n                            antialias: true\r\n                    });\r\n                    renderer.setPixelRatio(window.devicePixelRatio);\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n                    renderer.shadowMap.enabled = true;\r\n                    renderer.shadowMap.type = THREE.PCFShadowMap;\r\n                    renderer.shadowMap.soft = true;\r\n\r\n                    container.appendChild(renderer.domElement);\r\n                    container.addEventListener('mousemove', onMouseMove);\r\n\r\n                    // window.addEventListener('resize', onWindowResize, false);\r\n                    container.addEventListener('mousedown', onDocumentMouseDown, true);\r\n                    window.addEventListener('resize', onWindowResize, false);\r\n                }\r\n\r\n                // keyhandler\r\n                container.addEventListener('keydown', keyPressed);\r\n\r\n                function keyPressed(e) {\r\n                    switch (e.keyCode) {\r\n                        case 38:\r\n                            scope.handleRotation(\"top\");\r\n                            break;\r\n                        case 40:\r\n                            scope.handleRotation(\"bottom\");\r\n                            break;\r\n                        case 37:\r\n                            scope.handleRotation(\"left\");\r\n                            break;\r\n                        case 39:\r\n                            scope.handleRotation(\"right\");\r\n                            break;\r\n                    }\r\n                };\r\n                \r\n\r\n                //$element.find(\".searchElement\").on('click', function (event) {\r\n                //    event.stopPropagation();\r\n                //});\r\n                   \r\n                \r\n                //$element.find(\".navBtn\").on('click', function(event) {\r\n                //    scope.handleRotation(this.id);\r\n                //});\r\n\r\n                scope.handleRotation = function(btnType) {\r\n                    if (!animationComplete) {\r\n                        return;\r\n                    }\r\n                    switch (btnType) {\r\n                        case \"top\":\r\n                            animateRotation(1, 0, 0);\r\n                            break;\r\n                        case \"bottom\":\r\n                            animateRotation(-1, 0, 0);\r\n                            break;\r\n                        case \"left\":\r\n                            animateRotation(0, 1, 0);\r\n                            break;\r\n                        case \"right\":\r\n                            animateRotation(0, -1, 0);\r\n                            break;\r\n                    }\r\n                };\r\n\r\n                scope.routeToReport = function () {\r\n                    location.href = \"index_reports.html#/analytics/new\";\r\n                }\r\n\r\n                scope.searchElementByValue = function () {\r\n                    var value = $element.find(\".searchElement input\").val().toLowerCase();\r\n                    var index = _.findIndex(this.cubeletList, { name: value.charAt(0).toUpperCase() + value.slice(1) });\r\n                    if (index !== -1) {\r\n                        scope.selectedCube.select = this.cubeletList[index];\r\n                        scope.searchElement(scope.selectedCube.select.id);\r\n                    }\r\n                }\r\n                \r\n\r\n                function animateRotation(xDirection, yDirection, zDirection) {\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: Math.PI / 2 },\r\n                        tween = new TWEEN.Tween(position).to(target, 1000),\r\n                        prePositon = { x: 0, y: 0 },\r\n                        X = 0,\r\n                        Y = 0,\r\n                        Z = 0;\r\n\r\n                    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.y - prePositon.y;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        } else {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        var deltaRotationQuaternion = new THREE.Quaternion()\r\n                            .setFromEuler(new THREE.Euler(X,\r\n                                Y,\r\n                                Z,\r\n                                'XYZ'\r\n                            ));\r\n                        group.quaternion.multiplyQuaternions(deltaRotationQuaternion, group.quaternion);\r\n                        prePositon.y = position.y;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                // keyhandler end\r\n\r\n\r\n                function onWindowResize() {\r\n                    camera.aspect = window.innerWidth / window.innerHeight;\r\n                    camera.updateProjectionMatrix();\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n                };\r\n\r\n                function animate() {\r\n                    requestAnimationFrame(animate);\r\n                    render();\r\n                    update();\r\n                    TWEEN.update();\r\n                };\r\n\r\n                // animationLogic\r\n                function onDocumentMouseDown(event) {\r\n                    if (!animationComplete || event.target != $element.find('.mainScreen')[0]) {\r\n                        return;\r\n                    }\r\n                    //event.preventDefault();\r\n                    container.addEventListener('mousemove', onDocumentMouseMove, false);\r\n                    container.addEventListener('mouseup', onDocumentMouseUp, false);\r\n\r\n                    mouseDown = true;\r\n\r\n                    startPoint = {\r\n                        x: event.clientX,\r\n                        y: event.clientY\r\n                    };\r\n\r\n                    rotateStartPoint = rotateEndPoint = projectOnTrackball(0, 0);\r\n                };\r\n\r\n                function onMouseMove(e) {\r\n                    canvasMouseMove = true;\r\n                    event.preventDefault();\r\n                    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n                    mouse.clientX = event.clientX;\r\n                    mouse.clientY = event.clientY;\r\n                };\r\n\r\n                function onDocumentMouseMove(event) {\r\n                    mousemoved = true;\r\n\r\n                    deltaX = event.x - startPoint.x;\r\n                    deltaY = event.y - startPoint.y;\r\n\r\n                    handleRotationMouse();\r\n\r\n                    startPoint.x = event.x;\r\n                    startPoint.y = event.y;\r\n\r\n                    lastMoveTimestamp = new Date();\r\n                };\r\n\r\n                function onDocumentMouseUp(event) {\r\n                    highlightCublet(previousInt);\r\n                    if (new Date().getTime() - (lastMoveTimestamp ? lastMoveTimestamp.getTime() : 0) > moveReleaseTimeDelta) {\r\n                        deltaX = event.x - startPoint.x;\r\n                        deltaY = event.y - startPoint.y;\r\n                    }\r\n\r\n                    mouseDown = false;\r\n\r\n                    container.removeEventListener('mousemove', onDocumentMouseMove, false);\r\n                    container.removeEventListener('mouseup', onDocumentMouseUp, false);\r\n                    if (mousemoved && animationComplete) {\r\n                        // resetCube();\r\n                    }\r\n                    mousemoved = false;\r\n\r\n\r\n                    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\r\n                    vector.unproject(camera);\r\n                    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n\r\n                    // create an array containing all objects in the scene with which the ray intersects\r\n                    var intersects = ray.intersectObjects(scene.children[2].children);\r\n\r\n                    // if there is one (or more) intersections\r\n                    if (intersects.length > 0 && (selectedCublet == void 0 || intersects[0].object.name != selectedCublet.name)) {\r\n                        popInCube(INTERSECTED);\r\n                        popOutCube(INTERSECTED);\r\n                        //console.log(\"route to: \" + intersects[0].object.name);\r\n                        \r\n                    }\r\n                };\r\n\r\n\r\n                function projectOnTrackball(touchX, touchY) {\r\n                    var mouseOnBall = new THREE.Vector3();\r\n\r\n                    mouseOnBall.set(\r\n                        clamp(touchX / windowHalfX, -1, 1), clamp(-touchY / windowHalfY, -1, 1),\r\n                        0.0\r\n                    );\r\n\r\n                    var length = mouseOnBall.length();\r\n\r\n                    if (length > 1.0) {\r\n                        mouseOnBall.normalize();\r\n                    } else {\r\n                        mouseOnBall.z = Math.sqrt(1.0 - length * length);\r\n                    }\r\n\r\n                    return mouseOnBall;\r\n                };\r\n\r\n                function rotateMatrix(rotateStart, rotateEnd) {\r\n                    var axis = new THREE.Vector3(),\r\n                        quaternion = new THREE.Quaternion(),\r\n                        angle;\r\n\r\n                    angle = Math.acos(rotateStart.dot(rotateEnd) / rotateStart.length() / rotateEnd.length());\r\n\r\n                    if (angle) {\r\n                        axis.crossVectors(rotateStart, rotateEnd).normalize();\r\n                        angle *= rotationSpeed;\r\n                        quaternion.setFromAxisAngle(axis, angle);\r\n                    }\r\n                    return quaternion;\r\n                };\r\n\r\n                function clamp(value, min, max) {\r\n                    return Math.min(Math.max(value, min), max);\r\n                };\r\n                // animationLogicEnds\r\n\r\n\r\n                function render() {\r\n                    TWEEN.update();\r\n                    if (!mouseDown) {\r\n                        var drag = 0.95,\r\n                            minDelta = 0.05;\r\n\r\n                        if (deltaX < -minDelta || deltaX > minDelta) {\r\n                            deltaX *= drag;\r\n                        } else {\r\n                            deltaX = 0;\r\n                        }\r\n\r\n                        if (deltaY < -minDelta || deltaY > minDelta) {\r\n                            deltaY *= drag;\r\n                        } else {\r\n                            deltaY = 0;\r\n                        }\r\n\r\n                        // handleRotationMouse();\r\n                    }\r\n                    renderer.render(scene, camera);\r\n                };\r\n\r\n\r\n                var handleRotationMouse = function() {\r\n                    rotateEndPoint = projectOnTrackball(deltaX, deltaY, -1 * deltaX);\r\n                    var rotateQuaternion = rotateMatrix(rotateStartPoint, rotateEndPoint);\r\n                    curQuaternion = group.quaternion;\r\n                    curQuaternion.multiplyQuaternions(rotateQuaternion, curQuaternion);\r\n                    curQuaternion.normalize();\r\n                    group.setRotationFromQuaternion(curQuaternion);\r\n                    rotateEndPoint = rotateStartPoint;\r\n                };\r\n\r\n                function resetCube() {\r\n                    var position = group.rotation;\r\n                    animateResetRotation(Math.sign(position.x), Math.sign(position.y), Math.sign(position.z), group.rotation.x, group.rotation.y, group.rotation.z);\r\n                    group.updateMatrix();\r\n                };\r\n\r\n                function animateResetRotation(xDirection, yDirection, zDirection, anglex, angley, anglez) {\r\n                    var PI = Math.PI,\r\n                        position = { x: anglex, y: angley, z: anglez },\r\n                        nearesrXGap = Math.abs(anglex % (PI / 2)) > PI / 4 ? anglex + xDirection * (PI / 2 - Math.abs(anglex % (PI / 2))) : anglex - anglex % (PI / 2),\r\n                        nearesrYGap = Math.abs(angley % (PI / 2)) > PI / 4 ? angley + yDirection * (PI / 2 - Math.abs(angley % (PI / 2))) : angley - angley % (PI / 2),\r\n                        nearesrZGap = Math.abs(anglez % (PI / 2)) > PI / 4 ? anglez + zDirection * (PI / 2 - Math.abs(anglez % (PI / 2))) : anglez - anglez % (PI / 2),\r\n                        target = { x: nearesrXGap, y: nearesrYGap, z: nearesrZGap },\r\n                        tween = new TWEEN.Tween(position).to(target, 200),\r\n                        prePositon = { x: anglex, y: anglex, z: anglez },\r\n                        X, Y, Z;\r\n\r\n                    // tween.easing(TWEEN.Easing.Linear.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.x - prePositon.x;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        }\r\n                        if (yDirection) {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n                        if (zDirection) {\r\n                            Z = position.z - prePositon.z;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        group.rotation.x = position.x;\r\n                        group.rotation.y = position.y;\r\n                        group.rotation.z = position.z;\r\n                        prePositon.x = position.x;\r\n                        prePositon.y = position.y;\r\n                        prePositon.z = position.z;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                //$element.find(\"#search-cublet\").on(\"click\", function (e) {\r\n                //     searchElement();\r\n                //});\r\n\r\n                scope.searchElement = function (requestedID) {\r\n                    if (scope.options.length > 8) {\r\n                        switch (requestedID) {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                            case 9:\r\n                                animateFindElementRotation(0, 0, 0, 0, 0, 0, requestedID);\r\n                                break;\r\n                            case 16:\r\n                            case 17:\r\n                            case 18:\r\n                            case 19:\r\n                            case 20:\r\n                            case 21:\r\n                                animateFindElementRotation(1, 0, 1, Math.PI, 0, Math.PI, requestedID);\r\n                                break;\r\n                            case 22:\r\n                            case 23:\r\n                            case 24:\r\n                                animateFindElementRotation(0, 1, 0, 0, Math.PI / 2, 0, requestedID);\r\n                                break;\r\n                            case 10:\r\n                            case 11:\r\n                            case 12:\r\n                            case 13:\r\n                            case 14:\r\n                            case 15:\r\n                                animateFindElementRotation(0, -1, 0, 0, -Math.PI / 2, 0, requestedID);\r\n                                break;\r\n                            case 25:\r\n                                animateFindElementRotation(1, 0, 0, Math.PI / 2, 0, 0, requestedID);\r\n                                break;\r\n                            case 26:\r\n                                animateFindElementRotation(-1, 0, 0, -Math.PI / 2, 0, 0, requestedID);\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        switch (requestedID) {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                                animateFindElementRotation(0, 0, 0, 0, 0, 0, requestedID);\r\n                                break;\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                                animateFindElementRotation(1, 0, 1, Math.PI, 0, Math.PI, requestedID);\r\n                                break;\r\n                        }\r\n                    }\r\n                    \r\n                };\r\n\r\n                function animateFindElementRotation(xDirection, yDirection, zDirection, anglex, angley, anglez, requestedID) {\r\n                    var INTERSECTED = scene.children[2].children[parseInt(requestedID) - 1],\r\n                        currentAngles = group.rotation,\r\n                        PI = Math.PI,\r\n                        position = { x: currentAngles.x, y: currentAngles.y, z: currentAngles.z },\r\n                        target = { x: anglex, y: angley, z: anglez },\r\n                        tween = new TWEEN.Tween(position).to(target, 200),\r\n                        prePositon = { x: anglex, y: anglex, z: anglez },\r\n                        X, Y, Z;\r\n\r\n                    highlightCublet(previousInt);\r\n                    //if (previousInt == void 0 || previousInt.dataID !== requestedID) {\r\n                        animateCubePopup(INTERSECTED, true);\r\n                        popInCube(INTERSECTED);\r\n                        popOutCube(INTERSECTED);\r\n                    //}\r\n\r\n                    previousInt = INTERSECTED;\r\n\r\n                    // tween.easing(TWEEN.Easing.Linear.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.x - prePositon.x;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        }\r\n                        if (yDirection) {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n                        if (zDirection) {\r\n                            Z = position.z - prePositon.z;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        group.rotation.x = position.x;\r\n                        group.rotation.y = position.y;\r\n                        group.rotation.z = position.z;\r\n                        prePositon.x = position.x;\r\n                        prePositon.y = position.y;\r\n                        prePositon.z = position.z;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                // highlight logic\r\n                function update() {\r\n                    if (!animationComplete || mouseDown || !canvasMouseMove) {\r\n                        return;\r\n                    }\r\n                    // find intersections\r\n\r\n                    // create a Ray with origin at the mouse position\r\n                    //   and direction into the scene (camera direction)\r\n                    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\r\n                    vector.unproject(camera);\r\n                    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n\r\n                    // create an array containing all objects in the scene with which the ray intersects\r\n                    var intersects = ray.intersectObjects(scene.children[2].children);\r\n\r\n                    // INTERSECTED = the object in the scene currently closest to the camera \r\n                    //      and intersected by the Ray projected from the mouse position    \r\n\r\n                    // if there is one (or more) intersections\r\n                    if (intersects.length > 0) {\r\n                        // if the closest object intersected is not the currently stored intersection object\r\n                        if (intersects[0].object != INTERSECTED) {\r\n\r\n                            // restore previous intersection object (if it exists) to its original color\r\n                            if (INTERSECTED && (selectedCublet == void 0 || INTERSECTED.id != selectedCublet.id) && !INTERSECTED.disable) {\r\n                                INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\r\n                            }\r\n\r\n\r\n                            // store reference to closest object as current intersection object\r\n                            INTERSECTED = intersects[0].object;\r\n                            if (INTERSECTED.disable) {\r\n                                return;\r\n                            }\r\n\r\n                            if (previousInt !== void 0 && INTERSECTED.name !== previousInt.name && previousInt.hovered) {\r\n                                highlightCublet(previousInt);\r\n                            }\r\n\r\n                            if (previousInt == void 0 || INTERSECTED.name !== previousInt.name) {\r\n                                // store color of closest object (for later restoration)\r\n                                canvasMouseMove = false;\r\n\r\n                                animateCubePopup(INTERSECTED);\r\n                            }\r\n                        }\r\n                    } else // there are no intersections\r\n                    {\r\n                        INTERSECTED = null;\r\n                    }\r\n                };\r\n\r\n                var getIntersect = function (INTERSECTED, camera, jqdiv) {\r\n\r\n\r\n                    var pos = INTERSECTED.position.clone(),\r\n                    projScreenMat = new THREE.Matrix4();\r\n                    projScreenMat.multiply(camera.projectionMatrix, camera.matrixWorldInverse);\r\n                    projScreenMat.multiplyVector3(pos);\r\n\r\n                    return {\r\n                        \"x\": (pos.x + 1) * jqdiv.width() / 2 + jqdiv.offset().left,\r\n                        \"y\": (-pos.y + 1) * jqdiv.height() / 2 + jqdiv.offset().top\r\n                    };\r\n                };\r\n\r\n\r\n                function animateCubePopup(INTERSECTED, fromSerach) {\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: 20 },\r\n                        tween = new TWEEN.Tween(position).to(target, 100),\r\n                        prePositon = { x: 0, y: 0 },\r\n                        $mainScreen = $element.find(\".mainScreen\"),\r\n                        intersect = {\r\n                            x: mouse.clientX + 10,\r\n                            y: mouse.clientY\r\n                        };\r\n\r\n                        if (fromSerach) {\r\n                            intersect = getIntersect(INTERSECTED, camera, $element);\r\n                        }\r\n\r\n                    $mainScreen.attr(\"interesect\", JSON.stringify(intersect))\r\n                    .attr(\"tooltipActive\", true)\r\n                    .attr(\"message\", \"Cublet <b>\" + INTERSECTED.name + \"</b>\")\r\n                    .trigger(\"interesected\");\r\n\r\n                    INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\r\n                    INTERSECTED.hovered = true;\r\n                    // set a new color for closest object\r\n                    if (!INTERSECTED.selected) {\r\n                        INTERSECTED.material.color.setHex(0xa49cfb);\r\n                    } else {\r\n                        INTERSECTED.material.color.setHex(0xffa600);\r\n                    }\r\n                    previousInt = INTERSECTED;\r\n                };\r\n\r\n                function highlightCublet(cublet) {\r\n                    $element.find(\".mainScreen\").attr(\"tooltipActive\", false);\r\n                    if (cublet !== void 0 && cublet.hovered) {\r\n                        if (selectedCublet == void 0 || previousInt.id != selectedCublet.id) {\r\n                            previousInt.material.color.setHex(previousInt.currentHex);\r\n                            previousInt.hovered = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function popOutCube(cublet) {\r\n                    if (cublet.disable) {\r\n                        return;\r\n                    }\r\n                    animationComplete = false;\r\n                    previousInt.material.color.setHex(0xffa600);\r\n                    cublet.selected = true;\r\n                    scope.selectedCube.select = _.where(scope.cubeletList, { id: cublet.dataID })[0];\r\n\r\n\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: 20 },\r\n                        tween = new TWEEN.Tween(position).to(target, 100),\r\n                        prePositon = { x: 0, y: 0 };\r\n                    \r\n                    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        cublet.position.x += Math.sign(cublet.position.x) * (position.y - prePositon.y);\r\n                        cublet.position.y += Math.sign(cublet.position.y) * (position.y - prePositon.y);\r\n                        cublet.position.z += Math.sign(cublet.position.z) * (position.y - prePositon.y);\r\n                        selectedCublet = cublet;\r\n                        prePositon.y = position.y;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                        if(!scope.proceed) {\r\n                            scope.proceed = true;\r\n                            enableProceed();\r\n                            scope.$apply();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function popInCube(currentSelection) {\r\n                    if (selectedCublet == void 0 || currentSelection.disable) {\r\n                        return;\r\n                    }\r\n                    selectedCublet.selected = false;\r\n                    selectedCublet.material.color.setHex(7324411);\r\n                    selectedCublet.position.x -= Math.sign(selectedCublet.position.x) * 20;\r\n                    selectedCublet.position.y -= Math.sign(selectedCublet.position.y) * 20;\r\n                    selectedCublet.position.z -= Math.sign(selectedCublet.position.z) * 20;\r\n                }\r\n\r\n                if (scope.selectedCube.select)\r\n                    scope.searchElement(scope.selectedCube.select.id);\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/searchableCube/searchableCubeTemplate.html'\r\n        };\r\n\r\n}]);\r\n})();","(function () {\n    'use strict';\n    angular.module('SMART2').directive('smartBack', ['$timeout','persistenceService', '$rootScope', function ($timeout, persistenceService, $rootScope) {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                callback: \"&\"\n            },\n            link: function (scope, element, attrs) {\n               \n                //click callback\n                var callback = scope.$eval(scope.callback);\n                \n                if(!persistenceService.nPlusOne.historyIsEmpty()){\n                    scope.show=true;\n                }\n                \n                //Local click binding\n                scope.goBackClick = function (e) {\r\n                    if (!scope.disable) {\r\n                        if (angular.isFunction(callback)) {\r\n                            callback(e)\r\n                        };\n                        persistenceService.redirectToPreviousNode();\r\n                    }\r\n                };\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartBack/smartBackTemplate.html'\n        };\n    }]);\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('browserSniffing', [function () {\r\n        var ua = navigator.userAgent, tem,\r\n                   old_ie = ua.indexOf('MSIE '), //IE browser version less than 11\r\n                    new_ie = ua.indexOf('Trident/'), //IE browser version greater or equal to 11\r\n              // M = ua.match(/(opera|chrome|safari|firefox|msie|android|ipad|iphone|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n\r\n        //For checking if browser is from Internet Explorer family\r\n        if (/trident/i.test(M[1]) || /MSIE/i.test(M[1])) {\r\n            tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\r\n            if (tem.length == 0) {\r\n                return 'IE ' + (M[2] || '');\r\n            } else {\r\n                return 'IE ' + (tem[1] || '');\r\n            }\r\n        }\r\n        if (M[1] === 'Chrome') {\r\n            tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\r\n            if (tem != null)\r\n                return tem.slice(1).join(' ').replace('OPR', 'Opera');\r\n        }\r\n        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\r\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null)\r\n            M.splice(1, 1, tem[1]);\r\n        return M; // returning browser name and browser version\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartBrowserSniffing', ['$window', '$timeout', '$translate', 'browserSniffing', 'notification', 'APPCONSTANTS', 'favoriteOps', function ($window, $timeout, $translate, browserSniffing, notification, APPCONSTANTS, favoriteOps) {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                showSniffing: '@',\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartBrowserSniffing/browerSniffingTemplate.html',\r\n            link: function (scope, element) {\r\n                var showSniffing = (scope.showSniffing == 'true') ? true : false;\r\n                scope.image960 = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/960-error-trans.png\";\r\n                scope.image1920 = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/1920-error-trans.png\";\r\n                var iconIE = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/IE.png\",\r\n                    iconChrome = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/Chrome.png\";\r\n                if (showSniffing == true) {\r\n                    $timeout(function () {\r\n                        scope.execBrowserSniffing();\r\n                    });\r\n\r\n                    angular.element($window).bind('resize', function () {\r\n                        scope.execBrowserSniffing();\r\n                    });\r\n\r\n                    scope.Screen960 = false;\r\n                    scope.Screen1920 = false;\r\n\r\n                    scope.execBrowserSniffing = function () {\r\n                        scope.isShowSniffer = favoriteOps.getSnifferFlag && favoriteOps.getSnifferFlag();\r\n                        if (!scope.isShowSniffer) {\r\n                            scope.sniffTemplateUrl = \"\";\r\n                            angular.element('html').css('overflow', 'hidden');\r\n\r\n                            if (angular.element($window).innerWidth() < 960 || angular.element($window).innerWidth() > 1920) {\r\n                                if (angular.element($window).innerWidth() < 960) {\r\n                                    scope.Screen960 = true;\r\n                                    scope.sniffTemplateUrl = \"shared/directives/uiElements/smartBrowserSniffing/Browse960.html\";\r\n                                    element.addClass('active');\r\n                                    scope.$apply();\r\n                                }\r\n                                if (angular.element($window).innerWidth() > 1920) {\r\n                                    scope.Screen1920 = true;\r\n                                    scope.sniffTemplateUrl = \"shared/directives/uiElements/smartBrowserSniffing/Browse1920.html\";\r\n                                    element.addClass('active');\r\n                                    scope.$apply();\r\n                                }\r\n                            }\r\n                            else {\r\n                                element.removeClass('active');\r\n                                angular.element('html').removeAttr('style');\r\n                            }\r\n                            angular.element('.sniffingContainer').animate({ scrollTop: 1000 }, 'slow');\r\n                        }\r\n                    }\r\n\r\n                    scope.onChange = function (isTrue) {\r\n                        scope.isShowSniffer = isTrue;\r\n                    }\r\n\r\n                    scope.hideSniffingOverlay = function () {\r\n                        scope.Screen1920 = false;\r\n                        scope.Screen960 = false;\r\n                        element.removeClass('active');\r\n                        angular.element('html').removeAttr('style');\r\n                        favoriteOps.setSnifferFlag(scope.isShowSniffer);\r\n                    }\r\n                    if (!(typeof browserSniffing === 'object')) {\r\n                        browserSniffing = browserSniffing.split(' ');\r\n                    }\r\n                    var browserDetail = browserSniffing;\r\n\r\n                    scope.remindOptions = [{\r\n                        \"title\": \"30 Days\"\r\n                    }, {\r\n                        \"title\": \"15 Days\"\r\n                    }];\r\n                    scope.selectedDate = { \"title\": \"30 Days\" };\r\n\r\n                    var unsupportedBrowserVersion = {\r\n                        type: \"unsupportedBrowserVersion\",\r\n                        isMultipleCheck: true,\r\n                        titleTextColor: \"browser-version-header-text\",\r\n                        buttons: [\r\n                            {\r\n                                title: $translate.instant('updateNowBtn'),\r\n                                result: \"Update Now\"\r\n                            },\r\n                        {\r\n                            title: $translate.instant('dismissLink'),\r\n                            result: \"dismiss\"\r\n                        }\r\n                        ],\r\n                        multipleCheckList: [{\r\n                            type: \"select\",\r\n                            checkContext: scope.selectedDate,\r\n                            options: scope.remindOptions,\r\n                            model: scope.selectedDate,\r\n                            preSelected: scope.selectedDate,\r\n                            header: $translate.instant('yourCurrentBrowser')\r\n                        }]\r\n                    };\r\n\r\n                    var unsupportedBrowser = {\r\n                        type: \"unsupportedBrowser\",\r\n                        isMultipleCheck: true,\r\n                        //message: \"<em>\" + browserDetail[0] + \"</em> \" + $translate.instant(\"browserIncompatibleMsg\") + \"<ul class=\\\"browser-list\\\"><li><a href=\\\"https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD&gclid=EAIaIQobChMIuPufvL320gIVwpe9Ch3VhQUtEAAYASAAEgJ8ifD_BwE\\\" target=\\\"_blank\\\"><img src=\" + iconChrome + \" /><p>\" + $translate.instant('broswerChrome') + \"</p></a></li><li><a href=\\\"https://www.microsoft.com/en-in/download/Internet-Explorer-11-for-Windows-7-details.aspx\\\" target=\\\"_blank\\\"><img src=\" + iconIE + \" /><p>\" + $translate.instant('browserInterExplorer') + \"</p></a></li></ul>\",\r\n                        titleTextColor: \"browser-unsupported-header-text\",\r\n                        buttons: [\r\n                            {\r\n                                title: $translate.instant('dismissLink'),\r\n                                result: \"dismiss\"\r\n                            }\r\n                        ],\r\n                        multipleCheckList: [{\r\n                            type: \"select\",\r\n                            checkContext: scope.selectedDate,\r\n                            options: scope.remindOptions,\r\n                            model: scope.selectedDate,\r\n                            preSelected: scope.selectedDate,\r\n                            header: \"<em>\" + browserDetail[0] + \"</em> \" + $translate.instant(\"browserIncompatibleMsg\") + \"<ul class=\\\"browser-list\\\"><li><a href=\\\"https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD&gclid=EAIaIQobChMIuPufvL320gIVwpe9Ch3VhQUtEAAYASAAEgJ8ifD_BwE\\\" target=\\\"_blank\\\"><img src=\" + iconChrome + \" /><p>\" + $translate.instant('broswerChrome') + \"</p></a></li><li><a href=\\\"https://www.microsoft.com/en-in/download/Internet-Explorer-11-for-Windows-7-details.aspx\\\" target=\\\"_blank\\\"><img src=\" + iconIE + \" /><p>\" + $translate.instant('browserInterExplorer') + \"</p></a></li></ul>\",\r\n                        }]\r\n                    };\r\n\r\n                    var standalone = window.navigator.standalone,\r\n                    userAgent = window.navigator.userAgent.toLowerCase(),\r\n                    mobile = /iphone|ipod|ipad|android/.test(userAgent);\r\n                    if (mobile) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        if ((browserSniffing[0] == \"Chrome\" && browserSniffing[1] < 45) ||\r\n                            (browserSniffing[0] == \"IE\" && browserSniffing[1] < 11)) {\r\n                            notification.notify(unsupportedBrowserVersion, function (result) {\r\n                            });\r\n                        }\r\n\r\n                        if ((browserSniffing[0] != \"Chrome\" && browserSniffing[0] != \"IE\")) {\r\n                            notification.notify(unsupportedBrowser, function (result) { });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();","(function () {\n    'use strict';\n    angular.module('SMART2').directive('smartButton', ['$timeout', 'persistenceService', function ($timeout, persistenceService) {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                callback: \"&\",\n                onClick: \"&\",\n                config: \"=\",\n                backgroundColor: \"=\",\n                fabConfig: \"=\",\n                flat: \"=\",\n                disable: \"=\",\n                callbackParams: \"=\",\n                buttonType: \"=\"\n            },\n            link: function (scope, element, attrs) {\n                //check is floating\n                scope.isFloating = (attrs.floating) ? scope.$eval(attrs.floating) : false;\n\n                //check is large\n                scope.isLarge = (attrs.large) ? scope.$eval(attrs.large) : false;\n\n                //click callback\n                var callback = scope.$eval(scope.callback);\n           \n                //Local click binding\n                scope.clickCallback = function (e) {\n                    e.goBack= persistenceService.redirectToPreviousNode;\n                    if (!scope.buttonType  || (scope.buttonType && scope.buttonType != \"Cancel\")) {\r\n                        if (!scope.disable) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback(e, scope.callbackParams)\r\n                            };\r\n                            scope.onClick({ $event: e });\r\n                        }\r\n                    }\n                    else {\r\n                        persistenceService.redirectToPreviousNode();\r\n                    }\n                };\n\n                attrs.$observe('ngClass', function (value) {\n                    scope.styleClass = value;\n                });\n            },\n            templateUrl: 'shared/directives/uiElements/smartButton/smartButtonTemplate.html'\n        };\n    }]);\n})();","  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Checkbox\r\n   * @description This directive is useful for creating a checkbox.\r\n   *\r\n   * @attr {String} label\r\n   *    Label to be displayed for identification of this ui element\r\n   * @attr {Boolean} ng-model\r\n   *    Checkbox's default state (selected or unselected)\r\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\r\n   * @attr {Boolean} disable\r\n   *    If value of this attribute is set to true, checkbox will not be clickable\r\n   * @attr {Boolean} focus \r\n   *    If set to true, this ui element will be focused\r\n   * @attr {Boolean} validate\r\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n   * @attr {Array} rules \r\n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n   * @attr {String} error-message \r\n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n   * @attr {Boolean} is-mandatory \r\n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n   * @attr {Boolean} is-visible \r\n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-change\r\n   *    Callback function when checkbox state is changed \r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"isUrgent\": true\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"Urgent\",\r\n                                        \"type\": \"checkbox\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"isUrgent\",\r\n                                        \"colspan\": 1,\r\n                                        \"onChange\": \"onChange\"  //  controller function ,\r\n                                        \"attributes\": {\r\n                                            \"fill\": true\r\n                                        },\r\n                                        \"rules\": [\r\n                                            { \r\n                                                \"rule\": \"this == true\", \r\n                                                \"error\": \"Checkbox should not be selected\" \r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n   \r\n   * @example\r\n   Static:\r\n   Controller:\r\n       $scope.isUrgent = true;\r\n       $scope.onChange = function(isUrgent) {\r\n           console.log(isUrgent);\r\n       };\r\n   Usage:\r\n       <smart-checkbox label=\"Urgent\" ng-model=\"isUrgent\" on-change=\"onChange(isUrgent)\"></smart-checkbox>\r\n       \r\n   * @example\r\n   Disabled checkbox:\r\n   <smart-checkbox disable=\"true\"></smart-checkbox>     \r\n   */\r\n  \r\n\r\n(function() {\r\n    'use strict';\r\n    var checkboxCounter = 0;\r\n    \r\n    angular.module('SMART2').directive('smartCheckbox', ['$timeout', 'ScrollTo', 'RuleEngine', function ($timeout, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                //ngModel: '=?',\r\n                ngModelResolve: '&',\r\n                disable: '@',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                label: '@',\r\n                minHeight: '@',\r\n                fill: '@',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                errorMessage: '@',\r\n                onChange: '&',\r\n                removable: '@',\r\n                showTooltip: '@',\r\n                tooltipPosition: '@',\r\n                showinfo: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                checkboxCounter++;\r\n                scope.checkBoxId = \"checkbox-\" + checkboxCounter;\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n                scope.showTooltip = (scope.showTooltip == undefined || scope.showTooltip == null) ? false : scope.showTooltip;\r\n                scope.fill = scope.$eval(scope.fill) == undefined ? true : scope.$eval(scope.fill);\r\n                var checkboxEle = element.find(\":checkbox\");\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\r\n\r\n\r\n                /*\r\n                 * Focus field when focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate field whene validate is set to true\r\n                 */\r\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(rules[i], function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                scope.ngChange = function () {\r\n                    if (attrs.ngModelResolve) {\r\n                        var isChecked = checkboxEle.prop('checked');\r\n                        checkboxEle.prop('checked', !isChecked);\r\n                        ngModelCtrl.$setViewValue(!isChecked);\r\n                        scope.ngModel = !isChecked;\r\n\r\n                        scope.ngModelResolve({\r\n                            $event: {\r\n                                isChecked: !checkboxEle.prop('checked'),\r\n                                resolveFun: function (checked) {\r\n                                    checkboxEle.prop('checked', checked);\r\n                                    ngModelCtrl.$setViewValue(checked);\r\n                                    scope.ngModel = checked;\r\n                                    updateView();\r\n                                    scope.validateRules();\r\n                                    var timeout = $timeout(function () {\r\n                                        scope.onChange();\r\n                                        $timeout.cancel(timeout);\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        updateView();\r\n                        scope.validateRules();\r\n                        var timeout = $timeout(function () {\r\n                            scope.onChange();\r\n                            $timeout.cancel(timeout);\r\n                        });\r\n                    };\r\n                };\r\n\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                    element.remove();\r\n                    scope = null;\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartCheckBox/smartCheckBoxTemplate.html'\r\n        };\r\n    }]);\r\n})();\r\n","angular.module('SMART2').directive('smartCultureDate', ['APPCONSTANTS', function (APPCONSTANTS) {\r\n    \"use strict\";\r\n    var monthAbr = {\r\n        january: 'Jan',\r\n        february: 'Feb',\r\n        march: 'Mar',\r\n        april: 'Apr',\r\n        may: 'May',\r\n        june: 'Jun',\r\n        july: 'Jul',\r\n        august: 'Aug',\r\n        september: 'Sep',\r\n        october: 'Oct',\r\n        november: 'Nov',\r\n        december: 'Dec'\r\n    };\r\n    return {\r\n        restrict: 'AE',\r\n        scope: {\r\n            ngModel: '=ngModel',\r\n            culture: '=culture',\r\n            enableShortMonth: '@'\r\n        },\r\n        replace: true,\r\n        link: function ($scope, elem, attr) {\r\n            var matchExpression = /^[0-9]+$/;\r\n            var cultureCode = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n            //var currencyCode = APPCONSTANTS.userPreferences.UserBasicDetails.DefaultCurrencyCode;\r\n            $scope.formatedModel = $scope.ngModel;\r\n            var formatNumber = function () {\r\n                $scope.formatedModel = $scope.ngModel;\r\n                if ($scope.ngModel != undefined && $scope.ngModel != '') {\r\n                    elem.find('.showCultureVal').autoNumeric('init', {\r\n                        mDec: 2,\r\n                        aPad: false,\r\n                        aSep: thousandSep,\r\n                        aDec: decimalSep,\r\n                        vMin: Number.NEGATIVE_INFINITY,\r\n                        vMax: Number.POSITIVE_INFINITY\r\n                    });\r\n\r\n                    elem.find('.showCultureVal').autoNumeric('set', $scope.ngModel);\r\n                    $scope.formatedModel = elem.find('.showCultureVal').text();\r\n                }\r\n            };\r\n\r\n            function extendTheLibrary() {\r\n                if (!isLibraryExtended) {\r\n\r\n                    if (typeof UserCountryCultureInfo != 'undefined' && UserCountryCultureInfo != \"\") {\r\n                        var tempCulture = Globalize.culture().language;\r\n                        thousandSep = Globalize.culture(UserCountryCultureInfo).numberFormat.currency[','];\r\n                        decimalSep = Globalize.culture(UserCountryCultureInfo).numberFormat.currency['.'];\r\n                        Globalize.culture(tempCulture);\r\n                    }\r\n                    try {\r\n                        var cultureCode = _language.toLowerCase();\r\n                        if (cultureCode == 'zh-cht') {\r\n                            cultureCode = 'zh-hk';\r\n                        }\r\n                        moment().lang(cultureCode)._locale._longDateFormat['L'] = moment().lang(UserCountryCultureInfo)._locale._longDateFormat['L']\r\n                        var x = moment.locale(cultureCode)\r\n\r\n                        if (x == 'en' && cultureCode.indexOf('en') < 0) {\r\n                            x = moment.locale(cultureCode.split('-')[0]);\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        console.log(error);\r\n                    }\r\n                    try {\r\n                        $.extend($.fn.autoNumeric.defaults, {\r\n                            aSep: thousandSep,\r\n                            aDec: decimalSep,\r\n                            vMin: Number.NEGATIVE_INFINITY,\r\n                            vMax: Number.POSITIVE_INFINITY,\r\n                            mDec: MaxPrecessionValue != undefined && MaxPrecessionValue != '' ? MaxPrecessionValue * 1 : 4, //4, // hard code value, make sure updated later on getPrecessionValues callback\r\n                            aPad: false\r\n                        });\r\n                        isLibraryExtended = true;\r\n                    }\r\n                    catch (error) {\r\n                        console.log(error);\r\n                    }\r\n                }\r\n            }\r\n            var formatDate = function () {\r\n                $scope.formatedModel = $scope.ngModel;\r\n                if (attr.type == 'date' && $scope.ngModel != undefined && $scope.ngModel != '') {\r\n                    if (matchExpression.test($scope.ngModel)) {\r\n                        if (attr.showTime == 'true') {\r\n                            $scope.formatedModel = moment.unix(new Date(JSON.parse($scope.ngModel)).getTime() / 1000).format(moment.localeData()._longDateFormat.L + \" \" + 'HH:mm');\r\n                        } else {\r\n                            $scope.formatedModel = moment.unix(new Date(JSON.parse($scope.ngModel)).getTime() / 1000).format(moment.localeData()._longDateFormat.L);\r\n                        }\r\n                    } else {\r\n                        if (attr.showTime == 'true') {\r\n                            $scope.formatedModel = moment.unix(new Date($scope.ngModel).getTime() / 1000).format(moment.localeData()._longDateFormat.LL + \" \" + 'HH:mm');\r\n                        } else {\r\n                            $scope.formatedModel = moment.unix(new Date($scope.ngModel).getTime() / 1000).format(moment.localeData()._longDateFormat.LL);\r\n                        }\r\n                    }\r\n\r\n                    if ($scope.enableShortMonth == true && $scope.ngModel) {\r\n                        for (var i = 0, abr = Object.keys(monthAbr); i < abr.length; i++) {\r\n                            if ($scope.formatedModel.search(new RegExp(abr[i], 'gi')) > -1) {\r\n                                $scope.formatedModel = $scope.formatedModel.replace(new RegExp(abr[i], 'gi'), monthAbr[abr[i]]);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            \r\n            extendTheLibrary();\r\n            if (attr.type == 'date') {\r\n                formatDate();\r\n                $scope.$watch('ngModel', function (newValue, oldValue) {\r\n                    if (newValue != oldValue) {\r\n                        formatDate();\r\n                    }\r\n                });\r\n            }\r\n            else if (attr.type == \"number\"){\r\n                formatNumber();               \r\n                    $scope.$watch('ngModel', function (newValue, oldValue) {\r\n                        if (newValue != oldValue) {\r\n                            formatNumber();\r\n                        }\r\n                    });              \r\n            }\r\n\r\n            formatNumber();\r\n\r\n            /*$scope.$watch('ngModel', function (newValue) {\r\n                if (newValue) formatNumber();\r\n            });*/\r\n\r\n        },\r\n        templateUrl: 'shared/directives/uiElements/smartCultureDate/smartCultureDate.html',\r\n    };\r\n}]);","(function () {\r\n    'use strict';\n\n    var startIndex;\n\n    angular.module('SMART2').directive('smartSortable', [function () {\r\n        return {\r\n            restrict: 'A',\n            scope: {\r\n                onSort: '&',\r\n                onDrag: '&'\r\n            },\n            link: function (scope, element, attrs) {\r\n                element.sortable({\r\n                    placeholder: attrs.placeholder ? attrs.placeholder : \"drop-hover\",\r\n                    helper: attrs.helper ? attrs.helper : \"original\",\r\n                    handle: \".collapsible-header-drag-icon\",\r\n                    items: \">*:not(.disable-sort-item)\",\r\n                    cancel: \".disable-sort-item\",\r\n                    connectWith: attrs.connectWith ? attrs.connectWith : \"\",\r\n                    appendTo: attrs.appendTo ? attrs.appendTo : \"parent\",\r\n                    containment: attrs.containment ? attrs.containment : \"parent\",\r\n                    tolerance: attrs.tolerance ? attrs.tolerance : \"intersect\",\r\n                    start: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', 'hidden');\r\n                        }\r\n                        startIndex = ui.item.index();\r\n                        if (ui.placeholder) {\r\n                            ui.placeholder.height(ui.item.height()).css(\"width\", ui.item.outerWidth());\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: true\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    stop: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', '');\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: false\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    update: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', '');\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onSort({\r\n                                $event: {\r\n                                    startIndex: startIndex,\r\n                                    endIndex: ui.item.index()\r\n                                }\r\n                            });\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: false\r\n                                }\r\n                            });\r\n                        });\r\n                        if (attrs.swipItem == \"true\") {\r\n                            // swiping element position with each other\r\n                            if (ui.sender) {\r\n                                var el = ui.item.next().length == 1 ? ui.item.next() : ui.item.prev();\r\n                                ui.sender.append(el);\r\n                            }\r\n                        }\r\n                    },\r\n                    sort: function (event, ui) {\r\n                        //console.log({ event, ui })\r\n                        if (attrs.whileSorting == \"true\") {\r\n                            var ele = $(\".slick-list\"),\r\n                                scrollpos = ele.scrollLeft(),\r\n                                main_width = ele.outerWidth(),\r\n                                ew = ui.helper.outerWidth(),\r\n                                elft = ui.helper.offset().left - ele.offset().left,\r\n                                rpos = (main_width - (elft + ew));\r\n                            if (elft < 0) { // left\r\n                                $('.slick-prev').click();\r\n                            } else if (rpos < 0) { // right    \r\n                                $('.slick-next').click();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\n\n    angular.module('SMART2').directive('isDraggable', [function () {\r\n        return {\r\n            restrict: 'A',\n            link: function (scope, element, attrs) {\r\n                attrs.$observe('isDraggable', function (isDraggable) {\r\n                    if (isDraggable != undefined && isDraggable != \"\") {\r\n                        if (isDraggable == 'true' || isDraggable == true) {\r\n                            element.removeClass('disable-sort-item');\r\n                        }\n                        if (isDraggable == 'false' || isDraggable == false) {\r\n                            element.addClass('disable-sort-item');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\n\n\n\r\n    //var droppableParent;\n\n    ///*\n    // * Highlight droppables on mouse down\n    // */\n    //var highlightDroppableElements = function (currentDraggableElement) {\r\n    //    currentDraggableElement.removeAttr('style').addClass('being-dragged z-index-plus');\n    //    angular.element('.ui-droppable').addClass('being-dropped-on');\r\n    //};\n\n    ///*\n    // * Unhighlight droppables on mouse up\n    // */\n    //var unhighlightDroppableElements = function (currentDraggableElement) {\r\n    //    currentDraggableElement.removeClass('being-dragged z-index-plus');\n    //    angular.element('.ui-droppable').removeClass('being-dropped-on');\r\n    //};\n\n    ///*\n    // *  This directive will handle dragging of portlet\n    // */\n    //angular.module('SMART2').directive('smartDraggable', [function () {\r\n    //    return {\r\n    //        restrict: 'A',\n    //        link: function (scope, element, attrs) {\r\n    //            if (attrs.smartDraggable == 'false' || attrs.smartDraggable == false) {\r\n    //                return;\r\n    //            }\n\n    //            attrs.$observe('enabled', function (isEnabled) {\r\n    //                if (isEnabled != undefined) {\r\n    //                    if (isEnabled == 'true' || isEnabled == true) {\r\n    //                        element.draggable('enable');\r\n    //                    }\n    //                    if (isEnabled == 'false' || isEnabled == false) {\r\n    //                        element.draggable('disable');\r\n    //                    }\r\n    //                }\r\n    //            });\n\n    //            /*\n    //             *  Make portlet dragging enabled\n    //             */\n    //            element.draggable({\r\n    //                revert: 'invalid',\n    //                handle: '.collapsible-header-drag-icon',\n    //                revertDuration: 200,\n    //                delay: 200,\n    //                appendTo: 'body',\r\n    //                containment: 'body',\r\n    //                start: function () {\r\n    //                    droppableParent = $(this).parent();\n    //                    $(droppableParent).addClass('being-dragged z-index-plus');\r\n    //                },\n    //                drag: function (e) {\r\n    //                    if (e.clientX > window.innerWidth - 10 || e.clientX < 10 || e.clientY > window.innerHeight - 10 || e.clientY < 10) {\r\n    //                        $(document).trigger('mouseup');\r\n    //                    }\r\n    //                },\n    //                stop: function () {\r\n    //                    setTimeout(function () {\r\n    //                        $(droppableParent).removeClass('being-dragged z-index-plus');\n    //                        // clearTimeout(dragTimeout);\n    //                    }, 250);\r\n    //                }\r\n    //            });\r\n    //        }\r\n    //    };\r\n    //}]);\n\n\n    ///*\n    // *  This directive will handle dropping of portlet\n    // */\n    //angular.module('SMART2').directive('smartDroppable', ['$compile', '$timeout', function ($compile, $timeout) {\r\n    //    return {\r\n    //        restrict: 'A',\n    //        link: function (scope, element, attrs) {\r\n    //            if (attrs.smartDroppable == 'false' || attrs.smartDroppable == false) {\r\n    //                return;\r\n    //            }\n\n    //            /*\n    //             *  Make portlet dropping enabled\n    //             */\n    //            element.droppable({\r\n    //                hoverClass: 'drop-hover',\n    //                drop: function (event, ui) {\r\n    //                    var draggable = $(ui.draggable[0]),\n    //                        draggableOffset = draggable.offset(),\n    //                        container = $(event.target),\n    //                        containerOffset = container.offset();\n\n    //                    $('.draggable', event.target).appendTo(droppableParent).css({ opacity: 0 }).animate({ opacity: 1 }, 200);\n    //                    draggable.appendTo(container).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ left: 0, top: 0 }, 200);\r\n    //                }\r\n    //            });\r\n    //        }\r\n    //    };\r\n    //}]);\r\n})();\n","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartDropdown', ['$window', '$timeout', 'menuListItemServ', '$focusOnField', function ($window, $timeout, menuListItemServ, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                config: \"@\",\r\n                show: \"@\",\r\n                onHide: \"&\",\r\n                stopProg: \"@\",\r\n                autoClose: \"@\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var islistDropdown;\r\n                var dropDownMenuListItem = function (dropdownContent) {\r\n                    /*dropdown checker*/\r\n                    var liList = dropdownContent.children('li'),\r\n                        liLength = liList.length;\r\n                    if (!liList.attr(\"isItemList\")) {\r\n                       \r\n                        for (var i = 0; i < liLength; i++) {\r\n                            var $this = liList.eq(i),\r\n                                children = $this.children().eq(0);\r\n                            if ($this.children().length == 1 && !$this.hasClass(\"dropdown-content-footer\") && (children.attr(\"ng-click\") != null || children.attr(\"ui-sref\") != null || $this.attr(\"ng-click\") != null)) {\r\n                                islistDropdown = true;\r\n                                break;\r\n                            }\r\n                        };\r\n                        if (islistDropdown == true) {\r\n                            if (liList.last().hasClass(\"dropdown-content-footer\")) {\r\n                                liList.splice(liLength - 1, 1);\r\n                            }\r\n                            menuListItemServ(liList);\r\n                            islistDropdown = false;\r\n                        };\r\n                    }\r\n                    /*dropdown checker end*/\r\n\r\n                },\r\n                keycodeis,\r\n\t\t\t     hideOnTabOut = function (e) {\r\n\t\t\t         if (e.keyCode == 9) {\r\n\t\t\t             keycodeis = e.keyCode;\r\n\t\t\t             window.lastOpenedDropdownConfig.activates.hide().removeClass('active');\r\n\t\t\t             window.lastOpenedDropdownConfig.origin.removeClass(\"active\");\r\n\t\t\t             window.lastOpenedDropdownConfig.activates.unbind(\"keydown\", hideOnTabOut);\r\n\t\t\t         };\r\n\t\t\t     };\r\n\r\n\r\n                //initialization\r\n                var clrTout = setTimeout(function () {\r\n                    var _element = element.find(\".dropdown-button\"),\r\n\t\t\t            closeDDButtons = element.find(\".close-dd\");\r\n                    $(_element).dropdown(angular.extend(typeof scope.$eval(attrs.config) == \"object\" ? scope.$eval(attrs.config) : {}, {\r\n                        onHide: function () {\r\n                            if (keycodeis != 9 && (attrs.singleElementDropdown != undefined)) {\r\n                                window.lastOpenedDropdownConfig.origin.focus();\r\n                                keycodeis = null;\r\n                            }\r\n                            if (scope.autoClose == \"false\") {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }));\r\n                    var ddCloseOff = angular.element(\".dd-close-off\");\r\n                    if (ddCloseOff.length > 0) {\r\n                        ddCloseOff.click(function (e) {\r\n                            var _elem = angular.element(e.target);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(!_elem.hasClass(\"btn-flat\") && !_elem.hasClass(\"btn\") && !_elem.hasClass(\"btn-large\")){\r\n\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t}\r\n                        });\r\n                    }\r\n\r\n                    if (closeDDButtons.length > 0) {\r\n                        closeDDButtons.click(function () {\r\n                            var dd = element.find(\".dropdown-content\");\r\n                            if (dd.length > 0) {\r\n                                scope.hideDropDown(dd);\r\n                            };\r\n                        });\r\n                    }\r\n\r\n                    clearTimeout(clrTout);\r\n                    clrTout = null;\r\n                });\r\n\r\n                if (scope.$eval(attrs.fixed)) {\r\n                    $(element).find('.dropdown-content').addClass('fixeddd');\r\n                    $(element).find('.dropdown-button').bind('click', function (e) {\r\n                        (function ($t) {\r\n                            var clrTout1 = setTimeout(function () {\r\n                                var ddCnt = $t.next('.dropdown-content'),\r\n                                    $tOffsetTop = $t.offset().top - $(window).scrollTop(),\r\n                                    $tOffsetLeft = $t.offset().left - $(window).scrollLeft();\r\n                                ddCnt.css({ 'left': $tOffsetLeft - 2 + 'px', 'top': $tOffsetTop - 2 + 'px' });\r\n                                //ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n                                var lastScrollPosition = $tOffsetTop - 2,\r\n\t\t\t\t\t\t\t\t\tnewScrollPosition = $tOffsetTop - 2;\r\n\r\n                                var ddHgt = ddCnt.css('height'),\r\n                                    winHgt = angular.element(window).height();\r\n                                if ((parseInt(ddHgt) + $tOffsetTop) > winHgt) {\r\n                                    var diffHgt = (parseInt(ddHgt) + $tOffsetTop) - winHgt,\r\n                                        clientOffsetHgt = ($tOffsetTop - diffHgt - 15);\r\n                                    ddCnt.css('top', clientOffsetHgt + 'px');\r\n                                    lastScrollPosition = clientOffsetHgt,\r\n\t\t\t\t\t\t\t\t\tnewScrollPosition = clientOffsetHgt;\r\n                                }\r\n\r\n                                angular.element($window).on(\"scroll.smartFixedSmartDrop\", function () {\r\n                                    newScrollPosition = this.pageYOffset;\r\n                                    if (newScrollPosition !== lastScrollPosition) {\r\n                                        if (ddCnt.hasClass('active')) {\r\n                                            scope.hideDropDown(ddCnt);\r\n                                        }\r\n                                    }\r\n                                    lastScrollPosition = newScrollPosition;\r\n                                });\r\n                                dropDownMenuListItem(ddCnt) // function for apply the tabbing\r\n                                if (attrs.singleElementDropdown != undefined ) {\r\n                                    ddCnt.bind(\"keydown\", hideOnTabOut);\r\n                                }\r\n                                var firstFieldFocus = ddCnt.find(\"a, input, textarea, [tabindex]\").first();\r\n                                $focusOnField(firstFieldFocus);\r\n\r\n                                clearTimeout(clrTout1);\r\n                                clrTout1 = null;\r\n\r\n                            });\r\n                        })($(this));\r\n                    });\r\n\r\n                } else {\r\n\r\n                    // Animation from bottom to top\r\n                    $(element).find('.dropdown-button').bind('click', function (e) {\r\n                        var dropdownContent = $(this).next('.dropdown-content');\r\n                        dropDownMenuListItem(dropdownContent) // function for apply the tabbing\r\n                        if (attrs.singleElementDropdown != undefined) {\r\n                            dropdownContent.bind(\"keydown\", hideOnTabOut);\r\n                        }\r\n\r\n                        $(this).next('.dropdown-content').addClass('ddautoHeight');\r\n                        (function ($t) {\r\n                            var tOut2 = setTimeout(function () {\r\n                                var ddCnt = $t.next('.dropdown-content');\r\n                                var ddCntTop = (parseInt(ddCnt.css('top')) + 5) + 'px';\r\n                                var ddCntLeft = (parseInt(ddCnt.css('left')) + 5) + 'px';\r\n                                if (parseInt(ddCntTop, 10) < 0) {\r\n                                    ddCnt.css('top', 0);\r\n                                    ddCnt.animate({\r\n                                        top: ddCntTop, left: ddCntLeft\r\n                                    });\r\n                                }\r\n                                var firstFieldFocus = ddCnt.find(\"a, input, textarea, [tabindex]\").first();\r\n                                $focusOnField(firstFieldFocus);\r\n                                clearTimeout(tOut2);\r\n                                tOut2 = null;\r\n                            });\r\n                        })($(this));\r\n                    });\r\n                }\r\n\r\n\r\n                var onShow = attrs.$observe('show', function (value) {\r\n                    if (angular.isDefined(value)) {\r\n                        if (!scope.$eval(value)) {\r\n                            var dropdown = element.find('.dropdown-content');\r\n                            scope.hideDropDown(dropdown);\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n                scope.hideDropDown = function (dropdown) {\r\n                    if (dropdown.length > 0) {\r\n                        dropdown.fadeOut(250);\r\n                        dropdown.removeClass('active');\r\n                        dropdown.css('max-height', '');\r\n                        angular.element(\"[data-activates='\" + dropdown.attr('id') + \"']\").removeClass('active');\r\n                        angular.isFunction(scope.onHide) && scope.onHide();\r\n                    }\r\n                }\r\n\r\n                /*Stop Propogation: Start*/\r\n                if (scope.stopProg === \"true\") {\r\n                    var cancelTout = $timeout(function () {\r\n                        element.find(\".dropdown-button\").click(function (e) {\r\n                            e.stopPropagation();\r\n                        }).end().find(\".dropdown-content\").click(function (e) {\r\n                            //Close dropdown after option get selected, this is default fuctionality of materialize framework\r\n                            var a = window.lastOpenedDropdownConfig;\r\n                            a.activates.fadeOut(a.options.outDuration);\r\n                            a.activates.removeClass('active');\r\n                            a.activates.css('max-height', '');\r\n                            a.origin.removeClass('active');\r\n                            e.stopPropagation();\r\n                        });\r\n                        $timeout.cancel(cancelTout);\r\n                        cancelTout = null;\r\n                    });\r\n                }\r\n                /*Stop Propogation: End*/\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onShow();\r\n                    angular.element($window).off(\"scroll.smartFixedSmartDrop\");\r\n                    $(element).find('.dropdown-button').unbind('click');\r\n                    $(element).find('.dropdown-button').off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartDropdown/smartDropdownTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('actionCloseDropdown', [function () {\r\n        return {\r\n            restrict: 'C',\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n                //[commenting the traverseAndFireHideDropDown function as it takes time to close/hide dropdown container as soon as closing event is fired]\r\n                //var traverseAndFireHideDropDown = function (scopeRef, dropdown) {\r\n                //    for (var key in scopeRef) {\r\n                //        if (key == 'hideDropDown') {\r\n                //            scopeRef.hideDropDown(dropdown);\r\n                //            return;\r\n                //        }\r\n                //    }\r\n                //    traverseAndFireHideDropDown(scopeRef.$parent, dropdown);\r\n                //    dropdown = null; //[OPTIMIZATION]\r\n                //};\r\n\r\n                element.bind('click', function () {\r\n                    angular.element(document).trigger('click');\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.unbind('click', function () {\r\n                        angular.element(document).trigger('click');\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();","'use strict';\nangular.module('SMART2').directive('smartErrorFieldHighlighter', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: 'AE',\r\n        scope: {\r\n            errorConfig: \"=\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.otherMandetoryFields = false;\r\n            scope.$watch(\"errorConfig.check\", function (value) {\r\n                if (value == true) {\r\n                    $timeout(function () {\r\n                        $(element.find(\"[is-mandatory='true'] input\")).each(function () {\r\n                            if ($(this).hasClass('invalid')) {\r\n                                $(this).focus();\r\n                                scope.otherMandetoryFields = true;\r\n                                return false;\r\n                            } else {\r\n                                scope.otherMandetoryFields = false;\r\n                            }\r\n                        });\r\n\r\n                        if (!scope.otherMandetoryFields) {\r\n                            $(element.find(\"[is-mandatory='true'].smartMandetoryField\")).each(function () {\r\n                                if ($(this).find('.smartErrorText').length > 0 || $(this).find('.select-invalid-wrapper').length > 0) {\r\n                                    $(this).find('a.focusErrorField').focus();\r\n                                    $(this).find('input').focus();\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                        scope.errorConfig.check = false;\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Form-widget\r\n * @description Form widget directive accepts form-config and model-data. \r\n *    ui elements (fields) that are optional are added in right-panel (widget-panel). Optional fields can be added on form by simply clicking that item in right-panel. \r\n *    Optional field can also be removed by clicking 'x' icon on the upper right corner of ui element or 'x' icon against that item in right-panel. \r\n * \r\n * @attr {Array} form-config\r\n *    Form config is expected to be an array of ui elements (fields)\r\n * @attr {Object} model-data\r\n *    Data to be bound on ui elements (fields)\r\n * @attr {Boolean} is-sequencial\r\n *    If the value of this attribute is set to true, newly added ui element (field) will be added at the end of the section.\r\n *    If the value of this attribute is set to false, newly added ui element (field) will be added by the orders it appears in form-config.  \r\n * @attr {Boolean} show-widget\r\n *    When form-config is passed to form-widget, right-panel will always be created if this attribute is not set to false.\r\n * @attr {String} search-holder\r\n *    Id of DOM element where search bar should appear. This attribute enables form-widget search feature, where user can search for optional sections and fields on the form.\r\n *    And navigate to optional section or field by clicking on search result item.\r\n * @attr {Number} widget-panel-top\r\n *    Top position for widget-panel (right-panel)\r\n * @attr {Number} widget-panel-right\r\n *    Right position for widget-panel (right-panel)\r\n * @attr {Function} on-section-sort\r\n *    Callback function when sections are sorted or rearranged\r\n * @attr {Function} on-save\r\n *    Callback function when sections are need to be save on outside section click\r\n *\r\n * @example\r\n Dynamic:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Dynamic attribute value. One can set a scope variable or function as attribute value. \r\n One can also pass parameters in calling function as is done on callback functions.\r\n In following example, value of 'isMandatory' field for 'Last Name' can be 'isLastNameMandatory(config.modelData)'.\r\n 'options' attribute does not support function as value.\r\n Controller:\r\n      $scope.isFirstNameMandatory = true;\r\n\r\n      $scope.isLastNameMandatory = function() {\r\n            return true;\r\n      };\r\n\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": \"isMandatory\",\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": \"isLastNameMandatory\",\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n      \r\n * @example\r\n Form widget without widget panel (right panel):\r\n <smart-form-widget show-widget=\"false\"></smart-form-widget>   \r\n     \r\n * @example\r\n If newly added ui elements (fields) to be added at the end of the section:\r\n <smart-form-widget is-sequencial=\"true\"></smart-form-widget>\r\n \r\n * @example\r\n Widget-panel with top and right position:\r\n <smart-form-widget widget-panel-top=\"100\" widget-panel-right=\"70\"></smart-form-widget>    \r\n \r\n * @example\r\n Form widget with 'Rule Engine' service:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\r\n      $scope.validateForm = function() {\r\n          RuleEngine.setRules($scope.config.formConfig.sections, $scope.config.modelData, $scope.config.rules);\r\n          RuleEngine.execute(function (e) {\r\n              console.log(e);   //  Check e for more details\r\n          }, $scope);  \r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n      <button ng-click=\"validateForm()\">Validate Form</button>\r\n\r\n* @example\r\nSaving sections on outside section click.\r\n\r\nmandatoryFieldStatus property used to initiate sec Nav validation and section indicator\r\n\r\n Dynamic:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                        \"save\":true,\r\n                        \"mandatoryFieldStatus\": {\r\n                            \"status\": \"complete\",\r\n                            \"isvalidate\":  false,\r\n                            \"description\": \"There are some mandatory fields that are not filled in this section\",\r\n                            \"title\": \"Section 3 - Completed\" \r\n                        },\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\t  $scope.onSave = function (data, prevObj) {\r\n\t      console.log(data, \"In Controller \", prevObj)\r\n          $scope.$digest();\r\n\t\t  // Note: data will give scope.modelData Obj and prevObj will give scope.formConfig.sections[..]\r\n\t\t  // use class=\"savable\" in actionable container within the section for avoiding the onSave callback function. \r\n\t  };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\" on-save=\"onSave(data, prevObj)\"></smart-form-widget>\r\n\r\n\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    var formWidgetCounter = 0;\r\n    angular.module('SMART2').directive('smartFormWidget', ['APPCONSTANTS', 'ScrollTo', 'formWidgetUtils', '$translate', '$timeout', '$compile', 'persistenceService', 'scrollPosition', '$window', function (APPCONSTANTS, ScrollTo, formWidgetUtils, $translate, $timeout, $compile, persistenceService, scrollPosition, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                formConfig: '=?',\r\n                modelData: '=?',\r\n                isSequential: '@',\r\n                showWidget: '@',\r\n                searchHolder: '@',\r\n                widgetPanelTop: '@',\r\n                widgetPanelRight: '@',\r\n                onSectionSort: '&',\r\n                onSave: '&',\r\n                revisionMode: \"@\",\r\n                secNav: '=?',\r\n                filterWith: '=?'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                $window.onload = function () {\r\n                    ///TODO \r\n                    //Call persistenceService to get All MasterData for all root fields\r\n                    persistenceService.masterPersistenceService.getMasterDataForRootField();\r\n                };\r\n                if (scope.secNav == undefined) {\r\n                    scope.secNav = true\r\n                }\r\n                scope.widgetPanelRightPos = scope.widgetPanelRight ? parseFloat(scope.widgetPanelRight) : 70;\r\n                formWidgetCounter = formWidgetCounter + 1;\r\n                scope.formWidgetId = 'form-widget-' + formWidgetCounter;\r\n                scope.addRemoveSection = $translate.instant('AddRemoveSectionTxt');\r\n                scope.visibleSectionTrackerItemsCount = 0;\r\n\r\n                var currentSelectedSection = 0,\r\n                    thumbnailsWrapHeightTemp = 0,\r\n                    secnavIndex = 0,\r\n                    thumbnailsWrapHeight = 0,\r\n                    sectionItemClicked = false,\r\n                    staticTopmargin = 64; // header height\r\n\r\n                scope.enableFieldPreview = false;\r\n\r\n                /*\r\n                 *  Update visible section tracker items\r\n                 */\r\n                var updateVisibleSectionTrackerItemsCount = function () {\r\n                    var count = 0,\r\n                        len = scope.sectionTrackerItems.length;\r\n                    for (var i = 0; i < len; i++) {\r\n                        var tItem = scope.sectionTrackerItems[i];\r\n                        if (tItem.visible && !tItem.hidden) {\r\n                            count++;\r\n                        }\r\n                    }\r\n                    scope.visibleSectionTrackerItemsCount = count;\r\n                };\r\n\r\n                var onSubHeaderHeight = attrs.$observe('subHeaderHeight', function (value) {\r\n                    if (!isNaN(value)) {\r\n                        ScrollTo.setScrollingTopMargin(parseInt(value));\r\n                    }\r\n                });\r\n\r\n\r\n                scope.isFormWidgetToBeLoaded = false;\r\n\r\n                var toutPromise = $timeout(function () {\r\n                    scope.isFormWidgetToBeLoaded = true;\r\n                    $timeout.cancel(toutPromise);\r\n                    toutPromise = null;\r\n                }, 500);\r\n\r\n\r\n\r\n                scope.checkPresistence = false;\r\n                scope.getPresistence = function (formConfig) {\r\n                    if (formConfig && typeof formConfig.documentType != 'undefined') {\r\n                        persistenceService.getUserData(formConfig.documentType);\r\n                        persistenceService.sectionPersistence.getSectionsPersistence(formConfig, persistenceService.userData);\r\n                    }\r\n                }\r\n\r\n                scope.modelDataWatcherEnabledOrNot = false;\r\n                scope.initModelDataWatcher = function (newConfig) {\r\n                    scope.modelDataWatcherEnabledOrNot = true;\r\n                    scope.unbindModelDataWatcher = scope.$watch('modelData', function (newVal, oldVal) {\r\n\r\n                        persistenceService.getModelData(newConfig, newVal, scope.unbindModelDataWatcher, scope.initChipsWatcher);\r\n                    }, true);\r\n                }\r\n                var persistenceTimeout;\r\n                scope.initChipsWatcher = function (arr) {\r\n\r\n                    scope.$watchGroup(arr, function (newVal, oldVal) {\r\n                        persistenceService.nPlusOne.getSelectedSection();\r\n                        if (persistenceTimeout) {\r\n                            $timeout.cancel(persistenceTimeout);\r\n                            persistenceTimeout = undefined;\r\n                        }\r\n                        persistenceTimeout = $timeout(function () {\r\n                            persistenceService.saveRecentDocument(newVal, scope.modelData);\r\n                        }, 1000);\r\n\r\n                    });\r\n                }\r\n\r\n                var unbindSectionsLoadedWathcer;\r\n                function initSectionsLoadedWatcher() {\r\n                    scope.SectionLoaderInitiated = true;\r\n                    var arr = [];\r\n                    for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                        arr.push('formConfig.sections[' + i + '].isContentLoaded');\r\n                    }\r\n\r\n\r\n                    unbindSectionsLoadedWathcer = scope.$watchGroup(arr, function (newVal, oldVal) {\r\n                        if (newVal) {\r\n                            var loadedCompletely = false;\r\n                            for (var i = 0; i < newVal.length; i++) {\r\n                                if (newVal[i] == false && !scope.formConfig.sections[i].isLazyLoadEnabled) {\r\n                                    break;\r\n                                }\r\n                                if (i == newVal.length - 1 && (newVal[i] == true || typeof newVal[i] == 'undefined')) {\r\n                                    scope.initSectionFocus();\r\n                                    var seclectedSectionId = persistenceService.nPlusOne.getSelectedSection();\r\n                                    if (seclectedSectionId != '') {\r\n                                        var seclectedSectionIndex = -1;\r\n                                        var sections = scope.formConfig.sections;\r\n                                        for (var j = 0; j < sections.length; j++) {\r\n                                            if (typeof sections[j].id != 'undefined' && sections[j].id == seclectedSectionId) {\r\n                                                seclectedSectionIndex = j;\r\n                                                sections[j].isActive = true;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                        loadedCompletely = true;\r\n                                        if (seclectedSectionIndex > -1) {\r\n                                            sectionItemClicked = true;\r\n                                            var mySection = scope.sectionTrackerItems[seclectedSectionIndex];\r\n                                            if (mySection.visible) {\r\n                                                scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                                mySection.isActive = true;\r\n                                                currentSelectedSection = seclectedSectionIndex;\r\n\r\n\r\n                                            }\r\n\r\n                                            scope.isSectionsLoaded = false;\r\n                                            ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + seclectedSectionIndex), angular.element('#' + scope.formWidgetId), function (e) {\r\n                                                setTimeout(function () {\r\n                                                    sectionItemClicked = false;\r\n                                                    scope.isSectionsLoaded = true;\r\n                                                }, 250);\r\n\r\n                                                // scope.sectionsLoadedCompletely = true;\r\n                                                unbindSectionsLoadedWathcer();\r\n                                            });\r\n                                        }\r\n                                        else {\r\n                                            scope.isSectionsLoaded = true;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        scope.isSectionsLoaded = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                var formWidgetTimeout,\r\n                    fixedElemHeight = 0,\r\n                    windowScrollTop = 0;\r\n                scope.sectionTrackerItems = [];\r\n                var onFormConfig = scope.$watch('formConfig', function (newConfig, oldConfig) {\r\n                    if (newConfig) {\r\n                        if (formWidgetTimeout) {\r\n                            $timeout.cancel(formWidgetTimeout);\r\n                            formWidgetTimeout = undefined;\r\n                        }\r\n                        if (scope.checkPresistence != true) {\r\n                            scope.getPresistence(newConfig);\r\n                            scope.formConfig.sections = newConfig.sections;\r\n                            scope.checkPresistence = true;\r\n                        }\r\n\r\n                        if (scope.modelDataWatcherEnabledOrNot == false && newConfig != undefined) {\r\n                            scope.initModelDataWatcher(newConfig);\r\n\r\n                        }\r\n\r\n                        formWidgetTimeout = $timeout(function () {\r\n                            var sectionItems = [];\r\n                            var optionalSections = [];\r\n                            var optionalFieldsAndSections = [],\r\n                                sectionLen = scope.formConfig.sections.length;\r\n\r\n                            scope.enableFieldPreview = newConfig.enableFieldPreview;\r\n\r\n                            for (var i = 0; i < sectionLen; i++) {\r\n                                var tSection = scope.formConfig.sections[i];\r\n                                //  if (firstTime || !angular.equals(newConfig.sections[i], (typeof oldConfig === 'undefined') ? null : oldConfig.sections[i])) {\r\n                                tSection.isMandatory = formWidgetUtils.convertAndGetValue(tSection.isMandatory, scope, tSection);\r\n                                if (angular.isDefined(tSection.isVisible)) {\r\n                                    tSection.isVisible = formWidgetUtils.convertAndGetValue(tSection.isVisible, scope, tSection);\r\n                                } else {\r\n                                    tSection.isVisible = tSection.isMandatory;\r\n                                }\r\n                                if (!angular.isDefined(tSection.isHidden)) {\r\n                                    //tSection.isHidden = scope.formConfig.sections[i].isHidden; //[TODO] not needed code\r\n                                    tSection.isHidden = false;\r\n                                } //else {\r\n                                //tSection.isHidden = false;\r\n                                //}\r\n                                tSection.key = scope.formWidgetId + '-section-' + i;\r\n\r\n                                if (scope.$eval(scope.showWidget) != false) {\r\n                                    sectionItems.push({\r\n                                        sectionKey: tSection.key,\r\n                                        sectionId: tSection.sectionId,\r\n                                        isOptionalSection: !tSection.isMandatory,\r\n                                        label: tSection.label,\r\n                                        sectionIndex: i,\r\n                                        visible: tSection.isVisible,\r\n                                        hidden: tSection.isHidden,\r\n                                        isActive: i == currentSelectedSection,\r\n                                        save: tSection.save,\r\n                                        id: tSection.id || '',\r\n                                        mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                        isReadOnly: tSection.isReadOnly\r\n                                    });\r\n\r\n                                    var sectionTLength = scope.sectionTrackerItems.length;\r\n                                    if (sectionTLength) {\r\n\r\n                                        //  For loop is needed in this case, because it is difficult to maintain the index of dragged/dropped item with ng-repeat.\r\n\r\n                                        for (var ij = 0; ij < sectionTLength; ij++) {\r\n                                            if (scope.sectionTrackerItems[ij].sectionIndex == tSection.key.split('section-')[1]) {\r\n                                                scope.sectionTrackerItems[ij] = {\r\n                                                    sectionKey: tSection.key,\r\n                                                    sectionId: tSection.sectionId,\r\n                                                    isOptionalSection: !tSection.isMandatory,\r\n                                                    label: tSection.label,\r\n                                                    sectionIndex: i,\r\n                                                    visible: tSection.isVisible,\r\n                                                    hidden: tSection.isHidden,\r\n                                                    isActive: i == currentSelectedSection,\r\n                                                    save: tSection.save,\r\n                                                    mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                                    isReadOnly: tSection.isReadOnly\r\n                                                };\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                if (!tSection.isMandatory && scope.$eval(scope.showWidget) != false && !tSection.isHidden) {\r\n                                    optionalSections.push({\r\n                                        sectionKey: tSection.key,\r\n                                        sectionId: tSection.sectionId,\r\n                                        isOptionalSection: !tSection.isMandatory,\r\n                                        label: tSection.label,\r\n                                        searchLabel: $translate.instant(tSection.label),\r\n                                        sectionIndex: i,\r\n                                        visible: tSection.isVisible,\r\n                                        hidden: scope.formConfig.sections[i].isHidden,\r\n                                        isActive: false,\r\n                                        isSection: true,\r\n                                        save: tSection.save,\r\n                                        mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                        isReadOnly: tSection.isReadOnly\r\n                                    });\r\n                                }\r\n\r\n                                var sectionOptionalFields = [],\r\n                                    rowsLength = tSection.rows.length;\r\n\r\n                                for (var j = 0; j < rowsLength; j++) {\r\n                                    var trowsData = tSection.rows[j],\r\n                                        propertyLen = trowsData.properties.length;\r\n                                    for (var k = 0; k < propertyLen; k++) {\r\n                                        var tProperty = trowsData.properties[k];\r\n                                        tProperty.isMandatory = formWidgetUtils.convertAndGetValue(tProperty.isMandatory, scope, tProperty);\r\n                                        if (angular.isDefined(tProperty.isVisible)) {\r\n                                            tProperty.isVisible = formWidgetUtils.convertAndGetValue(tProperty.isVisible, scope, tProperty);\r\n                                        } else {\r\n                                            tProperty.isVisible = tProperty.isMandatory;\r\n                                        }\r\n                                        if (angular.isDefined(tProperty.isHidden)) {\r\n                                            tProperty.isHidden = formWidgetUtils.convertAndGetValue(tProperty.isHidden, scope, tProperty);\r\n                                        }\r\n                                        if (!tProperty.isMandatory && scope.$eval(scope.showWidget) != false && !tProperty.isHidden) {\r\n                                            sectionOptionalFields.push({\r\n                                                sectionKey: tSection.key,\r\n                                                label: tProperty.label,\r\n                                                sectionLabel: tSection.label,\r\n                                                searchLabel: $translate.instant(tSection.label) + ' ' + $translate.instant(tProperty.label),\r\n                                                sectionIndex: i,\r\n                                                rowIndex: j,\r\n                                                propertyIndex: k,\r\n                                                visible: tProperty.isVisible,\r\n                                                isSection: false\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                tSection.optionalFields = sectionOptionalFields;\r\n                                optionalFieldsAndSections = optionalFieldsAndSections.concat(tSection.optionalFields);\r\n                                //}\r\n                            }\r\n                            //  firstTime = false;\r\n\r\n                            if (scope.sectionTrackerItems.length != sectionItems.length) {\r\n                                scope.sectionTrackerItems = sectionItems;\r\n                            }\r\n\r\n                            scope.optionalSections = optionalSections;\r\n\r\n                            optionalFieldsAndSections = scope.optionalSections.concat(optionalFieldsAndSections);\r\n\r\n                            scope.optionalFieldsAndSections = optionalFieldsAndSections;\r\n\r\n                            updateVisibleSectionTrackerItemsCount();\r\n\r\n                            scope.showWidget = scope.sectionTrackerItems.length > 1 || scope.optionalSections.length > 0;\r\n                            if (!scope.SectionLoaderInitiated) {\r\n                                initSectionsLoadedWatcher();\r\n                            }\r\n                        }, 250);\r\n                    }\r\n                }, true);\r\n                /*\r\n                *  If search is enabled \r\n                */\r\n                //caching the selector.\r\n                var searchHolder = angular.element('#' + scope.searchHolder);\r\n                if (searchHolder.length > 0) {\r\n                    searchHolder.html('<div ng-include=\"\\'shared/directives/uiElements/smartFormWidget/searchTemplate.html\\'\"></div>');\r\n                    $compile(searchHolder.contents())(scope);\r\n                }\r\n\r\n                function getOpenWidgetSection(a_id) {\r\n                    var returnItem = false,\r\n                        len = scope.formConfig.sections.length;\r\n                    for (var indx = 0; indx < len; indx++) {\r\n                        var tmpObj = scope.formConfig.sections[indx];\r\n                        if (tmpObj.id === a_id) {\r\n                            returnItem = tmpObj;\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n                    return returnItem;\r\n                }\r\n\r\n                if (scope.$eval(scope.showWidget) != false) {\r\n                    var draggableWidth = $(window).width() / 2,\r\n                        restrictWidth = 0,\r\n                        secnavcontainerExpandWidth = 350;\r\n                    // To expand the sec nav\r\n                    element.on('click.secnavchevroicon', '#secnavchevroicon', function () {\r\n                        var $panelExp = $('#panelexpandor');\r\n                        if (!$panelExp.data('ui-draggable')) {\r\n                            $panelExp.draggable({\r\n                                axis: 'x',\r\n                                drag: function (e, ui) {\r\n                                    restrictWidth = secnavcontainerExpandWidth - draggableWidth;\r\n                                    ui.position.left = Math.min(secnavcontainerExpandWidth - 300, ui.position.left);\r\n                                    ui.position.left = Math.max(restrictWidth, ui.position.left);\r\n                                },\r\n                                stop: function (e, ui) {\r\n                                    secnavcontainerExpandWidth -= ui.position.left;\r\n                                    $('.secnavcontainer-expand').width(secnavcontainerExpandWidth);\r\n                                    $panelExp.css('left', 0);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        var $this = $(this),\r\n                            $secNavCont = $this.closest('.secnavcontainer');\r\n\r\n                        if ($secNavCont.hasClass('secnavcontainer-animate')) {\r\n\r\n                            $secNavCont.removeClass('secnavcontainer-animate secnavcontainer-expand').width(69);\r\n                            $this.find('use').attr('xlink:href', '#icon_LeftChevron');\r\n                            $('#sevnav-overlay').remove();\r\n                            $('body').css('overflow', 'auto');\r\n                            secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight)\r\n                        } else {\r\n\r\n                            $('body').css('overflow', 'hidden').append('<div id=\"sevnav-overlay\" class=\"sevnav-overlay\"></div>');\r\n                            $secNavCont.addClass('secnavcontainer-animate').width(secnavcontainerExpandWidth);\r\n                            setTimeout(function () {\r\n                                $secNavCont.addClass('secnavcontainer-expand');\r\n                            }, 450);\r\n                            $this.find('use').attr('xlink:href', '#icon_RightChevro');\r\n                            var $secNavContList = $secNavCont.find('.thumbnails-wrap').children('li')\r\n                            $secNavContList.each(function (k, v) {\r\n                                v.style.height = \"46px\";\r\n                            });\r\n                            var $thumbnailswrap = $('#thumbnails-wrap');\r\n                            $thumbnailswrap.animate({ scrollTop: (($($secNavContList[secnavIndex]).offset().top - $thumbnailswrap.offset().top) - 20) }, \"slow\");\r\n                            $('#sevnav-overlay').off('click').on('click', function () {\r\n                                $('#secnavchevroicon').trigger('click');\r\n                            });\r\n                        }\r\n\r\n                    });\r\n\r\n                    // Sec nav dot mouse enter functionality \r\n                    element.on('mouseenter.secnav', '.thumbnails-wrap li', function (e) {\r\n                        var $this = $(this);\r\n                        if ($this.closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n\r\n                        $('.nearby').removeClass(\"nearby\");\r\n                        $this.prev(\"li\").addClass(\"nearby\");\r\n                        $this.next(\"li\").addClass(\"nearby\");\r\n                        secnavHeightCal(element, e, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // SubHeader \r\n                    $('.extra-nav-wrap').resizeSensor({\r\n                        onHeightChange: function (a) {\r\n                            $('#subheaderwrapper').height(a.height);\r\n                            onDocumentScroll();\r\n                        }\r\n                    });\r\n\r\n                    // Sec nav dot mouse leave functionality \r\n                    element.on('mouseleave.secnav', '.thumbnails-wrap', function () {\r\n                        if ($(this).closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n                        element.find('li').removeClass(\"nearby\");\r\n                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // Sec nav dot mouse leave functionality \r\n                    element.on('mouseenter.secnavform', '.accountDetails', function () {\r\n                        if ($(this).closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n                        element.find('li').removeClass(\"nearby\");\r\n                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // For calculating the dot height of sec nav \r\n                    var secnavHeightCal = function (element, e, thumbnailsWrapHeight, type) {\r\n                        var $secNavSelector = $('#thumbnails-wrap').children('li'),\r\n                            selectedLiIndex = typeof e === 'number' ? e : $secNavSelector.index($(e.currentTarget).closest('li')),\r\n                            prevSec = selectedLiIndex - 1,\r\n                            afterSec = selectedLiIndex + 1,\r\n                            prevSecDiff = prevSec,\r\n                            afterSecDiff = 2,\r\n                            secNavUlHeight;\r\n\r\n                        secNavUlHeight = Math.floor((thumbnailsWrapHeight) / ($secNavSelector.length));\r\n\r\n                        if (type != 'mouse') {\r\n                            secnavIndex = selectedLiIndex;\r\n                        }\r\n                        if (element.find('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                            return\r\n                        };\r\n\r\n                        $secNavSelector.each(function (k, v) {\r\n                            v.style.height = secNavUlHeight + \"px\";\r\n\r\n                            //if (k === selectedLiIndex) {\r\n                            //    v.style.height = (secNavUlHeight + 16) + \"px\";\r\n\r\n                            //} else if (k <= prevSec) {\r\n\r\n                            //    v.style.height = prevSecDiff === 1 ? (5 + secNavUlHeight) + \"px\" : prevSecDiff === 0 ? (10 + secNavUlHeight) + \"px\" : v.style.height = secNavUlHeight + \"px\";\r\n\r\n                            //    prevSecDiff--;\r\n                            //} else {\r\n                            //    if (afterSecDiff === 2) {\r\n                            //        v.style.height = (5 + secNavUlHeight) + \"px\";\r\n                            //    } else {\r\n                            //        v.style.height = secNavUlHeight + \"px\";\r\n                            //    }\r\n                            //    afterSecDiff--;\r\n                            //}\r\n                        });\r\n                    };\r\n\r\n                    var filterTextTimeout,\r\n                        onDocumentScroll = function () {\r\n\r\n                            /**\r\n                             ** Adding and Removing fixed class on subheader\r\n                             ** Setting height of sec nav\r\n                             ** Highlighting sec nav dots \r\n                            **/\r\n                            if (filterTextTimeout) {\r\n                                $timeout.cancel(filterTextTimeout);\r\n                            }\r\n\r\n                            try {\r\n                                var $fixedElem = $('.extra-nav-wrap'),\r\n                                    $subHeaderFixedContainer = $('#subheaderwrapper'),\r\n                                    $formWidgetElem = $('.secondary-navigation'),\r\n                                    formWidgetElemHeight = $formWidgetElem && $formWidgetElem.height(),\r\n                                    $thumbnailsWrap = $('#thumbnails-wrap'),\r\n                                    $secnavchevroicon = $('#secnavchevroicon'),\r\n                                    formWidgetTop,\r\n                                    formWidgetFixedTop = 1;\r\n                                windowScrollTop = $(window).scrollTop();\r\n                                fixedElemHeight = $fixedElem.outerHeight();\r\n                                if (windowScrollTop > 63) {\r\n\r\n                                    $formWidgetElem.css(\"top\", fixedElemHeight);\r\n\r\n                                    thumbnailsWrapHeight = $(window).height() - ((scope.optionalSections && scope.optionalSections.length ? 193 : 150) + (fixedElemHeight - 63));\r\n\r\n                                    if (!$fixedElem.hasClass('extra-nav-wrap-fixed')) {\r\n                                        $fixedElem.addClass('extra-nav-wrap-fixed');\r\n                                        $subHeaderFixedContainer.addClass('extra-nav-wrap-fixed');\r\n                                    }\r\n\r\n                                } else {\r\n\r\n                                    $formWidgetElem.css(\"top\", \"auto\");\r\n                                    if ($fixedElem.hasClass('extra-nav-wrap-fixed')) {\r\n                                        $fixedElem.removeClass('extra-nav-wrap-fixed');\r\n                                        $subHeaderFixedContainer.removeClass('extra-nav-wrap-fixed');\r\n                                    }\r\n\r\n                                    thumbnailsWrapHeight = $(window).height() - (((scope.optionalSections && scope.optionalSections.length ? 193 : 150) + (fixedElemHeight)) - windowScrollTop);\r\n                                }\r\n                                $formWidgetElem.height(thumbnailsWrapHeight + 24);\r\n                                $secnavchevroicon.css(\"top\", (thumbnailsWrapHeight / 2));\r\n\r\n                                formWidgetTop = $formWidgetElem.length && $formWidgetElem.offset().top;\r\n                                var trackerItemsLen = scope.sectionTrackerItems && scope.sectionTrackerItems.length;\r\n\r\n\r\n                                if (!sectionItemClicked && trackerItemsLen) {\r\n\r\n                                    var $cardParent = element.find('#' + scope.formWidgetId + '-sortable').find('.cardParent');\r\n                                    for (var i = 0; i < trackerItemsLen; i++) {\r\n                                        var $this = element.find('#' + scope.formWidgetId + '-section-' + i);\r\n\r\n                                        // Position of section relative to window\r\n                                        if ($this.children().length > 0) {\r\n                                            var offsetLi = $this.offset().top - 10,\r\n                                                offsetLiHeight = offsetLi + $this.height();\r\n                                            //activeoffset = offsetLi - formWidgetTop;\r\n                                            //get index of div in the parent document  \r\n                                            if (formWidgetTop >= offsetLi && formWidgetTop <= offsetLiHeight || thumbnailsWrapHeightTemp != thumbnailsWrapHeight) {\r\n                                                thumbnailsWrapHeightTemp = thumbnailsWrapHeight;\r\n                                                newSelected = scope.sectionTrackerItems[i].sectionIndex;\r\n\r\n                                                if (scope.sectionTrackerItems[newSelected].visible) {\r\n                                                    filterTextTimeout = $timeout(function () {\r\n                                                        scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                                        scope.sectionTrackerItems[newSelected].isActive = true;\r\n                                                        currentSelectedSection = newSelected;\r\n                                                        if (typeof scope.sectionTrackerItems[newSelected].id != 'undefined') {\r\n                                                            persistenceService.nPlusOne.saveSelectedSection(scope.sectionTrackerItems[newSelected].id);\r\n                                                        }\r\n                                                        secnavHeightCal(element, $cardParent.index($this), thumbnailsWrapHeight);\r\n                                                    });\r\n                                                }\r\n                                                $cardParent.children('.collapsible-container').removeClass('collapsible-focus');\r\n\r\n                                                $this.children('.collapsible-container').addClass('collapsible-focus');\r\n\r\n\r\n\r\n                                                if (formWidgetTop >= offsetLi && formWidgetTop <= offsetLiHeight) {\r\n                                                    break;\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                        $this = null;\r\n                                    }\r\n                                }\r\n\r\n\r\n                            } catch (e) { console.log(\"onDocumentScroll\") }\r\n                        },\r\n                        checkSubheaderHeight,\r\n                        subheaderHeight,\r\n                        newSelected = 0,\r\n                        filterTextTimeout = null;\r\n\r\n                    setTimeout(function () {\r\n                        isCheckSecnav();\r\n                    }, 100);\r\n\r\n                    function isCheckSecnav() {\r\n                        if ($('.secondary-navigation').length) {\r\n                            onDocumentScroll();\r\n                            $(document).on('scroll.secnav', onDocumentScroll);\r\n                        } else {\r\n                            setTimeout(function () {\r\n                                isCheckSecnav();\r\n                            }, 500);\r\n                        }\r\n                    }\r\n\r\n                    setTimeout(function () {\r\n                        isCheckWidget();\r\n                    }, 1000);\r\n\r\n                    function isCheckWidget() {\r\n                        if ($('#' + scope.formWidgetId).length) {\r\n                            scrollPosition.scrollWitgetsection(scope.sectionTrackerItems);\r\n                        } else {\r\n                            setTimeout(function () {\r\n                                isCheckWidget();\r\n                            }, 1000);\r\n                        }\r\n                    };\r\n                    /*\r\n                     * Section item click handler\r\n                     */\r\n                    var activeItem;\r\n                    scope.onSectionItemClick = function (item, sectionNumber, e) {\r\n\r\n                        var sectionTrackerLength = scope.sectionTrackerItems.length;\r\n                        //  For loop is needed in this case, because it is difficult to maintain the index of dragged/dropped item.\r\n                        for (var i = 0; i < sectionTrackerLength; i++) {\r\n                            scope.sectionTrackerItems[i].isActive = false;\r\n                        }\r\n                        scope.sectionTrackerItems[sectionNumber].isActive = true;\r\n                        currentSelectedSection = sectionNumber;\r\n                        var Selectedsection = scope.formConfig.sections[item.sectionIndex];\r\n                        Selectedsection.isActive = true;\r\n                        if (typeof Selectedsection.id != 'undefined') {\r\n                            persistenceService.nPlusOne.saveSelectedSection(Selectedsection.id);\r\n                        }\r\n                        scope.formConfig.sections[item.sectionIndex].isActive = true;\r\n                        sectionItemClicked = true;\r\n                        activeItem = e;\r\n                        ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                        ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId + '-sortable'), function (e) {\r\n\r\n                            setTimeout(function () {\r\n                                secnavHeightCal(element, activeItem, thumbnailsWrapHeight);\r\n                                sectionItemClicked = false;\r\n                            }, 300);\r\n                        });\r\n                    };\r\n\r\n\r\n                    /*\r\n                     * On optional section item click handler\r\n                     */\r\n                    scope.onOptionalSectionItemClick = function (isLabelClicked, item) {\r\n                        if (isLabelClicked && item.isVisible) {\r\n                            return;\r\n                        }\r\n\r\n                        scope.formConfig.sections[item.sectionIndex].isVisible = !scope.formConfig.sections[item.sectionIndex].isVisible;\r\n                        //  Toggle section tracker item visibility\r\n                        var trackerTLen = scope.sectionTrackerItems.length;\r\n                        for (var i = 0; i < trackerTLen; i++) {\r\n                            if (scope.sectionTrackerItems[i].label === item.label) {\r\n                                scope.sectionTrackerItems[i].visible = !item.visible;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        /*\r\n                         *  scope.isSequential is set to 'true', form-widget-section would be added \r\n                         *  where it is positioned in the JSON structure else \r\n                         *  form-widget-section would be added at the end of row\r\n                         */\r\n                        if (!scope.$eval(scope.isSequential) && scope.formConfig.sections[item.sectionIndex].isVisible) {\r\n                            //  Re-arrange sections order\r\n                            var tmpSection = scope.formConfig.sections[item.sectionIndex];\r\n                            scope.formConfig.sections.splice(item.sectionIndex, 1);\r\n                            scope.formConfig.sections.push(tmpSection);\r\n\r\n                            //  Re-arrange sections tracker items order\r\n                            for (var i = 0; i < scope.sectionTrackerItems.length; i++) {\r\n                                if (scope.sectionTrackerItems[i].label === item.label) {\r\n                                    var tmpSection = scope.sectionTrackerItems[i];\r\n                                    scope.sectionTrackerItems.splice(i, 1);\r\n                                    scope.sectionTrackerItems.push(tmpSection);\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            //  Re-arrange sections tracker items section index\r\n                            for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                                for (var j = 0; j < scope.sectionTrackerItems.length; j++) {\r\n                                    if (scope.formConfig.sections[i].label == scope.sectionTrackerItems[j].label) {\r\n                                        scope.sectionTrackerItems[j].sectionIndex = i;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //  Re-arrange sections optional fields section index\r\n                            for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                                for (var j = 0; j < scope.optionalSections.length; j++) {\r\n                                    if (scope.formConfig.sections[i].label == scope.optionalSections[j].label) {\r\n                                        scope.optionalSections[j].sectionIndex = i;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        var itemVisible = !item.visible;\r\n                        var tempTOut = setTimeout(function () {\r\n                            if (itemVisible) {\r\n\r\n                                ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                                ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId + '-sortable'), function () {\r\n                                    if ($('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                                        $('.secnavcontainer').find('.thumbnails-wrap').children('li').each(function (k, v) {\r\n                                            v.style.height = \"46px\";\r\n                                        });\r\n                                    } else {\r\n                                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight);\r\n                                    }\r\n                                });\r\n                            }\r\n                            clearTimeout(tempTOut);\r\n                        }, 200);\r\n\r\n                        updateVisibleSectionTrackerItemsCount();\r\n                    };\r\n\r\n\r\n                    scope.onOptionalFieldClick = function (isLabelClicked, item) {\r\n                        if (!item.visible) {\r\n                            ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                            ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId));\r\n                        }\r\n                        scope.$broadcast('optionalFieldClick', {\r\n                            isLabelClicked: isLabelClicked, item: item\r\n                        });\r\n                    };\r\n\r\n\r\n                    /*\r\n                     * Widget panel\r\n                     */\r\n                    scope.showWidgetPanel = false;\r\n\r\n                    scope.toggleWidgetPanel = function () {\r\n                        scope.showWidgetPanel = !scope.showWidgetPanel;\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Callback function when section order gets changed\r\n                     */\r\n\r\n                    scope.onSort = function (e) {\r\n                        scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n\r\n                        var sectionTrackerItems = angular.copy(scope.sectionTrackerItems),\r\n                            item = sectionTrackerItems.splice(e.startIndex, 1);\r\n                        sectionTrackerItems.splice(e.endIndex, 0, item[0]);\r\n\r\n                        var formConfigAfterSort = [],\r\n                            trackerSortLen = scope.sectionTrackerItems.length;\r\n                        var sectionsList = [];\r\n                        for (var i = 0; i < trackerSortLen; i++) {\r\n                            var section = scope.formConfig.sections[scope.sectionTrackerItems[i].sectionIndex];\r\n                            formConfigAfterSort.push(section);\r\n                            if (typeof section.id != 'undefined') {\r\n                                sectionsList.push(section.id);\r\n                            }\r\n                        }\r\n                        if (sectionsList.length > 0 && typeof scope.formConfig.documentType != 'undefined') {\r\n                            persistenceService.updateUserData('sections', sectionsList);\n                            persistenceService.saveUserData(scope.formConfig.documentType);\r\n                        }\r\n                        scope.onSectionSort({\r\n                            $event: {\r\n                                formConfig: formConfigAfterSort\r\n                            }\r\n                        });\r\n\r\n                        if (element.find('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                            var $sectionCont = $('#form-widget-1-sortable'),\r\n                                sectionList = $sectionCont.children('li'),\r\n                                sectionListitem = sectionList.splice(e.startIndex, 1);\r\n                            sectionList.splice(e.endIndex, 0, sectionListitem[0]);\r\n                            $sectionCont.append(sectionList);\r\n                        } else {\r\n                            var $thumbnailsCont = $('#thumbnails-wrap'),\r\n                                thumbnailsList = $thumbnailsCont.children('li'),\r\n                                thumbnailsListitem = thumbnailsList.splice(e.startIndex, 1),\r\n                                thumbNodes = [],\r\n                                count = 0;\r\n                            thumbnailsList.splice(e.endIndex, 0, thumbnailsListitem[0]);\r\n\r\n                            $.each($thumbnailsCont.get(0).childNodes, function (k, v) {\r\n                                if ($(v).is('li')) {\r\n                                    thumbNodes[k] = thumbnailsList[count];\r\n                                    count++;\r\n                                } else {\r\n                                    thumbNodes[k] = v;\r\n                                }\r\n                            });\r\n                            $thumbnailsCont.append(thumbNodes);\r\n                        }\r\n                        setTimeout(function () {\r\n                            onDocumentScroll();\r\n                        }, 10);\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Make section active in section tracker\r\n                     */\r\n                    var previousClickedSection = [];\r\n                    scope.initSectionFocus = function () {\r\n                        scope.$on('sectionFocus', function (event, data) {\r\n                            var openedSec = getOpenWidgetSection(data.id);\r\n                            var sectionNumber = openedSec.sectionIndex;\r\n                            if (openedSec) {\r\n                                scope.onSectionItemClick(openedSec, sectionNumber);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    scope.onSectionClick = function (section) {\r\n\r\n                        //scrollPosition.set(0, location.hash, { key: section.key.split('section-')[1], active: true });\r\n\r\n                        if (attrs.onSave) {\r\n                            if (section.hasOwnProperty('save') && section != previousClickedSection[(previousClickedSection.length - 1)]) {\r\n                                previousClickedSection.push(section);\r\n                            }\r\n\r\n                            if (previousClickedSection.length > 2) {\r\n                                previousClickedSection.shift();\r\n                            }\r\n                        }\r\n                        if (scope.sectionTrackerItems[currentSelectedSection].label === section.label) {\r\n                            return;\r\n                        }\r\n                        var tlenTracker = scope.sectionTrackerItems.length;\r\n                        for (var i = 0; i < tlenTracker; i++) {\r\n                            if (scope.sectionTrackerItems[i].label === section.label) {\r\n                                scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                scope.sectionTrackerItems[i].isActive = true;\r\n                                currentSelectedSection = i;\r\n                                if (typeof scope.sectionTrackerItems[i].id != 'undefined') {\r\n                                    persistenceService.nPlusOne.saveSelectedSection(scope.sectionTrackerItems[i].id);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Callback function when user expands or collapses the section\r\n                     */\r\n                    scope.onSectionHeaderClick = function (section) {\r\n                        if (angular.isDefined(section.onHeaderClick)) {\r\n                            eval('scope.' + formWidgetUtils.generateFunctionWithParams(section.onHeaderClick, '$parent', true));\r\n                        }\r\n                        if (!section.isContentLoaded) {\r\n                            section.isContentLoaded = true;\r\n                        }\r\n\r\n                        var $itemSelected = element.find('#' + section.key);\r\n\r\n                        if (!$itemSelected.find('.collapsible-body').hasClass('displayBlock')) {\r\n\r\n                            var displacementItem = $itemSelected.offset().top - angular.element('#' + scope.formWidgetId + '-sortable').offset().top;\r\n\r\n                            displacementItem = displacementItem + staticTopmargin;\r\n                            setTimeout(function () {\r\n                                angular.element('body,html').animate({\r\n                                    scrollTop: displacementItem\r\n                                }, \"medium\");\r\n                            }, 200)\r\n                        }\r\n                    };\r\n\r\n\r\n                    // Auto Save Callback\r\n                    if (attrs.onSave) {\r\n                        var onDocumentClick = function (e) {\r\n                            if (!previousClickedSection.length) {\r\n                                return;\r\n                            }\r\n                            var prevKeyLen = $(e.target).closest('#' + previousClickedSection[0].key).length;\r\n                            if ((!prevKeyLen) || (prevKeyLen && $(e.target).closest('.savable').length)) {\r\n                                if (!$(e.target).closest('.modal').length && !$(e.target).closest('.noSaveItem').length && !$(e.target).closest('.lean-overlay').length) {\r\n                                    scope.onSave({\r\n                                        data: scope.modelData, prevObj: previousClickedSection[0]\r\n                                    });\r\n                                    previousClickedSection.shift();\r\n                                }\r\n                                //scope.$digest();\r\n                            }\r\n                        }\r\n\r\n                        $(document).off('click.saveSection').on('click.saveSection', onDocumentClick);\r\n\r\n                        // Needed due to selectbox plugin using stopPropagation\r\n                        $(document).off('change.saveSelect').on('change.saveSelect', '.select-wrapper select', function (e) {\r\n                            //var ind = $('#' + scope.formWidgetId + '-sortable').children('li').index($(this).closest('li')),\r\n                            //    sectionDatastore = scope.formConfig.sections[ind];\r\n\r\n\r\n                            var ind = $(this).closest('.card.cardParent').attr('id').split('section-'),\r\n                                sectionDatastore = scope.formConfig.sections[ind[1]];\r\n                            if (sectionDatastore.hasOwnProperty('save') && sectionDatastore != previousClickedSection[(previousClickedSection.length - 1)]) {\r\n                                previousClickedSection.push(sectionDatastore);\r\n                            }\r\n\r\n                            if (previousClickedSection.length > 2) {\r\n                                previousClickedSection.shift();\r\n                            }\r\n\r\n                            onDocumentClick(e);\r\n                        });\r\n                    };\r\n\r\n                    /*\r\n                     *  Remove all listeners on scope destroy\r\n                     */\r\n                    scope.$on('$destroy', function () {\r\n                        $(document).off('scroll.secnav click.saveSection change.saveSelect');\r\n                        $('#sevnav-overlay') && $('#sevnav-overlay').remove();\r\n\r\n                        element.off('mouseenter.secnav mouseleave.secnav click.secnavchevroicon mouseenter.secnavform');\r\n                        onSubHeaderHeight();\r\n                        onFormConfig();\r\n\r\n                    });\r\n\r\n\r\n                    scope.iconClasses = APPCONSTANTS.formWidgetItemClasses;\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartFormWidget/smartFormWidgetTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('smartSvgIcon', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                element.html('<svg><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#' + attrs.smartSvgIcon + '\"></use></svg>');\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    /*\r\n     *  Text highlighting filter\r\n     */\r\n    angular.module('SMART2').filter('highlight', ['$sce', function ($sce) {\r\n        return function (text, phrase) {\r\n            if (phrase) {\r\n                text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span style=\"background: yellow\">$1</span>');\r\n            }\r\n            return $sce.trustAsHtml(text);\r\n        }\r\n    }]);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartGrid', ['$filter', function ($filter) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                gridConfig: '=config'\r\n            },\r\n            controller: function ($scope) {\r\n                /*\r\n                 * Current formatter\r\n                 */\r\n                $scope.currencyFormatter = function (amountarg, symbol, zeroprecision, defaultCurrency) {\r\n                    var amount = amountarg;\r\n                    if (zeroprecision)\r\n                        amount = Number(amountarg).toFixed(0);\r\n\r\n                    var formattedAmount;\r\n                    if (amount >= 1000000 || amount <= -1000000) {\r\n                        shortamount = amount / 1000000;\r\n                        formattedAmount = $scope.currencyFormatter(shortamount, symbol, false, defaultCurrency);\r\n                        //if (zeroprecision)\r\n                        //formattedAmount = formattedAmount.substring(0, formattedAmount.length - 3);\r\n                        formattedAmount = formattedAmount + \" MM\";\r\n                    }\r\n                    else {\r\n                        formattedAmount = $filter('currency')(amount);\r\n                        if (defaultCurrency != undefined) symbol = defaultCurrency;\r\n                        if (amount < 0) {\r\n                            if (symbol !== undefined)\r\n                                formattedAmount = $filter('currency')(amount, symbol).replace(\"(\", \"-\").replace(\")\", \"\");\r\n                            else\r\n                                formattedAmount = $filter('currency')(amount).replace(\"(\", \"-\").replace(\")\", \"\");\r\n                        }\r\n                        else if (symbol !== undefined) {\r\n                            formattedAmount = $filter('currency')(amount, symbol);\r\n                        }\r\n                        if (zeroprecision) {\r\n                            if (parseInt(formattedAmount.substring(formattedAmount.length - 2, formattedAmount.length)) == 0) {\r\n                                formattedAmount = formattedAmount.substring(0, formattedAmount.length - 3);\r\n                            }\r\n                        }\r\n                    }\r\n                    return formattedAmount.toString();\r\n                };\r\n\r\n                /*\r\n                 * Number formatter\r\n                 */\r\n                $scope.numberFormatter = function (amountarg, zeroprecision) {\r\n                    var formattedAmount = amountarg;\r\n                    if (zeroprecision)\r\n                        formattedAmount = Number(amountarg).toFixed(0);\r\n                    if (formattedAmount >= 1000000 || formattedAmount <= -1000000) {\r\n                        var shortamount = formattedAmount / 1000000;\r\n                        if (zeroprecision) {\r\n                            formattedAmount = Number(shortamount).toFixed(0);\r\n                        } else {\r\n                            formattedAmount = shortamount;\r\n                        }\r\n                        return $filter('number')(formattedAmount) + \" MM\";\r\n                    }\r\n                    else {\r\n                        return $filter('number')(formattedAmount);\r\n                    }\r\n                };\r\n            },\r\n            link: function (scope, element, attr) {\r\n                var headerTemplate, rowTemplate, headerData, rowData, cellTemplate, cellRenderer, headerCellRenderer, onClick, rowHeight, cellStyle;\r\n\r\n                scope.$watch('gridConfig', function (n, o) {\r\n                    if (n) {\r\n                        scope.config = scope.gridConfig;\r\n\r\n                        if (scope.config && scope.config.headerTemplate) {\r\n                            headerTemplate = scope.config.headerTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowTemplate) {\r\n                            rowTemplate = scope.config.rowTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.headerData) {\r\n                            headerData = scope.config.headerData;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowData) {\r\n                            rowData = scope.config.rowData;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.dimension && scope.config.dimension.height) {\r\n                            scope.gridHeight = scope.config.dimension.height;\r\n                        }\r\n                        else {\r\n                            scope.gridHeight = element.parent().outerHeight(true);\r\n                        }\r\n\r\n                        scope.gridHeight = scope.gridHeight - 1; // 1 is the border\r\n\r\n                        if (scope.config && scope.config.cellRenderer) {\r\n                            cellRenderer = scope.config.cellRenderer;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.headerCellRenderer) {\r\n                            headerCellRenderer = scope.config.headerCellRenderer;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.onClick) {\r\n                            onClick = scope.config.onClick;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.cellTemplate) {\r\n                            cellTemplate = scope.config.cellTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowHeight) {\r\n                            rowHeight = scope.config.rowHeight;\r\n                        }\r\n                        else {\r\n                            rowHeight = 40;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.cellStyle) {\r\n                            cellStyle = scope.config.cellStyle;\r\n                        }\r\n\r\n                        var columnDefs = [];\r\n                        var cellWidth = element.parent().outerWidth() / headerData.length;\r\n\r\n                        for (var i = 0; i < headerData.length; i++) {\r\n                            columnDefs.push({\r\n                                displayName: headerData[i].title,\r\n                                field: headerData[i].datamappingkey,\r\n                                suppressSorting: headerData[i].sortable ? false : true,\r\n                                formatterType: headerData[i].formatterType,\r\n                                clickable: headerData[i].clickable ? true : false,\r\n                                align: headerData[i].align,\r\n                                width: headerData[i].width != undefined ? headerData[i].width : cellWidth,\r\n                                cellStyle: headerData[i].cellStyle != undefined ? headerData[i].cellStyle : undefined\r\n                            });\r\n\r\n                            //  Set default currency if the formatter type is currency\r\n                            if (headerData[i].formatterType == 'currency') {\r\n                                columnDefs[columnDefs.length - 1].defaultCurrency = headerData[i].defaultCurrency;\r\n                            }\r\n\r\n                            if (cellTemplate != undefined) {\r\n                                columnDefs[columnDefs.length - 1].template = cellTemplate;\r\n                            }\r\n                            else {\r\n                                columnDefs[columnDefs.length - 1].cellRenderer = cellRenderer ? cellRenderer : function (e) {\r\n                                    var columnValue, titleValue;\r\n                                    switch (e.colDef.formatterType) {\r\n                                        case 'link':\r\n                                            columnValue = titleValue = '<a>' + e.value + '</a>';\r\n                                            break;\r\n\r\n                                        case 'number':\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = titleValue = '<a>' + e.value + '</a>';\r\n                                            }\r\n                                            break;\r\n\r\n                                        case 'currency':\r\n                                            columnValue = titleValue = scope.currencyFormatter(e.value, undefined, true, e.colDef.defaultCurrency);\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = '<a>' + columnValue + '</a>';\r\n                                            }\r\n                                            break;\r\n\r\n                                        default:\r\n                                            columnValue = e.value === 0 || e.value === '0' ? '0' : (e.value == 'null' || e.value == null || e.value == '' ? '<span style=\"color: transparent;\">-</span>' : e.value);\r\n                                            titleValue = e.value;\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = '<a>' + columnValue + '</a>';\r\n                                            }\r\n                                            break;\r\n                                    }\r\n                                    if (e.value == 'null' || e.value == null || e.value == '') {\r\n                                        return '<span style=\"width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\">' + columnValue + '</span>';\r\n                                    }\r\n                                    else {\r\n                                        return '<span style=\"width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\" title=\"' + titleValue + '\">' + columnValue + '</span>';\r\n                                    }\r\n                                    //'<a style=\"white-space: normal;\">' + columnValue + '</a>' - To avoid text ellipsis\r\n                                };\r\n                            }\r\n                        }\r\n\r\n                        var tmpRowData = [];\r\n                        for (var i = 0; i < rowData.length; i++) {\r\n                            tmpRowData[i] = {};\r\n                            for (var j = 0; j < columnDefs.length; j++) {\r\n                                tmpRowData[i][columnDefs[j].field] = rowData[i][columnDefs[j].field]; // rowData[i][columnDefs[j].field] == 'null' || rowData[i][columnDefs[j].field] == null  || rowData[i][columnDefs[j].field] == '' ? '<span style=\"color: transparent;\">-</span>' : rowData[i][columnDefs[j].field];\r\n                            }\r\n                        }\r\n\r\n                        if (scope.angularGridConfig) {\r\n                            scope.angularGridConfig.columnDefs = columnDefs;\r\n                            scope.angularGridConfig.rowData = tmpRowData;\r\n                            scope.angularGridConfig.api.onNewRows();\r\n                        }\r\n                        else {\r\n                            scope.angularGridConfig = {\r\n                                columnDefs: columnDefs,\r\n                                rowData: tmpRowData,\r\n                                enableSorting: true,\r\n                                angularCompileRows: true,\r\n                                virtualPaging: true,\r\n                                enableColResize: true,\r\n                                angularCompileHeaders: scope.config && scope.config.angularCompileHeaders,\r\n                                headerCellRenderer: headerCellRenderer ? headerCellRenderer : function (e) {\r\n                                    return '<span style=\"width: 80%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\">' + e.colDef.displayName + '</span>';\r\n                                },\r\n                                cellClicked: onClick ? function (e) {\r\n                                    onClick({ dataMappingKey: e.colDef.field, value: e.value, rowIndex: e.rowIndex, rowData: rowData[e.rowIndex], clickable: e.colDef.clickable });\r\n                                } : undefined,\r\n                                rowHeight: rowHeight == undefined ? undefined : rowHeight\r\n                            };\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartGrid/smartGrid.html'\r\n        };\r\n    }]);\r\n})();\r\n/*\r\n * Inject required CSS\r\n */\r\n//var angularGridCSS = document.createElement(\"link\");\r\n//angularGridCSS.setAttribute(\"rel\", \"stylesheet\");\r\n//angularGridCSS.setAttribute(\"type\", \"text/css\");\r\n//angularGridCSS.setAttribute(\"href\", $('#blobURL').val()+'shared/libraries/angularGrid/angularGrid.css');\r\n//document.getElementsByTagName(\"head\")[0].appendChild(angularGridCSS);\r\n\r\n//var angularGridThemeCSS = document.createElement(\"link\");\r\n//angularGridThemeCSS.setAttribute(\"rel\", \"stylesheet\");\r\n//angularGridThemeCSS.setAttribute(\"type\", \"text/css\");\r\n//angularGridThemeCSS.setAttribute(\"href\", $('#blobURL').val()+'shared/libraries/angularGrid/theme-fresh.css');\r\n//document.getElementsByTagName(\"head\")[0].appendChild(angularGridThemeCSS);\r\n","angular.module('SMART2').directive('smartInfotip', ['$window', function ($window) {\r\n    \"use strict\";\r\n    var _lastOpenInfotip = {},\r\n    hideLastInfotip = function (hObj) {\r\n        if (_lastOpenInfotip.target && _lastOpenInfotip.target.hasClass('isInfotipVisible')) {\r\n            _lastOpenInfotip.target.removeClass('isInfotipVisible');\r\n            _lastOpenInfotip.infotip.find(\".infotip-popover\").addClass('hide-popover-element');\r\n            _lastOpenInfotip.infotip.find(\".infotip-popover-triangle\").addClass('hide-popover-element');\r\n            _lastOpenInfotip._ev.value = true;\r\n        }\r\n    };\r\n    $(document).click(function (evt) {\r\n        hideLastInfotip();\r\n     });\r\n    return {\r\n        restrict: 'A',\r\n        transclude: true,\r\n        scope:true,\r\n        link: function (scope, element, attrs) {\r\n            //the root div of the popup template\r\n            var popover_container = element.find('.infotip-popover-container'),\r\n                popover_container_parent = popover_container.parent(),\r\n                popover = element.find('.infotip-popover'), //the popover element\r\n                triangle = element.find('.infotip-popover-triangle'), //the small triangle attached with the popover\r\n                triangle_height, //vertical height of the triangle\r\n                triangle_diagonal, //base of the triangle\r\n                triangle_div_side = 15, //side of the triangle\r\n                triangle_rect_div_side = 30, //the div which has been rotated to make a triangle using the after pseudo class\r\n                infotipElement = element,\r\n                getPosition = popover_container_parent.css('position') === \"\" || popover_container_parent.css('position') === \"static\" ? \"relative\" : popover_container_parent.css('position'),\r\n                $win = angular.element($window),\r\n                bindOn = !attrs.bindOn ? 'click mouseover interesected' : attrs.bindOn;\r\n\r\n            popover_container_parent.css({ 'position': getPosition, 'z-index': '1', 'display': 'inline-block' });\r\n            //popover_container_parent.css('position', getPosition);\r\n            //popover_container_parent.css('display', 'inline-block');\r\n            triangle_height = Math.sqrt(triangle_div_side * triangle_div_side / 2);\r\n            triangle_diagonal = Math.sqrt(triangle_div_side * triangle_div_side * 2);\r\n            var mode = attrs.mode === '' || attrs.mode === undefined ? 'mouseover' : attrs.mode;\r\n            var closeOnClick = attrs.closeOnClick === undefined ?\r\n                                    (mode == 'click' ? true : false) :\r\n                                    (attrs.closeOnClick === 'true');\r\n\r\n            var closeOnMouseleave = attrs.closeOnMouseleave === undefined ?\r\n                                        (mode == 'mouseover' ? true : false) :\r\n                                        (attrs.closeOnMouseleave === 'true');\r\n\r\n            var hideOnDocHover = { value: attrs.hideOnDocHover == 'true' };\r\n            //return the path of the popover template\r\n            scope.getContentPopover = attrs.templateUrl;\r\n\r\n            scope.isTemplateUrl = attrs.templateUrl ? true : false;\r\n\r\n            //depending upon the position specified, attached the appropriate class to the popover \r\n            var getTriangleClass = function () {\r\n                return 'infotip-popover-triangle-' + attrs.position;\r\n            }\r\n\r\n            var hideTooltip = function () {\r\n                setTimeout(function () {\r\n                    if (!onHoverablearea() && hideOnDocHover.value) {\r\n                        popover.addClass('hide-popover-element');\r\n                        triangle.addClass('hide-popover-element');\r\n                    }\r\n                }, 0);\r\n            };\r\n            var onHoverablearea = function () {\r\n                return (popover.is(':hover') || infotipElement.is(':hover') || triangle.is(':hover'));\r\n            };\r\n\r\n            scope.triangleClass = getTriangleClass();\r\n            if (closeOnMouseleave) {\r\n                if (hideOnDocHover.value) {\r\n                    infotipElement.bind('mouseleave blur', function () {\r\n                         hideTooltip();\r\n                    });\r\n                    popover.bind('mouseleave blur', function () {\r\n                        hideTooltip();\r\n                    });\r\n                    triangle.bind('mouseleave blur', function () {\r\n                        hideTooltip();\r\n                    });\r\n                }\r\n                else {\r\n                    infotipElement.bind('mouseleave blur ', function () {\r\n                        popover.addClass('hide-popover-element');\r\n                        triangle.addClass('hide-popover-element');\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (mode != 'click' && closeOnClick) {\r\n                infotipElement.bind('click', function () {\r\n                    popover.addClass('hide-popover-element');\r\n                    triangle.addClass('hide-popover-element');\r\n                });\r\n            }\r\n\r\n            popover.on('click', function (evt) {\r\n                evt.stopPropagation();\r\n            });\r\n\r\n            //Hide infotip on scroll\r\n            $win.bind('scroll', function (e) {\r\n                popover.addClass('hide-popover-element');\r\n                triangle.addClass('hide-popover-element');\r\n            });\r\n\r\n            //listen for click on the directive element\r\n            infotipElement.bind(bindOn, function (evt) {\r\n                evt.stopImmediatePropagation();\r\n               var _this = $(this),\r\n                parent_height = _this.outerHeight(),\r\n                parent_width, popover_height, popover_width,\r\n                elementOffsetTop = element.offset().top + 23,\r\n                elementOffsetLeft = element.offset().left,\r\n                leftPos;\r\n\r\n                if (evt.type == \"click\") {\r\n                    hideLastInfotip();\r\n                    hideOnDocHover.value = false;\r\n                    _this.addClass('isInfotipVisible');\r\n                    _lastOpenInfotip.target = _this;\r\n                    _lastOpenInfotip.infotip = popover_container;\r\n                    _lastOpenInfotip._ev = hideOnDocHover;\r\n                };\r\n\r\n                if (mode == \"canvas\") {\r\n                    elementOffsetTop = 100;\r\n                    elementOffsetLeft = 100;\r\n                    parent_height = 100;\r\n                }\r\n\r\n                //move the popover container to the bottom of the directive element\r\n                popover_container.css(\"top\", parent_height)//.style.top = parent_height + 'px';\r\n                parent_width = _this.outerWidth();\r\n\r\n                //'mouseover' mode\r\n                if (popover.hasClass('hide-popover-element') && attrs.message != '') {\r\n                    popover.removeClass('hide-popover-element');\r\n                    triangle.removeClass('hide-popover-element');\r\n                }\r\n\r\n                //if the template is supplied instead of templateUrl, set the popover innerHTML to the string passed in the 'template' attribute\r\n                if (attrs.message) {\r\n                    var templateElement = _this.find('.infotip-popover-template');\r\n                    templateElement.html(attrs.message);\r\n                }\r\n\r\n                var setDynamicInfotipPosition = function (position) {\r\n                    _this.find('.' + scope.triangleClass).removeClass(scope.triangleClass);\r\n                    triangle.removeClass(scope.triangleClass);\r\n                    attrs.position = position;\r\n                    scope.triangleClass = getTriangleClass();\r\n                    triangle.addClass(scope.triangleClass);\r\n                }\r\n\r\n                attrs.position = attrs.position === '' || attrs.position === undefined ? 'top' : attrs.position;\r\n\r\n                //function to set dynamic position for popover and triangle\r\n                var getDyanamicPositions = function () {\r\n                    var popoverOffset = popover.offset(),\r\n                                        bodyScrolled = $(\"body\").scrollTop() || $(\"html\").scrollTop();\r\n\r\n                    if (popoverOffset.left + popover.width() > $(window).width()) {\r\n                        leftPos = true;\r\n                        setDynamicInfotipPosition('left');\r\n                    } else if (popoverOffset.left < (0 || 10)) {\r\n                        setDynamicInfotipPosition('right');\r\n                    } else if (popover[0].getBoundingClientRect().top < 0) {\r\n                        setDynamicInfotipPosition('bottom');\r\n                    } else if ((popover[0].getBoundingClientRect().top + popover.height()) >= $(window).height()) {\r\n                        setDynamicInfotipPosition('top');\r\n                    } \r\n                };\r\n\r\n                //check position and calculate position for appending popover and triangle\r\n                var setInfotipPosition = function () {\r\n                    popover_height = popover.outerHeight();\r\n                    popover_width = popover.outerWidth();\r\n\r\n                    if (mode == \"canvas\") {\r\n                        popover_height = 100;\r\n                        popover_width = 100;\r\n                        if (infotipElement.attr(\"interesect\")) {\r\n                            var intersect = JSON.parse(infotipElement.attr(\"interesect\")),\r\n                                templateElement;\r\n\r\n                            popover.css({\r\n                                top: (intersect.y - triangle_height - 100),\r\n                                left: (intersect.x)\r\n                            });\r\n                            triangle.css({\r\n                                top: (intersect.y - triangle_height - 100),\r\n                                left: (intersect.x - triangle_rect_div_side)\r\n                            });\r\n\r\n                        }\r\n                        templateElement = _this.find('.infotip-popover-template');\r\n                        templateElement.html(infotipElement.attr(\"message\"));\r\n                        return;\r\n                    }\r\n\r\n                    switch (attrs.position) {\r\n                        case 'top':\r\n                            popover.css({\r\n                                top: (-parent_height - popover_height - triangle_height),\r\n                                left: ((parent_width - popover_width) / 2)\r\n                            });\r\n                            triangle.css({\r\n                                top: (-parent_height - triangle_height),\r\n                                left: ((parent_width - triangle_rect_div_side) / 2)\r\n                            });\r\n                            break;\r\n\r\n                        case 'bottom':\r\n                            popover.css({\r\n                                top: triangle_height,\r\n                                left: ((parent_width - popover_width) / 2)\r\n                            });\r\n                            triangle.css({\r\n                                top: -(triangle_rect_div_side - triangle_height),\r\n                                left: ((parent_width - triangle_rect_div_side) / 2)\r\n                            });\r\n                            break;\r\n\r\n                        case 'right':\r\n                            popover.css({\r\n                                top: ((parent_height - popover_height) / 2 - parent_height),\r\n                                left: parent_width + triangle_height\r\n                            });\r\n                            triangle.css({\r\n                                top: ((parent_height - triangle_rect_div_side) / 2 - parent_height),\r\n                                left: (parent_width - (triangle_rect_div_side - triangle_height))\r\n                            });\r\n                            break;\r\n\r\n                        case 'left':\r\n                            if (leftPos) {\r\n                                popover.css({ left: -(popover_width + triangle_div_side) })\r\n                            }\r\n                            popover.css({\r\n                                top: ((parent_height - popover_height) / 2 - parent_height),\r\n                                right: triangle_height\r\n                            });\r\n                            triangle.css({\r\n                                top: ((parent_height - triangle_rect_div_side) / 2 - parent_height),\r\n                                left: -triangle_height\r\n                            });\r\n                            if (attrs.customStyle == 'true') {\r\n                                popover.css({ left: -(popover_width + triangle_div_side - 5) });\r\n                                triangle.css({\r\n                                    top: ((parent_height - triangle_rect_div_side) / 2 - parent_height + 5),\r\n                                });\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                //Append infotip to body only when isFixed = 'true'\r\n                var appendInfotipToBody = function () {\r\n                    if (attrs.isFixed == 'true') {\r\n                        if (!popover_container.data('appended')) {\r\n                            angular.element('body').append(popover_container.data('appended', true));\r\n                        }\r\n                        if (attrs.customStyle == 'true') {\r\n                            popover_container.addClass('fullWidthInfo');\r\n                        }\r\n                        if (attrs.showFullTip == 'true') {\r\n                            popover_container.addClass('showFullTip');\r\n                        }\r\n                        var templateElementBody = popover_container.find('.infotip-popover-template');\r\n                        templateElementBody.html(attrs.message);\r\n                        popover_container.css({ 'top': elementOffsetTop + 'px', 'left': elementOffsetLeft + 'px' });\r\n                    }\r\n                }\r\n\r\n                setInfotipPosition();\r\n                appendInfotipToBody();\r\n                getDyanamicPositions();\r\n                setInfotipPosition();\r\n                appendInfotipToBody();\r\n            });\r\n        },\r\n        templateUrl: 'shared/directives/uiElements/smartInfotip/smartInfotipTemplate.html'\r\n    }\r\n}]);","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartList', ['$parse', '$window', 'commonUtilities', function ($parse, $window, commonUtilities) {\r\n        return {\r\n            restrict: 'AE',\n            replace: false,\n            scope: true,\n            link: function (scope, element, attrs) {\r\n                scope.styleClass = 'collection';\n                scope.itemClass = 'collection-item';\n                // evaluating callback for list\n                var clickCallback = $parse(attrs.clickCallback);\n\n                attrs.$observe('selectiveDisplayConfig', function (displayConfig) {\r\n                    if (displayConfig) {\r\n                        scope.listDisplayConfig = scope.$eval(displayConfig);\r\n                    } else {\r\n                        scope.listDisplayConfig = { \"showIcon\": true, \"showAction\": false, \"importantAttribLimit\": 5 };\r\n                    }\r\n\r\n                });\n\n                //Loacal list Click handler\n                scope.listClickHandler = function (item) {\r\n                    if (angular.isFunction(clickCallback)) {\r\n                        clickCallback(scope, { e: item });\r\n                    }\r\n                };\n\n                attrs.$observe(\"height\", function (value) {\r\n                    if (value) {\r\n                        scope.listHeight = value;\r\n                    }\r\n                });\n\n                attrs.$observe('model', function (value) {\r\n                    if (value) {\r\n                        scope.dataModel = scope.$eval(value);\r\n                    }\r\n                });\n\n\n                attrs.$observe('styleClass', function (value) {\r\n                    scope.styleClass = value;\r\n                });\n\n                attrs.$observe('itemClass', function (value) {\r\n                    scope.itemClass = value;\r\n                });\n\n                attrs.$observe('template', function (value) {\r\n                    scope.template = value;\r\n                });\n                var lazyLoadingCallback = $parse(attrs.lazyLoadCallback);\n                var backToTopCallback = $parse(attrs.backToTopCallback);\n                var scrolledCallback = $parse(attrs.scrollInProgress);\n\n                scope.scrollEndCallback = function () {\r\n                    if (angular.isFunction(lazyLoadingCallback)) {\r\n                        lazyLoadingCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.scrollToTopCallback = function () {\r\n                    if (angular.isFunction(backToTopCallback)) {\r\n                        backToTopCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.scrollInProgress = function () {\r\n                    if (angular.isFunction(scrolledCallback)) {\r\n                        scrolledCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.actionElementID = commonUtilities.uniqueIDGenerator;\r\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartList/smartListTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartListLookup', ['$rootScope', '$timeout', 'ScrollTo', 'lookup', 'debouncer', function ($rootScope, $timeout, ScrollTo, lookup, debouncer) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                callAddNew: '&',\r\n                lookupOpen: '&',\r\n                lookupHide: '&',\r\n                searchtextKeyUp: '&',\r\n                readonly: '@',\r\n                displayformat: '@',\r\n                multiselect: '@',\r\n                addnew: '@',\r\n                titleofmodel: '@',\r\n                selecttypeoption: '='\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                var multiselect = (scope.multiselect == undefined || scope.multiselect == null) ? false : scope.multiselect == \"true\" ? true : false;\r\n                var addnew = (scope.addnew == undefined || scope.addnew == null) ? false : scope.addnew == \"true\" ? true : false;\r\n                //var readonly = (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false;\r\n                var formatedArray = eval(scope.displayformat);\r\n                scope.valuetoshow = [\"\"];\r\n                scope.titleofmodel = (scope.titleofmodel == undefined || scope.titleofmodel == null) ? 'Title Of Model' : scope.titleofmodel;\r\n                scope.toolTip = \"\";\r\n                var isInfoTipEnable = attrs.showInfoTip == 'true' ? true : false,\r\n                    checkInfoToolTip = function () {\r\n                        var infotipData = scope.ngModel;\r\n                        \r\n\r\n                        if (isInfoTipEnable) {\r\n                            scope.toolTip = _.pluck(scope.ngModel, \"name\").join('</br>');\r\n                        } \r\n                    };\r\n\r\n                function generateName(obj) {\r\n                    var label = \"\",\r\n                        formattedLen = formatedArray.length;\r\n                    for (var j = 0; j < formattedLen; j++) {\r\n                        if (obj.hasOwnProperty(formatedArray[j])) {\r\n                            label = label + \" \" + obj[formatedArray[j]];\r\n                        }\r\n                    }\r\n                    return label;\r\n                }\r\n\r\n               var deregisterWatchModel = scope.$watch(\"ngModel\", function (newVal) {\r\n                    scope.valuetoshow = [\"\"];\r\n                    if (multiselect) {\r\n                        if (angular.isDefined(newVal)) {\r\n                            if (newVal.length > 0) {\r\n                                scope.valuetoshow = [generateName(newVal[0])];\r\n                                var totalEl = newVal.length;\r\n                                if (totalEl > 1) {\r\n                                    scope.valuetoshow.push(\"+\" + (totalEl - 1) + \" More\");\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        scope.valuetoshow = [generateName(newVal)];\r\n                    }\r\n                    if (scope.valuetoshow[0] == \"\") {\r\n                        scope.isActive = false;\r\n                    } else {\r\n                        scope.isActive = true;\r\n                    }\r\n                    checkInfoToolTip();\r\n                });\r\n\r\n                scope.openLookup = function () {\r\n                    debouncer.add(function () {\r\n                        if (scope.readonly === 'true' && !scope.valuetoshow[1]) return false;\r\n                        if ($.isFunction(scope.lookupOpen)) {\r\n                            scope.lookupOpen();\r\n                        }\r\n                        var lookupConfig = {\r\n                            modelData: scope.ngModel,\r\n                            config: {\r\n                                mutliselect: multiselect,\r\n                                displayProperties: formatedArray,\r\n                                options: scope.options,\r\n                                addnew: addnew,\r\n                                isMandatory: scope.isMandatory,\r\n                                onKeyUp: attrs.searchtextKeyUp ? scope.searchtextKeyUp : '',\r\n                                titleOfModel: scope.titleofmodel,\r\n                                selectTypeOption: scope.selecttypeoption,\r\n                                readonly: (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false\r\n                            }\r\n                        }\r\n                        var cancelTimer = $timeout(function () {\r\n                            lookup.open(lookupConfig, function (response) {\r\n\r\n                                if (response.addnew) {\r\n                                    if ($.isFunction(scope.callAddNew)) {\r\n                                        scope.callAddNew();\r\n                                    }\r\n                                }\r\n                                scope.ngModel = response.result;\r\n                                scope.defaultselectiontext = response.defaultSelectionText;\r\n                                scope.selecttypeoption = response.selectTypeOption;\r\n                                if ($.isFunction(scope.lookupHide)) {\r\n                                    scope.lookupHide({ data: response });\r\n                                }\r\n                            });\r\n                            $timeout.cancel(cancelTimer);\r\n                            cancelTimer = null;\r\n                        });\r\n                    }, 300);\r\n                }\r\n\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                scope.$on('$destroy', function () {\r\n                    deregisterWatchModel();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartListLookup/smartListLookupTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('lookup', ['$rootScope', function ($rootScope) {\r\n        var Obj = {};\r\n        Obj.onCallback = undefined;\r\n        Obj.on = function (callback) {\r\n            Obj.onCallback = callback;\r\n        };\r\n\r\n        Obj.open = function (config, callback) {\r\n            this.config = config;\r\n            this.broadcastItem();\r\n            this.resultCallBack = function (result) {\r\n                callback(result);\r\n            };\r\n        };\r\n        Obj.optionUpdate = function (option) {\r\n            if (typeof this.config != 'undefined') {\r\n                this.config.config.options = option;\r\n            }\r\n        };\r\n        Obj.getConfig = function () {\r\n            return this.config;\r\n        };\r\n        Obj.setTempModel = function (arg) {\r\n            this.tempModel = arg;\r\n        };\r\n        Obj.getTempModel = function () {\r\n            return this.tempModel;\r\n        };\r\n        Obj.onScrollEnd = function (callback) {\r\n            this.onScrollEndCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.onScrollTop = function (callback) {\r\n            this.onScrollTopCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.onScrollInProgress = function (callback) {\r\n            this.onScrollInProgressCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.broadcastItem = function () {\r\n            angular.isFunction(Obj.onCallback) && Obj.onCallback();\r\n        };\r\n        return Obj;\r\n    }]);\r\n\r\n    var countForTheProprty = 0;\r\n    angular.module('SMART2').directive('smartLookup', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', function ($rootScope, $timeout, $translate, ScrollTo, lookup) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.lookupLoaderConfig = {\r\n                    plain: true,\r\n                    center: true,\r\n                    message: \"Loading...\"\r\n                };\r\n\r\n                scope.searchText = { title: \"\" };\r\n                scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                function isObjectEquals(obj1, obj2) {\r\n                    var checkObj2 = function () {\r\n                        for (var i in obj2) { }\r\n                        return i == undefined ? false : true;\r\n                    }\r\n                    if (obj2 == '' || obj2 == null || checkObj2() === false) {\r\n                        return false;\r\n                    }\r\n                    for (var i in obj2) {\r\n                        if (obj2.hasOwnProperty(i)) {\r\n                            if (!obj1.hasOwnProperty(i)) return false;\r\n                            if (obj2[i] != obj1[i]) return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                function containsObject(obj, list, catalogObj) {\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        if (catalogObj) {\r\n                            if (obj.UserId == list[i]) {\r\n                                return true;\r\n                            };\r\n                        } else {\r\n                            if (isObjectEquals(obj, list[i])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                scope.smartScrollEnd = function () {\r\n                    if (angular.isFunction(lookup.onScrollEndCall)) {\r\n                        lookup.onScrollEndCall();\r\n                    };\r\n                    $timeout(function () {\r\n                        if (scope.isLazyLoadingEnabled && scope.limitToCount <= scope.options.length)\r\n                            scope.limitToCount = scope.limitToCount + 35;\r\n                    });\r\n                };\r\n                scope.smartScrollTop = function () {\r\n                    if (angular.isFunction(lookup.onScrollTopCall)) {\r\n                        lookup.onScrollTopCall();\r\n                    };\r\n                };\r\n                scope.smartScrollInProgress = function () {\r\n                    if (angular.isFunction(lookup.onScrollInProgressCall)) {\r\n                        lookup.onScrollInProgressCall();\r\n                    };\r\n                };\r\n                scope.searchText = { title: \"\" };\r\n                scope.selectdCount = 0;\r\n                scope.model = [];\r\n                scope.options = [];\r\n                scope.displayProperties = [\"name\"];\r\n                scope.selectTypeOptionWith = '';\r\n                scope.propKey = \"\";\r\n                countForTheProprty++;\r\n                function generateName(obj) {\r\n                    var label = \"\";\r\n                    if (scope.displayProperties.length == 1) {\r\n                        label = obj[scope.displayProperties[0]];\r\n                    }\r\n                    else {\r\n                        for (var j = 0; j < scope.displayProperties.length; j++) {\r\n                            if (scope.propSeparation !== undefined && j !== scope.displayProperties.length - 1) {\r\n                               label = label + \" \" + obj[scope.displayProperties[j]] + \" \" + scope.propSeparation;\r\n                            }\r\n                            else { \r\n                                label = label + \" \" + obj[scope.displayProperties[j]];\r\n                            }\r\n                        }\r\n                    }\r\n                    return label;\r\n              \r\n                }\r\n                var stopInit = false;\r\n                function initialize() {\r\n                    //migrate two array with flag\r\n                    scope.propKey = \"counterProp\" + countForTheProprty;\r\n                    if (scope.options == undefined || scope.config.options == undefined) {\r\n                        scope.options = [];\r\n                    } else {                      \r\n                            scope.options = scope.config.options;                        \r\n                    }\r\n                    if (scope.multiple) {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!scope.options[i].hasOwnProperty(\"ischecked\") && !stopInit) {\r\n                                if (containsObject(scope.options[i], scope.model, scope.isObjectCompareCatalog)) {\r\n                                    scope.options[i].ischecked = true;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                } else {\r\n                                    scope.options[i].ischecked = false;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                }\r\n                                if (scope.descriptionKey) {\r\n                                    scope.options[i].description = scope.options[i][scope.descriptionKey];\r\n                                }\r\n                            }                           \r\n                        }\r\n                        if (scope.minMultiselect) {\r\n                            checkSelectedItems();\r\n                        }\r\n                    } else {\r\n\t\t\t\t\t\tscope.itemSelected = false; // make done button disabled\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!stopInit) {\r\n                                if (isObjectEquals(scope.options[i], scope.model)) {\r\n                                    scope.options[i].ischecked = true;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n\t\t\t\t\t\t\t\t\tscope.itemSelected = true; // make done button active\r\n                                } else {\r\n                                    scope.options[i].ischecked = false;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                }\r\n                                if (scope.descriptionKey) {\r\n                                    scope.options[i].description = scope.options[i][scope.descriptionKey];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.limitToCount = scope.isLazyLoadingEnabled ? 35 : scope.options.length;\r\n                };\r\n                function setLoader(e) {\r\n                    if (e.target.value.trim() != \"\") {\r\n                        scope.showLoader = true;\r\n                        scope.showSearchLoader = true;\r\n                    }\r\n\r\n                    if (scope.config.options.length == 0) {\r\n                        scope.showLoader = false;\r\n                    }\r\n\r\n                    element.find(\"#lookup-content-wrpper .scroll-content\").scrollTop(0);\r\n                    if (scope.clearModelOnEnter) {\r\n                        scope.model = [];\r\n                    }\r\n                }\r\n                scope.searchTextKeyUpFn = function (e) {\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: { text: e.target.value, type: \"textfield\", \"e\": e } });\r\n                    }\r\n                    if (e.keyCode === 13 && (scope.stopFilterOnKey === \"true\" || scope.stopFilterOnKey === true) && (scope.requireLoader === \"true\" || scope.requireLoader === true)) {\r\n                        if (scope.searchCount > 0 && e.target.value.length >= scope.searchCount) {\r\n                            setLoader(e);\r\n                        }\r\n                        else if (typeof (scope.searchCount) === \"undefined\") {\r\n                            setLoader(e);\r\n                        }\r\n                    }\r\n                    scope.cancelTitle = e.target.value == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                }\r\n\r\n                var regEx = new RegExp(\"\", \"ig\");\r\n                function scrollbarReload() {\r\n                    if (scope.scrollAlwaysTopOnload == true && scope.scrollReload == false) {\r\n                        scope.scrollReload = true\r\n                    } else if (scope.scrollAlwaysTopOnload == true && scope.scrollReload == true) {\r\n                        scope.scrollReload = false\r\n                    }\r\n                };\r\n                scope.triggerFlag = false;\r\n                var returnObj = {};\r\n                lookup.on(function () {\r\n                    scope.config = lookup.config.config;\r\n                    scope.minMultiselect = scope.config.minMultiselect;\r\n                    scope.label = scope.config.label;\r\n                    scope.isSearchOpen = false;\r\n                    scope.multiple = false;\r\n                    scope.addnew = false;\r\n                    scope.readonly = false;\r\n                    scope.multiple = typeof (scope.config.mutliselect) == \"undefined\" ? false : scope.config.mutliselect;\r\n                    scope.addnew = typeof (scope.config.addnew) == \"undefined\" ? false : scope.config.addnew;\r\n                    scope.readonly = typeof (scope.config.readonly) == \"undefined\" ? false : scope.config.readonly;\r\n                    scope.titleOfModel = typeof (scope.config.titleOfModel) === \"undefined\" ? $translate.instant('titleOfModel') : scope.config.titleOfModel;\r\n                \t/*  Default Selection scope variable */\r\n                    scope.config.defaultSelectOption = typeof (scope.config.defaultSelectOption) === \"undefined\" ? false : scope.config.defaultSelectOption;\r\n                    scope.config.defaultSelectionText = typeof (scope.config.defaultSelectionText) === \"undefined\" ? \"\" : scope.config.defaultSelectionText;\r\n                    scope.config.selectTypeOption = typeof (scope.config.selectTypeOption) === \"undefined\" ? null : scope.config.selectTypeOption;\r\n                    scope.selectiontext = angular.copy(scope.config.selectTypeOption);    \r\n                    scope.model = lookup.config.modelData;\r\n                    scope.isLazyLoadingEnabled = scope.config.isLazyLoadingEnabled;\r\n                    \r\n                    if (angular.isDefined(scope.model) && (scope.model != \"\" || angular.equals(scope.model, {}) )) {\r\n                        if (scope.multiple) {\r\n                            scope.selectdCount = scope.model.length || 0;\r\n                        }\r\n                        else if (scope.model.hasOwnProperty('name') || scope.model.hasOwnProperty('value') || scope.model.hasOwnProperty('id')) {\r\n                            scope.selectdCount = 1;\r\n                        }\r\n                    } else {\r\n                        scope.selectdCount = 0;\r\n                    }\r\n                    scope.options = scope.config.options;\r\n                    scope.limitToCount = scope.isLazyLoadingEnabled ? 35 : scope.options.length;\r\n                    scope.displayProperties = scope.config.displayProperties.length > 0 ? scope.config.displayProperties : scope.displayProperties;\r\n                    scope.descriptionKey = scope.config.descriptionKey;\r\n                    scope.propSeparation = scope.config.propSeparation;\r\n                    scope.scrollAlwaysTopOnload = (scope.config.scrollAlwaysTopOnload === undefined) ? false : scope.config.scrollAlwaysTopOnload;\r\n                    scope.scrollReload = scope.scrollAlwaysTopOnload ? false : true;\r\n                    scope.selectTypeOptionWith = scope.config.selectTypeOptionWith ? scope.config.selectTypeOptionWith : scope.selectTypeOptionWith;\r\n                    scope.searchFilterKey = scope.config.searchFilterKey; // added for filter on key basis\r\n                    scope.stopFilterOnKey = scope.config.stopFilterOnKey; // added for stop filtering on keydown\r\n                    scope.searchCount = scope.config.searchCount;\r\n                    scope.requireLoader = scope.config.requireLoader;\r\n                    if (scope.requireLoader == \"true\") {\r\n                        scope.showLoader = true;\r\n                    }\r\n                    scope.hideSelectedCount = scope.config.hideSelectedCount;\r\n                    scope.isObjectCompareCatalog = scope.config.isObjectCompareCatalog;\r\n                    scope.clearModelOnEnter = scope.config.clearModelOnEnter;\r\n                    initialize();\r\n                    scope.triggerFlag = true;\r\n                    scrollbarReload();\r\n                    $timeout(function () {\r\n                    element.find('.lookupPopupContent input[checked=\"checked\"]').prop('checked', true);            \r\n                });\r\n                    scope.$watch(function () {\r\n                        return lookup.config.config.options;\r\n                    },\r\n                    function (newVal, oldVal) {\r\n                        initialize();\r\n                        if (newVal.length > 0) {\r\n                            scope.showLoader = false;\r\n                        }\r\n\r\n                        if (newVal.length == 0 && scope.showSearchLoader == true) {\r\n                            scope.showLoader = false;\r\n                            scope.showSearchLoader = false;\r\n                        }\r\n                    }, true);\r\n                    returnObj.addnew = false;\r\n                    returnObj.result = scope.model;\r\n                    returnObj.btnType = '';\r\n                    returnObj.defaultSelectionText = scope.config.defaultSelectionText.trim(),\r\n                    returnObj.selectTypeOption = scope.config.selectTypeOption;\r\n                    returnObj.errorModel = scope.config.errorModel;\r\n                    scope.defaultError = false;\r\n\r\n                    if (scope.selectdCount == 0 && scope.$eval(scope.config.isMandatory))\r\n                    \tscope.itemSelected = false;\r\n                    else\r\n                        scope.itemSelected = true;\r\n\r\n                    scope.isLimitmultiselect = scope.minMultiselect ? scope.minMultiselect.event : false; scope.minMultiselect\r\n\r\n                });\r\n\r\n                scope.searchToggle = function () {\r\n                    if (scope.isSearchOpen == false) {\r\n                        scope.isSearchOpen = true;\r\n                        $timeout(function () {\r\n                            if ($(\"#searchTextbox\").find(\"input\").length) {\r\n                                $(\"#searchTextbox\").find(\"input\").focus();\r\n                            } else {\r\n                                $(\"#searchTextbox\").focus();\r\n                            }\r\n                        });\r\n                    }\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: { text: scope.searchText.title, type: \"search\" } });\r\n                    }\r\n                    scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                };\r\n                scope.closeSearch = function () {\r\n                    if (scope.searchText.title != \"\") {\r\n                        scope.searchText.title = \"\";\r\n                    } else {\r\n                        scope.isSearchOpen = false;\r\n                        $(\"#btnShowSearch\").focus();\r\n                    }\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: {text: scope.searchText.title, type : \"close\" } });\r\n                    }\r\n                    scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                };\r\n\r\n            \t/*  triggers which default radio btn click */\r\n                scope.ondefaultSelectItem = function (obj) {\r\n                \tobj.ischecked = true;\r\n                \tscope.onChangeItem(obj);\r\n                \tscope.defaultError = false;\r\n                \tscope.config.errorModel = '';\r\n                };\r\n                var checkSelectedItems = function () {\r\n                    if (scope.selectdCount >= parseInt(scope.minMultiselect.value)) {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!scope.options[i].ischecked) {\r\n                                scope.options[i].isdisable = true;\r\n                            } else {\r\n                                scope.options[i].isdisable = false;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            scope.options[i].isdisable = false;\r\n                        }\r\n                    }\r\n                }\r\n                scope.optionUnSelected = [];\r\n                scope.onChangeItem = function (obj) {\r\n                    if (scope.multiple) {\r\n                \t\tif (obj.ischecked) {\r\n                \t\t\tscope.selectdCount++;\r\n                \t\t} else {\r\n                \t\t    scope.selectdCount--;\r\n                \t\t    scope.optionUnSelected.push(obj);\r\n\r\n                \t\t    if (scope.$eval(scope.config.isDefaultMandatory) && obj[scope.propKey] === scope.config.defaultSelectionText) {\r\n                \t\t        scope.config.defaultSelectionText = ''\r\n                \t\t    }\r\n                \t\t}\r\n                \t\tif (scope.selectdCount == 0 && scope.$eval(scope.config.isMandatory)) {\r\n                \t\t\tscope.itemSelected = false;\r\n                \t\t\tscope.config.errorModel = $translate.instant(\"selectValueErrMsg\");\r\n                \t\t}\r\n                \t\telse {\r\n                \t\t\tscope.itemSelected = true;\r\n                \t\t\tscope.config.errorModel = '';\r\n                \t\t}\r\n                \t\tif (scope.minMultiselect && scope.minMultiselect.event) {\r\n                \t\t    checkSelectedItems();\r\n                \t\t}\r\n                \t} else {\r\n                \t\tscope.model = obj;\r\n                \t\tscope.itemSelected = true;\r\n                \t\tscope.config.errorModel = '';\r\n                \t\tinitialize();\r\n                \t}\r\n                };\r\n                \r\n                function cleanData() {\r\n                \tstopInit = true;\r\n                \tfor (var i = 0; i < scope.options.length; i++) {\r\n                \t\tdelete scope.options[i].ischecked;\r\n                \t\tdelete scope.options[i][scope.propKey];\r\n                \t}\r\n                \t$timeout(function () {\r\n                \t\tstopInit = false;\r\n                \t}, 500);\r\n                };\r\n                scope.defaultError = false;\r\n\r\n                scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n\r\n                scope.selectionCancel = function () {\r\n                    returnObj.btnType = 'cancel';\r\n                }\r\n                scope.selectionDone = function () {\r\n                    returnObj.UnSelectedResult = [];\r\n                \tif (!scope.itemSelected && scope.$eval(scope.config.isMandatory)) {\r\n                \t\treturn;\r\n                \t}\r\n                \tif (scope.$eval(scope.config.isDefaultMandatory) && scope.config.defaultSelectionText == '') {\r\n                \t\tscope.defaultError = true;\r\n                \t\tscope.config.errorModel = $translate.instant(\"markPaymentErrMsg\");\r\n                \t\treturn;\r\n                \t}\r\n                    if (scope.multiple) {\r\n                        var result = [];\r\n                        stopInit = true;\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            delete scope.options[i][scope.propKey];\r\n                            if (scope.options[i].ischecked) {\r\n                            \tdelete scope.options[i].ischecked;\r\n\r\n                            \t/*  Default Selection check point */\r\n                                if (scope.config.defaultSelectionText.trim() === scope.options[i].name) {\r\n                                \tresult.unshift(scope.options[i]);\r\n                                } else {\r\n                                \tresult.push(scope.options[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                        cleanData();\r\n                        $timeout(function () {\r\n                            stopInit = false;\r\n                        }, 500);\r\n                    }\r\n                    else {\r\n                        stopInit = true;\r\n                        delete scope.model.ischecked;\r\n                        delete scope.model[scope.propKey];\r\n                        result = scope.model;\r\n                        if (scope.config.selectTypeOption != null) {\r\n                            scope.config.selectTypeOption.selectiontext = scope.selectiontext.selectiontext;\r\n                        }\r\n                        cleanData();\r\n                        $timeout(function () {\r\n                            stopInit = false;\r\n                        }, 500)\r\n                    }\r\n\r\n                    returnObj.result = result;\r\n                    returnObj.UnSelectedResult = scope.optionUnSelected;\r\n                    scope.optionUnSelected = [];\r\n\r\n                    returnObj.btnType = 'save';\r\n                    returnObj.defaultSelectionText = scope.config.defaultSelectionText.trim();\r\n                    returnObj.selectTypeOption = scope.config.selectTypeOption;\r\n                    returnObj.errorModel = scope.config.errorModel;\r\n                    scope.callbackOnHide();\r\n                }\r\n                scope.addNew = function () {\r\n                    cleanData();\r\n                    returnObj.addnew = true;\r\n                    scope.triggerFlag = false;\r\n                    scrollbarReload();\r\n                }\r\n\r\n                //Popup hide/show flag\r\n                scope.callbackOnHide = function (e) {\r\n                    scope.triggerFlag = false;\r\n                    scrollbarReload();\r\n                    scope.searchText.title = \"\";\r\n                    if (scope.isLazyLoadingEnabled)\r\n                    scope.limitToCount = 35;\r\n                    scope.isSearchOpen = false;\r\n                    //cleanData() comment this and add in manually due to avoid timeout checkbox issue;\r\n                    stopInit = true;\r\n                    for (var i = 0; i < scope.options.length; i++) {\r\n                        delete scope.options[i].ischecked;\r\n                        delete scope.options[i][scope.propKey];\r\n                    }\r\n                    $timeout(function () {\r\n                        stopInit = false;\r\n                    });\r\n\r\n                    /*  Return Default Selection Object */\r\n                    lookup.resultCallBack(returnObj);\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartLookup/smartLookupTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    var multiSelectId = 0;\r\n    angular.module('SMART2').directive('smartMultiselect', ['$timeout', '$translate', 'RuleEngine', function ($timeout, $translate, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModel: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                onChange: '&',\r\n                onSelect: '&',\r\n                onBlur: '&',\r\n                disable: '@',\r\n                readonly: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                removable: '@',\r\n                autocomplete: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var options, filterKeys;\r\n                scope.defaultText = \"\";\r\n                var disableBlurEvent = true;\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.multiSelectId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    multiSelectId += multiSelectId;\r\n                    scope.multiSelectId = 'multiselect-' + multiSelectId;\r\n                }\r\n                scope.labelForMultiSelectId = 'label-for-' + scope.multiSelectId;\r\n                scope.displayformat = scope.displayformat ? scope.displayformat : '{title}';\r\n                var modelConfig = scope.$watch('ngModel', function (newValue) {\r\n                    if (newValue) {\r\n                         scope.selectedOptions = newValue;\r\n                    }\r\n                   \r\n                });\r\n\r\n                scope.multiSelectFocus = function () {\r\n                    if (!scope.$eval(scope.disable) && !scope.$eval(scope.readonly))\r\n                        $(\"#\" + scope.multiSelectId).focus();\r\n                };\r\n\r\n                scope.setDisplayFormat = function (item) {\r\n                    var displayArray = scope.displayformat.substring(1, scope.displayformat.length - 1);\r\n                    displayArray = displayArray.replace(/  +/g, ' ');\r\n                    var valu = \"\";\r\n                    var arrayD = displayArray.split('} {'), arrDLen = arrayD.length;\r\n                    for (var i = 0; i < arrDLen; i++) {\r\n                        valu += item[arrayD[i]] + \" \";\r\n                    }\r\n                    return valu;\r\n                }\r\n                var currentSelectForDelete = scope.ngModel.length;\r\n\r\n             \r\n                scope.ngKeyDown = function (event) {\r\n\r\n                    var evntKeyCode = event.keyCode;\r\n                    if (evntKeyCode === 40 && event.target.value == '') {\r\n                        event.stopImmediatePropagation();\r\n                    }\r\n                    if (scope.ngModel.length > 0) {\r\n                        if ((evntKeyCode === 8 || evntKeyCode === 46) && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete >= scope.ngModel.length) {\r\n                                currentSelectForDelete = scope.ngModel.length - 1;\r\n                                if ((scope.ngModel[currentSelectForDelete].selectForDelete) === false) {\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = true;\r\n                                    currentSelectForDelete = scope.ngModel.length - 1;\r\n                                }\r\n                                else {\r\n                                    scope.ngModel.splice(currentSelectForDelete, 1);\r\n                                     currentSelectForDelete = scope.ngModel.length;\r\n\r\n                                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                                    if (!isInvalidId) {\r\n                                        scope.invalidEmailId = false;\r\n                                        scope.validate = false;\r\n                                        scope.errorMessage = null;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if ((scope.ngModel[currentSelectForDelete].selectForDelete) === true) {\r\n                                scope.ngModel.splice(currentSelectForDelete, 1);\r\n                               \r\n                                currentSelectForDelete = scope.ngModel.length;\r\n                            }\r\n                        }\r\n                        else if (evntKeyCode === 37 && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete > 0) {\r\n                                scope.ngModel[currentSelectForDelete - 1].selectForDelete = true;\r\n\r\n                                if (currentSelectForDelete < scope.ngModel.length)\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n\r\n                                currentSelectForDelete--;\r\n                            }\r\n                        }\r\n                        else if (evntKeyCode === 39 && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete < scope.ngModel.length -1) {\r\n                                scope.ngModel[currentSelectForDelete + 1].selectForDelete = true;\r\n\r\n                                if (currentSelectForDelete >= 0)\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n\r\n                                currentSelectForDelete++;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (currentSelectForDelete < scope.ngModel.length) {\r\n                                scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n                            } else {\r\n                                var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                                if (isInvalidId) {\r\n                                    scope.invalidEmailId = true;\r\n                                } else {\r\n                                    scope.invalidEmailId = false;\r\n                                    scope.validate = false;\r\n                                    scope.errorMessage = null;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        scope.invalidEmailId = false;\r\n                        scope.validate = false;\r\n                        scope.errorMessage = null;\r\n                    }\r\n                };\r\n\r\n                var checkEmailValidation = function (event, onBlur) {\r\n                    if (event.keyCode == 13 || event.keyCode == 9 || onBlur) {\r\n\r\n                        var currentTextValue = element.find('.multiselect-input').val().split(';'),\r\n                            pattern = /^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i;\r\n\r\n                        var filteredArray = [],\r\n                            invalidEmailArray = []; \r\n                        angular.forEach(currentTextValue, function (item) {\r\n                            if (item) filteredArray.push(item.trim());\r\n                        });\r\n                        var filteredLen = filteredArray.length;\r\n\r\n                        for (var i = 0; i < filteredLen; i++) {\r\n                            var filterdItem = filteredArray[i];\r\n                            if (filterdItem != '') {\r\n                                var currentItem = { UserName: filterdItem, value: filterdItem };\r\n                                if (!pattern.test(filterdItem)) {\r\n                                    currentItem.isInvalid = true;\r\n                                    scope.invalidEmailId = true;\r\n                                    invalidEmailArray.push(currentItem);\r\n                                } else {\r\n                                    currentItem.isInvalid = false;\r\n                                    scope.invalidEmailId = false;\r\n                                }\r\n\r\n                                if (!currentItem.isInvalid) {\r\n                                    scope.ngModel.push(currentItem);\r\n                                    scope.setDisplayFormat(currentItem);\r\n                                    scope.defaultText = \"\";\r\n                                  var timeout = $timeout(function () {\r\n                                        scope.onSelect({\r\n                                            $event: {\r\n                                                data: currentItem\r\n                                            }\r\n                                           \r\n                                        });\r\n                                        currentSelectForDelete = scope.ngModel.length;\r\n                                        scope.validateRules();\r\n                                        disableBlurEvent = true;\r\n                                        $timeout.cancel(timeout);\r\n                                        timeout = null;\r\n                                  });\r\n\r\n                                }\r\n                                else {\r\n                                    scope.validateRules();\r\n                                }\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        var result = invalidEmailArray.map(function (item) { return item.UserName; });\r\n                        scope.defaultText = result.join(';');\r\n                        if (result.length > 0)\r\n                            scope.invalidEmailId = true;\r\n                        scope.validateRules();\r\n                    }\r\n                };\r\n\r\n              \r\n                scope.ngKeyUp = function (event, onBlur) {\r\n                    checkEmailValidation(event, onBlur);\r\n                    var evtTrgt = $(event.target), defaultWidth = 250;\r\n                    var timeIntClear =$timeout(function () {\r\n                        if (event.keyCode == 13 && evtTrgt.parent('.multiselect-chip-wrap').find('.multiselect-input').val().length == 0) {\r\n                             evtTrgt.width(defaultWidth);\r\n                        } else {\r\n                            var ele = evtTrgt.parent('.multiselect-chip-wrap').find('.multiselect-input');\r\n                            if (ele.val().length >= 32) {\r\n                                defaultWidth = ele.val().length;\r\n                                evtTrgt.width(defaultWidth * 10);\r\n                            } else {\r\n                                \r\n                                evtTrgt.width(defaultWidth);\r\n                            }\r\n                        }\r\n\r\n                        $timeout.cancel(timeIntClear);\r\n                        timeIntClear = null;\r\n                    });\r\n                };\r\n\r\n\r\n                scope.deleteSelected = function (elementIndex) {\r\n                    disableBlurEvent = false;\r\n                    scope.ngModel.splice(elementIndex, 1);                   \r\n                    $(\"#\" + scope.multiSelectId).focus();\r\n                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                    if (scope.ngModel.length === 0 || !isInvalidId) {\r\n                        scope.invalidEmailId = false;\r\n                        scope.validate = false;\r\n                        scope.errorMessage = null;\r\n                        return;\r\n                    }\r\n                };\r\n\r\n                var onvalidateConfig = scope.$watch('validate', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                scope.ngChange = function (e) {\r\n                    scope.onChange({\r\n                        $event: {\r\n                            data: angular.element('#' + scope.multiSelectId)\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scope.ngBlur = function (e) {\r\n                    function checkChipIsDeleted() {\r\n                        if (disableBlurEvent) {\r\n                            scope.ngKeyUp(e, true);\r\n                        }\r\n                        disableBlurEvent = true;\r\n                        $timeout.cancel(toutPromise);\r\n                        toutPromise = null;\r\n                    }\r\n                    //Timeout is being added to differentiate between blur and delete chip click event.  \r\n                    var toutPromise = $timeout(checkChipIsDeleted, 200);\r\n                    scope.onBlur({ $event: e });\r\n                };\r\n\r\n                scope.validateRules = function () {\r\n                    if (scope.readonly == 'true') {\r\n                        return;\r\n                    }\r\n\r\n                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                    if (scope.invalidEmailId || isInvalidId) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"invalidEmailErrMsg\");\r\n                        return;\r\n                    }\r\n\r\n                    if (scope.$eval(scope.isMandatory) && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined)) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                        return;\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false, rulesLen = rules.length;\r\n\r\n                        for (var i = 0; i < rulesLen; i++) {\r\n                            var rulesItem = rules[i];\r\n                            if (typeof rulesItem == 'object') {\r\n                                if (eval((rulesItem.rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rulesItem.error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    if (typeof scope.ngModel != 'object')\r\n                                        var data = scope.ngModel;\r\n                                    else\r\n                                        var data = scope.displayModel;\r\n\r\n                                    RuleEngine.isValid(rulesItem, function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    }, data);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                    filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                }\r\n                else {\r\n                    filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                }\r\n                var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n                var displayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n                function getFormattedData(data) {\r\n                    var dataLen = data.length;\r\n                    if (!data || dataLen == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < dataLen; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{'), parentSplitLen = parentSplit.length;\r\n                            for (var j = 0; j < parentSplitLen; j++) {\r\n                                var childSplit = parentSplit[j].split('}'), childSplitLen = childSplit.length;\r\n                                for (var k = 0; k < childSplitLen; k++) {\r\n                                    var childItem = childSplit[k];\r\n                                    if (childItem.indexOf('.') > 0 || data[i].hasOwnProperty(childItem)) {\r\n                                        str = str.replace(new RegExp(\"{\" + childItem + \"}\", \"ig\"), eval('data[i].' + childItem));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n           var optionsConfig =  scope.$watch('options', function (newOptions) {\r\n                    var selector = $('#' + scope.multiSelectId);\r\n                    try {\r\n                        if (!selector.devbridgeAutocomplete()) {\r\n                            selector.devbridgeAutocomplete({\r\n                                filterKeys: filterKeys,\r\n                                optionFormat: optionFormat,\r\n                                displayFormat: displayFormat,\r\n                                lookup: getFormattedData(newOptions),\r\n                                width: scope.width,\r\n                                onSelect: function (suggestion) {\r\n\r\n                                    scope.$evalAsync(function () {\r\n                                        scope.ngModel.push(suggestion);\r\n                                    });\r\n                                    $(this).focus();\r\n                                    scope.defaultText = \"\";\r\n                                    var interval = $timeout(function () {\r\n                                        scope.defaultText = \"\";\r\n                                        scope.onSelect({\r\n                                            $event: {\r\n                                                data: suggestion\r\n                                            }\r\n                                        });\r\n                                        currentSelectForDelete = scope.ngModel.length;\r\n                                        scope.validateRules();\r\n                                        $timeout.cancel(interval);\r\n                                        interval = null;\r\n                                    });\r\n                                    angular.element('.autocomplete-suggestions').hide();\r\n\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            selector.devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                });\r\n\r\n                /*\r\n\t\t\t\t * Destroy autocomplete on scope destroy\r\n\t\t\t\t */\r\n                scope.$on('$destroy', function () {\r\n                    if ($('#' + scope.multiSelectId).devbridgeAutocomplete()) {\r\n                        $('#' + scope.multiSelectId).devbridgeAutocomplete().dispose();\r\n                    }\r\n                    modelConfig();\r\n                    onvalidateConfig();\r\n                    optionsConfig();\r\n                });\r\n\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartMultiselect/smartMultiselectTemplate.html'\r\n        }\r\n    }]\r\n\t)\r\n})();","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Popup\r\n * @description This directive is useful for creating a popup.\r\n * \r\n * @attr {String} template-url\r\n *    Template url that is expected to appear as popup contents\r\n * @attr {Boolean} show\r\n *    Popup will toggle as soon as value of this attribute changes\r\n * @attr {String} modal-type\r\n *    Modal type. Possible values are 'large' or 'small'.\r\n * @attr {Boolean} dismissible\r\n *   If set to true, popup will not hide when clicked outside. Default value is true.\r\n * @attr {Function} on-hide\r\n *    Callback function when popup hides\r\n * \r\n * @example\r\n Controller:\r\n $scope.showPopup = false;\r\n $scope.onPopupHide = function() {\r\n      $scope.showPopup = false;\r\n };\r\nUsage:\r\n <smart-popup template-url=\"abc.html\" show=\"{{showPopup}}\" on-hide=\"onPopupHide()\"></smart-popup>\r\n <button ng-click=\"showPopup=true\">Click here</button>\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartPopup', ['$rootScope', '$parse', '$timeout', '$smartModal', '$focusOnField', function ($rootScope, $parse, $timeout, $smartModal, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: true,\r\n            controller: [\"$controller\", \"$scope\", \"$attrs\", \"$scoper\", function ($controller, $scope, $attrs, $scoper) {\r\n                var _scope = $scope,\r\n                    ctrl,\r\n                popupConfig = $scoper.getScope(_scope, $attrs.popupConfig);\r\n\r\n                if (popupConfig) {\r\n                    if (popupConfig.controller) {\r\n                        var launchObj = {\r\n                            $scope: _scope\r\n                        };\r\n                        if (popupConfig.resolve) {\r\n                            var val;\r\n                            angular.forEach(popupConfig.resolve, function (value, key) {\r\n                                if (typeof value == \"function\") {\r\n                                    val = value();\r\n                                } else {\r\n                                    val = value;\r\n                                }\r\n                                this[key] = val;\r\n                            }, launchObj);\r\n                        }\r\n                        ctrl = $controller(popupConfig.controller, launchObj);\r\n                        ctrl.$$smartModal = true;\r\n                    }\r\n                } else {\r\n                    ctrl = _scope;\r\n                };\r\n                return ctrl;\r\n            }],\r\n            link: function (scope, element, attrs, controller) {\r\n\r\n                var onHide = $parse(attrs.onHide),\r\n                    triggeredElement;\r\n                // Callback for complete popup close i.e this callback executes after popup animation over.\r\n                if (attrs.afterCompleteClosePopup) {\r\n                    var afterCompleteClosePopup = $parse(attrs.afterCompleteClosePopup);\r\n                }\r\n\r\n                var topPositionBeforeModalOpen = 0;\r\n\r\n                scope.isCancelButton = (attrs.cancelButton) ? scope.$eval(attrs.cancelButton) : false;\r\n\r\n                scope.headerUrl = attrs.headerUrl;\r\n                scope.contentUrl = attrs.contentUrl;\r\n                scope.footerUrl = attrs.footerUrl;\r\n                scope.templateUrl = attrs.templateUrl;\r\n                scope.modalType = attrs.type;\r\n                scope.isDraggable = attrs.isDraggable;\r\n\r\n                //Cleaning floating elements on drag\r\n                function cleanFloatingElements() {\r\n                    element.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                        var autoComplete = $(this).data().autocomplete;\r\n                        if (autoComplete && autoComplete.visible) {\r\n                            autoComplete.hide();\r\n                        }\r\n                    });\r\n                }\r\n                //End of cleaning floating elements on drag\r\n\r\n                if (scope.isDraggable) {\r\n                    angular.element(element).draggable({\r\n                        start: function () {\r\n                            cleanFloatingElements();\r\n                        },\r\n                        containment: \".is-popup-Draggable\"\r\n                    });\r\n                };\r\n\r\n                var tOut;\r\n                attrs.$observe('expandCollapse', function (value) {\r\n                    scope.expandCollapse = value;\r\n                    tOut = setTimeout(function () {\r\n\r\n                        angular.element(scope.expandCollapse).click(function () {\r\n                            var expandCollapse = angular.element(scope.expandCollapse),\r\n                                $modal = expandCollapse.closest('.modal'),\r\n                                $modalHeader = expandCollapse.closest('.modal .modal-header'),\r\n                                $leanOverlay = expandCollapse.parents('body').find('.lean-overlay');\r\n                            $modal.addClass('expand-css-trans');\r\n                            var innerTout1 = setTimeout(function () {\r\n                                $modalHeader.toggleClass('extra-nav-wrap expand-header expand-css-trans');\r\n                                clearTimeout(innerTout1);\r\n                                innerTout1 = null;\r\n                            }, 500);\r\n\r\n                            var innerTout2 = setTimeout(function () {\r\n                                $modal.removeClass('expand-css-trans');\r\n                                clearTimeout(innerTout2);\r\n                                innerTout2 = null;\r\n                            }, 200);\r\n\r\n                            $modal.toggleClass('expand-css');\r\n                            expandCollapse.parent('.modal-header').next().next('.modal-footer_new').find('.modal-close').click(function () {\r\n                                $modal.removeClass('expand-css');\r\n                                $modalHeader.removeClass('extra-nav-wrap expand-header expand-css-trans');\r\n                                $leanOverlay.css('display', 'block');\r\n                            });\r\n                            if ($modal.hasClass('expand-css')) {\r\n                                $leanOverlay.css('display', 'none');\r\n                                $modal.css('border-radius', '0');\r\n                            }\r\n                            else {\r\n                                $leanOverlay.css('display', 'block');\r\n                            }\r\n                        });\r\n                    }, 1000);\r\n                });\r\n\r\n\r\n                /*\r\n                 *  Unbind window keyup listener and assign tabindex back to .picker elements\r\n                 */\r\n                var reset = function () {\r\n                  //  $(window).off('keyup', onWindowKeyUp);\r\n                    angular.element('.picker').attr(\"tabindex\", 0);\r\n                    //COMMENTED: TWO-5672 impact   angular.element(document).scrollTop(topPositionBeforeModalOpen);\r\n                };\r\n\r\n\r\n                /*\r\n                 *  window on key up event listener\r\n                 */\r\n                //var onWindowKeyUp = function (e) {\r\n                //    if (angular.element(e.target).closest('.modal').length == 0 && e.keyCode == 9) {\r\n                //        angular.element(element.find(':focusable')[0]).focus();\r\n                //    }\r\n                //};\r\n\r\n\r\n                /*\r\n                 * Show pop up\r\n                 */\r\n                var $popup, onShow = attrs.$observe('show', function (value) {\r\n                    if (angular.isDefined(value)) {\r\n                        if (scope.$eval(value)) {\r\n                            triggeredElement = document.activeElement;\r\n                            angular.element(triggeredElement).addClass('currentPopupTriggerer');\r\n                            topPositionBeforeModalOpen = angular.element(document).scrollTop();\r\n                            angular.element(element).openModal({\r\n                                dismissible: scope.$eval(attrs.dismissible),\r\n                                beforeOpen: function () {\r\n                                    $popup = angular.element(element).data();\r\n                                    if (scope.isDraggable) {\r\n                                        angular.element('body').addClass('is-popup-Draggable');\r\n                                    }\r\n                                },\r\n                                complete: function () {\r\n                                    if (angular.isFunction(onHide)) {\r\n                                        scope.$apply(function () {\r\n                                            onHide(scope, { e: \"\" });\r\n                                        });\r\n                                    }\r\n                                    reset();\r\n\r\n                                    //  Check if popup is opened by uigrid-compatible element\r\n                                    if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                        //  Following event is listened inside uigrid-compatible dir\r\n                                        $rootScope.$emit(\"popupClosed\");\r\n                                        window.isPopupOpenedByUIGridCompatibleElement = undefined;\r\n                                    }\r\n\r\n                                    if (element.hasClass(\"noTransform\")) {\r\n                                        var toutpromise = setTimeout(function () {\r\n                                            element.css('top', 0).removeClass('noTransform');\r\n                                            clearTimeout(toutpromise);\r\n                                            toutpromise = null;\r\n                                        }, 100);\r\n                                    }\r\n                                },\r\n                                ready: function () {\r\n                                    //  Check if popup is opened by uigrid-compatible element\r\n                                    if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                        $rootScope.$emit(\"popupOpened\");\r\n                                    }\r\n                                    var cancelTOut = $timeout(function () {\r\n                                        if (scope.isDraggable) {\r\n                                            var $body = angular.element('body'),\r\n                                                $modalUiDragable = angular.element('.modal.ui-draggable');\r\n                                            var bodyHeight = $body.height() / 2,\r\n                                             modalHeight = $modalUiDragable.height() / 2,\r\n                                            bodyWidth = $body.width() / 2,\r\n                                            modalWidth = $modalUiDragable.width() / 2;\r\n\r\n                                            $(element).css({ 'position': \"absolute\", 'top': (bodyHeight - modalHeight) / 2, 'margin': 0, 'left': (bodyWidth - modalWidth) });\r\n                                        }\r\n                                        else {\r\n                                            var t = window.innerHeight / 2 - element.outerHeight() / 2;\r\n                                            element.css('top', t);\r\n                                        };\r\n                                        $(element).addClass('noTransform');\r\n\r\n                                        //Auto focus first feild / manage tab index\r\n\r\n                                      //  $(window).on('keyup', onWindowKeyUp);\r\n\r\n                                        //Remove picker tabindex when popup to avoid focus on picker element\r\n                                        angular.element('.picker').removeAttr(\"tabindex\");\r\n                                        $timeout.cancel(cancelTOut);\r\n                                        cancelTOut = null;\r\n                                    });\r\n                                    $timeout(function () {\r\n                                        var $firstField = element.find(\"a, input[type=text],input[type=radio]:checked,input[type=checkbox], button, textarea, [tabindex='0']\").not(\":disabled, :hidden, [tabindex = -1]\").first();\r\n                                        $focusOnField($firstField);\r\n                                    }, 600);\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            var el = angular.element(element),\r\n                                isPopupInit = el.data(\"overlay-id\") === undefined ? false : true;\r\n\r\n                            // isPopupInit variable is used  to check whether popup is initiated or not.\r\n                            if (isPopupInit) {\r\n                                el.closeModal({\r\n                                    complete: function () {\r\n                                        if (attrs.afterCompleteClosePopup)\r\n                                            afterCompleteClosePopup(scope, {});\r\n\r\n                                        if (scope.isDraggable) {\r\n                                            angular.element('body').removeClass('is-popup-Draggable');\r\n                                        }\r\n                                        if (controller.$$smartModal === true) {\r\n                                            $smartModal.destroyModal({ $view: el, $scope: scope });\r\n                                        }\r\n                                        angular.element(\".currentPopupTriggerer\").focus().removeClass('currentPopupTriggerer');\r\n                                        triggeredElement = null;\r\n                                    }\r\n                                });\r\n\r\n                                if (element.hasClass(\"noTransform\")) {\r\n                                    var tOutTemp = setTimeout(function () {\r\n                                        element.css('top', 0).removeClass('noTransform');\r\n                                        clearTimeout(tOutTemp);\r\n                                        tOutTemp = null;\r\n                                    }, 100);\r\n                                }\r\n                            }\r\n                            //  remove the listener and add tabindex back on picker\r\n                            reset();\r\n\r\n                            //  Check if popup is opened by uigrid-compatible element\r\n                            if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                //  Following event is listened inside uigrid-compatible dir\r\n                                $rootScope.$emit(\"popupClosed\");\r\n                                window.isPopupOpenedByUIGridCompatibleElement = undefined;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onShow();\r\n                    reset();\r\n                    if ($popup) {\r\n                        $($popup.associatedOverlay).remove();\r\n                        $smartModal.destroyModal({ $view: element });\r\n                    }\r\n                    clearTimeout(tOut);\r\n                    tOut = null;\r\n                    angular.element(scope.expandCollapse).off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartPopUp/smartPopUpTemplate.html'\r\n        };\r\n    }])\r\n    .factory(\"$scoper\", function () {\r\n        return {\r\n            getScope: function (scope, deep) {\r\n                if (deep) {\r\n                    var a, b = deep.split(\".\");\r\n                    var bLength = b.length;\r\n                    if (bLength > 1) {\r\n                        a = scope;\r\n                        for (var i = 0; i < bLength; i++) {\r\n                            var sortCn = b[i].match(/(\\[\\d+\\])+$/);\r\n                            if (sortCn && sortCn.length > 0) {\r\n                                var subScope = b[i].substr(0, b[i].indexOf('['));\r\n                                a = a[subScope];\r\n                                sortCn = sortCn[0].replace(/\\]\\[/g, ',').replace(/[\\[\\]]/g, '').split(\",\");\r\n                                for (var j = 0; j < sortCn.length; j++) {\r\n                                    a = a[sortCn[j]];\r\n                                }\r\n                            } else {\r\n                                a = a[b[i]];\r\n                            };\r\n                        }\r\n                    } else {\r\n                        a = scope[deep];\r\n                    }\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n    })\r\n    .service(\"$smartModal\", [\"$timeout\", \"$compile\", function ($timeout, $compile) {\r\n        var _this = this;\r\n\r\n        _this.open = function (config) {\r\n            _this.initModal(config);\r\n        }\r\n\r\n        _this.initModal = function (config) {\r\n            var attrs = [\r\n                \"show='{{\" + (config.show || \"\") + \"}}'\",\r\n                \"popup-config='\" + (config.$config || \"\") + \"'\",\r\n                \"on-hide='\" + (config.onHide || \"\") + \"'\",\r\n                \"after-complete-close-popup='{{\" + (config.afterCompleteClosePopup || \"\") + \"}}'\",\r\n                \"cancel-button='\" + (config.cancelButton || \"\") + \"'\",\r\n                \"template-url='\" + (config.templateUrl || \"\") + \"'\",\r\n                \"header-url='\" + (config.headerUrl || \"\") + \"'\",\r\n                \"content-url='\" + (config.contentUrl || \"\") + \"'\",\r\n                \"footer-url='\" + (config.footerUrl || \"\") + \"'\",\r\n                \"type='\" + (config.type || \"\") + \"'\",\r\n                \"is-draggable='\" + (config.isDraggable || \"\") + \"'\",\r\n                \"expand-collapse='\" + (config.expandCollapse || \"\") + \"'\",\r\n                \"dismissible='\" + (config.dismissible || \"\") + \"'\",\r\n                \"class='\" + (config.class || \"\") + \"'\"\r\n            ]\r\n                , smartpopDir = '<smart-popup ' + attrs.join(\" \") + '> </smart-popup>';\r\n\r\n            var popup = $compile(smartpopDir)(config.$scope);\r\n            popup.appendTo(\"body\");\r\n        }\r\n\r\n        _this.destroyModal = function (modal) { // this method invoke automatically once popup goes hide and also executed on scope $destroy.\r\n            modal.$view && modal.$view.remove();\r\n            modal.$scope && modal.$scope.$destroy();\r\n        }\r\n    }]);\r\n})();","/**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Radio\n   * @description This directive is useful for creating a radio button or a group of radio buttons.\n   * \n   * @attr {String} label\n   *    Label to be displayed for identification of this ui element\n   * @attr {Array} options\n   *    Number of radio buttons to be created. Only one option can be selected at a time.\n   * @attr {Object} ng-model\n   *    Default selected option. This is expected to be one of the 'options'.\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\n   * @attr {String} datakey\n   *    A property of an option to be used to display the label for option. Default value is 'title'.\n   * @attr {String} layout\n   *    'vertical' or 'horizontal' layout\n   * @attr {Boolean} validate\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\n   * @attr {Array} rules \n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\n   * @attr {String} error-message \n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\n   * @attr {Boolean} is-mandatory \n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\n   * @attr {Boolean} is-visible \n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\n   * @attr {Number} colspan\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\n   *    Default value is 1.\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\n   * @attr {Function} on-change\n   *    Callback function when any of the buttons from radio group is selected\n   * @type cool\n   * \n   * @example\n   Dynamic:\n   Controller:\n       $scope.config = {\n            \"modelData\": {\n                \"currency\": { \"code\": \"€\", \"name\": \"EUR\" }\n            }, \n            \"formConfig\": {\n                \"sections\": [\n                    {\n                        \"isMandatory\": true,\n                        \"rows\": [\n                            {\n                                \"properties\": [\n                                    {\n                                        \"label\": \"Currency\",\n                                        \"type\": \"radio\",\n                                        \"isMandatory\": true,\n                                        \"data\": \"currency\",\n                                        \"colspan\": 1,\n                                        \"onChange\": \"onChange\",  //  controller function\n                                        \"attributes\": {\n                                            \"options\": [{\n                                                \"code\": \"$\",\n                                                \"name\": \"USD\"\n                                            }, {\n                                                \"code\": \"€\",\n                                                \"name\": \"EUR\"\n                                            }],\n                                            \"datakey\": \"name\"\n                                        },\n                                        \"rules\": [\n                                            { \n                                                \"rule\": \"this.title == \\\"Option 2\\\"\", \n                                                \"error\": \"Invalid selection\" \n                                            }\n                                        ]\n                                    }\n                                ]    \n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n    Usage:\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\n   \n   * @example\n   Static:\n   Controller:\n       $scope.currencyOptions = [{\n            \"code\": \"$\",\n            \"name\": \"USD\"\n       }, {\n           \"code\": \"€\",\n           \"name\": \"EUR\"\n       }];\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\n       $scope.onChange = function(selectedCurrency) {\n           console.log(selectedCurrency);\n       };\n   Usage:\n       <smart-radio label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-radio> \n\n   * @example\n   Radio with disabled option:\n   Controller:\n       $scope.currencyOptions = [{\n            \"code\": \"$\",\n            \"name\": \"USD\",\n            \"disable\": true\n       }, {\n           \"code\": \"€\",\n           \"name\": \"EUR\"\n       }];\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\n   Usage:\n       <smart-radio label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\"></smart-radio> \n   */\n\n(function () {\r\n    'use strict';\n    var radioGroupId = 0;\n\n    angular.module('SMART2').directive('smartRadio', ['$timeout', '$translate', 'ScrollTo', 'RuleEngine', function ($timeout, $translate, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            require: '?ngModel',\n            scope: {\r\n                label: '@',\n                options: '=?',\n                ngModelCopy: '=?ngModel',\n                isMandatory: '@',\n                isVisible: '=?',\n                layout: '@',\n                rules: '@',\n                validate: '=?',\n                focus: '=?',\n                parentElement: '@',\n                errorMessage: '@',\n                onChange: '&',\n                removable: '@',\n                datakey: '@',\n                optionId: '@',\n                groupId: '@'\r\n            },\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\n\n                var isNgModelFunction = typeof scope.ngModelCopy == 'function';\n\n                // key to be used to bind options\n                scope.dataKey = scope.datakey ? scope.datakey : 'title';\n\n                //uniqueID\n                radioGroupId = radioGroupId + 1;\n                scope.radioGrouptId = (attrs.groupId) ? attrs.groupId : \"radio-group-\" + radioGroupId;\n\n                if (typeof attrs.optionId != \"undefined\") {\r\n                    scope.optionId = attrs.optionId;\r\n                }\n\n                //check is gap\n                scope.isGap = (attrs.gap) ? scope.$eval(attrs.gap) : false;\n\n                scope.layout = scope.layout ? scope.layout : 'horizontal';\n\n\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                if (isNgModelFunction) {\r\n                    try {\r\n                        ngModelCtrl.$render = function () {\r\n                            scope.ngModel = ngModelCtrl.$modelValue;\r\n                            scope.selectedOption = scope.ngModel;\r\n                        };\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                var updateView = function () {\r\n                    if (isNgModelFunction) {\r\n                        try {\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\n\n\n                /*\n                 * Focus field when focus is set to true\n                 */\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\n                        scope.focus = false;\r\n                    }\r\n                });\n\n                /*\n                 * Validate field whene validate is set to true\n                 */\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\n\n                /*\n                 * Watch needs to be added on ngModel\n                 */\n                var onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                    scope.selectedOption = newVal;\r\n                }, true);\n\n                /*\n                 * Validate rules\n                 */\n                scope.validateRules = function () {\r\n                    if (scope.$eval(scope.isMandatory) && (isNgModelFunction && (scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) || (!isNgModelFunction && (scope.ngModelCopy === '' || scope.ngModelCopy === undefined || scope.ngModelCopy === null))) {\r\n                        scope.validate = true;\n                        scope.errorMessage = $translate.instant('selectOptionErrMsg');\n                        return;\r\n                    }\n\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\n\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\n                            ruleLen = rules.length;\n\n                        for (var i = 0; i < ruleLen; i++) {\r\n                            var ruleT = rules[i]; // temp hold\r\n                            if (typeof ruleT == 'object') {\r\n                                if (eval((ruleT.rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                    scope.validate = true;\n                                    scope.errorMessage = ruleT.error;\n                                    break;\r\n                                }\r\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(ruleT, function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\n\n                scope.ngChange = function (selectedOption) {\r\n                    // Commented below code for fixing TWO-2748\r\n                    //if (!scope.$eval(scope.isMandatory) && angular.isDefined(scope.selectedOption) && scope.selectedOption[scope.dataKey] == selectedOption[scope.dataKey]) {\r\n                    //    scope.selectedOption = '';\r\n                    //}\r\n                    //else {\r\n                    //    scope.selectedOption = selectedOption;\r\n                    //}\r\n\r\n                    // Added below code for fixing TWO-2748\r\n                    scope.selectedOption = selectedOption;\r\n\r\n                    if (!scope.groupId) {\r\n                        if (isNgModelFunction) {\r\n                            scope.ngModel = scope.selectedOption;\r\n                        }\r\n                        else {\r\n                            scope.ngModelCopy = scope.selectedOption;\r\n                        }\r\n                    }\n                    updateView();\n                    scope.validateRules();\n                    var toutPromise = $timeout(function () {\r\n                        scope.onChange();\r\n                        $timeout.cancel(toutPromise); // cancel the timeout promise to avoid any leakage.\r\n                    });\r\n                };\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                    onNgModel();\r\n                    element.remove();\r\n                    scope = null;\r\n                });\r\n            },\n            templateUrl: 'shared/directives/uiElements/smartRadio/smartRadioTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    /**\r\n     * @memberof SMART2\r\n     * @ngdoc directive\r\n     * @name Widget Error Field \r\n     * @description This directive is useful for displaying total error field in widget form\r\n     * \r\n     * @attr {Object} showerrorsPanel: scope variable, that need to be declared in the controller.\r\n     *    \r\n     * @attr {String} customfieldsSelector: customfields-selector=\".linkError, .red-text\"\r\n     *    class and id can be passed \r\n     *    \r\n     * @attr {String} frmWidgetId: frm-widget-id=\"formWidgetUniqueIdTest1\"\r\n     *    widget Id need to be specified here.\r\n     *\r\n     * @example\r\n     Dynamic:\r\n     Controller:\r\n         $scope.onErrorFound = {\r\n            \"error\": false, // change value for triggering the error count.\r\n            \"isWarningHeader\": false, // set true for displaying the error band.\r\n            \"noMoreErrors\": false // \r\n        };\r\n\r\n      Usage:\r\n         <smart-read-errors showerrors-panel=\"onErrorFound\" customfields-selector=\".linkError\" frm-widget-id=\"formWidgetUniqueIdTest1\" class=\"bandcontainer clearfix\"></smart-read-errors>\r\n     * \r\n     */\r\n\r\n    'use strict';\r\n    angular.module('SMART2')\r\n    .directive('smartReadErrors', function ($rootScope, $compile, $timeout) {\r\n        return {\r\n            restrict: 'EA',\r\n            templateUrl: 'shared/directives/uiElements/smartReadErrors/smartReadErrorsTemplate.html',\r\n            replace: true,\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n                scope.counter = 0;\r\n                scope.emptyText = \"\";\r\n                scope.leftLabelText = \"Show only error field\";\r\n                var invalids = [],\r\n                    count = 0,\r\n                    currentManualFocus = '',\r\n                    isManualFocus = true,\r\n                    topMinus = 300,\r\n                    timeoutPeriod = 300,\r\n                    fieldsSelector = \"input.invalid, .invalid input, textarea.invalid\";\r\n\r\n                fieldsSelector += attrs.customfieldsSelector ? \", \" + attrs.customfieldsSelector : \"\";\r\n                scope.onErrorFound = scope[attrs.showerrorsPanel];\r\n                scope.nextDisable = false;\r\n                scope.prevDisable = false;\r\n                var formWidgetId = attrs.frmWidgetId;\r\n                var onblurEvent = function () {\r\n                    $timeout(function () {\r\n                        invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                        var invLen = invalids.length - 1;\r\n                        if (scope.counter != invLen) {\r\n                            count--;\r\n\r\n                            if (count < 0) {\r\n                                count = (scope.counter - invLen) < 0 ? 0 : invLen;\r\n                            }\r\n                            scope.counter = invLen;\r\n                        }\r\n                        if (invLen === 0) {\r\n                            $timeout(function () {\r\n                                scope.onErrorFound.isWarningHeader = false; // close the yellow bar\r\n                            }, 3000);\r\n\r\n                        }\r\n                        isManualFocus = true;\r\n                        //scope.counter = invLen;\r\n                    }, timeoutPeriod);\r\n                };\r\n\r\n\r\n                // To set focus on \r\n                function focusElem(a_indx) {\r\n                    var top,\r\n                        timeoutPeriodTemp = 0,\r\n                        $invalidDom = invalids.eq(a_indx);\r\n\r\n                    if (!$invalidDom.closest('.collapsible-body').hasClass('displayBlock')) {\r\n                        $invalidDom.closest('.collapsible-container').find('.collapsible-header').trigger('click');\r\n                        timeoutPeriodTemp = 350;\r\n                    }\r\n\r\n                    $timeout(function () {\r\n                        top = $invalidDom.offset().top - $('#subheaderwrapper').height();\r\n                        //if (top > 300) {\r\n                        $(window).scrollTop(top - 40);\r\n                        //}\r\n                        if ($invalidDom.is(\"span\")) {\r\n                            $invalidDom.closest('div').find('button, [href], input, select, textarea')[0].focus();\r\n                        } else {\r\n                            if ($invalidDom.closest('span').length) {\r\n                                $invalidDom.closest('span').find('.dropdown-button').focus();\r\n                            } else {\r\n\r\n                                $invalidDom.focus();\r\n                            }\r\n                        }\r\n                        scope.nextDisable = false;\r\n                        scope.prevDisable = false;\r\n                    }, timeoutPeriodTemp + timeoutPeriod);\r\n\r\n                }\r\n                // On focus to maintain the counter\r\n                var onFocusEvent = function (e) {\r\n                    if (isManualFocus) {\r\n                        invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                        currentManualFocus = $(this);\r\n                        var currInd = invalids.index(currentManualFocus);\r\n                        count = currInd >= 0 ? currInd : count;\r\n                    }\r\n                }\r\n\r\n                // Needed for tabbing navigation using tab key\r\n\r\n                //var onKeyPressEvent = function (e) {\r\n                //    var char = e.which || e.keyCode;\r\n                //    if (scope.onErrorFound.isTabSwitch && char === 9) {\r\n\r\n                //        e.preventDefault();\r\n\r\n                //        if (e.shiftKey) {\r\n                //            scope.prev()\r\n                //        } else {\r\n                //            scope.next()\r\n                //        }\r\n                //    }\r\n                //};\r\n\r\n                //$(window).keydown(function (e) {\r\n\r\n                //    onKeyPressEvent(e);\r\n                //});\r\n\r\n                scope.closeErrorHeader = function () {\r\n                    scope.onErrorFound.isWarningHeader = !scope.onErrorFound.isWarningHeader;\r\n                }\r\n\r\n                var watchSaveClick = scope.$watch('onErrorFound.error', function (newValue, oldValue) {\r\n\r\n                    if (newValue !== oldValue) {\r\n                        $timeout(function () {\r\n                            invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                            if (invalids.length > 0) {\r\n                                scope.onErrorFound.noMoreErrors = false;\r\n                                scope.onErrorFound.isWarningHeader = true;\r\n                                invalids.blur(onblurEvent).focus(onFocusEvent)\r\n                                scope.counter = invalids.length - 1;\r\n                                focusElem(0);\r\n                                isManualFocus = false; // No user manual focus\r\n                            } else {\r\n                                scope.onErrorFound.noMoreErrors = true;\r\n                                //scope.onErrorFound.isWarningHeader = '';\r\n                                //scope.onErrorFound.isWarningHeader = false;\r\n                            }\r\n                        }, 1000);\r\n\r\n                    }\r\n\r\n                });\r\n                scope.next = function () {\r\n                    scope.nextDisable = true;\r\n                    scope.prevDisable = true;\r\n                    isManualFocus = true;\r\n                    invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                    var invLen = invalids.length - 1;\r\n\r\n                    if (count < invLen) {\r\n                        isManualFocus = false;\r\n                        focusElem(count + 1);\r\n                        if (scope.counter === invLen) {\r\n                            count++;\r\n                        }\r\n                    } else {\r\n                        isManualFocus = false;\r\n                        count = 0;\r\n                        focusElem(count);\r\n                    };\r\n                    //scope.counter = invLen;\r\n                };\r\n\r\n                scope.prev = function () {\r\n                    scope.nextDisable = true;\r\n                    scope.prevDisable = true;\r\n                    isManualFocus = true;\r\n                    invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                    var newLen = invalids.length - 1;\r\n                    if (count > 0) {\r\n                        isManualFocus = false;\r\n                        focusElem(count - 1);\r\n                        if (scope.counter === newLen) {\r\n                            count--;\r\n                        }\r\n                    } else {\r\n                        isManualFocus = false;\r\n                        focusElem(newLen);\r\n                        count = newLen;\r\n                    };\r\n                    //scope.counter = newLen;\r\n                };\r\n\r\n                // Destroy event\r\n                scope.$on('$destroy', function () {\r\n                    watchSaveClick(); // Deregister\r\n                    invalids.unbind(); // unbind all events\r\n                    invalids = [];\r\n                    scope = {}; // nullify the scope\r\n                });\r\n\r\n            }\r\n        }\r\n    })\r\n})(angular);","//resizeable Sidebar\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('resizeableSidebar',[function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                disableResize: '=?',\r\n                collapseCallback : '&',\r\n                scrollCallback : '&',\r\n                leftPanelWidthCallback : '&'\r\n            },\r\n            link: function(scope, element, attrs) {\r\n              var elementWidth = element.innerWidth();\r\n              var collapseCallback = scope.$eval(scope.collapseCallback);\r\n              var scrollCallback = scope.$eval(scope.scrollCallback);\r\n              var leftPanelWidthCallback = scope.$eval(scope.leftPanelWidthCallback);\r\n              var leftPanel = element.find('.leftPanel');\r\n              var resizableDiv = document.createElement('div');\r\n              resizableDiv.id = 'panelexpandorreports';\r\n              resizableDiv.className = 'panelexpandorreports';\r\n              leftPanel.prepend(resizableDiv);\r\n              var getResizableDiv = element.find('.panelexpandorreports');\r\n              var clickableDiv = document.createElement('div');\r\n              clickableDiv.id = 'panelexpandorreportsdiv';\r\n              clickableDiv.className = 'panelexpandorreportsdiv';\r\n              getResizableDiv.prepend(clickableDiv);\r\n              scope.$watch('disableResize', function (disableResize) {\r\n                    if (disableResize) {\r\n                        $('#panelexpandorreports').addClass('disableCursorAction');\r\n                    } else {\r\n                        $('#panelexpandorreports').removeClass('disableCursorAction');\r\n                    }\r\n                });\r\n                var restrictWidth = 0,\r\n                minDraggableWidth = attrs.minWidth || 100,\r\n                lowDraggableWidth = attrs.lowWidth || 100,\r\n                midDraggableWidth = attrs.midWidth || 282;\r\n                var maxDraggableWidth = window.innerWidth / 2;//$(window).width() / 2;\r\n                var UiLeftPosition = 0;\r\n                var UiOriginalPosition = 0;\r\n                var windowWidthBeforeResize = window.innerWidth //$(window).width();\r\n                var leftPecent = midDraggableWidth / windowWidthBeforeResize * 100;\r\n                var currentwindowWidth = window.innerWidth //$(window).width();\r\n                // on window resize calculations\r\n                $(window).resize(function() {                \r\n                    //maxDraggableWidth  = $(window).width() / 2;\r\n                    //restrictWidth = maxDraggableWidth - minDraggableWidth;\r\n                    currentwindowWidth = window.innerWidth //$(window).width();\r\n                    maxDraggableWidth = currentwindowWidth / 2\r\n                    UiLeftPosition = currentwindowWidth * leftPecent / 100;\r\n                    UiLeftPosition = Math.max(midDraggableWidth, UiLeftPosition); \r\n                    windowWidthBeforeResize = currentwindowWidth;\r\n                    $(\".leftPanel\").animate({\r\n                        'margin-left': -UiLeftPosition,\r\n                        width: UiLeftPosition\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false,\r\n                    }).addClass('overflowVisible');\r\n                    $(\".wrapper--withSidebar\").animate({\r\n                        'margin-left': UiLeftPosition\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false\r\n                    }).addClass('overflowVisible');\r\n                    $(\".panelexpandorreports\").animate({\r\n                            left: UiLeftPosition,\r\n                            backgroundColor:'#ccc'\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false,\r\n                        complete: function(){\r\n                            $(\".panelexpandorreports\").removeClass('dragLine');                                            \r\n                        }\r\n                    }).addClass('dragLine');\r\n                    leftPanelWidthCallback(UiLeftPosition,elementWidth);\r\n                });\r\n                \r\n                //var maxDraggableWidth  = window.innerWidth / 2, //attrs.maxWidth ||\r\n                  element.on('click mouseover.leftPanel', '#leftPanel', function () {\r\n                        var $panelExp = $('#panelexpandorreports');\r\n                        if (!$panelExp.data('ui-draggable')) {\r\n                            $panelExp.draggable({\r\n                                axis: 'x',\r\n                                drag: function (e, ui) {\r\n                                    restrictWidth = maxDraggableWidth - minDraggableWidth;\r\n                                    $('.panelexpandorreports').addClass('panelexpandorreports-nohover');\r\n                                    //ui.position.left = Math.max(minDraggableWidth, ui.position.left);  \r\n                                    ui.position.left = Math.min(maxDraggableWidth, ui.position.left);\r\n                                    UiLeftPosition = ui.position.left;\r\n                                    UiOriginalPosition = ui.originalPosition.left; \r\n                                    leftPecent = UiLeftPosition / windowWidthBeforeResize * 100;   \r\n                                    leftPanelWidthCallback(ui.position.left,elementWidth);      \r\n                                },\r\n                                stop: function (e, ui) {                               \r\n                                    if(ui.position.left < lowDraggableWidth){                    \r\n                                       collapseCallback();\r\n                                       $('#panelexpandorreports').css('left', ui.originalPosition.left);\r\n                                    } else if ((ui.position.left >= lowDraggableWidth) && (ui.position.left <= midDraggableWidth)) {\r\n                                        element.removeClass('conditionalLftPanelTransition');\r\n                                        /*var marginLeftValue = parseInt($('.wrapper--withSidebar').css('margin-left')) - (ui.originalPosition.left - ui.position.left);\r\n                                        $(\".leftPanel\").animate({\r\n                                           'margin-left': -marginLeftValue,\r\n                                            width: ui.position.left\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false\r\n                                        });\r\n\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': marginLeftValue\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false\r\n                                        });\r\n                                        // $panelExp.css('left', 282);*/                                 \r\n                                       // setTimeout(function () {\r\n                                        $(\".leftPanel\").animate({\r\n                                            'margin-left': -midDraggableWidth,\r\n                                            width: midDraggableWidth                                           \r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                           // complete: function(){\r\n                                            //  $(\".leftPanel\").removeClass('overflowVisible');\r\n                                            //}\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': midDraggableWidth,\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                            //complete: function(){\r\n                                            //  $(\".leftPanel\").removeClass('overflowVisible');\r\n                                           // }\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".panelexpandorreports\").animate({\r\n                                               left: midDraggableWidth,\r\n                                               backgroundColor:'#ccc'\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                            complete: function(){\r\n                                              $(\".panelexpandorreports\").removeClass('dragLine');                                            \r\n                                            }\r\n                                        }).addClass('dragLine');\r\n                                       // }, 400);\r\n                                    } else {                                   \r\n                                        element.removeClass('conditionalLftPanelTransition');\r\n                                        var marginLeftValue = parseInt($('.wrapper--withSidebar').css('margin-left')) - (ui.originalPosition.left - ui.position.left);\r\n                                        $(\".leftPanel\").animate({\r\n                                           'margin-left': -marginLeftValue,\r\n                                            width: ui.position.left\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                           // complete: function(){\r\n                                          //    $(\".leftPanel\").removeClass('overflowVisible');\r\n                                          //  }\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': marginLeftValue\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                          //  complete: function(){\r\n                                          //    $(\".leftPanel\").removeClass('overflowVisible');\r\n                                           // }\r\n                                        }).addClass('overflowVisible'); \r\n                                    }\r\n                                    scrollCallback(); \r\n                                    $('.panelexpandorreports').removeClass('panelexpandorreports-nohover');\r\n                                }\r\n                            });\r\n                        } \r\n                });\r\n            },\r\n        }\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    var scrollCounter = 0;\r\n\r\n    angular.module('SMART2').directive('smartScroll', ['$parse', '$timeout', '$window', function ($parse, $timeout, $window) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: false,\r\n            transclude: true,\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n\t\t\t\t//Setting for fixed header on scroll\r\n                var isFixedHeader = attrs.isFixedHeader ? true : false,\r\n                    isScrollDate = attrs.hideDate == 'true' ? true : false,\r\n                    onBreakPoints = attrs.onBreakPoints ? $parse(attrs.onBreakPoints.replace(/\\(\\)/, '(e)')) : false,\r\n                    onScrollLockUnlock = attrs.onScrollLockUnlock ? $parse(attrs.onScrollLockUnlock.replace(/\\(\\)/, '(e)')) : false;\r\n\r\n                scope.fixedHeader = function (e) {\r\n                    var _this = $(e.target),\r\n            \t\ttableElem = _this.find(\">\").eq(0).find(\">\").eq(0), // this is depending on the smartScroll directive html structure!\r\n            \t\t elScrollTop = _this.scrollTop();\r\n\r\n                    if (elScrollTop > 0 && !_this.data('appended')) {\r\n                        // reset display styles so column widths are correct when measured below\r\n                        tableElem.find('thead, tbody, tfoot').css('display', '');\r\n\r\n                        // set widths of columns\r\n                        tableElem.find('tr:first-child th').each(function (i, thElem) {\r\n                            var tdElems = tableElem.find('tbody > tr:first-child > td').eq(i),\r\n            \t\t\t\tcolumnWidth = tdElems.length ? tdElems.get(0).offsetWidth : thElem.offsetWidth;\r\n\r\n                            if (tdElems.length) {\r\n                                tdElems.css('width', columnWidth + 'px');\r\n                            }\r\n                            if (thElem) {\r\n                                $(thElem).css('width', columnWidth + 'px');\r\n                            }\r\n                        });\r\n\r\n                        var tbl = $('<table>');\r\n                        var theader = tableElem.find('thead tr:first-child').clone();\r\n                        tableElem.find('thead tr:first-child').css('opacity', '0');\r\n                        tbl.append(theader);\r\n                        tbl.addClass(\"fixed-header-when-scrolled\");\r\n                        _this.before(tbl);\r\n                        _this.data('appended', true);\r\n                    }\r\n                    else if (elScrollTop == 0) {\r\n                        _this.parent().find(\".fixed-header-when-scrolled\").remove();\r\n                        tableElem.find('thead tr:first-child').css('opacity', '1');\r\n                        _this.data('appended', false);\r\n                    }\r\n                };\r\n\r\n                function scrollBreakPoints(scrollTop, direction) {\r\n                    if (attrs.scrollBreakPoints) {\r\n                        var breakPConfig = JSON.parse(attrs.scrollBreakPoints),\r\n                            BCkeys = Object.keys(breakPConfig),\r\n                            srElements = element.find(BCkeys.join(\",\"));\r\n\r\n                        for (var z = 0; z < BCkeys.length; z++) {\r\n                            element.find(BCkeys[z]).data(\"configSele\", BCkeys[z]);\r\n                        }\r\n\r\n                        if (srElements.length > 0) {\r\n                            srElements.each(function (i, e) {\r\n                                var el = $(e),\r\n                                    pos = el.position(),\r\n                                    bConfig = breakPConfig[el.data(\"configSele\")],\r\n                                    touchValue = function () {\r\n                                        var r;\r\n                                        if (typeof bConfig.top == \"number\") {\r\n                                            r = bConfig.top * parseInt(scope.scrollHeight);\r\n                                        } else {\r\n                                            r = parseInt(bConfig.top);\r\n                                        }\r\n\r\n                                        return r;\r\n                                    }();\r\n\r\n                                if (direction == \"upward\" && pos.top <= touchValue && !el.data(\"fired\")) {\r\n                                    el.data(\"fired\", true);\r\n                                    onBreakPoints(scope, {\r\n                                        e: {\r\n                                            index: i,\r\n                                            direction: \"upward\"\r\n                                        }\r\n                                    });\r\n                                    scope.$digest();\r\n                                } else if (direction == \"downward\" && ((bConfig.reverse === true ? pos.top + el.outerHeight() : pos.top) >= (touchValue)) && el.data(\"fired\")) {\r\n                                    el.data(\"fired\", false);\r\n                                    onBreakPoints(scope, {\r\n                                        e: {\r\n                                            index: i,\r\n                                            direction: \"downward\"\r\n                                        }\r\n                                    });\r\n                                    scope.$digest();\r\n                                };\r\n                            });\r\n                        };\r\n                    };\r\n                };\r\n\r\n            \t//unique ID for scroll\r\n                scrollCounter = scrollCounter + 1;\r\n                scope.scrollid = 'scroll-' + scrollCounter;\r\n\r\n                //custom config\r\n                var customConfig;\r\n                attrs.$observe('scrollConfig', function (value) {\r\n                    if (value) {\r\n                        customConfig = scope.$eval(attrs.scrollConfig);\r\n                    };\r\n                });\r\n\r\n                //scroll config\r\n                var scrollConfig = {},\r\n                onScrollEnd = $parse(attrs.onScrollEnd),\r\n                onScrollToTop = $parse(attrs.onScrollToTop),\r\n                onScrollInProgress = $parse(attrs.onScrollInProgress);\r\n\r\n                attrs.$observe('height', function (value) {\r\n                    if (value) {                               \r\n                        if (angular.isFunction(onScrollEnd) || angular.isFunction(onScrollToTop)) {\r\n                            scrollConfig.onScroll = function (y, x) {\r\n                                if (y.maxScroll > 0 && y.scroll >= y.maxScroll && angular.isFunction(onScrollEnd)) {\r\n                                    onScrollEnd(scope, { e: \"\" });\r\n                                }\r\n                                if (y.scroll == 0 && angular.isFunction(onScrollToTop)) {\r\n                                    onScrollToTop(scope, { e: \"\" });\r\n                                }\r\n                                else if (y.maxScroll > y.scroll > 0 && angular.isFunction(onScrollInProgress)) {\r\n                                    onScrollInProgress(scope, { e: \"\" });\r\n                                }\r\n                                angular.element('.fixeddd').hide();\r\n                            };\r\n                        }\r\n                    \r\n\r\n                        if (!attrs.vOffset) {\r\n                            if (value == \"parent\") {\r\n                                scope.scrollHeight = element.parent().outerHeight();\r\n                                $(window).resize(resizeHeight100P);\r\n                            } else {\r\n                                scope.scrollHeight = value;\r\n                            }\r\n                        } else if (attrs.vOffset) {\r\n                        \t// If scroll to be responsive excluding an offset\r\n                            $(window).unbind(\"resize\", resizeHeight100P);\r\n                        \tscope.scrollHeight = $window.innerHeight - parseInt(attrs.vOffset);\r\n                        } else {\r\n                        \tscope.scrollHeight = value;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                function resizeHeight100P(a) {\r\n                    scope.scrollHeight = element.parent().outerHeight();\r\n                    scope.$digest();\r\n                };\r\n\r\n                if (attrs.vOffset || attrs.hOffset) {\r\n                \t// Resize event if scroll to be responsive excluding an offset\r\n                \t$(window).bind('resize', function () {\r\n                        scope.scrollHeight = $window.innerHeight - parseInt(attrs.vOffset);\r\n                        scope.$digest();\r\n                        $timeout(function () {\r\n                \t\t\tif (attrs.vOffset) {\r\n                \t\t\t\tif (element.closest('.modal').length > 0) {\r\n                \t\t\t\t\tvar modalHeight = element.closest('.modal').height();\r\n                \t\t\t\t\telement.closest('.modal').css('top', window.innerHeight / 2 - modalHeight / 2 + 'px');\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t});\r\n                \t});\r\n                }\r\n                attrs.$observe('vOffset', function (newVal) {\r\n                    scope.scrollHeight = $window.innerHeight - parseInt(newVal);\r\n                });\r\n                scope.$on('scrollTopToBottom', function (event, args) {\r\n                    element.find('.scrollbar-outer').animate({ scrollTop: args }, \"slow\");\r\n                });\r\n\r\n                var onScrollHEnd = $parse(attrs.onScrollHEnd);\r\n                var onScrollHToTop = $parse(attrs.onScrollHToTop);\r\n                var onScrollHInProgress = $parse(attrs.onScrollHInProgress);\r\n\r\n                var eleWidth = element.css('width');\r\n                scope.scrollWidth = parseInt(eleWidth) ? eleWidth : '100%';\r\n\r\n                attrs.$observe('width', function (value) {\r\n                \tif (value) {\r\n                \t\tif (angular.isFunction(onScrollHEnd) || angular.isFunction(onScrollHToTop)) {\r\n                \t\t\tscrollConfig.onScroll = function (y, x) {\r\n                \t\t\t\tif (x.maxScroll > 0 && x.scroll == x.maxScroll && angular.isFunction(onScrollHEnd)) {\r\n                \t\t\t\t\tonScrollHEnd(scope, { e: \"\" });\r\n                \t\t\t}\r\n                \t\t\t\tif (x.scroll == 0 && angular.isFunction(onScrollHToTop)) {\r\n                \t\t\t\t\tonScrollHToTop(scope, { e: \"\" });\r\n                \t\t\t\t}\r\n                \t\t\t\telse if (x.maxScroll > x.scroll > 0 && angular.isFunction(onScrollHInProgress)) {\r\n                \t\t\t\t\tonScrollHInProgress(scope, { e: \"\" });\r\n                \t\t\t}\r\n                \t\t};\r\n                \t};\r\n                \t\tscope.scrollWidth = value;\r\n                }\r\n                });\r\n\r\n                attrs.$observe('connectScrolls', function (value) {\r\n                \tif (value) {\r\n                \t\tvar value = JSON.parse(value),\r\n                \t\t\tscrollTopSourceStorage = 0;\r\n\r\n                \t\tscrollConfig.onScroll = function (y, x) {\r\n                \t\t\tvar $vSource = $('.' + value.vSource),\r\n\t\t\t\t\t\t\t$vSourceP = $vSource.parent().parent(),\r\n\t\t\t\t\t\t\t$hSource = $('.' + value.hSource),\r\n\t\t\t\t\t\t\t$hSourceP = $hSource.parent().parent(),\r\n\t\t\t\t\t\t\t$vertical = $('.' + value.vertical),\r\n\t\t\t\t\t\t\t$verticalP = $vertical.parent().parent(),\r\n                \t\t\t$horizontal = $('.' + value.horizontal);\r\n\r\n                \t\t\tvar sourceHeight = $vSource.height();\r\n                \t\t\tvar scrollTopSource = $vSourceP.scrollTop(),\r\n                \t\t\tscrollTopConnect = $verticalP.scrollTop();\r\n\r\n                \t\t\tif (scrollTopSource > scrollTopSourceStorage) {\r\n                \t\t\t\tif (scrollTopSource > scrollTopConnect) {\r\n                \t\t\t\t\t$verticalP.scrollTop(scrollTopSource);\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t\telse if (scrollTopSource < scrollTopSourceStorage) {\r\n                \t\t\t\tif (scrollTopSource < scrollTopConnect) {\r\n                \t\t\t\t\t$verticalP.scrollTop(scrollTopSource);\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t\telse {\r\n                \t\t\t\tvar scrollLeft = $hSourceP.scrollLeft();\r\n                \t\t\t\t$horizontal.scrollLeft(scrollLeft);\r\n                \t\t\t}\r\n                \t\t\tscrollTopSourceStorage = scrollTopSource;\r\n                \t\t\tangular.element('.fixeddd').hide();\r\n                \t\t};\r\n\t\t\t\t\t}\r\n                });\r\n\r\n                function dateHideOnScroll(e) {\r\n                    element.find(\"input.datepicker\").each(function (i, el) {\r\n                        var dobj = $(el).data(\"daterangepicker\");\r\n                        if (dobj && dobj.isShowing) {\r\n                            dobj.hide()\r\n                        }\r\n                    });\r\n                }\r\n                //Cleaning floating elements on scroll\r\n                var lastOpenSelectDD;\r\n                function cleanFloatingElements(e) {\r\n                    element.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                        var autoComplete = $(this).data().autocomplete;\r\n                        if (autoComplete && autoComplete.visible) {\r\n                            autoComplete.hide();\r\n                        }\r\n                    });\r\n                    /* close select-dropdown */\r\n                    var $selectDd = $window.lastOpenedDropdownConfig;\r\n                    if ($selectDd && $selectDd != lastOpenSelectDD && $selectDd.origin.hasClass('select-dropdown')) {\r\n                        $selectDd.origin.trigger('close');\r\n                    }\r\n                    lastOpenSelectDD = $selectDd;\r\n                }\r\n                //End of cleaning floating elements on scroll\r\n                var lockScrollObser = false;\r\n                attrs.$observe(\"lockScroll\", function (a) {\r\n                    if (!lockScrollObser) {\r\n                        lockScrollObser = true;\r\n                        $timeout(ls.bind(this, a));\r\n                    } else {\r\n                        ls(a);\r\n                    }\r\n                });\r\n\r\n                function ls(a) {\r\n                    if (a) {\r\n                        var $scroller = element.find(\".scroll-content\");\r\n                        if (a == \"true\") {\r\n                            $scroller.data(\"scrolltop\", $scroller.scrollTop());\r\n                            $scroller.get(0).addEventListener(\"scroll\", lockScroll, true);\r\n                            if (onScrollLockUnlock) {\r\n                                onScrollLockUnlock(scope, { e: 'locked' });\r\n                                scope.$digest();\r\n                            }\r\n                        } else if (a == \"false\") {\r\n                            $scroller.get(0).removeEventListener(\"scroll\", lockScroll, true);\r\n                            if (onScrollLockUnlock) {\r\n                                onScrollLockUnlock(scope, { e: 'unLocked' });\r\n                                scope.$digest();\r\n                            }\r\n                        }\r\n                }\r\n\t\t\t\t\r\n                };\r\n                //Cleaning floating elements on scroll\r\n                function cleanFloatingElements(e) {\r\n                \telement.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                \t\tvar autoComplete = $(this).data().autocomplete;\n                \t\tif (autoComplete && autoComplete.visible) {\r\n                \t\t\tautoComplete.hide();\r\n                \t\t}\r\n                \t});\r\n                }\r\n            \t//End of cleaning floating elements on scroll\r\n                function lockScroll(e) {\r\n                    var st = $(this).data(\"scrolltop\");\r\n                    this.scrollTop = st;\r\n                    e.stopPropagation();\r\n                    return false;\r\n                };\r\n\r\n                var scrollOnUpdate = {\r\n                        handlers: [],\r\n                        addHandlers: function (func) {\r\n                            this.handlers.push(func);\r\n                        }\r\n                    };\r\n\r\n                scrollConfig.onUpdate = function () {\r\n                    var _this = this,\r\n                        _arguments = arguments;\r\n\r\n                    scrollOnUpdate.handlers.forEach(function (func) {\r\n                        if (typeof func === \"function\") {\r\n                            func.apply(_this, _arguments);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scrollOnUpdate.addHandlers(function (y, x) {\r\n                    if (y.closest('.modal.noTransform').length > 0) {\r\n                        var modalHeight = y.closest('.modal').height();\r\n                        y.closest('.modal').css('top', window.innerHeight / 2 - modalHeight / 2 + 'px');\r\n                    }\r\n                });\r\n\r\n                var scrollToElement,\r\n                    scrollToElementName;\r\n                if (attrs.scrollToElement) {\r\n\r\n                    scrollOnUpdate.addHandlers(function (y, x) {\r\n                        var $scrollToElementName = y.find(scrollToElementName.content);\r\n                        if (scrollToElementName && scrollToElementName.status && $scrollToElementName.length) {\r\n                            y.animate({ scrollTop: (($scrollToElementName.offset().top - y.children('div').offset().top) - 10) }, \"slow\");\r\n                        }\r\n                    });\r\n\r\n                    scrollToElement = attrs.$observe('scrollToElement', function (value) {\r\n                        scrollToElementName = attrs.scrollToElement && JSON.parse(attrs.scrollToElement);\r\n                    });\r\n                }\r\n\r\n                setTimeout(function () {\r\n                    var scrollWrapper = angular.element('#' + scope.scrollid);\r\n                    var mergedConfig = angular.merge(scrollConfig, customConfig);\r\n                    scrollWrapper.scrollbar(mergedConfig);\r\n\r\n                \t//Fixed header on scroll\r\n                    var scrlTop;\r\n                    scrollWrapper.scroll(function (e) {\r\n                        var _this = $(this),\r\n                            currScrlTop = _this.scrollTop(),\r\n                            dir;\r\n\r\n                        if (isFixedHeader) {\r\n                            scope.fixedHeader(e);\r\n                        } else if (isScrollDate) {\r\n                            dateHideOnScroll(e);\r\n                        }\r\n                        if (attrs.scrollBreakPoints) {\r\n                            if (currScrlTop > scrlTop) {\r\n                                dir = \"upward\";\r\n                            } else if (currScrlTop < scrlTop) {\r\n                                dir = \"downward\";\r\n                            };\r\n                            scrollBreakPoints(currScrlTop, dir);\r\n                        }\r\n                        cleanFloatingElements(e);\r\n                        scrlTop = currScrlTop;\r\n                    });\r\n                    scrlTop = scrollWrapper.scrollTop();\r\n\r\n                    // for ie update the icon inside the smartscroll\r\n                    var ua = window.navigator.userAgent, use = scrollWrapper.find('use');\r\n                    if (ua.indexOf('MSIE') !== undefined || ua.indexOf('Trident/') !== undefined || ua.indexOf('Edge/') !== undefined) {\r\n                        if (use.length > 0) {\r\n                            use.each(function () {\r\n                                var _this = angular.element(this), currentItem = _this.attr(\"xlink:href\");\r\n                                _this.attr(\"xlink:href\", \"\").attr(\"xlink:href\", currentItem);\r\n                    });\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    if (scrollToElement) {\r\n                        scrollToElement();\r\n                    }\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartScroll/smartScrollTemplate.html'\r\n        };\r\n    }]);\r\n})();\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartLazyLoad', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                smartLazyLoad: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var scrollElement = element.closest('.scrollbar-outer');\r\n                scrollElement.scroll(function () {\r\n                    if (this.scrollTop + this.offsetHeight >= this.scrollHeight) {\r\n                        scope.$apply(function () {\r\n                            scope.smartLazyLoad();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n})();","(function() {\r\n    'use strict';\r\n    \r\n    angular.module('SMART2').directive('smartPlaceholder', ['$translate', 'ScrollTo', function ($translate, ScrollTo) {\r\n        return {\r\n            restrict: 'A',\r\n            replace: true,\r\n            link: function (scope, element, attrs) {\r\n                window.activePlaceholder = element;\r\n\t\t\t\tvar tmpPlaceholder = getHTMLPlaceholder(scope);\r\n                element.addClass((!scope.property.isMandatory ? 'optionalField ' : '') + ((scope.property.attributes.readonly ? 'readOnlyField' : '')));\r\n                element.find('.smart-ph-label').html('<span>' + $translate.instant(scope.property.label) + '</span>');\r\n                element.find('.smart-ph-value').html('<span>' + tmpPlaceholder + '</span>');\r\n                element.attr('title', tmpPlaceholder);\r\n\t\t\t\t\r\n\t\t\t\tif (tmpPlaceholder != '') {\r\n                    element.find('.smart-ph-label').addClass('active');\r\n                }\r\n\r\n                if (scope.property.attributes.disable || scope.property.attributes.readonly) {\r\n                    element.find('.smart-ph-value').addClass('disabled');\r\n                }\r\n                else {\r\n                    element.attr('tabindex', 0);\r\n                }\r\n\t\t\t\t\r\n                var onAttributesChange = scope.$watchGroup(['property.attributes.disable', 'property.attributes.readonly', 'model.' + scope.property.data, 'property.validate', 'property.focus'], function (newVal, oldVal) {\r\n\t\t\t\t\t//\tdisable and readonly change listener\r\n\t\t\t\t\tif(!angular.equals(newVal[0], oldVal[0]) || !angular.equals(newVal[1], oldVal[1])) {\r\n\t\t\t\t\t    if (newVal[0] || newVal[1]) {\r\n\t\t\t\t\t        element.find('.smart-ph-value').addClass('disabled');\r\n\t\t\t\t\t        element.attr('tabindex', -1);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t    else {\r\n\t\t\t\t\t        element.find('.smart-ph-value').removeClass('disabled');\r\n\t\t\t\t\t        element.attr('tabindex', 0);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//\tdata change listener\r\n\t\t\t\t\tif(!angular.equals(newVal[2], oldVal[2])) {\r\n\t\t\t\t\t\ttmpPlaceholder = getHTMLPlaceholder(scope);\r\n\t\t\t\t\t\telement.find('.smart-ph-value').html('<span>' + tmpPlaceholder + '</span>');\r\n\t\t\t\t\t\telement.attr('title', tmpPlaceholder);\r\n\t\t\t\t\t\tif (tmpPlaceholder != '') {\r\n\t\t\t\t\t\t\telement.find('.smart-ph-label').addClass('active');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t    element.find('.smart-ph-label').removeClass('active');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                    //\tvalidate change listener\r\n\t\t\t\t\tif (!angular.equals(newVal[3], oldVal[3])) {\r\n\t\t\t\t\t    if (scope.property.validate) {\r\n\t\t\t\t\t        if ((angular.isUndefined(scope.property.attributes.readonly) || scope.property.attributes.readonly == false) &&\r\n                                (angular.isUndefined(scope.property.attributes.disable) || scope.property.attributes.disable == false)) {\r\n\t\t\t\t\t            validate();\r\n\t\t\t\t\t        }\r\n\t\t\t\t\t        scope.property.validate = false;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\r\n                    //\tfocus change listener\r\n\t\t\t\t\tif (!angular.equals(newVal[4], oldVal[4])) {\r\n\t\t\t\t\t    if (scope.property.focus) {\r\n\t\t\t\t\t        ScrollTo.perform(element, angular.element('#' + scope.formWidgetId));\r\n\t\t\t\t\t        scope.onFocus();\r\n\t\t\t\t\t        scope.property.focus = false;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n                });\r\n\r\n                var validate = function () {\r\n                    var model = eval('scope.model.' + scope.property.data);\r\n                    var error;\r\n\r\n                    if(scope.property.isMandatory) {\r\n                        if ((scope.property.attributes.type === 'text' || angular.isUndefined(scope.property.attributes.type)) && (angular.isUndefined(model) || model == null || model.trim() == '')) {\r\n                            error = $translate.instant(\"enterValueErrMsg\");\r\n                        }\r\n                        else if (scope.property.attributes.type == 'autocomplete' && (angular.isUndefined(model) || model == null || model == '' || (model && model.hasOwnProperty('value') && model.value.trim() == ''))) {\r\n                            error = $translate.instant(\"enterValueErrMsg\");\r\n                        }\r\n                        else if (scope.type == 'number' && isNaN(scope.ngModel)) {\r\n                            error = $translate.instant(\"enterNumberErrMsg\");\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isUndefined(error) && scope.property.rules) {\r\n                        var rules = scope.property.rules;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, model))) {\r\n                                    error = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (error) {\r\n                        element.find('.smart-ph-label').addClass('active');\r\n                        element.find('.smart-ph-value').addClass('invalid');\r\n                        element.find('.smart-ph-error').html(error);\r\n                        //scope.$parent.errorMessage = error;\r\n                    }\r\n                    else {\r\n                        element.find('.smart-ph-value').removeClass('invalid');\r\n                        element.find('.smart-ph-error').html('');\r\n                        if (tmpPlaceholder == '') {\r\n                            element.find('.smart-ph-label').removeClass('active');\r\n                        }\r\n                        //scope.$parent.errorMessage = undefined;\r\n                    }\r\n                };\r\n\r\n                //validate();\r\n                \r\n                scope.onFocus = function (e) {\r\n                    if (scope.property.attributes.disable || scope.property.attributes.readonly) {\r\n                        return;\r\n                    }\r\n                    scope.$parent.isPreviewMode = false;\r\n                };\r\n\r\n                scope.onRemoveButtonClick = function (e) {\r\n                    scope.property.isVisible = !scope.property.isVisible;\r\n                    e.stopPropagation();\r\n                };\r\n\r\n                scope.$parent.onEditableRender = function (editableScope, editableEle) {\r\n                    editableEle.find('input').focus();\r\n                    editableEle.find('input').select();\r\n                    element.attr('tabindex', -1);\r\n                    if (this.errorMessage) {\r\n                        editableEle.find('input').addClass('invalid');\r\n                        editableEle.find('label').attr('data-error', this.errorMessage);\r\n                        this.errorMessage = undefined;\r\n                    }\r\n                };\r\n\r\n                scope.$parent.onStopEdit = function (editableScope, editableEle) {\r\n                    this.isPreviewMode = true;\r\n                    if (editableScope.errorMessage != undefined || editableScope.errorMessage != null) {\r\n                        this.errorMessage = editableScope.errorMessage;\r\n                        setTimeout(function () {\r\n                            window.activePlaceholder.find('.smart-ph-label').addClass('active');\r\n                            window.activePlaceholder.find('.smart-ph-value').addClass('invalid');\r\n                            window.activePlaceholder.find('.smart-ph-error').html(editableScope.errorMessage);\r\n                        });\r\n                    }\r\n                };\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onAttributesChange();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSection/smartPlaceholderTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\t\r\n\tvar setPrecisionLimits = function (number, decimalPrecision, minMaxPrecision) {\r\n        if (number != undefined) {\r\n            var arr = (number.toString()).split('e')\r\n            if (arr.length > 1 && parseInt(arr[1]) < 0) {\r\n                number = (number).toFixed(6);\r\n            }\r\n            var tempArr = number.toString().split('.');\r\n            if (tempArr != undefined && tempArr.length > 1) {\r\n                var preDecimal = tempArr[0];\r\n                if (preDecimal != 0 && preDecimal.toString().length > 20) {\r\n                    var tempVal = preDecimal.toString().substring(0, 19);\r\n                    number = parseInt(tempVal);\r\n                }\r\n            }\r\n            else {\r\n                if (number != 0 && number.toString().length > 20) {\r\n                    var tempVal = number.toString().substring(0, 19);\r\n                    number = parseInt(tempVal);\r\n                }\r\n            }\r\n            if (decimalPrecision != undefined) {\r\n                number = parseFloat(parseFloat(number).toFixed(decimalPrecision));\r\n            }\r\n            else if (minMaxPrecision !== undefined && minMaxPrecision !== '') {\r\n                var splitPrecision = JSON.parse(minMaxPrecision);\r\n                if (splitPrecision.length > 2 || splitPrecision.length < 1) {\r\n                    //\tdon't do anything\r\n                }\r\n                else {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    var highPrecisionLimit = splitPrecision[1];\r\n\r\n                    var postDecimalNumbers = ((number + \"\").split(\".\")[1] != undefined) ? (number + \"\").split(\".\")[1].length : 0;\r\n\r\n                    if (postDecimalNumbers == 0) {\r\n                        //\tdon't do anything\r\n                    }\r\n                    else if (lowerPrecisionLimit > postDecimalNumbers && postDecimalNumbers < highPrecisionLimit && postDecimalNumbers != 0) {\r\n                        number = parseFloat(parseFloat(number).toFixed(lowerPrecisionLimit));\r\n                    }\r\n                    else if (postDecimalNumbers >= highPrecisionLimit && postDecimalNumbers != 0) {\r\n                        var fixed = Math.pow(10, highPrecisionLimit);\r\n                        number = Math.floor(number * fixed) / fixed;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return number;\r\n    };\r\n\r\n\r\n    var getFormattedDate = function (dateVal, dateFormat, isSetFromGrid) {\r\n        var output = '';\r\n        dateFormat = dateFormat.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n        var isDateBlank = false;\r\n        var doesContainDateString = isSetFromGrid == 'true' ? true : (dateVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n\r\n        if (dateVal == \"\" || dateVal == null) {\r\n            dateVal = Date.now();\r\n            isDateBlank = true;\r\n        }\r\n        else {\r\n            if (doesContainDateString) {\r\n                var tmpModel = (dateVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                tmpModel = tmpModel.split('+');\r\n                tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + dateVal + '\").getTime()') : tmpModel[0]));\r\n                output = moment(tmpModel).format(dateFormat);\r\n            }\r\n            else {\r\n                if (Object.prototype.toString.call(dateVal) !== '[object Date]') {\r\n                    dateVal = parseInt(dateVal);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!isDateBlank) {\r\n            if (!doesContainDateString) {\r\n                output = moment(dateVal).format(dateFormat);\r\n            }\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    var getHTMLPlaceholder = function (scope) {\r\n        var placeHolder;\r\n        var tmpModel = eval(\"scope.model.\" + scope.property.data);\r\n\r\n        switch (scope.property.type) {\r\n            case 'textfield':\r\n                switch (scope.property.attributes.type) {\r\n                    case 'number':\r\n                        placeHolder = setPrecisionLimits(tmpModel, scope.property.attributes.decimalprecision, scope.property.attributes.minmaxprecision);\r\n                        break;\r\n\r\n                    case 'date':\r\n                        placeHolder = getFormattedDate(tmpModel, scope.property.attributes.format);\r\n                        break;\r\n\r\n                    case 'autocomplete':\r\n                        if (tmpModel == undefined || tmpModel == null || tmpModel == '') {\r\n                            return '';\r\n                        }\r\n                        var str = scope.property.attributes.displayformat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                        try {\r\n                            var parentSplit = str.split('{');\r\n                            for (var j = 0; j < parentSplit.length; j++) {\r\n                                var childSplit = parentSplit[j].split('}');\r\n                                for (var k = 0; k < childSplit.length; k++) {\r\n                                    if (childSplit[k].indexOf('.') > 0 || tmpModel.hasOwnProperty(childSplit[k])) {\r\n                                        evalResult = eval('tmpModel.' + childSplit[k]);\r\n                                        evaluatedKeysCounter++;\r\n                                        if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                            evalResult = '';\r\n                                            nullKeysCounter++;\r\n                                        }\r\n                                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (evaluatedKeysCounter == nullKeysCounter) {\r\n                                str = '';\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                        placeHolder = str;\r\n                        break;\r\n\r\n                    default:\r\n                        placeHolder = eval(\"scope.model.\" + scope.property.data);\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            case 'dropdown':\r\n            case 'select':\r\n                placeHolder = (eval(\"scope.model.\" + scope.property.data + (scope.property.attributes.displaykey ? \".\" + scope.property.attributes.displaykey : (scope.property.attributes.datakey ? \"\" + scope.property.attributes.datakey : \"\"))));\r\n                break;\r\n        }\r\n        return placeHolder == null || placeHolder == undefined ? '' : placeHolder;\r\n    };\r\n\t\r\n})();    ","  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Section\r\n   * @description This directive is useful for creating a section.\r\n   * \r\n   * @attr {String} label\r\n   *    Label to be displayed on section header. If 'is-header' is set to true, label will be displayed on section header.\r\n   * @attr {Boolean} plain\r\n   *    If set to true, section with no style will be generated\r\n   * @attr {Boolean} is-collapsible\r\n   *    If set to true, section will be collapsible\r\n   * @attr {String} header-template\r\n   *    This attribute is useful for creating sections with custom header templates.\r\n   *    'header-template' is expected to be an URL of a template.\r\n   * @attr {Boolean} is-active\r\n   *    If set to false and if 'is-collapsible' is set to true, section will be displayed in collapsed mode. Default value is true.      \r\n   * @attr {Boolean} is-header\r\n   *    If set to true, section-header will be displayed. Default value is true.\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n    \r\n   * @example \r\n   Dynamic: (Section with header)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"label\": \"Section header\",\r\n                        \"isHeader\": true,\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example \r\n   Dynamic: (Section with custom header-template)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"headerTemplate\": \"abc.html\",\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example \r\n   Dynamic: (Section with collapsible header)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"headerTemplate\": \"abc.html\",\r\n                        \"isCollapsible\": true,\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example\r\n   Static:\r\n   <smart-section>\r\n        Section contents will go here\r\n    </smart-section> \r\n\r\n   * @example\r\n   Static: (Section with header)\r\n   <smart-section label=\"Section Header\" is-header=\"true\">\r\n        Section contents will go here\r\n   </smart-section>\r\n\r\n   * @example\r\n   Static: (Section with collpsible header)\r\n   <smart-section is-collapsible=\"true\">\r\n        Section contents will go here\r\n   </smart-section>\r\n        \r\n   * @example\r\n   Static: (Section with header and content place holder)\r\n   <smart-section is-header=\"true\">\r\n        <smart-section-header>\r\n            Section header will go here\r\n        </smart-section-header>\r\n        <smart-section-content>\r\n            Section contents will go here\r\n        </smart-section-content>\r\n    </smart-section>    \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var Textid = 16011982;\r\n    var sectionCounter = 0;\r\n    \r\n    angular.module('SMART2').directive('smartSection', ['$timeout', '$parse', function ($timeout, $parse) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: {\r\n                'header': '?smartSectionHeader',\r\n                'body': '?smartSectionBody'\r\n            },\r\n            scope: {\r\n                config: '=?',\r\n                model: '=?',\r\n                label: '@',\r\n                isSequential: '@',\r\n                isMandatory: '@',\r\n                isDraggable: '@',\r\n                parentScope: '=?',\r\n                formWidgetId: '@',\r\n                isCollapsible: '@',\r\n                enableFieldPreview: '@',\r\n                headerTemplate: '@',\r\n                isActive: '=?',\r\n                isHeader: '@',\r\n                plain: '@',\r\n                onClick: '&',\r\n                onHeaderClick: '&',\n                revisionMode:'@',\n                isSwitchable: '@',\n                onClickSwitchable: '&',\r\n                infinite: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.isSwitchFunc = function () {\r\n                    scope.onClickSwitchable({ \"section\": scope.config });\r\n                }\r\n               if (attrs.id !== '' || attrs.id !== undefined || attrs.id !== null) {\r\n                    scope.sectionId = attrs.id;\r\n                }\r\n                else {\r\n                    scope.sectionId = 'section-' + sectionCounter;\r\n                    sectionCounter++;\r\n                }\r\n\r\n                element.attr('id', scope.sectionId);\r\n\r\n                scope.collapsible = scope.$eval(scope.isCollapsible) == true ? true : false;\r\n                scope.active = angular.isUndefined(scope.isActive) || scope.isActive == true ? true : false;\r\n                scope.header = scope.$eval(scope.isHeader) ? true : false;\r\n\r\n                if(!scope.collapsible) {\r\n                    scope.active = true;\r\n                }\r\n                else {\r\n                    scope.header = true;\r\n                }\r\n\r\n                scope.isCollapsed = scope.active;\r\n\r\n                if(!scope.headerTemplate) {\r\n                    scope.headerTemplate = '';\r\n                }\r\n                scope.formLoaderConfig = { bgwhite: true, plain: true, center: true, message: \"\" };\r\n\t\t\t\t/*\r\n\t\t\t\t * Update optional field item\r\n\t\t\t\t */\r\n                var onRowsConfig = scope.$watch('config.rows', function (newConfig) {\r\n                    if(newConfig) {\r\n                        var rowsLen = scope.config.rows.length;\r\n                        for (var j = 0; j < rowsLen; j++) {\r\n                            var propLength = scope.config.rows[j].properties.length;\r\n                            for (var k = 0; k < propLength; k++) {\r\n                                var tData = scope.config.rows[j].properties[k];\r\n                                if (!tData.isMandatory) {\r\n                                    updateOptionalField(tData);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                    }\r\n                }, true);\r\n                    \r\n                var updateOptionalField = function (item) {\r\n                    var optFieldLen = scope.config.optionalFields.length;\r\n                    for (var i = 0; i < optFieldLen; i++) {\r\n                        var tData = scope.config.optionalFields[i];\r\n                        if (item.label == tData.label) {\r\n                            tData.visible = item.isVisible;\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\r\n                /*\r\n                 * Get row's visible properties length\r\n                 */\r\n                var getVisiblePropertiesLength = function (rowIndex) {\r\n                    var visiblePropertiesLength = 0,\r\n                        rowsPropLen = scope.config.rows[rowIndex].properties.length;\r\n                    for (var i = 0; i < rowsPropLen; i++) {\r\n                        var tData = scope.config.rows[rowIndex].properties[i];\r\n                        if (tData.isVisible && !tData.isHidden) {\r\n                            visiblePropertiesLength++;\r\n                        }\r\n                    }\r\n                    return visiblePropertiesLength;\r\n                };\r\n\r\n\r\n                scope.onOptionalFieldClick = function (isLabelClicked, item) {\r\n                    if (isLabelClicked && item.isVisible) {\r\n                        return;\r\n                    }\r\n\r\n                    /*\r\n                     *  If row's visible properties length is 0\r\n                     *  then splice the row and push it at the end of section\r\n                     */\r\n                    var tmpRow = scope.config.rows[item.rowIndex],\r\n                        tmpPropIndxData = tmpRow.properties[item.propertyIndex];\r\n                    if (!scope.$eval(scope.isSequential) && getVisiblePropertiesLength(item.rowIndex) == 0) {\r\n                        scope.config.rows.splice(item.rowIndex, 1);\r\n                        scope.config.rows.push(tmpRow);\r\n                        item.rowIndex = scope.config.rows.length - 1;\r\n                    }\r\n\r\n                    tmpPropIndxData.isVisible = !tmpPropIndxData.isVisible;\r\n\r\n                    /*\r\n                     *  scope.isSequential is set to 'true', form-widget-property would be added \r\n                     *  where it is positioned in the JSON structure else \r\n                     *  form-widget-property would be added at the end of row\r\n                     */\r\n                    if (!scope.$eval(scope.isSequential) && tmpPropIndxData.isVisible) {\r\n                        //var tmpProperty = scope.config.rows[item.rowIndex].properties[item.propertyIndex];\r\n                        tmpRow.properties.splice(item.propertyIndex, 1);\r\n                        tmpRow.properties.push(tmpPropIndxData);\r\n                        var rowsPropLength = scope.config.rows[item.rowIndex].properties.length;\r\n                        for (var i = 0; i < rowsPropLength; i++) {\r\n                            var optLength = scope.config.optionalFields.length;\r\n                            for (var j = 0; j < optLength; j++) {\r\n                                if (tmpRow.properties[i].label == scope.config.optionalFields[j].label) {\r\n                                    scope.config.optionalFields[j].propertyIndex = i;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    item.visible = !item.visible;\r\n                    //  Expand the section\r\n                    if (item.visible) {\r\n                        var clearMe = setTimeout(function () {\r\n                            expandSection();\r\n                            clearTimeout(clearMe);\r\n                            clearMe = null;\r\n                        }, 250);\r\n                    }\r\n                };\r\n\r\n                var isActiveTriggered = false;\r\n\r\n                /*\r\n                 * Expand section if isActive is set to true\r\n                 */\r\n                var onIsActive = scope.$watch('isActive', function (newValue) {\r\n                \tif (angular.isDefined(newValue) && newValue) {\r\n                \t\tisActiveTriggered = true;\r\n                    \texpandSection();\r\n                    \tscope.isActive = false;\r\n                    }\r\n                });\r\n\r\n\r\n                /*\r\n                 * On optional field click listener\r\n                 */\r\n                var onOptionalFieldClick = scope.$on('optionalFieldClick', function (event, args) {\r\n                    try {\r\n                        if (args.item.sectionKey === scope.config.key) {\r\n                            scope.onOptionalFieldClick(args.isLabelClicked, args.item);\r\n                        }\r\n                    }\r\n                    catch(e) {}\r\n                });\r\n\r\n\r\n                /*\r\n                 *  Expand section\r\n                 */\r\n                var expandSection = function () {\r\n                    var collapsibleHdr = element.find('.collapsible-header');\r\n                    if (!collapsibleHdr.hasClass('active')) {\r\n                        collapsibleHdr.trigger('click');\r\n                    }\r\n                    else if (!collapsibleHdr.hasClass('active')) {\r\n                        collapsibleHdr.trigger('click');\r\n                    }\r\n                };\r\n\r\n                var isClicked = false\r\n\r\n               var clrTimeout = setTimeout(function () {\r\n                    element.find('.collapsible-header').click(function () {\r\n                    \tvar ele = this;\r\n\r\n                        scope.$evalAsync(function () {\r\n                        \tif (isClicked && !isActiveTriggered)\r\n                        \t\treturn;\r\n                        \t\r\n                        \tisClicked = true;\r\n                            scope.isCollapsed = angular.element(ele).hasClass('active');\r\n                            scope.active = scope.isCollapsed;\r\n                            scope.onHeaderClick();\r\n                            scope.onClick();\r\n                        \t    isClicked = false;\r\n                        \tisActiveTriggered = false;\r\n                            clearTimeout(clrTimeout);\r\n                            clrTimeout = null;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                \r\n                /*\r\n                 *  Expand section on header focus\r\n                 */\r\n                scope.onSectionHeaderFocus = function (e) {\r\n                    if ($(e.target).hasClass('section-header-focuser') && !scope.active) {\r\n                        scope.config.isContentLoaded = true;\r\n                        scope.active = true;\r\n                        //scope.isCollapsed = true;\r\n                        expandSection();\r\n                    }\r\n                    /* in focus for section move on top */\r\n                    var conf = scope.config.key,\r\n                     formwidget = scope.formWidgetId,\r\n                     $itemSelected = $('#' + conf),\r\n                     staticTopmargin = 64; // 64 is subheader height\r\n\r\n                    var displacementItem = $itemSelected.offset().top - angular.element('#' + formwidget + '-sortable').offset().top;\r\n\r\n                    displacementItem = displacementItem + staticTopmargin;\r\n                    setTimeout(function () {\r\n                        angular.element('body,html').animate({\r\n                            scrollTop: displacementItem\r\n                        }, \"medium\");\r\n                    }, 200);\r\n                    /* in focus for section move on top end */\r\n                };\r\n                \r\n\r\n                /*\r\n                 *  Remove all listeners on scope destroy\r\n                 */\r\n                scope.$on('$destroy', function () {\r\n                    onRowsConfig();\r\n                    onIsActive();\r\n                    onOptionalFieldClick();\r\n                    element.find('.collapsible-header').off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSection/smartSectionTemplate.html'\r\n        };\r\n    }]);\r\n    \r\n\r\n    angular.module('SMART2').directive('smartSectionItemRenderer', ['$compile', 'formWidgetUtils', '$translate', '$templateCache', '$timeout', function ($compile, formWidgetUtils, $translate, $templateCache, $timeout) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: false,\r\n            link: function (scope, element, attrs) {\r\n                var html = \"\", commonAttributes;\r\n\r\n                if (scope.section) {\r\n                    if (scope.section.controller) {\r\n                        //  Creating dataModel variable so that child controller can access it using $scope.formDataModel\r\n                        scope.formDataModel = scope.$parent.$parent.$parent.modelData;\r\n\r\n                        html += '<div ng-controller=\"' + scope.section.controller + '\">';\r\n                    }\r\n\r\n                    if (scope.section.isLazyLoadEnabled) {\r\n                        scope.section.isActive = false;\r\n                    }\n\n                    //scope.section.isContentLoaded = !angular.copy(scope.section.isLazyLoadEnabled);\n\r\n                    //  Section's primary attribute and can be optional\r\n                    scope.extendedSectionConfig = angular.extend({\r\n                        isMandatory: false,\r\n                        isCollapsible: true,\r\n                        isDraggable: false,\r\n                        isHeader: true,\r\n                        isActive: true,\r\n                        isHidden: true,\r\n                        isSwitchable: false,\r\n                        isFieldPreviewEnabled: false,\r\n                        isSectionDisable: false,\r\n                        isLazyLoadEnabled: false,\r\n                        infinite:false,\r\n                        headerTemplate: ''\r\n                    }, scope.section);\r\n\r\n                    scope.section.isLoading = true;\n                    scope.section.isContentLoaded = false; // !angular.copy(scope.section.isLazyLoadEnabled);\n\n                    var cancelTOut = $timeout(function () {\r\n                        scope.section.isLoading = false;\r\n                        scope.section.isContentLoaded = !angular.copy(scope.section.isLazyLoadEnabled);\r\n                        $timeout.cancel(cancelTOut);\r\n                        cancelTOut = null;\r\n                    }, scope.$index * 500);\r\n\r\n                    //  Since smart-component-injector changes the scope hierarchy, change the parent scope ref accordingly\r\n                    scope.parentScopeRef = element.closest('smart-component-injector').length > 0 ? element.closest('smart-component-injector').scope() : scope.$parent.$parent.$parent.$parent;\r\n\r\n                    commonAttributes = ' label=\"{{section.label | translate}}\" config=\"section\" model=\"modelData\" plain=\"{{section.plain}}\" is-sequential=\"{{isSequential}}\" ' + formWidgetUtils.getAttributesMapping('primary', scope.extendedSectionConfig, scope, true) + ' parent-scope=\"' + (scope.section.controller ? '$parent.$$childTail' : 'parentScopeRef') + '\" form-widget-id=\"{{formWidgetId}}\" ';\r\n\r\n                    commonAttributes += \"revision-mode=\" + ((!scope.revisionMode || scope.revisionMode == \"false\") ? \"'false'\" : \"'true'\"); // added for revision mode\n\r\n                    html += '<smart-section id=' + scope.formWidgetId + '-section-' + scope.$index + ' ' + (scope.enableFieldPreview ? ' enable-field-preview=\"true\" ' : ' ') + commonAttributes + formWidgetUtils.mapEvents([\r\n                        { type: 'on-click', listener: 'onSectionClick(section)' },\n                        // { type: 'on-header-click', listener: formWidgetUtils.generateFunctionWithParams(scope.section.onHeaderClick, '$parent.$parent.$parent.$parent', true) },\n                        { type: 'on-header-click', listener: 'onSectionHeaderClick(section)' },\n                          { type: 'on-click-switchable', listener: formWidgetUtils.generateFunctionWithParams(scope.section.onClickSwitchable, '$parent.$parent.$parent.$parent', true) }\n                    ]) + '></smart-section>';\r\n\r\n                    if (scope.section.controller) {\r\n                        html += '</div>';\r\n                    }\r\n                }\r\n                else {\r\n                    var ngModelMapping, optionsMapping;\r\n\r\n\r\n                    if (scope.property.type == 'subsection') {\r\n                        ngModelMapping = 'model-data=\"model.' + scope.property.data + '\"' + 'form-model=\"model\"';\r\n                    }\r\n                    else if (scope.property.type == 'dropdown') {\r\n                        ngModelMapping = 'ng-model=\"model.' + scope.property.data + '\"';\r\n                        if (angular.isDefined(scope.property.optionsData))\r\n                            optionsMapping = 'options=\"model.' + scope.property.optionsData + '\"';\r\n                    }\r\n                    else {\r\n                        ngModelMapping = 'ng-model=\"model.' + scope.property.data + '\"';\r\n\r\n                        try {\r\n                            if (scope.property.attributes.ngModelOptions.getterSetter) {\r\n                                ngModelMapping = 'ng-model=\"parentScope.' + scope.property.data + '\"';\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n\r\n                    var areaType = false;\r\n                    if (typeof scope.property.attributes != 'undefined' && typeof scope.property.attributes.type != 'undefined' && scope.property.attributes.type == 'area')\r\n                    \tareaType = true;\r\n\r\n                    commonAttributes = ' class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + (scope.property.type != 'subsection' ? (scope.property.type == 'textfield' && areaType) ? ' area-height-manager' : ' line-height-manager' : '') + '\" label=\"{{property.label | translate}}\" focus=\"' + (typeof scope.property.focus == 'string' ? 'parentScope.' + scope.property.focus : 'property.focus') + '\" validate=\"' + (typeof scope.property.validate == 'string' ? 'parentScope.' + scope.property.validate : 'property.validate') + '\" ' + ngModelMapping + ' ' + optionsMapping + ' ' + formWidgetUtils.getAttributesMapping('primary', scope.property, scope) + ' parent-element=\"{{formWidgetId}}\" ' + formWidgetUtils.getAttributesMapping('secondary', scope.property.attributes, scope);\r\n                    if (scope.property.showInfo) {\r\n                        commonAttributes += 'showinfo =\"' + $translate.instant(scope.property.showInfo) + '\"';\r\n                    }\r\n           \r\n                    switch (scope.property.type) {\r\n                        case 'textfield':\n                            var enableFieldPreview = scope.enableFieldPreview == 'true' || scope.enableFieldPreview == true;\n\n                            if (enableFieldPreview) {\r\n                                scope.isPreviewMode = true;\r\n                                html = '<div style=\"margin-bottom: 15px;\" class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + ' input-field\" smart-placeholder ng-if=\"isPreviewMode\"></div>';\r\n                            }\n                            else {\r\n                                html = '';\r\n                            }\r\n\r\n                            html += '<smart-textfield' + (enableFieldPreview ? ' ng-if=\"!isPreviewMode\" ' : ' ') + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-focus', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onFocus, 'parentScope') },\r\n                                { type: 'on-blur', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onBlur, 'parentScope') },\r\n                                { type: 'on-key-up', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyUp, 'parentScope') },\r\n                                { type: 'on-key-down', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyDown, 'parentScope') },\r\n                                { type: 'on-key-press', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyPress, 'parentScope') },\r\n                                { type: 'on-enter', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onEnter, 'parentScope') },\r\n                                { type: 'on-select', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onSelect, 'parentScope') },\r\n                                { type: 'on-date-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDateChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-textfield>';\r\n                            break;\r\n\r\n                        case 'dropdown':\r\n                        case 'select':\r\n                            html = '<smart-select validate=\"property.validate\" ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-select>';\r\n                            break;\r\n\r\n                        case 'radio':\r\n                            html = '<smart-radio gap=\"true\"' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-radio>';\r\n                            break;\r\n\r\n                        case 'checkbox':\r\n                            html = '<smart-checkbox fill=\"true\" min-height=\"50px\" ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-checkbox>';\r\n                            break;\r\n\r\n                        case 'switch':\r\n                            html = '<smart-switch ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-switch>';\r\n                            break;\r\n\r\n                        case 'subsection':\r\n                            /*\r\n                             *  Check if subsection is angular2 enabled i.e. if sub-section should boostrap Angular2 app\r\n                             */\r\n                            if (scope.property.isAngular2Enabled) {\r\n                                html = $templateCache.get(scope.property.templateUrl);\r\n                            }\r\n                            else {\r\n                                /*\r\n                                 *  Convert onLoad function in a way that function name should be converted to subsection controller function\r\n                                 *  and its parameteres should be converted into parent controller's variables\r\n                                 */\r\n                                var onLoadFunction = '';\r\n                                if (scope.property.onLoad == '' || scope.property.onLoad == undefined || scope.property.onLoad == null) {\r\n                                    scope.property.onLoad = '';\r\n                                }\r\n                                if (scope.property.onLoad != '') {\r\n                                    onLoadFunction = formWidgetUtils.generateFunctionWithParams(scope.property.onLoad, 'parentScope');\r\n                                    onLoadFunction = onLoadFunction.replace('parentScope.' + scope.property.onLoad.split('(')[0], '$$$childHead.' + scope.property.onLoad.split('(')[0]);\r\n                                    onLoadFunction = onLoadFunction.replace(',property', '');\r\n                                }\r\n                                html = '<smart-subsection class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + ' padding0\" controller=\"{{property.controller}}\" init=\"{{property.init}}\" template-url=\"{{property.templateUrl}}\" parent-scope=\"parentScope\" widget-scope=\"parentScope.$parent.$parent.$parent\"' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                    { type: 'on-load', listener: onLoadFunction }\r\n                                ]) + '></smart-subsection>';\r\n                            }\r\n                            break;\r\n\r\n                        case 'revision':\r\n                            var revisionAttrs = [\r\n                                \"class = '\" + formWidgetUtils.getColspanClass(scope.property.colspan) + \"'\",\r\n                                \"label='{{::property.label | translate}}'\",\r\n                                \"old-data='::property.attributes.oldData'\",\r\n                                \"new-data='::property.attributes.newData' ng-if='::property.label'\"\r\n                            ].join(\" \");\r\n                            html = '<smart-revision '+ revisionAttrs +'></smart-revision>';\r\n                            break;\r\n                    }\r\n                }\r\n                \r\n\r\n                element.html(html);\r\n\r\n                if (scope.property && scope.property.isAngular2Enabled) {\r\n                    if (scope.property.isAngular2AppBootstrapped) {\r\n                        if (!window.angular2App.app._destroyed) {\r\n                            window.angular2App.app.destroy();\r\n                        }\r\n                        window.angular2App.platformBrowserDynamic.bootstrapModule(window.angular2App.moduleRef);\r\n                    }\r\n                    else {\r\n                        scope.property.isAngular2AppBootstrapped = true;\r\n                    }\r\n                }\r\n                else {\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    //angular.module('SMART2').directive('smartSectionPreview', ['$compile', '$translate', function ($compile, $translate) {\r\n    //    return {\r\n    //        restrict: 'AE',            \r\n    //        scope: false,\r\n    //        link: function (scope, element, attrs) {\r\n    //            var html = \"\";\r\n    //            var config = scope.$parent.config;\r\n    //            var model = scope.$parent.model;\r\n                \r\n\r\n    //            function getObjectValue(field, model, dataKey)\r\n    //            {\r\n    //                if (field.type)\r\n    //                {\r\n    //                    switch (field.type)\r\n    //                    {\r\n    //                        case 'textfield':\r\n    //                            if (field.attributes.type)\r\n    //                            {\r\n    //                                if (field.attributes.type == 'autocomplete') {\r\n    //                                    var obj = eval(\"model.\" + field.data);\r\n    //                                    if (obj)\r\n    //                                    {\r\n    //                                        if (field.attributes.displayformat.indexOf('-') > -1)\r\n    //                                        {\r\n    //                                            var splittedDisplayFormat = field.attributes.displayformat.split('-');\r\n    //                                            var result = \"\";\r\n    //                                            for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                                result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                                if (i < splittedDisplayFormat.length - 1)\r\n    //                                                    result += '--';\r\n    //                                            }\r\n    //                                            return (result ? result : '--');\r\n    //                                        }\r\n    //                                        var tVal = eval(\"obj.\" + field.attributes.displayformat.replace('{', '').replace('}', ''));\r\n    //                                        return (tVal ? tVal : '--');\r\n    //                                    }\r\n    //                                    return '--'; //eval(\"model.\" + field.data + \".\" + field.attributes.displayformat.replace('{', '').replace('}', ''));\r\n    //                                }\r\n    //                                else if (field.attributes.type == 'date') {\r\n    //                                    return getFormatedDate( eval(\"model.\" + field.data ), field.attributes.format);\r\n    //                                }\r\n    //                            }\r\n    //                            var tVal = eval(\"model.\" + field.data);\r\n    //                            return (tVal ? tVal : '');\r\n    //                            break;\r\n    //                        case 'dropdown':\r\n    //                            var obj = eval(\"model.\" + field.data);\r\n    //                            if (obj) {\r\n    //                                if (field.attributes.datakey.indexOf('-') > -1) {\r\n    //                                    var splittedDisplayFormat = field.attributes.datakey.split('-');\r\n    //                                    var result = \"\";\r\n    //                                    for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                        result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                        if (i < splittedDisplayFormat.length - 1)\r\n    //                                            result += '--';\r\n    //                                    }\r\n    //                                    return result;\r\n    //                                }\r\n    //                                var tVal = eval(\"obj.\" + field.attributes.datakey.replace('{', '').replace('}', ''));\r\n    //                                return (tVal ? tVal : '--');\r\n    //                            }\r\n    //                            return '--';\r\n    //                            break;\r\n    //                        case 'subsection':\r\n    //                            var obj = eval(\"model.\" + field.data);\r\n    //                            if (obj) {\r\n    //                                if (dataKey) {\r\n    //                                    if (dataKey.indexOf('-') > -1) {\r\n    //                                        var splittedDisplayFormat = dataKey.split('-');\r\n    //                                        var result = \"\";\r\n    //                                        for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                            result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                            if (i < splittedDisplayFormat.length - 1)\r\n    //                                                result += '--';\r\n    //                                        }\r\n    //                                        return result;\r\n    //                                    }\r\n    //                                    var tVal = eval(\"obj.\" + dataKey.replace('{', '').replace('}', ''));\r\n    //                                    return (tVal ? tVal : '--');\r\n    //                                }\r\n    //                            }\r\n    //                            return '--';\r\n    //                            break;\r\n    //                        default:\r\n    //                            return eval(\"model.\" + field.data)\r\n    //                            break;\r\n                                \r\n    //                    }\r\n    //                }\r\n    //                return eval(\"model.\" + field.data)\r\n    //            }\r\n\r\n\r\n    //            function getFormatedDate(dateObj, dateFormate) {\r\n    //                dateFormate = dateFormate.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n    //               return moment(dateObj).format(dateFormate);\r\n    //                //var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n    //                // tmpModel = tmpModel.split('+');\r\n    //                // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n    //                //return moment(tmpModel).format(dateFormate);\r\n    //            }\r\n    //            function GetFieldLabel(field, model)\r\n    //            {\r\n                   \r\n    //                return $translate.instant(field.label);\r\n    //            }\r\n\r\n    //            for (var i = 0; i < config.rows.length; i++)\r\n    //            {\r\n                   \r\n    //                html+= \"<div class=\\\"row\\\" > <div class=\\\"col s12\\\" >\";\r\n    //                var row = config.rows[i];\r\n    //                for (var j = 0; j < row.properties.length; j++)\r\n    //                {\r\n    //                    Textid++;\r\n    //                    var field = row.properties[j];\r\n    //                    if (field.isVisible && !field.isHidden) {\r\n    //                        if (field.type) {\r\n    //                            if (field.type == 'subsection')\r\n    //                            {\r\n    //                                if (field.attributes) {\r\n    //                                    if (field.attributes.previewData) {\r\n    //                                        for (var x = 0; x < field.attributes.previewData.length; x++) {\r\n    //                                            Textid++;\r\n    //                                            var previewField = field.attributes.previewData[x];\r\n    //                                            html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                           \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model, previewField.data) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                           \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(previewField, model) + \"</label></div></div>\";\r\n    //                                        }\r\n    //                                    }\r\n    //                                }\r\n    //                            }\r\n    //                            else\r\n    //                            {\r\n    //                                html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                               \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                               \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(field, model) + \"</label></div></div>\";\r\n    //                            }\r\n    //                        } else {\r\n    //                            html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(field, model) + \"</label></div></div>\";\r\n    //                        }\r\n    //                    }\r\n    //                    }\r\n    //                    html+=\"</div></div>\";\r\n\r\n\r\n    //            }\r\n\r\n\r\n\r\n    //            element.html(html);              \r\n    //            //$compile(element.contents())(scope);\r\n                \r\n    //        }\r\n    //    };\r\n    //}]);\r\n\r\n\r\n    //angular.module('SMART2').directive('smartFieldPreview', ['$compile', '$translate', function ($compile, $translate) {\r\n    //    return {\r\n    //        restrict: 'AE',\r\n    //        scope: false,\r\n    //        link: function (scope, element, attrs) {\r\n    //            var config = scope.config;\r\n    //            var localScope = scope;\r\n\r\n    //            if (config.attributes) {\r\n    //                var unbinedWatcher = scope.$watch(config.attributes.previewWatch, function (val) {\r\n    //                    if (val) {\r\n    //                        if (config.isVisible) {\r\n    //                            var obj = localScope;\r\n    //                            var html = \"\";\r\n    //                            var fields = config.attributes.previewData;\r\n    //                            if (fields) {\r\n    //                                for (var x = 0; x < fields.length; x++) {\r\n    //                                    Textid++;\r\n    //                                    var previewField = fields[x];\r\n    //                                    var lbl = $translate.instant(previewField.label);\r\n    //                                    var val = eval('obj.$parent.' + previewField.data);\r\n    //                                    if (!val) {\r\n    //                                        val = '--';\r\n    //                                    }\r\n    //                                    html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                   \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + val + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                   \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + lbl + \"</label></div></div>\";\r\n    //                                }\r\n    //                                //Textid++;\r\n    //                                //html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                //\"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + val + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                //\"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + scope.$parent.label + \"</label></div></div>\";\r\n\r\n    //                                element.html(html);\r\n    //                            }\r\n    //                        }\r\n    //                        unbinedWatcher();\r\n    //                    }\r\n    //                });\r\n    //            }\r\n    //        }\r\n\r\n    //    };\r\n    //}]);\r\n\r\n})();    ","  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Select\r\n   * @description This directive is useful for creating a select ui element.\r\n   * \r\n   * @attr {String} label\r\n   *    Label to be displayed for identification of this ui element\r\n   * @attr {Array} options\r\n   *    Number of options to be created\r\n   * @attr {Var} ng-model\r\n   *    Default selected option. Please refer example for more details.\r\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\r\n   * @attr {String} datakey\r\n   *    ng-model variable will be updated on the basis of this property. datakey will be used to display an option when displaykey is not set.\r\n   * @attr {String} displaykey\r\n   *    A property of an option to be used to display an option\r\n   * @attr {Boolean} disable\r\n   *    If set to true, none of the options can be selected\r\n   * @attr {Boolean} focus \r\n   *    If set to true, this ui element will be focused\r\n   * @attr {Boolean} validate\r\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n   * @attr {Array} rules \r\n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n   * @attr {String} error-message \r\n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n   * @attr {Boolean} is-mandatory \r\n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n   * @attr {Boolean} is-visible \r\n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-change\r\n   *    Callback function when option is changed\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"currency\": { \"code\": \"€\", \"name\": \"EUR\" }\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"Currency\",\r\n                                        \"type\": \"dropdown\",      //  select will also work\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"currency\",\r\n                                        \"colspan\": 1,\r\n                                        \"onChange\": \"onChange\",  //  controller function\r\n                                        \"attributes\": {\r\n                                            \"options\": [{\r\n                                                \"code\": \"$\",\r\n                                                \"name\": \"USD\"\r\n                                            }, {\r\n                                                \"code\": \"€\",\r\n                                                \"name\": \"EUR\"\r\n                                            }],\r\n                                            \"datakey\": \"name\"\r\n                                        },\r\n                                        \"rules\": [\r\n                                            { \r\n                                                \"rule\": \"this.title == \\\"Option 2\\\"\", \r\n                                                \"error\": \"Invalid selection\" \r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example\r\n   Static:\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\"\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n\r\n   * @example\r\n   Select with disabled state:\r\n   <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" disable=\"true\"></smart-radio> \r\n\r\n   * @example\r\n   Select with ng-model as 'String' (In following example, when an option is selected, ng-model would be either '$' or '€'):\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\"\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = \"$\";\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"code\" displaykey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n\r\n   * @example\r\n   Select with disabled option:\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\",\r\n            \"disable\": true\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var selectId = 0;\r\n    angular.module('SMART2').directive('smartSelect', ['$timeout', '$window', '$translate', 'ScrollTo', 'RuleEngine','smartSelectService',\r\n         (typeof isDirectiveV2enabled !== 'undefined' ? (isDirectiveV2enabled() == true ? smartSelectFunc2 : smartSelectFunc1) : smartSelectFunc1)\r\n    ]);\r\n\r\n    function smartSelectFunc1($timeout, $window, $translate, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModelCopy: '=?ngModel',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                disable: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                displaykey: '@',\r\n                removable: '@',\r\n                preview: '@',\r\n                customoption: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                customMessage: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                //debugger;\r\n                var options, isNgModelWatchAdded = false;\r\n                var onNgModel = function () { };\r\n                scope.selectOptions = [];\r\n                var typeOfNgModel;\r\n\r\n                var isNgModelFunction = typeof scope.ngModelCopy == 'function';\r\n\r\n                // create unique id\r\n                selectId = selectId + 1;\r\n                scope.dropDownId = \"dropdown-\" + selectId;\r\n\r\n                // key to be used to bind options\r\n                scope.dataKey = scope.datakey ? scope.datakey : 'title';\r\n                scope.displayKey = scope.displaykey ? scope.displaykey : scope.dataKey;\r\n\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                if (isNgModelFunction) {\r\n                    try {\r\n                        ngModelCtrl.$render = function () {\r\n                            scope.ngModel = ngModelCtrl.$modelValue;\r\n                            scope.selectedOption = scope.ngModel;\r\n                        };\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                var updateView = function () {\r\n                    if (isNgModelFunction) {\r\n                        try {\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\r\n                /*\r\n                 * Check if new option is added\r\n                 */\r\n                //scope.customOption = \r\n                scope.labelVal = \"\";\r\n                scope.customOptionReset = false;\r\n                var onOptions = scope.$watch('options', function (newOptions) {\r\n                    if (!newOptions) {\r\n                        return;\r\n                    }\r\n                    var optLen = newOptions.length;\r\n                    if (newOptions && optLen > 0) {\r\n                        //if (scope.label && newOptions[0][scope.dataKey] != scope.label) {\r\n                        var selLabel;\r\n                        if (scope.label) {\r\n                            selLabel = scope.label;\r\n                        } else {\r\n                            selLabel = $translate.instant('chooseOptionMsg');\r\n                        }\r\n                        var isDisabledOpt = true;\r\n                        if (scope.customoption) {\r\n                            selLabel = scope.customoption;\r\n                            isDisabledOpt = false;\r\n                            scope.customOptionReset = true;\r\n                        }\r\n                        if (scope.dataKey === scope.displayKey) {\r\n                            options = [{ title: selLabel, disable: isDisabledOpt, id: 'fakeOptionId' }].concat(newOptions);\r\n                            options[0][scope.displayKey] = options[0].title;\r\n                        }\r\n                        else {\r\n                            var firstOption = { disable: isDisabledOpt, id: 'fakeOptionId' };\r\n                            firstOption[scope.dataKey] = selLabel;\r\n                            firstOption[scope.displayKey] = selLabel;\r\n                            options = [firstOption].concat(newOptions)\r\n                        }\r\n\r\n                        //if (scope.$eval(scope.isMandatory)) {\r\n                        //    options = newOptions;\r\n                        //}\r\n                        //else {\r\n\r\n                        //    options = [{ title: selLabel, disable: false, id: 'fakeOptionId' }].concat(newOptions);\r\n                        //    options[0][scope.displayKey] = options[0].title;\r\n                        //}\r\n                        //}\r\n                        //else {\r\n                        //    options = newOptions;\r\n                        //}\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n\r\n                    var optionGroups = [],\r\n                        oldOptLen = options.length;\r\n\r\n                    for (var i = 0; i < oldOptLen; i++) {\r\n                        if (options[i].hasOwnProperty('groupName') && optionGroups.indexOf(options[i].groupName) == -1) {\r\n                            optionGroups.push(options[i].groupName);\r\n                        }\r\n                    }\r\n\r\n                    //if (optionGroups.length > 0) {\r\n                    //    options.splice(0, 1);\r\n                    //}\r\n\r\n                    scope.optionGroups = angular.copy(optionGroups);\r\n\r\n                    scope.selectOptions = options;\r\n\r\n                    //if (!scope.selectedOption) {\r\n                    //    scope.selectedOption = options[0];\r\n                    //}\r\n\r\n                    //try {\r\n                    //    scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                    //}\r\n                    //catch (e) { }\r\n\r\n                    if (!isNgModelWatchAdded) {\r\n                        onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                            if (angular.isUndefined(typeOfNgModel) && (newVal !== '' && newVal != undefined && newVal != null)) {\r\n                                typeOfNgModel = typeof newVal;\r\n                            }\r\n                            var newValueCopy;\r\n\r\n                            if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                for (var i = 0; i < oldOptLen; i++) {\r\n                                    if (newVal == options[i][scope.dataKey]) {\r\n                                        newValueCopy = options[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                newValueCopy = newVal;\r\n                            }\r\n                            scope.selectedOption = angular.copy(newValueCopy);\r\n\r\n                            try {\r\n                                if (!scope.selectedOption) {\r\n                                    scope.selectedOption = angular.copy(options[0]);\r\n                                } else if (!scope.selectedOption[scope.displayKey]) {\r\n                                    scope.selectedOption = angular.copy(options[0]);\r\n                                }\r\n                                scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                                if (options[0] != scope.selectedOption[scope.dataKey]) {\r\n                                    scope.labelVal = scope.selectedOption[scope.dataKey];\r\n                                    if (scope.customoption && scope.customoption != scope.selectedOption[scope.dataKey]) {\r\n                                        scope.customOptionReset = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n\r\n                            var tOut = setTimeout(function () {\r\n                                var el = angular.element(\"#\" + scope.dropDownId);\r\n                                el.material_select();\r\n                                el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                    if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function () {\r\n                                        var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                        }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                        }\r\n                                      }, 0);\r\n                                   }\r\n                                });\r\n                                //el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                //    var _this = $(this);\r\n                                //  scope.ngChange(_this.val());\r\n                                //});\r\n                                clearTimeout(tOut);\r\n                                tOut = null;\r\n                            });\r\n                            // selectFixdd();\r\n\r\n                        }, true);\r\n\r\n                        isNgModelWatchAdded = true;\r\n                    }\r\n                    else { //If options are changes dynamically then again .material_select() will fired to update latest options in materialize select.\r\n                        var selectTout = setTimeout(function () {\r\n                            angular.element(\"#\" + scope.dropDownId).material_select();\r\n                            element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function () {\r\n                                        var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                        listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                        }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                        }\r\n                                    }, 0);\r\n                                            }\r\n                            });\r\n                            clearTimeout(selectTout);\r\n                            selectTout = null;\r\n                        });\r\n                    }\r\n                    var disableTOut = setTimeout(function () {\r\n                        var el = angular.element(\"#\" + scope.dropDownId);\r\n                        el.children().eq(0).attr(\"disabled\", \"disabled\");\r\n                        el.material_select();\r\n                        el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                setTimeout(function () {\r\n                                    var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                    $dropdownDiv.scrollTop(0);\r\n                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                        return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                    }))).offset();\r\n                                    if (listElOffset) {\r\n                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                    }\r\n                                }, 0);\r\n                            }\r\n                        });\r\n                        // el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                        //    var _this = $(this);\r\n                        //    scope.ngChange(_this.val());\r\n                        //});\r\n                        clearTimeout(disableTOut);\r\n                        disableTOut = null;\r\n                    });\r\n\r\n                    // selectFixdd();\r\n\r\n                    /*   function selectFixdd() {\r\n                           setTimeout(function () {\r\n                               if (scope.$eval(attrs.fixed)) {\r\n                                   $(element).find('input.select-dropdown').bind('focus', function (e) {\r\n                                       (function ($t) {\r\n                                           setTimeout(function () {\r\n                                               $(element).find('.dropdown-content').addClass('fixeddd');\r\n                                               var topOffset = $(e.target).offset().top - $(window).scrollTop();\r\n                                               var ddCnt = $t.next('.dropdown-content');\r\n                                               ddCnt.css({\r\n                                                   'left': $(e.target).offset().left + 'px', 'top': topOffset + 'px'\r\n                                               });\r\n                                               ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n\r\n                                               var ddHgt = ddCnt.css('height'),\r\n                                                   winHgt = angular.element(window).height();\r\n                                               if ((parseInt(ddHgt) + topOffset) > winHgt) {\r\n                                                   var diffHgt = (parseInt(ddHgt) + topOffset) - winHgt;\r\n                                                   ddCnt.css('top', (topOffset - diffHgt - 15) + 'px');\r\n                                               }\r\n\r\n                                               angular.element($window).on(\"scroll.smartFixedSmartSelect\", function () {\r\n                                                   if (ddCnt.hasClass('active'))\r\n                                                       ddCnt.hide();\r\n                                               });\r\n                                           });\r\n                                       })($(this));\r\n                                   });\r\n                               }\r\n                           }, 500);\r\n                       }\r\n                       */\r\n                }, true);\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n\r\n                /*\r\n                 * Watch needs to be added on disable since element needs to be updated\r\n                 */\r\n                var sOption = scope.label;\r\n                var onDisable = scope.$watch('disable', function (newVal) {\r\n                    var isDisableTout = setTimeout(function () {\r\n                        var el = angular.element(\"#\" + scope.dropDownId);\r\n                        el.material_select();\r\n                        element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function() {\r\n                                        var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                    }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top -$dropdownDiv.offset().top);\r\n                                            }\r\n                                            }, 0);\r\n                            }\r\n                        });\r\n                        el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                            /*var _this = $(this);\r\n                            if (scope.ngModelCopy != _this.val()) {\r\n                                scope.ngModelCopy = {\r\n                                    title: _this.val()\r\n                                };\r\n                                scope.ngModelCopy[scope.dataKey] = _this.val();\r\n                            }*/\r\n                            scope.validateRules()\r\n                        });\r\n                        clearTimeout(isDisableTout);\r\n                        isDisableTout = null;\r\n                    });\r\n                });\r\n\r\n\r\n\r\n                /*\r\n                 * Focus field when focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate field whene validate is set to true\r\n                 */\r\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    //debugger;\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    if (scope.$eval(scope.isMandatory) && scope.label) {\r\n                        if (!scope.ngModelCopy || scope.ngModelCopy.name === scope.label || (scope.customoption && scope.ngModelCopy.name === scope.customoption) || scope.ngModelCopy[scope.dataKey] === scope.label) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = scope.customMessage ? scope.customMessage : $translate.instant(\"selectOptionErrMsg\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\r\n                            ruleLength = rules.length;\r\n\r\n                        for (var i = 0; i < ruleLength; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                if (!isFoundInvalid) {\r\n                                    RuleEngine.isValid(rules[i], function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                };\r\n                var ch = false;\r\n                scope.ngChange = function (selectedOption, manual) {\r\n                    if (!manual) ch = true;\r\n                    sOption = selectedOption;\r\n                    if (selectedOption == scope.customoption) {\r\n                        scope.customOptionReset = true;\r\n                        //options[0][scope.dataKey] = scope.label;\r\n                    }\r\n                    else {\r\n                        scope.customOptionReset = false;\r\n                    }\r\n\r\n                    var tmpSelectedOption;\r\n                    if (!scope.$eval(scope.isMandatory) && selectedOption == options[0][scope.displayKey] && scope.optionGroups.length == 0) {\r\n                        tmpSelectedOption = '';\r\n                    }\r\n                    else {\r\n                        var optLen = options.length;\r\n                        for (var i = 0; i < optLen; i++) {\r\n                            if (options[i][scope.dataKey] == selectedOption) {\r\n                                tmpSelectedOption = options[i];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isNgModelFunction) {\r\n                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                            scope.ngModel = tmpSelectedOption[scope.dataKey];\r\n                        }\r\n                        else {\r\n                            scope.ngModel = tmpSelectedOption;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                            if (!scope.$eval(scope.isMandatory) && (selectedOption == options[0][scope.displayKey] || selectedOption == undefined || selectedOption == 'fakeOptionId')) {\r\n                                scope.ngModelCopy = '';\r\n                            }\r\n                            else {\r\n                                scope.ngModelCopy = tmpSelectedOption[scope.dataKey];\r\n                            }\r\n                        }\r\n                        else {\r\n                            scope.ngModelCopy = tmpSelectedOption;\r\n                        }\r\n                    }\r\n                    scope.labelVal = \"\";\r\n                    if (selectedOption == scope.label && selectedOption == options[0][scope.displayKey]) {\r\n                        scope.labelVal = selectedOption;\r\n                    }\r\n                    updateView();\r\n                    scope.selectedOption = tmpSelectedOption == '' ? options[0] : angular.copy(tmpSelectedOption);\r\n                    scope.validateRules();\r\n                    var clrTout = $timeout(function () {\r\n                        scope.onChange();\r\n                        $timeout.cancel(clrTout);\r\n                        clrTout = null;\r\n                    });\r\n                };\r\n\r\n\r\n                scope.$on('$destroy', function () {\r\n                    angular.element(\"#\" + scope.dropDownId).material_select('destroy');\r\n                    onOptions();\r\n                    onDisable();\r\n                    onNgModel();\r\n                    onFocus();\r\n                    onValidate();\r\n                    angular.element($window).off(\"scroll.smartFixedSmartSelect\");\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSelect/smartSelectTemplate.html'\r\n        };\r\n    }\r\n\r\n    \r\n    function smartSelectFunc2($timeout, $window, $translate, ScrollTo, RuleEngine, smartSelectService) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModelCopy: '=?ngModel',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                disable: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                displaykey: '@',\r\n                removable: '@',\r\n                preview: '@',\r\n                customoption: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                customMessage: '@'\r\n            },\r\n            compile: function() {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        $(document).ready(function () {// To avoid flicker and timeout\r\n                            // Declare all the vars at the top\r\n                            var options = [],\r\n                                isNgModelWatchAdded = false,\r\n                                 onNgModel = function () { },\r\n                                 typeOfNgModel,\r\n                                isNgModelFunction = typeof scope.ngModelCopy == 'function';\r\n\r\n                            scope.selectOptions = [];\r\n                            // create unique id\r\n                            selectId = selectId + 1;\r\n                            scope.dropDownId = \"dropdown_\" + selectId;\r\n                            // key to be used to bind options\r\n                            scope.dataKey = scope.datakey ? scope.datakey : 'title';\r\n                            scope.displayKey = scope.displaykey ? scope.displaykey : scope.dataKey;\r\n\r\n                            /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                            if (isNgModelFunction) {\r\n                                try {\r\n                                    ngModelCtrl.$render = function () {\r\n                                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                        scope.selectedOption = scope.ngModel;\r\n                                    };\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n                            var updateView = function () {\r\n                                if (isNgModelFunction) {\r\n                                    try {\r\n                                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                    }\r\n                                    catch (e) { }\r\n                                }\r\n                            };\r\n                            /*\r\n                             * Check if new option is added\r\n                             */\r\n                            scope.labelVal = \"\";\r\n                            scope.customOptionReset = false;\r\n\r\n                            //To be triggered if option binding is delayed\r\n                            function watchOptions(a_options) {\r\n                                var optLen = a_options.length;\r\n                                if (a_options && optLen > 0) {\r\n                                    var selLabel,\r\n                                        isDisabledOpt = true;\r\n                                    if (scope.label) {\r\n                                        selLabel = scope.label;\r\n                                    } else {\r\n                                        selLabel = $translate.instant('chooseOptionMsg');\r\n                                    }\r\n\r\n                                    if (scope.customoption) {\r\n                                        selLabel = scope.customoption;\r\n                                        isDisabledOpt = false;\r\n                                        scope.customOptionReset = true;\r\n                                    }\r\n                                    if (scope.dataKey === scope.displayKey) {\r\n                                        options = [{ title: selLabel, disable: isDisabledOpt, id: 'fakeOptionId' }].concat(a_options);\r\n                                        options[0][scope.displayKey] = options[0].title;\r\n                                    }\r\n                                    else {\r\n                                        var firstOption = { disable: isDisabledOpt, id: 'fakeOptionId' };\r\n                                        firstOption[scope.dataKey] = selLabel;\r\n                                        firstOption[scope.displayKey] = selLabel;\r\n                                        options = [firstOption].concat(a_options)\r\n                                    }\r\n                                    scope.selectOptions = options;\r\n                                    var optionGroups = [],\r\n                                        len = options.length;\r\n                                    for (var i = 0; i < len; i++) {\r\n                                        var tmp = options[i];\r\n                                        if (tmp.hasOwnProperty('groupName') && optionGroups.indexOf(tmp.groupName) == -1) {\r\n                                            optionGroups.push(tmp.groupName);\r\n                                        }\r\n                                    }\r\n                                    scope.optionGroups = angular.copy(optionGroups);\r\n                                    watchModel();\r\n                                    smartSelectService.buildOptionsList(scope.optionGroups, scope.selectOptions,scope,element);\r\n                                } else {\r\n                                    return;\r\n                                };\r\n\r\n                            }\r\n\r\n                            // This function watches the selected value from the \r\n                            // dropdown and triggers on selection change\r\n                            function watchModel() {\r\n                                if (!isNgModelWatchAdded) {\r\n                                    onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                                        if (angular.isUndefined(typeOfNgModel) && (newVal !== '' && newVal != undefined && newVal != null)) {\r\n                                            typeOfNgModel = typeof newVal;\r\n                                        }\r\n                                        var newValueCopy;\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            var len = options.length;\r\n                                            for (var i = 0; i < len; i++) {\r\n                                                var tmp = options[i];\r\n                                                if (newVal == tmp[scope.dataKey]) {\r\n                                                    newValueCopy = tmp;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if (typeOfNgModel == 'object') {\r\n                                            scope.ngModel = newValueCopy = newVal;\r\n                                        }\r\n                                        else {\r\n                                            newValueCopy = newVal;\r\n                                        }\r\n                                        scope.selectedOption = angular.copy(newValueCopy);\r\n\r\n                                        try {\r\n                                            if (!scope.selectedOption) {\r\n                                                scope.selectedOption = angular.copy(options[0]);\r\n                                            } else if (!scope.selectedOption[scope.displayKey]) {\r\n                                                scope.selectedOption = angular.copy(options[0]);\r\n                                            }\r\n                                            scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                                            if (options[0] != scope.selectedOption[scope.dataKey]) {\r\n                                                scope.labelVal = scope.selectedOption[scope.dataKey];\r\n                                                if (scope.customoption && scope.customoption != scope.selectedOption[scope.dataKey]) {\r\n                                                    scope.customOptionReset = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        catch (e) { }\r\n                                        smartSelectService.buildOptionsList(scope.optionGroups, scope.selectOptions, scope, element);\r\n                                        smartSelectService.updateLabelTemplate(scope, element);// added for update the label\r\n                                        angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                        element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                                setTimeout(function () {\r\n                                                    var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                                        listElOffset;\r\n                                                    $dropdownDiv.scrollTop(0);\r\n                                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                        return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                                    }))).offset();\r\n                                                    if (listElOffset) {\r\n                                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                    }\r\n                                                }, 0);\r\n                                            }\r\n                                        });\r\n                                        //selectFixdd();\r\n                                        element.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        }); \r\n                                    });\r\n                                    isNgModelWatchAdded = true;\r\n\r\n                                } else { //If options are changes dynamically then again .material_select() will fired to update latest options in materialize select.\r\n                                   var clrTout = setTimeout(function () {\r\n                                       angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                       element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                           if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                            setTimeout(function () {\r\n                                                var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                        listElOffset;\r\n                                                $dropdownDiv.scrollTop(0);\r\n                                                listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                    return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                                }))).offset();\r\n                                                if (listElOffset) {\r\n                                                    $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                }\r\n                                            }, 0);\r\n                                               }\r\n                                        });\r\n                                        element.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        });\r\n                                        clearTimeout(clrTout);\r\n                                        clrTout = null;\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            //watchOptions(scope.options); // onload data binding\r\n                            //To update value incase of late binding\r\n                            var collectionWatch = scope.$watchCollection('options', function (newValue) {\r\n                                if (newValue) {\r\n                                    watchOptions(newValue);\r\n                                }\r\n                            });\r\n\r\n                            /*function selectFixdd() {\r\n                                if (attrs.fixed) {\r\n                                    $(element).find('input.select-dropdown').bind('focus', function (e) {\r\n                                        (function ($t) {\r\n                                            var drpContent = $(element).find('.dropdown-content').addClass('fixeddd');\r\n                                            var topOffset = $(e.target).offset().top - $(window).scrollTop();\r\n                                            var ddCnt = $t.next('.dropdown-content');\r\n                                            ddCnt.css({\r\n                                                'left': $(e.target).offset().left + 'px', 'top': topOffset + 'px'\r\n                                            });\r\n                                            ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n\r\n                                            var ddHgt = ddCnt.css('height'),\r\n                                                winHgt = angular.element(window).height();\r\n                                            if ((parseInt(ddHgt) + topOffset) > winHgt) {\r\n                                                var diffHgt = (parseInt(ddHgt) + topOffset) - winHgt;\r\n                                                ddCnt.css('top', (topOffset - diffHgt - 15) + 'px');\r\n                                            }\r\n\r\n                                            angular.element($window).on(\"scroll.smartFixedSmartSelect\", function () {\r\n                                                if (ddCnt.hasClass('active'))\r\n                                                    ddCnt.hide();\r\n                                            });\r\n                                            drpContent = null;\r\n                                        })($(this));\r\n                                    });\r\n                                }\r\n                            }\r\n                            */\r\n                            scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                            /*\r\n                             * Watch needs to be added on disable since element needs to be updated\r\n                             */\r\n                            var sOption = scope.label;\r\n                            // Use watchgroup to watch all\r\n                            //Below declerations are to make watchGroup work on models\r\n                            scope.disable = (scope.disable) ? scope.disable : 1;\r\n                            scope.validate = (scope.validate) ? scope.validate : 2;\r\n                            var watchGrp = scope.$watchGroup(['disable', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                                if (newVal[0] !== oldVal[0]) {\r\n                                    var el = angular.element(\"#\" + scope.dropDownId);\r\n                                    if ((scope.disable === true && scope.disable !== 1) || (jQuery.type(scope.disable) === \"string\" && (scope.disable === \"true\"))) {\r\n                                        el.prop('disabled', 'disabled');\r\n                                        el.prop(\"readonly\", true);\r\n                                        el.attr('tabindex', -1);\r\n                                        el.material_select();\r\n                                        el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                                setTimeout(function () {\r\n                                                    var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                                    $dropdownDiv.scrollTop(0);\r\n                                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                        return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                                    }))).offset();\r\n                                                    if (listElOffset) {\r\n                                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                    }\r\n                                                }, 0);\r\n                                            }\r\n                                        });\r\n                                        el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        });\r\n                                    }else\r\n                                    {\r\n                                        el.prop('disabled', false);\r\n                                        el.prop(\"readonly\", false);\r\n                                        el.removeAttr('tabindex');\r\n                                    }\r\n                                    angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                    element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                        if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                        setTimeout(function () {\r\n                                            var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                                listElOffset;\r\n                                            $dropdownDiv.scrollTop(0);\r\n                                            listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                            }))).offset();\r\n                                            if (listElOffset) {\r\n                                                $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                            }\r\n                                        }, 0);\r\n                                    }\r\n                                    });\r\n                                }\r\n                                if (newVal[1] !== oldVal[1] || newVal[2] !== oldVal[2]) {\r\n                                    scope.validateRules();\r\n                                }\r\n                                if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                                    if (scope.showinfo || scope.showwarning) {\r\n                                        element.addClass('field-has-icon');\r\n                                    }\r\n                                    else {\r\n                                        element.removeClass('field-has-icon');\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            var onFocus = scope.$watch('focus', function (newVal) {\r\n                                if (newVal) {\r\n                                    ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                                    scope.focus = false;\r\n                                    var clrMe = setTimeout(function () {\r\n                                        element.find('input').focus();\r\n                                        clearTimeout(clrMe);\r\n                                        clrMe = null;\r\n                                    }, 1000);\r\n                                }\r\n                            });\r\n\r\n                            /*\r\n                            * Validate rules\r\n                            */\r\n                            scope.validateRules = function () {\r\n                                scope.validate = false;\r\n                                scope.errorMessage = null;\r\n                                if (scope.$eval(scope.isMandatory) && scope.label && !scope.clienterror) {\r\n                                    if (!scope.ngModelCopy || scope.ngModelCopy.name === scope.label || (scope.customoption && scope.ngModelCopy.name === scope.customoption) || scope.ngModelCopy[scope.dataKey] === scope.label) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = scope.customMessage ? scope.customMessage : $translate.instant(\"selectOptionErrMsg\");\r\n                                        // return;\r\n                                    }\r\n                                }\r\n                                if (scope.clienterror) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                                }\r\n                                if (scope.rules && !scope.clienterror) {\r\n                                    var rules = scope.$eval(scope.rules);\r\n                                    var isFoundInvalid = false,\r\n                                        len = rules.length;\r\n\r\n                                    for (var i = 0; i < len; i++) {\r\n                                        var tmp = rules[i];\r\n                                        if (typeof tmp == 'object') {\r\n                                            if (eval((tmp.rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                                scope.validate = true;\r\n                                                scope.errorMessage = tmp.error;\r\n                                                break;\r\n                                            }\r\n                                        } else {\r\n                                            if (!isFoundInvalid) {\r\n                                                RuleEngine.isValid(tmp, function (e) {\r\n                                                    scope.validate = true;\r\n                                                    scope.errorMessage = e.errorData.error;\r\n                                                    isFoundInvalid = true;\r\n                                                });\r\n                                            }\r\n                                            else {\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                                var containerElm = element;\r\n                                var validateElm = $(element).find('#' + scope.dropDownId + '_validate');\r\n                                if (scope.validate == true && scope.errorMessage != null) {\r\n\r\n                                    if (!containerElm.hasClass('invalid')) {\r\n                                        containerElm.addClass('invalid');\r\n                                        \r\n                                    }\r\n\r\n                                    if (validateElm.length > 0) {\r\n                                        validateElm.html(scope.errorMessage);\r\n                                    }\r\n                                    else {\r\n                                        containerElm.append(smartSelectService.buildValidationTemplate(scope));\r\n                                        validateElm = $(element).find('#' + scope.dropDownId + '_validate');\r\n                                        validateElm.html(scope.errorMessage);\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    if (containerElm.hasClass('invalid')) {\r\n                                        containerElm.removeClass('invalid');\r\n                                    }\r\n\r\n                                    if (validateElm.length > 0) {\r\n                                        validateElm.remove();\r\n                                    }\r\n\r\n                                }\r\n                            };\r\n\r\n                            scope.hideShowField = function () {\r\n                                scope.isVisible = !scope.isVisible;\r\n                            };\r\n\r\n                            var onSelectChange = function (elm) {\r\n                                if (scope.selectOptions && scope.selectOptions.length>0) {\r\n                                    var selectedOption;\r\n                                    var selectedVal = elm.target.options[elm.target.options.selectedIndex].value;// elm.find(\":selected\").val();\r\n\r\n                                    selectedOption = selectedVal;\r\n\r\n                                    sOption = selectedOption;\r\n                                    if (selectedOption == scope.customoption) {\r\n                                        scope.customOptionReset = true;\r\n                                    }\r\n                                    else {\r\n                                        scope.customOptionReset = false;\r\n                                    }\r\n\r\n                                    var tmpSelectedOption;\r\n                                    if (!scope.$eval(scope.isMandatory) && selectedOption == options[0][scope.displayKey] && scope.optionGroups.length == 0) {\r\n                                        tmpSelectedOption = '';\r\n                                    }\r\n                                    else {\r\n                                        var len = options.length;\r\n                                        for (var i = 0; i < len; i++) {\r\n                                            if (typeof options[i][scope.dataKey] == 'string') {\r\n                                                if (options[i][scope.dataKey].replace(/&quot;/g, '\"') == selectedOption) {\r\n                                                    tmpSelectedOption = options[i];\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                if (options[i][scope.dataKey] == selectedOption) {\r\n                                                    tmpSelectedOption = options[i];\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (isNgModelFunction) {\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            scope.ngModel = tmpSelectedOption[scope.dataKey];\r\n                                        }\r\n                                        else {\r\n                                            scope.ngModel = tmpSelectedOption;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            if (!scope.$eval(scope.isMandatory) && (selectedOption == options[0][scope.displayKey] || selectedOption == undefined || selectedOption == 'fakeOptionId')) {\r\n                                                scope.ngModelCopy = '';\r\n                                            }\r\n                                            else {\r\n                                                scope.ngModelCopy = tmpSelectedOption[scope.dataKey];\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            scope.ngModelCopy = tmpSelectedOption;\r\n                                            scope.ngModel = scope.ngModelCopy;\r\n                                        }\r\n                                    }\r\n                                    scope.labelVal = \"\";\r\n                                    if (selectedOption == scope.label && selectedOption == options[0][scope.displayKey]) {\r\n                                        scope.labelVal = selectedOption;\r\n                                    }\r\n                                    updateView();                                    \r\n                                    $(element).find('#' + scope.dropDownId + '_label').html(scope.label);\r\n\r\n                                    scope.selectedOption = tmpSelectedOption == '' ? options[0] : angular.copy(tmpSelectedOption);\r\n                                    scope.validateRules();\r\n                                   var cancelTout =  $timeout(function () {\r\n                                        scope.$apply();\r\n                                        scope.onChange();\r\n                                        $timeout.cancel(cancelTout);\r\n                                        cancelTout = null;\r\n                                    });\r\n                                }\r\n                            };\r\n\r\n                            smartSelectService.buildTemplate(scope, element, onSelectChange);\r\n                            if (scope.clienterror) {\r\n                                scope.validateRules();\r\n                            }\r\n\r\n                            scope.$on('$destroy', function () {\r\n                                angular.element(\"#\" + scope.dropDownId).material_select('destroy');\r\n                                collectionWatch();\r\n                                watchGrp();\r\n                                angular.element($window).off(\"scroll.smartFixedSmartSelect\");\r\n                                $(element).find('input.select-dropdown').unbind('focus');\r\n                                $(element).find('input.select-dropdown').unbind('close');\r\n                            });\r\n                            setTimeout(function(){\r\n                             if(scope.label != '' && scope.label != undefined)\r\n                                 $(element).find('#' + scope.dropDownId + '_label').html(scope.label);\r\n                            },0)\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('SMART2').factory('smartSelectService', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', smartSelectServiceFunc])\r\n    function smartSelectServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile) {\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((scope.isMandatory!= undefined && scope.isMandatory=='false') && scope.isRemovable == true) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.dropDownId + '_opField');\r\n                return optionalField;\r\n            }\r\n            return '';\r\n        };\r\n        var buildSelectTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectOptionTemplate.html');\r\n            html = html.replace('{{id}}', scope.dropDownId);\r\n            return html;\r\n        };\r\n        var buildValidationTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectValidationTemplate.html');\r\n            html = html.replace('{{id}}', scope.dropDownId + '_validate');\r\n            return html;\r\n        };\r\n        var updateLabelTemplate = function (scope, element) {\r\n            var elmLabel = element.find('#' + scope.dropDownId + '_label');\r\n            if (scope.label != scope.labelVal) {\r\n                elmLabel.removeClass('ng-hide');\r\n            } else {\r\n                elmLabel.addClass('ng-hide');\r\n\r\n            }\r\n        };\r\n        var buildLabelTemplate = function (scope) {\r\n            if (scope.label && scope.label != scope.labelVal) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectLabelTemplate.html');\r\n                html = html.replace('{{id}}', scope.dropDownId + '_label');\r\n                html = html.replace('{{dropDownId}}', scope.dropDownId);\r\n                html = html.replace('{{label}}', scope.label);\r\n                html = html.replace('{{title}}', scope.label);\r\n                return html;\r\n            } else {\r\n                return '';\r\n            };\r\n        };\r\n        var buildInfoTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectInfoTemplate.html');;\r\n            //if (scope.showinfo || scope.showwarning) {\r\n                \r\n            //    html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectInfoTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n\r\n        var buildTemplate = function (scope,element, onChangeCallback) {\r\n            var container = element // $('<div/>', { id: scope.dropDownId + '_container' });\r\n            \r\n            var css = 'input-field';\r\n            if ((scope.isMandatory == 'false') && scope.isRemovable == true) {\r\n                css += ' optionalField line-height-manager';\r\n            }\r\n            if (scope.preview === true) {\r\n                css += ' selectPreview';\r\n            }\r\n            if (!scope.customoption) {\r\n                css += ' defaultSelected';\r\n            }\r\n            if (scope.validate === true && scope.errorMessage) {\r\n                css += ' invalid';\r\n            }\r\n            if (scope.showinfo || scope.showwarning){\r\n                css += ' field-has-icon'\r\n            }\r\n            if (scope.showinfo && scope.showwarning) {\r\n                css += ' field-has-two-icons'\r\n            }\r\n            \r\n            container.attr(\"id\", scope.dropDownId + '_container').addClass(css);\r\n\r\n            container.append(buildOptionalFieldTemplate(scope));\r\n            container.append(buildLabelTemplate(scope));\r\n            container.append(buildSelectTemplate(scope));\r\n            container.append(buildValidationTemplate(scope));\r\n            container.append($compile(buildInfoTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.append(container);\r\n            var elm = $(element).find('#' + scope.dropDownId);\r\n            elm.bind(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            var optionalField = $(element).find('#' + scope.dropDownId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0)\r\n            {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n            }\r\n\r\n            if (scope.disable === 'true' || scope.disable === true) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n            }\r\n\r\n        };\r\n\r\n        var buildOptionsList = function (OptionGroups, options,scope,element) {\r\n            var optHtml = '',\r\n                optionLength = options.length;\r\n            if (OptionGroups && OptionGroups.length > 0) {\r\n\r\n            }\r\n            else {\r\n                if (options && optionLength > 0 && scope.dataKey === scope.displayKey) {\r\n                    angular.forEach(options, function (option) {\r\n                        var selected = '';\r\n                        if (angular.equals(option, scope.selectedOption) || angular.equals(scope.ngModel, option) || angular.equals(scope.ngModelCopy, option) || angular.equals(option[scope.dataKey], scope.selectedOptionString)) {\r\n                            selected = ' selected=\"selected\"';\r\n                        }\r\n                        //if (option.name == scope.label) {\r\n                        //    $(element).find('#' + scope.dropDownId + '_label').html('');                            \r\n                        //}\r\n                        optHtml += '<option value=\"' + option[scope.dataKey] + '\"  ' + (option.disable ? 'disabled=\"disabled\"' : '') + ' ' + selected + '>' + option[scope.displayKey] + '</option>'\r\n                    });\r\n                } else if (options && optionLength > 0 && scope.dataKey !== scope.displayKey) {\r\n                    angular.forEach(options, function (option) {\r\n                        var selected = '';\r\n                        if (angular.equals(option, scope.selectedOption) || angular.equals(scope.ngModel, option) || angular.equals(scope.ngModelCopy, option) || angular.equals(option[scope.dataKey], scope.selectedOptionString)) {\r\n                            selected = ' selected=\"selected\"';\r\n                        }\r\n                        optHtml += '<option value=\"' + option[scope.dataKey] + '\"  ' + (option.disable ? 'disabled=\"disabled\"' : '') + ' ' + selected + '>' + option[scope.displayKey] + '</option>'\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (options[0][scope.datakey] == scope.label && options[0].disable && scope.datakey == 'title' && (!scope.selectedOption || options[0] == scope.selectedOption)) {\r\n                $(element).find('#' + scope.dropDownId + '_label').html('');\r\n            }\r\n\r\n            $(element).find('#' + scope.dropDownId).html(optHtml);\r\n        };\r\n\r\n        var service = {\r\n            buildOptionsList: buildOptionsList,\r\n            buildTemplate: buildTemplate,\r\n            buildValidationTemplate: buildValidationTemplate,\r\n            updateLabelTemplate: updateLabelTemplate\r\n        };\r\n        return service;\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('optionalField', ['$timeout', '$translate', function ($timeout, $translate) {\r\n        return {\r\n            restrict: 'A',\n            link: function (scope, element, attrs) {\r\n\n                $timeout(function () {\r\n                    if (attrs.isMandatory !== \"true\") {\r\n                        element.find(\"label\").append('<span class=\"optionalFieldTxt\">' + '(' + $translate.instant('textfieldOptionalLabel') + ')' + '</span>');\r\n                        element.addClass('optionalFieldInPopup');\r\n                    }\r\n\r\n                    if (element.hasClass('hierarchylinktxt')) {\r\n                        element.append('<span class=\"optionalFieldTxt\">' + '(' + $translate.instant('textfieldOptionalLabel') + ')' + '</span>');\r\n                    }\r\n\r\n                }, 500);\r\n            }\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\r\n    angular.module('SMART2').service('StickyElements',[ function () {\r\n\r\n\t\tvar stickyElementsObj = [];\r\n\r\n\t\tthis.get = function () {\r\n\t\t\tvar stickyElementsHeight = 0;\r\n\t\t\tif (stickyElementsObj.length > 0) {\r\n\t\t\t\tangular.forEach(stickyElementsObj, function (value, key) {\r\n\t\t\t\t\tstickyElementsHeight = stickyElementsHeight + value.height();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\theight: stickyElementsHeight,\r\n\t\t\t\tlistOfElements: stickyElementsObj\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tthis.set = function (obj) {\r\n\t\t\tstickyElementsObj = obj;\r\n\t\t}\r\n    }])\r\n\t.directive('stickyHeader', ['$window', 'StickyElements', function ($window, StickyElements) {\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\tscope: true,\r\n\t\t\tlink: function ($scope, $elem, $attrs) {\r\n\t\t\t\tvar $win = angular.element($window);\r\n\t\t\t\tvar elem = $elem[0];\r\n\r\n\t\t\t\t$scope.scrollType = $attrs.scrollType;\r\n\r\n\t\t\t\tif ($scope.scrollType === \"page\") {\r\n\t\t\t\t\t$win.bind('scroll', function (e) {\r\n\t\t\t\t\t\tif (elem.offsetParent !== null) {\r\n\t\t\t\t\t\t\tvar windowScrollTop = $win[0].scrollY || $win[0].pageYOffset;\r\n\t\t\t\t\t\t\tvar elScrollTop = $(elem).offset().top;\r\n\t\t\t\t\t\t\tvar elScrollTopOriginal = $(elem).offset().top;\r\n\t\t\t\t\t\t\tvar stickyElementHeight = StickyElements.get().height;\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.grid-fixed-container').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.grid-fixed-container').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.alert-bar--fixed-to-nav').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.alert-bar--fixed-to-nav').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.breadcrum-container').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.breadcrum-container').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar elemforStick = angular.element($attrs.stickyHeader);\r\n\t\t\t\t\t\t\tif (elemforStick && elemforStick.length > 0) {\r\n\t\t\t\t\t\t\t    stickyElementHeight = stickyElementHeight + elemforStick.height();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar theadHgt = $(elem).find('thead').height();\r\n\r\n\t\t\t\t\t\t\tvar tbodyHgt = $(elem).find('tbody').not('.dummyThead').height();\r\n\t\t\t\t\t\t\tvar $dummyThead = $(elem).find('.dummyThead');\r\n\r\n\t\t\t\t\t\t\tif (windowScrollTop + stickyElementHeight > elScrollTop && windowScrollTop + stickyElementHeight < (elScrollTop + tbodyHgt)) {\r\n\t\t\t\t\t\t\t\telScrollTopOriginal = elScrollTop;\r\n\t\t\t\t\t\t\t\tstickTableHeader(stickyElementHeight, $scope.scrollType);\r\n\t\t\t\t\t\t\t\tif (!$dummyThead.length)\r\n\t\t\t\t\t\t\t\t\t$(\"<tbody class='dummyThead'><tr><td style='height:\" + theadHgt + \"px'></td></tr></tbody>\").insertAfter($(elem).find('thead'));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tangular.element(elem.querySelectorAll('thead')).css({ 'display': '', 'top': '', 'position': '', 'background': '' });\r\n\t\t\t\t\t\t\t\tif ($dummyThead.length)\r\n\t\t\t\t\t\t\t\t\t$dummyThead.remove();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction stickTableHeader(top, scrollType) {\r\n\t\t\t\t\tvar topVal = top;\r\n\t\t\t\t\t// reset display styles so column widths are correct when measured below\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\r\n\r\n\t\t\t\t\t// set widths of columns\r\n\t\t\t\t\tangular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\r\n\t\t\t\t\t     var tdSel = 'tbody tr' + (!$attrs.columnMap ? '' : $attrs.columnMap) + ':first-child td:nth-child(' + (i + 1) + ')',\r\n                           tdElems = elem.querySelector(tdSel);\r\n\r\n\t\t\t\t\t\tvar columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\r\n\r\n\t\t\t\t\t\tif (tdElems) {\r\n\t\t\t\t\t\t\ttdElems.style.width = columnWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (thElem) {\r\n\t\t\t\t\t\t\tthElem.style.width = columnWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('thead')).css({ 'top': topVal, 'position': 'fixed', 'background': '#ffffff', 'z-index': '2' });\r\n\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('tbody')).css({\r\n\t\t\t\t\t\t'height': 'inherit',\r\n\t\t\t\t\t\t'overflow': 'hidden'\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();","  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Sub-section\r\n   * @description This directive is useful for creating subsection with custom behaviour.\r\n   * \r\n   * @attr {Var} ng-model\r\n   *    Data to be passed to subsection controller. ngModel can be accessed as $scope.ngModel.data. Any modifications done on $scope.ngModel.data will reflect in actual data model.\r\n   * @attr {String} template-url\r\n   *    Template to be rendered inside subsection ui element\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-load\r\n   *    Callback function when subsection is rendered. This is expected to be subsection controller function and parameters which are passed are expected to be form-widget controllers variables.\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"location\": {\r\n                    \"address1\": \"Building no. 3, Mindspace IT park\",\r\n                    \"address2\": \"Airoli\",\r\n                    \"city\": \"Navi Mumbai\",\r\n                    \"state\": \"MH\",\r\n                    \"country\": \"India\"\r\n                }\r\n            },\r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"\",\r\n                                        \"type\": \"subsection\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"location\",\r\n                                        \"templateUrl\": \"abc.html\",\r\n                                        \"colspan\": 1\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n    \r\n   * @example\r\n    Static:\r\n    Controller:\r\n        $scope.location = { \"address1\": \"Building no. 3, Mindspace IT park\", \"address2\": \"Airoli\", \"city\": \"Navi Mumbai\", \"state\": \"MH\", \"country\": \"India\" };\r\n       \r\n    Usage:\r\n        <smart-subsection template-url=\"abc.html\" ng-model=\"location\"></smart-subsection> \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var subsectionId = 0;\r\n    \r\n    angular.module('SMART2').directive('smartSubsection', ['$compile', 'ScrollTo', function ($compile, ScrollTo) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                modelData: '=?',\r\n                templateUrl: '@',\r\n                controller: '@',\r\n                isMandatory: '@',\r\n                isVisible: '=',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                parentScope: '=?',\r\n                removable: '@',\r\n                formModel: '=?',\r\n\t\t\t\tinit: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.onLoad = attrs.onLoad;\r\n\r\n                subsectionId = subsectionId + 1;\r\n                scope.subsectionId = 'subsection-' + subsectionId;\r\n\r\n              \r\n\r\n                if (typeof scope.modelData == 'function') {\r\n                    scope.ngModel = {\r\n                        data: scope.modelData()\r\n                    };\r\n                }\r\n                else {\r\n\r\n                    scope.ngModel = {\r\n                        data: scope.modelData\r\n                    };\r\n                    /*\r\n                     *  Listen the changes on model data and update sub-section data\r\n                     */\r\n                    var onModelData = scope.$watch('modelData', function (newVal) {\r\n                        scope.ngModel = {\r\n                            data: newVal\r\n                        };\r\n                    }, true);\r\n\r\n                    /*\r\n                     *  Listen the changes send it to parent scope\r\n                     */\r\n                    var onNgModelData = scope.$watch('ngModel.data', function (newVal) {\r\n                        scope.modelData = newVal;\r\n                    }, true);\r\n\r\n                }           /*\r\n                 * Focus the textfield as soon as the focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                if (scope.controller == '') {\r\n                    element.html('<div ng-class=\"{\\'optionalField\\': isMandatory == \\'false\\' && isRemovable}\"><div class=\"optionalFieldHover highlight\" ng-if=\"isMandatory == \\'false\\' && isRemovable\" ng-include=\"\\'shared/directives/uiElements/commonTemplates/optionalFieldRemoveButton.html\\'\"></div><div ng-include=\"templateUrl\" on-subsection-load></div></div>');\r\n                }\r\n                else {\r\n                \telement.html('<div ng-class=\"{\\'optionalField\\': isMandatory == \\'false\\' && isRemovable}\"><div class=\"optionalFieldHover highlight\" ng-if=\"isMandatory == \\'false\\' && isRemovable\" ng-include=\"\\'shared/directives/uiElements/commonTemplates/optionalFieldRemoveButton.html\\'\"></div><div ng-controller=\"' + scope.controller + '\" ng-init=\"' + scope.init + '\" ng-include=\"templateUrl\" on-subsection-load></div></div>');\r\n                }\r\n                $compile(element.contents())(scope);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onModelData();\r\n                    onNgModelData();\r\n                    onFocus();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('onSubsectionLoad', ['$parse', function ($parse) {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                if (angular.isDefined(scope.onLoad)) {\r\n                    scope.$eval(scope.onLoad);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();    ","  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Switch\n   * @description This directive is useful for creating a switch.\n   *\n   * @attr {String} label\n   *    Label to be displayed for identification of this ui element\n   * @attr {Boolean} ng-model\n   *    Switch's default state (selected or unselected)\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\n   * @attr {Boolean} disable\n   *    If value of this attribute is set to true, switch will not be clickable\n   * @attr {Boolean} focus \n   *    If set to true, this ui element will be focused\n   * @attr {Boolean} validate\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\n   * @attr {Array} rules \n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\n   * @attr {String} error-message \n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\n   * @attr {Boolean} is-mandatory \n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\n   * @attr {Boolean} is-visible \n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\n   * @attr {Number} colspan\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\n   *    Default value is 1.\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\n   * @attr {Function} on-change\n   *    Callback function when switch state is changed \n   * \n   * @example\n   Dynamic:\n   Controller:\n       $scope.config = {\n            \"modelData\": {\n                \"isUrgent\": true\n            }, \n            \"formConfig\": {\n                \"sections\": [\n                    {\n                        \"isMandatory\": true,\n                        \"rows\": [\n                            {\n                                \"properties\": [\n                                    {\n                                        \"label\": \"Urgent\",\n                                        \"type\": \"switch\",\n                                        \"isMandatory\": true,\n                                        \"data\": \"isUrgent\",\n                                        \"colspan\": 1,\n                                        \"onChange\": \"onChange\"  //  controller function ,\n                                        \"rules\": [\n                                            { \n                                                \"rule\": \"this == true\", \n                                                \"error\": \"Checkbox should not be selected\" \n                                            }\n                                        ]\n                                    }\n                                ]    \n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n    Usage:\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\n   \n   * @example\n   Static:\n   Controller:\n       $scope.isUrgent = true;\n       $scope.onChange = function(isUrgent) {\n           console.log(isUrgent);\n       };\n   Usage:\n       <smart-switch label=\"Urgent\" ng-model=\"isUrgent\" on-change=\"onChange(isUrgent)\"></smart-switch>\n       \n   * @example\n   Disabled switch:\n   <smart-switch disable=\"true\"></smart-switch>     \n   */\n  \n(function() {\n    'use strict';\n    \n    angular.module('SMART2').directive('smartSwitch', ['$timeout', 'ScrollTo', 'RuleEngine', function ($timeout, ScrollTo, RuleEngine) {\n        return {\n            restrict: 'E',\n            replace: true,\n            require: '?ngModel',\n            scope: {\r\n                //ngModel: '=?',\n                disable: '@',\n                isMandatory: '@',\n                isVisible: '=?',\n                label: '@',\n                rightLabel: '=?',\n                leftLabel:'=?',\n                minHeight: '@',\n                fill: '@',\n                rules: '@',\n                validate: '=?',\n                focus: '=?',\n                parentElement: '@',\n                errorMessage: '@',\n                onChange: '&',\n                removable: '@',\n                additionaltext: '=additionaltext'\n            },\n            link: function (scope, element, attrs, ngModelCtrl) {\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\n    \n                scope.fill = scope.$eval(scope.fill) == undefined ? true : scope.$eval(scope.fill);\n                scope.leftLbl = \"Off\";\n                scope.rightLbl = \"On\";\n\n                if (typeof scope.leftLabel != \"undefined\")\n                    scope.leftLbl = scope.leftLabel;\n                if (typeof scope.rightLabel!=\"undefined\")\n                    scope.rightLbl = scope.rightLabel;\n\n\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\n\n                \n                /*\n                 * Focus field when focus is set to true\n                 */\n                var onFocus = scope.$watch('focus', function(newVal) {\n                    if(newVal) {\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\n                        scope.focus = false;\n                    }\n                });\n                \n                /*\n                 * Validate field whene validate is set to true\n                 */\n                var onValidate = scope.$watch('validate', function(newValue) {\n                    if(newValue != undefined && newValue) {\n                        scope.validateRules();\n                    }\n                });\n                \n                /*\n                 * Validate rules\n                 */\n                scope.validateRules = function () {\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\n\n                    if (scope.rules) {\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\n\n                        for (var i = 0; i < rules.length; i++) {\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\n                                    scope.errorMessage = rules[i].error;\n                                    break;\r\n                                }\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(rules[i], function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\n                        }\n                    }\n                };\n                \n                scope.ngChange = function () {\n                    updateView();\n                    scope.validateRules();\n                    $timeout(function() {\n                        scope.onChange();\n                    });\n                };\n\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                });\n            },\n            templateUrl: 'shared/directives/uiElements/smartSwitch/smartSwitchTemplate.html'\n        };\n    }]);\n})();    ","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Tabs-control\r\n * @description This directive is useful for creating a tabs control.\r\n *\r\n * @attr {Array} tab-config\r\n *    Tabs config. Please see example for more.\r\n * @attr {String} width\r\n *    Width of tabs holder. Default value is '100%'.\r\n *\r\n * @example\r\n Tabs Config in default case\r\n  $scope.tabsData = [{\r\n \"title\" : \"Tab 1\",\r\n \"contentUrl\" : \"tab1.html\",\r\n \"active\" : true\r\n }, {\r\n \"title\" : \"Tab 2\",\r\n \"contentUrl\" : \"tab2.html\"\r\n }, {\r\n \"title\" : \"Tab 3\",\r\n \"contentUrl\" : \"tab3.html\"\r\n }];\r\n \r\n *@example\r\n Controller in case default tab styling is to be overriden(set htmlmode=true and pass template url in tabsUrl):\r\n $scope.tabsData = [{\r\n \"title\" : \"Tab 1\",\r\n \"contentUrl\" : \"tab1.html\",\r\n \"active\" : true,\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template1.html\"\r\n }, {\r\n \"title\" : \"Tab 2\",\r\n \"contentUrl\" : \"tab2.html\",\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template2.html\"\r\n }, {\r\n \"title\" : \"Tab 3\",\r\n \"contentUrl\" : \"tab3.html\",\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template3.html\"\r\n }];\r\n\r\n Usage:\r\n <smart-tabs tab-config=\"{{tabsData}}\" width=\"60%\" header-template=\"test_template.html\"></smart-tabs>\r\n */\r\n\r\n(function() {\r\n\t'use strict';\r\n\tvar tabsId = 0;\r\n\r\n\tangular.module('SMART2').directive('smartTabs', ['$timeout','$parse','$focusOnField',\r\n\tfunction ($timeout, $parse, $focusOnField) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\treplace : true,\r\n\t\t\tscope: true,\r\n\t\t\tlink: function (scope, element, attrs) {\r\n                if(attrs.showCount == 'true') {\r\n                    scope.showCount = true;\r\n                }\r\n\t\t\t    var d = new Date().getTime();\r\n\t\t\t    scope.uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n\t\t\t        var r = (d + Math.random() * 16) % 16 | 0;\r\n\t\t\t        d = Math.floor(d / 16);\r\n\t\t\t        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n\t\t\t    });\r\n\r\n\t\t\t    var selectionCallback = $parse(attrs.onSelect),\r\n\t\t\t\t    tabWidth = attrs.width,\r\n\t\t\t\t    tabParent = element.find('.tabparent'),\r\n\t\t\t\t    currentTab;\r\n\r\n\t\t\t    scope.revisionMode = ((!attrs.revisionMode || attrs.revisionMode == \"false\") ? false : true);\r\n\t\t\t\ttabParent.css('width', tabWidth);\r\n\t\t\t\tvar timeoutCanel = $timeout(function() {\r\n\t\t\t\t\tvar tabs = element.find('.tabs');\r\n\t\t\t\t\ttabs.tabs();\r\n\t\t\t\t\t$timeout.cancel(timeoutCanel);\r\n\t\t\t\t});\r\n\t\t\t\t//scope.stickTabs = false;\r\n\r\n\t\t\t\tscope.vertical = attrs.vertical;\r\n\t\t\t\tscope.tabPanelHeight = angular.isDefined(attrs.tabPanelHeight) ? scope.vertical == 'true' ? attrs.tabPanelHeight : '100%' : '100%';\r\n\r\n\t\t\t\t//uniqueID\r\n\t\t\t\ttabsId = tabsId + 1;\r\n\t\t\t\tscope.tabId = \"tab-\" + tabsId;\r\n\t\t\t\tvar tabWidthInFloat = parseFloat(tabWidth);\r\n\t\t\t\tvar remainingWidth = (100 - tabWidthInFloat) + \"%\";\r\n\t\t\t\t//var rightHeaderStyle=\"{'background-color':'red';'width':\"+remainingWidth+\";'margin-left'}\";\r\n\t\t\t\tscope.headerStyle = {\r\n\t\t\t\t\t\"width\" : remainingWidth,\r\n\t\t\t\t\t\"margin-left\" : tabWidth,\r\n\t\t\t\t\t\"height\" : '48px'\r\n\t\t\t\t};\r\n\t\t\t\tscope.headerTemplate = attrs.headerTemplate;\r\n\t\t\t\tattrs.$observe('tabConfig', function (value) {\r\n\t\t\t\t    scope.tabConfig = scope.$eval(value);\r\n\t\t\t\t    var activeTabContent = currentTab;\r\n\t\t\t\t    var item = _.find(scope.tabConfig, function (item) { return item.active == true; });\r\n                    if (currentTab && currentTab.htmlmode && item == undefined) {\r\n                        for (var i = 0; i < scope.tabConfig.length; i++) {\r\n                            var tTab = scope.tabConfig[i];\r\n                            if (tTab.title.toLowerCase() === activeTabContent.title.toLowerCase()) {\r\n                                tTab.active = true;\r\n                               }\r\n\t\t\t    \t}\r\n\t\t\t\t    }\r\n\t\t\t\t    currentTab = (_.find(scope.tabConfig, function (tab) {\r\n\t\t\t\t        return tab.active;\r\n\t\t\t\t    }));\r\n\t\t\t\t    if (currentTab) {\r\n\t\t\t\t        currentTab.isLoaded = true;\r\n\t\t\t\t        scope.selectedTabContentUrl = currentTab.contentUrl;\r\n\t\t\t\t        //scope.tabClickCallback(currentTab);\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//attrs.$observe('stickTabs', function (value) {\r\n\t\t\t\t//    scope.stickTabs = scope.$eval(value);\r\n\t\t\t\t//});\r\n\r\n\t\t\t\t//scope.$on('checkTabIsDirty', function (event, data) {\r\n\t\t\t\t//    currentTab.isTabValidate = scope[currentTab.onBeforeTabChange] && scope[currentTab.onBeforeTabChange]();\r\n\t\t\t\t//});\r\n\r\n\t\t\t\tscope.tabClickCallback = function (item) {\r\n\t\t\t\t    var returnObject = angular.copy(item);\r\n\t\t\t\t    returnObject.previousTab = currentTab;\r\n\t\t\t\t    returnObject.previousTab.active = false;\r\n\t\t\t\t    currentTab = item;\r\n\t\t\t\t    item.active = true;\r\n\t\t\t\t    item.isLoaded = true;\r\n                    //returnObject.previousTab.isTabValidate = scope[returnObject.previousTab.onBeforeTabChange] && scope[returnObject.previousTab.onBeforeTabChange]();\r\n\t\t\t\t    if (angular.isFunction(selectionCallback)) {\r\n\t\t\t\t        selectionCallback(scope, { 'e': returnObject });\r\n\t\t\t\t    }\r\n\t\t\t\t    //TWO-6116  fixed.\r\n\t\t\t\t    //$timeout(function () {\r\n\t\t\t\t    //    scope.$broadcast('scrollTopToBottom', element.find('.scroll-container').outerHeight());\r\n\t\t\t\t    //}, 800);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.tabbingOnKeyDown = function (evt, $index, tabType) {\r\n\t\t\t\t    var moveTo;\r\n\t\t\t\t    if (evt.keyCode == 38 && angular.isDefined(tabType) || evt.keyCode == 37 && !angular.isDefined(tabType)) {\r\n\t\t\t\t        moveTo = $index - 1;\r\n\t\t\t\t        if (!(moveTo < 0)) {\r\n\t\t\t\t            element.find('.tab').eq(moveTo).focus();\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 40 && angular.isDefined(tabType) || evt.keyCode == 39 && !angular.isDefined(tabType)) {\r\n\t\t\t\t        moveTo = $index + 1;\r\n\t\t\t\t        if (!(moveTo >= scope.tabConfig.length)) {\r\n\t\t\t\t            element.find('.tab').eq(moveTo).focus();\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 13) {\r\n\t\t\t\t        scope.tabClickCallback(scope.tabConfig[$index]);\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 9) {\r\n\t\t\t\t        var firstFieldFocus = element.find(\"tabContent\").find(\"a, input, textarea, [tabindex]\").first();\r\n\t\t\t\t        $focusOnField(firstFieldFocus);\r\n\t\t\t\t    }\r\n\t\t\t\t    evt.stopPropagation();\r\n\t\t\t\t};\r\n                \r\n\t\t\t\tscope.showTabArrows = false;\r\n\t\t\t\tscope.disableNext = false;\r\n\t\t\t\tscope.disablePrev = true;\r\n\t\t\t\tvar isMovableTabs = true;\r\n\t\t\t\tvar tabHorizontalWidth, tabWrapperWidth, totalTabWidth, def, transValue, tempValue = 0;\r\n\r\n\t\t\t\tfunction setTabs() {\r\n\t\t\t\t    $timeout(function () {\r\n\t\t\t\t        tabHorizontalWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).width();\r\n\t\t\t\t        totalTabWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper\")[0].scrollWidth; //.width() doesn't return overflowed width of child element\r\n\r\n\t\t\t\t        if (totalTabWidth > tabHorizontalWidth) {\r\n\t\t\t\t            scope.showTabArrows = true;\r\n\t\t\t\t        }\r\n\r\n\t\t\t\t        $timeout(function () {\r\n\t\t\t\t            tabWrapperWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper\").width();\r\n\t\t\t\t            def = totalTabWidth - tabWrapperWidth;\r\n\t\t\t\t        });\r\n\t\t\t\t    });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.$on('LastRepeaterElement', function (attrs, elem) {\r\n\t\t\t\t    if (elem.is(\"li\") && isMovableTabs && attrs.nextback) {\r\n\t\t\t\t        setTabs();\r\n\t\t\t\t        isMovableTabs = false;\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.getTabsDimensions = function () {\r\n\t\t\t\t    return {\r\n\t\t\t\t        'w': element.find(\"#tabs-horizontal-\" + scope.uniqueID).width()\r\n\t\t\t\t    };\r\n\t\t\t\t};\r\n\t\t\t\tscope.$watch(scope.getTabsDimensions, function (newValue, oldValue) {\r\n\t\t\t\t    if (newValue.w != oldValue.w && attrs.nextback) {\r\n\t\t\t\t        setTabs();\r\n\t\t\t\t    }\r\n\t\t\t\t}, true);\r\n\r\n\t\t\t\tscope.goRight = function () {\r\n\t\t\t\t    if (!scope.disableNext) {\r\n\t\t\t\t        tempValue = tempValue + 175;\r\n\t\t\t\t        if (tempValue < def) {\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disablePrev = false;\r\n\t\t\t\t        }\r\n\t\t\t\t        else {\r\n\t\t\t\t            tempValue = def;\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disablePrev = false;\r\n\t\t\t\t            scope.disableNext = true;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.goLeft = function () {\r\n\t\t\t\t    if (!scope.disablePrev) {\r\n\t\t\t\t        tempValue = tempValue - 175;\r\n\t\t\t\t        if (tempValue < def && tempValue > 0) {\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disableNext = false;\r\n\t\t\t\t        }\r\n\t\t\t\t        else {\r\n\t\t\t\t            tempValue = 0;\r\n\t\t\t\t            transValue = tempValue;\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disableNext = false;\r\n\t\t\t\t            scope.disablePrev = true;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                \r\n\t\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\t    tabParent = null;\r\n\t\t\t\t    element.remove();\r\n\t\t\t\t    scope = null;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/uiElements/smartTabs/smartTabsTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();\r\n","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Character-restrict\r\n * @description This directive is useful for preventing character from entering in text field .\r\n * \r\n * @attr {String} patternreg\r\n *    Js Regex pattern need to be entered\r\n * \r\n * @example\r\n Dynamic: \r\n  Usage:\r\n      <smart-textfield model-data=\"config.modelData\" smart-character-restrict pattern=\"[^\\w\\s-()]\"></smart-form-widget>\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartCharacterRestrict', function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var keyCheckRe = new RegExp(attrs.patternreg, 'ig'),\r\n                    valueCheckRe = attrs.validationreg ? new RegExp(attrs.validationreg, 'ig') : false,\r\n                    valueRegexPassed,\r\n                    allowCharacterFlag = attrs.allowpaste;\r\n\r\n                element\r\n                    .off('keypress.smartcharacterrestrict')\r\n                    .on('keypress.smartcharacterrestrict', 'input', function (inputValue) {\r\n                        keyCheckRe.compile(attrs.patternreg, 'ig');\r\n                        if (inputValue.key == null) {\r\n                            return ''\r\n                        }\r\n\r\n                        if (keyCheckRe.test(inputValue.key)) {\r\n                            inputValue.preventDefault();\r\n                        }\r\n\r\n                        if (valueCheckRe) {\r\n                            valueCheckRe.compile(attrs.validationreg, 'ig');\r\n                            valueRegexPassed = valueCheckRe.test(inputValue.target.value + inputValue.key)\r\n                            if (valueRegexPassed == false) {\r\n                                inputValue.preventDefault();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                element\r\n                    .off('paste.smartcharacterrestrict')\r\n                    .on('paste.smartcharacterrestrict', 'input', function (e) {\r\n                        if (allowCharacterFlag === 'true') {\r\n                            var numRegExp = new RegExp(attrs.patternreg);\r\n                            if (numRegExp == \"/[^0-9-+()]/\") {\r\n                                var copiedText = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n                                var isnum = /^[0-9-+()]+$/.test(copiedText);\r\n                                if (isnum != true) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return false;\r\n                        }\r\n\r\n                    });\r\n            }\r\n        }\r\n    });\r\n})(angular);","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Textfield\r\n * @description This directive is useful for creating a textfield or a date-picker or a auto-complete ui element depending upon the 'type' passed.\r\n * \r\n * @attr {String} label\r\n *    Label to be displayed for identification of this ui element\r\n * @attr {String} placeholder\r\n *    Hint text to be displayed in textfield\r\n * @attr {String} align\r\n *    Text alignment. Possible values are left, center, right.\r\n * @attr {Boolean} autocomplete \r\n *    This attribute is useful for turning off browser's default autocomplete behaviour\r\n * @attr {Number} maxlength\r\n *    Number of characters allowed in textfield\r\n * @attr {Number} decimalprecision\r\n *    Number of characters allowed after decimal precision in textfield\r\n * @attr {Number} min\r\n *    Minimum value allowed in textfield \r\n * @attr {Number} max\r\n *    Maximum value allowed in textfield\r\n * @attr {Number} minmaxprecision\r\n *    Number of characters that should be visible in number type textfield. Internally filter is applied for the given numbers. Data to be sent in array format with 2 array contents \r\n * @attr {Var} ng-model\r\n *    Default value to be displayed in textfield\r\n * @attr {Object} ng-model-options\r\n *    https://docs.angularjs.org/api/ng/directive/ngModelOptions\r\n * @attr {Boolean} focus \r\n *    If set to true, this ui element will be focused\r\n * @attr {Boolean} validate\r\n *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n * @attr {Array} rules \r\n *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n * @attr {String} error-message \r\n *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n * @attr {Boolean} is-mandatory \r\n *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n * @attr {Boolean} is-visible \r\n *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n * @attr {Number} colspan\r\n *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n *    Default value is 1.\r\n *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n * @attr {String} type \r\n *    Type of textfield. Default value is 'text'. Possible values are area (textarea), number, email, date, autocomplete.\r\n * @attr {Boolean} readonly \r\n *    If set to true, textfield cannot be editable. Textfield's blur and focus events will still be fired (default behaviour).\r\n * @attr {Boolean} disable \r\n *    If set to true, textfield cannot be editable. Textfield's blur and focus events will not be fired (default behaviour).\r\n * @attr {Function} on-focus\r\n *    Callback function when ui element's focus event is fired\r\n * @attr {Function} on-blur\r\n *    Callback function when ui element's blur event is fired\r\n * @attr {Function} on-key-up\r\n *    Callback function when ui element's keyup event is fired\r\n * @attr {Function} on-key-down\r\n *    Callback function when ui element's keydown event is fired\r\n * @attr {Function} on-key-press\r\n *    Callback function when ui element's keypress event is fired\r\n * @attr {Function} on-enter\r\n *    Callback function when ENTER (RETURN) key is pressed\r\n * \r\n * @example\r\n Dynamic:\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"companyName\": \"GEP\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Company name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"isVisible\": false,\r\n                                      \"data\": \"companyName\",\r\n                                      \"colspan\": 1,\r\n                                      \"validate\": false,\r\n                                      \"focus\": false,\r\n                                      \"onFocus\": \"onFocus\",\r\n                                      \"onBlur\": \"onBlur\" \r\n                                      \"onChange\": \"onChange\"\r\n                                      \"onKeyPress\": \"onKeyPress\"\r\n                                      \"onKeyUp\": \"onKeyUp\"\r\n                                      \"onKeyDown\": \"onKeyDown\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"number\"\r\n                                          \"maxlength\": \"\",\r\n                                          \"decimalprecision\": \"\",\r\n                                          \"minmaxprecision\": [2,5],\r\n                                          \"disable\": true,\r\n                                          \"readonly\": true,\r\n                                          \"align\": \"left\",\r\n                                          \"placeholder\": \"\",\r\n                                          \"autocomplete\": false\r\n                                      },\r\n                                      \"rules\": [\r\n                                          { \r\n                                              \"rule\": \"this.length > 10\", \r\n                                              \"errorMessage\": \"Length should not be greater than 10\" \r\n                                          }\r\n                                      ]\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Textfield with ng-model-options. This example is applicable only if one wants to use 'ng-model-options' with 'getterSetter' option. Otherwise VM\r\n does not need to be used as 'ng-model' or 'data'.\r\n Dynamic:\r\n Controller:\r\n     var defaultCompanyName = 'GeP';\r\n     this.companyName = function (val) {\r\n         if (val !== undefined) {\r\n             defaultCompanyName = val;\r\n         }\r\n         return defaultCompanyName;\r\n     };\r\n\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"companyName\": \"GEP\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Company name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"isVisible\": false,\r\n                                      \"data\": \"controllerVM.companyName\",\r\n                                      \"attributes\": {\r\n                                          \"ngModelOptions\": { getterSetter: true }\r\n                                      },\r\n                                      \"rules\": [\r\n                                          { \r\n                                              \"rule\": \"this.length > 10\", \r\n                                              \"errorMessage\": \"Length should not be greater than 10\" \r\n                                          }\r\n                                      ]\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Textfield with ng-model-options. This example is applicable only if one wants to use 'ng-model-options' with 'getterSetter' option. Otherwise VM\r\n does not need to be used as 'ng-model' or 'data'.\r\n Static:\r\n Controller:\r\n     angular.module('SMART2', []).controller('textFieldController', ['$scope', function($scope) {\r\n         var defaultCompanyName = 'GeP';\r\n         this.companyName = function (val) {\r\n             if (val !== undefined) {\r\n                 defaultCompanyName = val;\r\n             }\r\n             return defaultCompanyName;\r\n         };\r\n     }]);\r\n  Usage:\r\n      <div ng-controller=\"textFieldController as textFieldVM\">\r\n        <smart-textfield ng-model=\"textFieldVM.companyName\" ng-model-options=\"{getterSetter: true}\"></smart-textfield>\r\n      </div>\r\n\r\n * @example\r\n Static:\r\n Controller:\r\n      $scope.companyName = \"GEP\";\r\n Usage:\r\n      <smart-textfield label=\"First name\" ng-model=\"companyName\"></smart-textfield>\r\n      \r\n * @example\r\n Textfield with events: \r\n '$event' passed in callback functions in following example is angular event. \r\n  <smart-textfield on-focus=\"onFocus()\" \r\n                   on-blur=\"onBlur()\" \r\n                   on-change=\"onChange($event)\"\r\n                   on-key-press=\"onKeyPress($event)\"\r\n                   on-key-up=\"onKeyUp($event)\"\r\n                   on-key-down=\"onKeyDown($event)\"></smart-textfield>        \r\n */\r\n\r\n\r\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Date-picker\r\n * @description This directive is useful for creating a date picker. This directive is derived from 'textfield' directive. All the attributes of 'textfield' directive are applicable to this directive. Following are some additional attributes.\r\n * \r\n * @attr {String} format \r\n *    Date format. For e.g. dd/MM/yyyy. For more details browse https://docs.angularjs.org/api/ng/filter/date\r\n * @attr {Var} ng-model\r\n *    Default date to be displayed. 'ng-model' is expected to be in milliseconds (timestamp) or javascript date. For e.g. 5656534324368 or \"2014-09-18T10:03:58\" or \"Fri Mar 04 2016 13:10:56 GMT+0530 (IST)\"\r\n * \r\n * @example\r\n Dynamic: (Timestamp)\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"date\": 1457094173954\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Date\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"date\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"date\",\r\n                                          \"format\": \"dd/MM/yyyy\"\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Dynamic: (Javascript date)\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"date\": \"Fri Mar 04 2016 17:50:50 GMT+0530 (IST)\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Date\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"date\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"date\",\r\n                                          \"format\": \"dd/MM/yyyy\"\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Static: (Timestamp)\r\n Controller:\r\n      $scope.date = 1457094173954;\r\n Usage:\r\n      <smart-textfield type=\"date\" label=\"Date\" ng-model=\"date\"><smart-textfield> \r\n      \r\n * @example\r\n Static: (Javascript date)\r\n Controller:\r\n      $scope.date = \"Fri Mar 04 2016 17:50:50 GMT+0530 (IST)\";\r\n Usage:\r\n      <smart-textfield type=\"date\" label=\"Date\" ng-model=\"date\"><smart-textfield>         \r\n */\r\n\r\n\r\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Auto-complete\r\n * @description This directive is useful for creating an auto-complete ui element. This directive is derived from 'textfield' directive. All the attributes of 'textfield' directive are applicable to this directive. Following are some additional attributes.\r\n * \r\n * @attr {Object} ng-model\r\n *    Default value to be displayed in textfield. 'ng-model' is expected to be an object having property (key) set in 'datakey' attribute.\r\n * @attr {Array} filterkeys\r\n *    An array of properties (keys) on which filtering to be applied. Suggestions will get filtered on the basis of properties (keys) passed in array.\r\n * @attr {String} optionformat\r\n *    A single suggestion format (template)\r\n * @attr {String} displayformat\r\n *    A format in which the data in textfield to be displayed\r\n * @attr {Boolean} loading \r\n *    This attribute can be used to display a loader while autosuggest data is being fetched from the server.\r\n * @attr {Function} on-select\r\n *    Callback when a suggestion is selected\r\n * \r\n * @example\r\n Dynamic:\r\n Controller:\r\n     $scope.onChange = function(uiElementConfig) {\r\n          uiElementConfig.attributes.options = [\r\n              {\r\n                  \"UserId\": 28360,\r\n                  \"UserName\": \"SRUser1@outlook.com\",\r\n                  \"FirstName\": \"SR \",\r\n                  \"LastName\": \"User1\"\r\n              }, {\r\n                  \"UserId\": 28977,\r\n                  \"UserName\": \"test1\",\r\n                  \"FirstName\": \"Test\",\r\n                  \"LastName\": \"\"\r\n              }, {\r\n                  \"UserId\": 57950,\r\n                  \"UserName\": \"HShah\",\r\n                  \"FirstName\": \"Harshit\",\r\n                  \"LastName\": \"Shah\"\r\n              }\r\n          ];\r\n     };\r\n     $scope.onSelect = function(autoSuggestData) {\r\n         console.log(autoSuggestData);\r\n         //   autoSuggestData will be updated every time a new suggestion is chosen. Passing 'model' in 'onSelect' is optional.\r\n     };\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"autoSuggestData\": { \"UserId\": 28360, \"UserName\": \"SRUser1@outlook.com\", \"FirstName\": \"SR\", \"LastName\": \"User1\", \"title\": \"SR User1\" }\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Auto complete\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"autoSuggestData\",\r\n                                      \"onChange\": \"onChange\",\r\n                                      \"onSelect\": \"onSelect(autoSuggestData)\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"autocomplete\",\r\n                                          \"options\": [],\r\n                                          \"filterkeys\": [\"FirstName\", \"LastName\"],\r\n                                          \"optionformat\": \"<span>{FirstName} {LastName}</span>\",\r\n                                          \"displayformat\": \"{FirstName} {LastName}\",\r\n                                          \"loading\": false\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n     };\r\n  Usage:\r\n     <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n * @example\r\n Static:\r\n Controller:\r\n     $scope.autoCompleteData = { \"UserId\": 28360, \"UserName\": \"SRUser1@outlook.com\", \"FirstName\": \"SR\", \"LastName\": \"User1\", \"title\": \"SR User1\" };\r\n     $scope.onChange = function(e) {\r\n          //  Textfield's value can be found in e.data[0].value\r\n          //  See console for more\r\n          console.log(e);\r\n          $scope.options = [\r\n              {\r\n                  \"UserId\": 28360,\r\n                  \"UserName\": \"SRUser1@outlook.com\",\r\n                  \"FirstName\": \"SR \",\r\n                  \"LastName\": \"User1\"\r\n              }, {\r\n                  \"UserId\": 28977,\r\n                  \"UserName\": \"test1\",\r\n                  \"FirstName\": \"Test\",\r\n                  \"LastName\": \"\"\r\n              }, {\r\n                  \"UserId\": 57950,\r\n                  \"UserName\": \"HShah\",\r\n                  \"FirstName\": \"Harshit\",\r\n                  \"LastName\": \"Shah\"\r\n              }\r\n          ]; \r\n     };\r\n     $scope.onSelect = function(autoCompleteData) {\r\n         console.log(autoCompleteData);\r\n         //   autoCompleteData will be updated every time a new suggestion is chosen. Passing 'model' in 'onSelect' is optional.\r\n     };\r\n Usage:\r\n     <smart-textfield type=\"autocomplete\" label=\"Auto complete\" ng-model=\"autoCompleteData\" filterkeys=\"['FirstName', 'LastName']\" optionformat=\"<span>{FirstName} {LastName}</span>\" displayformat=\"{FirstName} {LastName}\" options=\"options\" on-change=\"onChange($event)\" on-select=\"onSelect(autoCompleteData)\"></smart-textfield>\r\n */\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n    var textfieldId = 19820116;\r\n    //var directiveV2 = true;\r\n    //var isDirectiveV2enabled = function () { return true; }\r\n    $(function () {\r\n        angular.element('body').off('click').on('click', '.daterangepicker', function (e) {\r\n            e.stopPropagation();\r\n        });\r\n    });\r\n\r\n    angular.module('SMART2').directive('smartTextfield', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'RuleEngine', 'smartTextFieldService', 'smartTextField3Service', '$filter', '$window',\r\n        (typeof isDirectiveV2enabled !== 'undefined' ? (isDirectiveV2enabled() === true || isDirectiveV2enabled() === 'V3' ? smartTextField3Func : smartTextFieldFunc) : smartTextFieldFunc)]);\r\n\r\n\r\n    function smartTextFieldFunc($rootScope, $timeout, $translate, ScrollTo, RuleEngine, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                //ngModel: '=?',\r\n                modelOptions: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                scope.modelOptions = scope.modelOptions === false ? {} : !scope.modelOptions ? {\r\n                    updateOn: 'default blur change',\r\n                    debounce: { 'default': 300, 'blur': 0, 'change': 0 }\r\n                } : scope.modelOptions;\r\n                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon\r\n                var timePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker == 'true' ? true : false);\r\n                scope.format = (scope.format ? scope.format : timePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n                scope.count = 0;\r\n                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                var number, rulesValidationEvent;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n\r\n\r\n                if (scope.type == 'number') {\r\n                    element.bind(\"DOMMouseScroll mousewheel onmousewheel\", function (event) {\r\n\r\n                        // for IE\r\n                        event.returnValue = false;\r\n                        // for Chrome and Firefox\r\n                        if (event.preventDefault) {\r\n                            event.preventDefault();\r\n                        }\r\n\r\n                    });\r\n                }\r\n\r\n\r\n                var uniqueIDGenerator = function () {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xx2xxpxxoxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                if (attrs.validateOn) {\r\n                    rulesValidationEvent = attrs.validateOn;\r\n                }\r\n                else {\r\n                    rulesValidationEvent = 'blur';\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\r\n\r\n\r\n                function checkIfActive() {\r\n                    if (scope.readonly == 'true') {\r\n                        return true;\r\n                    }\r\n                    if (scope.type == 'number' && scope.ngModel !== 0 + '' && scope.placeholder === '' && (scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                        return false;\r\n                    }\r\n                    if (scope.type != 'number' && scope.type != 'autocomplete' && scope.placeholder === '' && (scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                        return false;\r\n                    }\r\n                    if (scope.type == 'autocomplete' && scope.placeholder === '' && (scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n\r\n                function setPrecisionLimits() {\r\n                    number = scope.ngModel;\r\n                    if (number != undefined) {\r\n                        var arr = (number.toString()).split('e')\r\n                        if (arr.length > 1 && parseInt(arr[1]) < 0) {\r\n                            number = (number).toFixed(6);\r\n                            scope.ngModel = number;\r\n                        }\r\n                        var tempArr = number.toString().split('.');\r\n                        if (tempArr != undefined && tempArr.length > 1) {\r\n                            var preDecimal = tempArr[0];\r\n                            if (preDecimal != 0 && preDecimal.toString().length > 20) {\r\n                                var tempVal = preDecimal.toString().substring(0, 19);\r\n                                scope.ngModel = parseInt(tempVal);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (number != 0 && number.toString().length > 20) {\r\n                                var tempVal = number.toString().substring(0, 19);\r\n                                scope.ngModel = parseInt(tempVal);\r\n                            }\r\n                        }\r\n                        if (scope.decimalprecision != undefined) {\r\n                            scope.ngModel = parseFloat(parseFloat(scope.ngModel).toFixed(scope.decimalprecision));\r\n                        }\r\n                        else if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length > 2 || splitPrecision.length < 1)\r\n                                return;\r\n                            var lowerPrecisionLimit = splitPrecision[0];\r\n                            var highPrecisionLimit = splitPrecision[1];\r\n\r\n                            var postDecimalNumbers = ((scope.ngModel + \"\").split(\".\")[1] != undefined) ? (scope.ngModel + \"\").split(\".\")[1].length : 0;\r\n\r\n                            if (postDecimalNumbers == 0)\r\n                                return;\r\n\r\n                            if (lowerPrecisionLimit > postDecimalNumbers && postDecimalNumbers < highPrecisionLimit && postDecimalNumbers != 0) {\r\n                                scope.ngModel = parseFloat(parseFloat(scope.ngModel).toFixed(lowerPrecisionLimit));\r\n                            }\r\n                            else if (postDecimalNumbers >= highPrecisionLimit && postDecimalNumbers != 0) {\r\n                                var fixed = Math.pow(10, highPrecisionLimit);\r\n                                scope.ngModel = Math.floor(scope.ngModel * fixed) / fixed;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.isActive = checkIfActive();\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.textfieldId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    textfieldId = uniqueIDGenerator();\r\n                    scope.textfieldId = 'txt-' + textfieldId;\r\n                }\r\n\r\n                scope.labelForTextfieldId = 'label-for-' + scope.textfieldId;\r\n\r\n                /*\r\n                * Skip tab key focus, if the field is readonly\r\n                */\r\n                setTimeout(function () {\r\n                    if (scope.readonly == 'true' && scope.type != 'date') {\r\n                        angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n                    }\r\n\r\n                    try {\r\n                        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n                            scope.$parent.$parent.onEditableRender(scope, element);\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                });\r\n\r\n                /*\r\n                 * Validate the textfield as soon as the validate is set to true\r\n                 */\r\n                var unbindValidate = scope.$watch('validate', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Focus the textfield as soon as the focus is set to true\r\n                 */\r\n                var unbindFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        //  settimeout is added to avoid $digest already in progress\r\n                        setTimeout(function () {\r\n                            var el = angular.element('#' + scope.textfieldId);\r\n                            if (scope.label) {\r\n                                el.trigger('click');\r\n                                el.focus();\r\n                            } else {\r\n                                // if label is undefined or empty then directly focus on input element \r\n                                if (el.is(\"input\")) {\r\n                                    el.focus();\r\n                                } else {\r\n                                    el.find(\"input\").focus();\r\n                                }\r\n                            }\r\n                        }, 100); // increased timer hotfix for focus cell in ui-grid\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n                var checkRule = function () {\r\n                    var rules = scope.$eval(scope.rules);\r\n                    var isFoundInvalid = false;\r\n\r\n                    for (var i = 0; i < rules.length; i++) {\r\n                        if (typeof rules[i] == 'object') {\r\n                            if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                                scope.validate = true;\r\n                                scope.errorMessage = rules[i].error;\r\n                                scope.errorModel = rules[i].error;\r\n                                break;\r\n                            } else {\r\n                                if (scope.type === 'date') {\r\n                                    angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (!isFoundInvalid) {\r\n                                if (typeof scope.ngModel != 'object')\r\n                                    var data = scope.ngModel;\r\n                                else\r\n                                    var data = scope.displayModel;\r\n\r\n                                RuleEngine.isValid(rules[i], function (e) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = e.errorData.error;\r\n                                    scope.errorModel = e.errorData.error;\r\n                                    isFoundInvalid = true;\r\n                                }, data);\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                /*\r\n                 * Validate textfield rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    if (scope.readonly == 'true') {\r\n                        scope.isActive = true;\r\n                        return;\r\n                    }\r\n\r\n                    if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                        if (attrs.noTrim == 'true') {\r\n                            scope.ngModel = scope.ngModel;\r\n                        } else {\r\n                            scope.ngModel = scope.ngModel.trim();\r\n                        }\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n\r\n                    if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && (scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant('enterValueErrMsg');\r\n                        scope.errorModel = $translate.instant('enterValueErrMsg');\r\n                        return;\r\n                    }\r\n\r\n                    if (scope.type == 'number') {\r\n                        if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                            angular.element('#' + scope.textfieldId).val('');\r\n                            return;\r\n                        }\r\n                        if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                            if (scope.rules) {\r\n                                checkRule();\r\n                            }\r\n                            return;\r\n                        }\r\n                        if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                            scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.type == 'date' && !scope.rules) {\r\n                        $('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    scope.errorModel = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    if (typeof scope.ngModel != 'object')\r\n                                        var data = scope.ngModel;\r\n                                    else\r\n                                        var data = scope.displayModel;\r\n\r\n                                    RuleEngine.isValid(rules[i], function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    }, data);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                //  callback events\r\n                var isDateBlank = false;\r\n                scope.ngChange = function (e) {\r\n                    if (scope.type == 'number') {\r\n                        if (scope.ngModel == null || scope.ngModel == undefined)\r\n                            scope.count = 0;\r\n                        setPrecisionLimits();\r\n                    }\r\n                    scope.isActive = checkIfActive();\r\n                    if (rulesValidationEvent == 'change') {\r\n                        scope.validateRules();\r\n                    }\r\n\r\n                    if (scope.type != 'autocomplete') {\r\n                        updateView();\r\n                    }\r\n\r\n                    //  Value of 'e' is undefined in ng-change\r\n                    scope.onChange({\r\n                        $event: {\r\n                            data: angular.element('#' + scope.textfieldId),\r\n                            displayModel: scope.displayModel\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scope.ngFocus = function (e) {\r\n                    if (scope.type === 'autocomplete' || scope.clearListOnFocus === \"true\") {\r\n                        var Obj = element.find('input').devbridgeAutocomplete();\r\n                        if (element.find('input').val() == '' && Obj) {\r\n                            Obj.clear();\r\n                        }\r\n                    }\r\n                    scope.isActive = true;\r\n                    scope.validate = false;\r\n                    if (rulesValidationEvent == 'focus') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onFocus({ $event: e });\r\n                };\r\n\r\n                scope.ngBlur = function (e) {\r\n                    if (scope.type == 'number') {\r\n                        if (scope.min != undefined || scope.min != null) {\r\n                            if (scope.ngModel == undefined || scope.ngModel == null || isNaN(scope.ngModel)) {\r\n                                $('#' + scope.textfieldId).val('');\r\n                            }\r\n                        }\r\n                    }\r\n                    if (scope.type == 'date' && isDateBlank) {\r\n                        $timeout(function () {\r\n                            var targetedEle = document.activeElement;\r\n                            if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                                //  scope.ngModel = null;\r\n                                scope.dateModel = null;\r\n                            }\r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({\r\n                                    $date: scope.ngModel\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                    if (scope.type === 'autocomplete') {\r\n                        if (scope.ngModel && scope.displayformat) {\r\n                            var splittedDisplayFormat = [];\r\n                            if (scope.displayformat.indexOf(\":\") > 0)\r\n                                splittedDisplayFormat = scope.displayformat.split(':');\r\n                            else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                                splittedDisplayFormat = scope.displayformat.split('-');\r\n                            else\r\n                                splittedDisplayFormat = scope.displayformat.split('-');\r\n                            var result = \"\";\r\n                            for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                                result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                                if (i < splittedDisplayFormat.length - 1) {\r\n                                    if (scope.displayformat.indexOf(\"-\") > 0)\r\n                                        result += '-';\r\n                                    else if (scope.displayformat.indexOf(\":\") > 0)\r\n                                        result += ':';\r\n                                }\r\n                            }\r\n                            if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n                                if (result !== scope.displayModel)\r\n                                    scope.displayModel = '';\r\n                            }\r\n                        }\r\n                    }\r\n                    //as debounce is used smartTextField templates for updating model, $timeout is used to keep validateRules() on blur in sync\r\n                    $timeout(function () {\r\n                        if (scope.type == 'date') {\r\n                            if (pickerObj && pickerObj.isShowing) {\r\n                                return;\r\n                            }\r\n                            else {\r\n                                scope.validateRules();\r\n                                scope.isActive = checkIfActive();\r\n                            }\r\n                        }\r\n                        else {\r\n                            scope.validateRules();\r\n                            scope.isActive = checkIfActive();\r\n\r\n                            try {\r\n                                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n                    })\r\n\r\n                    //  had to use jQuery because 'active' class does not get removed sometimes even if scope.isActive's value is false\r\n                    scope.isActive || scope.validate ? angular.element('#' + scope.labelForTextfieldId).addClass('active') : angular.element('#' + scope.labelForTextfieldId).removeClass('active');\r\n\r\n                    //  had to use jQuery because 'invalid' class does not get removed sometimes even if scope.validate's value is false\r\n                    if (attrs.charactercounter) {\r\n                        scope.validate && scope.errorMessage ? angular.element('#' + scope.textfieldId).addClass('invalid') : angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n                    scope.focus = false;\r\n                    scope.onBlur({ $event: e });\r\n                };\r\n\r\n                scope.ngKeyUp = function (e) {\r\n                    if (scope.type == 'date') {\r\n                        if (e.which != 32) {\r\n                            var currentInputValue = $('#' + scope.textfieldId).val();\r\n                            if (currentInputValue == \"\") {\r\n                                scope.ngModel = null;\r\n                                scope.dateModel = \"\";\r\n                                isDateBlank = true;\r\n                                ngModelCtrl.$setViewValue('');\r\n                                if (angular.isFunction(scope.onDateChange)) {\r\n                                    scope.onDateChange({\r\n                                        $date: scope.ngModel\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rulesValidationEvent == 'keyUp') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onKeyUp({ $event: e });\r\n                };\r\n\r\n                scope.ngKeyDown = function (e) {\r\n                    if (rulesValidationEvent == 'keyDown') {\r\n                        scope.validateRules();\r\n                    }\r\n                    //to control number of down arrow,up arrow signs on number fields\r\n                    if (scope.type === \"number\" && (e.keyCode == 38 || e.keyCode == 40))\r\n                        e.preventDefault();\r\n                    scope.onKeyDown({ $event: e });\r\n\r\n                };\r\n\r\n                scope.ngKeyPress = function (e) {\r\n                    if (scope.type == 'number' || attrs.datanumeric) {\r\n                        //to control number of +,-, signs and alphabets on number fields\r\n                        var charCode = e.charCode || e.keyCode,\r\n                        textValue = e.currentTarget.value,\r\n                        decimalDigit = [],\r\n                        cc = String.fromCharCode(charCode),\r\n                        escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                        if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                            e.preventDefault();\r\n                        }\r\n                        // Restrict the 2 dots entering\r\n                        if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                            e.preventDefault();\r\n                        }\r\n\r\n                        if (textValue) {\r\n                            decimalDigit = textValue.toString().split('.');\r\n                        }\r\n                        // Restrict the decimal value from entering\r\n                        if (attrs.decimalprecision) {\r\n                            if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                                e.preventDefault();\r\n                            }\r\n                            if (decimalDigit.length == 2) {\r\n                                if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                                    e.preventDefault();\r\n                                }\r\n                            }\r\n                        }\r\n                        if (scope.min != undefined || scope.min != null) {\r\n                            if (scope.min >= 0 && e.charCode == 45) {\r\n                                e.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (rulesValidationEvent == 'keyPress') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onKeyPress({ $event: e });\r\n                    if (e.charCode == 13) {\r\n                        scope.onEnter({ $event: e });\r\n                    }\r\n\r\n                    // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n                    if (e.target.value.length === attrs.maxlength && e.charCode !== 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                };\r\n\r\n\r\n                /*\r\n                 * This function is required to generate value attribute \r\n                 * and useful when up/down key is pressed\r\n                 */\r\n                function getFormattedData(data) {\r\n                    if (!data || data.length == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{');\r\n                            for (var j = 0; j < parentSplit.length; j++) {\r\n                                var childSplit = parentSplit[j].split('}');\r\n                                for (var k = 0; k < childSplit.length; k++) {\r\n                                    if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n\r\n                /*\r\n                 * Get plain display data\r\n                 */\r\n                function getDisplayData(data) {\r\n                    if (data == undefined || data == null || data == '') {\r\n                        return '';\r\n                    }\r\n                    var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                    try {\r\n                        var parentSplit = str.split('{');\r\n                        for (var j = 0; j < parentSplit.length; j++) {\r\n                            var childSplit = parentSplit[j].split('}');\r\n                            for (var k = 0; k < childSplit.length; k++) {\r\n                                if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                                    evalResult = eval('data.' + childSplit[k]);\r\n                                    evaluatedKeysCounter++;\r\n                                    if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                        evalResult = '';\r\n                                        nullKeysCounter++;\r\n                                    }\r\n                                    str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (evaluatedKeysCounter == nullKeysCounter) {\r\n                            str = '';\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Convert timestamp to UTC timestamp \r\n                 */\r\n                function toUTC(date) {\r\n                    return Date.UTC(\r\n                        date.getFullYear()\r\n                        , date.getMonth()\r\n                        , date.getDate()\r\n                        , date.getHours()\r\n                        , date.getMinutes()\r\n                        , date.getSeconds()\r\n                        , date.getMilliseconds()\r\n                    );\r\n                };\r\n                scope.isValueDateObj = false;\r\n                var doesContainDateString = false;\r\n                var dateFormate = scope.format;\r\n                function getGridFormatToTimestamp(stringdate) {\r\n                    var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                    // tmpModel = tmpModel.split('+');\r\n                    // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n                    return moment(tmpModel).format(dateFormate);\r\n                }\r\n                var pickerObj;\r\n                function createDatePicker() {\r\n                    $timeout(function () {\r\n                        var picker = angular.element('#' + scope.textfieldId);\r\n                        var callApplyFuncFlag = true;\r\n                        function setDateFormate(datePar) {\r\n                            if (doesContainDateString) {\r\n                                scope.ngModel = '\\/Date(' + (datePar.unix() * 1000) + ')\\/';\r\n                            } else {\r\n                                if (scope.isValueDateObj) {\r\n                                    var tempDate = datePar.format();\r\n                                    scope.ngModel = new Date(tempDate);\r\n                                } else {\r\n                                    scope.ngModel = (datePar.unix() * 1000);\r\n                                }\r\n                            }\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                            isDateBlank = false;\r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({ $date: scope.ngModel });\r\n                            }\r\n                        }\r\n                        var minDate = angular.isDefined(scope.min) ? doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(dateFormate) : '';\r\n                        var maxDate = angular.isDefined(scope.max) ? doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(dateFormate) : '';\r\n\r\n                        var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                        var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                        pickerObj = picker.daterangepicker({\r\n                            \"singleDatePicker\": true,\r\n                            \"showDropdowns\": true,\r\n                            \"timePicker\": timePicker,\r\n                            \"timePicker24Hour\": timePicker24Hour,\r\n                            \"timePickerIncrement\": timePickerIncrement,\r\n                            \"autoApply\": false,\r\n                            \"opens\": \"right\",\r\n                            \"drops\": \"down\",\r\n                            \"minDate\": minDate,\r\n                            \"maxDate\": maxDate,\r\n                            \"locale\": {\r\n                                \"format\": dateFormate,\r\n                                'cancelLabel': $translate.instant('cancelBtn'),\r\n                                'applyLabel': $translate.instant('applyBtn')\r\n                            }\r\n                        }, function (start, end, label) {\r\n                            callApplyFuncFlag = false;\r\n                            setDateFormate(end);\r\n                        }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                            var pos = pickerObj.container.offset(),\r\n                                wHeight = window.innerHeight,\r\n                                srTop = $(window).scrollTop();\r\n                            if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                                pickerObj.drops = \"up\";\r\n                                pickerObj.move();\r\n                            } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                                pickerObj.drops = \"down\";\r\n                                pickerObj.move();\r\n                            }\r\n                        }).data(\"daterangepicker\");\r\n\r\n                        picker.on('apply.daterangepicker', function (ev, pickerr) {\r\n                            if (callApplyFuncFlag) {\r\n                                setDateFormate(pickerr.endDate)\r\n                            }\r\n                            callApplyFuncFlag = true;\r\n                        });\r\n\r\n                        if (isDateBlank) {\r\n                            picker.val('');\r\n                            scope.ngModel = \"\";\r\n                            ngModelCtrl.$setViewValue('');\r\n                        };\r\n                    });\r\n                }\r\n\r\n                switch (scope.type) {\r\n                    case 'autocomplete':\r\n                        // key to be used to bind options\r\n                        var filterKeys;\r\n                        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                        }\r\n                        else {\r\n                            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                        }\r\n                        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n                        var displayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n                        /*\r\n                         * Check if the options are updated\r\n                         */\r\n                        var autoCompleteField;\r\n                        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n                            try {\r\n                                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                                    autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                                        filterKeys: filterKeys,\r\n                                        optionFormat: optionFormat,\r\n                                        displayFormat: displayFormat,\r\n                                        lookup: getFormattedData(newOptions),\r\n                                        width: scope.width,\r\n                                        showNoSuggestionNotice: showNoSuggestion,\r\n                                        noSuggestionNotice: noSuggestionNotice,\r\n                                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                                        onSelect: function (suggestion) {\r\n                                            angular.element('#' + scope.labelForTextfieldId).trigger('click');\r\n                                            scope.$evalAsync(function () {\r\n                                                scope.displayModel = getDisplayData(suggestion);\r\n                                                scope.ngModel = suggestion;\r\n                                                updateView();\r\n                                                $timeout(function () {\r\n                                                    scope.onSelect({\r\n                                                        $event: {\r\n                                                            data: suggestion\r\n                                                        }\r\n                                                    });\r\n                                                });\r\n                                            });\r\n                                        }\r\n                                    }).devbridgeAutocomplete();\r\n                                }\r\n                                else {\r\n                                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n                        });\r\n\r\n                        /*\r\n                         * Destroy autocomplete on scope destroy\r\n                         */\r\n                        scope.$on('$destroy', function () {\r\n                            if ($('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                                $('#' + scope.textfieldId).devbridgeAutocomplete().dispose();\r\n                            }\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                    case 'date':\r\n                        /*\r\n                         * Destroy datepicker on scope destroy\r\n                         */\r\n                        scope.$on('$destroy', function () {\r\n                            angular.element('#' + scope.textfieldId + '_root').remove();\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                    case 'text':\r\n                    case 'area':\r\n                    case 'number':\r\n                        scope.$on('$destroy', function () {\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                //Closing the suggestions on scroll to prevent overlapping issue\r\n                angular.element($window).scroll(function (e) {\r\n                    hideAutoOnScroll();\r\n                });\r\n\r\n                angular.element(\".modal, .modal-content\").scroll(function (e) {\r\n                    hideAutoOnScroll();\r\n                });\r\n\r\n                function hideAutoOnScroll() {\r\n                    if (autoCompleteField != undefined) {\r\n                        if (autoCompleteField.visible) {\r\n                            autoCompleteField.hide();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 *  Update 'active' class when textfield's value is updated\r\n                 */\r\n                switch (scope.type) {\r\n                    case 'autocomplete':\r\n                    case 'text':\r\n                    case 'area':\r\n                    case 'number':\r\n                        var unbindNumber = scope.$watch('ngModel', function (newVal) {\r\n                            if (scope.type == 'autocomplete' && angular.isDefined(newVal)) {\r\n                                scope.displayModel = getDisplayData(newVal);\r\n                                if (scope.displayModel !== \"\") {\r\n                                    scope.validate = false;\r\n                                    scope.errorMessage = null;\r\n                                    scope.errorModel = null;\r\n                            }\r\n                            }\r\n                            if (scope.type == 'number') {\r\n                                setPrecisionLimits();\r\n                            }\r\n                            if (attrs.decimalprecision && attrs.datanumeric) {\r\n                                setPrecisionLimits();\r\n                            }\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                            if (scope.type == 'area') {\r\n                                $timeout(function () {\r\n                                    angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                                });\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                    case 'date':\r\n                        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                        });\r\n                        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n                            dateFormate = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                            isDateBlank = false;\r\n                            doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                            if (newVal == \"\" || newVal == null) {\r\n                                newVal = Date.now();\r\n                                isDateBlank = true;\r\n                                scope.isValueDateObj = false;\r\n                            } else {\r\n                                if (doesContainDateString) {\r\n                                    var tmpModel = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                                    tmpModel = tmpModel.split('+');\r\n                                    tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                                    scope.dateModel = moment(tmpModel).format(dateFormate);\r\n                                }\r\n                                else {\r\n                                    if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                                        scope.isValueDateObj = true;\r\n                                    } else {\r\n                                        newVal = parseInt(newVal);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //scope.placeholder = scope.format;\r\n                            scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                            if (!isDateBlank) {\r\n                                if (!doesContainDateString) {\r\n                                    scope.dateModel = moment(newVal).format(dateFormate);\r\n                                }\r\n                            } else {\r\n                                scope.dateModel = \"\";\r\n                            }\r\n                            createDatePicker();\r\n                        });\r\n                        var unbindMin = scope.$watch('min', function (n) {\r\n                            createDatePicker();\r\n                        });\r\n                        var unbindMax = scope.$watch('max', function (n) {\r\n                            createDatePicker();\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                if (scope.datanumeric == 'true') {\r\n                    scope.spinner = typeof attrs.spinner == 'undefined' ? 'true' : scope.spinner;\r\n                    scope.step = typeof attrs.step == 'undefined' ? 1 : scope.step;\r\n                    $timeout(function () {\r\n                        angular.element('#' + scope.textfieldId).inputNumber(scope.spinner, scope.step);\r\n                    });\r\n                }\r\n\r\n\r\n                function destroyEverythingElse() {\r\n                    element.off(); // deregister all event handlers\r\n                    $('#' + scope.textfieldId).off();\r\n                    $('#' + scope.labelForTextfieldId).off();\r\n\r\n                    if (unbindValidate)\r\n                        unbindValidate();\r\n                    if (unbindFocus)\r\n                        unbindFocus();\r\n                    if (unbindOptions)\r\n                        unbindOptions();\r\n                    if (unbindNumber)\r\n                        unbindNumber();\r\n                    if (unbindDateModel)\r\n                        unbindDateModel();\r\n                    if (angular.isFunction(scope.onDestroy)) {\r\n                        scope.onDestroy({});\r\n                    }\r\n                    // Removing contents of HTML from DOM\r\n                    $('#' + scope.textfieldId).remove();\r\n                    $('#' + scope.labelForTextfieldId).remove();\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTextfield/smartTextfieldTemplate.html'\r\n        };\r\n    }\r\n\r\n\r\n    function smartTextField2Func($rootScope, $timeout, $translate, ScrollTo, RuleEngine, smartTextFieldService, smartTextField3Service, $filter) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                isTitleVisible: '@'\r\n            },\r\n            compile: function () {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        if (scope.type === undefined || scope.type === 'text' || scope.type === 'area' || scope.type === 'password') {\r\n                            smartTextField_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'date') {\r\n\r\n                            SmartTextField_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'autocomplete') {\r\n\r\n                            SmartTextField_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n\r\n                        }\r\n                        else if (scope.type == 'number') {\r\n                            smartTextField_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate);\r\n                        }\r\n                        else {\r\n                            function SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n                                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n                                scope.count = 0;\r\n                                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                                var number, rulesValidationEvent;\r\n                                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n                                textfieldId++;\r\n                                scope.textfieldId = 'tf_' + textfieldId;\r\n                                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                                if (attrs.validateOn) {\r\n                                    rulesValidationEvent = attrs.validateOn;\r\n                                }\r\n                                else {\r\n                                    rulesValidationEvent = 'blur';\r\n                                }\r\n\r\n\r\n\r\n                                scope.onTextChange = function (e) {\r\n                                    scope.ngModel = e.target.value;\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    // if (rulesValidationEvent == 'change') {\r\n                                    smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                                    //  }\r\n                                    scope.onChange({ $event: e });\r\n                                };\r\n\r\n                                scope.ngBlur = function (e) {\r\n\r\n                                    scope.focus = false;\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n                                    scope.onBlur({ $event: e });\r\n                                }\r\n\r\n                                scope.ngKeyPress = function (e) {\r\n                                    scope.onKeyPress({ $event: e });\r\n                                };\r\n\r\n\r\n\r\n\r\n\r\n                                /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                                //try {\r\n                                //    ngModelCtrl.$render = function () {\r\n                                //        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                //        smartTextFieldService.updateTextValue(scope, element);\r\n                                //    };\r\n                                //}\r\n                                //catch (e) { }\r\n\r\n                                scope.prevModel = scope.ngModel;\r\n                                var updateView = function () {\r\n                                    try {\r\n                                        if (scope.ngModel !== scope.prevModel) {\r\n                                            $timeout(function () {\r\n                                                scope.prevModel = scope.ngModel;\r\n                                            });\r\n\r\n                                        }\r\n                                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                        smartTextFieldService.updateTextValue(scope, element);\r\n                                    }\r\n                                    catch (e) { }\r\n                                };\r\n\r\n\r\n\r\n                                var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                                });\r\n\r\n                                var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n                                    if (newVal[4] != oldVal[4]) {\r\n                                        smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    }\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n                                });\r\n\r\n                                scope.hideShowField = function () {\r\n                                    scope.isVisible = !scope.isVisible;\r\n                                };\r\n\r\n\r\n\r\n                                smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n\r\n                                scope.$on('$destroy', function () {\r\n                                    unbindModelWatcher();\r\n                                    unbindAttributesWatcher();\r\n                                });\r\n                            }\r\n                            SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        //$timeout(function () {\r\n                        //    element.find(\"input\").trigger('blur'); // initiate with initial value\r\n                        //});\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function smartTextField3Func($rootScope, $timeout, $translate, ScrollTo, RuleEngine, smartTextFieldService, smartTextField3Service, $filter, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onSearch: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                isSearch: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                regionalFormat: '@',    //  regional date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                isTitleVisible: '@',\r\n                clienterror: '=?',\r\n                infinite: '@'\r\n            },\r\n            compile: function () {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        if (scope.type === undefined || scope.type === 'text' || scope.type === 'area' || scope.type === 'password') {\r\n                            smartTextField3_TextFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'date') {\r\n\r\n                            SmartTextField3_DateFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'autocomplete') {\r\n\r\n                            SmartTextField3_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate, $window);\r\n\r\n                        }\r\n                        else if (scope.type == 'number') {\r\n                            smartTextField3_NumFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $filter, $translate);\r\n                        }\r\n                        else {\r\n                            function SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate) {\r\n                                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n                                scope.count = 0;\r\n                                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                                var number, rulesValidationEvent;\r\n                                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n                                textfieldId++;\r\n                                scope.textfieldId = 'tf_' + textfieldId;\r\n                                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                                if (attrs.validateOn) {\r\n                                    rulesValidationEvent = attrs.validateOn;\r\n                                }\r\n                                else {\r\n                                    rulesValidationEvent = 'blur';\r\n                                }\r\n\r\n\r\n\r\n                                scope.onTextChange = function (e) {\r\n                                    scope.ngModel = e.target.value;\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    // if (rulesValidationEvent == 'change') {\r\n                                    smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n                                    //  }\r\n                                    scope.onChange({ $event: e });\r\n                                };\r\n\r\n                                scope.ngBlur = function (e) {\r\n\r\n                                    scope.focus = false;\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n                                    scope.onBlur({ $event: e });\r\n                                }\r\n\r\n                                scope.ngKeyPress = function (e) {\r\n                                    scope.onKeyPress({ $event: e });\r\n                                };\r\n\r\n\r\n\r\n\r\n\r\n                                /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                                //try {\r\n                                //    ngModelCtrl.$render = function () {\r\n                                //        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                //        smartTextField3Service.updateTextValue(scope, element);\r\n                                //    };\r\n                                //}\r\n                                //catch (e) { }\r\n\r\n                                scope.prevModel = scope.ngModel;\r\n                                var updateView = function () {\r\n                                    try {\r\n                                        if (scope.ngModel !== scope.prevModel) {\r\n                                            $timeout(function () {\r\n                                                scope.prevModel = scope.ngModel;\r\n                                            });\r\n\r\n                                        }\r\n                                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                        smartTextField3Service.updateTextValue(scope, element);\r\n                                    }\r\n                                    catch (e) { }\r\n                                };\r\n\r\n\r\n\r\n                                var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                                    scope.isActive = smartTextField3Service.checkIfActive(scope, element);\r\n\r\n\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n                                });\r\n\r\n                                var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n                                    if (newVal[4] != oldVal[4]) {\r\n                                        smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    }\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n\r\n\r\n                                });\r\n\r\n                                scope.hideShowField = function () {\r\n                                    scope.isVisible = !scope.isVisible;\r\n                                };\r\n\r\n\r\n\r\n                                smartTextField3Service.buildTemplate(scope, element, scope.onTextChange);\r\n\r\n                                scope.$on('$destroy', function () {\r\n                                    unbindModelWatcher();\r\n                                    unbindAttributesWatcher();\r\n                                });\r\n                            }\r\n                            SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        //$timeout(function () {\r\n                        //    element.find(\"input\").trigger('blur'); // initiate with initial value\r\n                        //});\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function smartTextField_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n\r\n            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            scope.focus = false;\r\n            scope.onBlur({ $event: e });\r\n            $timeout(function () {\r\n                //updateView();\r\n\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            if (attrs.onKeyPress) {\r\n                scope.onKeyPress({ $event: e });\r\n            }\r\n            if (attrs.onEnter && e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            scope.validate = false;\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n             scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            scope.onFocus({ $event: e });\r\n        };\r\n\r\n        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n        var updateView = function () {\r\n            try {\r\n                if (smartTextFieldService.modal.getModal(scope, ngModelCtrl) !== scope.prevModel) {\r\n\r\n                    /* Removed $timeout due to ngBlur gets fired before scope.ngModel */\r\n                    $timeout(function () {\r\n                        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n\r\n                        if (typeof scope.ngModel === 'function') {\r\n                            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                        }\r\n                    });\r\n                    //scope.$apply();\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n        var unbindModelWatcher;\r\n        if (typeof scope.ngModel != 'function') {\r\n            unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                if(scope.typing === true) scope.typing = false;\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            });\r\n        } else {\r\n            unbindModelWatcher = scope.$watch(function () { return scope.ngModel(); }, function (newVal, oldVal) {\r\n                if (newVal != oldVal) {\r\n                     scope.typing = false;\r\n                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                    smartTextFieldService.setActiveClass(scope, element);\r\n                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                }\r\n\r\n            }, true);\r\n        }\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n        unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            }\r\n            if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            if (newVal[1] || newVal[1] == \"true\") {\r\n                element.find('input').focus();\r\n            }\r\n        });\r\n\r\n        //function bindOtherWatcher() {\r\n        //    if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n        //        //if (!angular.isDefined(unbindOtherWatcher)) {\r\n\r\n        //        //}\r\n        //    }\r\n        //    else {\r\n        //        if (angular.isDefined(unbindOtherWatcher)) {\r\n        //            unbindOtherWatcher();\r\n        //        }\r\n        //    }\r\n        //}\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        updateView();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //bindOtherWatcher();\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        if (scope.timePicker === 'true') {\r\n            scope.timePicker = true;\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? moment.localeData()._longDateFormat.L : scope.placeholder;\r\n        if (scope.timePicker == true) {\r\n            scope.placeholder = moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n        }\r\n\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        scope.datetimePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker === true ? true : false);\r\n        scope.format = (scope.format ? scope.format : scope.datetimePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        scope.applyClientZone = false;\r\n        scope.isValueDateObj = false;\r\n        scope.doesContainDateString = false;\r\n        scope.dateFormat = scope.format;\r\n        scope.isDateBlank = false;\r\n\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            scope.dateFormat = moment.localeData().longDateFormat('L');\r\n            if (scope.timePicker == true) {\r\n                scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n            }\r\n            scope.format = scope.dateFormat;\r\n        }\r\n        scope.convertIntoUTC = false;\r\n        if (typeof convertIntoUTC != 'undefined') {\r\n            scope.convertIntoUTC = convertIntoUTC;\r\n        }\r\n\r\n        //if (angular.isDefined(scope.$parent.$parent.property)) {\r\n        //    //this property (applyClientZone) comes from Config.js\r\n        //    if (angular.isDefined(scope.$parent.$parent.property.applyClientZone)) {\r\n        //        scope.applyClientZone = scope.$parent.$parent.property.applyClientZone;\r\n        //    }\r\n        //}\r\n\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            // smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            if (scope.isDateBlank) {\r\n                var targetedEle = document.activeElement;\r\n                if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                    //  scope.ngModel = null;\r\n                    scope.dateModel = null;\r\n                }\r\n                if (angular.isFunction(scope.onDateChange)) {\r\n                    scope.onDateChange({\r\n                        $date: scope.ngModel\r\n                    });\r\n                }\r\n            }\r\n\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            if (e.which != 32) {\r\n                var currentInputValue = $('#' + scope.textfieldId).val();\r\n                if (currentInputValue == \"\") {\r\n                    scope.ngModel = null;\r\n                    scope.dateModel = \"\"\r\n                    scope.isDateBlank = true;\r\n                    if (angular.isFunction(scope.onDateChange)) {\r\n                        scope.onDateChange({\r\n                            $date: scope.ngModel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyUp') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            if (rulesValidationEvent == 'keyDown') {\r\n                scope.validateRules();\r\n            }\r\n            ////to control number of down arrow,up arrow signs on number fields\r\n            //if (e.keyCode == 38 || e.keyCode == 40)\r\n            //    e.preventDefault();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyPress = function (e) {\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateDateValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        //var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n\r\n        //});\r\n\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindMin;\r\n        var unbindMax\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMin)) {\r\n                    unbindMin = scope.$watch('min', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMax)) {\r\n                    unbindMax = scope.$watch('max', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n                if (angular.isDefined(unbindMin)) {\r\n                    unbindMin();\r\n                }\r\n                if (angular.isDefined(unbindMax)) {\r\n                    unbindMax();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        smartTextFieldService.updateDateClass(scope, element);\r\n        smartTextFieldService.assignDateEvents(scope, element);\r\n        bindOtherWatcher();\r\n        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n            if (newVal) {\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                if (rulesValidationEvent == 'change') {\r\n                    scope.validateRules();\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n        });\r\n        var timeOffset = 20; // this is a fixed number in-case of timeZoneOffset is not defined.\r\n        scope.updatingDateModel = function (dateObj) {\r\n            if (typeof timeZoneOffset != 'undefined') {\r\n                timeOffset = timeZoneOffset;\r\n            }\r\n\r\n            if (timeOffset == 20) {\r\n                var adjustTimeZone = 0;\r\n                if (moment().zone() == -720) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n                scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n            }\r\n            else {\r\n                var adjustTimeZone = 0;\r\n                if (timeOffset == -12) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n\r\n                if (typeof dateObj == 'object') {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).add(timeOffset * 60, 'minute').add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                } else {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).utc().zone(timeOffset * -1).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    //scope.dateModel = moment(dateObj).zone(timeOffset * -1).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                }\r\n            }\r\n\r\n        }\r\n        // should be modified to discard UTC Convertion \r\n        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n            if (scope.timePicker === 'true') {\r\n                scope.timePicker = true;\r\n            }\r\n            if (!scope.dateModifiedbyUser) {\r\n                scope.dateFormat = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                    if (scope.timePicker == true) {\r\n                        scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                    }\r\n                    scope.format = scope.dateFormat;\r\n                }\r\n\r\n                scope.isDateBlank = false;\r\n                scope.doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                if (newVal == \"\" || newVal == null || typeof newVal == 'function') {\r\n                    newVal = Date.now();\r\n                    scope.isDateBlank = true;\r\n                    scope.isValueDateObj = false;\r\n                } else {\r\n                    if (scope.doesContainDateString) {\r\n                        var dateStr = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                        var tmpModel = dateStr;\r\n                        if (dateStr.indexOf('Date') <= -1) {\r\n                            tmpModel = tmpModel.split('+');\r\n                            tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                        }\r\n                        scope.updatingDateModel(tmpModel);\r\n                        //scope.dateModel = moment(tmpModel).format(scope.dateFormat);\r\n                        //smartTextFieldService.updateDateValue(scope, element);\r\n                    }\r\n                    else {\r\n                        if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                            scope.isValueDateObj = true;\r\n                        } else if (Object.prototype.toString.call(newVal) === '[object String]' && newVal.indexOf('T') > 0) {\r\n                            //scope.isValueDateObj = true;\r\n                        } else {\r\n                            newVal = parseInt(newVal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.placeholder = scope.format;\r\n                //scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                if (!scope.isDateBlank) {\r\n                    if (!scope.doesContainDateString) {\r\n                        //if (scope.applyClientZone) {\r\n                        //    scope.dateModel = moment(newVal).parseZone().format(scope.dateFormat);\r\n                        //}\r\n                        //else {\r\n                        scope.updatingDateModel(newVal);\r\n                        //scope.dateModel = moment(newVal).format(scope.dateFormat);\r\n                        //}\r\n                    }\r\n                } else {\r\n                    scope.dateModel = \"\";\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n                smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n            }\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n            scope.dateModifiedbyUser = false;\r\n\r\n            //smartTextFieldService.updateDateValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n        });\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            //unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindNgModel();\r\n            unbindDateModel();\r\n            if (angular.isDefined(unbindMin)) {\r\n                unbindMin();\r\n            }\r\n            if (angular.isDefined(unbindMax)) {\r\n                unbindMax();\r\n            }\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            console.log(scope.displayModel);\r\n\r\n            //updateView();\r\n\r\n            //console.log(scope.displayModel);\r\n            scope.onChange({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: scope.displayModel\r\n                }\r\n            });\r\n\r\n            ////scope.ngModel = e.target.value;\r\n            //smartTextFieldService.updateAutocompleteValue (scope, element);\r\n            //smartTextFieldService.setActiveClass(scope, element);\r\n            //// if (rulesValidationEvent == 'change') {\r\n            //smartTextFieldService.validateRules(scope, ngModelCtrl, element);\r\n            //smartTextFieldService.updateTextFieldClass(scope, element);\r\n            ////  }\r\n            ////scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n\r\n\r\n            if (scope.ngModel && scope.displayformat) {\r\n                var splittedDisplayFormat = [];\r\n                if (scope.displayformat.indexOf(\":\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split(':');\r\n                else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                else\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                var result = \"\";\r\n                for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                    result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                    if (i < splittedDisplayFormat.length - 1) {\r\n                        if (scope.displayformat.indexOf(\"-\") > 0)\r\n                            result += '-';\r\n                        else if (scope.displayformat.indexOf(\":\") > 0)\r\n                            result += ':';\r\n                    }\r\n                }\r\n\r\n                // P2P-16866\r\n                if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n\r\n                    if (e.target.value.trim() == '' || result !== scope.displayModel) {\r\n                        scope.displayModel = '';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            scope.focus = false;\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            $timeout(function () {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            });\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n            try {\r\n                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                }\r\n            }\r\n            catch (e) { }\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            ////var val = e.target.value;\r\n\r\n            //scope.displayModel = e.target.value;\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n\r\n        };\r\n        scope.elmVal = null;\r\n        scope.ngKeyUp = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            //if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n            //    scope.elmVal = e.target.value;\r\n            //    scope.onChange({\r\n            //        $event: {\r\n            //            data: element.find('#' + scope.textfieldId),\r\n            //            displayModel: e.target.value\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n        scope.search = function (e) {\r\n            if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n                scope.elmVal = e.target.value;\r\n                scope.onChange({\r\n                    $event: {\r\n                        data: element.find('#' + scope.textfieldId),\r\n                        displayModel: e.target.value\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            var Obj = elm.devbridgeAutocomplete();\r\n            if (elm.val() == '' && Obj) {\r\n                Obj.clear();\r\n                scope.elmVal = '';\r\n            }\r\n            scope.onFocus({ $event: e });\r\n        }\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateAutocompleteValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.displayModel = smartTextFieldService.getDisplayData(newVal, scope);\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['focus', 'isRemovable'], function (newVal, oldVal) {\r\n                        smartTextFieldService.setActiveClass(scope, element);\r\n                        smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var unbindValidationWatcher = scope.$watchGroup(['isMandatory', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[1] != oldVal[1] || newVal[2] != oldVal[2]) {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // key to be used to bind options\r\n        var filterKeys;\r\n        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n        }\r\n        else {\r\n            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n        }\r\n        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n        scope.ndisplayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n        /*\r\n         * Check if the options are updated\r\n         */\r\n        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n            try {\r\n                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                        filterKeys: filterKeys,\r\n                        optionFormat: optionFormat,\r\n                        displayFormat: scope.ndisplayFormat,\r\n                        lookup: smartTextFieldService.getFormattedData(newOptions, scope),\r\n                        width: scope.width,\r\n                        showNoSuggestionNotice: showNoSuggestion,\r\n                        noSuggestionNotice: noSuggestionNotice,\r\n                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                        onSelect: function (suggestion) {\r\n                            angular.element(document).trigger('click');\r\n                            scope.$evalAsync(function () {\r\n                                scope.displayModel = smartTextFieldService.getDisplayData(suggestion, scope);\r\n                                scope.ngModel = suggestion;\r\n                                updateView();\r\n                                $timeout(function () {\r\n                                    scope.onSelect({\r\n                                        $event: {\r\n                                            data: suggestion\r\n                                        }\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(smartTextFieldService.getFormattedData(newOptions, scope));\r\n                }\r\n            }\r\n            catch (e) { }\r\n        });\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        smartTextFieldService.assignAutocompleteEvents(scope, element);\r\n        bindOtherWatcher();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindOptions();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n            unbindValidationWatcher();\r\n        });\r\n    }\r\n\r\n    function smartTextField_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            // if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    scope.ngModel = parseFloat(e.target.value);\r\n            //}\r\n            updateView();\r\n            //scope.ngModel = parseFloat(e.target.value);\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    var num = e.target.value;\r\n            //    if (num.trim() != '') {\r\n            //        scope.ngModel = parseFloat(num);\r\n            //    }\r\n            //    else {\r\n            //        scope.ngModel = null;\r\n            //    }\r\n            //}\r\n            updateView();\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            if (scope.type == 'number' || attrs.datanumeric) {\r\n                //to control number of +,-, signs and alphabets on number fields\r\n                var charCode = e.charCode || e.keyCode,\r\n                textValue = e.currentTarget.value,\r\n                decimalDigit = [],\r\n                cc = String.fromCharCode(charCode),\r\n                escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                    e.preventDefault();\r\n                }\r\n                // Restrict the 2 dots entering\r\n                if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                if (textValue) {\r\n                    decimalDigit = textValue.toString().split('.');\r\n                }\r\n                // Restrict the decimal value from entering\r\n                if (attrs.decimalprecision) {\r\n                    if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                    if (decimalDigit.length == 2) {\r\n                        if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.min != undefined || scope.min != null) {\r\n                    if (scope.min >= 0 && e.charCode == 45) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n            // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n            if (angular.isDefined(attrs.maxlength) && e.target.value.length == attrs.maxlength && e.charCode !== 0) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element);\r\n                //smartTextFieldService.updateTextValue(scope, element);\r\n                if (scope.ngModel != null) {\r\n                    var min = 0;\r\n                    var max = 0;\r\n                    if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                        if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                            min = 0;\r\n                            max = 0;\r\n                        }\r\n                        else {\r\n                            min = MinPrecessionValue;//global default\r\n                            max = MaxPrecessionValue;//global default\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length == 2) {\r\n                                min = splitPrecision[0];\r\n                                max = splitPrecision[1];\r\n                            }\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (scope.minmaxprecision) {\r\n                            min = JSON.parse(scope.minmaxprecision)[0];\r\n                            max = JSON.parse(scope.minmaxprecision)[1];\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                    element.find('#' + scope.textfieldId).val($filter('minPrecisionHandler')(scope.ngModel, min, max, false))\r\n                    if (!scope.ngModel) {\r\n                        var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n                        if (num != '') {\r\n                            scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        else {\r\n                            scope.ngModel = null;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.ngModel !== scope.prevModel) {\r\n                        $timeout(function () {\r\n                            scope.prevModel = scope.ngModel;\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            updateView();\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                    mDec: 0,\r\n                    aPad: false,\r\n                    aSep: thousandSep,\r\n                    aDec: decimalSep,\r\n                    vMin: Number.NEGATIVE_INFINITY,\r\n                    vMax: Number.POSITIVE_INFINITY\r\n                });\r\n            } else {\r\n                element.find('#' + scope.textfieldId).autoNumeric();\r\n            }\r\n        } else {\r\n            var thousandSep = ',';\r\n            var decimalSep = '.';\r\n            var highPrecisionLimit = 0;\r\n            if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                if (splitPrecision.length == 2) {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    highPrecisionLimit = splitPrecision[1];\r\n                }\r\n            }\r\n            element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                mDec: highPrecisionLimit,\r\n                aPad: false,\r\n                aSep: thousandSep,\r\n                aDec: decimalSep,\r\n                vMin: Number.NEGATIVE_INFINITY,\r\n                vMax: Number.POSITIVE_INFINITY,\r\n            });\r\n        }\r\n        bindOtherWatcher();\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    function smartTextField3_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n        scope.typing = false;\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n        if (scope.type === 'area') {\r\n            $timeout(function () {\r\n                angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n            });\r\n        }\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n\r\n            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            $timeout(function () {\r\n                //updateView();\r\n                scope.focus = false;\r\n                scope.typing = false;\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n                scope.onBlur({ $event: e });\r\n                if (scope.type == \"area\" && scope.ngModel == \"\") {\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"hidden\");\r\n                }\r\n            });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            if (attrs.onKeyPress) {\r\n                scope.onKeyPress({ $event: e });\r\n            }\r\n            if (attrs.onEnter && e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n        var viewTimeout;\r\n        scope.ngKeyUp = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            clearInterval(viewTimeout);\r\n            viewTimeout=setInterval(function(){\r\n\t\t\t\tclearInterval(viewTimeout);\r\n\t\t\t\tupdateView();\r\n\t\t\t},1500);\r\n            scope.onKeyUp({ $event: e });\r\n            if (scope.type == \"area\") {\r\n                if ($(angular.element('#' + scope.textfieldId)).height() < 64)\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"hidden\");\r\n                else\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"auto\");\r\n            }\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            scope.onFocus({ $event: e });\r\n        };\r\n\r\n        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n        var updateView = function () {\r\n            try {\r\n                if (smartTextFieldService.modal.getModal(scope, ngModelCtrl) !== scope.prevModel) {\r\n\r\n                    /* Removed $timeout due to ngBlur gets fired before scope.ngModel */\r\n                    $timeout(function () {\r\n                        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n\r\n                        if (typeof scope.ngModel === 'function') {\r\n                            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                        }\r\n                    });\r\n                    //scope.$apply();\r\n                }\r\n                /* commented next line for PPST2-2193 (same text not searched again) */\r\n                else if(scope.isSearch == \"true\") {\r\n                    ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n        var unbindModelWatcher;\r\n        if (typeof scope.ngModel != 'function') {\r\n            unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                if (scope.type === 'area') {\r\n                    $timeout(function () {\r\n                        angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            unbindModelWatcher = scope.$watch(function () { return scope.ngModel(); }, function (newVal, oldVal) {\r\n                if (newVal != oldVal) {\r\n                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                    smartTextFieldService.setActiveClass(scope, element);\r\n                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    if (scope.type === 'area') {\r\n                        $timeout(function () {\r\n                            angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }, true);\r\n        }\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                if(scope.type === 'area'){\r\n                    smartTextFieldService.buildTemplate(scope, element, scope.onTextChange,attrs);\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                }\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n        unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            }\r\n            if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            if (newVal[1] || newVal[1] == \"true\") {\r\n                element.find('input').focus();\r\n            }\r\n        });\r\n\r\n        //function bindOtherWatcher() {\r\n        //    if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n        //        //if (!angular.isDefined(unbindOtherWatcher)) {\r\n\r\n        //        //}\r\n        //    }\r\n        //    else {\r\n        //        if (angular.isDefined(unbindOtherWatcher)) {\r\n        //            unbindOtherWatcher();\r\n        //        }\r\n        //    }\r\n        //}\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        updateView();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //bindOtherWatcher();\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.triggerSearchEvent = function (e) {\r\n            scope.elmVal = e.target.value;\r\n            scope.onSearch({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: e.target.value\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        smartTextFieldService.assignSearchEvents(scope, element);\r\n\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField3_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        if (scope.timePicker === 'true') {\r\n            scope.timePicker = true;\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? moment.localeData()._longDateFormat.L : scope.placeholder;\r\n        if (scope.timePicker == true) {\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                scope.placeholder = scope.regionalFormat ? scope.regionalFormat : moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n            }\r\n            else {\r\n                scope.placeholder = moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n            }\r\n        }\r\n\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        scope.datetimePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker === true ? true : false);\r\n        scope.format = (scope.format ? scope.format : scope.datetimePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        scope.applyClientZone = false;\r\n        scope.isValueDateObj = false;\r\n        scope.doesContainDateString = false;\r\n        scope.dateFormat = scope.format;\r\n        scope.isDateBlank = false;\r\n\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.regionalFormat) {\r\n                scope.dateFormat = scope.regionalFormat;\r\n            }\r\n            else {\r\n                if (scope.timePicker == true) {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                }\r\n                else {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                }\r\n            }\r\n            scope.format = scope.dateFormat;\r\n        }\r\n\r\n        scope.convertIntoUTC = false;\r\n        if (typeof convertIntoUTC != 'undefined') {\r\n            scope.convertIntoUTC = convertIntoUTC;\r\n        }\r\n\r\n        //if (angular.isDefined(scope.$parent.$parent.property)) {\r\n        //    //this property (applyClientZone) comes from Config.js\r\n        //    if (angular.isDefined(scope.$parent.$parent.property.applyClientZone)) {\r\n        //        scope.applyClientZone = scope.$parent.$parent.property.applyClientZone;\r\n        //    }\r\n        //}\r\n\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            // smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            if (scope.isDateBlank) {\r\n                var targetedEle = document.activeElement;\r\n                if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                    //  scope.ngModel = null;\r\n                    scope.dateModel = null;\r\n                }\r\n                if (angular.isFunction(scope.onDateChange)) {\r\n                    scope.onDateChange({\r\n                        $date: scope.ngModel\r\n                    });\r\n                }\r\n            }\r\n\r\n            var selectedDate = smartTextFieldService.getSelectedDate();\r\n            if (selectedDate == '') {\r\n                $('#' + scope.textfieldId).val('');\r\n            }\r\n            if ($('#' + scope.textfieldId).find('input').daterangepicker())\r\n                $('#' + scope.textfieldId).find('input').daterangepicker().daterangepicker();\r\n            if (angular.isDefined(selectedDate) && scope.datetimePicker && selectedDate.indexOf('Date(') <= -1)\r\n                $('#' + scope.textfieldId).val(smartTextFieldService.getPreviousDate());\r\n            smartTextFieldService.setSelectedDate(undefined);\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            if (e.which != 32) {\r\n                var currentInputValue = $('#' + scope.textfieldId).val();\r\n                smartTextFieldService.setSelectedDate($('#' + scope.textfieldId).val());\r\n                if (currentInputValue == \"\") {\r\n                    scope.ngModel = null;\r\n                    scope.dateModel = \"\"\r\n                    scope.isDateBlank = true;\r\n                    if (angular.isFunction(scope.onDateChange)) {\r\n                        scope.onDateChange({\r\n                            $date: scope.ngModel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyUp') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            if (rulesValidationEvent == 'keyDown') {\r\n                scope.validateRules();\r\n            }\r\n            ////to control number of down arrow,up arrow signs on number fields\r\n            //if (e.keyCode == 38 || e.keyCode == 40)\r\n            //    e.preventDefault();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyPress = function (e) {\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateDateValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        //var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n\r\n        //});\r\n\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindMin;\r\n        var unbindMax\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMin)) {\r\n                    unbindMin = scope.$watch('min', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMax)) {\r\n                    unbindMax = scope.$watch('max', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n                if (angular.isDefined(unbindMin)) {\r\n                    unbindMin();\r\n                }\r\n                if (angular.isDefined(unbindMax)) {\r\n                    unbindMax();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        smartTextFieldService.updateDateClass(scope, element);\r\n        smartTextFieldService.assignDateEvents(scope, element);\r\n        bindOtherWatcher();\r\n        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n            if (newVal) {\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                if (rulesValidationEvent == 'change') {\r\n                    scope.validateRules();\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n        });\r\n        var timeOffset = 20; // this is a fixed number in-case of timeZoneOffset is not defined.\r\n        scope.updatingDateModel = function (dateObj) {\r\n            if (typeof timeZoneOffset != 'undefined') {\r\n                timeOffset = timeZoneOffset;\r\n            }\r\n\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable && scope.regionalFormat) {\r\n                timeOffset = 0;\r\n            }\r\n\r\n            if (timeOffset == 20) {\r\n                var adjustTimeZone = 0;\r\n                if (moment().zone() == -720) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n                scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n            }\r\n            else {\r\n                var adjustTimeZone = 0;\r\n                if (timeOffset == -12) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n\r\n                if (typeof dateObj == 'object') {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).add(timeOffset * 60, 'minute').add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                } else {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).utc().zone(timeOffset * -1).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    //scope.dateModel = moment(dateObj).zone(timeOffset * -1).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                }\r\n            }\r\n\r\n        }\r\n        // should be modified to discard UTC Convertion \r\n        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n            if (scope.timePicker === 'true') {\r\n                scope.timePicker = true;\r\n            }\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable && scope.regionalFormat) {\r\n                $timeout(function () {\r\n                    scope.dateModel = element.find('input').val();\r\n                }, 250);\r\n            }\r\n            if (!scope.dateModifiedbyUser) {\r\n                if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                    if (scope.regionalFormat) {\r\n                        scope.dateFormat = scope.regionalFormat;\r\n                    }\r\n                    else {\r\n                        if (scope.timePicker == true) {\r\n                            scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                        }\r\n                        else {\r\n                            scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                        }\r\n                    }\r\n                    scope.dateFormat = scope.dateFormat.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                    scope.format = scope.dateFormat;\r\n                }\r\n                else {\r\n                    scope.dateFormat = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                }\r\n\r\n                scope.isDateBlank = false;\r\n                scope.doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                if (newVal == \"\" || newVal == null || typeof newVal == 'function') {\r\n                    newVal = Date.now();\r\n                    scope.isDateBlank = true;\r\n                    scope.isValueDateObj = false;\r\n                } else {\r\n                    if (scope.doesContainDateString) {\r\n                        var dateStr = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                        var tmpModel = dateStr;\r\n                        if (dateStr.indexOf('Date') <= -1) {\r\n                            tmpModel = tmpModel.split('+');\r\n                            tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                        }\r\n                        scope.updatingDateModel(tmpModel);\r\n                        //scope.dateModel = moment(tmpModel).format(scope.dateFormat);\r\n                        //smartTextFieldService.updateDateValue(scope, element);\r\n                    }\r\n                    else {\r\n                        if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                            scope.isValueDateObj = true;\r\n                        } else if (Object.prototype.toString.call(newVal) === '[object String]' && newVal.indexOf('T') > 0) {\r\n                            //scope.isValueDateObj = true;\r\n                        } else {\r\n                            newVal = parseInt(newVal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.placeholder = scope.format;\r\n                //scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                if (!scope.isDateBlank) {\r\n                    if (!scope.doesContainDateString) {\r\n                        //if (scope.applyClientZone) {\r\n                        //    scope.dateModel = moment(newVal).parseZone().format(scope.dateFormat);\r\n                        //}\r\n                        //else {\r\n                        scope.updatingDateModel(newVal);\r\n                        //scope.dateModel = moment(newVal).format(scope.dateFormat);\r\n                        //}\r\n                    }\r\n                } else {\r\n                    scope.dateModel = \"\";\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n                smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n            }\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n            scope.dateModifiedbyUser = false;\r\n\r\n            //smartTextFieldService.updateDateValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n        });\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            //unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindNgModel();\r\n            unbindDateModel();\r\n            if (angular.isDefined(unbindMin)) {\r\n                unbindMin();\r\n            }\r\n            if (angular.isDefined(unbindMax)) {\r\n                unbindMax();\r\n            }\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField3_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate, $window) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            console.log(scope.displayModel);\r\n\r\n            //updateView();\r\n\r\n            //console.log(scope.displayModel);\r\n            scope.onChange({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: scope.displayModel\r\n                }\r\n            });\r\n\r\n            ////scope.ngModel = e.target.value;\r\n            //smartTextFieldService.updateAutocompleteValue (scope, element);\r\n            //smartTextFieldService.setActiveClass(scope, element);\r\n            //// if (rulesValidationEvent == 'change') {\r\n            //smartTextFieldService.validateRules(scope, ngModelCtrl, element);\r\n            //smartTextFieldService.updateTextFieldClass(scope, element);\r\n            ////  }\r\n            ////scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n\r\n\r\n            if (scope.ngModel && scope.displayformat) {\r\n                var splittedDisplayFormat = [];\r\n                if (scope.displayformat.indexOf(\":\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split(':');\r\n                else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                else\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                var result = \"\";\r\n                for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                    result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                    if (i < splittedDisplayFormat.length - 1) {\r\n                        if (scope.displayformat.indexOf(\"-\") > 0)\r\n                            result += '-';\r\n                        else if (scope.displayformat.indexOf(\":\") > 0)\r\n                            result += ':';\r\n                    }\r\n                }\r\n\r\n                // P2P-16866\r\n                if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n\r\n                    if (e.target.value.trim() == '' || result !== scope.displayModel) {\r\n                        scope.displayModel = '';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            scope.focus = false;\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            $timeout(function () {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            });\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n            try {\r\n                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                }\r\n            }\r\n            catch (e) { }\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            ////var val = e.target.value;\r\n\r\n            //scope.displayModel = e.target.value;\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n\r\n        };\r\n        scope.elmVal = null;\r\n        scope.ngKeyUp = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            //if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n            //    scope.elmVal = e.target.value;\r\n            //    scope.onChange({\r\n            //        $event: {\r\n            //            data: element.find('#' + scope.textfieldId),\r\n            //            displayModel: e.target.value\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n        scope.search = function (e) {\r\n            if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n                scope.elmVal = e.target.value;\r\n                scope.onChange({\r\n                    $event: {\r\n                        data: element.find('#' + scope.textfieldId),\r\n                        displayModel: e.target.value\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            var Obj = elm.devbridgeAutocomplete();\r\n            if (elm.val() == '' && Obj) {\r\n                Obj.clear();\r\n                scope.elmVal = '';\r\n            }\r\n            scope.onFocus({ $event: e });\r\n        }\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateAutocompleteValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.displayModel = smartTextFieldService.getDisplayData(newVal, scope);\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);     \r\n\r\n\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['focus', 'isRemovable'], function (newVal, oldVal) {\r\n                        smartTextFieldService.setActiveClass(scope, element);\r\n                        smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var unbindValidationWatcher = scope.$watchGroup(['isMandatory', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[1] != oldVal[1] || newVal[2] != oldVal[2]) {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // key to be used to bind options\r\n        var filterKeys;\r\n        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n        }\r\n        else {\r\n            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n        }\r\n        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n        scope.ndisplayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n        /*\r\n         * Check if the options are updated\r\n         */\r\n        var autoCompleteField;\r\n        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n            try {\r\n                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                    autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                        filterKeys: filterKeys,\r\n                        optionFormat: optionFormat,\r\n                        displayFormat: scope.ndisplayFormat,\r\n                        lookup: smartTextFieldService.getFormattedData(newOptions, scope),\r\n                        width: scope.width,\r\n                        showNoSuggestionNotice: showNoSuggestion,\r\n                        noSuggestionNotice: noSuggestionNotice,\r\n                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                        onSelect: function (suggestion) {\r\n                        angular.element(document).trigger('click');\r\n                        scope.$evalAsync(function () {\r\n                                scope.displayModel = smartTextFieldService.getDisplayData(suggestion, scope);\r\n                                scope.ngModel = suggestion;\r\n                            updateView();\r\n                            $timeout(function () {\r\n                                scope.onSelect({\r\n                                    $event: {\r\n                                            data: suggestion\r\n                                    }\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n                    }).devbridgeAutocomplete();\r\n                }\r\n                else {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(smartTextFieldService.getFormattedData(newOptions, scope));\r\n                }\r\n            }\r\n            catch (e) { }\r\n        });\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        smartTextFieldService.assignAutocompleteEvents(scope, element);\r\n        bindOtherWatcher();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //Closing the suggestions on scroll to prevent overlapping issue\r\n        angular.element($window).scroll(function (e) {\r\n            hideAutoOnScroll();\r\n        });\r\n\r\n        angular.element(\".modal, .modal-content\").scroll(function (e) {\r\n            hideAutoOnScroll();\r\n        });\r\n\r\n        function hideAutoOnScroll() {\r\n            if (autoCompleteField != undefined) {\r\n                if (autoCompleteField.visible) {\r\n                    autoCompleteField.hide();\r\n                }\r\n                            }\r\n            }\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindOptions();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n            unbindValidationWatcher();\r\n        });\r\n    }\r\n        \r\n    function smartTextField3_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n        scope.infinite = attrs.infinite == 'true' ? true : false;\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n        var preDecimalLength=\"\";\r\n\t\tif(typeof scope.max != \"undefined\"){\r\n\t\t\tfor(var i=0; i < scope.max; i++){\r\n\t\t\t\tpreDecimalLength+=\"9\";\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tpreDecimalLength=Number.POSITIVE_INFINITY;\r\n\t\t}\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            // if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    scope.ngModel = parseFloat(e.target.value);\r\n            //}\r\n            updateView();\r\n            //scope.ngModel = parseFloat(e.target.value);\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    var num = e.target.value;\r\n            //    if (num.trim() != '') {\r\n            //        scope.ngModel = parseFloat(num);\r\n            //    }\r\n            //    else {\r\n            //        scope.ngModel = null;\r\n            //    }\r\n            //}\r\n            updateView();\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            if (scope.type == 'number' || attrs.datanumeric) {\r\n                //to control number of +,-, signs and alphabets on number fields\r\n                var charCode = e.charCode || e.keyCode,\r\n                    textValue = e.currentTarget.value,\r\n                    decimalDigit = [],\r\n                    cc = String.fromCharCode(charCode),\r\n                    escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                    e.preventDefault();\r\n                }\r\n                // Restrict the 2 dots entering\r\n                if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                if (textValue) {\r\n                    decimalDigit = textValue.toString().split('.');\r\n                }\r\n                // Restrict the decimal value from entering\r\n                if (attrs.decimalprecision) {\r\n                    if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                    if (decimalDigit.length == 2) {\r\n                        if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.min != undefined || scope.min != null) {\r\n                    if (scope.min >= 0 && e.charCode == 45) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n            // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n            if (angular.isDefined(attrs.maxlength) && e.target.value.length == attrs.maxlength && e.charCode !== 0) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element);\r\n                //smartTextFieldService.updateTextValue(scope, element);\r\n                if (scope.ngModel != null) {\r\n                    var min = 0;\r\n                    var max = 0;\r\n                    if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                        if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                            min = 0;\r\n                            max = 0;\r\n                        }\r\n                        else {\r\n                            min = MinPrecessionValue;//global default\r\n                            max = MaxPrecessionValue;//global default\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length == 2) {\r\n                                min = splitPrecision[0];\r\n                                max = splitPrecision[1];\r\n                            }\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (scope.minmaxprecision) {\r\n                            min = JSON.parse(scope.minmaxprecision)[0];\r\n                            max = JSON.parse(scope.minmaxprecision)[1];\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                    var valueToModel;\r\n                    if (scope.ngModel === '') {\r\n                        valueToModel = scope.ngModel;\r\n                    } else {\r\n                        valueToModel = $filter('minPrecisionHandler')(scope.ngModel, min, max, false);\r\n                    }\r\n                    element.find('#' + scope.textfieldId).val(valueToModel);\r\n                    if (!scope.ngModel) {\r\n                        var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n                        if (num != '') {\r\n                            scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        else {\r\n                            scope.ngModel = null;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.ngModel !== scope.prevModel) {\r\n                        $timeout(function () {\r\n                            scope.prevModel = scope.ngModel;\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            updateView();\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                    mDec: 0,\r\n                    aPad: false,\r\n                    aSep: thousandSep,\r\n                    aDec: decimalSep,\r\n                    vMin: Number.NEGATIVE_INFINITY,\r\n                    vMax: preDecimalLength\r\n                });\r\n            } else {\r\n                //element.find('#' + scope.textfieldId).autoNumeric();\r\n                var highPrecisionLimit = 0;\r\n\t\t\t\tif (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n\t\t\t\t\tvar splitPrecision = JSON.parse(scope.minmaxprecision);\r\n\t\t\t\t\tif (splitPrecision.length == 2) {\r\n\t\t\t\t\t\tvar lowerPrecisionLimit = splitPrecision[0];\r\n\t\t\t\t\t\thighPrecisionLimit = splitPrecision[1];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telement.find('#' + scope.textfieldId).autoNumeric('init', {\r\n\t\t\t\t\tmDec: highPrecisionLimit,\r\n\t\t\t\t\taPad: false,\r\n\t\t\t\t\taSep: thousandSep,\r\n                    aDec: decimalSep,\r\n\t\t\t\t\tvMin: Number.NEGATIVE_INFINITY,\r\n\t\t\t\t\tvMax: preDecimalLength,\r\n\t\t\t\t});\r\n            }\r\n        }\r\n        else {\r\n            var thousandSep = ',';\r\n            var decimalSep = '.';\r\n            var highPrecisionLimit = 0;\r\n            if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                if (splitPrecision.length == 2) {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    highPrecisionLimit = splitPrecision[1];\r\n                }\r\n            }\r\n            element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                mDec: highPrecisionLimit,\r\n                aPad: false,\r\n                aSep: thousandSep,\r\n                aDec: decimalSep,\r\n                vMin: Number.NEGATIVE_INFINITY,\r\n                vMax: preDecimalLength,\r\n            });\r\n        }\r\n        bindOtherWatcher();\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    angular.module('SMART2').factory('smartTextFieldService', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', '$translate', '$timeout', smartTextFieldServiceFunc])\r\n    function smartTextFieldServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile, $translate, $timeout) {\r\n        var checkIfActive = function (scope) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                return true;\r\n            }\r\n            if (scope.type == 'number' && scope.ngModel !== 0 + '' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n            }\r\n            if (scope.type != 'number' && scope.type != 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n            }\r\n            if (scope.type == 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        var setActiveClass = function (scope, element, eventType) {\r\n            scope.active = checkIfActive(scope);\r\n            var el = element.find('#' + scope.textfieldId + '_label');\r\n\r\n            if ((typeof scope.active !== 'undefined' && scope.active == true) || (typeof scope.validate !== 'undefined' && scope.validate == true)) {\r\n                if (!el.hasClass('active')) {\r\n                    el.addClass('active');\r\n                }\r\n            } else {\r\n                if (el.hasClass('active')) {\r\n                    el.removeClass('active');\r\n                }\r\n            }\r\n        }\r\n\r\n        var updateTextFieldClass = function (scope, element) {\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            var elmContainer = $(element).find('#' + scope.textfieldId + '_container');\r\n            var lbl = $(element).find('#' + scope.textfieldId + '_label');\r\n            if (typeof scope.validate !== 'undefined' && scope.validate == true && typeof scope.errorMessage !== 'undefined' && scope.errorMessage) {\r\n                if (!elm.hasClass('invalid')) {\r\n                    elm.addClass('invalid');\r\n                    lbl.attr('data-error', $translate.instant(scope.errorMessage));\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n                }\r\n            }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'right') {\r\n                if (!elm.hasClass('right-align')) {\r\n                    elm.addClass('right-align');\r\n                }\r\n                if (!lbl.hasClass('right-align')) {\r\n                    lbl.addClass('right-align');\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('right-align')) {\r\n                    elm.removeClass('right-align');\r\n                }\r\n                if (lbl.hasClass('right-align')) {\r\n                    lbl.removeClass('right-align');\r\n                }\r\n            }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'left') {\r\n                if (!elm.hasClass('left-align')) {\r\n                    elm.addClass('left-align');\r\n                }\r\n                if (!lbl.hasClass('left-align')) {\r\n                    lbl.addClass('left-align');\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('left-align')) {\r\n                    elm.removeClass('left-align');\r\n                }\r\n                if (lbl.hasClass('left-align')) {\r\n                    lbl.removeClass('left-align');\r\n                }\r\n            }\r\n\r\n            if ((typeof scope.readonly !== 'undefined' && (scope.readonly == true || scope.readonly == 'true')) || (typeof scope.disable !== 'undefined' && (scope.disable === 'true' || scope.disable === true))) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n                elmContainer.addClass('readOnlyField');\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n                }\r\n            }\r\n            else {\r\n                elm.prop(\"readonly\", false);\r\n                elm.attr(\"disabled\", false);\r\n                elm.removeAttr('tabindex');\r\n                elmContainer.removeClass('readOnlyField');\r\n            }\r\n\r\n\r\n            if (typeof scope.autocomplete != 'undefiend' && (scope.autocomplete == 'true' || scope.autocomplete == true))// \"{{autocomplete?'on':'off'}}\")\r\n            {\r\n\r\n            }\r\n            else {\r\n                // elm.autocomplete().disable();\r\n            }\r\n\r\n            //if (typeof scope.disable !== 'undefined' && scope.disable == true) {\r\n            //    elm.attr(\"disabled\", \"disabled\")\r\n            //}\r\n            //else {\r\n            //    elm.attr(\"disabled\", false);\r\n            //}\r\n\r\n\r\n            if (!elm.hasClass('ng-valid')) {\r\n                elm.addClass('ng-pristine ng-valid ng-scope ng-touched');\r\n            }\r\n\r\n\r\n            if (typeof scope.placeholder !== 'undefined' && scope.placeholder != '') {\r\n                elm.attr(\"placeholder\", scope.placeholder)\r\n            }\r\n\r\n            //Optional Field\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory == false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var container = $(element).find('#' + scope.textfieldId + '_container');\r\n                if (typeof optionalField == 'undefiend' || (typeof optionalField !== 'undefiend' && optionalField.length == 0)) {\r\n                    container.append(buildOptionalFieldTemplate(scope));\r\n                    optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n                    if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                        optionalField.bind(\"click\", scope.hideShowField);\r\n                    }\r\n                }\r\n                if (!container.hasClass('optionalField')) {\r\n                    container.addClass('optionalField');\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (typeof optionalField !== 'undefiend' && optionalField.length > 0) {\r\n                    optionalField.remove();\r\n                }\r\n            }\r\n\r\n            if (scope.type === 'text' || scope.type === 'number' || scope.type === 'area') {\r\n                if (typeof scope.maxlength != 'undefined') {\r\n                    if (parseInt(scope.maxlength) > -1) {\r\n                        elm.attr('maxlength', parseInt(scope.maxlength));\r\n                    }\r\n                }\r\n            }\r\n\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                className = className.replace('ng-hide', \"\");\r\n                element.removeClass(className);\r\n            }\r\n            elmContainer.addClass(className);\r\n        }\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory === false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.textfieldId + '_opField');\r\n                return optionalField;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildPrefixiconTemplate = function (scope) {\r\n            if (typeof scope.prefixicon !== 'undefined' && scope.prefixicon) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldprefixiconTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_prefixicon');\r\n                html = html.replace('{{prefixicon}}', scope.prefixicon);\r\n                return html;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildSpinnerTemplate = function (scope) {\r\n            if (!scope.type == 'autocomplete' && typeof scope.loading !== 'undefined' && scope.loading == true) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldSpinnerTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_spinner');\r\n                return html;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildTextFieldTemplate = function (scope) {\r\n            var html = '';\r\n\r\n            if (scope.type === 'area' && scope.readonly === 'true') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaReadonlyElementTemplate.html');\r\n            } else if (scope.type === 'area') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaElementTemplate.html');\r\n            }\r\n            else {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldElementTemplate.html');\r\n            }\r\n            if (scope.type === 'password') {\r\n                html = html.replace('type=\"text\"', 'type=\"password\"');\r\n            }\r\n            html = html.replace('{{id}}', scope.textfieldId);\r\n            html = html.replace('{{showHideReadMoreContent}}', 'showHideReadMoreContent' + scope.textfieldId);\r\n            html = html.replace('{{showLessContent}}', $translate.instant('showLess'));\r\n            html = html.replace('{{showMoreContent}}', $translate.instant('showMoreContent'));\r\n            return html;\r\n        };\r\n\r\n        var buildInfoIconTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //if (scope.showwarning || scope.showinfo) {\r\n            //    html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        //var buildWarningIconTemplate = function (scope) {\r\n        //    var html = '';\r\n        //    if (scope.showwarning || scope.showinfo) {\r\n        //        html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldwarningiconTemplate.html');\r\n        //    }\r\n        //    return html;\r\n        //};\r\n\r\n        var buildLabelTemplate = function (scope) {\r\n            var html = '';\r\n            //if (typeof scope.label !== 'undefined' && scope.label.trim() != '') {\r\n            html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldLabelTemplate.html');\r\n            html = html.replace('{{id}}', scope.textfieldId + '_label');\r\n            html = html.replace('{{textfieldId}}', scope.textfieldId);\r\n            html = html.replace('{{label}}', typeof scope.label === 'undefined' ? '' : scope.label);\r\n            if (!scope.label) {\r\n                html = html.replace('class=\"\"', 'class=\"empty-label\"');\r\n            }\r\n\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        var buildTemplate = function (scope, element, onChangeCallback, attrs) {\r\n            var container = $('<div/>', { id: scope.textfieldId + '_container' });// document.createElement('div');\r\n\r\n            var css = '';\r\n            if ((scope.isMandatory === false || scope.isMandatory === 'false') && scope.isRemovable === true) {\r\n                css += ' optionalField';\r\n            }\r\n            if (scope.showinfo || scope.showwarning) {\r\n                css += ' field-has-icon';\r\n                //if (scope.showinfo && scope.showwarning) {\r\n                //    css += ' field-has-two-icons';\r\n                //}\r\n            }\r\n            if (scope.readonly === 'true' || scope.disable === 'true') {\r\n                css += ' readOnlyField';\r\n            }\r\n            //if (!scope.customoption) {\r\n            //    css += ' defaultSelected';\r\n            //}\r\n            //if (scope.validate === true && scope.errorMessage) {\r\n            //    css += ' invalid';\r\n            //}\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                element.removeClass(className);\r\n            }\r\n            container.addClass(className + ' input-field ' + css);\r\n\r\n\r\n            container.append('<div class=\"elements-include\">' + buildOptionalFieldTemplate(scope) + buildPrefixiconTemplate(scope) + buildSpinnerTemplate(scope) + buildTextFieldTemplate(scope) + buildLabelTemplate(scope) + '</div>');\r\n            container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.html(container);\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            elm.on(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            elm.on(\"blur\", scope.ngBlur);\r\n\r\n            if (scope.type != undefined && scope.type == 'number') {\r\n                // elm.attr('type', 'number');\r\n\r\n                if (scope.min != undefined && scope.min != null) {\r\n                    if ($.isNumeric(scope.min)) {\r\n                        elm.attr('min', scope.min);\r\n                    }\r\n                }\r\n                if (scope.max != undefined && scope.max != null) {\r\n                    if ($.isNumeric(scope.max)) {\r\n                        elm.attr('max', scope.max);\r\n                    }\r\n                }\r\n\r\n                elm.bind('keypress', scope.ngKeyPress);\r\n\r\n\r\n\r\n            } else if (scope.type != undefined && scope.type == 'autocomplete') {\r\n                elm.on(\"focus\", scope.ngFocus);\r\n\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n                }\r\n            } else if (scope.type != undefined && (scope.type == 'area' || scope.type == 'text')) {\r\n\r\n                // Need to add debounce for updating the ngModel\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n                }\r\n                //if (attrs.onKeyUp) {\r\n                //    elm.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n                //}\r\n                if (attrs.onKeyDown) {\r\n                    elm.bind('keydown', debounce(scope.ngKeyDown, 250));\r\n                }\r\n                if (attrs.onFocus) {\r\n                    elm.bind('focus', scope.ngFocus);\r\n                }\r\n                // Need to optimize this line, post finding of better approach. It is required for filtering ng-repeat\r\n                elm.bind('keyup', scope.ngKeyUp);\r\n            }\r\n\r\n\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n            }\r\n            updateTextFieldClass(scope, element);\r\n            setActiveClass(scope, element);\r\n\r\n            if (angular.isDefined(scope.charactercounter) && scope.charactercounter == 'true') {\r\n                elm.attr('length', scope.maxlength);\r\n                elm.characterCounter();\r\n            }\r\n\r\n        };\r\n\r\n        var updateTextValue = function (scope, element, ngModelCtrl) {\r\n            var elm = element.find('#' + scope.textfieldId),\r\n                addClassElem = element.find('#showHideReadMoreContent' + scope.textfieldId),\r\n                showLessContent = element.find('.readOnlyshowLess'),\r\n                showMoreContent = element.find('.readOnlyShowMore');\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n\r\n                if ((modal.getModal(scope, ngModelCtrl)).length < 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.hide();\r\n                } else if ((modal.getModal(scope, ngModelCtrl)).length > 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.show();\r\n                }\r\n            }\r\n            if (scope.type === 'number') {\r\n                if (modelVal === null && scope.placeholder === \"\") {\r\n                    elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                } else {\r\n                    elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                }\r\n            }\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n\r\n                addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n            }\r\n            if (scope.type === 'area' && scope.readonly === 'true') {\r\n\r\n                if (elm.text() !== modal.getModal(scope, ngModelCtrl)) { elm.text(modal.getModal(scope, ngModelCtrl)); }\r\n                //addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n                $(showLessContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showMoreContent).show();\r\n                    $(addClassElem).removeClass('areareadOnlyContentPara2');\r\n                    $(addClassElem).addClass('ellipsis areareadOnlyContentPara1');\r\n                });\r\n                $(showMoreContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showLessContent).show();\r\n                    $(addClassElem).removeClass('ellipsis areareadOnlyContentPara1');\r\n                    $(addClassElem).addClass('areareadOnlyContentPara2');\r\n\r\n                });\r\n            }\r\n            else {\r\n                if (elm.val() !== modal.getModal(scope, ngModelCtrl) && !scope.typing) {\r\n                    elm.val(modal.getModal(scope, ngModelCtrl));\r\n                }\r\n                if (scope.showTitle) {\r\n                    elm.attr('title', modal.getModal(scope, ngModelCtrl));\r\n                }\r\n                if (modal.getModal(scope, ngModelCtrl) === '') {\r\n                    elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                } else {\r\n                    elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                }\r\n\r\n                /* Adding class truncate to input*/\r\n                if (!elm.hasClass('materialize-textarea') && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                    elm.addClass('truncate');\r\n                } else {\r\n                    elm.removeClass('truncate')\r\n                };\r\n            }\r\n        \r\n        }\r\n        var modal = {\r\n            getModal: function (scope, ngModelCtrl) {\r\n                return typeof scope.ngModel == \"function\" ? ngModelCtrl.$modelValue : scope.ngModel;\r\n            },\r\n            setModal: function (scope, value, ngModelCtrl) {\r\n\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    ngModelCtrl.$setViewValue(value)\r\n                    ngModelCtrl.$render()\r\n                } else {\r\n                    scope.ngModel = value;\r\n                }\r\n            }\r\n        };\r\n\r\n        var updateDateValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.dateModel);\r\n            elm.attr('title', scope.dateModel);\r\n        }\r\n\r\n        var updateAutocompleteValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.displayModel);\r\n            elm.attr('title', scope.displayModel);\r\n        }\r\n\r\n\r\n        var checkRule = function (scope, element) {\r\n            var rules = scope.$eval(scope.rules);\r\n            var isFoundInvalid = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n                if (typeof rules[i] == 'object') {\r\n                    if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = rules[i].error;\r\n                        scope.errorModel = rules[i].error;\r\n                        break;\r\n                    } else {\r\n                        if (scope.type === 'date') {\r\n                            angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (!isFoundInvalid) {\r\n                        if (typeof scope.ngModel != 'object')\r\n                            var data = scope.ngModel;\r\n                        else\r\n                            var data = scope.displayModel;\r\n\r\n                        RuleEngine.isValid(rules[i], function (e) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = e.errorData.error;\r\n                            scope.errorModel = rules[i].error;\r\n                            isFoundInvalid = true;\r\n                        }, data);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var validateRules = function (scope, ngModelCtrl, element, attrs) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                scope.isActive = true;\r\n                return;\r\n            }\r\n\r\n            if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                if (attrs.noTrim == 'true') {\r\n                    //scope.ngModel = scope.ngModel;\r\n                } else {\r\n                    //scope.ngModel = scope.ngModel.trim();\r\n                    modal.setModal(scope, modal.getModal(scope, ngModelCtrl).trim(), ngModelCtrl);\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n            }\r\n\r\n            if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (typeof scope.ngModel === 'undefined' || scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (scope.clienterror) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (scope.type == 'number') {\r\n                if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                    angular.element('#' + scope.textfieldId).val('');\r\n                    return;\r\n                }\r\n                if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                    if (scope.rules) {\r\n                        checkRule(scope, element);\r\n                    }\r\n                    return;\r\n                }\r\n                //if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                //    scope.validate = true;\r\n                //    scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                //    scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                //    return;\r\n                //}\r\n\r\n            }\r\n\r\n            // CON-5898\r\n            if (scope.type == 'date' && !scope.rules) {\r\n                $('#' + scope.textfieldId).removeClass('invalid');\r\n            }\r\n\r\n            scope.validate = false;\r\n            scope.errorMessage = null;\r\n            scope.errorModel = null;\r\n\r\n            if (scope.rules) {\r\n                checkRule(scope, element);\r\n            }\r\n        };\r\n\r\n        var debounce = function (func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n        var updateDateClass = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            if (scope.type == 'date') {\r\n                if (!el.hasClass('datepicker')) {\r\n                    el.addClass('datepicker');\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        var assignDateEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.bind('keydown', scope.ngKeyDown);\r\n            el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', scope.ngKeyUp);\r\n\r\n        }\r\n\r\n        var assignAutocompleteEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            //el.bind('keydown', scope.ngKeyDown);\r\n            //el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n            el.on('input', debounce(scope.search, 250));\r\n\r\n        }\r\n\r\n        /*\r\n          * This function is required to generate value attribute \r\n          * and useful when up/down key is pressed\r\n          */\r\n        var getFormattedData = function (data, scope) {\r\n            if (!data || data.length == 0) {\r\n                return [];\r\n            }\r\n            for (var i = 0; i < data.length; i++) {\r\n                var str = scope.ndisplayFormat;\r\n                try {\r\n                    var parentSplit = str.split('{');\r\n                    for (var j = 0; j < parentSplit.length; j++) {\r\n                        var childSplit = parentSplit[j].split('}');\r\n                        for (var k = 0; k < childSplit.length; k++) {\r\n                            if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) { }\r\n                data[i].value = str.trim();\r\n            }\r\n            return data;\r\n        };\r\n        /*\r\n            *  Convert timestamp to UTC timestamp \r\n            */\r\n        var toUTC = function (date) {\r\n            return Date.UTC(\r\n                date.getFullYear()\r\n                , date.getMonth()\r\n                , date.getDate()\r\n                , date.getHours()\r\n                , date.getMinutes()\r\n                , date.getSeconds()\r\n                , date.getMilliseconds()\r\n            );\r\n        };\r\n\r\n        var getGridFormatToTimestamp = function (scope, stringdate) {\r\n            var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n            // tmpModel = tmpModel.split('+');\r\n            // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n            //if (scope.applyClientZone) {\r\n            //    return moment(tmpModel).parseZone().format(scope.dateFormat);\r\n            //}\r\n            //else {\r\n            return moment(tmpModel).format(scope.dateFormat);\r\n            //}\r\n        }\r\n\r\n        var updateNgModel = function (scope, timestamp) {\r\n            scope.dateModifiedbyUser = true;\r\n            if (scope.timePicker == true) {\r\n                if (scope.convertIntoUTC || timeZoneOffset != 20) {\r\n                    // that means the date will be saved in UTC Format\r\n                    scope.ngModel = moment(timestamp * 1000).add((timeZoneOffset * -60), 'minute').format('YYYY-MM-DDTHH:mm:ss');  //'\\/Date(' + ((timestamp - (moment().zone() * 60)) * 1000) + ')\\/';\r\n                } else {\r\n                    //This case is applied for Sourcing. because of the converstion happed before saving.\r\n                    scope.ngModel = '\\/Date(' + (timestamp * 1000) + ')\\/';\r\n                }\r\n            }\r\n            else {\r\n                // hooking a fixed time to fix the flipping issues.\r\n                // if (scope.convertIntoUTC) {\r\n                //scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                //}else\r\n                //{\r\n                //    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                //}\r\n\r\n                if (timeZoneOffset != 20) {\r\n                    scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                } else {\r\n                    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var createDatePicker = function (scope, element, ngModelCtrl) {\r\n            setTimeout(function () {\r\n                var picker = element.find('#' + scope.textfieldId);\r\n                var callApplyFuncFlag = true;\r\n                function setDateFormate(datePar) {\r\n                    updateNgModel(scope, datePar.unix());\r\n                    $timeout(function () {\r\n                        // if (scope.doesContainDateString) {\r\n\r\n                        //} else {\r\n                        //    if (scope.isValueDateObj) {\r\n                        //        var tempDate = datePar.format();\r\n                        //        scope.ngModel = new Date(tempDate);\r\n                        //    } else {\r\n                        //        scope.ngModel = (datePar.unix() * 1000);\r\n                        //    }\r\n                        //}\r\n                        // ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        scope.isDateBlank = false;\r\n                        if (angular.isFunction(scope.onDateChange)) {\r\n                            scope.onDateChange({ $event: { date: scope.ngModel }});\r\n                        }\r\n\r\n                    })\r\n                }\r\n                var minDate = angular.isDefined(scope.min) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(scope.dateFormat) : '';\r\n                var maxDate = angular.isDefined(scope.max) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(scope.dateFormat) : '';\r\n\r\n                var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                var pickerObj = picker.daterangepicker({\r\n                    \"singleDatePicker\": true,\r\n                    \"showDropdowns\": true,\r\n                    \"timePicker\": scope.datetimePicker,\r\n                    \"timePicker24Hour\": timePicker24Hour,\r\n                    \"timePickerIncrement\": timePickerIncrement,\r\n                    \"autoApply\": false,\r\n                    \"opens\": \"right\",\r\n                    \"drops\": \"down\",\r\n                    \"minDate\": minDate,\r\n                    \"maxDate\": maxDate,\r\n                    \"autoUpdateInput\": false,\r\n                    \"locale\": {\r\n                        \"format\": scope.dateFormat,\r\n                        'cancelLabel': $translate.instant('cancelBtn'),\r\n                        'applyLabel': $translate.instant('applyBtn')\r\n                    }\r\n                }, function (start, end, label) {\r\n                    callApplyFuncFlag = false;\r\n                    setDateFormate(start);\r\n                }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                    var pos = pickerObj.container.offset(),\r\n                        wHeight = window.innerHeight,\r\n                        srTop = $(window).scrollTop();\r\n                    if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                        pickerObj.drops = \"up\";\r\n                        pickerObj.move();\r\n                    } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                        pickerObj.drops = \"down\";\r\n                        pickerObj.move();\r\n                    }\r\n                }).data(\"daterangepicker\");\r\n\r\n                picker.on('apply.daterangepicker', function (ev, pickerObj) {\r\n                    if (callApplyFuncFlag) {\r\n                        setDateFormate(pickerObj.startDate)\r\n                    }\r\n                    callApplyFuncFlag = true;\r\n                    pickerObj.autoUpdateInput = true;\r\n                    pickerObj.updateElement();\r\n                    pickerObj.autoUpdateInput = false;\r\n                });\r\n\r\n                if (scope.isDateBlank) {\r\n                    picker.val('');\r\n                    scope.ngModel = \"\";\r\n                    // WS-2072\r\n                    //ngModelCtrl.$setViewValue('');\r\n\r\n                };\r\n            });\r\n        }\r\n\r\n        var getDisplayData = function (data, scope) {\r\n            if (data == undefined || data == null || data == '') {\r\n                return '';\r\n            }\r\n            var str = scope.ndisplayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                            evalResult = eval('data.' + childSplit[k]);\r\n                            evaluatedKeysCounter++;\r\n                            if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                evalResult = '';\r\n                                nullKeysCounter++;\r\n                            }\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                        }\r\n                    }\r\n                }\r\n                if (evaluatedKeysCounter == nullKeysCounter) {\r\n                    str = '';\r\n                }\r\n            }\r\n            catch (e) { }\r\n            return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n        }\r\n\r\n        function debounce(func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n\r\n        var service = {\r\n            buildTemplate: buildTemplate,\r\n            setActiveClass: setActiveClass,\r\n            updateTextFieldClass: updateTextFieldClass,\r\n            checkIfActive: checkIfActive,\r\n            validateRules: validateRules,\r\n            checkRule: checkRule,\r\n            updateTextValue: updateTextValue,\r\n            debounce: debounce,\r\n            updateDateClass: updateDateClass,\r\n            assignDateEvents: assignDateEvents,\r\n            getFormattedData: getFormattedData,\r\n            toUTC: toUTC,\r\n            getGridFormatToTimestamp: getGridFormatToTimestamp,\r\n            createDatePicker: createDatePicker,\r\n            updateDateValue: updateDateValue,\r\n            updateAutocompleteValue: updateAutocompleteValue,\r\n            getDisplayData: getDisplayData,\r\n            assignAutocompleteEvents: assignAutocompleteEvents,\r\n            modal: modal\r\n        };\r\n\r\n        return service;\r\n    }\r\n\r\n    angular.module('SMART2').factory('smartTextField3Service', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', '$translate', '$timeout', smartTextField3ServiceFunc])\r\n        function smartTextField3ServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile, $translate, $timeout) {\r\n        var _selectedDate, _previousDate;\r\n        var getSelectedDate = function () {\r\n            return _selectedDate;\r\n        };\r\n        var setSelectedDate = function (date) {\r\n            _selectedDate = date;\r\n        };\r\n        var getPreviousDate = function () {\r\n            return _previousDate;\r\n        };\r\n        var setPreviousDate = function (date) {\r\n            _previousDate = date;\r\n        };\r\n        var checkIfActive = function (scope) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                return true;\r\n        }\r\n            if (scope.type == 'number' && scope.ngModel !== 0 + '' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n        }\r\n            if (scope.type != 'number' && scope.type != 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n        }\r\n            if (scope.type == 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                return false;\r\n        }\r\n            return true;\r\n        }\r\n\r\n        var setActiveClass = function (scope, element, eventType) {\r\n            scope.active = checkIfActive(scope);\r\n            var el = element.find('#' + scope.textfieldId + '_label');\r\n\r\n            if ((typeof scope.active !== 'undefined' && scope.active == true) || (typeof scope.validate !== 'undefined' && scope.validate == true)) {\r\n                if (!el.hasClass('active')) {\r\n                    el.addClass('active');\r\n            }\r\n            } else {\r\n                if (el.hasClass('active')) {\r\n                    el.removeClass('active');\r\n            }\r\n        }\r\n        }\r\n\r\n        var updateTextFieldClass = function (scope, element) {\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            var elmContainer = $(element).find('#' + scope.textfieldId + '_container');\r\n            var lbl = $(element).find('#' + scope.textfieldId + '_label');\r\n            if (typeof scope.validate !== 'undefined' && scope.validate == true && typeof scope.errorMessage !== 'undefined' && scope.errorMessage) {\r\n                if (!elm.hasClass('invalid')) {\r\n                    elm.addClass('invalid');\r\n                    lbl.attr('data-error', $translate.instant(scope.errorMessage));\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n            }\r\n        }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'right') {\r\n                if (!elm.hasClass('right-align')) {\r\n                    elm.addClass('right-align');\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('right-align')) {\r\n                    elm.removeClass('right-align');\r\n            }\r\n        }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'left') {\r\n                if (!elm.hasClass('left-align')) {\r\n                    elm.addClass('left-align');\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('left-align')) {\r\n                    elm.removeClass('left-align');\r\n            }\r\n        }\r\n\r\n            if ((typeof scope.readonly !== 'undefined' && (scope.readonly == true || scope.readonly == 'true')) || (typeof scope.disable !== 'undefined' && (scope.disable === 'true' || scope.disable === true))) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n                elmContainer.addClass('readOnlyField');\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n            }\r\n            }\r\n            else {\r\n                elm.prop(\"readonly\", false);\r\n                elm.attr(\"disabled\", false);\r\n                elm.removeAttr('tabindex');\r\n                elmContainer.removeClass('readOnlyField');\r\n        }\r\n\r\n\r\n            if (typeof scope.autocomplete != 'undefiend' && (scope.autocomplete == 'true' || scope.autocomplete == true))// \"{{autocomplete?'on':'off'}}\")\r\n            {\r\n\r\n            }\r\n            else {\r\n                // elm.autocomplete().disable();\r\n        }\r\n\r\n            //if (typeof scope.disable !== 'undefined' && scope.disable == true) {\r\n            //    elm.attr(\"disabled\", \"disabled\")\r\n            //}\r\n            //else {\r\n            //    elm.attr(\"disabled\", false);\r\n            //}\r\n\r\n\r\n            if (!elm.hasClass('ng-valid')) {\r\n                elm.addClass('ng-pristine ng-valid ng-scope ng-touched');\r\n        }\r\n\r\n\r\n            if (typeof scope.placeholder !== 'undefined' && scope.placeholder != '') {\r\n                elm.attr(\"placeholder\", scope.placeholder)\r\n        }\r\n\r\n            //Optional Field\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory == false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var container = $(element).find('#' + scope.textfieldId + '_container');\r\n                if (typeof optionalField == 'undefiend' || (typeof optionalField !== 'undefiend' && optionalField.length == 0)) {\r\n                    container.append(buildOptionalFieldTemplate(scope));\r\n                    optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n                    if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                        optionalField.bind(\"click\", scope.hideShowField);\r\n                }\r\n            }\r\n                if (!container.hasClass('optionalField')) {\r\n                    container.addClass('optionalField');\r\n            }\r\n\r\n            }\r\n            else {\r\n                if (typeof optionalField !== 'undefiend' && optionalField.length > 0) {\r\n                    optionalField.remove();\r\n            }\r\n        }\r\n\r\n            if (scope.type === 'text' || scope.type === 'number' || scope.type === 'area') {\r\n                if (typeof scope.maxlength != 'undefined') {\r\n                    if (parseInt(scope.maxlength) > -1) {\r\n                        elm.attr('maxlength', parseInt(scope.maxlength));\r\n                }\r\n            }\r\n        }\r\n\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                className = className.replace('ng-hide', \"\");\r\n                element.removeClass(className);\r\n        }\r\n            elmContainer.addClass(className);\r\n        }\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory === false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.textfieldId + '_opField');\r\n                return optionalField;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildPrefixiconTemplate = function (scope) {\r\n            if (typeof scope.prefixicon !== 'undefined' && scope.prefixicon) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldprefixiconTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_prefixicon');\r\n                html = html.replace('{{prefixicon}}', scope.prefixicon);\r\n                return html;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildSpinnerTemplate = function (scope) {\r\n            if (!scope.type == 'autocomplete' && typeof scope.loading !== 'undefined' && scope.loading == true) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldSpinnerTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_spinner');\r\n                return html;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildTextFieldTemplate = function (scope) {\r\n            var html = '';\r\n            if (scope.type === 'area' && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaReadonlyElementTemplate.html');\r\n            } else if (scope.type === 'area') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaElementTemplate.html');\r\n            } else {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldElementTemplate.html');\r\n        }\r\n            if (scope.type === 'password') {\r\n                html = html.replace('type=\"text\"', 'type=\"password\"');\r\n        }\r\n            html = html.replace('{{id}}', scope.textfieldId);\r\n            html = html.replace('{{showHideReadMoreContent}}', 'showHideReadMoreContent' + scope.textfieldId);\r\n            html = html.replace('{{showLessContent}}', $translate.instant('showLess'));\r\n            html = html.replace('{{showMoreContent}}', $translate.instant('showMoreContent'));\r\n            return html;\r\n        };\r\n\r\n        var buildInfoIconTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //if (scope.showwarning || scope.showinfo) {\r\n            //    html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n            //var buildWarningIconTemplate = function (scope) {\r\n            //    var html = '';\r\n            //    if (scope.showwarning || scope.showinfo) {\r\n            //        html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldwarningiconTemplate.html');\r\n            //    }\r\n            //    return html;\r\n            //};\r\n\r\n        var buildLabelTemplate = function (scope) {\r\n            var html = '';\r\n            var dateLabel = typeof scope.format === 'undefined' ? scope.label : scope.label + \" (\" + scope.format + \")\";\r\n            //if (typeof scope.label !== 'undefined' && scope.label.trim() != '') {\r\n            html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldLabelTemplate.html');\r\n            html = html.replace('{{id}}', scope.textfieldId + '_label');\r\n            html = html.replace('{{textfieldId}}', scope.textfieldId);\r\n            html = html.replace('{{label}}', typeof scope.label === 'undefined' ? '' : scope.label);\r\n            html = html.replace('{{title}}', typeof scope.label === 'undefined' ? '' : dateLabel);\r\n            html = html.replace('{{format}}', typeof scope.format === 'undefined' ? '' : scope.format);\r\n             if (!scope.label) {\r\n                html = html.replace('class=\"\"', 'class=\"empty-label\"');\r\n        }\r\n\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        var buildTemplate = function (scope, element, onChangeCallback, attrs) {\r\n            var container = $('<div/>', { id: scope.textfieldId + '_container' });// document.createElement('div');\r\n\r\n            var css = '';\r\n            if ((scope.isMandatory === false || scope.isMandatory === 'false') && scope.isRemovable === true) {\r\n                css += ' optionalField';\r\n        }\r\n            if (scope.showinfo || scope.showwarning) {\r\n                css += ' field-has-icon';\r\n                //if (scope.showinfo && scope.showwarning) {\r\n                //    css += ' field-has-two-icons';\r\n                //}\r\n        }\r\n            if (scope.readonly === 'true' || scope.disable === 'true') {\r\n                css += ' readOnlyField';\r\n        }\r\n            //if (!scope.customoption) {\r\n            //    css += ' defaultSelected';\r\n            //}\r\n            //if (scope.validate === true && scope.errorMessage) {\r\n            //    css += ' invalid';\r\n            //}\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                element.removeClass(className);\r\n                if (className) {\r\n                    scope.className = className;\r\n                }\r\n            }\r\n            container.addClass(scope.className + ' input-field ' + css);\r\n\r\n\r\n            container.append('<div class=\"elements-include\">' + buildOptionalFieldTemplate(scope) + buildPrefixiconTemplate(scope) + buildSpinnerTemplate(scope) + buildTextFieldTemplate(scope) + '</div>');\r\n            container.find('.elements-include').append($compile(buildLabelTemplate(scope))(scope));\r\n            container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.html(container);\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            elm.on(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            elm.on(\"blur\", scope.ngBlur);\r\n\r\n            if (scope.type != undefined && scope.type == 'number') {\r\n                // elm.attr('type', 'number');\r\n\r\n                if (scope.min != undefined && scope.min != null) {\r\n                    if ($.isNumeric(scope.min)) {\r\n                        elm.attr('min', scope.min);\r\n                }\r\n            }\r\n                if (scope.max != undefined && scope.max != null) {\r\n                    if ($.isNumeric(scope.max)) {\r\n                        elm.attr('max', scope.max);\r\n                }\r\n            }\r\n\r\n                elm.bind('keypress', scope.ngKeyPress);\r\n\r\n\r\n\r\n            } else if (scope.type != undefined && scope.type == 'autocomplete') {\r\n                elm.on(\"focus\", scope.ngFocus);\r\n\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n            }\r\n            } else if (scope.type != undefined && (scope.type == 'area' || scope.type == 'text')) {\r\n\r\n                // Need to add debounce for updating the ngModel\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n            }\r\n                //if (attrs.onKeyUp) {\r\n                //    elm.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n                //}\r\n                if (attrs.onKeyDown) {\r\n                    elm.bind('keydown', debounce(scope.ngKeyDown, 250));\r\n            }\r\n                if (attrs.onFocus) {\r\n                    elm.bind('focus', scope.ngFocus);\r\n            }\r\n                // Need to optimize this line, post finding of better approach. It is required for filtering ng-repeat\r\n                elm.bind('keyup', scope.ngKeyUp);\r\n            }\r\n\r\n\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n        }\r\n            updateTextFieldClass(scope, element);\r\n            setActiveClass(scope, element);\r\n\r\n            if (angular.isDefined(scope.charactercounter) && scope.charactercounter == 'true') {\r\n                elm.attr('length', scope.maxlength);\r\n                elm.characterCounter();\r\n        }\r\n\r\n        };\r\n\r\n        var updateTextValue = function (scope, element, ngModelCtrl) {\r\n            var elm = element.find('#' + scope.textfieldId),\r\n                addClassElem = element.find('#showHideReadMoreContent' + scope.textfieldId),\r\n                showLessContent = element.find('.readOnlyshowLess'),\r\n                showMoreContent = element.find('.readOnlyShowMore');\r\n                showLessContent.hide();\r\n                showMoreContent.hide();\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n                if (modal.getModal(scope, ngModelCtrl) && modal.getModal(scope, ngModelCtrl).length < 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.hide();\r\n                } else if (modal.getModal(scope, ngModelCtrl) && modal.getModal(scope, ngModelCtrl).length > 150) {\r\n                    addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n                    showLessContent.hide();\r\n                    showMoreContent.show();\r\n            }\r\n        }\r\n         \r\n            if (scope.type === 'area' && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                elm.text(modal.getModal(scope, ngModelCtrl));\r\n                $(showLessContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showMoreContent).show();\r\n                    $(addClassElem).removeClass('areareadOnlyContentPara2');\r\n                    $(addClassElem).addClass('ellipsis areareadOnlyContentPara1');\r\n                });\r\n                $(showMoreContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showLessContent).show();\r\n                    $(addClassElem).removeClass('ellipsis areareadOnlyContentPara1');\r\n                    $(addClassElem).addClass('areareadOnlyContentPara2');\r\n                });\r\n            }\r\n            else {\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    $timeout(function () {\r\n                        elm = element.find('#' + scope.textfieldId);\r\n                        var gm = modal.getModal(scope, ngModelCtrl);\r\n                        if (elm.val() !== gm) {\r\n                            elm.val(gm);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', gm);\r\n                        }\r\n                        if (gm === '' || typeof gm == 'undefined') {\r\n                            elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                            elm.attr('title', '');\r\n                        } else {\r\n                             angular.element('#' + scope.textfieldId+\"_label\").addClass(\"active\");\r\n                             elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                        }\r\n                    });\r\n                } else if (scope.type == 'number' && scope.infinite) {\r\n                    var modelVal = modal.getModal(scope, ngModelCtrl)\r\n                    if (typeof elm.autoNumeric == 'function') {\r\n                        if (elm.autoNumeric('get') != modelVal && !scope.infinite) {\r\n                            elm.autoNumeric('set', modelVal);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', elm.autoNumeric('get'));\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (elm.val() !== modelVal) {\r\n                            elm.val(modelVal);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', modelVal);\r\n                        }\r\n                    }\r\n                   \r\n                    if (modelVal === null && scope.placeholder === \"\") {\r\n                        if ((scope.infinite == \"true\" && scope.type == \"number\") && (modelVal === 'undefined' || modelVal === null)) {\r\n                            angular.element('#' + scope.textfieldId).removeClass('ng-empty').addClass('ng-not-empty');\r\n                            angular.element('#' + scope.textfieldId + '_label').css({ \"font-size\": \"12px\", \"bottom\": \"37px\" });\r\n                        } else {\r\n                        elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                        }\r\n                    }\r\n                    else if (modelVal === '∞') {\r\n                        angular.element('#' + scope.textfieldId).removeClass('ng-empty').addClass('ng-not-empty');\r\n                        angular.element('#' + scope.textfieldId + '_label').css({ \"font-size\": \"12px\", \"bottom\": \"37px\" });\r\n                    }\r\n                    else {\r\n                        elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                    }\r\n                }\r\n                else {\r\n                    if (elm.val() !== modal.getModal(scope, ngModelCtrl)) {\r\n                        if (scope.typing) {\r\n                            smartTextFieldService.modal.setModal(scope, elm.val(), ngModelCtrl);\r\n                        } else {\r\n                            elm.val(modal.getModal(scope, ngModelCtrl));\r\n                        }\r\n\r\n                    }\r\n                    if (scope.showTitle) {\r\n                        elm.attr('title', modal.getModal(scope, ngModelCtrl));\r\n                    }\r\n                    if (modal.getModal(scope, ngModelCtrl) === '') {\r\n                        elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                    } else {\r\n                        elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                    }\r\n                }\r\n\r\n                /* Adding class truncate to input*/\r\n                if (!elm.hasClass('materialize-textarea') && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                    elm.addClass('truncate');\r\n                } else {\r\n                    elm.removeClass('truncate')\r\n            };\r\n        }\r\n            if (scope.type === 'area') {\r\n                    $timeout(function(){\r\n                         angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                    });\r\n            }\r\n       }\r\n\r\n        var modal = {\r\n                getModal: function (scope, ngModelCtrl) {\r\n                return typeof scope.ngModel == \"function\" ? ngModelCtrl.$modelValue : scope.ngModel;\r\n        },\r\n                setModal: function (scope, value, ngModelCtrl) {\r\n\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    ngModelCtrl.$setViewValue(value)\r\n                    ngModelCtrl.$render()\r\n                } else {\r\n                    scope.ngModel = value;\r\n                }\r\n        }\r\n        };\r\n\r\n        var updateDateValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.dateModel);\r\n            elm.attr('title', scope.dateModel);\r\n        }\r\n\r\n        var updateAutocompleteValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.displayModel);\r\n            elm.attr('title', scope.displayModel);\r\n        }\r\n\r\n\r\n        var checkRule = function (scope, element) {\r\n            var rules = scope.$eval(scope.rules);\r\n            var isFoundInvalid = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n                if (typeof rules[i] == 'object') {\r\n                    if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = rules[i].error;\r\n                        scope.errorModel = rules[i].error;\r\n                        break;\r\n                    } else {\r\n                        if (scope.type === 'date') {\r\n                            angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n                }\r\n                }\r\n                else {\r\n                    if (!isFoundInvalid) {\r\n                        if (typeof scope.ngModel != 'object')\r\n                            var data = scope.ngModel;\r\n                        else\r\n                            var data = scope.displayModel;\r\n\r\n                        RuleEngine.isValid(rules[i], function (e) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = e.errorData.error;\r\n                            scope.errorModel = rules[i].error;\r\n                            isFoundInvalid = true;\r\n                        }, data);\r\n                    }\r\n                    else {\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n        var validateRules = function (scope, ngModelCtrl, element, attrs) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                scope.isActive = true;\r\n                return;\r\n        }\r\n\r\n            if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                if (attrs.noTrim == 'true') {\r\n                    //scope.ngModel = scope.ngModel;\r\n                } else {\r\n                    //scope.ngModel = scope.ngModel.trim();\r\n                    var tempString = modal.getModal(scope, ngModelCtrl);\r\n                    if (tempString.trim().length <= 0) {\r\n                        modal.setModal(scope, tempString.trim(), ngModelCtrl);\r\n                    } else {\r\n                        modal.setModal(scope, tempString, ngModelCtrl);\r\n                }\r\n            }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n        }\r\n\r\n            if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (typeof scope.ngModel === 'undefined' || scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n\r\n                return;\r\n        }\r\n\r\n            if (scope.clienterror) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                return;\r\n        }\r\n\r\n            if (scope.type == 'number' && !scope.infinite) {\r\n                if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                    angular.element('#' + scope.textfieldId).val('');\r\n                    return;\r\n            }\r\n                if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                    if (scope.rules) {\r\n                        checkRule(scope, element);\r\n                }\r\n                    return;\r\n            }\r\n                //if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                //    scope.validate = true;\r\n                //    scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                //    scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                //    return;\r\n                //}\r\n\r\n        }\r\n\r\n            // CON-5898\r\n            if (scope.type == 'date' && !scope.rules) {\r\n                $('#' + scope.textfieldId).removeClass('invalid');\r\n        }\r\n\r\n            scope.validate = false;\r\n            scope.errorMessage = null;\r\n            scope.errorModel = null;\r\n\r\n            if (scope.rules) {\r\n                checkRule(scope, element);\r\n        }\r\n        };\r\n\r\n        var debounce = function (func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n            };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n        };\r\n        };\r\n\r\n        var updateDateClass = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            if (scope.type == 'date') {\r\n                if (!el.hasClass('datepicker')) {\r\n                    el.addClass('datepicker');\r\n            }\r\n        }\r\n\r\n\r\n        }\r\n        var assignDateEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.bind('keydown', scope.ngKeyDown);\r\n            el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', scope.ngKeyUp);\r\n\r\n        }\r\n\r\n        var assignAutocompleteEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            //el.bind('keydown', scope.ngKeyDown);\r\n            //el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n            el.on('input', debounce(scope.search, 250));\r\n\r\n        }\r\n\r\n            /*\r\n              * This function is required to generate value attribute \r\n              * and useful when up/down key is pressed\r\n              */\r\n        var getFormattedData = function (data, scope) {\r\n            if (!data || data.length == 0) {\r\n                return [];\r\n        }\r\n            for (var i = 0; i < data.length; i++) {\r\n                var str = scope.ndisplayFormat;\r\n                try {\r\n                    var parentSplit = str.split('{');\r\n                    for (var j = 0; j < parentSplit.length; j++) {\r\n                        var childSplit = parentSplit[j].split('}');\r\n                        for (var k = 0; k < childSplit.length; k++) {\r\n                            if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n                catch (e) { }\r\n                data[i].value = str.trim();\r\n        }\r\n            return data;\r\n        };\r\n            /*\r\n                *  Convert timestamp to UTC timestamp \r\n                */\r\n        var toUTC = function (date) {\r\n            return Date.UTC(\r\n                date.getFullYear()\r\n                , date.getMonth()\r\n                , date.getDate()\r\n                , date.getHours()\r\n                , date.getMinutes()\r\n                , date.getSeconds()\r\n                , date.getMilliseconds()\r\n            );\r\n        };\r\n\r\n        var getGridFormatToTimestamp = function (scope, stringdate) {\r\n            var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n            // tmpModel = tmpModel.split('+');\r\n            // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n            //if (scope.applyClientZone) {\r\n            //    return moment(tmpModel).parseZone().format(scope.dateFormat);\r\n            //}\r\n            //else {\r\n            return moment(tmpModel).format(scope.dateFormat);\r\n            //}\r\n        }\r\n\r\n        var updateNgModel = function (scope, timestamp) {\r\n            scope.dateModifiedbyUser = true;\r\n            if (scope.timePicker == true) {\r\n                if (scope.convertIntoUTC || timeZoneOffset != 20) {\r\n                    // that means the date will be saved in UTC Format\r\n                    scope.ngModel = moment(timestamp * 1000).add((timeZoneOffset * -60), 'minute').format('YYYY-MM-DDTHH:mm:ss');  //'\\/Date(' + ((timestamp - (moment().zone() * 60)) * 1000) + ')\\/';\r\n                } else {\r\n                    //This case is applied for Sourcing. because of the converstion happed before saving.\r\n                    scope.ngModel = '\\/Date(' + (timestamp * 1000) + ')\\/';\r\n            }\r\n            }\r\n            else {\r\n                // hooking a fixed time to fix the flipping issues.\r\n                // if (scope.convertIntoUTC) {\r\n                //scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                //}else\r\n                //{\r\n                //    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                //}\r\n\r\n                if (timeZoneOffset != 20) {\r\n                    scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                } else {\r\n                    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n            }\r\n        }\r\n        }\r\n\r\n\r\n        var createDatePicker = function (scope, element, ngModelCtrl) {\r\n            setTimeout(function () {\r\n                var picker = element.find('#' + scope.textfieldId);\r\n                var callApplyFuncFlag = true;\r\n                function setDateFormate(datePar) {\r\n                    updateNgModel(scope, datePar.unix());\r\n                    ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    scope.$apply();\r\n                    $timeout(function () {\r\n                        // if (scope.doesContainDateString) {\r\n\r\n                        //} else {\r\n                        //    if (scope.isValueDateObj) {\r\n                        //        var tempDate = datePar.format();\r\n                        //        scope.ngModel = new Date(tempDate);\r\n                        //    } else {\r\n                        //        scope.ngModel = (datePar.unix() * 1000);\r\n                        //    }\r\n                        //}\r\n                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        scope.isDateBlank = false;                        \r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({ $event: { date: scope.ngModel } });\r\n                    }\r\n                        \r\n                    })\r\n            }\r\n                var minDate = angular.isDefined(scope.min) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(scope.dateFormat) : '';\r\n                var maxDate = angular.isDefined(scope.max) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(scope.dateFormat) : '';\r\n\r\n                var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                var pickerObj = picker.daterangepicker({\r\n                    \"singleDatePicker\": true,\r\n                    \"showDropdowns\": true,\r\n                    \"timePicker\": scope.datetimePicker,\r\n                    \"timePicker24Hour\": timePicker24Hour,\r\n                    \"timePickerIncrement\": timePickerIncrement,\r\n                    \"autoApply\": false,\r\n                    \"opens\": \"right\",\r\n                    \"drops\": \"down\",\r\n                    \"minDate\": minDate,\r\n                    \"maxDate\": maxDate,\r\n                    \"autoUpdateInput\": false,\r\n                    \"locale\": {\r\n                        \"format\": scope.dateFormat,\r\n                        'cancelLabel': $translate.instant('cancelBtn'),\r\n                        'applyLabel': $translate.instant('applyBtn')\r\n                        }\r\n                        }, function (start, end, label) {\r\n                    callApplyFuncFlag = false;\r\n                    setDateFormate(start);\r\n                }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                    setPreviousDate(pickerObj.element.val());\r\n                    var pos = pickerObj.container.offset(),\r\n                        wHeight = window.innerHeight,\r\n                        srTop = $(window).scrollTop();\r\n                    if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                        pickerObj.drops = \"up\";\r\n                        pickerObj.move();\r\n                    } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                        pickerObj.drops = \"down\";\r\n                        pickerObj.move();\r\n                }\r\n                }).data(\"daterangepicker\");\r\n\r\n                picker.on('apply.daterangepicker', function (ev, pickerObj) {\r\n                    if (callApplyFuncFlag) {\r\n                        setDateFormate(pickerObj.startDate)\r\n                }\r\n                    callApplyFuncFlag = true;\r\n                    pickerObj.autoUpdateInput = true;\r\n                    pickerObj.updateElement();\r\n                    pickerObj.autoUpdateInput = false;\r\n                    setPreviousDate(pickerObj.element.val());\r\n                    setSelectedDate('\\/Date(' + ((pickerObj.startDate.unix() * 1000) + 43200000) + ')\\/');\r\n                });\r\n\r\n                if (scope.isDateBlank) {\r\n                    picker.val('');\r\n                    scope.ngModel = \"\";\r\n                    // WS-2072\r\n                    //ngModelCtrl.$setViewValue('');\r\n\r\n            };\r\n            });\r\n        }\r\n\r\n        var getDisplayData = function (data, scope) {\r\n            if (data == undefined || data == null || data == '') {\r\n                return '';\r\n        }\r\n            var str = scope.ndisplayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                            evalResult = eval('data.' + childSplit[k]);\r\n                            evaluatedKeysCounter++;\r\n                            if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                evalResult = '';\r\n                                nullKeysCounter++;\r\n                        }\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                    }\r\n                }\r\n            }\r\n                if (evaluatedKeysCounter == nullKeysCounter) {\r\n                    str = '';\r\n            }\r\n        }\r\n            catch (e) { }\r\n            return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n        }\r\n\r\n            function debounce(func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n            };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n        var assignSearchEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.on('input', debounce(scope.triggerSearchEvent, 250));\r\n        }\r\n\r\n        var service = {\r\n                buildTemplate: buildTemplate,\r\n                setActiveClass: setActiveClass,\r\n                updateTextFieldClass: updateTextFieldClass,\r\n                checkIfActive: checkIfActive,\r\n                validateRules: validateRules,\r\n                checkRule: checkRule,\r\n                updateTextValue: updateTextValue,\r\n                debounce: debounce,\r\n                updateDateClass: updateDateClass,\r\n                assignDateEvents: assignDateEvents,\r\n                getFormattedData: getFormattedData,\r\n                toUTC: toUTC,\r\n                getGridFormatToTimestamp: getGridFormatToTimestamp,\r\n                createDatePicker: createDatePicker,\r\n                updateDateValue: updateDateValue,\r\n                updateAutocompleteValue: updateAutocompleteValue,\r\n                getDisplayData: getDisplayData,\r\n                assignAutocompleteEvents: assignAutocompleteEvents,\r\n                modal: modal,\r\n                setSelectedDate: setSelectedDate,\r\n                getSelectedDate: getSelectedDate,\r\n                setPreviousDate: setPreviousDate,\r\n            getPreviousDate: getPreviousDate,\r\n            assignSearchEvents: assignSearchEvents\r\n        };\r\n\r\n        return service;\r\n    }\r\n\r\n    (function ($) {\r\n\r\n        $.extend({\r\n\r\n                debounce: function (fn, timeout, invokeAsap, ctx) {\r\n\r\n                if (arguments.length == 3 && typeof invokeAsap != 'boolean') {\r\n                    ctx = invokeAsap;\r\n                    invokeAsap = false;\r\n                }\r\n\r\n                var timer;\r\n\r\n                return function () {\r\n\r\n                    var args = arguments;\r\n                    ctx = ctx || this;\r\n\r\n                    invokeAsap && !timer && fn.apply(ctx, args);\r\n\r\n                    clearTimeout(timer);\r\n\r\n                    timer = setTimeout(function () {\r\n                        !invokeAsap && fn.apply(ctx, args);\r\n                        timer = null;\r\n                    }, timeout);\r\n\r\n                };\r\n\r\n        },\r\n\r\n                throttle: function (fn, timeout, ctx) {\r\n\r\n                var timer, args, needInvoke;\r\n\r\n                return function () {\r\n\r\n                    args = arguments;\r\n                    needInvoke = true;\r\n                    ctx = ctx || this;\r\n\r\n                    if (!timer) {\r\n                        (function () {\r\n                            if (needInvoke) {\r\n                                fn.apply(ctx, args);\r\n                                needInvoke = false;\r\n                                timer = setTimeout(arguments.callee, timeout);\r\n                            }\r\n                            else {\r\n                                timer = null;\r\n                        }\r\n                        })();\r\n                }\r\n\r\n                };\r\n\r\n        }\r\n\r\n        });\r\n\r\n    })(jQuery);\r\n    angular.module('SMART2').directive('smartCharacterCount', [function () {\r\n        return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                if (parseInt(attrs.smartCharacterCount) > -1) {\r\n                    element.attr('length', attrs.smartCharacterCount);\r\n                    element.characterCounter();\r\n                }\r\n        }\r\n    }\r\n    }]);\r\n\r\n})();","/**\r\n*  Ajax Autocomplete for jQuery, version 1.2.24\r\n*  (c) 2015 Tomas Kirda\r\n*\r\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\r\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\r\n*/\r\n\r\n/*jslint  browser: true, white: true, plusplus: true, vars: true */\r\n/*global define, window, document, jQuery, exports, require */\r\n\r\n// Expose plugin as an AMD module if AMD loader is present:\r\n(function (factory) {\r\n    'use strict';\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(['jquery'], factory);\r\n    } else if (typeof exports === 'object' && typeof require === 'function') {\r\n        // Browserify\r\n        factory(require('jquery'));\r\n    } else {\r\n        // Browser globals\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n\r\n    var getCompiledOption = function (str, option) {\r\n        try {\r\n            //var keys = Object.keys(suggestion);\r\n\r\n            //for(var i=0; i<keys.length; i++) {\r\n            //    if(suggestion.hasOwnProperty(keys[i])) {\r\n            //        str = str.replace(new RegExp(\"{\"+keys[i]+\"}\", \"ig\"), suggestion[keys[i]]);\r\n            //    }\r\n            //}\r\n\r\n            var parentSplit = str.split('{');\r\n            for (var i = 0; i < parentSplit.length; i++) {\r\n                var childSplit = parentSplit[i].split('}');\r\n                for (var j = 0; j < childSplit.length; j++) {\r\n                    if (childSplit[j].indexOf('.') > 0 || option.hasOwnProperty(childSplit[j])) {\r\n                        str = str.replace(new RegExp(\"{\" + childSplit[j] + \"}\", \"ig\"), eval('option.' + childSplit[j]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch(e) {}\r\n        return str;\r\n    };\r\n\r\n    var\r\n        utils = (function () {\r\n            return {\r\n                escapeRegExChars: function (value) {\r\n                    return value.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n                },\r\n                createNode: function (containerClass) {\r\n                    var div = document.createElement('div');\r\n                    div.className = containerClass;\r\n                    div.style.position = 'absolute';\r\n                    div.style.display = 'none';\r\n                    div.onclick = \"event.stopPropagation()\";\r\n                    div.addEventListener('click', function () {\r\n                        event.stopPropagation();\r\n                    });\r\n                    return div;\r\n                }\r\n            };\r\n        }()),\r\n\r\n        keys = {\r\n            ESC: 27,\r\n            TAB: 9,\r\n            RETURN: 13,\r\n            LEFT: 37,\r\n            UP: 38,\r\n            RIGHT: 39,\r\n            DOWN: 40\r\n        };\r\n\r\n    function Autocomplete(el, options) {\r\n        var noop = function () { },\r\n            that = this,\r\n            defaults = {\r\n                ajaxSettings: {},\r\n                autoSelectFirst: false,\r\n                appendTo: document.body,\r\n                serviceUrl: null,\r\n                lookup: null,\r\n                onSelect: null,\r\n                width: 'auto',\r\n                minChars: 1,\r\n                maxHeight: 300,\r\n                deferRequestBy: 0,\r\n                params: {},\r\n                formatResult: Autocomplete.formatResult,\r\n                delimiter: null,\r\n                zIndex: 9999,\r\n                type: 'GET',\r\n                noCache: false,\r\n                onSearchStart: noop,\r\n                onSearchComplete: noop,\r\n                onSearchError: noop,\r\n                preserveInput: false,\r\n                containerClass: 'autocomplete-suggestions',\r\n                tabDisabled: false,\r\n                dataType: 'text',\r\n                currentRequest: null,\r\n                triggerSelectOnValidInput: true,\r\n                preventBadQueries: true,\r\n                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {\r\n                    //  Added by Sushant\r\n                    try {\r\n                        var str = '';\r\n                        for (var i = 0; i < that.filterKeys.length; i++) {\r\n                            str = str + eval('suggestion.' + that.filterKeys[i]).toLowerCase().trim() + ' ';\r\n                        }\r\n                        str = str.trim();\r\n                    }\r\n                    catch (e) { }\r\n                    return str.indexOf(queryLowerCase) > -1;\r\n                },\r\n                paramName: 'query',\r\n                transformResult: function (response) {\r\n                    return typeof response === 'string' ? $.parseJSON(response) : response;\r\n                },\r\n                showNoSuggestionNotice: false,\r\n                noSuggestionNotice: 'No results',\r\n                orientation: 'bottom',\r\n                forceFixPosition: false,\r\n                multiselect: false,\r\n                showLookup: false,\r\n                addnew: false,\r\n                loading: false\r\n            };\r\n\r\n        // Shared variables:\r\n        that.element = el;\r\n        that.el = $(el);\r\n        that.suggestions = [];\r\n        that.badQueries = [];\r\n        that.selectedIndex = -1;\r\n        that.currentValue = that.element.value;\r\n        that.intervalId = 0;\r\n        that.cachedResponse = {};\r\n        that.onChangeInterval = null;\r\n        that.onChange = null;\r\n        that.isLocal = false;\r\n        that.suggestionsContainer = null;\r\n        that.noSuggestionsContainer = null;\r\n        that.options = $.extend({}, defaults, options);\r\n        that.classes = {\r\n            selected: 'autocomplete-selected',\r\n            suggestion: 'autocomplete-suggestion'\r\n        };\r\n        that.hint = null;\r\n        that.hintValue = '';\r\n        that.selection = null;\r\n\r\n        //  Added by Sushant\r\n        that.displayKey = options.displayKey ? options.displayKey : 'value';\r\n        that.filterKeys = options.filterKeys ? options.filterKeys : [that.displayKey];\r\n        that.optionFormat = options.optionFormat ? options.optionFormat : '{' + that.displayKey + '}';\r\n\r\n        that.setLookup = function (lookup) {\r\n            that.options.lookup = lookup;\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n            }\r\n        };\r\n        that.setLoading = function (flag) {\r\n            that.options.loading = flag;\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n            }\r\n        };\r\n\r\n        // Initialize and set options:\r\n        that.initialize();\r\n        that.setOptions(options);\r\n\r\n        //if (!that.options.addnew && !that.options.showLookup) {\r\n        //    that.onValueChange();\r\n        //}\r\n        if ($(that.element).is(\":focus\")) {\r\n            that.onValueChange();\r\n            that.suggest();\r\n        }\r\n    }\r\n\r\n    Autocomplete.utils = utils;\r\n    function isHTML(str) {\r\n        var a = document.createElement('div');\r\n        a.innerHTML = str;\r\n        for (var c = a.childNodes, i = c.length; i--;) {\r\n            if (c[i].nodeType == 1) return true;\r\n        }\r\n        return false;\r\n    }\r\n    $.Autocomplete = Autocomplete;\r\n    Autocomplete.formatResult = function (suggestion, currentValue, optionFormat) {\r\n        var str = suggestion.optionFormat ? suggestion.optionFormat : optionFormat;\r\n        str = getCompiledOption(str, suggestion);\r\n        if (isHTML(str)) {\r\n            return str;\r\n        }\r\n        var reg = new RegExp(currentValue, 'gi');\r\n        return str.replace(reg, function (val) { return '<strong>' + val + '</strong>' });\r\n    };\r\n\r\n    Autocomplete.prototype = {\r\n\r\n        killerFn: null,\r\n\r\n        initialize: function () {\r\n            var that = this,\r\n                suggestionSelector = '.' + that.classes.suggestion,\r\n                selected = that.classes.selected,\r\n                options = that.options,\r\n                container;\r\n\r\n            // Remove autocomplete attribute to prevent native suggestions:\r\n            that.element.setAttribute('autocomplete', 'off');\r\n\r\n            that.killerFn = function (e) {\r\n                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {\r\n                    that.killSuggestions();\r\n                    that.disableKillerFn();\r\n                }\r\n            };\r\n\r\n            // html() deals with many types: htmlString or Element or Array or jQuery\r\n            that.noSuggestionsContainer = $('<div class=\"autocomplete-no-suggestion\"></div>')\r\n                                          .html(this.options.noSuggestionNotice).get(0);\r\n\r\n            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\r\n\r\n            container = $(that.suggestionsContainer);\r\n\r\n            container.appendTo(options.appendTo);\r\n\r\n            // Only set width if it was provided:\r\n            if (options.width !== 'auto') {\r\n                container.width(options.width);\r\n            }\r\n\r\n            // Listen for mouse over event on suggestions list:\r\n            container.on('mouseover.autocomplete', suggestionSelector, function () {\r\n                that.activate($(this).data('index'));\r\n            });\r\n\r\n            // Deselect active element when mouse leaves suggestions container:\r\n            container.on('mouseout.autocomplete', function () {\r\n                that.selectedIndex = -1;\r\n                container.children('.' + selected).removeClass(selected);\r\n            });\r\n\r\n            // Listen for click event on suggestions list:\r\n            container.on('click.autocomplete', suggestionSelector, function () {\r\n                that.select($(this).data('index'));\r\n               // $(that.element).focus(); comment this line due to text overwrapping issue in autocomplete.\r\n            });\r\n\r\n            that.fixPositionCapture = function () {\r\n                if (that.visible) {\r\n                    that.fixPosition();\r\n                }\r\n            };\r\n\r\n            $(window).on('resize.autocomplete', that.fixPositionCapture);\r\n\r\n            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });\r\n            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('blur.autocomplete', function () { that.onBlur(); });\r\n            that.el.on('focus.autocomplete', function (e) { that.onFocus(); });\r\n            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('input.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('click.autocomplete', function (e) { e.stopPropagation(); });\r\n        },\r\n\r\n        onFocus: function () {\r\n            var that = this;\r\n            that.fixPosition();\r\n            //if (that.options.minChars === 0 && that.el.val().length === 0) {\r\n            //    that.onValueChange();\r\n            //}\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n                that.suggest();\r\n            }\r\n        },\r\n\r\n        onBlur: function () {\r\n            if ($(document.activeElement).hasClass('scroll-inner-wrapp')) {\r\n                return;\r\n            }\r\n            var that = this;\r\n            //if(that.suggestions.length > 0 && that.suggestions[0].value.toLowerCase() === that.el.val().toLowerCase().trim()) {\r\n            //    that.hide();\r\n            //    that.onSelect(0);\r\n            //}\r\n            if (that.selectedIndex === -1) {\r\n                that.hide();\r\n         //       return;\r\n           }\r\n            this.enableKillerFn();\r\n        },\r\n        \r\n        abortAjax: function () {\r\n            var that = this;\r\n            if (that.currentRequest) {\r\n                that.currentRequest.abort();\r\n                that.currentRequest = null;\r\n            }\r\n        },\r\n\r\n        setOptions: function (suppliedOptions) {\r\n            var that = this,\r\n                options = that.options;\r\n\r\n            $.extend(options, suppliedOptions);\r\n\r\n            that.isLocal = $.isArray(options.lookup);\r\n\r\n            if (that.isLocal) {\r\n                options.lookup = that.verifySuggestionsFormat(options.lookup);\r\n            }\r\n\r\n            options.orientation = that.validateOrientation(options.orientation, 'bottom');\r\n\r\n            // Adjust height, width and z-index:\r\n            $(that.suggestionsContainer).css({\r\n                'max-height': options.maxHeight + 'px',\r\n                'width': options.width + 'px',\r\n                'z-index': options.zIndex\r\n            });\r\n        },\r\n        \r\n        clearCache: function () {\r\n            this.cachedResponse = {};\r\n            this.badQueries = [];\r\n        },\r\n\r\n        clear: function () {\r\n            this.clearCache();\r\n            this.currentValue = '';\r\n            this.suggestions = [];\r\n        },\r\n\r\n        disable: function () {\r\n            var that = this;\r\n            that.disabled = true;\r\n            clearInterval(that.onChangeInterval);\r\n            that.abortAjax();\r\n        },\r\n\r\n        enable: function () {\r\n            this.disabled = false;\r\n        },\r\n\r\n        fixPosition: function () {\r\n            // Use only when container has already its content\r\n\r\n            var that = this,\r\n                $container = $(that.suggestionsContainer),\r\n                containerParent = $container.parent().get(0);\r\n            // Fix position automatically when appended to body.\r\n            // In other cases force parameter must be given.\r\n            if (containerParent !== document.body && !that.options.forceFixPosition) {\r\n                return;\r\n            }\r\n\r\n            // Choose orientation\r\n            var orientation = that.options.orientation,\r\n                containerHeight = $container.outerHeight(),\r\n                height = that.el.outerHeight(),\r\n                offset = that.el.offset(),\r\n                styles = { 'top': offset.top, 'left': offset.left };\r\n\r\n            if (orientation === 'auto') {\r\n                var viewPortHeight = $(window).height(),\r\n                    scrollTop = $(window).scrollTop(),\r\n                    topOverflow = -scrollTop + offset.top - containerHeight,\r\n                    bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);\r\n\r\n                orientation = (Math.max(topOverflow, bottomOverflow) === topOverflow) ? 'top' : 'bottom';\r\n            }\r\n\r\n            if (orientation === 'top') {\r\n                styles.top += -containerHeight;\r\n            } else {\r\n                styles.top += height;\r\n            }\r\n\r\n            // If container is not positioned to body,\r\n            // correct its position using offset parent offset\r\n            if(containerParent !== document.body) {\r\n                var opacity = $container.css('opacity'),\r\n                    parentOffsetDiff;\r\n\r\n                    if (!that.visible){\r\n                        $container.css('opacity', 0).show();\r\n                    }\r\n\r\n                parentOffsetDiff = $container.offsetParent().offset();\r\n                styles.top -= parentOffsetDiff.top;\r\n                styles.left -= parentOffsetDiff.left;\r\n\r\n                if (!that.visible){\r\n                    $container.css('opacity', opacity).hide();\r\n                }\r\n            }\r\n\r\n            // -2px to account for suggestions border.\r\n            if (that.options.width === 'auto') {\r\n                styles.width = (that.el.outerWidth() - 2) + 'px';\r\n            }\r\n\r\n            $container.css(styles);\r\n        },\r\n\r\n        enableKillerFn: function () {\r\n            var that = this;\r\n            $(document).on('click.autocomplete', that.killerFn);\r\n        },\r\n\r\n        disableKillerFn: function () {\r\n            var that = this;\r\n            $(document).off('click.autocomplete', that.killerFn);\r\n        },\r\n\r\n        killSuggestions: function () {\r\n            var that = this;\r\n            that.stopKillSuggestions();\r\n            that.intervalId = window.setInterval(function () {\r\n                if (that.visible) {\r\n                    that.el.val(that.currentValue);\r\n                    that.hide();\r\n                }\r\n                \r\n                that.stopKillSuggestions();\r\n            }, 50);\r\n        },\r\n\r\n        stopKillSuggestions: function () {\r\n            window.clearInterval(this.intervalId);\r\n        },\r\n\r\n        isCursorAtEnd: function () {\r\n            var that = this,\r\n                valLength = that.el.val().length,\r\n                selectionStart = that.element.selectionStart,\r\n                range;\r\n\r\n            if (typeof selectionStart === 'number') {\r\n                return selectionStart === valLength;\r\n            }\r\n            if (document.selection) {\r\n                range = document.selection.createRange();\r\n                range.moveStart('character', -valLength);\r\n                return valLength === range.text.length;\r\n            }\r\n            return true;\r\n        },\r\n\r\n        onKeyPress: function (e) {\r\n            var that = this;\r\n\r\n            // If suggestions are hidden and user presses arrow down, display suggestions:\r\n            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\r\n                that.suggest();\r\n                return;\r\n            }\r\n\r\n            if (that.disabled || !that.visible) {\r\n                return;\r\n            }\r\n\r\n            switch (e.which) {\r\n                case keys.ESC:\r\n                    that.el.val(that.currentValue);\r\n                    that.hide();\r\n                    break;\r\n                case keys.RIGHT:\r\n                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\r\n                        that.selectHint();\r\n                        break;\r\n                    }\r\n                    return;\r\n                case keys.TAB:\r\n                    if (that.hint && that.options.onHint) {\r\n                        that.selectHint();\r\n                        return;\r\n                    }\r\n                    if (that.suggestions.length > 0 && that.currentValue.length >= that.options.minChars && that.selectedIndex === -1 && that.currentValue.length > 0) {\r\n                        that.selectedIndex = 0;\r\n                    }\r\n                    if (that.selectedIndex === -1) {\r\n                        that.hide();\r\n                        return;\r\n                    }\r\n                    that.select(that.selectedIndex);\r\n                    if (that.options.tabDisabled === false) {\r\n                        return;\r\n                    }\r\n                    break;\r\n                case keys.RETURN:\r\n                    if (that.selectedIndex === -1) {\r\n                        that.hide();\r\n                        return;\r\n                    }\r\n                    that.select(that.selectedIndex);\r\n                    break;\r\n                case keys.UP:\r\n                    that.moveUp();\r\n                    break;\r\n                case keys.DOWN:\r\n                    that.moveDown();\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            // Cancel event if function did not return:\r\n            e.stopImmediatePropagation();\r\n            e.preventDefault();\r\n        },\r\n\r\n        onKeyUp: function (e) {\r\n            var that = this;\r\n\r\n            if (that.disabled) {\r\n                return;\r\n            }\r\n\r\n            switch (e.which) {\r\n                case keys.UP:\r\n                case keys.DOWN:\r\n                    return;\r\n            }\r\n\r\n            clearInterval(that.onChangeInterval);\r\n\r\n            if (that.currentValue !== that.el.val()) {\r\n                that.findBestHint();\r\n                if (that.options.deferRequestBy > 0) {\r\n                    // Defer lookup in case when value changes very quickly:\r\n                    that.onChangeInterval = setInterval(function () {\r\n                        that.onValueChange();\r\n                    }, that.options.deferRequestBy);\r\n                } else {\r\n                    that.onValueChange();\r\n                }\r\n            }\r\n        },\r\n\r\n        onValueChange: function () {\r\n            var that = this,\r\n                options = that.options,\r\n                value = that.el.val(),\r\n                query = that.getQuery(value);\r\n\r\n            if (that.selection && that.currentValue !== query) {\r\n                that.selection = null;\r\n                (options.onInvalidateSelection || $.noop).call(that.element);\r\n            }\r\n\r\n            clearInterval(that.onChangeInterval);\r\n            that.currentValue = value;\r\n            that.selectedIndex = -1;\r\n\r\n            // Check existing suggestion for the match before proceeding:\r\n            if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {\r\n                that.select(0);\r\n                return;\r\n            }\r\n\r\n            if (query.length < options.minChars) {\r\n                //Suggestion will not hide \r\n                if (!(that.options.showLookup || that.options.addnew))\r\n                    that.hide();\r\n            } else {\r\n                that.getSuggestions(query);\r\n            }\r\n        },\r\n\r\n        isExactMatch: function (query) {\r\n            return false;\r\n        },\r\n\r\n        getQuery: function (value) {\r\n            var delimiter = this.options.delimiter,\r\n                parts;\r\n\r\n            if (!delimiter) {\r\n                return value;\r\n            }\r\n            parts = value.split(delimiter);\r\n            return $.trim(parts[parts.length - 1]);\r\n        },\r\n\r\n        getSuggestionsLocal: function (query) {\r\n            var that = this,\r\n                options = that.options,\r\n                queryLowerCase = query.toLowerCase(),\r\n                filter = options.lookupFilter,\r\n                limit = parseInt(options.lookupLimit, 10),\r\n                data;\r\n\r\n            data = {\r\n                suggestions: $.grep(options.lookup, function (suggestion) {\r\n                    //  If suggestion is set to filterable false, it will not get filtered\r\n                    if ((suggestion.filterable != null || suggestion.filterable != undefined) && suggestion.filterable === false) {\r\n                        return true;\r\n                    }\r\n                    return filter(suggestion, query, queryLowerCase);\r\n                })\r\n            };\r\n            \r\n            if (limit && data.suggestions.length > limit) {\r\n                data.suggestions = data.suggestions.slice(0, limit);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        getSuggestions: function (q) {\r\n            var response,\r\n                that = this,\r\n                options = that.options,\r\n                serviceUrl = options.serviceUrl,\r\n                params,\r\n                cacheKey,\r\n                ajaxSettings;\r\n\r\n            options.params[options.paramName] = q;\r\n            params = options.ignoreParams ? null : options.params;\r\n\r\n            if (options.onSearchStart.call(that.element, options.params) === false) {\r\n                return;\r\n            }\r\n\r\n            if ($.isFunction(options.lookup)){\r\n                options.lookup(q, function (data) {\r\n                    that.suggestions = data.suggestions;\r\n                    that.suggest();\r\n                    options.onSearchComplete.call(that.element, q, data.suggestions);\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (that.isLocal) {\r\n                response = that.getSuggestionsLocal(q);\r\n            } else {\r\n                if ($.isFunction(serviceUrl)) {\r\n                    serviceUrl = serviceUrl.call(that.element, q);\r\n                }\r\n                cacheKey = serviceUrl + '?' + $.param(params || {});\r\n                response = that.cachedResponse[cacheKey];\r\n            }\r\n\r\n            if (response && $.isArray(response.suggestions)) {\r\n                that.suggestions = response.suggestions;\r\n                that.suggest();\r\n                options.onSearchComplete.call(that.element, q, response.suggestions);\r\n            } else if (!that.isBadQuery(q)) {\r\n                that.abortAjax();\r\n\r\n                ajaxSettings = {\r\n                    url: serviceUrl,\r\n                    data: params,\r\n                    type: options.type,\r\n                    dataType: options.dataType\r\n                };\r\n\r\n                $.extend(ajaxSettings, options.ajaxSettings);\r\n\r\n                that.currentRequest = $.ajax(ajaxSettings).done(function (data) {\r\n                    var result;\r\n                    that.currentRequest = null;\r\n                    result = options.transformResult(data, q);\r\n                    that.processResponse(result, q, cacheKey);\r\n                    options.onSearchComplete.call(that.element, q, result.suggestions);\r\n                }).fail(function (jqXHR, textStatus, errorThrown) {\r\n                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\r\n                });\r\n            } else {\r\n                options.onSearchComplete.call(that.element, q, []);\r\n            }\r\n        },\r\n\r\n        isBadQuery: function (q) {\r\n            if (!this.options.preventBadQueries){\r\n                return false;\r\n            }\r\n\r\n            var badQueries = this.badQueries,\r\n                i = badQueries.length;\r\n\r\n            while (i--) {\r\n                if (q.indexOf(badQueries[i]) === 0) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        hide: function () {\r\n            var that = this,\r\n                container = $(that.suggestionsContainer);\r\n\r\n            if ($.isFunction(that.options.onHide) && that.visible) {\r\n                that.options.onHide.call(that.element, container);\r\n            }\r\n\r\n            that.visible = false;\r\n                that.selectedIndex = -1;\r\n                clearInterval(that.onChangeInterval);\r\n                $(that.suggestionsContainer).hide();\r\n            that.signalHint(null);\r\n        },\r\n\r\n        suggest: function () {\r\n            //Skip condition when showlookup and addNew flag true\r\n            if (!(this.options.showLookup || this.options.addnew)) {\r\n                if (this.suggestions.length === 0) {\r\n                    if (this.options.showNoSuggestionNotice) {\r\n                        this.noSuggestions();\r\n                    } else {\r\n                        this.hide();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            var that = this,\r\n                options = that.options,\r\n                groupBy = options.groupBy,\r\n                formatResult = options.formatResult,\r\n                value = that.getQuery(that.currentValue),\r\n                className = that.classes.suggestion,\r\n                classSelected = that.classes.selected,\r\n                container = $(that.suggestionsContainer),\r\n                noSuggestionsContainer = $(that.noSuggestionsContainer),\r\n                beforeRender = options.beforeRender,\r\n                html = '',\r\n                category,\r\n                formatGroup = function (suggestion, index) {\r\n                        var currentCategory = suggestion.data[groupBy];\r\n\r\n                        if (category === currentCategory){\r\n                            return '';\r\n                        }\r\n\r\n                        category = currentCategory;\r\n\r\n                        return '<div class=\"autocomplete-group\"><strong>' + category + '</strong></div>';\r\n                    };\r\n\r\n            if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {\r\n                that.select(0);\r\n                return;\r\n            }\r\n\r\n\r\n            var formattedResult, formattedTitle;\r\n\r\n            //Loader HTMLs\r\n            var loaderHtmls = (that.options.loading && that.options.minChars <= that.currentValue.length) ? '<div class=\"autocomplete-suggestion center\">\\\r\n                    <div class=\"preloader-wrapper x-small field-suffix-loader active\">\\\r\n                        <div class=\"spinner-layer spinner-blue-only\">\\\r\n                            <div class=\"circle-clipper circle-clipper--x left\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                            <div class=\"gap-patch\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                            <div class=\"circle-clipper circle-clipper--x right\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                        </div>\\\r\n                    </div>\\\r\n                </div>':'';\r\n\r\n            // Build suggestions inner HTML:\r\n            var totalIndex = 0;\r\n            var innerWrapMaxHeight = (that.options.addnew == true || that.options.showLookup == true) ? that.options.maxHeight - 40 : that.options.maxHeight - 2;\r\n            html += \"<div class='scroll-inner-wrapp' style='max-height:\" + innerWrapMaxHeight + \"px;'>\";\r\n            if (!that.options.loading) {\r\n                $.each(that.suggestions, function (i, suggestion) {\r\n                    if (groupBy) {\r\n                        html += formatGroup(suggestion, value, i);\r\n                    }\r\n                    formattedResult = formatResult(suggestion, value, that.optionFormat);\r\n                    try {\r\n                        formattedTitle = escape(formattedResult);\r\n                        formattedTitle = unescape(formattedTitle.replace(/%28/g, 'openingroundbracket').replace(/%29/g, 'closingroundbracket'));\r\n                        //formattedTitle = $(formattedTitle).text() ? $(formattedTitle).text() : formattedTitle;\r\n                        formattedTitle = formattedTitle.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '');\r\n                    }\r\n                    catch (e) { }\r\n                    formattedTitle = formattedTitle.replace(/openingroundbracket/g, '(').replace(/closingroundbracket/g, ')');\r\n                    html += '<div class=\"' + className + '\" data-index=\"' + i + '\" title=\"' + unescape(formattedTitle) + '\">' + formattedResult + '</div>';\r\n                    totalIndex = i + 1;\r\n                });\r\n            } else {\r\n                html += loaderHtmls;\r\n            }\r\n            html += \"</div>\";\r\n\r\n            var noSuggestionsMessage = (that.suggestions.length < 1 && that.options.showNoSuggestionNotice && that.options.minChars <= that.currentValue.length) ? $('<i></i>').append(that.noSuggestionsContainer).html() : '';\r\n            if (that.options.addnew == true && that.options.showLookup == true) {\r\n                html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                html += '<div class=\"typeaHeade-add-new blue-text autocomplete-suggestion-half ' + className + '\" data-index=\"' + totalIndex + '\" title=\"' + that.options.addNewKey + '\"><i class=\"icon icon-fix-overlay iconSmall\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"' + that.options.addNewKey + '\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i></div>';\r\n                html += '<div class=\"typeaHeade-open-lookup autocomplete-suggestion-half ' + className + '\" data-index=\"' + ++totalIndex + '\"><a href=\"javascript:void(0)\" class=\"waves-effect waves-light\">' + that.options.showLookupKey + '</a></div>';\r\n            } else {\r\n                if (that.options.addnew == true) {\r\n                    html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                    html += '<div class=\"typeaHeade-add-new width-adj-to blue-text ' + className + '\" data-index=\"' + totalIndex + '\" title=\"' + that.options.addNewKey + '\"><i class=\"icon icon-fix-overlay iconSmall\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"' + that.options.addNewKey + '\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i></div>';\r\n            \t}\r\n                if (that.options.showLookup == true) {\r\n                    html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                    html += '<div class=\"typeaHeade-open-lookup width-adj-to ' + className + '\" data-index=\"' + ++totalIndex + '\"><a href=\"javascript:void(0)\" class=\"waves-effect waves-light\">' + that.options.showLookupKey + '</a></div>';\r\n            \t}\r\n            }\r\n            \r\n            this.adjustContainerWidth();\r\n\r\n            noSuggestionsContainer.detach();\r\n            container.html(html);\r\n\r\n            if ($.isFunction(beforeRender)) {\r\n                beforeRender.call(that.element, container);\r\n            }\r\n\r\n            that.fixPosition();\r\n            container.show();\r\n\r\n            // Select first value by default:\r\n            if (options.autoSelectFirst) {\r\n                that.selectedIndex = 0;\r\n                container.scrollTop(0);\r\n                container.children('.' + className).first().addClass(classSelected);\r\n            }\r\n\r\n            that.visible = true;\r\n            that.findBestHint();\r\n        },\r\n\r\n        noSuggestions: function() {\r\n             var that = this,\r\n                 container = $(that.suggestionsContainer),\r\n                 noSuggestionsContainer = $(that.noSuggestionsContainer);\r\n\r\n            this.adjustContainerWidth();\r\n\r\n            // Some explicit steps. Be careful here as it easy to get\r\n            // noSuggestionsContainer removed from DOM if not detached properly.\r\n            noSuggestionsContainer.detach();\r\n            container.empty(); // clean suggestions if any\r\n            container.append(noSuggestionsContainer);\r\n\r\n            that.fixPosition();\r\n\r\n            container.show();\r\n            that.visible = true;\r\n        },\r\n\r\n        adjustContainerWidth: function() {\r\n            var that = this,\r\n                options = that.options,\r\n                width,\r\n                container = $(that.suggestionsContainer);\r\n\r\n            // If width is auto, adjust width before displaying suggestions,\r\n            // because if instance was created before input had width, it will be zero.\r\n            // Also it adjusts if input width has changed.\r\n            // -2px to account for suggestions border.\r\n            if (options.width === 'auto') {\r\n                width = that.el.outerWidth() - 2;\r\n                container.width(width > 0 ? width : 300);\r\n            }\r\n        },\r\n\r\n        findBestHint: function () {\r\n            var that = this,\r\n                value = that.el.val().toLowerCase(),\r\n                bestMatch = null;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            $.each(that.suggestions, function (i, suggestion) {\r\n                var str = suggestion.optionFormat ? suggestion.optionFormat : that.optionFormat;\r\n                str = getCompiledOption(str, suggestion);\r\n                var foundMatch = str.toLowerCase().indexOf(value) === 0;\r\n                if (foundMatch) {\r\n                    bestMatch = suggestion;\r\n                }\r\n                return !foundMatch;\r\n            });\r\n\r\n            that.signalHint(bestMatch);\r\n        },\r\n\r\n        signalHint: function (suggestion) {\r\n            var hintValue = '',\r\n                that = this;\r\n            if (suggestion) {\r\n                var str = suggestion.optionFormat ? suggestion.optionFormat : that.optionFormat;\r\n                str = getCompiledOption(str, suggestion);\r\n                hintValue = that.currentValue + str.substr(that.currentValue.length);\r\n            }\r\n            if (that.hintValue !== hintValue) {\r\n                that.hintValue = hintValue;\r\n                that.hint = suggestion;\r\n                (this.options.onHint || $.noop)(hintValue);\r\n            }\r\n        },\r\n\r\n        verifySuggestionsFormat: function (suggestions) {\r\n            // If suggestions is string array, convert them to supported format:\r\n            if (suggestions.length && typeof suggestions[0] === 'string') {\r\n                return $.map(suggestions, function (value) {\r\n                    return { value: value, data: null };\r\n                });\r\n            }\r\n\r\n            return suggestions;\r\n        },\r\n\r\n        validateOrientation: function(orientation, fallback) {\r\n            orientation = $.trim(orientation || '').toLowerCase();\r\n\r\n            if($.inArray(orientation, ['auto', 'bottom', 'top']) === -1){\r\n                orientation = fallback;\r\n            }\r\n\r\n            return orientation;\r\n        },\r\n\r\n        processResponse: function (result, originalQuery, cacheKey) {\r\n            var that = this,\r\n                options = that.options;\r\n\r\n            result.suggestions = that.verifySuggestionsFormat(result.suggestions);\r\n\r\n            // Cache results if cache is not disabled:\r\n            if (!options.noCache) {\r\n                that.cachedResponse[cacheKey] = result;\r\n                if (options.preventBadQueries && result.suggestions.length === 0) {\r\n                    that.badQueries.push(originalQuery);\r\n                }\r\n            }\r\n\r\n            // Return if originalQuery is not matching current query:\r\n            if (originalQuery !== that.getQuery(that.currentValue)) {\r\n                return;\r\n            }\r\n\r\n            that.suggestions = result.suggestions;\r\n            that.suggest();\r\n        },\r\n\r\n        activate: function (index) {\r\n            var that = this,\r\n                activeItem,\r\n                selected = that.classes.selected,\r\n                container = $(that.suggestionsContainer),\r\n                children = container.find('.' + that.classes.suggestion);\r\n\r\n            container.find('.' + selected).removeClass(selected);\r\n\r\n            that.selectedIndex = index;\r\n\r\n            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\r\n                activeItem = children.get(that.selectedIndex);\r\n                $(activeItem).addClass(selected);\r\n                return activeItem;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        selectHint: function () {\r\n            var that = this,\r\n                i = $.inArray(that.hint, that.suggestions);\r\n\r\n            that.select(i);\r\n        },\r\n\r\n        select: function (i) {\r\n            var that = this;\r\n            if(!that.options.multiselect) //prevent hiding suggetions for multiselect\r\n                that.hide();\r\n            that.onSelect(i);\r\n        },\r\n\r\n        moveUp: function () {\r\n            var that = this;\r\n\r\n            if (that.selectedIndex === -1) {\r\n                return;\r\n            }\r\n\r\n            if (that.selectedIndex === 0) {\r\n                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\r\n                that.selectedIndex = -1;\r\n                that.el.val(that.currentValue);\r\n                that.findBestHint();\r\n                return;\r\n            }\r\n\r\n            that.adjustScroll(that.selectedIndex - 1);\r\n        },\r\n\r\n        moveDown: function () {\r\n            var that = this;\r\n\r\n            if (that.selectedIndex === (that.suggestions.length - 1)) {\r\n                return;\r\n            }\r\n\r\n            that.adjustScroll(that.selectedIndex + 1);\r\n        },\r\n\r\n        adjustScroll: function (index) {\r\n            var that = this,\r\n                activeItem = that.activate(index);\r\n\r\n            if (!activeItem) {\r\n                return;\r\n            }\r\n\r\n            var offsetTop,\r\n                upperBound,\r\n                lowerBound,\r\n                heightDelta = $(activeItem).outerHeight();\r\n\r\n            offsetTop = activeItem.offsetTop;\r\n            upperBound = $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop();\r\n            lowerBound = upperBound + that.options.maxHeight - heightDelta;\r\n\r\n            if (offsetTop < upperBound) {\r\n                $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop(offsetTop);\r\n            } else if (offsetTop > lowerBound) {\r\n                $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop(offsetTop - that.options.maxHeight + heightDelta);\r\n            }\r\n\r\n            if (!that.options.preserveInput) {\r\n                that.el.val(that.getValue(that.suggestions[index].value));\r\n            }\r\n            that.signalHint(null);\r\n        },\r\n\r\n        onSelect: function (index) {\r\n            var that = this;\r\n            //Added new callback for show lookup and Add New\r\n            var getTotalSuggested = that.suggestions.length;\r\n            if (index > getTotalSuggested && that.options.showLookup == true) {\r\n                that.hide();\r\n                if ($.isFunction(that.options.onClickShowLookup)) {\r\n                    that.options.onClickShowLookup.call(that.element, \"ShowLookup\");\r\n                    return;\r\n                }\r\n            }\r\n            if (index == getTotalSuggested && that.options.addnew == true) {\r\n                that.hide();\r\n                if ($.isFunction(that.options.onClickAddNew)) {\r\n                    that.options.onClickAddNew.call(that.element, \"AddNEW\");\r\n                    return;\r\n                }\r\n            }\r\n            var onSelectCallback = that.options.onSelect,\r\n                suggestion = that.suggestions[index];\r\n\r\n            that.currentValue = suggestion.value ? that.getValue(suggestion.value) : that.getValue(suggestion[that.options.displayFormat.slice(1, that.options.displayFormat.length - 1)]);\r\n\r\n            if (that.currentValue !== that.el.val() && !that.options.preserveInput) {\r\n                that.el.val(that.currentValue);\r\n            }\r\n\r\n            that.signalHint(null);\r\n            that.suggestions = [];\r\n            that.selection = suggestion;\r\n\r\n            if ($.isFunction(onSelectCallback)) {\r\n                onSelectCallback.call(that.element, suggestion);\r\n            }\r\n        },\r\n\r\n        getValue: function (value) {\r\n            var that = this,\r\n                delimiter = that.options.delimiter,\r\n                currentValue,\r\n                parts;\r\n\r\n            if (!delimiter) {\r\n                return value;\r\n            }\r\n\r\n            currentValue = that.currentValue;\r\n            parts = currentValue.split(delimiter);\r\n\r\n            if (parts.length === 1) {\r\n                return value;\r\n            }\r\n\r\n            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\r\n        },\r\n\r\n        dispose: function () {\r\n            var that = this;\r\n            that.el.off('.autocomplete').removeData('autocomplete');\r\n            that.disableKillerFn();\r\n            $(window).off('resize.autocomplete', that.fixPositionCapture);\r\n            $(that.suggestionsContainer).remove();\r\n        }\r\n    };\r\n\r\n    // Create chainable jQuery plugin:\r\n    $.fn.autocomplete = $.fn.devbridgeAutocomplete = function (options, args) {\r\n        var dataKey = 'autocomplete';\r\n        // If function invoked without argument return\r\n        // instance of the first matched element:\r\n        if (arguments.length === 0) {\r\n            return this.first().data(dataKey);\r\n        }\r\n\r\n        return this.each(function () {\r\n            var inputElement = $(this),\r\n                instance = inputElement.data(dataKey);\r\n\r\n            if (typeof options === 'string') {\r\n                if (instance && typeof instance[options] === 'function') {\r\n                    instance[options](args);\r\n                }\r\n            } else {\r\n                // If instance already exists, destroy it:\r\n                if (instance && instance.dispose) {\r\n                    instance.dispose();\r\n                }\r\n                instance = new Autocomplete(this, options);\r\n                inputElement.data(dataKey, instance);\r\n            }\r\n        });\r\n    };\r\n    $(document).on('click', function (e) {\r\n        if ($('.autocomplete-suggestions').is(':visible')) {\r\n            $('.autocomplete-suggestions').hide();\r\n        }\r\n    });\r\n}));","(function () {\r\n    'use strict';\r\n    var smartTimeLineID = 0;\r\n    angular.module('SMART2').directive('smartTimeline', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', 'APPCONSTANTS', function ($rootScope, $timeout, $translate, ScrollTo, lookup, APPCONSTANTS) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                readonly: '@',\r\n                dateFormat: '@',\r\n                selectable: '@',\r\n                showCurrentTime: '@',\r\n                zoomMin: '@',\r\n                zoomMax: '@',\r\n                marginSpace: '@',\r\n                onSelect: '&',\r\n                onLoad: '&',\r\n                groupOrder: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var cultureCode = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n                var readonly = (scope.readonly == null || scope.readonly == \"undefined\") ? false : (scope.readonly == 'true') ? true : false;\r\n                var selectable = (scope.selectable == null || scope.selectable == \"undefined\") ? true : (scope.selectable == 'true') ? true : false;\r\n                var showCurrentTime = (angular.isDefined(scope.showCurrentTime)) ? (scope.showCurrentTime == 'true') ? true : false : true;\r\n                scope.ngModel = scope.ngModel ? scope.ngModel : null;\r\n                var defaultMin = 1000 * 60 * 60 * 24, defaultMax = 1000 * 60 * 60 * 24 * 31 * 3;\r\n                var zoomMin = angular.isDefined(scope.zoomMin) ? (scope.zoomMin != \"\") ? parseInt(scope.zoomMin) : defaultMin : defaultMin; // Default 1Day\r\n                var zoomMax = angular.isDefined(scope.zoomMax) ? (scope.zoomMax != \"\") ? parseInt(scope.zoomMax) : defaultMax : defaultMax;  // Default 3Month\r\n                var marginSpace = (scope.marginSpace == null || scope.marginSpace == \"undefined\") ? 20 : parseInt(scope.marginSpace, 10);\r\n                var timeline = null;\r\n                var groupOrderFunc = function (a, b) {\r\n                    if (angular.isDefined(attrs.groupOrder)) {\r\n                        return scope.groupOrder({ $a: a, $b: b });\r\n                    } else {\r\n                        if (angular.isDefined(scope.ngModel[a.id]) && angular.isDefined(scope.ngModel[b.id])) {\r\n                            return scope.ngModel[a.id].lines[0].start - scope.ngModel[b.id].lines[0].start;\r\n                        }\r\n                    }\r\n                };\r\n                scope.timelineID = \"TimeLineId-\" + smartTimeLineID;\r\n                smartTimeLineID++;\r\n                function isTodayInBetween(s, e) {\r\n                    s = parseInt(s);\r\n                    e = parseInt(e);\r\n                    var d = new Date();\r\n                    var c = d.getTime();\r\n                    if (s < c && c < e) { // running \r\n                        return 0;\r\n                    }\r\n                    if (e < c) { // ended\r\n                        return -1;\r\n                    }\r\n                    if (c < s) { // not started\r\n                        return 1;\r\n                    }\r\n                }\r\n                function getAngularDateFormat(format) {\r\n                    return format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                }\r\n                scope.$watch(\"ngModel\", function (newVal) {\r\n                    scope.ngModel = newVal;\r\n                    //var dateFormat = scope.dateFormat ? scope.dateFormat : 'dd/MM/yyyy';\r\n                    scope.getCultureCode = function (culturecode) {\r\n                        switch (culturecode) {\r\n                            case 'en-US':\r\n                                return 'MM/dd/yyyy hh:mm a';\r\n                                break;\r\n                            case 'zh-CN':\r\n                                return 'yyyy-MM-dd hh:mm a';\r\n                                break;\r\n                            case 'zh-CHT':\r\n                                return 'yyyy-MM-dd hh:mm a';\r\n                                break;\r\n                            case 'da-DK':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'de-DE':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'en-AU':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'es-ES':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'fr-FR':\r\n                                return 'yyyy/MM/dd hh:mm a';\r\n                                break;\r\n                            case 'it-IT':\r\n                                return 'yyyy/MM/dd hh:mm a';\r\n                                break;\r\n                            case 'ja-JP':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'ko-KR':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'nl-NL':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'pl-PL':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'pt-PT':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'ru-RU':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'sv-SE ':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'th-TH ':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            default:\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                        }\r\n                    };\r\n\r\n                    var dateFormat = scope.getCultureCode(cultureCode) ? scope.getCultureCode(cultureCode) : 'dd/MM/yyyy hh:mm a';\r\n                    dateFormat = getAngularDateFormat(dateFormat);\r\n                    var groups = [];\r\n                    var items = [];\r\n                    var groupItemPeer = [];\r\n                    function formateData() {\r\n                        moment.locale(cultureCode);\r\n                        groups = [];\r\n                        items = [];\r\n                        var k = 0;\r\n                        for (var i = 0; i < scope.ngModel.length; i++) {\r\n                            groups.push({\r\n                                id: i,\r\n                                content: scope.ngModel[i].title,\r\n                                className: (typeof scope.ngModel[i].className === 'undefined') ? \"\" : scope.ngModel[i].className,\r\n                                style: (typeof scope.ngModel[i].style === 'undefined') ? \"\" : scope.ngModel[i].style\r\n                            });\r\n\r\n                            for (var j = 0; j < scope.ngModel[i].lines.length; j++) {\r\n                                var obj = {\r\n                                    id: k,\r\n                                    group: i\r\n                                }\r\n                                groupItemPeer[k] = j;\r\n                                var flagS = false, flagE = false;\r\n                                var classNamee = \"vis-timeline-cstyle-\" + (i % 10);\r\n                                if (scope.ngModel[i].lines[j].start != null && scope.ngModel[i].lines[j].start != \"\" && typeof scope.ngModel[i].lines[j].start != \"undefined\") {\r\n                                    obj.start = new Date(scope.ngModel[i].lines[j].start * 1);\r\n                                    obj.startFormated = moment.unix(scope.ngModel[i].lines[j].start / 1000).format(dateFormat);\r\n                                    flagS = true;\r\n                                }\r\n                                if (scope.ngModel[i].lines[j].end != null && scope.ngModel[i].lines[j].end != \"\" && typeof scope.ngModel[i].lines[j].end != \"undefined\") {\r\n                                    obj.end = new Date(scope.ngModel[i].lines[j].end * 1);\r\n                                    obj.endFormated = moment.unix(scope.ngModel[i].lines[j].end / 1000).format(dateFormat);\r\n                                    flagE = true;\r\n                                }\r\n                                if (flagS && flagE) {\r\n                                    var respo = isTodayInBetween(obj.start.getTime(), obj.end.getTime());\r\n                                    if (respo == -1) {\r\n                                        classNamee = classNamee + \" line-ended\";\r\n                                    }\r\n                                    if (respo == 1) {\r\n                                        classNamee = classNamee + \" line-not-started\";\r\n                                    }\r\n                                }\r\n                                var passedClassName = (typeof scope.ngModel[i].lines[j].className === 'undefined') ? \"\" : scope.ngModel[i].lines[j].className;\r\n                                classNamee = classNamee + \" \" + passedClassName;\r\n                                obj.className = classNamee;\r\n                                var barStyle = (typeof scope.ngModel[i].lines[j].style === 'undefined') ? \"\" : scope.ngModel[i].lines[j].style;\r\n                                obj.style = barStyle;\r\n                                if (typeof scope.ngModel[i].lines[j].content === 'undefined') {\r\n                                    obj.content = \"<div class='padding5' smart-tooltip title='\" + obj.startFormated + \" - \" + obj.endFormated + \"' position='top' delay='500' message= \" + $translate.instant('tooltipMsg') + \"></div>\";\r\n                                } else {\r\n                                    obj.content = scope.ngModel[i].lines[j].content;\r\n                                }\r\n                                items.push(obj);\r\n                                k++;\r\n                            }\r\n                        }\r\n                    }\r\n                    formateData();\r\n                    $timeout(function () {\r\n                        var groupSet = new vis.DataSet(groups);\r\n                        var itemSet = new vis.DataSet(items);\r\n                        var container = document.getElementById(scope.timelineID);\r\n                        if (timeline == null) {\r\n                            timeline = new vis.Timeline(container);\r\n                            container.addEventListener(\"touchmove\", function (e) {\r\n                                // to avoid original touch device (iPad, tablet) effects like pinch to zoom in/out. \r\n                                e.preventDefault();\r\n                            });\r\n                        }\r\n                        timeline.setGroups(groupSet);\n                        timeline.setItems(itemSet);\r\n                        var options = {\r\n                            editable: readonly,\r\n                            groupOrder: groupOrderFunc,\r\n                            selectable: selectable,\r\n                            showCurrentTime: showCurrentTime,\r\n                            zoomMin: zoomMin,\r\n                            zoomMax: zoomMax,\r\n                            margin: { item: marginSpace },\r\n                            locales: {},\r\n                            locale: cultureCode,\r\n                            format: {\r\n                            \tminorLabels: {\r\n                            \t\tmillisecond: 'SSS',\r\n                            \t\tsecond: 's',\r\n                            \t\tminute: 'hh:mm a',\r\n                            \t\thour: 'hh:mm a',\r\n                            \t\tweekday: 'ddd D',\r\n                            \t\tday: 'D',\r\n                            \t\tmonth: 'MMM',\r\n                            \t\tyear: 'YYYY'\r\n                            \t},\r\n                            \tmajorLabels: {\r\n                            \t\tmillisecond: 'hh:mm:ss a',\r\n                            \t\tsecond: 'D MMMM hh:mm a',\r\n                            \t\tminute: 'ddd D MMMM',\r\n                            \t\thour: 'ddd D MMMM',\r\n                            \t\tweekday: 'MMMM YYYY',\r\n                            \t\tday: 'MMMM YYYY',\r\n                            \t\tmonth: 'YYYY',\r\n                            \t\tyear: ''\r\n                            \t}\r\n                            }\r\n                        };\r\n                        options.locales[cultureCode] = {\r\n                            current: $translate.instant('labelCurrent'),\r\n                            time: $translate.instant('labelTime')\r\n                        };\r\n                        timeline.setOptions(options);\r\n                        if (attrs.fittobound === 'true') {\r\n                            timeline.fit(options);\r\n                        }\n                        $timeout(function () {\r\n                            if (angular.isFunction(scope.onLoad)) {\r\n                                scope.onLoad();\r\n                            }\r\n                        }, 2000);\r\n                        $(timeline.currentTime.bar).append('<span class=\"timelineLabelToday\">' + $translate.instant('timelineLabelToday') + '</span>');\r\n                        timeline.on('select', function (obj) {\r\n                            var props = timeline.getEventProperties(obj.event);\r\n                            var groupObj = (props.group != null) ? scope.ngModel[props.group] : null;\r\n                            var itemObj = (props.item != null) ? scope.ngModel[props.group].lines[groupItemPeer[props.item]] : null;\r\n                            var returnObj = {\r\n                                item: itemObj,\r\n                                group: groupObj,\r\n                                properties: props\r\n                            }\r\n\r\n                            if (angular.isFunction(scope.onSelect)) {\r\n                                scope.onSelect({\r\n                                    $res: returnObj\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }, true);\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTimeline/smartTimelineTemplate.html'\r\n        };\r\n    }]);\r\n})();","  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Tooltip\n   * @description This directive is useful for creating a tooltip.\n   * \n   * @attr {String} position\n   *    Tooltip position. Possible values are left, right, top, bottom. Default value is 'left'.\n   * @attr {Number} delay\n   *    Tooltip delay. Default value is '250'.\n   * @attr {String} tooltip\n   *    Tooltip message\n   * \n   * @example\n   Usage:\n   <span smart-tooltip position=\"top\" delay=\"500\" message=\"Tooltip message\"></span>\n   */\n\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartTooltip', [function () {\r\n        return {\r\n            restrict: 'A',\n            replace: true,\n            scope: {\r\n                customStyle: \"=\"\r\n            },\n            link: function (scope, element, attrs) {\r\n                var onMessage = attrs.$observe('message', function (value) {\r\n                    element.attr('data-tooltip', value);\r\n                });\n                element.attr('data-position', attrs.position ? attrs.position : 'left');\n                element.attr('data-delay', attrs.delay ? attrs.delay : '50');\n                element.attr('data-tooltip', attrs.message ? attrs.message : '');\n                element.addClass('tooltipped');\n                if (typeof scope.customStyle != \"undefined\") {\r\n                    var optionsObject = {\r\n                        \"customStyle\": scope.customStyle\r\n                    };\r\n                }\n                element.tooltip(optionsObject);\n                element.on('click', function () {\r\n                    element.trigger('mouseleave');\r\n                });\n                //  Destroy tooltip on scope destroy\n                scope.$on('$destroy', function () {\r\n                    element.tooltip('remove');\r\n                    onMessage();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();","/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Typeahead\r\n * @description This directive is used for creating a typeahead component ie Type and search plus select.\r\n * \r\n * @attr {String} label\r\n *    Label to be displayed for identification of this ui element\r\n * @attr {String} placeholder\r\n *    Hint text to be displayed\r\n * @attr {String} info-icon\r\n *    To show a custom icon\r\n * @attr {Array} ng-model\r\n *    Default values to be displayed (Note: Pass array only if multiselect is set to true. Else pass an object.)\r\n *  @attr {Array} options\r\n *    Values to be shown in suggestions\r\n * @attr {Boolean} multiselect\r\n *    To allow/disallow multiple selections\r\n * @attr {Boolean} addnew\r\n *    To allow add new option\r\n * @attr {Boolean} show-lookup\r\n *    To make autocomplete plus lookup available\r\n * @attr {Boolean} focus \r\n *    If set to true, this ui element will be focused\r\n * @attr {Boolean} validate\r\n *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n * @attr {Array} rules \r\n *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n * @attr {String} error-message \r\n *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n * @attr {Boolean} is-mandatory \r\n *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n * @attr {Boolean} disable \r\n *    If set to true, field cannot be edited. Blur and focus events will not be fired (default behaviour).\r\n * @attr {Function} on-focus\r\n *    Callback function when ui element's focus event is fired\r\n * @attr {Function} on-blur\r\n *    Callback function when ui element's blur event is fired\r\n * @attr {Function} on-key-up\r\n *    Callback function when ui element's keyup event is fired\r\n * @attr {Function} on-key-down\r\n *    Callback function when ui element's keydown event is fired\r\n * @attr {Function} on-key-press\r\n *    Callback function when ui element's keypress event is fired\r\n * @attr {Function} on-select\r\n *    Callback function when a value is selected \r\n * @attr {Function} callback-on-iconclick\r\n *    Callback function for icon on the right side\r\n * @attr {Function} call-addnew\r\n *    Callback function for add new icon\r\n * \r\n *    \r\n * @example\r\n Static:\r\n Controller:\r\n      $scope.options = [\r\n\t\t{\r\n\t\t\t\"UserId\": 28360,\r\n\t\t\t\"UserName\": \"SRUser1@outlook.com\",                  \r\n\t\t\t\"FirstName\": \"SR\",                  \r\n\t\t\t\"LastName\": \"User1\"\r\n\t\t}, {                 \r\n\t\t\t\"UserId\": 28977,                  \r\n\t\t\t\"UserName\": \"SRUser1@outlook.com11\",\r\n\t\t\t\"FirstName\": \"Test\",\r\n\t\t\t\"LastName\": \"TestLastName\"    \r\n\t\t}, {                  \r\n\t\t\t\"UserId\": 57900,                  \r\n\t\t\t\"UserName\": \"SRUser1@outlook.com234\",                  \r\n\t\t\t\"FirstName\": \"Test23\",                  \r\n\t\t\t\"LastName\": \"test23lastname\"                 \r\n\t\t}\r\n\t]; \r\n\t$scope.selected = [{            \r\n\t\t\"UserId\": 28360,               \r\n\t\t\"UserName\": \"SRUser1@outlook.com\",               \r\n\t\t\"FirstName\": \"SR\",               \r\n\t\t\"LastName\": \"User1\"              \r\n\t}];  \r\n Usage:\r\n      <smart-typeahead class=\"col s2\" multiselect=\"true\" addnew=\"true\" showlookup=\"true\" placeholder=\"Place Holder\" ng-model=\"selected\" options=\"options\" filterkeys=\"['FirstName', 'LastName']\" optionformat=\"<span>{FirstName} {LastName}</span>\" displayformat=\"{FirstName} {LastName}\" label=\"{{typeaheadLabel}}\" callback-on-iconclick=\"callAfterClickedOnRightSideIcon(e)\" info-icon=\"#icon_CirclePlus\" call-addnew=\"callAfterAddNewFuncClick(e)\"></smart-typeahead>       \r\n */\r\n(function () {\r\n    'use strict';\r\n    var typeaheadId = 0;\r\n    angular.module('SMART2').directive('smartTypeahead', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', 'RuleEngine', '$window', function ($rootScope, $timeout, $translate, ScrollTo, lookup, RuleEngine, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: 'ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                callbackOnIconClick: '&',\r\n                callAddNew: '&',\r\n                lookupOpen: '&',\r\n                lookupHide: '&',\r\n                onScrollEnd: '&',\r\n                onScrollTop: '&',\r\n                onScrollInProgress: '&',\r\n                searchtextKeyUp: '&',\r\n                errorMessage: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                align: '@',\r\n                format: '@',    //  date format\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                maxlength: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                desckey: '@',\r\n                multiselect: '@',\r\n                showLookup: '@',\r\n                infoIcon: '@',\r\n                infoIconTooltip: '@',\r\n                addnew: '@',\r\n                titleofmodel: '@',\r\n                selecttypeoption: '=?',\r\n                showInfoIcon: '=?',\r\n                isSupplier: '=?',\r\n                defaultselectoption: '@',\r\n                defaultselectiontext: '=?',\r\n                width: '@',\r\n                height: '@',\r\n                isDefaultMandatory: '@',\r\n                minCharForTrigger: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                errorModel: '=?',\r\n                loading: '=?',\r\n                minMultiselect: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                isLazyLoadingEnabled: '@',\r\n                stopFilterOnKey: '@',\r\n                searchCount: '@',\r\n                requireLoader: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModel) {\r\n                scope.placeholder = (scope.placeholder == undefined || scope.placeholder == null) ? '' : scope.placeholder;\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                scope.label = (scope.label == undefined || scope.label == null) ? '' : scope.label;\r\n                scope.textAlign = (scope.align == undefined || scope.align == null) ? 'left' : scope.align;\r\n                scope.infoIconFlag = (scope.infoIcon == undefined || scope.infoIcon == null) ? false : true;\r\n                scope.titleofmodel = (scope.titleofmodel == undefined || scope.titleofmodel == null) ? $translate.instant('titleOfModel') : scope.titleofmodel;\r\n                scope.infoIconTooltip = (scope.infoIconTooltip == undefined || scope.infoIconTooltip == null) ? '' : scope.infoIconTooltip;\r\n                scope.isLazyLoadingEnabled = angular.isDefined(scope.isLazyLoadingEnabled) ? scope.isLazyLoadingEnabled : false;\r\n                var multiselect = (scope.multiselect == undefined || scope.multiselect == null) ? false : scope.multiselect == \"true\" ? true : false;\r\n                var minMultiselect = (scope.minMultiselect == undefined || scope.minMultiselect == null) ? { event: false } : { event: true, value: scope.minMultiselect };\r\n                var showLookup = (scope.showLookup == undefined || scope.showLookup == null) ? true : scope.showLookup == \"true\" ? true : false;\r\n                var addnew = (scope.addnew == undefined || scope.addnew == null) ? false : scope.addnew == \"true\" ? true : false;\r\n                var readonly = (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false;\r\n                var minCharForTrigger = scope.minCharForTrigger ? parseInt(scope.minCharForTrigger) : 3;\r\n                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                var loading = angular.isDefined(scope.loading) ? scope.loading : false;\r\n                if (noSuggestionNotice == '') {\r\n                    showNoSuggestion = false;\r\n                }\r\n                //showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                var number, rulesValidationEvent;\r\n                var showLookupKey = $translate.instant('showLookupLabel'),\r\n                    addNewKey = $translate.instant('addNew');\r\n                scope.disabled = \"\";\r\n                scope.showInfoIcon = (scope.showInfoIcon == undefined || scope.showInfoIcon == null) ? false : scope.showInfoIcon;\r\n                var isInfoTipEnable = attrs.showInfoTip == 'true' ? true : false,\r\n                    checkInfoToolTip = function () {\r\n                        if (isInfoTipEnable) {\r\n                            scope.infotipData = scope.displayModel.replace(/,/g, '  ').trim().replace(/  /g, '<br>');\r\n                        } else {\r\n                            scope.infotipData = \"\";\r\n                        }\r\n                    };\r\n\r\n                var selectedArr = [], newOptionsSelected = [], newArr = [], copyArray = [], selectedArrIndex;\r\n                if (readonly) {\r\n                    scope.disabled = \"disabled\";\r\n                }\r\n                var uniqueIDGenerator = function () {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xx2xxpxxoxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                function checkIfActive() {\r\n                    if (scope.placeholder === '' && (scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                scope.isActive = checkIfActive();\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.typeaheadId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    var typeaheadId = uniqueIDGenerator();\r\n                    scope.typeaheadId = 'typeahead-' + typeaheadId;\r\n                }\r\n                scope.labelFortypeaheadId = 'label-for-' + scope.typeaheadId;\r\n\r\n                /*\r\n\t\t\t\t* Skip tab key focus, if field is readonly\r\n\t\t\t\t*/\r\n               var cancelMe =  setTimeout(function () {\r\n                    if (readonly) {\r\n                        angular.element('#' + scope.typeaheadId).attr('tabindex', -1);\r\n                    }\r\n                    clearTimeout(cancelMe);\r\n                    cancelMe = null;\r\n                });\r\n\r\n                var unbindFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        var clrTout = setTimeout(function () {\r\n                            angular.element('#' + scope.labelFortypeaheadId).trigger('click');\r\n                            clearTimeout(clrTout);\r\n                            clrTout = null;\r\n                        });\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                var changeTimeout, keyUpTimeout, keyDownTimeout, keyPressTimeout;\r\n                scope.ngChange = function (e) {\r\n                    scope.isActive = checkIfActive();\r\n\r\n                    if (changeTimeout) {\r\n                        $timeout.cancel(changeTimeout);\r\n                    }\r\n                    changeTimeout = $timeout(function () {\r\n                        scope.onChange({\r\n                            $event: {\r\n                                data: angular.element('#' + scope.typeaheadId)\r\n                            }\r\n                        });\r\n                    }, 500);\r\n                };\r\n                scope.ngFocus = function (e) {\r\n                    scope.isActive = true;\r\n                    scope.onFocus({ $event: e });\r\n                    autoCompleteField.suggestions.length = 0;\r\n                };\r\n                scope.ngBlur = function (e) {\r\n                    var model = getModel();\r\n                    setValues(model);\r\n\r\n                    if (multiselect && model.length > 0) {\r\n                        scope.multiselectFlag = true;\r\n                    }\r\n\r\n                    scope.isActive = checkIfActive();\r\n                    scope.onBlur({ $event: e });\r\n                    if (model == undefined || model == null || model == '' || Object.getOwnPropertyNames(model).length === 0) {\r\n                        scope.showInfoIcon = false;\r\n                    } else {\r\n                        scope.showInfoIcon = true;\r\n                    }\r\n\r\n                    // Needed to add $timeout for not showing error message before show lookup open.\r\n                    var tout = $timeout(function () {\r\n                        if (!showLookupTrigger) {\r\n                            scope.validateRules();\r\n                        } else {\r\n                            showLookupTrigger = false;\r\n                        }\r\n                        $timeout.cancel(tout);\r\n                        tout = null;\r\n                    }, 200);\r\n                };\r\n                var preventKeyArray = [37, 38, 39, 40];\r\n                var showLookupTrigger = false;\r\n                scope.ngKeyUp = function (e) {\r\n                    if (multiselect && e.target.value == \"\") {\r\n                        setModel([]);\r\n                    }\r\n                    if (!multiselect && e.target.value == \"\") {\r\n                        setModel(null);\r\n                    }\r\n                    scope.showInfoIcon = false;\r\n                    if (keyUpTimeout) {\r\n                        $timeout.cancel(keyUpTimeout);\r\n                    }\r\n                    keyUpTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyUp({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                    DuplicateData(scope.displayModel, e);\r\n                };\r\n                scope.ngKeyDown = function (e) {\r\n                    scope.showInfoIcon = false;\r\n                    if (keyDownTimeout) {\r\n                        $timeout.cancel(keyDownTimeout);\r\n                    }\r\n                    keyDownTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyDown({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                    var formattedData = getFormattedData(newOptionsSelected);\r\n                    copyArray = angular.copy(formattedData).map(function (data) { return data.value.toLowerCase(); });\r\n                    DuplicateData(scope.displayModel, e);\r\n                };\r\n                scope.ngKeyPress = function (e) {\r\n                    if (keyPressTimeout) {\r\n                        $timeout.cancel(keyPressTimeout);\r\n                    }\r\n                    keyPressTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyPress({ $event: e });\r\n                        }\r\n\r\n                        if (e.charCode == 13) {\r\n                            scope.onEnter({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                   DuplicateData(scope.displayModel, e);\r\n                };\r\n\r\n                scope.clickedOnIcon = function (e) {\r\n                    scope.callbackOnIconClick({ $event: e });\r\n                };\r\n\r\n                scope.validateRules = function () {\r\n                    var model = getModel();\r\n                    if (scope.readonly == 'true') {\r\n                        scope.isActive = true;\r\n                        return;\r\n                    }\r\n                    if (scope.$eval(scope.isMandatory) && !scope.clienterror && (Object.keys(model).length == 0 || model == null || model == undefined || model == '' || model.id == 0)) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                        scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n                        return;\r\n                    }\r\n                    if (scope.clienterror) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                        scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                        return;\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    scope.errorModel = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\r\n                            ruleLlen = rules.length;\r\n                        for (var i = 0; i < ruleLlen; i++) {\r\n                            var tRule = rules[i];\r\n                            if (typeof tRule == 'object') {\r\n                                if (eval((tRule.rule).replace(/this/g, 'scope.displayModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = tRule.error;\r\n                                    scope.errorModel = tRule.error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    RuleEngine.isValid(tRule, function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = $translate.instant(e.errorData.error);\r\n                                        scope.errorModel = $translate.instant(e.errorData.error);\r\n                                        isFoundInvalid = true;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var unbindValidate = scope.$watchGroup(['validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                    if (newVal[0] || newVal[1] != oldVal[1]) {\r\n                        scope.validateRules();\r\n                    }\r\n\r\n                    if (newVal[2] != oldVal[2] || newVal[3] != oldVal[3]) {\r\n                        if (scope.showinfo || scope.showwarning) {\r\n                            element.hasClass('input-field').addClass('field-has-icon');\r\n                        }\r\n                        else {\r\n                            element.hasClass('.input-field').removeClass('field-has-icon');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (scope.clienterror) {\r\n                    scope.validateRules();\r\n                }\r\n\r\n                function setModel(value, mode) {\r\n                    value = !value ? (multiselect ? [] : {}) : value;\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        if (multiselect && mode == \"autocomplete\") {\r\n                            var v = value;\r\n                            value = ngModel.$modelValue;\r\n                            value.push(v);\r\n                        };\r\n                        ngModel.$setViewValue(value);\r\n                        ngModel.$render();\r\n                        if (mode != \"autocomplete\") {\r\n                            setValues(value);\r\n                        };\r\n                    } else {\r\n                        if (multiselect && mode == \"autocomplete\") {\r\n                            scope.ngModel.push(value)\r\n                        } else if (multiselect === true) {\r\n                            if (typeof scope.ngModel == \"string\") {\r\n                                scope.ngModel = value;\r\n                            } else {\r\n                                if (scope.ngModel == value) {\r\n                                    value = angular.copy(value);\r\n                                }\r\n                                scope.ngModel.length = 0;\r\n                                [].push.apply(scope.ngModel, value);\r\n                            };\r\n                        } else {\r\n                            scope.ngModel = value;\r\n                        }\r\n                        setValues(scope.ngModel);\r\n                    }\r\n                };\r\n\r\n                function getModel() {\r\n                    var model;\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        model = ngModel.$modelValue;\r\n                    } else {\r\n                        model = scope.ngModel;\r\n                    }\r\n                    return model;\r\n                }\r\n\r\n                function DuplicateData(editTest, event) {\r\n\r\n                    var newArrLen = '';\r\n                    if (editTest || event.keyCode == 188 || event.type == \"keyup\") {\r\n                        var str_array = editTest.split(','),\r\n                            strLen = str_array.length;\r\n                        for (var i = 0; i < strLen; i++) {\r\n                            str_array[i] = str_array[i].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\r\n                        }\r\n                        angular.forEach(str_array, function (val) {\r\n                            var indexabc = copyArray.indexOf(val.toLowerCase());\r\n                            selectedArrIndex = newOptionsSelected.map(function (data) { return data.value.toLowerCase(); }).indexOf(val.toLowerCase());\r\n\r\n                            if (selectedArrIndex != -1 && newArr.indexOf(val) == -1) {\r\n                                selectedArr.push(selectedArrIndex);\r\n                                var ab = newOptionsSelected.splice(selectedArrIndex, 1)[0];\r\n                                newArr.push(ab);\r\n                                ab._$index = indexabc;\r\n                            }\r\n                        });\r\n                        if (event) {\r\n                            if (event.keyCode == 8 || event.keyCode == 46 || editTest.length == 3) {\r\n                            angular.forEach(str_array, function (val, v1, v2) {\r\n                                var isPresent = newArr.map(function (data) { return data.value; }).indexOf(val);\r\n                                if (isPresent == -1) {\r\n                                    newArrLen = newArr.length;\r\n                                    for (var i = 0 ; i < newArrLen; i++) {\r\n                                        var tNewArr = newArr[i];\r\n                                        if (newOptionsSelected.indexOf(tNewArr) == -1 && v2.indexOf(tNewArr.value) == -1) {\r\n                                            newOptionsSelected.splice(tNewArr._$index, 0, tNewArr);\r\n                                            newArr.splice(i, 1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                        }\r\n                    }\r\n                    else {\r\n                        newArrLen = newArr.length;\r\n                        for (var i = 0 ; i < newArrLen; i++) {\r\n                            if (newOptionsSelected.indexOf(newArr[i]) == -1) {\r\n                                newOptionsSelected.splice(newArr[i]._$index, 0, newArr[i]);\r\n                                newArr.splice(i, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                function getFormattedData(data) {\r\n                    var dataLength = data.length;\r\n                    if (!data || dataLength == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < dataLength; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{'),\r\n                                parentSplitLen = parentSplit.length;\r\n                            for (var j = 0; j < parentSplitLen; j++) {\r\n                                var childSplit = parentSplit[j].split('}'),\r\n                                    childSplitLen = childSplit.length;\r\n                                for (var k = 0; k < childSplitLen; k++) {\r\n                                    var childObj = childSplit[k];\r\n                                    if (childObj.indexOf('.') > 0 || data[i].hasOwnProperty(childObj)) {\r\n                                        str = str.replace(new RegExp(\"{\" + childObj + \"}\", \"ig\"), eval('data[i].' + childObj));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n                var filterKeys;\r\n                if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                    filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                }\r\n                else {\r\n                    filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                }\r\n\r\n                //set optionFormat displayFormat related to filterKeys incase undefined\r\n                scope.filterKeys = scope.$eval(scope.filterkeys);\r\n                function getOpFormate() {\r\n                    var opFor = \"\",\r\n                        filterKeyLen = filterKeys.length;\r\n                    for (var i = 0; i < filterKeyLen; i++) {\r\n                        opFor = opFor + \"{\" + filterKeys[i] + \"} \";\r\n                    }\r\n                    if (opFor == \"\") {\r\n                        return \"{title}\";\r\n                    }\r\n                    opFor.trim();\r\n                    return opFor;\r\n                }\r\n\r\n                function getDispFormate() {\r\n                    var opDisp = \"<span>\",\r\n                        filterKeyLen = filterKeys.length;\r\n                    for (var i = 0; i < filterKeyLen; i++) {\r\n                        opDisp = opDisp + \"{\" + filterKeys[i] + \"} \";\r\n                    }\r\n                    if (opDisp == \"<span>\") {\r\n                        return \"{title}\";\r\n                    }\r\n                    opDisp.trim();\r\n                    opDisp = opDisp + \"</span>\";\r\n                    return opDisp;\r\n                }\r\n\r\n                var optionFormat = scope.optionformat ? scope.optionformat : getDispFormate();\r\n                var displayFormat = scope.displayformat ? scope.displayformat : getOpFormate();\r\n\r\n                function getDisplayData(data) {\r\n                    if (data == undefined || data == null || data == '') {\r\n                        return '';\r\n                    }\r\n                    var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                    try {\r\n                        var parentSplit = str.split('{'),\r\n                            parentSplitLen = parentSplit.length;\r\n                        for (var j = 0; j < parentSplitLen; j++) {\r\n                            var childSplit = parentSplit[j].split('}'),\r\n                                childSplitLen = childSplit.length;\r\n                            for (var k = 0; k < childSplitLen; k++) {\r\n                                var tChild = childSplit[k];\r\n                                if (tChild.indexOf('.') > 0 || data.hasOwnProperty(tChild)) {\r\n                                    evalResult = eval('data.' + tChild);\r\n                                    evaluatedKeysCounter++;\r\n                                    if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                        evalResult = '';\r\n                                        nullKeysCounter++;\r\n                                    }\r\n                                    str = str.replace(new RegExp(\"{\" + tChild + \"}\", \"ig\"), evalResult);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (evaluatedKeysCounter == nullKeysCounter) {\r\n                            str = '';\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                    return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                }\r\n                //Function return the array of proprrties Input:\"{abc} {dfg}\"; Output:[\"abc\",\"dfg\"]\r\n                function getFormatedArray(formatString) {\r\n                    var str = formatString.trim();\r\n                    try {\r\n                        var parentSplit = str.split('{'), propArray = [],\r\n                            tLen = parentSplit.length;\r\n                        for (var j = 0; j < tLen; j++) {\r\n                            var childSplit = parentSplit[j].split('}');\r\n                            if (j != 0) {\r\n                                propArray.push(childSplit[0].trim());\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    return propArray === undefined || propArray === null || propArray === 'undefined' || propArray === 'null' ? '' : propArray;\r\n                };\r\n                var formatedArray = getFormatedArray(displayFormat);\r\n                \r\n                var delimiterVal = null;\r\n                if (multiselect == true) {\r\n                    delimiterVal = /(,|;)\\s*/;\r\n                }\r\n                var unbindOptions, autoCompleteField;\r\n               var toutOptions =  $timeout(function () {\r\n                    unbindOptions = scope.$watch('options', function (newOptions) {\r\n                        try {\r\n                            newOptionsSelected = newOptions;\r\n                            var formattedData = getFormattedData(newOptionsSelected);\r\n                            copyArray = angular.copy(formattedData).map(function (data) { return data.value.toLowerCase(); });\r\n                            if (!readonly) {\r\n                                if (!$('#' + scope.typeaheadId).devbridgeAutocomplete()) {\r\n                                    autoCompleteField = $('#' + scope.typeaheadId).devbridgeAutocomplete({\r\n                                        filterKeys: filterKeys,\r\n                                        optionFormat: optionFormat,\r\n                                        displayFormat: displayFormat,\r\n                                        lookup: formattedData,\r\n                                        width: scope.width,\r\n                                        maxHeight: scope.height,\r\n                                        multiselect: multiselect,\r\n                                        showLookup: showLookup,\r\n                                        addnew: addnew,\r\n                                        minChars: minCharForTrigger,\r\n                                        delimiter: delimiterVal,\r\n                                        showNoSuggestionNotice: showNoSuggestion,\r\n                                        noSuggestionNotice: noSuggestionNotice,\r\n                                        loading: loading,\r\n                                        minMultiselect: minMultiselect,\r\n                                        showLookupKey: showLookupKey,\r\n                                        addNewKey: addNewKey,\r\n                                        onSelect: function (suggestion) {\r\n                                            angular.element('#' + scope.labelFortypeaheadId).trigger('click');\r\n                                            scope.$evalAsync(function () {\r\n                                                if (multiselect == true) {\r\n                                                    scope.displayModel = \"\";\r\n                                                    setModel(suggestion, 'autocomplete');\r\n                                                    angular.forEach(getModel(), function (val) {\r\n                                                        scope.displayModel = scope.displayModel + val.value + ', ';\r\n                                                    });\r\n                                                    DuplicateData(scope.displayModel);\r\n                                                } else {\r\n                                                    scope.displayModel = getDisplayData(suggestion);\r\n                                                    setModel(suggestion, 'autocomplete');\r\n                                                }\r\n                                                var tOutTemp = $timeout(function () {\r\n                                                    scope.onSelect(suggestion);\r\n                                                    $timeout.cancel(tOutTemp);\r\n                                                    tOutTemp = null;\r\n                                                });\r\n                                            });\r\n                                        },\r\n                                        onClickAddNew: function (e) {\r\n                                            if (addnew) {\r\n                                                scope.callAddNew({ $event: e });\r\n                                                document.body.style.height = document.body.scrollHeight + 2 + \"px\";\r\n                                                var tTout = setTimeout(function () {\r\n                                                    window.scrollTo(0, (document.body.scrollTop + 1));\r\n                                                    window.scrollTo(0, (document.body.scrollTop - 1));\r\n                                                    document.body.style.height = \"\";\r\n                                                    clearTimeout(tTout);\r\n                                                    tTout = null;\r\n                                                });\r\n                                            }\r\n                                        },\r\n                                        onClickShowLookup: function (e) {\r\n                                            if (showLookup) {\r\n                                                scope.openLookup();\r\n                                            }\r\n                                        }\r\n                                    }).devbridgeAutocomplete();\r\n\r\n                                    $(autoCompleteField.element).focus(function (e) {\r\n                                        alignLookUp.call(this, e, autoCompleteField);\r\n                                        var drp = $window.lastOpenedDropdownConfig;\r\n                                        if (drp && !drp.activates.is(\":hidden\") && !angular.element(this).closest(drp.activates).length) { // focused textBox shuld not be within the Materlized dropDown thenonly close the Materlized dropDown.\r\n                                            //Materlized dropdown should be closed on focus on autoComplatetextbox\r\n                                            drp.origin.trigger('close');\r\n                                        }\r\n                                    }).keyup(function (e) {\r\n                                        alignLookUp.call(this, e, autoCompleteField);\r\n                                    });\r\n\r\n                                    //Closing the suggestions on scroll to prevent overlapping issue\r\n                                    angular.element($window).scroll(function (e) {\r\n                                        if (autoCompleteField.visible) {\r\n                                            autoCompleteField.hide();\r\n                                        }\r\n                                    });\r\n                                    //End of closing the suggestions on scroll to prevent overlapping issue\r\n\r\n                                  \r\n                                } else {\r\n                                    $('#' + scope.typeaheadId).devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    });\r\n                    var unbindLoading = scope.$watch('loading', function (newVal, oldVal) {\r\n                        if (newVal == true || newVal == false) {\r\n                            $('#' + scope.typeaheadId).devbridgeAutocomplete().setLoading(newVal);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function alignLookUp(e) {\r\n                    var _this = $(this),\r\n                        scrollTop = $(\"html\").scrollTop() || $(\"body\").scrollTop(),\r\n                        elPosition = _this.offset(),\r\n                        elHeight = _this.outerHeight(),\r\n                        lookup = $(autoCompleteField.suggestionsContainer),\r\n                        lookupPosition = lookup.offset(),\r\n                        lookupHeight = lookup.outerHeight(),\r\n                        isOutOfBound = ((elPosition.top - scrollTop) + elHeight + lookupHeight) > window.innerHeight;\r\n\r\n                    lookup.css(\"opacity\", 0);\r\n                    if (isOutOfBound) { // if lookup list is going out of window\r\n                        if (autoCompleteField.options.orientation != \"top\") {\r\n                            autoCompleteField.options.orientation = \"top\";\r\n                            autoCompleteField.fixPosition();\r\n                        }\r\n                    } else {\r\n                        if (autoCompleteField.options.orientation == \"top\") {\r\n                            autoCompleteField.options.orientation = \"bottom\";\r\n                            autoCompleteField.fixPosition();\r\n                        }\r\n                    }\r\n                    lookup.css(\"opacity\", 1);\r\n                };\r\n                scope.openLookup = function () {\r\n                    showLookupTrigger = true;\r\n                    var len = newArr.length;\r\n                    for (var i = 0 ; i < len; i++) {\r\n                        var tItem = newArr[i];\r\n                        if (newOptionsSelected.indexOf(tItem) == -1) {\r\n                            newOptionsSelected.splice(tItem._$index, 0, tItem);\r\n                            newArr.splice(i, 1);\r\n                        }\r\n                    }\r\n                    if (scope.readonly === 'true' && !scope.mutiselectVal[1]) return false;\r\n\r\n                    if ($.isFunction(scope.lookupOpen)) {\r\n                        scope.lookupOpen();\r\n                    }\r\n                    var lookupConfig = {\r\n                        modelData: lookup.getTempModel() || getModel(),\r\n                        config: {\r\n                            mutliselect: multiselect,\r\n                            displayProperties: formatedArray,\r\n                            options: scope.options,\r\n                            descriptionKey: scope.desckey,\r\n                            addnew: addnew,\r\n                            onKeyUp: attrs.searchtextKeyUp ? scope.searchtextKeyUp : '',\r\n                            titleOfModel: scope.titleofmodel,\r\n                            defaultSelectOption: scope.defaultselectoption,\r\n                            defaultSelectionText: scope.defaultselectiontext,\r\n                            selectTypeOption: scope.selecttypeoption,\r\n                            readonly: (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false,\r\n                            isMandatory: scope.isMandatory,\r\n                            isDefaultMandatory: scope.isDefaultMandatory,\r\n                            errorModel: scope.errorModel,\r\n                            minMultiselect: minMultiselect,\r\n                            label: scope.label,\r\n                            searchFilterKey: scope.$eval(scope.filterkeys),\r\n                            isLazyLoadingEnabled: scope.isLazyLoadingEnabled,\r\n                            stopFilterOnKey: scope.stopFilterOnKey,\r\n                            searchCount: scope.searchCount,\r\n                            requireLoader: scope.requireLoader\r\n                        }\r\n                    }\r\n                    var lookupTout = $timeout(function () {\r\n                        lookup.open(lookupConfig, function (response) {\r\n                            if (response.addnew) {\r\n                                if ($.isFunction(scope.callAddNew)) {\r\n                                    scope.callAddNew();\r\n                                }\r\n                            }\r\n                            setModel(response.result);\r\n                            scope.defaultselectiontext = response.defaultSelectionText;\r\n                            scope.selecttypeoption = response.selectTypeOption;\r\n                            scope.errorModel = response.errorModel;\r\n                            scope.validateRules();\r\n                            if ($.isFunction(scope.lookupHide)) {\r\n                                scope.lookupHide({ data: response });\r\n                            }\r\n                        });\r\n                        lookup.onScrollEnd(function () {\r\n                            scope.onScrollEnd({});\r\n                        });\r\n                        lookup.onScrollTop(function () {\r\n                            scope.onScrollTop({});\r\n                        });\r\n                        lookup.onScrollInProgress(function () {\r\n                            scope.onScrollInProgress({});\r\n                        });\r\n                        $timeout.cancel(lookupTout);\r\n                        lookupTout = null;\r\n                    });\r\n                }\r\n                scope.$on('$destroy', function () {\r\n                    if ($('#' + scope.typeaheadId).devbridgeAutocomplete()) {\r\n                        $('#' + scope.typeaheadId).devbridgeAutocomplete().dispose();\r\n                    }\r\n                    destroyEverythingElse();\r\n                });\r\n\r\n                scope.multiselectFlag = false;\r\n\r\n                function setValues(newVal) {\r\n                     scope.mutiselectVal = [\"\"];\r\n                    if (angular.isDefined(newVal) && newVal != null) {\r\n                        var valuee = \"\",\r\n                        totalEl = newVal.length;\r\n                        if (multiselect == true) {\r\n                            if (totalEl > 0) {\r\n\r\n                                if (minMultiselect.event) {\r\n                                    if ((totalEl == minMultiselect.value) && (getModel().length == minMultiselect.value)) {\r\n                                        scope.validateRules();\r\n                                    }\r\n                                }\r\n\r\n                                if (showLookup) {\r\n                                    scope.multiselectFlag = true;\r\n                                }\r\n                                if (scope.defaultselectoption) {\r\n                                    if (!scope.defaultselectiontext) {\r\n                                        scope.defaultselectiontext = getDisplayData(newVal[0]).replace(/(^\\s*)|(\\s*$)/gi, \"\");\r\n                                        scope.mutiselectVal = [scope.defaultselectiontext + \" (Default)\"];\r\n                                    }\r\n                                    for (var i = 0; i < totalEl; i++) {\r\n                                        if (newVal[i].name === scope.defaultselectiontext) {\r\n                                            scope.mutiselectVal = [getDisplayData(newVal[i]) + \" (Default)\"]; break;\r\n                                        }\r\n                                    }\r\n\r\n                                } else {\r\n                                    scope.mutiselectVal = [getDisplayData(newVal[0])];\r\n                                }\r\n\r\n                                if (totalEl > 1) {\r\n                                    scope.mutiselectVal.push(\"+\" + (totalEl - 1) + \" More\");\r\n                                }\r\n                            } else {\r\n                                scope.multiselectFlag = false;\r\n                            }\r\n                            for (var i = 0; i < totalEl; i++) {\r\n                                if (valuee && totalEl > 1) {\r\n                                    valuee += \",\" + getDisplayData(newVal[i]);\r\n                                }\r\n                                else {\r\n                                    valuee += getDisplayData(newVal[i])\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        else {\r\n                            valuee = getDisplayData(newVal);\r\n                            scope.showInfoIcon = (valuee == '' || scope.isSupplier) ? false: true;\r\n                        }\r\n                        scope.displayModel = valuee.trim();\r\n                    }\r\n                    scope.isActive = checkIfActive();\r\n                    checkInfoToolTip();\r\n                }\r\n\r\n                var unbindNumber = scope.$watch(\"ngModel\", function (newVal) {\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        setValues(ngModel.$modelValue);\r\n                    } else {\r\n                        setValues(newVal);\r\n                    }\r\n                });\r\n                function destroyEverythingElse() {\r\n                    element.off(); // deregister all event handlers\r\n                    $('#' + scope.typeaheadId).off();\r\n                    $('#' + scope.labelFortypeaheadId).off();\r\n                    if (unbindFocus)\r\n                        unbindFocus();\r\n                    if (angular.isFunction(unbindOptions))\r\n                        unbindOptions();\r\n                    if (unbindNumber)\r\n                        unbindNumber();\r\n                    // Removing contents of HTML from DOM\r\n                    $('#' + scope.typeaheadId).remove();\r\n                    $('#' + scope.labelFortypeaheadId).remove();\r\n                    $timeout.cancel(toutOptions);\r\n\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTypeahead/smartTypeaheadTemplate.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartUiGrid', ['$timeout', '$filter', 'gridConfigProvider', 'APPCONSTANTS', 'httpService', 'uiGridConstants', '$injector',\n    function ($timeout, $filter, gridConfigProvider, APPCONSTANTS, httpService, uiGridConstants, $injector) {\r\n        return {\r\n            restrict: 'AE',\n            scope: {\r\n                colDef: '@',\n                model: '=',\n                callback: '&',\n                focusRowCol: '@',\n                validationService: '@',\n                searchTerm: '@',\n                otherGridOptions: '@',\n                api: '=',\n                onRenderingStart: '&',\n                onRenderingFinish: '&',\n                dynamicPaginationPageSizes: '=',\r\n                dynamicItemTotal: '='\r\n\n            },\n            link: function (scope, element, attr) {\r\n\n                var paginationOptions = {\r\n                    pageNumber: 1,\n                    pageSize: 12,\n                    sort: null\r\n                };\n\n                if (scope.validationService != undefined) {\r\n                    var service = $injector.get(scope.validationService);\n                    scope.$parent[scope.validationService] = service;\n                    scope.cellClassFunction = scope.validationService + \".validateGridRow\";\n                    scope.cellEditableConditionFunction = scope.validationService + \".isEditableGridRow\";\r\n                }\n                var gridInstance;\n                var defaultGridOptions = {\r\n                    paginationPageSizes: scope.dynamicPaginationPageSizes ? scope.dynamicPaginationPageSizes : [10, 25, 50, 75],\n                    paginationPageSize: scope.dynamicPaginationPageSizes && scope.dynamicPaginationPageSizes[0] ? scope.dynamicPaginationPageSizes[0] : 10,\n                    useExternalPagination: scope.dynamicPaginationCallback ? true : false,\n                    enableCellEditOnFocus: true,\n                    enableFiltering: true,\n                    enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,\n                    treeRowHeaderAlwaysVisible: false,\n                    showTreeExpandNoChildren: false\r\n                };\n                var callback = scope.$eval(scope.callback);\n                var cellClassFunction = scope.$parent.$eval(scope.cellClassFunction);\n                var cellEditableConditionFunction = scope.$parent.$eval(scope.cellEditableConditionFunction);\n\n                scope.gridConfig = defaultGridOptions;\n                var modifiedColDef;\n\n                if (scope.api) {\r\n                    scope.api.getActiveColumns = function () {\r\n                        return scope.gridConfig.columnDefs;\r\n                    };\r\n                }\n\n                scope.$watch('focusRowCol', function (n, o) {\r\n                    if(n){\r\n                        gridInstance.cellNav.scrollToFocus(n.row.entity,n.col.colDef)\r\n                    }\r\n                });\n\n                scope.$watch('scope.dynamicItemTotal', function (n, o) {\r\n                    scope.gridConfig.totalItems = scope.dynamicItemTotal;\r\n                });\n\n                scope.$watch('searchTerm', function (n, o) {\r\n                    if (n && typeof n == 'string') {\r\n                        gridInstance.grid.refresh();\r\n                    }\r\n                });\n\n                scope.$watch('colDef', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        modifiedColDef = gridConfigProvider.getMassagedGirdConfig(scope.$eval(n), scope, cellClassFunction, cellEditableConditionFunction);\n                        _.each(modifiedColDef, function (def, idx, defs) {\r\n                            if (def.customTreeAggregationFinalizerFn) {\r\n                                def.customTreeAggregationFinalizerFn = eval(\"(\" + def.customTreeAggregationFinalizerFn + \")\");\r\n                            }\n                            if (def.customTreeAggregationFn) {\r\n                                def.customTreeAggregationFn = eval(\"(\" + def.customTreeAggregationFn + \")\");\r\n                            }\r\n                        });\n                        scope.gridConfig.columnDefs = null;\n                        scope.gridConfig.columnDefs = modifiedColDef;\n\n                        var groupingCol = _.filter(scope.gridConfig.columnDefs, function (col) { return col.isGrouped;})\n                        if (groupingCol && groupingCol.length > 0 && gridInstance) {\r\n                            gridInstance.grouping.clearGrouping();\n                            _.each(groupingCol, function (col) {\r\n                                gridInstance.grouping.groupColumn(col.field);\r\n                            });\r\n                        }\r\n                    }\r\n                });\n\n                scope.$watch('otherGridOptions', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        var modifiedOtherGridOptions = angular.merge({}, scope.gridConfig, scope.$eval(n));\n                        _.each(modifiedOtherGridOptions.appScopeProvider, function (prop, i, props) {\r\n                            modifiedOtherGridOptions.appScopeProvider[i] = eval(prop);\r\n                        });\n                        scope.gridConfig = null;\n                        scope.gridConfig = modifiedOtherGridOptions;\r\n                    }\r\n                });\n\n                scope.$watch('model', function (newModel) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (!newModel) {\r\n                        scope.gridConfig.data = [];\n                        return;\r\n                    }\n                    var treeColumns = treeViewColumnsToBeCreated(scope.gridConfig.columnDefs);\n                    if (treeColumns.length > 0) {\r\n                        scope.gridConfig = angular.extend(scope.gridConfig, {\r\n                            showTreeRowHeader: true,\n                            enableRowHeaderSelection: true, // Display checkboxes on every row when it's true\n                            showTreeExpandNoChildren: false\r\n                        });\n                        scope.gridConfig.data = assignTreeLevel($filter('orderBy')(newModel, treeColumns[0].field), treeColumns[0].field);\r\n                    }\n                    else {\r\n                        scope.gridConfig.data = newModel;\r\n                    }\r\n                });\r\n\r\n\r\n                if (!gridInstance) {\r\n                    scope.gridConfig.onRegisterApi = getGridInstanceCallback;\r\n                }\n\n\n                /*\n                 *  This function will check and return an array of columns for tree view\n                 */\n                var treeViewColumnsToBeCreated = function (colDefs) {\r\n                    return _.filter(colDefs, function (col) {\r\n                        return col.isTree;\r\n                    });\r\n                };\n\n                /*\n                 *  Sort grid data\n                 */\n                var sortData = function (data, key) {\r\n                    return data.slice(0).sort(function (a, b) {\r\n                        return (eval('a.' + key) > eval('b.' + key)) ? 1 : (eval('a.' + key) < eval('b.' + key)) ? -1 : 0;\r\n                    });\r\n                };\n\n                /*\n                 *  Assign tree view since it is required to create a tree view\n                 */\n                var assignTreeLevel = function (data, key) {\r\n                    var loopedItems = [];\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i].$$treeLevel = 0;\n                        if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                            data[i].$$treeLevel = 1;\r\n                        }\n                        if (eval('data[i].' + key).toString().indexOf('.') > -1) {\r\n                            var SplitLevelArr = eval('data[i].' + key).toString().split('.');\n                            data[i].$$treeLevel = SplitLevelArr.length - 1;\n                            if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                                data[i].$$treeLevel = parseInt(data[i].$$treeLevel) + 1;\r\n                            }\r\n                        }\n                        loopedItems.push(eval('data[i].' + key));\r\n                    }\n                    return data;\r\n                };\n\n                function getCellValue(row, col) {\r\n                    var data = gridInstance.grid.getCellDisplayValue(row, col);\n                    return data ? data.toString() : \"\";\r\n                };\n\n                function outerSearchCallback(rows, cols) {\r\n                    if (scope.searchTerm && typeof scope.searchTerm == 'string' && scope.searchTerm.length > 0) {\r\n                        _.each(rows, function (row, rowIndex) {\r\n                            var match = false;\n                            _.each(cols, function (col) {\r\n                                var cellValue = $filter('translate')(getCellValue(row, col));\n                                if (col.colDef.attributes && col.colDef.attributes.type && col.colDef.attributes.type.toLowerCase() == \"date\") {\r\n                                    var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\n                                    formattedDate = formattedDate.split('+');\n                                    formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\n                                    var month = formattedDate.getMonth() + 1 + '';\n                                    if (month.length === 1) {\r\n                                        month = 0 + '' + month;\r\n                                    }\n                                    formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\n                                    var decession = formattedDate.toLowerCase().trim().indexOf(escape(scope.searchTerm).replace(/%5C/g, '').trim()) > -1;\n                                    if (decession) {\r\n                                        match = true;\r\n                                    }\r\n                                }\n                                else if (cellValue.match(new RegExp(scope.searchTerm, \"i\"))) {\r\n                                    match = true;\r\n                                }\r\n                            });\n                            row.visible = match;\r\n                        });\r\n                    };\n                    return rows;\r\n                };\n\n                function onCheckboxSelect(row) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridCheckBoxDispatcher', {\r\n                            \"row\": row\r\n                        });\r\n                    }\r\n                }\n\n                //  this timeout prevents rows rendered callback being fired multiple times\n                var rowsRenderedTimeout;\n                function getGridInstanceCallback(instance) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('gridInstance', instance);\r\n                    }\n                    gridInstance = instance;\n                    if (typeof scope.api != undefined && scope.api != null && scope.api.rowSelectionCallback) {\r\n                        scope.gridConfig.isRowSelectable = scope.api.rowSelectionCallback;\n                        //gridInstance.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                    }\n                    gridInstance.grid.registerRowsProcessor(outerSearchCallback, 200);\n                    gridInstance.core.on.rowsRendered(scope, function (row) {\r\n                        if (rowsRenderedTimeout) {\r\n                            $timeout.cancel(rowsRenderedTimeout);\n                            rowsRenderedTimeout = undefined;\r\n                        }\n                        rowsRenderedTimeout = $timeout(function () {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridRowsRenderedDispatcher', {\r\n                                    \"row\": row\r\n                                });\r\n                            }\n                            setHeightForGrid();\n                            angular.isFunction(scope.onRenderingFinish) && scope.onRenderingFinish();\r\n                        }, 500);\r\n                    });\n\n\n                    gridInstance.selection.on.rowSelectionChanged(scope, onCheckboxSelect);\n                    gridInstance.cellNav.on.navigate(scope, function (newRowcol, oldRowCol) {\r\n                        if (newRowcol.col.colDef.isRegFocusCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridFocusColumnDispatcher', {\r\n                                    \"focusedRowColObj\": newRowcol,\r\n                                    \"bluredRowColObj\": oldRowCol,\r\n                                    \"instance\": gridInstance\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n                    gridInstance.edit.on.afterCellEdit(scope, function (rowEntity, colDef) {\n                        //if (colDef.isRegUpdateCol) {\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridUpdateColumnDispatcher', {\r\n                                \"rowModel\": rowEntity,\n                                \"colDef\": colDef,\n                                \"instance\": gridInstance\r\n                            });\r\n                        }\n                        // }\n                    });\n                    gridInstance.edit.on.beginCellEdit(scope, function (rowEntity, colDef) {\n                        //var focusedCell = gridInstance.cellNav.getFocusedCell();\n                        //if (!focusedCell.col.cellClass) {\n                        //    gridInstance.cellNav.scrollToFocus(rowEntity, colDef);\n                        //}\n\n                        switch (colDef.uiType) {\r\n                            case \"dropdown\":\n                                if (colDef.attributes.serviceObj && colDef.attributes.options.length == 0) {\r\n                                    getDataFolDropDown(colDef, rowEntity)\r\n                                } else {\r\n                                    colDef.attributes.options.map(function (x) { x[colDef.attributes.dataKey] = $filter('translate')(x[colDef.attributes.dataKey]) });\n                                    scope.dropDownOptions = colDef.attributes.options;\r\n                                }\n                                break;\r\n                        };\n\n                        if (colDef.isRegBeginEditCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridBeginEditColumnDispatcher', {\r\n                                    \"rowModel\": rowEntity,\n                                    \"colDef\": colDef\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n\n                    gridInstance.pagination.on.paginationChanged(scope, function (newPage, pageSize) {\n                        //alert(newPage+\"\");\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridDynamicPaginationCallback', {\r\n                                \"gridConfig\": scope.gridConfig,\n                                \"index\": newPage,\n                                \"pageSize\": pageSize\r\n                            });\r\n                        }\r\n                    });\r\n                };\n\n                function setHeightForGrid() {\r\n                    var rowCount = gridInstance.core.getVisibleRows(gridInstance.grid).length;\n                    var height;\n                    if (rowCount == 0) return;\n                    if (scope.gridConfig.rowHeight > 0) {\r\n                        height = ((rowCount + 1) * scope.gridConfig.rowHeight) + 54;\r\n                    } else {\r\n                        height = (rowCount * 35) + 54;\r\n                    }\n                    $($('.ui-grid')[0]).css({ 'width': '100%', 'height': height });\n                    $($('.ui-grid')[0]).find('ui-grid-header-canvas').css(\"width\", \"100%\");\n                    //gridInstance.core.handleWindowResize();\n                };\n\n\n                //*****************************************************autoSuggest bindings START*********************************************\n                scope.autoSuggestOptions = [];\n                scope.autoSuggestOnChange = function (e, col, row) {\r\n                    if (angular.isUndefined(e.data) || e.data.length == 0) {\r\n                        return;\r\n                    }\n                    callback('composedGridAutoSuggestChange', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": (e.data[0] !== undefined ? e.data[0].value : e.displayModel)\r\n                    });\r\n                    //logic to clear split entities autosuggest at grid level, needs to be handled further to make common for other autosuggests\r\n                 \r\n                    if (e.data[0].value == \"\")   {\r\n                        var obj = row.entity[col.colDef.field.split(\".\")[0]];\r\n                        var index;\r\n                        if (obj != null && obj != undefined && col.colDef.field.indexOf('split') >= 0) {\r\n                            if (row.entity.id > 0)\r\n                                index = _.findIndex(scope.model, { id: row.entity.id });\r\n                            else {\r\n                                _.each(scope.model, function (data, indexFound) {\r\n                                    if (_.isEqual(data, row.entity)) {\r\n                                        index = indexFound;\n                                        return;\r\n                                    }\r\n                                });\r\n                            }\n                            scope.model[index][col.colDef.field.split(\".\")[0]] = {\r\n                                \"entityType\": obj.entityType, \"fieldId\": obj.fieldId, \"splitEntityId\": obj.splitEntityId, \"code\": 0, \"entityCode\": null, \"name\": null, \"title\": null\r\n                            };\r\n                        }\r\n                    }\n\n                    var serviceObj = col.colDef.attributes.serviceObj;\n                    if (serviceObj != undefined) {\r\n                        var req = {\r\n                            type: serviceObj.method === \"POST\" ?\"POST\": \"GET\",\n                            url: serviceObj.url,\n                            params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value)),\n                            timeout: 120000,\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\n                                \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                            }\r\n                        };\n                        if (req.type === \"POST\")\r\n                        {\r\n                            req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value));\n                            delete req.params;\r\n                        }\n                        httpService.directhttp(req).then(function (response) {\r\n                            if (serviceObj.CallbackObj) {\r\n                                response = serviceObj.CallbackObj(response, col.colDef.name)\r\n                            }\n                            var resp = [];\n                            if (typeof response === \"string\")\n                                response = JSON.parse(response);\n                            if (serviceObj.isFlatArray) {\r\n                                _.each(response, function (x, index) {\r\n                                    var obj = {};\n                                    obj[\"name\"] = x;\n                                    obj[\"code\"] = x;\n                                    resp.push(obj);\r\n                                });\r\n                            }\n                            else {\r\n                                _.each(response, function (obj) {\r\n                                    var mapperObj = {};\n                                    _.each(serviceObj.mapper, function (mapper) {\r\n                                        var mapperstri = '';\n                                        if (angular.isArray(mapper['toBeMapped'])) {\r\n                                            _.each(mapper['toBeMapped'], function (res) {\r\n                                                mapperstri += obj[res] + \" \";\r\n                                            });\n                                            mapperstri.trim();\r\n                                        }\n                                        else\n                                            mapperstri = obj[mapper['toBeMapped']];\n\n                                        mapperObj[mapper['key']] = mapperstri;\r\n\n                                    });\n                                    _.each(serviceObj.staticValues, function (item) {\r\n                                        mapperObj[item['key']] = item['value'];\r\n                                    });\n                                    resp.push(mapperObj);\r\n                                });\r\n                            }\n                            scope.autoSuggestOptions = resp;\n\n                            //for item number and item description autosuggest\n                            if (serviceObj.responseRequired) {\r\n                                callback('composedGridParseItemMasterData', {\r\n                                    \"rowModel\": row,\n                                    \"colDef\": col,\n                                    \"response\": response,\n                                    \"value\": e.data[0].value\r\n                                });\r\n                            }\r\n                        }, function () {   /* Failure case here */ });\r\n                    }\n                    else {\r\n                        return;\r\n                    }\r\n\n                };\n                scope.autoSuggestOnSelect = function (event, autoSuggestModel, row, col) {\r\n                    autoSuggestModel = event.data;\n                    callback('composedGridSelectItemMasterData', {\r\n                        \"data\": autoSuggestModel,\n                        \"row\": row,\n                        \"col\": col,\r\n                        \"isModified\":true\r\n                    });\r\n                };\n                //*****************************************************autoSuggest bindings END***********************************************\n\n                //*****************************************************dropDOwn bindings START***********************************************\n                scope.isObject = function (val) {\r\n                    return typeof val == 'object';\r\n                }\n\n                scope.dropDownOnChange = function (row, col, val) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridDropDownOnSelectDispatcher', {\r\n                            \"row\": row,\n                            \"col\": col,\n                            \"val\": val\r\n                        });\r\n                    }\r\n                };\n\n                scope.dropDownOptions = [];\n                function getDataFolDropDown(col, row) {\r\n                    var serviceObj = col.attributes.serviceObj;\n                    var req = {\r\n                        method: \"GET\",\n                        url: serviceObj.url,\n                        params: serviceObj.param,\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\n                            \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                        }\r\n                    };\n                    httpService.directhttp(req).then(function (response) {\r\n                        if (typeof row[col.field] != 'object') {\r\n                            var resp = [];\n                            _.each(response, function (x, index) {\r\n                                var obj = {};\n                                obj[col.attributes.dataKey] = $filter('translate')(x);\n                                obj[col.attributes.idKey] = index;\n                                resp.push(obj);\r\n                            });\n                            col.attributes.options = resp;\r\n                        } else {\r\n                            col.attributes.options = response;\r\n                        }\n                        scope.dropDownOptions = col.attributes.options;\r\n                    }, function () {\r\n                    });\r\n                };\n                //*****************************************************dropDOwn bindings END***********************************************\n                //*****************************************************popup bindings START***********************************************\n\n\n                scope.popUpButtonClickCallback = function (row, col) {\n                    // segregate the splitpopup callback function based on config.js \n                    if (angular.isFunction(callback)) {\r\n                        if (col.colDef.isChargesGrid) {\r\n                            callback('composedChargesGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\n                        else {\r\n                            callback('composedGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\r\n                    }\r\n\n                };\n\n                //*****************************************************popup bindings END***********************************************\n\n                //*****************************************************checkBox bindings START***********************************************\n                scope.checkBoxOnChange = function (row, col, val) {\r\n                    callback('composedGridCheckBoxOnChangeDispatcher', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": val\r\n                    });\r\n                };\n                //*****************************************************checkBox bindings END***********************************************\n\n                //*****************************************************text & number keyup bindings START***********************************************\n                scope.textOrNumberKeyUp = function (e, col, row) {\r\n                    callback('composedGridTextKeyUp', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": e.target.value\r\n                    });\r\n                }\n                //*****************************************************text & number keyup bindings END***********************************************\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartUiGrid/smartUiGrid.html'\r\n        };\r\n    }]);\r\n})();","(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartUiTable', ['$timeout', '$filter', 'gridConfigProvider', 'APPCONSTANTS', 'httpService', 'uiGridConstants', '$injector',\n    function ($timeout, $filter, gridConfigProvider, APPCONSTANTS, httpService, uiGridConstants, $injector) {\r\n        return {\r\n            restrict: 'AE',\n            scope: {\r\n                colDef: '@',\n                model: '=',\n                callback: '&',\n                focusRowCol: '@',\n                validationService: '@',\n                searchTerm: '@',\n                otherGridOptions: '@',\n                api: '=',\n                onRenderingStart: '&',\n                onRenderingFinish: '&',\n                dynamicPaginationPageSizes: '=',\r\n                dynamicItemTotal: '='\r\n\n            },\n            link: function (scope, element, attr) {\r\n\n                var paginationOptions = {\r\n                    pageNumber: 1,\n                    pageSize: 12,\n                    sort: null\r\n                };\n\n                if (scope.validationService != undefined) {\r\n                    var service = $injector.get(scope.validationService);\n                    scope.$parent[scope.validationService] = service;\n                    scope.cellClassFunction = scope.validationService + \".validateGridRow\";\n                    scope.cellEditableConditionFunction = scope.validationService + \".isEditableGridRow\";\r\n                }\n                var gridInstance;\n                var defaultGridOptions = {\r\n                    paginationPageSizes: scope.dynamicPaginationPageSizes ? scope.dynamicPaginationPageSizes : [10, 25, 50, 75],\n                    paginationPageSize: scope.dynamicPaginationPageSizes && scope.dynamicPaginationPageSizes[0] ? scope.dynamicPaginationPageSizes[0] : 10,\n                    useExternalPagination: scope.dynamicPaginationCallback ? true : false,\n                    enableCellEditOnFocus: true,\n                    enableFiltering: true,\n                    enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,\n                    treeRowHeaderAlwaysVisible: false,\n                    showTreeExpandNoChildren: false,\r\n                    enableRowSelection: true\r\n                };\n                var callback = scope.$eval(scope.callback);\n                var cellClassFunction = scope.$parent.$eval(scope.cellClassFunction);\n                var cellEditableConditionFunction = scope.$parent.$eval(scope.cellEditableConditionFunction);\n\n                scope.gridConfig = defaultGridOptions;\n                var modifiedColDef;\n\n                if (scope.api) {\r\n                    scope.api.getActiveColumns = function () {\r\n                        return scope.gridConfig.columnDefs;\r\n                    };\r\n                }\n\n                scope.$watch('focusRowCol', function (n, o) {\r\n                    if(n){\r\n                        gridInstance.cellNav.scrollToFocus(n.row.entity,n.col.colDef)\r\n                    }\r\n                });\n\n                scope.$watch('scope.dynamicItemTotal', function (n, o) {\r\n                    scope.gridConfig.totalItems = scope.dynamicItemTotal;\r\n                });\n\n                scope.$watch('searchTerm', function (n, o) {\r\n                    if (n && typeof n == 'string') {\r\n                        gridInstance.grid.refresh();\r\n                    }\r\n                });\n\n                scope.$watch('colDef', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        modifiedColDef = gridConfigProvider.getMassagedGirdConfig(scope.$eval(n), scope, cellClassFunction, cellEditableConditionFunction);\n                        _.each(modifiedColDef, function (def, idx, defs) {\r\n                            if (def.customTreeAggregationFinalizerFn) {\r\n                                def.customTreeAggregationFinalizerFn = eval(\"(\" + def.customTreeAggregationFinalizerFn + \")\");\r\n                            }\n                            if (def.customTreeAggregationFn) {\r\n                                def.customTreeAggregationFn = eval(\"(\" + def.customTreeAggregationFn + \")\");\r\n                            }\r\n                        });\n                        scope.gridConfig.columnDefs = null;\n                        scope.gridConfig.columnDefs = modifiedColDef;\n\n                        var groupingCol = _.filter(scope.gridConfig.columnDefs, function (col) { return col.isGrouped;})\n                        if (groupingCol && groupingCol.length > 0 && gridInstance) {\r\n                            gridInstance.grouping.clearGrouping();\n                            _.each(groupingCol, function (col) {\r\n                                gridInstance.grouping.groupColumn(col.field);\r\n                            });\r\n                        }\r\n                    }\r\n                });\n\n                scope.$watch('otherGridOptions', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        var modifiedOtherGridOptions = angular.merge({}, scope.gridConfig, scope.$eval(n));\n                        _.each(modifiedOtherGridOptions.appScopeProvider, function (prop, i, props) {\r\n                            modifiedOtherGridOptions.appScopeProvider[i] = eval(prop);\r\n                        });\n                        scope.gridConfig = null;\n                        scope.gridConfig = modifiedOtherGridOptions;\r\n                    }\r\n                });\n\n                scope.$watch('model', function (newModel) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (!newModel) {\r\n                        scope.gridConfig.data = [];\n                        return;\r\n                    }\n                    var treeColumns = treeViewColumnsToBeCreated(scope.gridConfig.columnDefs);\n                    if (treeColumns.length > 0) {\r\n                        scope.gridConfig = angular.extend(scope.gridConfig, {\r\n                            showTreeRowHeader: true,\n                            enableRowHeaderSelection: true, // Display checkboxes on every row when it's true\n                            showTreeExpandNoChildren: false\r\n                        });\n                        scope.gridConfig.data = assignTreeLevel($filter('orderBy')(newModel, treeColumns[0].field), treeColumns[0].field);\r\n                    }\n                    else {\r\n                        scope.gridConfig.data = newModel;\r\n                    }\r\n                });\n\n\n\n                if (!gridInstance) {\r\n                    scope.gridConfig.onRegister = getGridInstanceCallback;\r\n                }\n\n\n                /*\n                 *  This function will check and return an array of columns for tree view\n                 */\n                var treeViewColumnsToBeCreated = function (colDefs) {\r\n                    return _.filter(colDefs, function (col) {\r\n                        return col.isTree;\r\n                    });\r\n                };\n\n                /*\n                 *  Sort grid data\n                 */\n                var sortData = function (data, key) {\r\n                    return data.slice(0).sort(function (a, b) {\r\n                        return (eval('a.' + key) > eval('b.' + key)) ? 1 : (eval('a.' + key) < eval('b.' + key)) ? -1 : 0;\r\n                    });\r\n                };\n\n                /*\n                 *  Assign tree view since it is required to create a tree view\n                 */\n                var assignTreeLevel = function (data, key) {\r\n                    var loopedItems = [];\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i].$$treeLevel = 0;\n                        if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                            data[i].$$treeLevel = 1;\r\n                        }\n                        if (eval('data[i].' + key).toString().indexOf('.') > -1) {\r\n                            var SplitLevelArr = eval('data[i].' + key).toString().split('.');\n                            data[i].$$treeLevel = SplitLevelArr.length - 1;\n                            if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                                data[i].$$treeLevel = parseInt(data[i].$$treeLevel) + 1;\r\n                            }\r\n                        }\n                        loopedItems.push(eval('data[i].' + key));\r\n                    }\n                    return data;\r\n                };\n\n                function getCellValue(row, col) {\r\n                    var data = gridInstance.grid.getCellDisplayValue(row, col);\n                    return data ? data.toString() : \"\";\r\n                };\n\n                function outerSearchCallback(rows, cols) {\r\n                    if (scope.searchTerm && typeof scope.searchTerm == 'string' && scope.searchTerm.length > 0) {\r\n                        _.each(rows, function (row, rowIndex) {\r\n                            var match = false;\n                            _.each(cols, function (col) {\r\n                                var cellValue = $filter('translate')(getCellValue(row, col));\n                                if (col.colDef.attributes && col.colDef.attributes.type && col.colDef.attributes.type.toLowerCase() == \"date\") {\r\n                                    var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\n                                    formattedDate = formattedDate.split('+');\n                                    formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\n                                    var month = formattedDate.getMonth() + 1 + '';\n                                    if (month.length === 1) {\r\n                                        month = 0 + '' + month;\r\n                                    }\n                                    formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\n                                    var decession = formattedDate.toLowerCase().trim().indexOf(escape(scope.searchTerm).replace(/%5C/g, '').trim()) > -1;\n                                    if (decession) {\r\n                                        match = true;\r\n                                    }\r\n                                }\n                                else if (cellValue.match(new RegExp(scope.searchTerm, \"i\"))) {\r\n                                    match = true;\r\n                                }\r\n                            });\n                            row.visible = match;\r\n                        });\r\n                    };\n                    return rows;\r\n                };\n\n                function onCheckboxSelect(row) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridCheckBoxDispatcher', {\r\n                            \"row\": row\r\n                        });\r\n                    }\r\n                }\n\n                //  this timeout prevents rows rendered callback being fired multiple times\n                var rowsRenderedTimeout;\n                function getGridInstanceCallback(instance) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('gridInstance', instance);\r\n                    }\n                    gridInstance = instance;\n                    if (typeof scope.api != undefined && scope.api != null && scope.api.rowSelectionCallback) {\r\n                        scope.gridConfig.isRowSelectable = scope.api.rowSelectionCallback;\n                        //gridInstance.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                    }\n                    //gridInstance.grid.registerRowsProcessor(outerSearchCallback, 200);\n                    //gridInstance.core.on.rowsRendered(scope, function (row) {\r\n                    //    if (rowsRenderedTimeout) {\r\n                    //        $timeout.cancel(rowsRenderedTimeout);\n                    //        rowsRenderedTimeout = undefined;\r\n                    //    }\n                    //    rowsRenderedTimeout = $timeout(function () {\r\n                    //        if (angular.isFunction(callback)) {\r\n                    //            callback('composedGridRowsRenderedDispatcher', {\r\n                    //                \"row\": row\r\n                    //            });\r\n                    //        }\n                    //        setHeightForGrid();\n                    //        angular.isFunction(scope.onRenderingFinish) && scope.onRenderingFinish();\r\n                    //    }, 500);\r\n                    //});\n\n\n                    gridInstance.selection.on.rowSelectionChanged(scope, onCheckboxSelect);\n                    //gridInstance.cellNav.on.navigate(scope, function (newRowcol, oldRowCol) {\r\n                    //    if (newRowcol.col.colDef.isRegFocusCol) {\r\n                    //        if (angular.isFunction(callback)) {\r\n                    //            callback('composedGridFocusColumnDispatcher', {\r\n                    //                \"focusedRowColObj\": newRowcol,\n                    //                \"bluredRowColObj\": oldRowCol\r\n                    //            });\r\n                    //        }\r\n                    //    }\r\n                    //});\n                    gridInstance.edit.on.afterCellEdit(scope, function (rowEntity, colDef) {\n                        //if (colDef.isRegUpdateCol) {\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridUpdateColumnDispatcher', {\r\n                                \"rowModel\": rowEntity,\n                                \"colDef\": colDef,\n                                \"instance\": gridInstance\r\n                            });\r\n                        }\n                        // }\n                    });\n                    gridInstance.edit.on.beginCellEdit(scope, function (rowEntity, colDef) {\n                        //var focusedCell = gridInstance.cellNav.getFocusedCell();\n                        //if (!focusedCell.col.cellClass) {\n                        //    gridInstance.cellNav.scrollToFocus(rowEntity, colDef);\n                        //}\n\n                        switch (colDef.uiType) {\r\n                            case \"dropdown\":\n                                if (colDef.attributes.serviceObj && colDef.attributes.options.length == 0) {\r\n                                    getDataFolDropDown(colDef, rowEntity)\r\n                                } else {\r\n                                    colDef.attributes.options.map(function (x) { x[colDef.attributes.dataKey] = $filter('translate')(x[colDef.attributes.dataKey]) });\n                                    scope.dropDownOptions = colDef.attributes.options;\r\n                                }\n                                break;\r\n                        };\n\n                        if (colDef.isRegBeginEditCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridBeginEditColumnDispatcher', {\r\n                                    \"rowModel\": rowEntity,\n                                    \"colDef\": colDef\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n\n                    \n                    gridInstance.cell.on.click(scope, function (row, col) {\r\n                        callback('smartTableClick', {\r\n                            row: row,\n                            col: col\r\n                        });\n                    });\n\n                    //gridInstance.pagination.on.paginationChanged(scope, function (newPage, pageSize) {\n                    //    //alert(newPage+\"\");\n                    //    if (angular.isFunction(callback)) {\r\n                    //        callback('composedGridDynamicPaginationCallback', {\r\n                    //            \"gridConfig\": scope.gridConfig,\n                    //            \"index\": newPage,\n                    //            \"pageSize\": pageSize\r\n                    //        });\r\n                    //    }\r\n                    //});\r\n                };\n\n                function setHeightForGrid() {\r\n                    var rowCount = gridInstance.core.getVisibleRows(gridInstance.grid).length;\n                    var height;\n                    if (rowCount == 0) return;\n                    if (scope.gridConfig.rowHeight > 0) {\r\n                        height = ((rowCount + 1) * scope.gridConfig.rowHeight) + 54;\r\n                    } else {\r\n                        height = (rowCount * 35) + 54;\r\n                    }\n                    $($('.ui-grid')[0]).css({ 'width': '100%', 'height': height });\n                    $($('.ui-grid')[0]).find('ui-grid-header-canvas').css(\"width\", \"100%\");\n                    //gridInstance.core.handleWindowResize();\n                };\n\n\n                //*****************************************************autoSuggest bindings START*********************************************\n                scope.autoSuggestOptions = [];\n                scope.autoSuggestOnChange = function (e, col, row) {\r\n                    if (angular.isUndefined(e.data) || e.data.length == 0) {\r\n                        return;\r\n                    }\n                    callback('composedGridAutoSuggestChange', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": (e.data[0] !== undefined ? e.data[0].value : e.displayModel)\r\n                    });\n                    //logic to clear split entities autosuggest at grid level, needs to be handled further to make common for other autosuggests\n                    if (e.data[0].value == \"\")\r\n                    {\r\n                        var obj = row.entity[col.colDef.field.split(\".\")[0]];\n                        var index;\n                        if (obj != null && obj != undefined && col.colDef.field.indexOf('split') >= 0)\r\n                        {\r\n                            if (row.entity.id > 0)\n                                index = _.findIndex(scope.model, { id: row.entity.id });\n                            else\r\n                            {\r\n                                _.each(scope.model, function (data, indexFound) {\r\n                                    if (_.isEqual(data, row.entity)) {\r\n                                        index = indexFound;\n                                        return;\r\n                                    }\r\n                                });\r\n                            }\n                            scope.model[index][col.colDef.field.split(\".\")[0]] = {\r\n                                \"entityType\": obj.entityType, \"fieldId\": obj.fieldId, \"splitEntityId\": obj.splitEntityId, \"code\": 0, \"entityCode\": null, \"name\": null, \"title\": null\r\n                            };\r\n                        }\r\n                    }\n\n                    var serviceObj = col.colDef.attributes.serviceObj;\n                    if (serviceObj != undefined) {\r\n                        var req = {\r\n                            type: serviceObj.method === \"POST\" ?\"POST\": \"GET\",\n                            url: serviceObj.url,\n                            params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value)),\n                            timeout: 120000,\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\n                                \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                            }\r\n                        };\n                        if (req.type === \"POST\")\r\n                        {\r\n                            req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value));\n                            delete req.params;\r\n                        }\n                        httpService.directhttp(req).then(function (response) {\r\n                            if (serviceObj.CallbackObj) {\r\n                                response = serviceObj.CallbackObj(response, col.colDef.name)\r\n                            }\n                            var resp = [];\n                            if (typeof response === \"string\")\n                                response = JSON.parse(response);\n                            if (serviceObj.isFlatArray) {\r\n                                _.each(response, function (x, index) {\r\n                                    var obj = {};\n                                    obj[\"name\"] = x;\n                                    obj[\"code\"] = x;\n                                    resp.push(obj);\r\n                                });\r\n                            }\n                            else {\r\n                                _.each(response, function (obj) {\r\n                                    var mapperObj = {};\n                                    _.each(serviceObj.mapper, function (mapper) {\r\n                                        var mapperstri = '';\n                                        if (angular.isArray(mapper['toBeMapped'])) {\r\n                                            _.each(mapper['toBeMapped'], function (res) {\r\n                                                mapperstri += obj[res] + \" \";\r\n                                            });\n                                            mapperstri.trim();\r\n                                        }\n                                        else\n                                            mapperstri = obj[mapper['toBeMapped']];\n\n                                        mapperObj[mapper['key']] = mapperstri;\r\n\n                                    });\n                                    _.each(serviceObj.staticValues, function (item) {\r\n                                        mapperObj[item['key']] = item['value'];\r\n                                    });\n                                    resp.push(mapperObj);\r\n                                });\r\n                            }\n                            scope.autoSuggestOptions = resp;\n\n                            //for item number and item description autosuggest\n                            if (serviceObj.responseRequired) {\r\n                                callback('composedGridParseItemMasterData', {\r\n                                    \"rowModel\": row,\n                                    \"colDef\": col,\n                                    \"response\": response,\n                                    \"value\": e.data[0].value\r\n                                });\r\n                            }\r\n                        }, function () {   /* Failure case here */ });\r\n                    }\n                    else {\r\n                        return;\r\n                    }\r\n\n                };\n                scope.autoSuggestOnSelect = function (event, autoSuggestModel, row, col) {\r\n                    autoSuggestModel = event.data;\n                    callback('composedGridSelectItemMasterData', {\r\n                        \"data\": autoSuggestModel,\n                        \"row\": row,\n                        \"col\": col,\r\n                        \"isModified\":true\r\n                    });\r\n                };\n                //*****************************************************autoSuggest bindings END***********************************************\n\n                //*****************************************************dropDOwn bindings START***********************************************\n                scope.isObject = function (val) {\r\n                    return typeof val == 'object';\r\n                }\n\n                scope.dropDownOnChange = function (row, col, val) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridDropDownOnSelectDispatcher', {\r\n                            \"row\": row,\n                            \"col\": col,\n                            \"val\": val\r\n                        });\r\n                    }\r\n                };\n\n                scope.dropDownOptions = [];\n                function getDataFolDropDown(col, row) {\r\n                    var serviceObj = col.attributes.serviceObj;\n                    var req = {\r\n                        method: \"GET\",\n                        url: serviceObj.url,\n                        params: serviceObj.param,\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\n                            \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                        }\r\n                    };\n                    httpService.directhttp(req).then(function (response) {\r\n                        if (typeof row[col.field] != 'object') {\r\n                            var resp = [];\n                            _.each(response, function (x, index) {\r\n                                var obj = {};\n                                obj[col.attributes.dataKey] = $filter('translate')(x);\n                                obj[col.attributes.idKey] = index;\n                                resp.push(obj);\r\n                            });\n                            col.attributes.options = resp;\r\n                        } else {\r\n                            col.attributes.options = response;\r\n                        }\n                        scope.dropDownOptions = col.attributes.options;\r\n                    }, function () {\r\n                    });\r\n                };\n                //*****************************************************dropDOwn bindings END***********************************************\n                //*****************************************************popup bindings START***********************************************\n\n\n                scope.popUpButtonClickCallback = function (row, col) {\n                    // segregate the splitpopup callback function based on config.js \n                    if (angular.isFunction(callback)) {\r\n                        if (col.colDef.isChargesGrid) {\r\n                            callback('composedChargesGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\n                        else {\r\n                            callback('composedGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\r\n                    }\r\n\n                };\n\n                //*****************************************************popup bindings END***********************************************\n\n                //*****************************************************checkBox bindings START***********************************************\n                scope.checkBoxOnChange = function (row, col, val) {\r\n                    callback('composedGridCheckBoxOnChangeDispatcher', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": val\r\n                    });\r\n                };\n                //*****************************************************checkBox bindings END***********************************************\n\n                //*****************************************************text & number keyup bindings START***********************************************\n                scope.textOrNumberKeyUp = function (e, col, row) {\r\n                    callback('composedGridTextKeyUp', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": e.target.value\r\n                    });\r\n                }\n                //*****************************************************text & number keyup bindings END***********************************************\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartUiTable/smartUiTable.html'\r\n        };\r\n    }]);\r\n})();","(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').service('trackStatusService', ['$http', '$q', function ($http, $q) {\r\n        var self = this;\r\n        // Watch the change of main object\r\n        self.statusDataChange = { 'dataChange': '' };\r\n        self.legendChange = {'dataChange' : ''};\r\n        self.dataChange = function () {\r\n            self.statusDataChange['dataChange'] = new Date().getTime();\r\n        }\r\n        self.getChange = function () {\r\n            return self.statusDataChange['dataChange'];\r\n        }\r\n        self.legendChange = function () {\r\n            self.legendChange['dataChange'] = new Date().getTime();\r\n        }\r\n        self.getLegendChange = function () {\r\n            return self.legendChange['dataChange'];\r\n        }\r\n    }]);\r\n})(angular);\r\n\r\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartTrackStatus', ['trackStatusService', '$filter', '$translate',\r\n        function (trackStatusService, $filter, $translate) {\r\n        \r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                data: \"=trackstatusData\",\r\n                onTabChange: \"=onTabChange\",\r\n                cycleChange: \"=onCycleChange\",\r\n                statusLegend: \"=statusLegend\",\r\n                approverLegend: \"=approverLegend\",\r\n                fileDownloadCallback: \"=fileDownloadCallback\",\r\n                scrollToStatus: \"=scrollToStatus\",\r\n                downloadAllAttachment : \"=downloadAllAttachment\"\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/trackStatus/popupNewTrackStatus.html',\r\n            link: function (scope, elem, attr) {\r\n                scope.trackStatusService = trackStatusService;\r\n\t\t        \r\n                // translate the static labels\r\n                scope.headerLable = $translate.instant('TRACK_STATUS'); // header\r\n                scope.tsDocName = $translate.instant('TRACK_STATUS_DOC_NAME');\r\n                //scope.tsCreatedOn = $translate.instant('CREATED_ON');\r\n                scope.tsCreatedOn = attr.trackStatusType === 'milestone' ? $translate.instant('ACHIEVED_ON') : $translate.instant('CREATED_ON');\r\n                scope.tsCurrStatus = $translate.instant('CURRENT_STATUS');\r\n                scope.labelOn = $translate.instant('ON');\r\n                scope.legend = $translate.instant('Legend');\r\n                scope.by = $translate.instant('By');\r\n                scope.defContentCommentLen = 60; // 60 chars to be displayed in case of longer comments.\r\n                \r\n                // HTML page map for tabs\r\n                var htmlForDetail = 'shared/directives/uiElements/trackStatus/trackStatusDetail.html';\r\n                var dateFormat;\r\n                //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                //    dateFormat = moment.localeData().longDateFormat('L');\r\n                //} else\r\n                if (attr.dateFormat && attr.dateFormat != '') {\r\n                    dateFormat = attr.dateFormat;\r\n                } else {\r\n                    dateFormat = 'DD/MM/YYYY';\r\n                }\r\n                // Utility methods\r\n                scope.getDate = function (date) {\r\n                    //return $filter('date')(date, dateFormat);\r\n                    return moment(parseInt(date)).format(dateFormat);\r\n                }\r\n                function dataChanged(a_data) {\r\n                    scope.data = a_data;\r\n                }\r\n                function statusListData(a_data) {\r\n                    scope.statusLists = a_data.datailedData;\r\n                }\r\n                scope.tabClicked = function (e) {\r\n                    scope.onTabChange(e);\r\n                }\r\n                scope.changeCycle = function (model) {\r\n                    scope.cycleChange(model);\r\n                }\r\n                //statusListData(scope.data);\r\n                // To update cycles\r\n                scope.cycleObject = [];\r\n                function selectCycle(a_data) {\r\n                    var cycles = a_data.cycles,\r\n                        len = cycles.length;\r\n                    scope.cycleObject = cycles;\r\n                    for(var indx = 0; indx < len; indx++) {\r\n                        if (cycles[indx].selected === true) {\r\n                            scope.selectedCycle = cycles[indx];\r\n                        }\r\n                    }\r\n                }\r\n                //selectCycle(scope.data);\r\n\r\n                // update tabs\r\n                scope.trackStatusTabs = [];\r\n                function updateTabs(a_data) {\r\n                    var tabs = a_data.trackStatusTabs,\r\n                        len = tabs.length;\r\n                    for (var t = 0; t < len; t++) {\r\n                        var tobj = tabs[t];\r\n                        if (tobj.active === true) {\r\n                            tobj.contentUrl = htmlForDetail;\r\n                        }\r\n                    }\r\n                    scope.trackStatusTabs = tabs;\r\n                }\r\n                //updateTabs(scope.data);\r\n                \r\n                // update doc name, created on and by, doc curr status\r\n                function updateHeaderData(a_data) {\r\n                    scope.headerSecData = a_data;\r\n                    scope.headerSecData.Comments.date = scope.getDate(a_data.Comments.date);\r\n                    scope.docCreatedOn = scope.getDate(a_data.createdOn);\r\n                }\r\n                //updateHeaderData(scope.data.projectStatus);\r\n\r\n                // check if comment exists\r\n                scope.hasComments = function (a_comment) {\r\n                    var flag = (a_comment !== \"\" && a_comment) ? true : false;\r\n                    return flag;\r\n                }\r\n                // show more less comments\r\n                scope.showLess = {};\r\n                scope.showMore = {};\r\n                scope.showMoreLess = function (id, arg) {\r\n                    if(arg === \"less\") {\r\n                        scope.showMore[id] = true;\r\n                        scope.showLess[id] = false;\r\n                    } else if (arg === \"more\") {\r\n                        scope.showLess[id] = true;\r\n                        scope.showMore[id] = false;\r\n                    }\r\n                }\r\n                // init show more\r\n                scope.showMoreComment = {};\r\n                scope.initShowModel = function (id) {\r\n                    scope.showMore[id] = true;\r\n                    scope.showLess[id] = false;\r\n                }\r\n                // Watch for any update in data change\r\n                scope.$watch('trackStatusService.getChange()', function (newVal, oldVal) {\r\n                    if (newVal !== oldVal && newVal) {\r\n                        // Data changed\r\n                        //dataChanged(scope.data);\r\n                        statusListData(scope.data);\r\n                        selectCycle(scope.data);\r\n                        updateTabs(scope.data);\r\n                        updateHeaderData(scope.data.projectStatus);\r\n                        addUniqueId();\r\n                        setTimeout(function () {\r\n                            scrollToLatestStatus();\r\n                        }, 1000);\r\n                    }\r\n\r\n                });\r\n                // Get string to be displayed for comments\r\n                scope.getString = function (a_str, a_count) {\r\n                    var strLen = a_str.length,\r\n                        str = \"\";\r\n                    if(strLen > a_count) {\r\n                        str = a_str.substr(0, a_count) +'...';\r\n                    } else {\r\n                        str = a_str.substr(0, a_count);\r\n                    }\r\n                        \r\n                    return str;\r\n                }\r\n                scope.applyStatusColor = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'approved':\r\n                        case 'accepted':\r\n                        case 'approval':\r\n                        case 'auto_approved':\r\n                            return 'color-approved';\r\n                            break;\r\n                        case 'approval pending':\r\n                        case 'delegated':\r\n                        case 'withdrawn':\r\n                        case 'approval withdrawn':\r\n                        case 'withdraw':\r\n                        case 'approval withdraw':\r\n                            return 'color-approved-pending';\r\n                            break;\r\n                        case 'rejected':\r\n                            return 'color-rejected';\r\n                            break;\r\n                        case 'pending':\r\n                            return 'color-approved-pending';\r\n                            break;\r\n                        case 'budget overriden':\r\n                            return 'color-bud-overrid';\r\n                        default:\r\n                            return 'grey-text';\r\n                    }\r\n                };\r\n                scope.IconStatus = function (ele) {\r\n                    var iconMap = {\r\n                        'pending': '',\r\n                        'approval': '',\r\n                        'rejected': '',\r\n                        'accepted': '',\r\n                        'approved': '',\r\n                        'auto_approved': '',\r\n                        'approval pending': '',\r\n                        'approval withdrawn': '',\r\n                        'withdrawn': '',\r\n                        'approval withdraw': '',\r\n                        'withdraw': ''\r\n                    }\r\n                    if (ele && iconMap.hasOwnProperty([ele.toLowerCase()])) {\r\n                        return '#icon_TSHexOutlin';\r\n                    } else {\r\n                        return '#icon_Info_i';\r\n                    }\r\n                };\r\n                scope.InnerIconStatus = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'pending':\r\n                        case 'approval pending' : \r\n                            return '#icon_TSPending';\r\n                            break;\r\n                        case 'approval':\r\n                        case 'accepted':\r\n                        case 'approved':\r\n                            return '#icon_TSAccepted';\r\n                            break;\r\n                        case 'rejected':\r\n                            return '#icon_TSRejected';\r\n                            break;\r\n                        case 'auto_approved':\r\n                            return '#Icon_AppAuto';\r\n                            break;\r\n                        case 'approval withdrawn':\r\n                        case 'withdrawn':\r\n                        case 'approval withdraw':\r\n                        case 'withdraw':\r\n                            return 'icon_TSWithdrawn';\r\n                            break;\r\n                        default:\r\n                            return '#icon_Info';\r\n                    }\r\n                };\r\n\r\n                // Currently not being used\r\n                scope.approvalGroupType = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'pool approval':\r\n                            return 'a-g-pool-approval';\r\n                            break;\r\n                        case 'parallel approval':\r\n                            return 'a-g-parallel-approval';\r\n                            break;\r\n                        case 'hr approval':\r\n                            return 'a-g-HR-approval';\r\n                            break;\r\n                        case 'group approval':\r\n                            return 'a-g-group-approval';\r\n                            break;\r\n                        default:\r\n                            return false;\r\n                    }\r\n                };\r\n                scope.slideDetailsTS = function (id) {\r\n                    var detailDataCopy = scope.data.datailedData,\r\n                        len = detailDataCopy.length;\r\n                    for (var indx = 0; indx < len; indx++) {\r\n                        if (detailDataCopy[indx].uniqueId === id) {\r\n                            detailDataCopy[indx].isDetailShow = !detailDataCopy[indx].isDetailShow;\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t\tscope.changeScreenSize = function (e) {\r\n\t\t\t\t\tscope.isFullscreen = !scope.isFullscreen;\r\n\t\t\t\t}\r\n\r\n                // add unique id to each actioner items\r\n                function addUniqueId() {\r\n                    var pItems = scope.data.datailedData,\r\n                        pLen = pItems.length;\r\n                    for (var indx = 0 ; indx < pLen; indx++) {\r\n                        var cArr = pItems[indx].actionerDetails,\r\n                            cLen = cArr.length;\r\n                        for (var c = 0; c < cLen; c++) {\r\n                            cArr[c].uniqueId = c +'-'+ uniqueIDGenerator();\r\n                        }\r\n                        pItems[indx].uniqueId = \"details\" + uniqueIDGenerator() + '-' + indx;\r\n                    }\r\n                }\r\n                addUniqueId();\r\n                // Unique id generator\r\n                function uniqueIDGenerator() {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                // Watch the legend change\r\n                scope.$watch('trackStatusService.getLegendChange()', function (newVal, oldVal) {\r\n                    if (newVal !== oldVal && newVal) {\r\n                        displayLegend(); // if legend changed\r\n                    }\r\n\r\n                });\r\n                // Approver legend\r\n                var defApproverLegend = [\r\n        \t        {\r\n        \t            \"icon\": \"#icon_AppOne\",\r\n        \t            \"color\": \"color-approved-pending\",\r\n        \t            \"text\": $translate.instant(\"POOL_APP_ATLEAST_ONE\")\r\n        \t        },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppAll\",\r\n\t                    \"color\": \"color-approved-pending\",\r\n\t                    \"text\": $translate.instant(\"PARALLEL_APPROVAL_FORALL\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppSingle\",\r\n\t                    \"color\": \"color-approved-pending\",\r\n\t                    \"text\": $translate.instant(\"INDIVIDUAL_MUST_APPROVE\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#Icon_AppAuto\",\r\n\t                    \"color\": \"color-approved\",\r\n\t                    \"text\": $translate.instant(\"AUTO_SYSTEM_APPROVE\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppHoc\",\r\n\t                    \"color\": \"color-add-Hoc\",\r\n\t                    \"text\": $translate.instant(\"ADHOC_APPROVER\")\r\n\t                }\r\n                ];\r\n                var defStatusLegend = [\r\n                        {\r\n                            \"icon\": \"#icon_TSAccepted\",\r\n                            \"color\": \"color-approved\",\r\n                            \"text\": $translate.instant(\"APPROVED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSRejected\",\r\n                            \"color\": \"color-rejected\",\r\n                            \"text\": $translate.instant(\"REJECTED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPartialAc\",\r\n                            \"color\": \"color-approved\",\r\n                            \"text\": $translate.instant(\"PARTIALLY_APPROVED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPartialRe\",\r\n                            \"color\": \"color-rejected\",\r\n                            \"text\": $translate.instant(\"PARTIALLY_REJECTED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPending\",\r\n                            \"color\": \"color-approved-pending\",\r\n                            \"text\": $translate.instant(\"PENDING\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSWithdrawn\",\r\n                            \"color\": \"color-approved-pending\",\r\n                            \"text\": $translate.instant(\"Approval Withdrawn\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_Info_i\",\r\n                            \"color\": \"grey-text\",\r\n                            \"text\": $translate.instant(\"INFORMATION\")\r\n                        }\r\n\r\n                ];\r\n                function displayLegend() {\r\n                    var statusLegend = (scope.statusLegend) ? scope.statusLegend : false; // status legend\r\n                    var approverLegend = (scope.approverLegend) ? scope.approverLegend : false;// approver legend\r\n                    scope.approverLegend = (!approverLegend) ? defApproverLegend : scope.approverLegend;                    \r\n                    scope.statusLegend = (!statusLegend) ? defStatusLegend : statusLegend;\r\n                };\r\n                displayLegend(); // will execute on load case\r\n                scope.isFullscreen = false; // default not full screen\r\n\t\t\t\tscope.changeScreenSize = function (e) {\r\n\t\t\t\t    scope.isFullscreen = !scope.isFullscreen;\r\n\t\t\t\t    if (scope.isFullscreen) {\r\n\t\t\t\t        scope.defContentCommentLen = 95;\r\n\t\t\t\t    } else {\r\n\t\t\t\t        scope.defContentCommentLen = 60;\r\n\t\t\t\t    }\r\n\t\t\t\t    return;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                // set scroll to latest status\r\n\t\t\t\tattr.$observe('focusLatest', function (newVal) {\r\n\t\t\t\t    if (newVal == \"true\") {\r\n\t\t\t\t        setTimeout(function () {\r\n\t\t\t\t            scrollToLatestStatus();\r\n\t\t\t\t        }, 200);\r\n\t\t\t\t        \r\n\t\t\t\t    } else {\r\n\t\t\t\t        //$('.scrollbar-outer').animate({ scrollTop: 0}, \"slow\");\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n                // Set z-index and position relative for tabs to pass content within shadow\r\n\t\t\t\tfunction setTabCss() {\r\n\t\t\t\t    var tabDiv = $('#trackStatusTabId').children(\":first\");\r\n\t\t\t\t    if (tabDiv.hasClass('borderBtmGray')) {\r\n\t\t\t\t        tabDiv.css({\r\n\t\t\t\t            'z-index': 2,\r\n\t\t\t\t            'position': 'relative'\r\n\t\t\t\t        });\r\n\t\t\t\t    }\r\n\t\t\t\t    \r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction scrollToLatestStatus() {\r\n\t\t\t\t    var idToSetScroll = \"\",\r\n                        $target = \"\",\r\n                        len = scope.data.datailedData.length,\r\n                        scrollIndex = (scope.scrollToStatus && scope.scrollToStatus != \"\") ? Number(scope.scrollToStatus) : (len - 1),\r\n\t\t\t\t        uniqueid = scope.data.datailedData[scrollIndex].uniqueId;// get the last element id and set the scroll\r\n\r\n\t\t\t\t    setTabCss();\r\n\t\t\t\t    \r\n\t\t\t\t    $target = $('[uniqueid=' + uniqueid + ']');\r\n\t\t\t\t    var scrollPosition = $('#scroll-8').scrollTop() + $target.parent().position().top;\r\n\t\t\t\t    $('.scrollbar-outer').animate({ scrollTop: scrollPosition }, \"slow\", 'swing');\r\n\t\t\t\t    return false;\r\n\t\t\t\t}\r\n            }\r\n            ,\r\n            controller: ['$scope', function ($scope) {\r\n                this.getFDownloadCallback = function () {\r\n                    return $scope.fileDownloadCallback;\r\n                },\r\n                this.getDownloadAllAttchment = function () {\r\n                    return $scope.downloadAllAttachment;\r\n                }\r\n            }]\r\n        }\r\n        }])\r\n\r\n        // To show attachments attached and downaloadable\r\n    .directive('attachmentsCallout', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict : 'EA',\r\n            scope: {\r\n                attachments: '=attachments',\r\n                identifier: '=identifier',\r\n                id: '=id'\r\n            },\r\n            require: '^smartTrackStatus',\r\n            templateUrl: 'shared/directives/uiElements/trackStatus/attachmentsDownload.html',\r\n            link: function (scope, elem, attr, cntrl) {\r\n                scope.downloadFile = cntrl.getFDownloadCallback();\r\n                scope.showDownloadAllAttachment = cntrl.getDownloadAllAttchment();\r\n                scope.filedownload = function (a_data) {\r\n                    scope.downloadFile(a_data);\r\n                }\r\n            }\r\n        }\r\n    }]);\r\n})(angular);","(function() {\r\n\r\n    /*\r\n     *  Prevent document's default scroll behaviour on space\r\n     */\r\n    window.onkeydown = function(e) {\r\n        if (e.keyCode == 32 && $(e.target).hasClass('ui-grid-focuser')) {\r\n            e.preventDefault();\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n    angular.module('SMART2')\r\n        .directive(\"uigridCompatible\", ['uiGridConstants', 'uiGridEditConstants', '$rootScope', uigridCompatibleFunc]);\r\n\r\n    function uigridCompatibleFunc(uiGridConstants, uiGridEditConstants, $rootScope) {\r\n        return {\r\n            require: ['?^uiGrid', '?^uiGridRenderContainer'],\r\n            restrict: 'A',\r\n            link: function(scope, element, attrs, controllers) {\r\n                var uiGridCtrl = controllers[0];\r\n                var renderContainerCtrl = controllers[1];\r\n\r\n                var isFocused = false;\r\n                var isSelectElement = false;\r\n\r\n                /*\r\n                 *  Remove previous cell scope if any\r\n                 */\r\n                if (window.lastRenderedElementScope) {\r\n                    try {\r\n                        window.lastRenderedElementScope.stopEdit();\r\n                        window.lastRenderedElementScope = undefined;\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                window.lastRenderedElementScope = scope;\r\n\r\n                /*\r\n                 *  On popup close listener\r\n                 */\r\n                var onPopupClosed = $rootScope.$on(\"popupClosed\", function () {\r\n                    uiGridCtrl.focus();\r\n                });\r\n\r\n                /*\r\n                *  On date component close listener\r\n                */\r\n                var onDatePopupClosed = $rootScope.$on(\"closedPopup\", function () {\r\n                    uiGridCtrl.focus();\r\n                });\r\n\r\n                /*\r\n                 *  On popup open listener\r\n                 */\r\n                var onPopupOpened = $rootScope.$on(\"popupOpened\", function () {\r\n                    document.activeElement.blur();\r\n                });\r\n\r\n                /*\r\n                 *  Viewport keydown broadcast listener\r\n                 */\r\n                var onViewPortKeyDown = uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown(scope, function (e, rowCol) {\r\n                    var inputText = element.find(\"input\");\r\n                    var anchor = element.find(\"a\");\r\n\r\n                    switch (e.keyCode) {\r\n                        case 32:\r\n                            if (anchor.length > 0) {\r\n                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                                anchor.trigger(\"click\");\r\n                            }\r\n                            else if (inputText.length > 0 && !isFocused) {\r\n                                inputText.focus();\r\n                                isFocused = true;\r\n                            }\r\n                            else if (isSelectElement) {\r\n                                select.focus();\r\n                            }\r\n                            break;\r\n                        case 9:\r\n                            scope.stopEdit();\r\n                            break;\r\n                        default:\r\n                            if (element.attr(\"type\") !== \"date\") {\r\n                                inputText.focus();\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 *  Stop cell editing and destroy the scope\r\n                 */\r\n                scope.stopEdit = function (e) {\r\n                    if (isSelectElement) {\r\n                        select.blur();\r\n                    }\r\n                    scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Element key down handler\r\n                 */\r\n                var onElementKeyDown = function (e) {\r\n                    switch (e.keyCode) {\r\n                        case 32:\r\n                            var inputText = element.find(\"input\");\r\n                            var anchor = element.find(\"a\");\r\n\r\n                            if (anchor.length > 0) {\r\n                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                                anchor.trigger(\"click\");\r\n                            }\r\n                            else if (isSelectElement) {\r\n                                select.focus();\r\n                            }\r\n                            break;\r\n                        case uiGridConstants.keymap.ESC:\r\n                            e.stopPropagation();\r\n                            scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);\r\n                            break;\r\n                    }\r\n                    if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {\r\n                        e.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;\r\n                        if (uiGridCtrl.cellNav.handleKeyDown(e) !== null) {\r\n                            scope.stopEdit(e);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //handle enter and tab for editing not using cellNav\r\n                        switch (e.keyCode) {\r\n                            case uiGridConstants.keymap.ENTER: // Enter (Leave Field)\r\n                            case uiGridConstants.keymap.TAB:\r\n                                scope.stopEdit(e);\r\n                                break;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                element.on('keydown', onElementKeyDown);\r\n\r\n\r\n                //  Focus select element\r\n                var select = element.find(\"select\");\r\n                isSelectElement = select.length > 0;\r\n                if (isSelectElement) {\r\n                    setTimeout(function () {\r\n                        select.focus();\r\n                    });\r\n                }\r\n\r\n\r\n\r\n                //  Trigger anchor tag's click event if cell clicked\r\n                if (window.isCellClicked) {\r\n                    setTimeout(function () {\r\n                        var anchor = element.find(\"a\");\r\n                        if (anchor.length > 0) {\r\n                            window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                            anchor.trigger('click');\r\n                        }\r\n                    });\r\n                    window.isCellClicked = false;\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Destroy broadcast listeners on scope destroy\r\n                 */\r\n                scope.$on('$destroy', function () {\r\n                    onPopupClosed();\r\n                    onDatePopupClosed();\r\n                    onPopupOpened();\r\n                    onViewPortKeyDown();\r\n                    element.off('keydown', onElementKeyDown);\r\n                });\r\n            }\r\n        };\r\n    };\r\n})();\r\n","//Body\r\n(function () {\r\n    angular.module('SMART2').directive('body', function () {\r\n        return {\r\n            restrict: 'E',\r\n            link: function postLink(scope, elem, attrs) {\r\n                function _wheelDelta(a) {\r\n                    if (a.originalEvent.wheelDelta == undefined) {\r\n                        return a.originalEvent.deltaY;\r\n                    } else {\r\n                        return -a.originalEvent.wheelDelta;\r\n                    }\r\n                }\r\n                IEscroll = function (event) {\r\n                    if ($(event.target).closest(\".dropdown-content\").length == 0 && $(event.target).closest(\"smart-scroll\").length == 0 && $(event.target).closest(\".scroll-inner-wrapp\").length == 0) {\r\n                        var dy = _wheelDelta(event);\r\n                        if ($(\"body\").css(\"overflow\") == \"hidden\") {\r\n                            return;\r\n                        };\r\n                        var evDelta = function () {\r\n                            if (dy < 0) {\r\n                                return dy < -90 ? 60 : 40;\r\n                            } else {\r\n                                return dy > 90 ? 60 : 40;\r\n                            }\r\n                        }();\r\n                        event.preventDefault();\r\n                        var wheelDelta = dy < 0 ? dy - evDelta : dy + evDelta;\r\n                        var currentScrollPosition = window.pageYOffset;\r\n                        $(this).scrollTop(currentScrollPosition + wheelDelta);\r\n                        \r\n                    }\r\n                }\r\n\r\n                //function IEscrollfn() {\r\n                //    if (attrs.customWheelForie == \"true\") {\r\n                //        $('html,body').bind(\"mousewheel\", IEscroll);\r\n                //    } else {\r\n                //        $('html,body').unbind(\"mousewheel\", IEscroll);\r\n                //    }\r\n                //};\r\n\r\n                if (navigator.appName == 'Microsoft Internet Explorer' || !!(navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/rv:11/)) || (typeof $.browser !== \"undefined\" && $.browser.msie == 1)) {\r\n                    $('html,body').bind(\"mousewheel\", IEscroll);\r\n\r\n                    //attrs.$observe(\"customWheelForie\", function () {\r\n                    //    IEscrollfn();\r\n                    //});\r\n                };\r\n            }\r\n        }\r\n    });\r\n})();\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('ckEditor', ['APPCONSTANTS', function (APPCONSTANTS) {\r\n        return {\r\n            require: '?ngModel',\r\n            link: function (scope, elm, attr, ngModel) {\r\n                var lang = \"en\";\r\n                if (APPCONSTANTS.userPreferences.UserBasicDetails.Culture) {\r\n                    lang = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n                }\r\n                var ckeditor = CKEDITOR.replace(\r\n\t\t\t\t\telm[0],\r\n\t\t\t\t\t{\r\n\t\t\t\t\t    \"toolbar\": \"Basic\",\r\n\t\t\t\t\t    \"language\": lang\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n                if (!ngModel)\n                    return;\n\n                var updateModel = false;\n                ckeditor.on('instanceReady', function () {\r\n                    ckeditor.setData(ngModel.$viewValue);\r\n                });\n\n                function update() {\r\n                    if (updateModel) {\r\n                        ngModel.$setViewValue(ckeditor.getData());\r\n                    }\r\n                };\n\n                ngModel.$render = function (value) {\r\n                    ckeditor.setData(ngModel.$viewValue);\r\n                };\n\n                ckeditor.on('change', update);\n                ckeditor.on('focus', function (event) {\r\n                    updateModel = true;\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                \tckeditor.removeAllListeners();\r\n                \tCKEDITOR.remove(ckeditor);\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n\t'use strict';\r\n\r\n\tangular.module('SMART2').directive('colorPicker', ['$parse', '$timeout', function ($parse, $timeout) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\ttransclude: true,\r\n\t\t\tscope: {\r\n\t\t\t\tonSelect: '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tvar $colorPicker = $(element).find('.colorPicker');\r\n\t\t\t\t$colorPicker.on(\"change.color\", function (event, color) {\r\n\t\t\t\t\tif (color) {\r\n\t\t\t\t\t\tscope.$apply(function () {\r\n\t\t\t\t\t\t\tscope.onSelect({\r\n\t\t\t\t\t\t\t\t$event: { color: color }\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$colorPicker.colorpicker({\r\n\t\t\t\t\tshowOn: \"button\",\r\n\t\t\t\t\thistory: false\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$(element).bind('click', function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t$(this).find(\".colorPicker\").colorpicker(\"showPalette\");\r\n\t\t\t\t});\r\n\r\n\t\t\t\tattrs.$observe('color', function (value) {\r\n\t\t\t\t\t$colorPicker.colorpicker('val', value);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/colorPicker/colorPickerTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();\nangular.module('SMART2')\r\n.directive(\"sidenav\", [sideNavFunc])\r\n.directive(\"tabs\", [tabsFunc])\r\n.directive(\"dropdown\", [\"$compile\", \"$timeout\", dropdownFunc])\r\n.directive('inputDate', [\"$compile\", \"$timeout\", inputDateFunc])\r\n.directive(\"modal\", [\"$compile\", \"$timeout\", modal])\r\n.directive(\"slideToggle\", [slideToggleFunc])\r\n.directive(\"collapsible\", [collapsibleFunc]);\r\n\r\n/*side nav*/\r\nfunction sideNavFunc() {\r\n    return {\r\n        scope: {\r\n            menuwidth: \"@\",\r\n            closeonclick: \"@\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            \r\n            element.sideNav({\r\n                menuWidth: (angular.isDefined(scope.menuwidth)) ? scope.menuwidth : undefined,\r\n                edge: attrs.sidenav ? attrs.sidenav : \"left\",\r\n                closeOnClick: (angular.isDefined(scope.closeonclick)) ? scope.closeonclick == \"true\" : undefined\r\n            });\r\n        }\r\n    };\r\n}\r\n/*tabs*/\r\nfunction tabsFunc() {\r\n    return {\r\n        link: function (scope, element, attrs) {\r\n            element.tabs();\r\n            \r\n        }\r\n    };\r\n}\r\n\r\nfunction dropdownFunc($compile, $timeout) {\r\n    return {\r\n        scope: {\r\n            inDuration: \"@\",\r\n            outDuration: \"@\",\r\n            constrainWidth: \"@\",\r\n            hover: \"@\",\r\n            alignment: \"@\",\r\n            gutter: \"@\",\r\n            belowOrigin: \"@\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            var dropdownCode;\r\n            $timeout(function () {\r\n                $compile(element.contents())(scope);\r\n                dropdownCode = element.attr(\"data-activates\");\r\n                element.dropdown({\r\n                    inDuration: (angular.isDefined(scope.inDuration)) ? scope.inDuration : undefined,\r\n                    outDuration: (angular.isDefined(scope.outDuration)) ? scope.outDuration : undefined,\r\n                    constrain_width: (angular.isDefined(scope.constrainWidth)) ? scope.constrainWidth : undefined,\r\n                    hover: (angular.isDefined(scope.hover)) ? scope.hover : undefined,\r\n                    alignment: (angular.isDefined(scope.alignment)) ? scope.alignment : undefined,\r\n                    gutter: (angular.isDefined(scope.gutter)) ? scope.gutter : undefined,\r\n                    belowOrigin: (angular.isDefined(scope.belowOrigin)) ? scope.belowOrigin : undefined\r\n                });\r\n            });\r\n            \r\n            scope.$on('closeDropdown', function(e, obj){\r\n                  if(obj.ddname===dropdownCode){\r\n                    element.trigger(\"close\");  \r\n                  }\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nfunction inputDateFunc($compile, $timeout) {\r\n   \r\n    var style = $('<style>#inputCreated_root {outline: none;}</style>');\r\n    $('html > head').append(style);\r\n\r\n    var dateFormat = function () {\r\n\r\n        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\r\n            timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\r\n            timezoneClip = /[^-+\\dA-Z]/g,\r\n            pad = function (val, len) {\r\n                val = String(val);\r\n                len = len || 2;\r\n                while (val.length < len) {\r\n                    val = \"0\" + val;\r\n                }\r\n                return val;\r\n            };\r\n\r\n        return function (date, mask, utc) {\r\n\r\n            var dF = dateFormat;\r\n\r\n            if (arguments.length === 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\r\n                mask = date;\r\n                date = undefined;\r\n            }\r\n\r\n                    \r\n            date = date ? new Date(date) : new Date();\r\n            if (isNaN(date)) throw SyntaxError(\"invalid date\");\r\n\r\n            mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\r\n\r\n             \r\n            if (mask.slice(0, 4) == \"UTC:\") {\r\n                mask = mask.slice(4);\r\n                utc = true;\r\n            }\r\n\r\n            var _ = utc ? \"getUTC\" : \"get\",\r\n                d = date[_ + \"Date\"](),\r\n                D = date[_ + \"Day\"](),\r\n                m = date[_ + \"Month\"](),\r\n                y = date[_ + \"FullYear\"](),\r\n                H = date[_ + \"Hours\"](),\r\n                M = date[_ + \"Minutes\"](),\r\n                s = date[_ + \"Seconds\"](),\r\n                L = date[_ + \"Milliseconds\"](),\r\n                o = utc ? 0 : date.getTimezoneOffset(),\r\n                flags = {\r\n                    d: d,\r\n                    dd: pad(d),\r\n                    ddd: dF.i18n.dayNames[D],\r\n                    dddd: dF.i18n.dayNames[D + 7],\r\n                    m: m + 1,\r\n                    mm: pad(m + 1),\r\n                    mmm: dF.i18n.monthNames[m],\r\n                    mmmm: dF.i18n.monthNames[m + 12],\r\n                    yy: String(y).slice(2),\r\n                    yyyy: y,\r\n                    h: H % 12 || 12,\r\n                    hh: pad(H % 12 || 12),\r\n                    H: H,\r\n                    HH: pad(H),\r\n                    M: M,\r\n                    MM: pad(M),\r\n                    s: s,\r\n                    ss: pad(s),\r\n                    l: pad(L, 3),\r\n                    L: pad(L > 99 ? Math.round(L / 10) : L),\r\n                    t: H < 12 ? \"a\" : \"p\",\r\n                    tt: H < 12 ? \"am\" : \"pm\",\r\n                    T: H < 12 ? \"A\" : \"P\",\r\n                    TT: H < 12 ? \"AM\" : \"PM\",\r\n                    Z: utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\r\n                    o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\r\n                    S: [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\r\n                };\r\n\r\n            return mask.replace(token, function ($0) {\r\n                return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\r\n            });\r\n        };\r\n    }();\r\n\r\n\r\n    dateFormat.masks = {\r\n        \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\r\n        shortDate: \"m/d/yy\",\r\n        mediumDate: \"mmm d, yyyy\",\r\n        longDate: \"mmmm d, yyyy\",\r\n        fullDate: \"dddd, mmmm d, yyyy\",\r\n        shortTime: \"h:MM TT\",\r\n        mediumTime: \"h:MM:ss TT\",\r\n        longTime: \"h:MM:ss TT Z\",\r\n        isoDate: \"yyyy-mm-dd\",\r\n        isoTime: \"HH:MM:ss\",\r\n        isoDateTime: \"yyyy-mm-dd'T'HH:MM:ss\",\r\n        isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\r\n    };\r\n\r\n        \r\n    dateFormat.i18n = {\r\n        dayNames: [\r\n            \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\r\n            \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n        ],\r\n        monthNames: [\r\n            \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\r\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ]\r\n    };\r\n\r\n       \r\n    Date.prototype.format = function (mask, utc) {\r\n        return dateFormat(this, mask, utc);\r\n    };\r\n\r\n       \r\n    var isValidDate = function (date) {\r\n        if (Object.prototype.toString.call(date) === '[object Date]') {\r\n            return !isNaN(date.getTime());\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return {\r\n        require: 'ngModel',\r\n        scope: {\r\n            container: \"@\",\r\n            format: \"@\",\r\n            formatSubmit: \"@\",\r\n            monthsFull: \"@\",\r\n            monthsShort: \"@\",\r\n            weekdaysFull: \"@\",\r\n            weekdaysLetter: \"@\",\r\n            firstDay: \"=\",\r\n            disable: \"=\",\r\n            today: \"=\",\r\n            clear: \"=\",\r\n            close: \"=\",\r\n            selectYears: \"=\",\r\n            onStart: \"&\",\r\n            onRender: \"&\",\r\n            onOpen: \"&\",\r\n            onClose: \"&\",\r\n            onSet: \"&\",\r\n            onStop: \"&\",\r\n            ngReadonly: \"=?\",\r\n            max: \"@\",\r\n            min: \"@\"\r\n        },\r\n        link: function (scope, element, attrs, ngModelCtrl) {\r\n\r\n            ngModelCtrl.$formatters.unshift(function (modelValue) {\r\n                if (modelValue) {\r\n                    var date = new Date(modelValue);\r\n                    return (angular.isDefined(scope.format)) ? date.format(scope.format) : date.format('d mmmm, yyyy');\r\n        }\r\n                return null;\r\n            });\r\n\r\n            var monthsFull = (angular.isDefined(scope.monthsFull)) ? scope.$eval(scope.monthsFull) : undefined,\r\n                monthsShort = (angular.isDefined(scope.monthsShort)) ? scope.$eval(scope.monthsShort) : undefined,\r\n                weekdaysFull = (angular.isDefined(scope.weekdaysFull)) ? scope.$eval(scope.weekdaysFull) : undefined,\r\n                weekdaysLetter = (angular.isDefined(scope.weekdaysLetter)) ? scope.$eval(scope.weekdaysLetter) : undefined;\r\n\r\n\r\n            $compile(element.contents())(scope);\r\n            if (!(scope.ngReadonly)) {\r\n                $timeout(function () {\r\n                    var pickadateInput = element.pickadate({\r\n                        container: (angular.isDefined(scope.container)) ? scope.container : 'body',\r\n                        format: (angular.isDefined(scope.format)) ? scope.format : undefined,\r\n                        formatSubmit: (angular.isDefined(scope.formatSubmit)) ? scope.formatSubmit : undefined,\r\n                        monthsFull: (angular.isDefined(monthsFull)) ? monthsFull : undefined,\r\n                        monthsShort: (angular.isDefined(monthsShort)) ? monthsShort : undefined,\r\n                        weekdaysFull: (angular.isDefined(weekdaysFull)) ? weekdaysFull : undefined,\r\n                        weekdaysLetter: (angular.isDefined(weekdaysLetter)) ? weekdaysLetter : undefined,\r\n                        firstDay: (angular.isDefined(scope.firstDay)) ? scope.firstDay : 0,\r\n                        disable: (angular.isDefined(scope.disable)) ? scope.disable : undefined,\r\n                        today: (angular.isDefined(scope.today)) ? scope.today : undefined,\r\n                        clear: (angular.isDefined(scope.clear)) ? scope.clear : undefined,\r\n                        close: (angular.isDefined(scope.close)) ? scope.close : undefined,\r\n                        selectYears: (angular.isDefined(scope.selectYears)) ? scope.selectYears : undefined,\r\n                        onStart: (angular.isDefined(scope.onStart)) ? function () { scope.onStart(); } : undefined,\r\n                        onRender: (angular.isDefined(scope.onRender)) ? function () { scope.onRender(); } : undefined,\r\n                        onOpen: (angular.isDefined(scope.onOpen)) ? function () { scope.onOpen(); } : undefined,\r\n                        onClose: (angular.isDefined(scope.onClose)) ? function () { scope.onClose(); } : undefined,\r\n                        onSet: (angular.isDefined(scope.onSet)) ? function () { scope.onSet(); } : undefined,\r\n                        onStop: (angular.isDefined(scope.onStop)) ? function () { scope.onStop(); } : undefined\r\n                    });\r\n                 \r\n                    var picker = pickadateInput.pickadate('picker');\r\n\r\n            \r\n                    scope.$watch('max', function (newMax) {\r\n                        if (picker) {\r\n                            var maxDate = new Date(newMax);\r\n                            picker.set({ max: isValidDate(maxDate) ? maxDate : false });\r\n                        }\r\n                    });\r\n                    scope.$watch('min', function (newMin) {\r\n                        if (picker) {\r\n                            var minDate = new Date(newMin);\r\n                            picker.set({ min: isValidDate(minDate) ? minDate : false });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    };\r\n};\r\n/*modal*/\r\nvar modalCounter = 0;\r\n\r\n\r\nfunction modal($compile, $timeout) {\r\n    return {\r\n        restrict: 'E',\r\n        scope: {},\r\n        link: function (scope, element, attrs) {\r\n            scope.templateUrl = attrs.templateUrl;\r\n            scope.title = attrs.title;\r\n            modalCounter = modalCounter + 1;\r\n            scope.modalCounter = modalCounter;\r\n\r\n            setTimeout(function () {\r\n                angular.element('#modalButton' + modalCounter).leanModal();\r\n            });\r\n        },\r\n        template: '<div><a id=\"modalButton{{modalCounter}}\" class=\"waves-effect waves-light btn modal-trigger\" href=\"#modal{{modalCounter}}\" modal>{{title}}</a><div id=\"modal{{modalCounter}}\" class=\"modal modal-sm\" ng-include=\"templateUrl\"></div>'\r\n    };\r\n}\r\n\r\nfunction slideToggleFunc() {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {},\r\n        controller: function ($scope) { },\r\n        link: function (scope, element, attr) {\r\n            element.bind('click', function () {\r\n                var $slideBox = angular.element(attr.slideToggle);\r\n                var slideDuration = parseInt(attr.slideToggleDuration, 10) || 200;\r\n                $slideBox.stop().slideToggle(slideDuration);\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\n/*tabs*/\r\nfunction collapsibleFunc() {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            element.collapsible();\r\n        }\r\n    };\r\n}\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('notification', [function () {\r\n        var Obj = {};\r\n        Obj.show = false;\r\n        Obj.onCallback = undefined;\r\n\r\n        Obj.on = function (callback) {\r\n            Obj.onCallback = callback;\r\n        };\r\n\r\n        Obj.notify = function (config, callback) {\r\n            this.show = true;\r\n            this.config = config;\r\n            this.broadcastItem();\r\n            this.resultCallBack = function (result) {\r\n                if (typeof (callback) == 'function') {\r\n                    setTimeout(function () {\r\n                        callback(result);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n\r\n        Obj.broadcastItem = function () {\r\n            angular.isFunction(Obj.onCallback) && Obj.onCallback();\r\n        };\r\n\r\n        return Obj;\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartNotification', ['$rootScope', 'notification', '$translate', '$sce', '$timeout', '$focusOnField', 'browserSniffing', function ($rootScope, notification, $translate, $sce, $timeout, $focusOnField, browserSniffing) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            scope: {\r\n                showN: \"@\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var topPositionBeforeModalOpen = 0;\r\n                scope.isChrome = (navigator.userAgent.indexOf(\"Chrome\") != -1) ? \"remindMeOption\" : \"\";\r\n                /*\r\n                 *  Unbind window keyup listener and assign tabindex back to .picker elements\r\n                 */\r\n                var reset = function () {\r\n                    $(window).off('keyup', onWindowKeyUp);\r\n                    angular.element('.picker').attr(\"tabindex\", 0);\r\n                    angular.element(document).scrollTop(topPositionBeforeModalOpen);\r\n                };\r\n\r\n                /*\r\n                 *  window on key up event listener\r\n                 */\r\n                var onWindowKeyUp = function (e) {\r\n                    if (angular.element(e.target).closest('.modal').length == 0 && e.keyCode == 9) {\r\n                        angular.element(element.find(':focusable')[0]).focus();\r\n                    }\r\n                };\r\n\r\n                /*\r\n                 *  hide notification pop up when route changed\r\n                 */\r\n\r\n                scope.$on('$stateChangeSuccess', function () {\r\n                    if (scope.showN && !(scope.config.type == \"unsupportedBrowserVersion\" || scope.config.type == \"unsupportedBrowser\")) {\r\n                        scope.showN = false;\r\n                        cleanUpNotificationPopup();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 *  On notification listener\r\n                 */\r\n                scope.dismissible = true;\r\n                notification.on(function () {\r\n                    scope.dismissible = angular.isDefined(notification.config.dismissible) ? notification.config.dismissible : true;\r\n                    scope.config = notification.config;\r\n                    scope.buttons = scope.config.buttons;\r\n                    switch (scope.config.type) {\r\n                        case \"success\":\r\n                            scope.notifyClass = 'notify-success';\r\n                            scope.title = $translate.instant(\"notificationSuccessMsg\");\r\n                            scope.icon = \"#icon_CircleCheck\";\r\n                            break;\r\n                        case \"error\":\r\n                            scope.notifyClass = 'notify-error';\r\n                            scope.title = $translate.instant(\"notificationErrorMsg\");\r\n                            scope.icon = \"#icon_Exclamation\";\r\n                            break;\r\n                        case \"warning\":\r\n                            scope.notifyClass = 'notify-warning';\r\n                            scope.icon = \"#icon_Warning\";\r\n                            scope.title = $translate.instant(\"notificationWarningMsg\");\r\n                            break;\r\n                        case \"confirm\":\r\n                            scope.notifyClass = 'notify-confirm';\r\n                            scope.icon = \"#icon_Help\";\r\n                            scope.title = $translate.instant(\"notificationConfirmationMsg\");\r\n                            break;\r\n                        case \"inform\":\r\n                            scope.notifyClass = 'notify-information';\r\n                            scope.icon = \"#icon_Info\";\r\n                            scope.title = $translate.instant(\"notificationInformationMsg\");\r\n                            break;\r\n                        case \"sessionTimeOut\":\r\n                            scope.notifyClass = 'notify-session-timeout';\r\n                            scope.icon = \"#icon_AlertTimer\";\r\n                            scope.title = $translate.instant(\"notificationSessionTimeOut\");\r\n                            scope.dismissible = false;\r\n                            break;\r\n                        case \"sessionExpire\":\r\n                            scope.notifyClass = 'notify-session-expire';\r\n                            scope.icon = \"#icon_AlertTimer\";\r\n                            scope.title = $translate.instant(\"notificationSessionExpiredMsg\");\r\n                            scope.dismissible = false;\r\n                            break;\r\n                        case \"unsupportedBrowserVersion\":\r\n                            scope.notifyClass = \"notify-unsupported-browser-version\";\r\n                            scope.titleTextColor = \"browser-version-header-text\";\r\n                            scope.title = $translate.instant(\"notificationUnsupportedBrowserVersionMsg\");\r\n                            break;\r\n                        case \"unsupportedBrowser\":\r\n                            scope.notifyClass = \"notify-unsupported-browser\";\r\n                            scope.titleTextColor = \"browser-unsupported-header-text\";\r\n                            scope.title = $translate.instant(\"notificationUnsupportedBrowserMsg\");\r\n                    };\r\n\r\n                    scope.onChange = function (remindMeDate) {\r\n                        scope.showN = false;\r\n                        scope.$digest();\r\n                    };\r\n\r\n\r\n                    //scope.dismissible = (typeof notification.config.dismissible != \"undefined\")?(notification.config.dismissible) ? true : false : scope.dismissible;\r\n                    scope.message = $sce.trustAsHtml(scope.config.message);\r\n                    scope.checkboxText = scope.config.checkMessage;\r\n                    scope.customTemplate = false;\r\n                    if (typeof scope.config[\"isMultipleCheck\"] != \"undefined\" && scope.config[\"isMultipleCheck\"]) {\r\n                        scope.customTemplate = true;\r\n                        if (typeof scope.config.modalType == \"undefined\") {\r\n                            scope.config.modalType = \"small\"\r\n                        }\r\n                        for (var i in scope.config.multipleCheckList) {\r\n                            scope.config.multipleCheckList[i].model = {};\r\n                            scope.config.multipleCheckList[i].model.modelName = scope.config.multipleCheckList[i][\"checkContext\"];\r\n                            switch (scope.config.multipleCheckList[i].type) {\r\n                                case \"check\":\r\n                                    scope.config.multipleCheckList[i].model.isCheck = false;\r\n                                    break;\r\n                                case \"radio\":\r\n                                    scope.config.multipleCheckList[i].model.isCheck = {\r\n                                        \"title\": \"\"\r\n                                    };\r\n                                case \"select\":\r\n                                    if (typeof scope.config.multipleCheckList[i].preSelected != \"undefined\") {\r\n                                        scope.config.multipleCheckList[i].model.isCheck = scope.config.multipleCheckList[i].preSelected;\r\n                                    } else {\r\n                                        scope.config.multipleCheckList[i].model.isCheck = {\r\n                                            \"title\": \"\"\r\n                                        };\r\n                                    }\r\n                                    break;\r\n                            }\r\n                            if (typeof scope.config.multipleCheckList[i][\"header\"] != \"undefined\" && typeof scope.config.multipleCheckList[i][\"header\"] == \"string\") {\r\n                                scope.config.multipleCheckList[i][\"header\"] = $sce.trustAsHtml(scope.config.multipleCheckList[i][\"header\"]);\r\n                            }\r\n                            if (typeof scope.config.multipleCheckList[i][\"label\"] == \"string\") {\r\n                                scope.config.multipleCheckList[i][\"label\"] = $sce.trustAsHtml(scope.config.multipleCheckList[i][\"label\"]);\r\n                            }\r\n\t\t\t\t\t\t }\r\n                        for (var i in scope.config.buttons) {\r\n                            if (typeof scope.config.buttons[i].disableBtn != \"undefined\") {\r\n                                scope.config.buttons[i].disableBtn = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.isCheckSelect = false;\r\n                    if (typeof scope.config.isCheckSelect != 'undefined') {\r\n                        scope.isCheckSelect = scope.config.isCheckSelect;\r\n                    }\r\n                    scope.showN = notification.show;\r\n\r\n                    angular.element('body').css('overflow', 'hidden');\r\n                    $timeout(function () {\r\n                        var $firstField = element.find(':focusable')[0];\r\n                        $focusOnField($firstField);\r\n                        $(window).on('keyup', onWindowKeyUp);\r\n                        //  remove picker tabindex when popup to avoid focus on picker element\r\n                        angular.element('.picker').removeAttr(\"tabindex\");\r\n                        scope.notifyClass = scope.notifyClass + ' notificationanimate--active';\r\n                    }, 250);\r\n                    topPositionBeforeModalOpen = angular.element(document).scrollTop();\r\n                });\r\n\r\n                scope.showN = false;\r\n                scope.bindforTab = false;\r\n                scope.overlayCLicked = function () {\r\n                    if (scope.dismissible) {\r\n                        //scope.showN = false;\r\n                        //cleanUpNotificationPopup();\r\n                    }\r\n                }\r\n                scope.$on('LastRepeaterElement', function () {\r\n                    scope.bindforTab = true;\r\n                });\r\n                scope.onChangeNotification = function () {\r\n                    var cnt = 0;\r\n                    for (var i in scope.config.multipleCheckList) {\r\n                        if (scope.config.multipleCheckList[i].model.isCheck) {\r\n                            if (typeof scope.config.multipleCheckList[i].isMandatory != \"undefined\" && scope.config.multipleCheckList[i].isMandatory) {\r\n\t\t\t\t\t\t\t\tcnt++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n                        }\r\n\t\t\t\t\t\tif (typeof scope.config.multipleCheckList[i].disable != \"undefined\" && typeof scope.config.multipleCheckList[i].enableOn != \"undefined\") {\r\n\t\t\t\t\t\t\t\tscope.config.multipleCheckList[i].disable=!getStatus(scope.config.multipleCheckList[i].enableOn);\r\n\t\t\t\t\t\t}\r\n                    }\r\n                    for (var i in scope.config.buttons) {\r\n                        if (typeof scope.config.buttons[i].disableBtn != \"undefined\") {\r\n                            if (cnt > 0) {\r\n                                scope.config.buttons[i].disableBtn = false;\r\n                            } else {\r\n                                scope.config.buttons[i].disableBtn = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n\t\t\t\t function getStatus(mdlName){\r\n\t\t\t\t    for (var i in scope.config.multipleCheckList) {\r\n                        if (scope.config.multipleCheckList[i].model.modelName == mdlName) {\r\n                           return scope.config.multipleCheckList[i].model.isCheck;\r\n                        }\r\n                    }\r\n\t\t\t\t}\r\n                scope.clickCallbackFunction = function (e) {\r\n                    $timeout(function () {\r\n                        scope.showN = false;\r\n                        scope.bindforTab = false;\r\n                        var responceObj = {\r\n                            \"result\": e\r\n                        };\r\n                        if (scope.customTemplate) {\r\n                            for (var i in scope.config.multipleCheckList) {\r\n                                responceObj[scope.config.multipleCheckList[i].model.modelName] = scope.config.multipleCheckList[i].model.isCheck\r\n                            }\r\n                        } else {\r\n                            responceObj[\"isChecked\"] = scope.isCheckSelect;\r\n                        }\r\n                        cleanUpNotificationPopup();\r\n                        notification.resultCallBack(responceObj);\r\n                        $rootScope.$broadcast(\"closedPopup\");\r\n                    });\r\n                };\r\n                function cleanUpNotificationPopup() { // empty 'scope.buttons' object to avoid getting display multiple notification buttons\r\n                    scope.notifyClass = '';\r\n                    scope.buttons = [];\r\n                    angular.element('body').css('overflow', '');\r\n                    angular.element('.notification-massage .modal-content').css('display', 'none');\r\n                    angular.element('.notification-massage .modal-footer').css('display', 'none');\r\n                }\r\n                scope.$on('$destroy', function () {\r\n                    reset();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/notification/notificationTemplate.html',\r\n        }\r\n    }]);\r\n})();\n(function() {\r\n\t'use strict';\r\n\tangular\r\n    .module('SMART2')\r\n    .directive('onCaptureClick', ['$parse', function ($parse) {\r\n      return {\r\n        restrict: 'A',\r\n        compile: function(element, attrs) {\r\n          var fn = $parse(attrs.onCaptureClick);\r\n          return function(scope, element) {\r\n            element[0].addEventListener('click', function(event) {\r\n              scope.$apply(function() {\r\n                fn(scope, {\r\n                  $event: event\r\n                });\r\n              });\r\n            }, true);\r\n          };\r\n        }\r\n      }\r\n    }]);\r\n})(angular);\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('onLoad', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            scope: {\r\n                onLoadCallback: '&',\r\n            },\n            link: function (scope, element, attrs) {\r\n                (scope.onLoadCallback) ? scope.onLoadCallback = scope.$eval(scope.onLoadCallback) : null;\n                if (angular.isFunction(scope.onLoadCallback)) {\r\n                    $timeout(function () {\r\n                        scope.onLoadCallback();\r\n                    }, 0);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();\n\n    (function() {\r\n    \t'use strict';        \r\n    \tangular.module('SMART2').directive('profilePic', ['notification', '$translate', function (notification, $translate) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        scope: {\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.isProfilePicEditable = false;\r\n            scope.isUserProfile = false;\r\n            if (attrs.circular == 'true') {\r\n                scope.isUserProfile = true;\r\n            }\r\n            if (attrs.editable == 'true') {\r\n                scope.isProfilePicEditable = true;\r\n            }\r\n            scope.dummyimg = false;\r\n            if (attrs.dummyimg == 'true') {\r\n                scope.dummyimg = true;\r\n            }\r\n     \r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? 'shared/resources/images/dummyImage.jpg' : attrs.imgsrc;\r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? scope.dummyimg = true : scope.dummyimg = false;\r\n            //var dummySrc = typeof attrs.dummysrc === 'undefined' ? 'shared/resources/images/user_default_BIG.PNG' : attrs.dummysrc;\r\n            //scope.dummyimg = typeof attrs.dummyimg === 'undefined' ? false : attrs.dummyimg;\r\n            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n            //debugger;\r\n            if (scope.isUserProfile == true) {\r\n                if (!scope.dummyimg) {\r\n                    scope.imgsrc = 'shared/resources/images/dummyImage.jpg';\r\n                    //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n                }\r\n            }\r\n            else {\r\n                if (!scope.dummyimg) {\r\n                    scope.imgsrc = 'shared/resources/images/kelloggs_logo.png';\r\n                }\r\n            }\r\n            var readURL = function (input) {\r\n                if (input.files && input.files[0]) {\r\n                    var reader = new FileReader();\r\n                    reader.onload = function (e) {\r\n                        angular.element('.user-profile').addClass('is-profile-pic');\r\n                        scope.dummyimg = false;\r\n                        scope.imgsrc = e.target.result;\r\n                        scope.$apply();\r\n                    }\r\n                    reader.readAsDataURL(input.files[0]);\r\n                }\r\n            }\r\n\r\n            element.find(\"#callFileFOrProfile\").on('change', function () {\r\n                readURL(this);\r\n            });\r\n\r\n            scope.profilePicEdit = function () {\r\n               element.find(\"#callFileFOrProfile\").get(0).click();\r\n            }\r\n\r\n            //var imgsrc = typeof attrs.imgsrc === 'undefined' ? 'shared/resources/images/dummyImage.jpg' : attrs.imgsrc;\r\n            // var imgsrc = typeof attrs.imgsrc === 'undefined' ? scope.dummyimg = true : scope.dummyimg = false;\r\n            //var dummySrc = typeof attrs.dummysrc === 'undefined' ? 'shared/resources/images/user_default_BIG.PNG' : attrs.dummysrc;\r\n            //scope.dummyimg = typeof attrs.dummyimg === 'undefined' ? false : attrs.dummyimg;\r\n            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;\r\n            // scope.isDeleted = false;\r\n\r\n            scope.clearProfilePicEdit = function () {\r\n            \tvar confi = {\r\n            \t\ttype: \"confirm\",\r\n            \t\tmessage: \"<p class='left-align'>\" + $translate.instant(\"confirmationMsg\") + \"</p>\",\r\n            \t\t//checkMessage: \"Do not show again.\",\r\n            \t\tbuttons: [\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t    \"title\": $translate.instant(\"notificationButtonYes\"),\r\n\t\t    \t\t\t\t\"result\": \"yes\"\r\n\t\t    \t\t\t},\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t    \"title\": $translate.instant(\"cancelBtn\"),\r\n\t\t    \t\t\t\t\"result\": \"no\"\r\n\t\t    \t\t\t}\r\n            \t\t]\r\n            \t};\r\n            \tnotification.notify(confi, function (responce) {\r\n            \t\tif (responce.result == \"yes\") {\r\n            \t\t\tangular.element('.overL').prev().toggleClass('changeImage');\r\n            \t\t\t\r\n\r\n            \t\t\t//if (angular.element('.overL').prev().hasClass(\"changeImage\") == true) {\r\n            \t\t\t//    scope.imgsrc = imgsrc;\r\n            \t\t\t\t\r\n            \t\t\t//\t//scope.isDeleted = true;\r\n            \t\t\t//}\r\n            \t\t\tif (angular.element('.user-profile img').hasClass(\"changeImage\")) {\r\n            \t\t\t    scope.imgsrc = false;\r\n            \t\t\t   element.find(\"#callFileFOrProfile\").val('');\r\n            \t\t\t    scope.dummyimg = true;\r\n            \t\t\t    //scope.isDeleted = true;\r\n            \t\t\t    if (scope.isUserProfile == true) {            \t\t\t       \r\n            \t\t\t        scope.imgsrc = 'shared/resources/images/user_default_BIG.PNG';\r\n            \t\t\t        angular.element('.user-profile').removeClass('is-profile-pic');\r\n            \t\t\t            //scope.imgsrc = !JSON.parse(scope.dummyimg) ? imgsrc : dummyimg;            \t\t\t        \r\n            \t\t\t    }\r\n            \t\t\t}\r\n            \t\t\telse {\r\n            \t\t\t\tscope.imgsrc = dummySrc;\r\n            \t\t\t\tscope.isDeleted = false;\r\n            \t\t\t\tangular.element('.user-profile').addClass('is-profile-pic');\r\n            \t\t\t\t//console.log(isDeleted)\r\n            \t\t\t}\r\n            \t\t} else {\r\n            \t\t\treturn;\r\n            \t\t}\r\n            \t});\r\n            }\r\n        },\r\n        templateUrl: 'shared/components/directives/profilePic/profilePic.html'\r\n    };\r\n}]);\r\n    })();\nangular.module('SMART2').directive('progressMeter', ['$timeout', function ($timeout) {\r\n\treturn {\r\n\t\trestrict: 'EA',\r\n\t\treplace: true,\r\n\t\tscope: {\r\n\t\t\tpercent: \"=?\"\r\n\t\t},\r\n\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\tvar unbindPercent = scope.$watch('percent', function (newVal, oldVal) {\r\n\t\t\t\t//if (newVal) {\r\n\t\t\t\t\tgetMeter();\r\n\t\t\t\t//}\r\n\t\t\t});\r\n\r\n\t\t\tfunction getMeter() {\r\n\t\t\t\tscope.value = parseInt(scope.percent);\r\n\t\t\t\tif (scope.value) {\r\n\t\t\t\t\tscope.c = Math.PI * (25 * 2);\r\n\t\t\t\t\tscope.pct = 156;\r\n\t\t\t\t\tif (scope.value < 0)\r\n\t\t\t\t\t\tscope.value = 0;\r\n\t\t\t\t\tif (scope.value > 100)\r\n\t\t\t\t\t\tscope.value = 100;\r\n\t\t\t\t\t$timeout(function () {\r\n\t\t\t\t\t\tscope.pct = ((100 - scope.value) / 100) * scope.c;\r\n\t\t\t\t\t\tscope.strokeStyle = { \"stroke-dashoffset\": scope.pct }\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\tunbindPercent();\r\n\t\t\t});\r\n\t\t},\r\n\t\ttemplateUrl: 'shared/directives/progressMeter/progressMeterTemplate.html'\r\n\t}\r\n}]);\n//div resizer\r\nangular.module('SMART2').directive('isResizable', function () {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            'handle': '@',\r\n            'onresize': '&',\r\n            'onstart': '&',\r\n            'onstop': '&'\r\n        },\r\n        link: function postLink(scope, elem, attrs) {\r\n            elem.resizable({\r\n                handles: scope.handle,\r\n                resize: function (event, ui) {\r\n                    scope.onresize({ event: event, ui: ui })\r\n                },\r\n                start: function (event, ui) {\r\n                    scope.onstart({ event: event, ui: ui });\r\n                }\r\n                 ,\r\n                stop: function (event, ui) {\r\n\r\n                    scope.onstop({ event: event, ui: ui });\r\n                }\r\n            });\r\n\r\n            if (attrs.maxheight != undefined) {\r\n                attrs.$observe('maxheight', function () {\r\n                    elem.resizable(\"option\", \"maxHeight\", attrs.maxheight);\r\n                });\r\n            }\r\n            if (attrs.minheight != undefined) {\r\n                attrs.$observe('minheight', function () {\r\n                    elem.resizable(\"option\", \"minHeight\", attrs.minheight);\r\n                });\r\n\r\n            }\r\n            if (attrs.maxwidth != undefined) {\r\n                attrs.$observe('maxwidth', function () {\r\n                    elem.resizable(\"option\", \"maxWidth\", attrs.maxwidth);\r\n                });\r\n            }\r\n            if (attrs.minwidth != undefined) {\r\n                attrs.$observe('minwidth', function () {\r\n                    elem.resizable(\"option\", \"minWidth\", attrs.minwidth);\r\n                });\r\n\r\n            }\r\n            if (attrs.alsoResizeRevert != undefined) {\r\n                elem.resizable(\"option\", \"alsoResizeReverse\", attrs.alsoResizeRevert);\r\n            }\r\n            if (attrs.alsoResize != undefined) {\r\n                elem.resizable(\"option\", \"alsoResize\", attrs.alsoResizeRevert);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n//window resizer\r\nangular.module('SMART2').directive('smartWindowResizer', ['$window', function ($window) {\r\n    return {\r\n        restrict: 'AE',\r\n        replace:false,\r\n        scope: {\r\n            'pageHeight': '@'\r\n        },\r\n        link: function postLink(scope, elem, attrs) {\r\n            \r\n            scope.pageHeight = ($window.innerHeight - 114) + 'px';\r\n            elem.css('height', scope.pageHeight);\r\n\r\n            angular.element($window).bind('resize', function (e) {\r\n                if (scope.fixedSubHeader) {\r\n                    scope.pageHeight = ($window.innerHeight - 50) + 'px';\r\n                }\r\n                else {\r\n                    scope.pageHeight = ($window.innerHeight - 114) + 'px';\r\n                }\r\n\r\n                scope.$apply();\r\n                console.log(scope.pageHeight);\r\n                elem.css('height', scope.pageHeight);\r\n            });\r\n\r\n        }\r\n    };\r\n}]);\nangular.module('SMART2').directive('scrollContent', ['$window', '$filter', '$rootScope', 'scrollPosition', function ($window, $filter, $rootScope, scrollPosition) {\r\n\treturn {\r\n\t\trestrict: 'A',\r\n\t\tscope: true,\r\n\t\tlink: function ($scope, elem, $attrs) {\r\n\t\t\t$rootScope.$on('$locationChangeSuccess', function() {\r\n\t\t\t\tif (scrollPosition.getEnableScroll() == true) {\r\n\t\t\t\t\tvar foundItem = $filter('filter')(scrollPosition.get(), { 'currentUrl': $window.location.hash }, true)[0];\r\n\t\t\t\t\tif(foundItem)\r\n\t\t\t\t\t\tscrollPosition.performScroll(scrollPosition.get()[scrollPosition.get().indexOf(foundItem)].scroll, 500);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tangular.element($window).bind('scroll', function (e) {\r\n\t\t\t\tvar windowScrollTop = this.scrollY || this.pageYOffset;\r\n\t\t\t\tif (windowScrollTop > 0)\r\n\t\t\t\tscrollPosition.set(windowScrollTop, $window.location.hash);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n}]);\n  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Sliding-menu\n   * @description This directive is useful for creating a sliding menu.\n   * \n   * @attr {Number} right\n   *    Menu's right position\n   * @attr {Number} top\n   *    Menu's top position\n   * @attr {Boolean} show\n   *    Sliding menu will toggle as soon as value of this attribute changes\n   * @attr {Boolean} modify-parent-style\n   *    This attribute is useful when parent does not need to animated. For e.g. Default behaviour is when 'show' is set to true, \n   *    parent element gets resized depending upon the width of sliding-menu.\n   * @attr {Boolean} detach-default-class\n   *    If this attribute is set to true, default class will not be applied to directive's template\n   * @attr {String} include-template\n   *    Template to be used\n   * @attr {Object} tabData\n   *    used for two-way communication based on this property\n   *\n   * @example\n   Usage:\n   <smart-sliding-menu>\n        //  Contents will go here\n   </smart-sliding-menu>\n   */\n\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartSlidingMenu', ['RuleEngine', '$timeout', '$compile', '$translate', '$rootScope', function (RuleEngine, $timeout, $compile, $translate, $rootScope) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            transclude: true,\n            scope: {\r\n                right: '@',\n                top: '@',\n                show: '=',\n                detachDefaultClass: '@',\n                includeTemplate: '@',\n                model: '@',\n                modifyParentStyle: '@',\r\n                tabData: '='\r\n            },\n            link: function (scope, $element, $attrs, controller) {\r\n                scope.getModel = function () {\r\n                    return JSON.parse(scope.model);\r\n                };\n                scope.logoutSession = function () {\r\n                    requestClicked.navCircle(\"request\", '#', null);\r\n                };\n                if (scope.detachDefaultClass) {\r\n                    if (scope.detachDefaultClass.toLowerCase() === \"true\") {\r\n                    } else {\r\n                        $element.addClass('secondary-navigation white');\r\n                    }\r\n                } else {\r\n                    $element.addClass('secondary-navigation white');\r\n                }\n\n                scope.slidingMenuId = 'sliding-menu-' + new Date().getTime();\n                scope.rightPos = scope.right ? scope.right : 0;\n                scope.leftPos = window.innerWidth - scope.rightPos;\n\n                scope.$watch('show', function (newValue, oldValue) {\r\n                    if (newValue != undefined || newValue != null) {\r\n                        if (newValue) {\r\n                            if (scope.modifyParentStyle) {\r\n                                if (scope.modifyParentStyle.toLowerCase() !== 'false') {\r\n                                    $element.parent().css({\r\n                                        width: 'calc(100% - ' + $element.outerWidth(true) + 'px)'\r\n                                    });\r\n                                }\r\n                            }\n                            $element.css({\r\n                                transform: 'translateX(-' + ($element.outerWidth(true) - scope.rightPos) + 'px)'\r\n                            });\r\n                            $('body').addClass('is-overflowHidden');\r\n                        }\n                        else {\r\n                            if (scope.modifyParentStyle) {\r\n                                if (scope.modifyParentStyle.toLowerCase() !== 'false') {\r\n                                    $element.parent().css({\r\n                                        width: 'calc(100% - ' + scope.rightPos + 'px)'\r\n                                    });\r\n                                }\r\n                            }\n                            $element.css({\r\n                                transform: 'translateX(0px)'\r\n                            });\r\n                            $('body').removeClass('is-overflowHidden');\r\n                            $('body').css('overflow','auto');\r\n                        }\r\n                    }\r\n                });\r\n            },\n            templateUrl: 'shared/directives/slidingMenu/slidingMenuTemplate.html'\r\n        };\r\n    }]);\r\n})();\n\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartAccordion', ['$timeout','$parse','$rootScope', function ($timeout,$parse,$rootScope) {\r\n        return {\r\n            restrict: 'EA',\r\n            transclude: true,\r\n            replace: true,\r\n            scope: true,\r\n            link: function (scope, elem, attr) {\r\n                var accordian = {\r\n                    target: elem.find('.accordion-header'),\r\n                    content: elem.find('.accordion-content')\r\n                }, onChange = $parse(attr.onChange);\r\n\r\n                accordian.target.data('isOpen', false);\r\n                accordian.content.hide(0).slideUp(0);\r\n\r\n                attr.$observe('show', function (a, b) {\r\n                    showHideAccordian.call(accordian.target, a == 'true' ? true : false);\r\n                });\r\n\r\n                accordian.target.click(function () {\r\n                    showHideAccordian.call(this, !$(this).data('isOpen'));\r\n                    accEvents();\r\n                    scope.$digest();\r\n                });\r\n                function accEvents() {\r\n                    onChange(scope, {\r\n                        e: {\r\n                            isOpen: accordian.target.data('isOpen')\r\n                        }\r\n                    });\r\n                   \r\n                }\r\n                function showHideAccordian(val) {\r\n                    var _this = $(this),\r\n                        _isOpen = _this.data(\"isOpen\");\r\n                    if (val && !_isOpen) {\r\n                        _this.data(\"isOpen\", true);\r\n                        accordian.content.slideDown();\r\n                    } else if (!val && _isOpen) {\r\n                        _this.data(\"isOpen\", false);\r\n                        accordian.content.slideUp();\r\n                    };\r\n                };\r\n            },\r\n            template: \"<div class='smart-accordion-container' ng-transclude></div>\"\r\n        }\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartAccumulator', ['$timeout', function ($timeout) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\tscope: {\r\n\t\t\t\tngModel: '=?',\r\n\t\t\t\toptions: '=',\r\n\t\t\t\tisSearch: '=',\r\n\t\t\t\tleftLoader: '=',\r\n\t\t\t\trightLoader: '=',\r\n\t\t\t\tmodelCount: '=?',\r\n\t\t\t\toptionCount: '=?',\r\n\t\t\t\tcolumnMappingError: '=',\r\n\t\t\t\tselectionCallback: '&',\r\n\t\t\t\tsearchCallback: '&',\r\n\t\t\t\tmaxLimit: '=',\r\n\t\t\t\tscrollEndRightCallback: '&',\r\n\t\t\t\tscrollEndLeftCallback: '&'\r\n                },\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\t\t\t    scope.label = attrs.label;\r\n\t\t\t    scope.optionCount = angular.isDefined(scope.optionCount) ? scope.optionCount : true;\r\n\t\t\t    scope.modelCount = angular.isDefined(scope.modelCount) ? scope.modelCount : true;\r\n\t\t\t    scope.iconInfo = scope.$eval(attrs.iconInfo);\r\n\t\t\t\tscope.accumulatorHeight = attrs.height + 'px';\r\n\t\t\t\tscope.accumulatorLeftScrollHeight = (attrs.height - 48) + 'px';\r\n\t\t\t    scope.loaderFlag = {\r\n\t\t\t\t    plain: true,\r\n\t\t\t\t    center: true,\r\n\t\t\t\t    message:\"\",\r\n\t\t\t\t    top:'50',\r\n                    left:'131'\r\n\t\t\t\t};\r\n\t\t\t\t//if (scope.isSearch) {\r\n\t\t\t\t//\tscope.accumulatorLeftScrollHeight = (attrs.height - 48) + 'px';            \t\t\r\n\t\t\t\t//}           \t\r\n\t\t\t\tscope.focusAccumulatorSearch = false;\r\n\t\t\t\tscope.isAccumulatorSearchActive = false;\r\n\t\t\t\tscope.showAccumulatorSearch = false;\r\n\t\t\t\tscope.accumulatorSearchModel = \"\";\r\n\t\t\t\tscope.showAccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isAccumulatorSearchActive = true;\r\n\t\t\t\t\tscope.focusAccumulatorSearch = true;\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t    $(\"#searchLeftTextbox\").find(\"input\").focus();\r\n\t\t\t\t}, 500);\r\n\t\t\t\t\t//scope.showMe = true;\r\n\t\t\t\t\tscope.hideAccumulatorSearchClose = true;\r\n\t\t\t\t}\r\n\t\t\t\tscope.hideAcccumulatorSearch = function () {\r\n\t\t\t\t    scope.leftCheckedCount = 0;\r\n\t\t\t\t\tif (scope.accumulatorSearchModel != \"\") {\r\n\t\t\t\t\t    scope.accumulatorSearchModel = \"\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t    scope.isAccumulatorSearchActive = false;\r\n\t\t\t\t\t    scope.focusAccumulatorSearch = false;\r\n\t\t\t\t\t    scope.hideAccumulatorSearchClose = false;\r\n\t\t\t\t\t    $(\"#accumulatorLeftShowSearch\").focus();\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($.isFunction(scope.searchCallback)) {\r\n\t\t\t\t\t    scope.searchCallback({ $data: { text: scope.accumulatorSearchModel, type: \"close\" } });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t    // Right side Search\r\n\t\t\t\tscope.smartScrollLeftEnd = function () {\r\n\t\t\t\t    if ($.isFunction(scope.scrollEndLeftCallback)) {\r\n\t\t\t\t        scope.scrollEndLeftCallback();\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.smartScrollRightEnd = function () {\r\n\t\t\t\t    if ($.isFunction(scope.scrollEndRightCallback)) {\r\n\t\t\t\t        scope.scrollEndRightCallback();\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.focusRightAccumulatorSearch = false;\r\n\t\t\t\tscope.isRightAccumulatorSearchActive = false;\r\n\t\t\t\tscope.showRightAccumulatorSearch = false;\r\n\t\t\t\tscope.showRightAccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isRightAccumulatorSearchActive = true;\r\n\t\t\t\t\tscope.focusRightAccumulatorSearch = true;\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t    $(\"#searchRightTextbox\").find(\"input\").focus();\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t\t//scope.showMe = true;\r\n\t\t\t\t\tscope.hideRightAccumulatorSearchClose = true;\r\n\t\t\t\t}\r\n\t\t\t\tscope.hideRightAcccumulatorSearch = function () {\r\n\t\t\t\t\tscope.isRightAccumulatorSearchActive = false;\r\n\t\t\t\t\tscope.focusRightAccumulatorSearch = false;\r\n\t\t\t\t\tscope.hideRightAccumulatorSearchClose = false;\r\n\t\t\t\t\t$(\"#accumulatorRightShowSearch\").focus();\r\n\r\n\t\t\t\t}\r\n\t\t\t\tscope.searchTextKeyUpFn = function (e) {\r\n\t\t\t\t    if ($.isFunction(scope.searchCallback)) {\r\n\t\t\t\t        scope.searchCallback({ $data: { text: e.target.value, type: \"textfield\", \"e\": e } });\r\n\t\t\t\t    }\r\n\t\t\t\t    scope.leftCheckedCount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\tscope.leftCheckedCount = 0;\r\n\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\tscope.leftBoxListCheck = function (arg) {\r\n\t\t\t\t    if (arg.isChecked)\r\n\t\t\t\t        scope.leftCheckedCount++;\r\n\t\t\t\t    else\r\n\t\t\t\t        scope.leftCheckedCount--;\r\n\r\n\t\t\t\t    for (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t        if (((scope.leftCheckedCount + scope.ngModel.length >= scope.maxLimit) && !scope.options[i].isChecked) || (scope.maxLimit == scope.leftCheckedCount && !scope.options[i].isChecked)) {\r\n\t\t\t\t            scope.options[i].isDisabled = true;\r\n\t\t\t\t        } else {\r\n\t\t\t\t            if (scope.ngModel.length >= scope.maxLimit && scope.options[i].$$hashKey == arg.$$hashKey)\r\n\t\t\t\t                scope.options[i].isChecked = false;\r\n\t\t\t\t                 scope.options[i].isDisabled = false;\r\n\t\t\t\t        }\r\n\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\tscope.rightBoxListCheck = function () {\r\n\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\tfor (var i = 0; i < scope.ngModel.length; i++) {\r\n\t\t\t\t\t\tif (!scope.ngModel[i].isDisabled) {\r\n\t\t\t\t\t\t\tif (scope.ngModel[i].isChecked) {\r\n\t\t\t\t\t\t\t\tscope.rightCheckedCount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            function generateKey(obj) {\r\n\t\t\t\t\tvar getProperty = \"\";\r\n\t\t\t\t\tvar getKey = \"\";\r\n\t\t\t\t\tvar addedKeys = scope.$eval(attrs.addKeys);\r\n\t\t\t\t\tfor (var i = 0; i < addedKeys.length; i++) {\r\n\t\t\t\t\t\tgetProperty = addedKeys[i];\r\n\t\t\t\t\t\tgetKey = getKey + \" \" + obj[getProperty];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn getKey;\r\n\t\t\t\t}\r\n\t\t\t\tscope.$watch('options', function (newOptions) {\r\n\t\t\t\t\tscope.options = newOptions;\r\n\t\t\t\t\tfor (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t\t\tif (scope.options[i].isGroup) {\r\n\t\t\t\t\t\t\tfor (var j = 0; j < scope.options[i].group.length; j++) {\r\n\t\t\t\t\t\t\t\tscope.options[i].group[j].optionKey = generateKey(scope.options[i].group[j]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tscope.options[i].optionKey = generateKey(scope.options[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true);\r\n\t\t\t\t\r\n\t\t\t\t// move the selected item to the right\r\n\t\t\t\tscope.moveRight = function (accData) {\r\n\t\t\t\t\tvar selectedOptions = [];\r\n\t\t\t\t\tif (scope.leftCheckedCount > 0) {\r\n\t\t\t\t\t\tfor (var i = 0; i < scope.options.length; i++) {\r\n\t\t\t\t\t\t\tif (scope.options[i].isChecked) {\r\n\t\t\t\t\t\t\t\tif (scope.options[i].isGroup) {\r\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < scope.options[i].group.length; j++) {\r\n\t\t\t\t\t\t\t\t\t\tscope.ngModel.push(scope.options[i].group[j]);\r\n\t\t\t\t\t\t\t\t\t\tscope.options[i].group[j].isChecked = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tscope.options[i].isChecked = true;\r\n\t\t\t\t\t\t\t\t\tselectedOptions.push(scope.options[i]);\r\n\t\t\t\t\t\t\t\t\tscope.ngModel.push(scope.options[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// get the add objects\r\n\t\t\t\t\t\t\t\t//scope.addscope.push(scope.leftBoxList[i]);\r\n\t\t\t\t\t\t\t\tvar index = scope.options.indexOf(scope.options[i]);\r\n\t\t\t\t\t\t\t\tscope.options.splice(index, 1);\r\n\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($.isFunction(scope.selectionCallback)) {\r\n\t\t\t\t\t\t\tscope.selectionCallback({ e: selectedOptions, direction: 'LTR' });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.rightBoxListCheck();\r\n\t\t\t\t\tscope.leftCheckedCount = 0;\r\n\t\t\t\t    //scope.leftSelectAll = false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// move the selected item to the left\r\n\t\t\t\tvar selectedOptions = [];\r\n\t\t\t\tscope.moveLeft = function (accData) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (scope.rightCheckedCount > 0) {\r\n\t\t\t\t\t\tfor (var i = 0; i < scope.ngModel.length; i++) {\r\n\t\t\t\t\t\t\tif (!scope.ngModel[i].isDisabled) {\r\n\t\t\t\t\t\t\t\tif (scope.ngModel[i].isChecked) {\r\n\r\n\t\t\t\t\t\t\t\t\tscope.ngModel[i].isChecked = false;\r\n\t\t\t\t\t\t\t\t\tscope.options.push(scope.ngModel[i]);\r\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < scope.options.length; j++) {\r\n\t\t\t\t\t\t\t\t\t    scope.options[j].isDisabled = false;\r\n\t\t\t\t\t\t\t\t\t    scope.rightCheckedCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tselectedOptions.push(scope.ngModel[i]);\r\n\r\n\t\t\t\t\t\t\t\t\t// get the remove objects\r\n\t\t\t\t\t\t\t\t\t//scope.removescope.push(scope.rightBoxList[i]);\r\n\t\t\t\t\t\t\t\t\tvar index = scope.ngModel.indexOf(scope.ngModel[i]);\r\n\t\t\t\t\t\t\t\t\tscope.ngModel.splice(index, 1);\r\n\t\t\t\t\t\t\t\t\ti--;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($.isFunction(scope.selectionCallback)) {\r\n\t\t\t\t\t\t\tscope.selectionCallback({ e: selectedOptions, direction: 'RTL' });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\t//scope.rightSelectAll = false;\r\n\t\t\t\t};\r\n\t\t\t\tscope.$watch('ngModel', function (newModel) {\r\n\t\t\t\t    scope.accumulatorSearchModel = \"\";\r\n\t\t\t\t    scope.accumulatorRightSearchModel = \"\";\r\n\t\t\t\t\tscope.ngModel = newModel;\r\n\t\t\t\t\tif (scope.ngModel.length <= 0) {\r\n\t\t\t\t\t\tscope.rightCheckedCount = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tscope.$watch('rightLoader', function (rightLoaderUpdate) {\r\n\t\t\t\t    scope.rightLoader = rightLoaderUpdate;\r\n\t\t\t\t});\r\n\t\t\t\tscope.$watch('leftLoader', function (leftLoaderUpdate) {\r\n\t\t\t\t    scope.leftLoader = leftLoaderUpdate;\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/smartAccumulator/smartAccumulatorTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartCarousel', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                \"apiObj\": \"=\",\r\n                \"carouselArr\": \"=\",\r\n                \"arrowClick\": \"&\",\r\n                \"getItem\": \"&\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var margin = 0;\r\n                var marginToChange = \"margin-left\";\r\n                var dimensionToChange = \"width\";\r\n                var textAlign = \"left\";\r\n                var stepSize = 94;\r\n\r\n                scope.scrollBarClass = \"scrollBarClass \" + scope.carouselArr.classes;\r\n                scope.arrowClass = \"icon iconMedium reqNavArrow \" + scope.carouselArr.arrow;\r\n\r\n                if (scope.carouselArr.type === \"horizontal\" && scope.carouselArr.id === \"leftBar\") {\r\n                    textAlign = \"right\";\r\n                }\r\n\r\n                if (scope.carouselArr.type == \"vertical\") {\r\n                    marginToChange = \"margin-top\";\r\n                    dimensionToChange = \"height\";\r\n                    textAlign = \"top\";\r\n                    stepSize = 94;\r\n                }\r\n\r\n                scope.internalAPIObj = scope.apiObj || {};\r\n                scope.internalAPIObj.arrowClick = function (item) {\r\n                    scope.arrowClick(scope, {\r\n                        e: item\r\n                    });\r\n                };\r\n\r\n                scope.getClickedItem = function (item) {\r\n                    scope.getItem({ e: item });\r\n                }\r\n                scope.animate = false;\r\n\r\n                scope.internalAPIObj.resetUI = function (availableLength, addAnimation) {\r\n                    var collectionEle = angular.element(element.children()[1]);\r\n\r\n                    var length = scope.carouselArr.items.length * stepSize;\r\n\r\n                    scope.animate = true;\r\n\r\n                    if (dimensionToChange == \"height\") {\r\n                        collectionEle.css(\"height\", availableLength);\r\n                    } else {\r\n                        collectionEle.css(\"width\", \"100%\");\r\n                    }\r\n\r\n                    if ((availableLength) <= length) {\r\n\r\n                        if (scope.carouselArr.id === \"topBar\") {\r\n                            collectionEle.removeClass('topBarOverflow').addClass('topBarOverflowHidden');\r\n                        }\r\n                        scope.carouselArr.showArrow = true;\r\n                    } else {\r\n\r\n                        if (scope.carouselArr.id === \"topBar\") {\r\n                            collectionEle.removeClass('topBarOverflowHidden').addClass('topBarOverflow');\r\n                        }\r\n                        scope.carouselArr.showArrow = false;\r\n                    }\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/smartCarousel/smartCarousel.html'\r\n        };\r\n    }]);\r\n})();\r\n\n(function () {\r\n\t'use strict';\r\n\r\n\tangular.module('SMART2').directive('countdown', ['$interval', function ($interval) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\ttransclude: true,\r\n\t\t\tscope: {\r\n\t\t\t    date: '@',\r\n                timeoutCallback: '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tvar from = new Date(attrs.date);\r\n\r\n\t\t\t\tfunction timer(t) {\r\n\t\t\t\t\tvar days = Math.floor(t / 86400);\r\n\t\t\t\t\tt -= days * 86400;\r\n\t\t\t\t\tvar hours = Math.floor(t / 3600) % 24;\r\n\t\t\t\t\tt -= hours * 3600;\r\n\t\t\t\t\tvar minutes = Math.floor(t / 60) % 60;\r\n\t\t\t\t\tt -= minutes * 60;\r\n\t\t\t\t\tvar seconds = t % 60;\r\n\t\t\t\t\tif (!days && !hours && !minutes && !seconds) {\r\n\t\t\t\t\t\tif (angular.isDefined(timerObj)) {\r\n\t\t\t\t\t\t\t$interval.cancel(timerObj);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (attrs.timeoutCallback && angular.isFunction(scope.timeoutCallback)) {\r\n\t\t\t\t\t\t    scope.timeoutCallback();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn days + 'd ' + hours + 'h ' + minutes + 'm ' + seconds + 's';\r\n\t\t\t\t}\r\n\t\t\t\tvar timerObj = $interval(function () {\r\n\t\t\t\t\tvar diff = Math.floor((from.getTime() - new Date().getTime()) / 1000);\r\n\t\t\t\t\t$(element).text(timer(diff));\r\n\t\t\t\t}, 1000)\r\n\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartDocSlider', ['$parse', '$focusOnField', function ($parse, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n             scope: true,\r\n            link: function (scope, element, attrs) {\r\n\r\n                var onHide = $parse(attrs.onHide);\r\n                scope.commonSelectedOptionInside = { title: '' };\r\n\r\n                attrs.$observe(\"slideObj\", function (value) {\r\n                    if (attrs.slideObj) {\r\n\r\n                        var slideObj = JSON.parse(attrs.slideObj);\r\n                        scope.src = slideObj.src;\r\n                        scope.list = slideObj.list;\r\n                        scope.index = slideObj.index;\r\n                        scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                        scope.updateTheIndexInController = function (obj) {\r\n                            scope.index = scope.list.indexOf(obj);\r\n                            scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                            scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                            var listLength = scope.list.length;\r\n                            if (scope.index == 0) {\r\n                                scope.prevIndex = listLength - 1;\r\n                            }\r\n                            else if (scope.index == listLength - 1) {\r\n                                scope.nextIndex = 0;\r\n                            }\r\n\r\n                        }\r\n\r\n                        scope.nextIndex = angular.copy(scope.index);\r\n                        scope.prevIndex = angular.copy(scope.index);\r\n\r\n                        var listLength = scope.list.length;\r\n\r\n                        if (scope.index == 0) {\r\n                            scope.nextIndex++;\r\n                            scope.prevIndex = listLength - 1;\r\n                        }\r\n                        else if (scope.index == listLength - 1) {\r\n                            scope.nextIndex = 0;\r\n                            scope.prevIndex--;\r\n                        }\r\n                        else if (scope.index < listLength - 1) {\r\n                            scope.nextIndex++;\r\n                            scope.prevIndex--;\r\n                        }\r\n                    }\r\n                });\r\n                scope.tabbingFocus = false;\r\n                //Need to change the code\r\n                scope.$watch(attrs.ngShow, function (value) {\r\n                    if (value) {\r\n                        angular.element('body').css('overflow', 'hidden');\r\n                        angular.element(document.activeElement).addClass(\"sliderDocTrigger\");\r\n                        setTimeout(function () { firstFieldFocused();}, 500);\r\n                      \r\n                    } else {\r\n                        angular.element('body').css('overflow', '');\r\n                        angular.element('.sliderDocTrigger').focus().removeClass('sliderDocTrigger');\r\n                        scope.tabbingFocus = false;\r\n                    }\r\n                });\r\n\r\n                scope.next = function () {\r\n                    scope.tabbingFocus = false;\r\n                    var listLength = scope.list.length;\r\n                    var modal = angular.element('.slide-view-modal');\r\n\r\n                    modal.css('left', '-50%');\r\n\r\n                    if (scope.index < listLength - 1)\r\n                        scope.index++;\r\n                    else if (scope.index == listLength - 1)\r\n                        scope.index = 0;\r\n\r\n                    if (scope.index == 0) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = listLength - 1;\r\n                    }\r\n                    else if (scope.index == listLength - 1) {\r\n                        scope.nextIndex = 0;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    else if (scope.index < listLength - 1) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    setTimeout(function () {\r\n                        modal.css('transition', 'none');\r\n                        modal.css('display', 'none');\r\n                        modal.css('left', '150%');\r\n                        modal.css('display', 'block');\r\n                    }, 350);\r\n                    setTimeout(function () {\r\n                        modal.css('transition', '0.5s ease-in-out');\r\n                        modal.css('left', '50%');\r\n                        firstFieldFocused();\r\n                    }, 370);\r\n                    scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                 \r\n                }\r\n\r\n                scope.prev = function () {\r\n                    scope.tabbingFocus = false;\r\n                    var listLength = scope.list.length;\r\n                    var modal = angular.element('.slide-view-modal');\r\n\r\n                    modal.css('left', '150%');\r\n\r\n                    if (scope.index > 0)\r\n                        scope.index--;\r\n                    else if (scope.index == 0)\r\n                        scope.index = listLength - 1;\r\n\r\n                    if (scope.index == 0) {\r\n                        scope.prevIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = listLength - 1;\r\n                    }\r\n                    else if (scope.index == listLength - 1) {\r\n                        scope.prevIndex = 0;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    else if (scope.index < listLength - 1) {\r\n                        scope.nextIndex = (angular.copy(scope.index)) + 1;\r\n                        scope.prevIndex = (angular.copy(scope.index)) - 1;\r\n                    }\r\n                    setTimeout(function () {\r\n                        modal.css('transition', 'none');\r\n                        modal.css('display', 'none');\r\n                        modal.css('left', '-50%');\r\n                        modal.css('display', 'block');\r\n                    }, 350);\r\n                    setTimeout(function () {\r\n                        modal.css('transition', '0.7s ease-in-out');\r\n                        modal.css('left', '50%');\r\n                        firstFieldFocused();\r\n                    \r\n                    }, 370);\r\n                    scope.commonSelectedOptionInside.title = scope.list[scope.index];\r\n                   \r\n                };\r\n\r\n\r\n                scope.close = function () {\r\n\r\n                    if (angular.isFunction(onHide)) {\r\n                        //scope.$apply(function () {\r\n                        onHide(scope, { e: \"\" });\r\n                        //});\r\n                    };\r\n                    scope.tabbingFocus = false;\r\n                };\r\n\r\n                var firstFieldFocused = function () {\r\n                    scope.tabbingFocus = true;\r\n                    var $fistField = angular.element('.docSlider-content').find(\"a, input, button, textarea\").first();\r\n                    $focusOnField($fistField);\r\n                };\r\n\r\n                scope.funcOnKeyDown = function (e) {\r\n                    if (e.keyCode == 27) {\r\n                        scope.close();\r\n                    } else if (e.keyCode == 37) {\r\n                        scope.prev()\r\n                    } else if (e.keyCode == 39) {\r\n                        scope.next()\r\n                    }\r\n                };\r\n              \r\n            },\r\n            templateUrl: 'shared/directives/smartDocSlider/smartDocSlider.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('httpLoaderInterceptor', ['$rootScope', '$timeout', function ($rootScope, $timeout) {\r\n\r\n        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n            $rootScope.pageLoaderFlagController = true;\r\n        });\r\n\r\n        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\r\n            //$timeout(function () {\r\n                $rootScope.pageLoaderFlagController = false;\r\n            //}, 2000);\r\n        });\r\n\r\n        var requestCount = 0;\r\n        function startRequest(config) {\r\n            if (!requestCount) {\r\n                //$rootScope.pageLoaderFlagController = true;\r\n            }\r\n            requestCount++;\r\n            return config;\r\n        }\r\n        function endRequest(arg) {\r\n            if (!requestCount)\r\n                return;\r\n            requestCount--;\r\n            if (!requestCount) {\r\n                //$rootScope.pageLoaderFlagController = false;\r\n            }\r\n            return arg;\r\n        }\r\n        return {\r\n            'request': startRequest,\r\n            'requestError': endRequest,\r\n            'response': endRequest,\r\n            'responseError': endRequest\r\n        };\r\n    }]);\r\n\r\n    angular.module('SMART2').config(['$httpProvider', function ($httpProvider) {\r\n        $httpProvider.interceptors.push('httpLoaderInterceptor');\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartGlobalLoader', ['$timeout', '$translate', function ($timeout, $translate) {\r\n        return {\r\n            restrict: 'AE',\r\n            replace: true,\r\n            scope: {\r\n                isFixed: '=?',\r\n                config: '=?',\r\n                onCancel: \"&\",\r\n            },\r\n            link: function (scope, element, attrs) {\r\n            \tvar message = $translate.instant(\"loadingMsg\");\r\n            \t\r\n                scope.conf = angular.extend({\r\n                    message: message,\r\n                    center: false,\r\n                    plain: false,\r\n                    bgwhite: false,\r\n                    top: undefined,\r\n                    left: undefined\r\n                }, scope.config);\r\n                scope.messageArray = scope.conf.message.split(\"\\n\");\r\n                //Count left\r\n                $timeout(function () {\r\n                    var widthCount = angular.element(element[0].querySelector('.relative-loader-container')).width();\r\n                    var heightCount = angular.element(element[0].querySelector('.relative-loader-container')).height();\r\n                    scope.leftTopCount = {\r\n                        left: (scope.conf.left == undefined || scope.conf.left == null || scope.conf.left == '') ? \"calc(50% - \" + widthCount / 2 + \"px)\" : scope.conf.left + \"px\",\r\n                        top: (scope.conf.top == undefined || scope.conf.top == null || scope.conf.top == '') ? \"calc(50% - \" + heightCount / 2 + \"px)\" : scope.conf.top+\"px\"\r\n                    };\r\n                });\r\n\t\t\t\t\n                if (angular.isDefined(attrs.onCancel)) {\r\n                \tscope.cancelBtn = { title: $translate.instant(\"cancelBtn\") };\r\n                \tscope.conf.isCancel = true;\n                }\n\n                scope.cancelCallback = function (e) {\r\n                \tscope.onCancel({ $event: e });\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/smartGlobalLoader/smartGlobalLoader.html'\r\n        };\r\n    }]);\r\n})();\nangular\r\n    .module(\"SMART2\")\r\n    .directive(\"smartHeight\", [\"$timeout\", smartHeightFun]);\r\n\r\nfunction smartHeightFun($timeout) {\r\n    return {\r\n        restrict: \"A\",\r\n        link: function (scope, element, attrs) {\r\n            var config = {\r\n                relativeTo: returnVal(attrs.relativeTo, \"relativeTo\"),\r\n                plusThis: returnVal(attrs.plusThis, \"plusThis\"),\r\n                minusThis: returnVal(attrs.minusThis, \"minusThis\")\r\n            };\r\n            var height = function () {\r\n                var h = 0, m = 0, p = 0;\r\n                if (config.relativeTo == window) {\r\n                    h = window.innerHeight;\r\n                } else {\r\n                    h = $(config.relativeTo).get(0).outerHeight;\r\n                }\r\n                if (config.plusThis) {\r\n                    p = normalizeNumber(config.plusThis);\r\n                    h += p;\r\n                } else {\r\n                    m = normalizeNumber(config.minusThis);\r\n                    h -= m;\r\n                }\r\n                return h;\r\n            }();\r\n\r\n            element.css(\"height\", height);\r\n\r\n            function normalizeNumber(val) {\r\n                var v = 0;\r\n                if (val) {\r\n                    if (Number(val) == NaN) {\r\n                        if (val.indecOf(',') > -1) {\r\n                            $(val).each(function () {\r\n                                v += this.outerHeight;\r\n                            });\r\n                        } else {\r\n                            v = $(val).get(0).outerHeight;\r\n                        }\r\n                    } else {\r\n                        v = Number(val)\r\n                    }\r\n                } else {\r\n                    v = 0;\r\n                }\r\n                return v;\r\n            }\r\n\r\n            function returnVal(val, attribute) {\r\n                var r;\r\n                switch (attribute) {\r\n                    case \"relativeTo\":\r\n                        if (!val) r = window\r\n                        else r = val;\r\n                        break;\r\n                    case \"plusThis\":\r\n                        if (!val) r = false;\r\n                        else r = val;\r\n                        break;\r\n                    case \"minusThis\":\r\n                        if (!val) r = false;\r\n                        else r = val;\r\n                        break;\r\n                }\r\n\r\n                return r;\r\n            };\r\n        }\r\n    };\r\n}\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name SmartHierarchy\r\n * @description This directive is useful for creating hierarchical structure.\r\n * \r\n * @attr {Object} config\r\n *    Config object is expected to decide the behaviour of the component.\r\n * @attr {Function} callback\r\n *    Callback function when selections are done in component\r\n * \r\n * @example\r\nController : \r\n    config :\r\n     $scope.treeComponentConfig = {\r\n                selectedNodes: \"\", // Coma seperated codes string given to component for pre selection, \r\n                \t\t\t\t   // so the default selections can be shown selected when the component \r\n                \t\t\t\t   // in initialized.\r\n                isRadio: false, // Boolean values to toggle between checkBox & radioButton\r\n                getHierarchyOnSelection: true, // If set to true , selection hierarchy\r\n                                               // (uptil the relevent parent) also will be recieved \r\n                                               // in selection callback.\r\n                isLazyLoad: true, // If set to true, data would be fetched from the server on demand \r\n                                  // (lazyLoading on scroll & node expansion)\r\n                data: null, // Custom data can also be passed to component, representation would be in hierarchical manner.\r\n                disableLevelSelection: '', // comma seperated string values of levels to be shown disabled eg. \"1,2,3\".\r\n                title: 'Category', // Title of the component.\r\n                getSelections: false, // On setting it true, it will call the callback function \r\n                                      // provided to the component with seleted values in the ouput.\r\n                clearCache: false, // On setting it true, it will clear the Java script heap \r\n                                   // runtime memory which will reduce the memory foot print of the web page.\r\n                height: '328px', // Height can be set to the component.\r\n                isSearchEnabled : true, // Bollean value to toggle the visibility of search bar.\r\n                requestParameter: { // Request parameter is expected to fetch the data from the server. \r\n                    navigationContext: \"PAS\",\r\n                    userExecutionContext: '{\"ClientName\":\"abc,....}',\r\n                    documentCode: null,\r\n                    contactCode: null,\r\n                }\r\n            };\r\n    callback :\r\n         $scope.treeComponentCallback = function (e) {\r\n                console.log(e);\r\n\r\n                // Un comment the below logic to see admin use case.\r\n                // TODO : getHierarchyOnSelection:true (in tree config)\r\n\r\n                // var obj = { 'PASList': [] };\r\n                // var levelData = _.groupBy(_.flatten(e.selectionHierarchy), \"Level\");\r\n                // _.each(levelData, function (data, key) {\r\n                    // _.each(data, function (n) {\r\n                        // n['selection'] = \"0\";\r\n                    // });\r\n                    // obj['PASList'].push({\r\n                        // \"Level\": key,\r\n                        // \"PASDetails\": data\r\n                    // });\r\n                // });\r\n                // $scope.treeComponentConfig.isRadio = true;\r\n                // $scope.treeComponentConfig.data = obj;\r\n                // $scope.treeComponentConfig.selectedNodes = e.selections[0]['ID'].toString();\r\n         }\r\n  Usage:\r\n      <smart-hierarchy-component config=\"treeComponentConfig\" callback=\"treeComponentCallback\"></smart-hierarchy-component>\r\n      */\r\n(function (angular) {\r\n    'use strict';\r\n    var hierarchyCounter = 0;\r\n    angular.module('smartHierarchyComponent', [])\r\n    .directive('smartHierarchyComponent', ['$timeout', 'RESTApi', '$q', '$rootScope', 'APPCONSTANTS', '$translate',\r\n      function ($timeout, RESTApi, $q, $rootScope, APPCONSTANTS, $translate) {\r\n          return {\r\n              restrict: 'E',\r\n              replace: true,\r\n              scope: {\r\n                  config: '=',\r\n                  callback: '&'\r\n              },\r\n              link: function (scope, element, attrs) {\r\n                  /*config for the directive*/\r\n                  scope.hierarchyCounter = hierarchyCounter++;\r\n                  scope.treeConfig = scope.config;\r\n                  scope.searchFieldVal = '';\r\n                  scope.cancelTitle = scope.searchFieldVal == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                  scope.checkCondForTemplate = function (a_data) {\r\n                      var boolTemplate = false;\r\n                      if (scope.searchFieldVal.length <= 2 && !scope.treeConfig.isReadOnly) {\r\n                          boolTemplate = true;\r\n                      } else if (scope.searchFieldVal.length <= 2 && scope.treeConfig.isReadOnly && a_data.selection != '0' && !scope.treeConfig.selectAllToggle) {\r\n                          boolTemplate = true;\r\n                      } else if (scope.searchFieldVal.length <= 2 && scope.treeConfig.isReadOnly && scope.treeConfig.selectAllToggle) {\r\n                          boolTemplate = true;\r\n                      }\r\n                      return boolTemplate;\r\n                  }\r\n                  scope.templateCheck2 = function (a_category) {\r\n                      var boolTemplate = false;\r\n                      if (scope.treeConfig.isReadOnly && a_category.selection != '0') {\r\n                          boolTemplate = true;\r\n                      } else if(!scope.treeConfig.isReadOnly) {\r\n                          boolTemplate = true;\r\n                      }\r\n                      return boolTemplate;\r\n                  }\r\n                  scope.secondaryLinkCallback = function () {\r\n                      scope.treeConfig.secondaryLink.callback();\r\n                  }\r\n                  scope.treeConfig.isSelectedOnly = false;\r\n                  scope.noRecordsFound = false;\r\n                  if (!scope.treeConfig.hasOwnProperty('modalButtonShow')) {\r\n                      scope.treeConfig.modalButtonShow = false;\r\n                  }\r\n\r\n                  if (!scope.treeConfig.hasOwnProperty('isMandatory')) {\r\n                      scope.treeConfig.isMandatory = true;\r\n                  }\r\n                  if (!scope.treeConfig.hasOwnProperty('listIcon')) {\r\n                      scope.treeConfig.listIcon = null;\r\n                  }\r\n                  if (!scope.treeConfig.hasOwnProperty('selectAllToggle')) {\r\n                      scope.treeConfig.selectAllToggle = false;\r\n                  }\r\n\r\n\r\n                  var doneCallback = scope.$eval(scope.callback);\r\n\r\n                  scope.config.refreshConfig = function (newData) {\r\n                      scope.treeConfig = newData;\r\n                      resetValue(scope.treeConfig);\r\n\r\n                  }\r\n\r\n                  var resetValue = function (data) {\r\n                      if (scope.treeConfig.isRadio) {\r\n\r\n                          scope.uniqueRadioGroupName = uniqueIDGenerator();\r\n                      }\r\n\r\n                      if (scope.treeConfig.clearCache) {\r\n                          resetDataSourcesAndPromises();\r\n                          scope.isLoading = false;\r\n                          scope.treeConfig.clearCache = false;\r\n                      }\r\n\r\n                      dataRecievedCallPromise;\r\n                      preselectionRecievedPromise;\r\n                      promises = [];\r\n\r\n                      /*Local variables*/\r\n                      navContext = scope.treeConfig.navigationContext;\r\n                      isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                      dataSet;\r\n                      searchBucket = 50;\r\n                      lazyLoadingBucket = 50;\r\n                      maxLevel = 1;\r\n                      lazyLoadOffset;\r\n                      lazyLoadMarker = [];\r\n                      levelKey = 'level';\r\n\r\n                      //levelWiseData = {};\r\n                      parentStringConstant = \"parentString\";\r\n                      parentCodeStringConstant = \"parentCodeString\";\r\n                      preselection;\r\n                      isInitialServiceCalled = false;\r\n                      searchCategories = [];\r\n                      baseLevelExpectNode = [];\r\n\r\n                      nodeExpandingCodeProperty;\r\n                      dataProperty;\r\n                      levelWiseDataProperty;\r\n                      searchProperty;\r\n                      modelProperty;\r\n\r\n                      //scope.totalSelection = 0;\r\n                      //totalID = [];\r\n                      //totalName = [];\r\n\r\n                      selectAllBool = false;\r\n\r\n                      scope.getUserSelectionArray = [];\r\n                      scope.selectionAndCountOptions = false;\r\n\r\n                      scope.treeType = scope.treeConfig.treeType;\r\n\r\n                      scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                      scope.isDisabled = scope.treeConfig.isDisabled;\r\n                      scope.isSingleSelect = scope.treeConfig.isRadio ? scope.treeConfig.isRadio : false;\r\n\r\n\r\n\r\n                      // if(scope.treeConfig.requestParameter)\r\n                      // {\r\n\r\n                      //           //scope.treeConfig.requestParameter = n;\r\n                      //           RESTApi.setDocumentId(scope.treeConfig.requestParameter.documentCode);\r\n                      //           RESTApi.setContactCode(scope.treeConfig.requestParameter.contactCode);\r\n                      //           RESTApi.setUserContext(scope.treeConfig.requestParameter.userExecutionContext);\r\n                      //           RESTApi.setEnvironment(scope.treeConfig.requestParameter.environment);\r\n                      //           RESTApi.setRequestObject(scope.treeConfig.requestParameter.requestObject);\r\n                      //           setKeysAsPerNavigationContext(scope.treeConfig.requestParameter.navigationContext);\r\n                      //           navContext = scope.treeConfig.requestParameter.navigationContext;\r\n\r\n                      //         init();\r\n\r\n                      // }\r\n\r\n                      scope.showSelectAll = scope.treeConfig.showSelectAll;\r\n                      scope.showClearSelection = scope.treeConfig.showClearSelection;\r\n                      scope.showSelectionCount = scope.treeConfig.showSelectionCount;\r\n                      scope.enableLastLevelSelection = scope.treeConfig.enableLastLevelSelection;\r\n\r\n                  };\r\n\r\n\r\n                  /* scope.$watch('config', function (n, o) {\r\n                    if (n) {\r\n                      scope.treeConfig = null;\r\n                      scope.treeConfig = scope.config;\r\n                      clearAllsearch();\r\n                     \r\n                      dataRecievedCallPromise;\r\n                      preselectionRecievedPromise;\r\n                      promises = [];\r\n                     \r\n                      navContext = scope.treeConfig.navigationContext;\r\n                      isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                      dataSet;\r\n                      searchBucket = 50;\r\n                      lazyLoadingBucket = 50;\r\n                      maxLevel = 1;\r\n                      lazyLoadOffset;\r\n                      lazyLoadMarker = [];\r\n                      levelKey = 'level';\r\n                      levelWiseData = {};\r\n                      parentStringConstant = \"parentString\";\r\n                      parentCodeStringConstant = \"parentCodeString\";\r\n                      preselection;\r\n                      isInitialServiceCalled = false;\r\n                      searchCategories = [];\r\n                      baseLevelExpectNode = [];\r\n                      nodeExpandingCodeProperty;\r\n                      dataProperty;\r\n                      levelWiseDataProperty;\r\n                      searchProperty;\r\n                      modelProperty;\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n                      selectAllBool = false;\r\n                      scope.getUserSelectionArray =[];\r\n                      scope.treeType = scope.treeConfig.treeType;\r\n                      scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                      scope.isDisabled = scope.treeConfig.isDisabled;\r\n                    }\r\n                  });*/\r\n\r\n                  function clearAllsearch() {\r\n                      serverSearchVal = \"\";\r\n                      scope.searchResults.length = 0;\r\n                      searchDataYetToBeDisplayed.length = 0;\r\n                      searchWithContainsHitResult.length = 0;\r\n                      scope.searchText = '';\r\n                      scope.searchFieldVal = '';\r\n                  }\r\n\r\n\r\n                  /*scope.$watch('config.clearCache', function (n, o) {\r\n                    if (n) {\r\n                     resetDataSourcesAndPromises();\r\n                     scope.isLoading = false;\r\n                     scope.config.clearCache = false;\r\n                   }\r\n                });*/\r\n\r\n\r\n                  var deregisterConfigSelection = scope.$watch('config.getSelections', function (n, o) {\r\n                      if (n) {\r\n                          getSelections();\r\n                          scope.config.getSelections = false;\r\n                      }\r\n                  });\r\n\r\n\r\n                  var deregReqContactCode = scope.$watch('config.requestParameter.contactCode', function (n, o) {\r\n                      if (n != o) {\r\n                          RESTApi.setContactCode(n);\r\n                          init();\r\n                      }\r\n                  });\r\n                  var deregReqParam = scope.$watch('config.requestParameter', function (n, o) {\r\n                      //if (!scope.treeConfig.data && n) {\r\n                      if (n) {\r\n                          scope.treeConfig.requestParameter = n;\r\n\r\n                          RESTApi.setDocumentId(n.documentCode);\r\n                          RESTApi.setContactCode(n.contactCode);\r\n                          RESTApi.setUserContext(n.userExecutionContext);\r\n                          RESTApi.setEnvironment(APPCONSTANTS.userPreferences.URLs.AppURL);\r\n                          RESTApi.setRequestObject(n.requestObject);\r\n\r\n                          setKeysAsPerNavigationContext(n.navigationContext);\r\n                          navContext = n.navigationContext;\r\n\r\n                          if (n.hasOwnProperty('url')) {\r\n                              RESTApi.setUrl(n.url);\r\n                          }\r\n\r\n                          //request params than it must go in \r\n                          //if (!isInitialServiceCalled)\r\n                          init();\r\n                      }\r\n                      //scope.treeConfig.requestParameter = null;\r\n                  });\r\n                  scope.selectOptions = [{\r\n                      \"code\": 1,\r\n                      \"name\": \"Select All\"\r\n                  }, {\r\n                      \"code\": 0,\r\n                      \"name\": \"Single Select\"\r\n                  }];\r\n\r\n                  scope.selectType = { \"code\": 0, \"name\": \"Single Select\" };\r\n\r\n                  var initSelectallModel = function () {\r\n                      //----SelectAllToggle----//\r\n                      scope.onSelectTypeChange = function (selectType) {\r\n                          scope.selectType = selectType;\r\n\r\n                          if (selectType.code == 1) {\r\n                              scope.clearAllSelection();\r\n                              //scope.treeConfig.isReadOnly = true;\r\n                          }\r\n                      }\r\n                      if (scope.treeConfig.selectType === 1) {\r\n                          scope.clearAllSelection();\r\n                          scope.selectType = { \"code\": 1, \"name\": \"Select All\" };\r\n                      } else {\r\n                          scope.selectType = { \"code\": 0, \"name\": \"Single Select\" };\r\n                      }\r\n                  }\r\n\r\n                  var deregConfigData = scope.$watch('config.data', function (n, o) {\r\n                      if (n) {\r\n                          initSelectallModel();\r\n                          if (scope.config.selectedNodes && scope.selectedData.length > 0) {\r\n                              scope.config.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : !scope.treeConfig.isRadio;\r\n                          } else if (!scope.config.selectedNodes || !scope.config.selectedNodes) {\r\n                              scope.config.isReadOnly = false;\r\n                          }\r\n                          setKeysAsPerNavigationContext(scope.treeConfig.navigationContext);\r\n                          navContext = scope.treeConfig.navigationContext;\r\n                          resetDataSourcesAndPromises(true);\r\n                          createLevelWiseDataSet(_.sortBy(n[dataProperty], 'Level'));\r\n                          dataRecievedCallPromise.resolve();\r\n                          renderLevels();\r\n                      }\r\n                      scope.config.data = null;\r\n                  });\r\n\r\n                  var deregSelectedNodes = scope.$watch('config.selectedNodes', function (n, o) {\r\n                      if (n) {\r\n                          preselection = n.split(',');\r\n                          if (preselection && preselection.length == 0) {\r\n                              scope.treeConfig.isReadOnly = false;\r\n                          }\r\n                          if (preselectionRecievedPromise)\r\n                              preselectionRecievedPromise.resolve();\r\n                      }\r\n                      scope.config.selectedNodes = null;\r\n                  });\r\n\r\n\r\n\r\n                  /*scope.$watch('config.isRadio', function(n, o) {\r\n                    scope.isSingleSelect = n;\r\n                    if (scope.isSingleSelect) {\r\n                     scope.uniqueRadioGroupName = uniqueIDGenerator();\r\n                   }\r\n                   scope.config.isRadio = false;\r\n                 });*/\r\n\r\n\r\n\r\n\r\n\r\n                  var navContext;\r\n                  /*promise*/\r\n                  var dataRecievedCallPromise;\r\n                  var preselectionRecievedPromise;\r\n                  var promises = [];\r\n                  var selectAllBool = false;\r\n                  /*Local variables*/\r\n                  var isLazyLoadServerData = (scope.treeConfig.isLazyLoad == true || scope.treeConfig.isLazyLoad == false) ? scope.treeConfig.isLazyLoad : false;\r\n                  var dataSet;\r\n                  var searchBucket = 50;\r\n                  var lazyLoadingBucket = 50;\r\n                  var maxLevel = 1;\r\n                  var lazyLoadOffset;\r\n                  var lazyLoadMarker = [];\r\n                  var levelKey = 'level';\r\n                  var levelWiseData = {};\r\n                  var parentStringConstant = \"parentString\";\r\n                  var parentCodeStringConstant = \"parentCodeString\";\r\n                  var preselection;\r\n                  var isInitialServiceCalled = false;\r\n                  var searchCategories = [];\r\n                  var baseLevelExpectNode = [];\r\n                  var nodeExpandingCodeProperty;\r\n                  var dataProperty;\r\n                  var levelWiseDataProperty;\r\n                  var searchProperty;\r\n                  var modelProperty;\r\n                  var treeTypeObject = \"Generic\";\r\n                  scope.codeProperty = 'ID';\r\n                  scope.titleProperty = 'Name';\r\n                  scope.levelProperty = 'Level';\r\n                  scope.parentProperty = 'ParentID';\r\n                  scope.getUserSelectionArray = [];\r\n                  scope.treeType = \"Generic\";\r\n                  scope.totalSelection = 0;\r\n\r\n                  scope.isReadOnly = false;\r\n                  scope.isDisabled = false;\r\n\r\n                  scope.showSelectAll = false;\r\n                  scope.showClearSelection = false;\r\n                  scope.showSelectionCount = false;\r\n                  scope.enableLastLevelSelection = false;\r\n\r\n\r\n\r\n\r\n                  scope.isReadOnly = scope.treeConfig.isReadOnly;\r\n                  scope.isDisabled = scope.treeConfig.isDisabled;\r\n                  scope.isSingleSelect = scope.treeConfig.isRadio;\r\n\r\n                  scope.showSelectAll = scope.treeConfig.showSelectAll;\r\n                  scope.showClearSelection = scope.treeConfig.showClearSelection;\r\n                  scope.showSelectionCount = scope.treeConfig.showSelectionCount;\r\n                  scope.enableLastLevelSelection = scope.treeConfig.enableLastLevelSelection;\r\n\r\n\r\n                  scope.selectionAndCountOptions = false;\r\n\r\n                  scope.closeButton = { title: $translate.instant(\"closeBtn\") };\r\n                  scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                  scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n                  scope.resetButton = { title: $translate.instant(\"resetButton\") };\r\n                  scope.editButton = { title: $translate.instant(\"editButton\") };\r\n                  scope.isPartiallySelected = false;\r\n\r\n                  var totalID = [];\r\n                  var totalName = [];\r\n\r\n                  function setKeysAsPerNavigationContext(mode) {\r\n                      switch (mode) {\r\n                          case 'PAS':\r\n                              nodeExpandingCodeProperty = 'PASCodes';\r\n                              dataProperty = 'PASList';\r\n                              levelWiseDataProperty = 'PASDetails';\r\n                              searchProperty = 'PAS_SearchList';\r\n                              scope.codeProperty = 'ID';\r\n                              scope.titleProperty = 'Name';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentID';\r\n                              modelProperty = 'SelectedPasCodeList';\r\n                              break;\r\n                          case 'REG':\r\n                              nodeExpandingCodeProperty = 'RegionId';\r\n                              levelWiseDataProperty = 'RegionDetails';\r\n                              dataProperty = 'RegionList';\r\n                              searchProperty = 'Region_SearchList';\r\n                              scope.codeProperty = 'ID';\r\n                              scope.titleProperty = 'Name';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentID';\r\n                              modelProperty = 'SelectedRegionList';\r\n                              break;\r\n                          case 'ORG':\r\n                              nodeExpandingCodeProperty = 'EntityDetailCode';\r\n                              levelWiseDataProperty = 'EntityDetails';\r\n                              dataProperty = 'Org_DetailsList';\r\n                              searchProperty = 'Org_SearchList';\r\n                              scope.codeProperty = 'EntityDetailCode';\r\n                              scope.titleProperty = 'EntityDisplayName';\r\n                              scope.levelProperty = 'Level';\r\n                              scope.parentProperty = 'ParentEntityDetailCode';\r\n                              modelProperty = 'SelectedORGList';\r\n                              break;\r\n                      };\r\n                  };\r\n\r\n                  scope.selectedData = [];\r\n\r\n                  /*Local member fuctions*/\r\n\r\n                  function resetDataSourcesAndPromises(isPromiseInit) {\r\n                      levelWiseData = {};\r\n                      scope.categories = [];\r\n                      lazyLoadMarker = [];\r\n                      scope.isLoading = true;\r\n                      scope.isError = false;\r\n\r\n                      scope.selectedData = [];\r\n                      scope.getUserSelectionArray = [];\r\n\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n\r\n                      if (isPromiseInit) initializePromise(true, true);\r\n                  };\r\n\r\n                  function init() {\r\n                      initSelectallModel();\r\n                      scope.isError = false;\r\n                      scope.noRecordsFound = false;\r\n                      scope.selectionAndCountOptions = false;\r\n                      scope.isPartiallySelected = false;\r\n                      //scope.treeConfig.isReadOnly = typeof scope.config.isReadOnly !== 'undefined' ? scope.config.isReadOnly : false;\r\n                      scope.treeConfig.isReadOnly = function () {\r\n                          var isReadOnly, sn;\r\n                          if (scope.selectedData.length == 0 || scope.config.selectedNodes === null) {\r\n                              isReadOnly = false;\r\n                          } else {\r\n                              isReadOnly = scope.config.isReadOnly\r\n                          }\r\n\r\n                          if (!scope.treeConfig.selectAllToggle) {\r\n                              //.requestParameter.requestObject.selectedNodes\r\n                              sn = scope.treeConfig.requestParameter.requestObject && scope.treeConfig.requestParameter.requestObject.selectedNodes && scope.treeConfig.requestParameter.requestObject.selectedNodes.length;\r\n                              if (sn) {\r\n                                  isReadOnly = true;\r\n                              } else {\r\n                                  isReadOnly = false;\r\n                              }\r\n                          }\r\n\r\n                          return isReadOnly;\r\n                      }();\r\n                      isInitialServiceCalled = true;\r\n                      resetDataSourcesAndPromises(true);\r\n                      RESTApi.getData(navContext,\r\nfunction (response) {\r\n                          var respData = response.data,\r\n                              data = respData.data;\r\n                          isInitialServiceCalled = false;\r\n                          if (response.action == 'success' && (respData && respData.status != 404)) {\r\n                              scope.noRecordsFound = !data[dataProperty] || data[dataProperty].length <= 0;\r\n                              if (!scope.noRecordsFound) {\r\n                                  if (isLazyLoadServerData) {\r\n                                      //setLevelWiseData(response.data.data);\r\n                                      setLevelWiseDataSource(data);\r\n                                  } else {\r\n                                      createLevelWiseDataSet(_.sortBy(data[dataProperty], 'Level'));\r\n                                  }\r\n                                  if (data[modelProperty] && data[modelProperty].length > 0) {\r\n                                      scope.treeConfig.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : true;\r\n                                  }\r\n                                  renderLevels();\r\n\r\n                                  //createSelectedModelIfRecieved(response.data.data.SelectedPasCodeList);\r\n                                  createSelectedModelIfRecieved(data[modelProperty]);\r\n                                  dataRecievedCallPromise.resolve();\r\n\r\n                                  if (scope.treeType == treeTypeObject) {\r\n                                  } else { //working perfect in porject team case\r\n                                      scope.totalSelection = scope.selectedData.length;\r\n                                  }\r\n                              }\r\n                              else {\r\n                                  scope.isLoading = false;\r\n                              }\r\n\r\n                          } else {\r\n                              if (scope.isLoading) scope.isLoading = false;\r\n                              if (!scope.categories.length) scope.isError = true;\r\n                          }\r\n                      }, (isLazyLoadServerData) ? {\r\n                          \"LevelAt\": \"1\",\r\n                          \"PageNumber\": 1,\r\n                          \"PageSize\": lazyLoadingBucket\r\n                      } : {},false, scope.treeType);\r\n                  };\r\n\r\n                  scope.getSelectAllBool = function () {\r\n                      if (scope.categories && scope.categories.length > 0) {\r\n                          var selectedNodes = _.filter(scope.categories, function (node) {\r\n                              return (node.selection == \"1\" || node.disabled == true)\r\n                          });\r\n                          if (scope.categories.length > 0 && selectedNodes.length == scope.categories.length) {\r\n                              selectAllBool = true;\r\n                          } else {\r\n                              selectAllBool = false;\r\n                          }\r\n\r\n                      } else {\r\n                          selectAllBool = false;\r\n                      }\r\n                      return selectAllBool;\r\n                  }\r\n\r\n                  scope.doneClickHandler = function () {\r\n                      scope.treeConfig.getSelections = true;\r\n\r\n                      // timeout required for delaying the $digest cycle\r\n                      var cancelTimer = $timeout(function () {\r\n                          scope.treeConfig.isReadOnly = false;\r\n                          $timeout.cancel(cancelTimer);\r\n                          cancelTimer = null;\r\n                      }, 10);\r\n                  }\r\n                  function createSelectedModelIfRecieved(data) {\r\n\r\n                      if (data && data.length > 0) {\r\n                          scope.selectedData = getLeafNodeWithParentHierarchy(data);\r\n                          scope.treeConfig.isReadOnly = typeof scope.config.isShowSelected !== 'undefined' ? scope.config.isShowSelected : true;\r\n                      }\r\n                  };\r\n\r\n                  function renderLevels() {\r\n                      if (levelWiseData[levelKey + '1'] != undefined) {\r\n                          scope.categories = !scope.treeConfig.isReadOnly ? levelWiseData[levelKey + '1'].slice(0, lazyLoadingBucket) : levelWiseData[levelKey + '1'];\r\n                          if (!scope.treeConfig.isReadOnly && scope.categories.length % lazyLoadingBucket == 0)\r\n                              lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                          scope.isLoading = false;\r\n                          if (scope.categories.length > 0) {\r\n                              scope.selectionAndCountOptions = true;\r\n                          }\r\n                      }\r\n                      scope.config.levelWiseData = levelWiseData;\r\n                  };\r\n\r\n\r\n                  function initializePromise(dataRievedPromiseBool, preselectionRecievedPromiseBool) {\r\n                      dataRecievedCallPromise = null;\r\n                      preselectionRecievedPromise = null;\r\n                      promises.length = 0;\r\n                      if (dataRievedPromiseBool) {\r\n                          dataRecievedCallPromise = $q.defer();\r\n                          promises.push(dataRecievedCallPromise.promise);\r\n                      }\r\n                      if (preselectionRecievedPromiseBool) {\r\n                          preselectionRecievedPromise = $q.defer();\r\n                          promises.push(preselectionRecievedPromise.promise);\r\n                      }\r\n                      $q.all(promises).then(promiseResolved);\r\n                  }\r\n\r\n\r\n\r\n                  function promiseResolved() {\r\n                      initatePreSelection();\r\n                      initializePromise(false, true);\r\n                  }\r\n\r\n                  function createLevelWiseDataSet(dataSet) {\r\n                      if (dataSet.length > 0) {\r\n                          var level = 1;\r\n                          var parentNodes = dataSet[level - 1][levelWiseDataProperty];\r\n                          insertParentHierarchyForFlatStrucure(parentNodes);\r\n                          while (parentNodes) {\r\n                              var instance = levelWiseData[levelKey + level];\r\n                              levelWiseData[levelKey + level] = (instance) ? _.map(_.groupBy(_.union(instance, parentNodes), function (doc) {\r\n                                  return doc[scope.codeProperty];\r\n                              }), function (grouped) {\r\n                                  return grouped[0];\r\n                              }) : parentNodes;\r\n                              if (dataSet[level]) {\r\n                                  insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet);\r\n                              };\r\n                              maxLevel = level;\r\n                              level = level + 1;\r\n                              if (typeof (scope.treeConfig.to) !== 'undefined') {\r\n                                  if (level > scope.treeConfig.to) {\r\n                                      var len = parentNodes.length;\r\n                                      for (var levelDataIndex = 0; levelDataIndex < len; levelDataIndex++) {\r\n                                          parentNodes[levelDataIndex].ChildCount = 0;\r\n                                      }\r\n                                      parentNodes = null;\r\n                                  } else {\r\n                                      parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                                  }\r\n                              } else {\r\n                                  parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                              }\r\n                          };\r\n                      }\r\n                  };\r\n\r\n                  function insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet) {\r\n                      var fetchedData = (level) ? _.groupBy(dataSet[level][levelWiseDataProperty], scope.parentProperty) : null;\r\n                      _.each(parentNodes, function (parent) {\r\n                          var childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n                          if (childForParent) {\r\n                              _.each(childForParent, function (node, index) {\r\n                                  node[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n                                  node[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n                                  node['isExpanded'] = false;\r\n                                  var nodeSelection = node.selection,\r\n                                      isNodeSelected = node.IsSelected;\r\n                                  node['selection'] = (node && nodeSelection && (nodeSelection == \"1\" || nodeSelection == \"0\") /*&& !scope.isSingleSelect*/) ? nodeSelection : (isNodeSelected == false || isNodeSelected == null || isNodeSelected) ? getSelectionState(isNodeSelected) : '0',\r\n                                  //checkDisableForPartialNode(node);\r\n                                  node['index'] = index;\r\n\r\n                                  if (nodeSelection == \"1\") {\r\n\r\n                                      var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                      if (index > -1) {\r\n                                      } else {\r\n                                          totalID.push(node[scope.codeProperty]);\r\n                                          totalName.push(node[scope.titleProperty]);\r\n                                          scope.totalSelection++;\r\n                                      }\r\n                                  }\r\n\r\n\r\n                              });\r\n                          }\r\n                      });\r\n                  };\r\n\r\n\r\n\r\n                  function checkDisableForPartialNode(node) {\r\n                      if (scope.treeConfig.requestParameter) {\r\n                          if (!scope.treeConfig.requestParameter.getComplete && scope.treeConfig.requestParameter.contactCode && node.selection == '2') {\r\n\r\n                              node.disabled = true;\r\n\r\n                          } else {\r\n                              node.disabled = false;\r\n                          }\r\n                      } else {\r\n                          node.disabled = false;\r\n                      }\r\n\r\n                  };\r\n\r\n                  function setLevelWiseDataSource(data, parent) {\r\n                      _.each(data[dataProperty], function (n) {\r\n                          _.each(n[levelWiseDataProperty], function (d) {\r\n                              d.selection = (parent && parent.selection && (parent.selection == \"1\" || parent.selection == \"0\") /*&& !scope.isSingleSelect*/) ? parent.selection : (d.IsSelected == false || d.IsSelected == null || d.IsSelected) ? getSelectionState(d.IsSelected) : '0';\r\n                              //checkDisableForPartialNode(d);\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };\r\n                  function setLevelWiseData(data, parent) {\r\n                      _.each(data[dataProperty], function (n) {\r\n                          _.each(n[levelWiseDataProperty], function (d) {\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  var parentSelection = parent.selection,\r\n                                      dIsSelected = d.IsSelected;\r\n                                  d.selection = (parent && parentSelection && (parentSelection == \"1\" || parentSelection == \"0\") /*&& !scope.isSingleSelect*/) ? parent.selection : (dIsSelected == false || dIsSelected == null || dIsSelected) ? getSelectionState(dIsSelected) : '0';\r\n\r\n                              }\r\n                              else {\r\n                                  d.selection = '0';\r\n                              }\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  if (isLazyLoadServerData) {\r\n                                      totalID.push(d[scope.codeProperty]);\r\n                                      totalName.push(d[scope.titleProperty]);\r\n                                      scope.totalSelection++;\r\n                                  }\r\n                              }\r\n\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };\r\n\r\n                  /*function createLevelWiseDataSet(dataSet) {\r\n                      var level = 1;\r\n                      var parentNodes = dataSet[level - 1][levelWiseDataProperty];\r\n                      insertParentHierarchyForFlatStrucure(parentNodes);\r\n                      while (parentNodes) {\r\n                          levelWiseData[levelKey + level] = parentNodes;\r\n                          if (dataSet[level]) {\r\n                              insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet);\r\n                          };\r\n                          maxLevel = level;\r\n                          level = level + 1;\r\n                          parentNodes = (dataSet[level - 1]) ? dataSet[level - 1][levelWiseDataProperty] : null;\r\n                      };\r\n                  };\r\n      \r\n                  function insertParentHierarchyForFlatStrucure(parentNodes, level, dataSet) {\r\n                      var fetchedData = (level) ? _.groupBy(dataSet[level][levelWiseDataProperty], scope.parentProperty) : null;\r\n                      _.each(parentNodes, function(parent) {\r\n                          var childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n                          if (childForParent) {\r\n                              _.each(childForParent, function(node, index) {\r\n                                  node[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n                                  node[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n                                  node['isExpanded'] = false;\r\n                                  node['selection'] = node['selection'] ? node['selection'] : \"0\";\r\n                                  node['index'] = index;\r\n                              });\r\n                          }\r\n                      });\r\n                  };\r\n      \r\n                  function setLevelWiseData(data, parent) {\r\n                      _.each(data[dataProperty], function(n) {\r\n                          _.each(n[levelWiseDataProperty], function(d) {\r\n                              d.selection = (parent && parent.selection && (parent.selection == \"1\" || parent.selection == \"0\") && !scope.isSingleSelect) ? parent.selection : (d.IsSelected == false || d.IsSelected == null || d.IsSelected) ? getSelectionState(d.IsSelected) : '0';\r\n                              d[parentCodeStringConstant] = parent && parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + d[scope.codeProperty] : (d[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + d[scope.codeProperty] : \"\";\r\n                              d[parentStringConstant] = parent && parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + d[scope.titleProperty] : (d[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + d[scope.titleProperty] : \"\";\r\n      \r\n                              if (baseLevelExpectNode[d[scope.codeProperty]]) {\r\n                                  d.selection = getStateForNode(d);\r\n                                  scope.expandNode(d);\r\n                                  delete baseLevelExpectNode[d[scope.codeProperty]];\r\n                              }\r\n                          });\r\n                          levelWiseData[levelKey + n.Level] = _.isArray(levelWiseData[levelKey + n.Level]) ? levelWiseData[levelKey + n.Level].concat(n[levelWiseDataProperty]) : n[levelWiseDataProperty];\r\n                      });\r\n                  };*/\r\n\r\n                  function getSelectionState(val) {\r\n                      if (val) {\r\n                          return '1';\r\n                      } else if (val == false) {\r\n                          return '2';\r\n                      } else if (val == null) {\r\n                          return '0';\r\n                      }\r\n                  };\r\n\r\n                  function resetSelectionState() {\r\n                      _.each(scope.selectedData, function (_node) {\r\n                          scope.selectNode(_node, '0');\r\n                      });\r\n                  };\r\n\r\n                  function initatePreSelection() {\r\n                      resetSelectionState();\r\n                      _.each(preselection, function (preselectionNode) {\r\n                          var searchLevel = 1;\r\n                          while (searchLevel <= maxLevel) {\r\n                              var foundNode = _.groupBy(levelWiseData[levelKey + searchLevel], scope.codeProperty)[preselectionNode];\r\n                              if (foundNode) {\r\n                                  scope.selectNode(foundNode[0], '1');\r\n                                  break;\r\n                              }\r\n                              searchLevel = searchLevel + 1;\r\n                          }\r\n                      });\r\n                  };\r\n\r\n                  function getNodesFromServer(parent, level, bucket, pageIndex, callback) {\r\n                      scope.isLoading = true;\r\n                      if (scope.isError) scope.isError = false;\r\n                      if (parent)\r\n                          parent.childLoading = true;\r\n\r\n                      var reqPayLoad = {\r\n                          \"LevelAt\": level,\r\n                          \"PageNumber\": (!parent) ? pageIndex : null,\r\n                          \"PageSize\": (!parent) ? bucket : null\r\n                      };\r\n                      reqPayLoad[nodeExpandingCodeProperty] = (parent) ? parent[scope.codeProperty] : null;\r\n                      //RESTApi.getData(scope.treeConfig.navigationContext, function (responseData) {\r\n                      //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function (responseData) {\r\n                      RESTApi.getData(navContext,\r\n                          function (responseData) {\r\n                          if (responseData.action == 'success') {\r\n                              scope.isLoading = false;\r\n                          } else {\r\n                              scope.isError = true;\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          var level = (responseData.data.data[dataProperty] && responseData.data.data[dataProperty].length > 0) ? responseData.data.data[dataProperty][0].Level : null;\r\n                          maxLevel = (level && maxLevel < level) ? level : maxLevel;\r\n                          callback(parent, responseData, true, bucket, pageIndex);\r\n                      }, reqPayLoad, false, scope.treeType);\r\n                  };\r\n\r\n\r\n                  function getRequestedDataFromCache(parent, bucket, pageIndex) {\r\n                      var childSearchLevel = (parent) ? parent[scope.levelProperty] + 1 : 1;\r\n                      var parentCodeStringIterator;\r\n                      var result = (parent) ? _.groupBy(levelWiseData[levelKey + childSearchLevel], scope.parentProperty)[parent[scope.codeProperty]] : levelWiseData[levelKey + childSearchLevel];\r\n                      if (scope.treeConfig.isReadOnly) {\r\n                          result = result ? result : [];\r\n                          return {\r\n                              \"data\": result,\r\n                              \"searchLevel\": childSearchLevel\r\n                          };\r\n                      }\r\n                      var startIndex = (pageIndex - 1) * bucket;\r\n                      var bucketData = (bucket && result) ? result.slice(startIndex, startIndex + bucket) : (result) ? result : [];\r\n                      return {\r\n                          \"data\": bucketData,\r\n                          \"searchLevel\": childSearchLevel\r\n                      };\r\n                  };\r\n\r\n                  function getChildsForParentAsPerBucket(parent, bucket, pageIndex, callback) {\r\n                      if (parent != undefined) {\r\n                          if (parent.ChildCount != undefined && parent.ChildCount > 0) {\r\n                              bucket = parent.ChildCount;\r\n                          }\r\n                      }\r\n                      var cachedDataSet = getRequestedDataFromCache(parent, bucket, pageIndex);\r\n                      var bucketData = cachedDataSet.data;\r\n                      var searchLevel = cachedDataSet.searchLevel;\r\n\r\n                      if (bucketData.length > 0) {\r\n                          callback(parent, bucketData, false, bucket, pageIndex);\r\n                      } else {\r\n                          getNodesFromServer(parent, searchLevel, bucket, pageIndex, callback);\r\n                      }\r\n                  };\r\n\r\n                  function lazyLoadLevelWiseData(markerNode) {\r\n                      var parentSearchLevel = markerNode[scope.levelProperty] - 1;\r\n                      var markerNodeParent = markerNode[scope.parentProperty];\r\n                      var parent = _.find(levelWiseData[levelKey + parentSearchLevel], function (node) {\r\n                          return node[scope.codeProperty] == markerNodeParent;\r\n                      });\r\n\r\n                      if (parent && parent.children && parent.children.length % lazyLoadingBucket != 0) {\r\n                          return;\r\n                      };\r\n\r\n                      getChildsForParentAsPerBucket(parent, lazyLoadingBucket, (parent) ? (parent.children.length / lazyLoadingBucket) + 1 : (scope.categories.length / lazyLoadingBucket) + 1, createTreeStructure);\r\n                  };\r\n\r\n                  var searchString = \"\";\r\n                  var searchLevel;\r\n                  var searchDataYetToBeDisplayed = [];\r\n                  var searchWithContainsHitResult = [];\r\n                  scope.searchResults = [];\r\n\r\n                  function searchAsPerBucketSize(searchStr, bucket, isMaintainSearchPointer) {\r\n                      if (!isMaintainSearchPointer) {\r\n                          if (searchString != searchStr) {\r\n                              searchString = searchStr;\r\n                              searchLevel = maxLevel;\r\n                              searchDataYetToBeDisplayed.length = 0;\r\n                              searchWithContainsHitResult.length = 0;\r\n                              scope.searchResults.length = 0;\r\n                          };\r\n                      }\r\n                      var searchData = getDataAsPerBucketSize(searchStr, bucket);\r\n                      if (!isMaintainSearchPointer && searchData.length == 0 && scope.searchResults.length === 0) {\r\n                          scope.noRecordsFound = true;\r\n                      } else {\r\n                          scope.noRecordsFound = false;\r\n                      }\r\n\r\n                      var cancelTout = $timeout(function () {\r\n                          scope.searchResults = scope.searchResults.concat(searchData);\r\n                          if (scope.searchResults.length > 0) {\r\n                              scope.noRecordsFound = false;\r\n                          } else {\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          $timeout.cancel(cancelTout);\r\n                          cancelTout = null;\r\n                      });\r\n                  };\r\n\r\n                  function getOffsetSearchData(bucket) {\r\n                      var partitionedData = _.partition(searchDataYetToBeDisplayed, function (data, index) {\r\n                          return index > (bucket - 1);\r\n                      });\r\n                      searchDataYetToBeDisplayed = partitionedData[0];\r\n                      return partitionedData[1];\r\n                  };\r\n\r\n                  function getOffsetSearchDataForContainsSearch(bucket) {\r\n                      var partitionedData = _.partition(searchWithContainsHitResult, function (data, index) {\r\n                          return index > (bucket - 1);\r\n                      });\r\n                      searchWithContainsHitResult = partitionedData[0];\r\n                      return partitionedData[1];\r\n                  };\r\n\r\n                  function getDataAsPerBucketSize(searchStr, bucket) {\r\n                      var bucketData = [];\r\n                      while (bucketData.length < bucket && searchLevel > 0) {\r\n                          var offsetSearchData = getOffsetSearchData(bucket);\r\n                          if (offsetSearchData.length == bucket) {\r\n                              bucketData = offsetSearchData;\r\n                              break;\r\n                          }\r\n                          var searchData = _.filter(levelWiseData[levelKey + searchLevel], function (node) {\r\n                              return -1 != node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n                          });\r\n\r\n                          var containsSarchResult = _.filter(levelWiseData[levelKey + searchLevel], function (node) {\r\n                              return new RegExp(\"(\" + _.compact(searchString.split(' ')).join('|') + \")\", \"gi\").test(node[scope.titleProperty]) && -1 == node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n                          });\r\n                          searchWithContainsHitResult = searchWithContainsHitResult.concat(containsSarchResult);\r\n                          var qumulativeData = offsetSearchData.concat(searchData);\r\n                          var partitionedData = _.partition(qumulativeData, function (data, index) {\r\n                              return index > (bucket - 1);\r\n                          });\r\n                          searchDataYetToBeDisplayed = searchDataYetToBeDisplayed.concat(partitionedData[0]);\r\n                          bucketData = bucketData.concat(partitionedData[1]);\r\n                          searchLevel = searchLevel - 1;\r\n                      }\r\n                      if (searchLevel == 0) {\r\n                          while (bucketData.length < bucket) {\r\n                              var containsSearchDataToBeAppended = getOffsetSearchDataForContainsSearch(bucket);\r\n                              if (containsSearchDataToBeAppended.length > 0) {\r\n                                  bucketData = bucketData.concat(containsSearchDataToBeAppended);\r\n                              } else {\r\n                                  break;\r\n                              }\r\n                          }\r\n                      }\r\n                      return bucketData;\r\n                  };\r\n\r\n                  function closeChildsForParent(parent) {\r\n                      getChildsForParentAsPerBucket(parent, null, null, function (parent, data) {\r\n                          var childs = _.filter(data, function (childNode) {\r\n                              return childNode.isExpanded;\r\n                          });\r\n                          _.each(childs, function (child) {\r\n                              child.isExpanded = false;\r\n                              child.children = [];\r\n                              closeChildsForParent(child);\r\n                          });\r\n                      });\r\n\r\n                  };\r\n\r\n                  scope.searchText = '';\r\n                  scope.searchFieldVal = '';\r\n\r\n                  scope.expandNode = function (node, index) {\r\n                      node.isExpanded = !node.isExpanded;\r\n                      if (node.isExpanded) {\r\n                          getChildsForParentAsPerBucket(node, lazyLoadingBucket, 1, createTreeStructure);\r\n                      } else {\r\n                          node.children = [];\r\n                          removeMarkerForParent(node);\r\n                      }\r\n                  };\r\n\r\n                  var createTreeStructure = function (node, data, isService, bucket, pageIndex) {\r\n                      if (isService) {\r\n                          if (node) {\r\n                              node.childLoading = false;\r\n                              node.lazyLoading = false;\r\n                          }\r\n                          if (data.action == 'success') {\r\n                              setLevelWiseData(data.data.data, node);\r\n                              if (node && data.data.data[dataProperty][0]) {\r\n                                  if (!node.children) {\r\n                                      node.children = getRequestedDataFromCache(node, bucket, pageIndex).data;\r\n                                  } else {\r\n                                      node.children = node.children.concat(getRequestedDataFromCache(node, bucket, pageIndex).data);\r\n                                  }\r\n                                  if (node.children.length % lazyLoadingBucket == 0) {\r\n                                      lazyLoadMarker.push(node.children[node.children.length - 1]);\r\n                                  }\r\n                              } else {\r\n                                  scope.categories[scope.categories.length - 1].lazyLoading = false;\r\n                                  scope.categories = scope.categories.concat(data.data.data[dataProperty][0][levelWiseDataProperty]);\r\n                                  if (scope.categories.length % lazyLoadingBucket == 0) {\r\n                                      lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                                  }\r\n                              }\r\n                          } else {\r\n                              console.log('service failure');\r\n                          }\r\n                      } else {\r\n                          var toutCancel = $timeout(function () {\r\n                              if (node) {\r\n                                  if (node && node.children && node.children.length > 0)\r\n                                      node.children[node.children.length - 1].lazyLoading = false;\r\n                                  //node.children = (node.children) ? node.children.concat(data) : data;\r\n                                  node.children = (node.children) ? ((scope.treeConfig.getAllLazyLoadedData) ? data : node.children.concat(data)) : data;\r\n\r\n                                  if ((!scope.treeConfig.isReadOnly) && (node.children.length % lazyLoadingBucket == 0)) {\r\n                                      lazyLoadMarker.push(node.children[node.children.length - 1]);\r\n                                  }\r\n                              } else {\r\n                                  scope.categories[scope.categories.length - 1].lazyLoading = false;\r\n                                  scope.categories = scope.categories.concat(data);\r\n                                  if ((!scope.treeConfig.isReadOnly) && (scope.categories.length % lazyLoadingBucket == 0)) {\r\n                                      lazyLoadMarker.push(scope.categories[scope.categories.length - 1]);\r\n                                  }\r\n                              }\r\n                              $timeout.cancel(toutCancel);\r\n                              toutCancel = null;\r\n                          });\r\n                      }\r\n                  };\r\n\r\n                  function removeMarkerForParent(parent) {\r\n                      var childMarkers = _.filter(lazyLoadMarker, function (node, index) {\r\n                          return -1 != node[parentCodeStringConstant].indexOf(parent[scope.codeProperty]);\r\n                      });\r\n                      lazyLoadMarker = _.difference(lazyLoadMarker, childMarkers);\r\n                      closeChildsForParent(parent);\r\n                  };\r\n\r\n                  var filterTextTimeout;\r\n                  scope.searchAndSelectNode = function (e) {\r\n                      \r\n                      //scope.$apply();\r\n                      //if (filterTextTimeout) {\r\n                          //$timeout.cancel(filterTextTimeout);\r\n                          //filterTextTimeout = null;\r\n                      //}\r\n                      //if (scope.searchFieldVal.length <= 2) {\r\n                         // scope.noRecordsFound = false;\r\n                          //serverSearchVal = \"\";\r\n                         // scope.searchResults.length = 0;\r\n                          //searchDataYetToBeDisplayed.length = 0;\r\n                          //searchWithContainsHitResult.length = 0;\r\n                      //} else {\r\n                          //scope.noRecordsFound = false;\r\n                      var filterTextTimeout = $timeout(function () {\r\n                          scope.noRecordsFound = false;\r\n                              if (scope.searchFieldVal.length <= 2) {\r\n                                  // scope.noRecordsFound = false;\r\n                                  serverSearchVal = \"\";\r\n                                  // scope.searchResults.length = 0;\r\n                                  searchDataYetToBeDisplayed.length = 0;\r\n                                  searchWithContainsHitResult.length = 0;\r\n                              } else if (scope.searchFieldVal.length >= 3) {\r\n                                  if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket, false);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal);\r\n                              }\r\n                              }\r\n                              $timeout.cancel(filterTextTimeout);\r\n                              filterTextTimeout = null;\r\n                              scope.cancelTitle = e.target.value == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                          }, 500);\r\n                      //}\r\n                  };\r\n\r\n\r\n                  scope.selectAll = function () {\r\n                      scope.isPartiallySelected = false;\r\n                      if (selectAllBool) {\r\n                          for (var key in levelWiseData) {\r\n                              _.each(levelWiseData[key], function (data, n) {\r\n                                  //if (data.disabled == false) {\r\n                                      data.selection = \"0\";\r\n                                  //}\r\n                                  scope.selectedData = (key == (levelKey + '1')) ? [] : [];\r\n                              });\r\n                          }\r\n                          scope.getUserSelectionArray = [];\r\n                          scope.totalSelection = 0;\r\n                          totalID = [];\r\n                          totalName = [];\r\n                      } else {\r\n                          for (var key in levelWiseData) {\r\n                              _.each(levelWiseData[key], function (data, n) {\r\n                                  if (data.disabled != true) {\r\n                                      data.selection = \"1\";\r\n                                  }\r\n                                  scope.selectedData = (key == (levelKey + '1')) ? levelWiseData[levelKey + '1'] : scope.selectedData;\r\n                                  var index = totalID.indexOf(data[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                  } else {\r\n                                      totalID.push(data[scope.codeProperty]);\r\n                                      totalName.push(data[scope.titleProperty]);\r\n                                      scope.totalSelection++;\r\n                                  }\r\n                              });\r\n                          }\r\n                      }\r\n                  }\r\n\r\n                  scope.clearAllSelection = function () {\r\n                      for (var key in levelWiseData) {\r\n                          _.each(levelWiseData[key], function (data, n) {\r\n                              data.selection = \"0\";\r\n                              //scope.selectedData = (key == (levelKey + '1'))  ? [] : [];\r\n                              //scope.getUserSelectionArray = [];\r\n                          });\r\n                      }\r\n                      scope.selectedData = [];\r\n                      scope.getUserSelectionArray = [];\r\n                      scope.totalSelection = 0;\r\n                      totalID = [];\r\n                      totalName = [];\r\n                      scope.isPartiallySelected = false;\r\n                  }\r\n\r\n\r\n                  scope.selectNode = function (node, selectionState, byPassIsLazyLoadCheck, recursive, siblingNods) {\r\n                      if (isLazyLoadServerData && scope.searchFieldVal.length > 0 && !byPassIsLazyLoadCheck) {\r\n                          completeModelFromServerIfNeeded(node);\r\n                          if (scope.config.useAs == 'inline') {\r\n                              getSelections();\r\n                          }\r\n                          return;\r\n                      }\r\n\r\n                      //updateSelectionObject(node, selectionState);\r\n                      if (scope.isSingleSelect) {\r\n                          if (scope.selectedData.length > 0 && scope.selectedData[0][scope.codeProperty] == node[scope.codeProperty]) {\r\n                              if (scope.config.useAs == 'inline') {\r\n                                  getSelections();\r\n                              }\r\n                              return;\r\n                          }\r\n                          if (scope.selectedData.length > 0 && scope.selectedData[0][scope.codeProperty] != node[scope.codeProperty]) {\r\n                              scope.clearAllSelection();\r\n                          };\r\n                          node.selection = selectionState;\r\n                          scope.selectedData = [node];\r\n                          scope.totalSelection = scope.selectedData.length;\r\n                      } else {\r\n                          node.selection = selectionState;\r\n                          updateSelectionObject(node, selectionState);\r\n                          updateChildsForNode(node, selectionState);\r\n                      }\r\n                      //updateChildsForNode(node, selectionState);\r\n                      updateParentForNode(node, selectionState, recursive);\r\n                      updateUserSelection(node, selectionState);\r\n                      if (scope.treeType == treeTypeObject) {\r\n                      } else {\r\n                          //working perfect in project team\r\n                          scope.totalSelection = scope.selectedData.length;\r\n                      }\r\n\r\n                      if (scope.config.useAs == 'inline') {\r\n                          getSelections();\r\n                      }\r\n\r\n                      if (scope.totalSelection == 0) {\r\n                          scope.isPartiallySelected = false;\r\n                      } else {\r\n                          scope.isPartiallySelected = !scope.getSelectAllBool();\r\n                      }\r\n                  };\r\n                  function getInsSelectedNode(siblingNods) {\r\n                      var r,\r\n                          len = siblingNods.length;\r\n                      for (var x = 0; x < len; x++) {\r\n                          var selection = siblingNods[x].selection;\r\n                          if (selection == \"1\" || selection == \"2\") {\r\n                              r = siblingNods[x];\r\n                              break;\r\n                          }\r\n                      }\r\n                      return r;\r\n                  };\r\n                  function updateSelectionObject(node, selectionState) {\r\n                      switch (selectionState) {\r\n                          case '0':\r\n                              //scope.selectedData = _.without(scope.selectedData, node);\r\n                              scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                  return data[scope.codeProperty] != node[scope.codeProperty];\r\n                              });\r\n                              scope.totalSelection = scope.totalSelection - 1;\r\n                              var index = totalID.indexOf(node[scope.codeProperty]);\r\n                              if (index > -1) {\r\n                                  totalID.splice(index, 1);\r\n                                  totalName.splice(index, 1);\r\n                              }\r\n                              break;\r\n                          case '1':\r\n                              scope.selectedData.push(node);\r\n                              scope.totalSelection = scope.totalSelection + 1;\r\n                              totalID.push(node[scope.codeProperty]);\r\n                              totalName.push(node[scope.titleProperty]);\r\n                              break;\r\n                      }\r\n                  };\r\n                  function updateUserSelection(node, selectionState) {\r\n                      switch (selectionState) {\r\n                          case '0':\r\n                              scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });//_.without(scope.getUserSelectionArray, node);\r\n                              break;\r\n                          case '1':\r\n                              scope.getUserSelectionArray.push(node);\r\n                              break;\r\n                      }\r\n                  }\r\n\r\n                  /*function updateParentForNode(node, selectionState) {\r\n                   var depthLevel = node[scope.levelProperty] - 1;\r\n                   var immediateParentCode = node[scope.parentProperty].toString();\r\n                   while (depthLevel > 0) {\r\n                    var parent = _.find(levelWiseData[levelKey + depthLevel], function(node) {\r\n                     return node[scope.codeProperty] == immediateParentCode;\r\n                   });\r\n                    if (!parent && depthLevel == 1) {\r\n                     baseLevelExpectNode[node[parentCodeStringConstant].split('>')[0]] = true;\r\n                     parent = {};\r\n                     parent[scope.codeProperty] = node[parentCodeStringConstant].split('>')[0];\r\n                     parent[scope.levelProperty] = 1;\r\n                     parent[scope.parentProperty] = parent[scope.codeProperty];\r\n                   }\r\n                   if (parent) {\r\n                     immediateParentCode = parent[scope.parentProperty].toString();\r\n                     if (!parent['isExpanded']) {\r\n                      scope.expandNode(parent);\r\n                    }\r\n                    if (!scope.isSingleSelect) {\r\n                      parent.selection = getStateForNode(parent);\r\n                    }\r\n                  }\r\n                  depthLevel = depthLevel - 1;\r\n                }\r\n              };*/\r\n\r\n                  function updateParentForNode(node, selectionState, recursive) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] - 1;\r\n                      var immediateParentCode = node[scope.parentProperty].toString();\r\n\r\n                      while (depthLevel > 0) {\r\n                          var parent = _.find(levelWiseData[levelKey + depthLevel], function (node) {\r\n                              return node[scope.codeProperty] == immediateParentCode;\r\n                          });\r\n                          if (!parent && depthLevel == 1) {\r\n                              baseLevelExpectNode[node[parentCodeStringConstant].split('>')[0]] = true;\r\n                              parent = {};\r\n                              parent[scope.codeProperty] = node[parentCodeStringConstant].split('>')[0];\r\n                              parent[scope.levelProperty] = 1;\r\n                              parent[scope.parentProperty] = parent[scope.codeProperty];\r\n                          }\r\n                          //if (parent && !parent.disabled) {\r\n                          if (parent && !parent.disabled) {\r\n                              immediateParentCode = parent[scope.parentProperty].toString();\r\n                              if (!parent['isExpanded']) {\r\n                                  scope.expandNode(parent);\r\n                              }\r\n                              //if (!scope.isSingleSelect) {\r\n                              parent.selection = getStateForNode(parent, parent.selection);\r\n                              //}\r\n                          } else {\r\n                              immediateParentCode = parent[scope.parentProperty].toString();\r\n                              if (!parent['isExpanded']) {\r\n                                  scope.expandNode(parent);\r\n                              }\r\n                              //if (!scope.isSingleSelect) {\r\n                              var tempSelection = getStateForNode(parent, parent.selection);\r\n                              parent.selection = \"2\";\r\n                              //}\r\n                          }\r\n                          depthLevel = depthLevel - 1;\r\n\r\n                          immediateParentCode = parent[scope.parentProperty].toString();\r\n                      }\r\n                  };\r\n\r\n                  function getStateForNode(node, parentSelection) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] + 1;\r\n                      var parentCode = node[scope.codeProperty];\r\n                      var groupByData = _.groupBy(levelWiseData[levelKey + depthLevel], scope.parentProperty);\r\n                      var childCount = groupByData[parentCode].length;\r\n                      var selectedChild = _.filter(groupByData[parentCode], function (node) {\r\n                          return node.selection == '1';\r\n                      });\r\n                      var partiallySelectedChild = _.filter(groupByData[parentCode], function (node) {\r\n                          return node.selection == '2';\r\n                      });\r\n\r\n\r\n                      /*\r\n                        if (childCount == selectedChild.length) {\r\n                          //scope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n                          //JJ Add Later\r\n                          scope.selectedData = _.filter(scope.selectedData,function(data,n)\r\n                          {\r\n                            return data[scope.parentProperty] !=parentCode;\r\n                          });\r\n                      \r\n                          scope.selectedData.push(node);\r\n                          return \"1\";\r\n                        } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n                         scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                      \r\n                         scope.selectedData = _.uniq(scope.selectedData,function(item,jey,a) {\r\n                          return item[scope.codeProperty]; \r\n                        });\r\n                         //scope.selectedData = _.without(scope.selectedData, node);\r\n                         scope.selectedData = _.filter(scope.selectedData,function(data,n)\r\n                         {\r\n                          return data[scope.codeProperty] != node[scope.codeProperty];\r\n                        });\r\n                      \r\n                         return \"2\";\r\n                       } else {\r\n                         scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                         scope.selectedData = _.filter(scope.selectedData, function(data)\r\n                         {\r\n                          return data[scope.codeProperty] != node[scope.codeProperty];\r\n                        });\r\n                         //scope.selectedData = _.without(scope.selectedData, node);\r\n                         return \"0\";\r\n                       }\r\n                       */\r\n\r\n                      if (scope.isSingleSelect) {\r\n                          return \"0\";\r\n                      } else {\r\n                          if (scope.treeType == treeTypeObject) {\r\n                              if (childCount == selectedChild.length) {\r\n\r\n                                  ///scope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.parentProperty] != parentCode;\r\n                                  });\r\n\r\n                                  scope.selectedData.push(node);\r\n                                  //Manage Total Selection and TotalName nd ID  \r\n                                  scope.totalSelection = scope.totalSelection + 1;\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                  } else {\r\n                                      totalID.push(node[scope.codeProperty]);\r\n                                      totalName.push(node[scope.titleProperty]);\r\n                                  }//Ends\r\n\r\n                                  return \"1\";\r\n\r\n                              } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.uniq(scope.selectedData, function (item, key, a) {\r\n                                      return item[scope.codeProperty];\r\n                                  });\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != node[scope.codeProperty]\r\n                                  }); //_.without(scope.selectedData, node);\r\n\r\n\r\n\r\n                                  //Manage Total Selection and TotalName nd ID\r\n                                  if (parentSelection != \"0\" && parentSelection != \"2\") {\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                  }\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                      totalID.splice(index, 1);\r\n                                      totalName.splice(index, 1);\r\n                                  }\r\n                                  //Ends\r\n\r\n\r\n                                  return \"2\";\r\n                              } else {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != node[scope.codeProperty]\r\n                                  });\r\n\r\n                                  //_.without(scope.selectedData, node);\r\n\r\n                                  //Manage Total Selection and TotalName nd ID\r\n                                  var index = totalID.indexOf(node[scope.codeProperty]);\r\n                                  if (index > -1) {\r\n                                      totalID.splice(index, 1);\r\n                                      totalName.splice(index, 1);\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                  }//Ends\r\n                                  return \"0\";\r\n                              }\r\n                          } else {\r\n\r\n                              //Non Generic Tree management\r\n                              //it will not having parent selection full means 1 even if all childs are selected.\r\n                              if (childCount == selectedChild.length) {\r\n                                  //scope.selectedData = selectedChild;\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                                  return \"2\";\r\n\r\n                              } else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\r\n                                  scope.selectedData = _.uniq(scope.selectedData, function (item, key, a) {\r\n                                      return item[scope.codeProperty];\r\n                                  });\r\n\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });\r\n                                  //_.without(scope.selectedData, node);\r\n                                  return \"2\";\r\n                              } else {\r\n                                  scope.selectedData = _.union(scope.selectedData, selectedChild);\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) { return data[scope.codeProperty] != node[scope.codeProperty] });//_.without(scope.selectedData, node);\r\n                                  return \"0\";\r\n                              }\r\n                          }\r\n                      }\r\n\r\n\r\n                  };\r\n\r\n\r\n\r\n                  /*\r\n                  function updateChildsForNode(node, selectionState) {\r\n                    var depthLevel = node[scope.levelProperty] + 1;\r\n                    var parentCode = node[scope.codeProperty].toString();\r\n                    while (depthLevel <= maxLevel) {\r\n                     var childs = _.filter(levelWiseData[levelKey + depthLevel], function(node) {\r\n                      return -1 != node[parentCodeStringConstant].indexOf(parentCode);\r\n                    });\r\n                     _.each(childs, function(child) {\r\n                      child.selection = selectionState;\r\n                      if (selectionState == \"1\") {\r\n                       //scope.selectedData = _.without(scope.selectedData, child);\r\n                       scope.selectedData =_.filter(scope.selectedData,function(data)\r\n                       {\r\n                        return data[scope.codeProperty] != child[scope.codeProperty];\r\n                      });\r\n                     };\r\n                   });\r\n                     depthLevel = depthLevel + 1;\r\n                   }\r\n                   if (isLazyLoadServerData) {\r\n                     updateChildsForSelectedData(node);\r\n                   }\r\n                  }*/\r\n\r\n                  function updateChildsForNode(node, selectionState) {\r\n\r\n                      var depthLevel = node[scope.levelProperty] + 1;\r\n                      var parentCode = node[scope.codeProperty].toString();\r\n                      var tempNode = node;\r\n                      while (depthLevel <= maxLevel) {\r\n                          var childs = _.filter(levelWiseData[levelKey + depthLevel], function (node) {\r\n                              //return -1 != node[parentCodeString].indexOf(parentCode)\r\n                              var parentCodesofNode = node[parentCodeStringConstant].split(\">\");\r\n                              return -1 != parentCodesofNode.indexOf(parentCode);\r\n                          });\r\n\r\n\r\n                          _.each(childs, function (child) {\r\n                              if (scope.treeType == treeTypeObject) {\r\n                                  var codeProp = child[scope.codeProperty];\r\n                                  if (selectionState == \"1\") {\r\n                                      //Work in laziloading false\r\n                                      scope.totalSelection = (child.selection == \"1\") ? scope.totalSelection : scope.totalSelection + 1;\r\n                                      scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                          return data[scope.codeProperty] != codeProp;\r\n                                      });\r\n                                      //closed//_.without(scope.selectedData, child);\r\n                                      var index = totalID.indexOf(codeProp);\r\n                                      if (index > -1) {\r\n                                      } else {\r\n                                          totalID.push(codeProp);\r\n                                          totalName.push(codeProp);\r\n                                      }\r\n                                  } else {\r\n                                      scope.totalSelection = scope.totalSelection - 1;\r\n                                      var index = totalID.indexOf(codeProp);\r\n                                      if (index > -1) {\r\n                                          totalID.splice(index, 1);\r\n                                          totalName.splice(index, 1);\r\n                                      }\r\n                                  }\r\n\r\n                                  if (!(selectionState == \"1\" && scope.isSingleSelect)) {\r\n                                      child.selection = selectionState;\r\n                                  }\r\n\r\n                                  scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray, function (data) {\r\n                                      return data[scope.codeProperty] != child[scope.codeProperty]\r\n                                  });//_.without(scope.selectedData, child);\r\n                                  //jayesh add\r\n                              } else {\r\n                                  child.selection = \"0\";\r\n                                  scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                                      return data[scope.codeProperty] != child[scope.codeProperty]\r\n                                  });//_.without(scope.selectedData, child);\r\n                              }\r\n                              /*scope.getUserSelectionArray = _.filter(scope.getUserSelectionArray,function(data){\r\n                              \r\n                                return data[scope.codeProperty] != child[scope.codeProperty]\r\n                              });//_.without(scope.selectedData, child);*/\r\n                          });\r\n\r\n                          depthLevel = depthLevel + 1;\r\n                      }\r\n                      //if (isLazyLoadServerData) {\r\n                      updateChildsForSelectedData(node);\r\n                      //}\r\n                  }\r\n\r\n\r\n\r\n                  function updateChildsForSelectedData(node) {\r\n                      var searchHits = [];\r\n                      _.each(scope.selectedData, function (data) {\r\n                          if (-1 != data[parentCodeStringConstant].indexOf(node[scope.codeProperty].toString())) {\r\n                              searchHits.push(data);\r\n                          }\r\n                      });\r\n                      _.each(searchHits, function (hits) {\r\n\r\n                          //scope.selectedData = _.without(scope.selectedData, hits);\r\n                          scope.selectedData = _.filter(scope.selectedData, function (data) {\r\n                              return data[scope.codeProperty] != hits[scope.codeProperty];\r\n                          });\r\n\r\n\r\n                      });\r\n                  }\r\n\r\n                  var uniqueIDGenerator = function () {\r\n                      var d = new Date().getTime();\r\n                      var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                          var r = (d + Math.random() * 16) % 16 | 0;\r\n                          d = Math.floor(d / 16);\r\n                          return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                      });\r\n                      return uniqueID;\r\n                  };\r\n                  var cancelToutOnScroll;\r\n                  scope.scroll = function () {\r\n                      if (cancelToutOnScroll) {\r\n                          $timeout.cancel(cancelToutOnScroll);\r\n                          cancelToutOnScroll = null;\r\n                      }\r\n                      cancelToutOnScroll = $timeout(function () {\r\n                          if (!lazyLoadOffset) {\r\n                              //lazyLoadOffset = angular.element(\"#treeComponentContainer-\" + scope.hierarchyCounter)[0].getBoundingClientRect().bottom;\r\n                              var link = (angular.element(\"#treeComponentContainer\"));\r\n                              var position = link.position();\r\n                              var right = $(window).width();\r\n                              lazyLoadOffset = $(window).height();\r\n                          };\r\n                          var lazyLoadLen = lazyLoadMarker.length;\r\n                          if (lazyLoadLen > 0 && scope.searchFieldVal.length == 0) {\r\n                              var markerNode = lazyLoadMarker[lazyLoadLen - 1],\r\n                                  markerNodeSelect = angular.element(\"#\" + markerNode[scope.codeProperty]);\r\n                              if ((markerNodeSelect.length > 0) && markerNodeSelect[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n                                  markerNode.lazyLoading = true;\r\n                                  lazyLoadMarker.length = (lazyLoadLen > 0) ? lazyLoadLen - 1 : 0;\r\n                                  lazyLoadLevelWiseData(markerNode);\r\n                              }\r\n                          }\r\n                      }, 20);                      \r\n                  };\r\n                  var scrollEndTout;\r\n                  scope.scrollEnd = function () {\r\n                      if (scrollEndTout) {\r\n                          $timeout.cancel(scrollEndTout);\r\n                          scrollEndTout = null;\r\n                      }\r\n                      scrollEndTout = $timeout(function () {\r\n                          if (scope.searchFieldVal.length > 2) {\r\n                              if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket, true);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal, true);\r\n                              }\r\n                           }                              \r\n                      }, 20);\r\n                      \r\n                  };\r\n\r\n                  /*lazyLoadOffset = angular.element(\"#treeComponentContainer\")[0].getBoundingClientRect().bottom;\r\n                  console.log(lazyLoadOffset);\r\n                  angular.element('.scrollbar-outer').scrollbar({\r\n                      onScroll : function(y, x) {\r\n                          //console.log('marker length -- '+lazyLoadMarker.length);\r\n                          if (lazyLoadMarker.length > 0 && scope.searchFieldVal.length == 0) {\r\n                              var markerNode = lazyLoadMarker[lazyLoadMarker.length - 1];\r\n                              if (angular.element(\"#\"+markerNode[scope.codeProperty])[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n                                  console.log(markerNode);\r\n                                  markerNode.lazyLoading = true;\r\n                                  lazyLoadMarker.length = (lazyLoadMarker.length > 0) ? lazyLoadMarker.length - 1 : 0;\r\n                                  lazyLoadLevelWiseData(markerNode);\r\n                                  console.log(lazyLoadMarker.length);\r\n                              }\r\n                          }\r\n                          if (y.maxScroll > 0 && y.scroll == y.maxScroll && scope.searchFieldVal.length > 0) {\r\n                              if (!isLazyLoadServerData) {\r\n                                  searchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n                              } else {\r\n                                  getSearchDataFromServer(searchBucket, createModelForSearchData, scope.searchFieldVal, true);\r\n                              }\r\n                          }\r\n                      }\r\n                  });*/\r\n\r\n                  var massageSelectedData = function (data) {\r\n                      _.each(data, function (e) {\r\n                          if (e['children'])\r\n                              delete e['children'];\r\n                      });\r\n                      return data;\r\n                  };\r\n\r\n\r\n                  var newtotalID = [];\r\n                  var newtotalName = [];\r\n\r\n\r\n                  var getSelections = function () {\r\n\r\n                      _.each(scope.selectedData, function (node) {\r\n                          if (node.disabled) {\r\n                              scope.selectedData = _.without(scope.selectedData, node);\r\n                          }\r\n                      });\r\n\r\n                      newtotalID = [];\r\n                      newtotalName = [];\r\n\r\n                      var tCancel = $timeout(function () {\r\n                          scope.treeConfig.selectType = scope.selectType.code;\r\n                          var outPutObject = {\r\n                              'selectType': scope.selectType.code,\r\n                              'selections': massageSelectedData(scope.selectedData)\r\n                          };\r\n\r\n                          _.each(outPutObject.selections, function (data) {\r\n                              newtotalID.push(data[scope.codeProperty]);\r\n                              newtotalName.push(data[scope.titleProperty]);\r\n                          });\r\n\r\n                          outPutObject[\"selectionIds\"] = newtotalID;\r\n                          outPutObject[\"selectionNames\"] = newtotalName;\r\n                          if (scope.treeType == treeTypeObject) {\r\n                              outPutObject[\"selectionAllIds\"] = totalID;\r\n                              outPutObject[\"selectionAllNames\"] = totalName;\r\n                          }\r\n\r\n                          var hierarchyCollection = [];\r\n                          _.each(scope.selectedData, function (node) {\r\n                              if (node[scope.levelProperty] > 1) {\r\n                                  var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                                  var parentTraversalArray = [];\r\n                                  _.each(parentHierarchy, function (parentNode, index) {\r\n                                      var found = _.clone(_.find(levelWiseData[levelKey + (index + 1)], function (data) {\r\n                                          return data[scope.codeProperty] == parentNode;\r\n                                      }));\r\n                                      if (found && found['children'])\r\n                                          delete found['children'];\r\n                                      parentTraversalArray.push(found);\r\n                                  });\r\n                                  hierarchyCollection.push(parentTraversalArray);\r\n                              } else {\r\n                                  hierarchyCollection.push([node]);\r\n                              }\r\n                          });\r\n\r\n                          /*if(scope.treeConfig.getHierarchyOnSelection)\r\n                          {\r\n                            outPutObject['selectionHierarchy'] =  massageSelectedData(hierarchyCollection);\r\n                          }\r\n                          if(scope.treeConfig.getAllLazyLoadedData)\r\n                          {\r\n                            outPutObject['allLazyLoadedData'] = levelWiseData;\r\n                          }*/\r\n\r\n\r\n                          if (scope.treeConfig.getHierarchyOnSelection && (scope.treeType == treeTypeObject)) {\r\n                              outPutObject['selectionHierarchy'] = massageSelectedData(hierarchyCollection);\r\n                          }\r\n                          if (scope.treeConfig.getUserSelection && (scope.treeType == treeTypeObject)) {\r\n                              outPutObject['userSelection'] = massageSelectedData(scope.getUserSelectionArray);\r\n                          }\r\n                          if (scope.treeConfig.getAllLazyLoadedData) {\r\n                              outPutObject['allLazyLoadedData'] = levelWiseData;\r\n                          }\r\n                          if (scope.isActive) {\r\n                              scope.searchFieldVal = '';\r\n                              scope.hideSearch();\r\n                          }\r\n\r\n                          doneCallback(outPutObject);\r\n                          $timeout.cancel(tCancel);\r\n                          tCancel = null;\r\n                      });\r\n                  };\r\n\r\n                  /** seacrh for server **/\r\n\r\n                  var searchResultPageNumber = 0;\r\n                  var serverSearchVal = \"\";\r\n                  var isLazyLoadingNode;\r\n                  var ongoingService;\r\n                  function getSearchDataFromServer(searchBucket, callback, searchVal, isLazyLoad) {\r\n                      if (searchVal != serverSearchVal) {\r\n                          serverSearchVal = searchVal;\r\n                          searchResultPageNumber = 0;\r\n                          scope.searchResults.length = 0;\r\n                      }\r\n\r\n                      scope.isLoading = true;\r\n                      if (scope.isError) scope.isError = false;\r\n\r\n                      if (scope.searchResults.length > 0) {\r\n                          isLazyLoadingNode = scope.searchResults[scope.searchResults.length - 1];\r\n                          isLazyLoadingNode.lazyLoading = true;\r\n                      }\r\n\r\n                      if (ongoingService && !isLazyLoad) {\r\n                          RESTApi.abort(ongoingService);\r\n                      }\r\n\r\n                      ongoingService = {\r\n                          \"PageNumber\": searchResultPageNumber = searchResultPageNumber + 1,\r\n                          \"PageSize\": searchBucket,\r\n                          \"SearchText\": scope.searchFieldVal\r\n                      };\r\n\r\n                      //RESTApi.getData(scope.treeConfig.navigationContext, function(responseData) {\r\n                      //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function(responseData) {\r\n                      RESTApi.getData(navContext,\r\n                          function (responseData) {\r\n                          ongoingService = null;\r\n                          if (responseData.action == 'success') {\r\n                              scope.isLoading = false;\r\n                          } else {\r\n                              scope.isError = true;\r\n                              scope.noRecordsFound = true;\r\n                          }\r\n                          callback(responseData);\r\n                      }, ongoingService, false, scope.treeType);\r\n                  }\r\n\r\n                  function createModelForSearchData(data) {\r\n                      if (isLazyLoadingNode)\r\n                          isLazyLoadingNode.lazyLoading = false;\r\n                      scope.searchResults = scope.searchResults.concat(getLeafNodeWithParentHierarchy(data.data.data[searchProperty]));\r\n                  };\r\n\r\n                  function getLeafNodeWithParentHierarchy(data) {\r\n                      var searchList = data;\r\n                      var searchDataCollection = [];\r\n                      var selectedData = _.groupBy(scope.selectedData, scope.codeProperty);\r\n                      _.each(searchList, function (searchData) {\r\n                          var searchDataHierarchy = searchData[levelWiseDataProperty];\r\n                          var sortedLevelSearchedData = _.sortBy(searchDataHierarchy, 'Level');\r\n                          var searchHitNode = sortedLevelSearchedData[sortedLevelSearchedData.length - 1];\r\n                          var parentString = \"\";\r\n                          var parentCodeString = \"\";\r\n\r\n                          _.each(sortedLevelSearchedData, function (data) {\r\n                              parentString = (parentString.length > 0) ? parentString + ' > ' + data[scope.titleProperty] : data[scope.titleProperty];\r\n                              parentCodeString = (parentCodeString.length > 0) ? parentCodeString + '>' + data[scope.codeProperty].toString() : data[scope.codeProperty].toString();\r\n                              data[parentStringConstant] = parentString;\r\n                              data[parentCodeStringConstant] = parentCodeString;\r\n                              data.selection = getSelectionFromLevelWiseData(data);\r\n                          });\r\n\r\n                          //searchHitNode.serverData = _.groupBy(sortedLevelSearchedData, scope.codeProperty);\r\n                          searchDataCollection.push(searchHitNode);\r\n                      });\r\n                      return searchDataCollection;\r\n                  };\r\n\r\n                  function resetSelectionForSearchNodes(node) {\r\n                      _.each(scope.searchResults, function (searchNode) {\r\n                          if (node[scope.codeProperty] != searchNode[scope.codeProperty] && searchNode[parentCodeStringConstant].indexOf((node[parentCodeStringConstant].length > 0) ? node[parentCodeStringConstant] : node[scope.codeProperty].toString()) != -1) {\r\n                              searchNode.selection = node.selection;\r\n                          } else {\r\n                              searchNode.selection = getSelectionFromLevelWiseData(searchNode);\r\n                          }\r\n                      });\r\n                  };\r\n\r\n                  function getSelectionFromLevelWiseData(node) {\r\n                      var searchLevel = node[scope.levelProperty];\r\n                      var groupedLevelData = _.groupBy(levelWiseData[levelKey + searchLevel], scope.codeProperty);\r\n                      var selectionState = (groupedLevelData[node[scope.codeProperty]]) ? groupedLevelData[node[scope.codeProperty]][0].selection : isPresentInInternalHierarchy(node) ? '1' : (node.IsSelected == false || node.IsSelected == null || node.IsSelected) ? getSelectionState(node.IsSelected) : '0';\r\n                      return selectionState;\r\n                  };\r\n\r\n                  function isPresentInInternalHierarchy(searchNode) {\r\n                      var retVal = false,\r\n                          len = scope.selectedData.length;\r\n                      for (var i = 0; i < len; i++) {\r\n                          var node = scope.selectedData[i];\r\n                          if (searchNode[parentCodeStringConstant].indexOf((node[parentCodeStringConstant].length > 0) ? node[parentCodeStringConstant] : node[scope.codeProperty].toString()) != -1) {\r\n                              retVal = true;\r\n                              break;\r\n                          }\r\n                      }\r\n                      return retVal;\r\n                  };\r\n\r\n                  /*function completeModelFromServerIfNeeded(node) {\r\n                      var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                      var dataRetrivalCount = parentHierarchy.length;\r\n                      parentHierarchy.length = dataRetrivalCount - 1;\r\n                      var recievedData = [];\r\n                      if (parentHierarchy.length > 0) {\r\n                          _.each(parentHierarchy, function(PASCode, index) {\r\n                              getChildsForParentAsPerBucket(node.serverData[PASCode][0], lazyLoadingBucket, 1, function(_node, data, isService, bucket, pageIndex) {\r\n                                  if (isService) {\r\n                                      if (data.action == 'success')\r\n                                          setLevelWiseData(data.data.data, _node);\r\n                                  };\r\n                                  dataRetrivalCount = dataRetrivalCount - 1;\r\n                                  if (dataRetrivalCount == 1) {\r\n                                      updateSelectionInDataSource(node);\r\n                                  }\r\n                              });\r\n                          });\r\n                      } else {\r\n                          updateSelectionInDataSource(node);\r\n                      }\r\n                  }*/\r\n\r\n                  function completeModelFromServerIfNeeded(node) {\r\n\r\n                      var parentHierarchy = node[parentCodeStringConstant].split('>');\r\n                      var levelNumber = node['Level'];\r\n                      var recievedData = [];\r\n\r\n                      if (!(levelWiseData[levelKey + node[scope.levelProperty]] && _.find(levelWiseData[levelKey + node[scope.levelProperty]], function (data) {\r\n                          return node[scope.codeProperty] == data[scope.codeProperty];\r\n                      }))) {\r\n                          var reqObj = {};\r\n                          reqObj[nodeExpandingCodeProperty] = [parseInt(parentHierarchy[parentHierarchy.length - 1])];\r\n\r\n                          //RESTApi.getData(scope.treeConfig.requestParameter.navigationContext, function(responseData) {\r\n                          RESTApi.getData(navContext,\r\n                              function (responseData) {\r\n                              if (responseData.action == 'success') {\r\n                                  var allResultData = responseData.data.data.PAS_SearchList[0][levelWiseDataProperty];\r\n                                  var result = _.groupBy(allResultData, \"Level\");\r\n                                  var level = 1;\r\n                                  var levelData = [];\r\n                                  while (level) {\r\n                                      var obj = {};\r\n                                      obj[levelWiseDataProperty] = result[level];\r\n                                      obj['Level'] = level;\r\n                                      levelData.push(obj);\r\n                                      level = level + 1;\r\n                                      if (!result[level])\r\n                                          break;\r\n                                  };\r\n                                  createLevelWiseDataSet(levelData);\r\n                                  updateSelectionInDataSource(node);\r\n                              } else {\r\n                                  console.log('error');\r\n                              }\r\n                          }, reqObj, true, scope.treeType);\r\n                      } else {\r\n                          updateSelectionInDataSource(node);\r\n                      }\r\n                  }\r\n\r\n                  function updateSelectionInDataSource(node) {\r\n                      scope.selectNode(_.find(levelWiseData[levelKey + node.Level], function (data) {\r\n                          return data[scope.codeProperty] == node[scope.codeProperty];\r\n                      }), (node.selection == \"1\") ? \"0\" : \"1\", true);\r\n                      resetSelectionForSearchNodes(node);\r\n                  };\r\n\r\n                  scope.focusSearch = false;\r\n                  scope.isActive = false;\r\n                  scope.showMe = false;\r\n                  scope.showSearch = function () {\r\n                      scope.isActive = true;\r\n                      scope.showMe = true;\r\n                      scope.hideClose = true;\r\n                      $timeout(function () {\r\n                          scope.focusSearch = true;\r\n                      }, 100); \r\n                  }\r\n\r\n                  scope.hideSearch = function () {\r\n                    if(scope.searchFieldVal != \"\")\r\n                    {\r\n                        scope.searchFieldVal = \"\";    \r\n                        scope.noRecordsFound = false;\r\n                    }\r\n                    else\r\n                    {\r\n                            scope.searchFieldVal = \"\";\r\n                            scope.isActive = false;\r\n                            scope.focusSearch = false;\r\n                            scope.hideClose = false;\r\n                            scope.noRecordsFound = false;\r\n                            $(\"#SearchBtn\").focus();\r\n                    }\r\n                    scope.cancelTitle = scope.searchFieldVal == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                  }\r\n                  scope.editCallback = function () {\r\n\r\n                      scope.treeConfig.isReadOnly = false;\r\n                      scope.categories = [];\r\n                      lazyLoadMarker = [];\r\n                      scope.isLoading = true;\r\n                      scope.isError = false;\r\n                      totalID = [];\r\n                      totalName = [];\r\n\r\n                      initializePromise(true, true);\r\n                      renderLevels();\r\n                  }\r\n\r\n                  if (scope.config.useAs == \"inline\" && scope.config.export) {\r\n                      var exportLen = scope.config.export.length;\r\n                      for (var ex = 0; ex < exportLen; ex++) {\r\n                          setExport(scope.config.export[ex]);\r\n                      };\r\n                  }\r\n\r\n                  function setExport(key) { // setExport allow to access the isolated scope's functionality outside of directive\r\n                      if (scope.config.useAs != \"inline\") return; // if not useAs inline;\r\n                      !scope.config._export && (scope.config._export = {});\r\n                      if (key !== undefined) {\r\n                          scope.config._export[key] = typeof scope[key] == \"function\" ? function () {\r\n                              scope[key]()\r\n                          } : function () { return scope[key]; };\r\n                      }\r\n                  };\r\n\r\n                  scope.$on('$destroy', function () {\r\n                      deregisterConfigSelection();\r\n                      deregReqParam();\r\n                      deregReqContactCode();\r\n                      deregConfigData();\r\n                      deregSelectedNodes();\r\n                  });\r\n              },\r\n              templateUrl: 'shared/directives/smartHierarchy/smartHierarchyTemplate.html'\r\n          };\r\n      }])\r\n    .directive('myTemplate', function () {\r\n            return {\r\n                restrict: 'EA',\r\n                templateUrl: function (elem, attr) {\r\n                    return attr.type;\r\n                }\r\n            };\r\n        })\r\n.directive('ngIndeterminate', [\"$compile\", function ($compile) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attributes) {\r\n            scope.$watch(attributes['ngIndeterminate'], function (value) {\r\n                element.prop('indeterminate', value);\r\n            });\r\n        }\r\n    };\r\n}])\r\n.directive('ngHighlight', ['$compile', 'hilitor', function ($compile, hilitor) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attributes) {\r\n            scope.$watch(attributes['ngHighlight'], function (value) {\r\n                new Hilitor(\"treeComponentContainer-\" + scope.hierarchyCounter).apply(value);\r\n            });\r\n        }\r\n    };\r\n}])\r\n.service('RESTApi', ['$http', '$q','APPCONSTANTS',\r\nfunction ($http, $q, APPCONSTANTS) {\r\n    var baseUrl;\r\n    var documenttype='';\r\n    if (APPCONSTANTS != undefined) {\r\n        if (APPCONSTANTS.userPreferences.OrderData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.OrderData.type.id;\r\n        }\r\n        else if (APPCONSTANTS.userPreferences.RequisitionData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.RequisitionData.type.id;\r\n        }\r\n        else if (APPCONSTANTS.userPreferences.ProcurementProfileData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.ProcurementProfileData.type.id;\r\n        }\r\n        else if (APPCONSTANTS.userPreferences.InvoiceData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.InvoiceData.type.id;\r\n        }\r\n        else if (APPCONSTANTS.userPreferences.IRData != undefined) {\r\n            documenttype = APPCONSTANTS.userPreferences.IRData.type.id;\r\n        }\r\n\r\n    }\r\n    var callbackTracker = [];\r\n    var userExecutionContext;\r\n    var documentId;\r\n    var contactCode;\r\n    var requestObjectToBeExtended = null;\r\n    var customeURL;\r\n\r\n    /*if(windows.location.origin.indexOf('smartdev') > -1 || windows.location.origin.indexOf('127') > -1)\r\n    {\r\n      env = \"DEV\";\r\n    }else if(windows.location.origin.indexOf('smartqc') > -1)\r\n    {\r\n      env = \"QC\";\r\n    }else if(windows.location.origin.indexOf('smartuat') > -1)\r\n    {\r\n      env = \"UAT\";\r\n    }else\r\n    {\r\n      env = \"PROD\";\r\n    }*/\r\n\r\n    /*this.setEnvironment = function(env)\r\n    {\r\n      switch(env) {\r\n        case \"DEV\":\r\n        baseUrl = 'https://gepdevsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"QC\":\r\n        baseUrl = 'https://gepqcsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"UAT\":\r\n        baseUrl = 'https://gepuatsmart-rest.servicebus.windows.net/PortalRestService/';\r\n        break;\r\n        case \"PROD\":\r\n        baseUrl = 'https://gepsmart-rest.servicebus.windows.net/PortalRestService/';\r\n      }\r\n    }*/\r\n    this.setEnvironment = function (newURL) {\r\n        baseUrl = newURL + \"PortalRestService/\";\r\n    };\r\n    //baseUrl = APPCONSTANTS.userPreferences.URLs.AppURL;\r\n\r\n    this.setDocumentId = function (val) {\r\n        documentId = val;\r\n    };\r\n    this.setContactCode = function (val) {\r\n        contactCode = val;\r\n    };\r\n    this.setUserContext = function (val) {\r\n        userExecutionContext = val;\r\n    };\r\n    this.setRequestObject = function (val) {\r\n        requestObjectToBeExtended = val;\r\n    };\r\n    this.setUrl = function (val) {\r\n        customeURL = val;\r\n    };\r\n    function createRequest(mode, data, isOverrideInputPayload, treeType) {\r\n        var contactPasMappingMethod,\r\n             bpcCode ='&c=' + APPCONSTANTS.userPreferences.EncryptedBPC,\r\n            getPasDetailsMethod,\r\n            inputParameterKey,\r\n            getParentForNodeUrl;\r\n        if (!baseUrl) {\r\n            return null;\r\n        }\r\n        switch (mode) {\r\n            case \"PAS\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactPASMappingDetilsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactPASMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetPASDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'PASInputParam_Levels';\r\n                getParentForNodeUrl = \"GetPASLevelDetailsByPASCodes?oloc=218\" + bpcCode;\r\n                break;\r\n            case \"REG\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactRegionMappingDetailsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactRegionMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetRegionDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'RegionInputParam_Levels';\r\n                getParentForNodeUrl = \"GetREGIONLevelDetailsByRegionIds\";\r\n                break;\r\n\r\n            case \"ORG\":\r\n                if (treeType == 'nonGeneric') {\r\n                    contactPasMappingMethod = \"GetContactORGMappingDetailsForProject?oloc=218\" + bpcCode;\r\n                } else {\r\n                    contactPasMappingMethod = 'GetContactOrgMappingDetails?oloc=218' + bpcCode;\r\n                }\r\n                getPasDetailsMethod = 'GetORGDetails?oloc=218' + bpcCode;\r\n                inputParameterKey = 'ORG_InputParams';\r\n                getParentForNodeUrl = \"GetOrgEntityLevelDetailsByEntityDetailCodes\";\r\n                break;\r\n        }\r\n\r\n\r\n        var propmiseForThisInstance = $q.defer();\r\n        var requestObject = {\r\n            'url': baseUrl,\r\n            'headers': {\r\n                'Content-Type': 'application/json',\r\n                'UserExecutionContext': null\r\n            },\r\n            'data': {},\r\n            'method': 'POST',\r\n            'timeout': propmiseForThisInstance.promise\r\n        };\r\n        requestObject['data'][inputParameterKey] = {\r\n            'ContactCode': null,\r\n            'DocumentCode': null\r\n        };\r\n        if (mode != undefined) {\r\n            if (mode.toLowerCase() == 'pas' && (documenttype == '8' || documenttype == '7' || documenttype == '38' || documenttype == '9' || documenttype == '14')) {\r\n                var userRestrictCategoryTree = _.where(APPCONSTANTS.userPreferences.CommonSettings.lstSettings, { \"FieldName\": \"RestrictUserMappedCategorySelection\" });\r\n                if (userRestrictCategoryTree != undefined && userRestrictCategoryTree.length > 0) {\r\n                    if (userRestrictCategoryTree[0].FieldValue.toLowerCase() == 'false') {\r\n                        contactCode = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isOverrideInputPayload == true) {\r\n            requestObject.url = requestObject.url + getParentForNodeUrl;\r\n            requestObject.data = data;\r\n        } else {\r\n            if (contactCode) {\r\n                requestObject.data[inputParameterKey].ContactCode = contactCode;\r\n                requestObject.url = requestObject.url + contactPasMappingMethod;\r\n            } else {\r\n                requestObject.data[inputParameterKey].ContactCode = null;\r\n                requestObject.url = requestObject.url + getPasDetailsMethod;\r\n            }\r\n            requestObject.data[inputParameterKey].DocumentCode = (documentId) ? documentId : null;\r\n\r\n        }\r\n\r\n        if (customeURL) {\r\n            requestObject.url = customeURL;\r\n            //getPasDetailsMethod = 'GetORGDetails';\r\n            //inputParameterKey = 'ORG_InputParams';\r\n            //getParentForNodeUrl = \"GetOrgEntityLevelDetailsByEntityDetailCodes\";\r\n        }\r\n        requestObject.headers.UserExecutionContext = userExecutionContext;\r\n        requestObject.promise = propmiseForThisInstance;\r\n        if (requestObjectToBeExtended == null && contactCode == null) {\r\n            requestObject.data[inputParameterKey] = _.extend(requestObject.data[inputParameterKey], data);\r\n        } else {\r\n            requestObject.data[inputParameterKey] = _.extend(_.extend(requestObject.data[inputParameterKey], data), requestObjectToBeExtended)\r\n        }\r\n        return requestObject;\r\n    };\r\n    this.abort = function (reqParam) {\r\n        var dataFoundOnIndex;\r\n        var promise = _.find(callbackTracker, function (reqObj, index) {\r\n            dataFoundOnIndex = index;\r\n            return _.isEqual(reqParam, reqObj.data);\r\n        }).promise;\r\n        if (promise) {\r\n            promise.resolve();\r\n            console.log('canceled - ' + reqParam);\r\n        }\r\n    };\r\n\r\n    this.getData = function (mode, callback, data, isOverrideInputPayload, treeType) {\r\n        var requestObject = new createRequest(mode, data, isOverrideInputPayload, treeType);\r\n        if (!(_.isEmpty(requestObject))) {\r\n            callbackTracker.push({\r\n                'key': JSON.stringify(requestObject.data),\r\n                'callback': callback,\r\n                'promise': requestObject.promise,\r\n                'data': data\r\n            });\r\n            serviceCall(requestObject);\r\n        }\r\n    };\r\n\r\n    function serviceCall(req) {\r\n        $http(req).then(function (response) {\r\n            var dataFoundOnIndex;\r\n            var Callback = _.find(callbackTracker, function (reqObj, index) {\r\n                dataFoundOnIndex = index;\r\n                return _.isEqual(JSON.parse(reqObj.key), req.data);\r\n            }).callback;\r\n            callbackTracker.splice(dataFoundOnIndex, 1);\r\n            Callback({\r\n                'action': 'success',\r\n                'data': response\r\n            });\r\n        }, function (error) {\r\n            var dataFoundOnIndex;\r\n            var Callback = _.find(callbackTracker, function (reqObj, index) {\r\n                dataFoundOnIndex = index;\r\n                return _.isEqual(JSON.parse(reqObj.key), req.data);\r\n            }).callback;\r\n            callbackTracker.splice(dataFoundOnIndex, 1);\r\n            Callback({\r\n                'action': 'failure',\r\n                'data': error\r\n            });\r\n        });\r\n    };\r\n}]);\r\n\r\n})(angular);\n// Original JavaScript code by Chirp Internet: www.chirp.com.au\n// Please acknowledge use of this code by including this header.\n// 2/2013 jon: modified regex to display any match, not restricted to word boundaries.\n\n// License at http://www.the-art-of-web.com/copyright.html\n\n(function ( window, factory ) {\n\n  if ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n    // Expose a factory as module.exports in loaders that implement the Node\n    // module pattern (including browserify).\n    // This accentuates the need for a real window in the environment\n    // e.g. var jQuery = require(\"jquery\")(window);\n    module.exports = function( w ) {\n      w = w || window;\n      if ( !w.document ) {\n        throw new Error(\"Hilitor requires a window with a document\");\n      }\n      return factory( w.document );\n    };\n  } else {\n    if ( typeof define === \"function\" && define.amd ) {\n      // AMD. Register as a named module.\n      define( [], function() {\n        return factory(document);\n      });\n    } else {\n        // Browser globals\n        window.Hilitor = factory(document);\n    }\n  }\n\n// Pass this, window may not be defined yet\n}(this, function ( document, undefined ) {\n\n\nfunction Hilitor(id, tag, options)\n{\n  var targetNode = document.getElementById(id) || document.body;\n  var hiliteTag = tag || \"EM\";\n  var skipTags = new RegExp(\"^(?:SCRIPT|FORM|INPUT|TEXTAREA|IFRAME|VIDEO|AUDIO)$\");\n  var colors = [\"#ff6\"];\n  var wordColor = [];\n  var colorIdx = 0;\n  var matchRegex = \"\";\n  var openLeft = true;\n  var openRight = true;\n  options = options || {};\n  if (typeof options.onStart !== 'function') {\n    options.onStart = function () { /* return FALSE when you want to abort */ };\n  }\n  if (typeof options.onFinish !== 'function') {\n    options.onFinish = function () { /* What you return here is returned by Hilitor.apply() */ return true; };\n  }\n  if (typeof options.onDoOne !== 'function') {\n    options.onDoOne = function (node) { /* return FALSE when you want to skip the highlighting change for this node */ };\n  }\n\n  this.setMatchType = function(type)\n  {\n    switch(type)\n    {\n    case \"left\":\n      openLeft = false;\n      openRight = true;\n      break;\n    case \"right\":\n      openLeft = true;\n      openRight = false;\n      break;\n    default:\n    case \"open\":\n      openLeft = openRight = true;\n      break;\n    case \"complete\":\n      openLeft = openRight = false;\n      break;\n    }\n  };\n\n  this.setRegex = function (input)\n  {\n    input = input.replace(/^[^\\w]+|[^\\w]+$/g, \"\").replace(/[^\\w'\\-]+/g, \"|\");\n    var re = \"(\" + input + \")\";\n    if(!openLeft) re = \"\\\\b\" + re;\n    if(!openRight) re = re + \"\\\\b\";\n    matchRegex = new RegExp(re, \"i\");\n  };\n\n  this.getRegex = function ()\n  {\n    var retval = matchRegex.toString();\n    retval = retval.replace(/^\\/(\\\\b)?|(\\\\b)?\\/i$/g, \"\");\n    retval = retval.replace(/\\|/g, \" \");\n    return retval;\n  };\n\n  // recursively apply word highlighting\n  this.hiliteWords = function (node)\n  {\n    var i;\n\n    if(!node)\n      return;\n    if(!matchRegex)\n      return;\n    if(skipTags.test(node.nodeName))\n       return;\n    if(node.nodeName === hiliteTag && node.className === \"hilitor\")\n      return;\n\n    if(node.hasChildNodes()) {\n      for(i = 0; i < node.childNodes.length; i++) {\n        this.hiliteWords(node.childNodes[i]);\n      }\n    }\n    if(node.nodeType === 3) { // NODE_TEXT\n      if((nv = node.nodeValue) && (regs = matchRegex.exec(nv))) {\n        if (false !== options.onDoOne.call(this, node)) {\n          if(!wordColor[regs[0].toLowerCase()]) {\n            wordColor[regs[0].toLowerCase()] = colors[colorIdx++ % colors.length];\n          }\n\n          var match = document.createElement(hiliteTag);\n          match.appendChild(document.createTextNode(regs[0]));\n          match.className = \"hilitor\";\n          match.style.backgroundColor = wordColor[regs[0].toLowerCase()];\n          match.style.fontStyle = \"inherit\";\n          match.style.color = \"#000\";\n\n          var after = node.splitText(regs.index);\n          after.nodeValue = after.nodeValue.substring(regs[0].length);\n          node.parentNode.insertBefore(match, after);\n        }\n      }\n    }\n  };\n\n  // remove highlighting\n  this.remove = function ()\n  {\n    var arr, i;\n    do {\n      arr = document.querySelectorAll(hiliteTag + \".hilitor\");\n      i = 0;\n      while (i < arr.length && (el = arr[i])) {\n        // store the reference to the parent of the hilite tag as that node itself, \n        // and all its links, is invalidated in the next .replaceChild() call:\n        var parentNode = el.parentNode;\n        if (!parentNode) {\n          i++;      \n          // this entry would otherwise crash in the code below; we can however improve \n          // on the total run-time costs by cutting back on the number of times we trigger\n          // the outer loop (which serves as a recovery mechanism anyway) by continuing\n          // with this querySelectorAll()'s results, but at it's higher indexes, which\n          // are very probably still valid/okay. This saves a number of outer loops and \n          // thus a number of querySelectorAll calls.\n          continue;\n        }\n        // Note that this stuff can crash (due to the parentNode being nuked) when multiple\n        // snippets in the same text node sibling series are merged. That's what the\n        // parentNode check is for. Ugly. Even while the .querySelectorAll() 'array' is updated\n        // automatically, which would imply that this never occurs, yet: it does. :-(\n        parentNode.replaceChild(el.firstChild, el);\n        // and merge the text snippets back together again.\n        parentNode.normalize();\n      }\n    } while (arr.length > 0);\n  };\n\n  // start highlighting at target node\n  this.apply = function (input)\n  {\n    // always remove all highlight markers which have been done previously\n    this.remove();\n    if(!input) {\n      return false;\n    }\n    this.setRegex(input);\n    var rv = options.onStart.call(this);\n    if (rv === false) {\n      return rv;\n    }\n    // ensure all text node series are merged, etc. so that we don't have to bother with fragmented texts in the search/scan.\n    targetNode.normalize();\n    this.hiliteWords(targetNode);\n    return options.onFinish.call(this);\n  };\n}\n\n\n  return Hilitor;\n}));\n\n(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartLastRepeaterElement', function () {\r\n\t\treturn function (scope, element, attrs) {\r\n\t\t    if (attrs.callbackOnItem === 'true') {\r\n\t\t        scope.$emit('AllRepeaterElement', element, attrs);\r\n\t\t    }\r\n\t\t    if (scope.$last) {\r\n\t\t        scope.$emit('LastRepeaterElement', element, attrs);\r\n\t\t    }\r\n\t\t};\r\n\t});\r\n})(angular);\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartMaps', [\"$compile\", \"$sce\", \"$templateRequest\", \"$timeout\", \"$translate\", function ($compile, $sce, $templateRequest, $timeout, $translate) {\r\n        return {\r\n            restrict: 'E',\r\n            template: '<div><div ng-if=\"!mapLoaded\" class=\"row\"><div class=\"mapinfocontainer center-align\"> <i class=\"icon grey-text\"><svg><use xlink:href=\"#icon_Info\"></use></svg></i> <span class=\"center-align displayBlock\">' + $translate.instant('couldNotLoadMap') + '</span> <span class=\"center-align displayBlock\">' + $translate.instant('checkAccessPermission') + '<a href=\"javascript:void(0)\" ng-click=\"viewSwitcher()\">' + $translate.instant('tableView') + '</a>.</span></div></div></div>',\r\n            scope: true,\r\n            replace: true,\r\n            link: function (scope, element, attrs) {\r\n\r\n                //scope.locations = scope[attrs.locations];\r\n                var locationsOpt = scope.$eval(attrs.locations);\r\n                scope.locations = scope[locationsOpt[0]][locationsOpt[1]];\r\n\r\n                scope.mapLoaded = true;\r\n                if (typeof window.google !== 'object' || typeof window.google.maps !== 'object') {\r\n                    scope.mapLoaded = false;\r\n                    scope.viewSwitcher = function () {\r\n                        scope.locations.viewSwitcherFlag.flag = false;\r\n                    };\r\n                    return false;\r\n                }\r\n\r\n                var myLatLng = new google.maps.LatLng(21, 78);\r\n                var mapOptions = {\r\n                    center: myLatLng,\r\n                    maxZoom: 14,\r\n                    minZoom: 2,\r\n                    streetViewControl: false,\r\n                    mapTypeControl: false,\r\n                    mapTypeId: google.maps.MapTypeId.ROADMAP,\r\n                    styles: [\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"elementType\": \"labels.text.fill\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                               {\r\n                                   \"visibility\": \"on\"\r\n                               },\r\n                               {\r\n                                   \"color\": \"#6fa4e4\",\r\n                                   \"font-weight\": \"normal\"\r\n                               }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t   {\r\n\t\t\t\t\t\t       \"elementType\": \"labels.text.stroke\",\r\n\t\t\t\t\t\t       \"stylers\": [\r\n                                 {\r\n                                     \"visibility\": \"off\"\r\n                                 }\r\n\t\t\t\t\t\t       ]\r\n\t\t\t\t\t\t   },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.fill\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.stroke\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.country\",\r\n\t\t\t\t\t\t     \"elementType\": \"labels\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#6fa4e4\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.land_parcel\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.locality\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                              {\r\n                                  \"color\": \"#6fa4e4\",\r\n                                  \"font-weight\": \"normal\"\r\n                              },\r\n                               {\r\n                                   \"visibility\": \"simplified\"\r\n                               }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.neighborhood\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"e6ebf1\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"elementType\": \"geometry.stroke\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"administrative.province\",\r\n\t\t\t\t\t\t     \"elementType\": \"labels\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#6fa4e4\",\r\n                                 \"font-weight\": \"normal\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"simplified\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.man_made\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\"\r\n                             },\r\n                             {\r\n                                 \"visibility\": \"on\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural.landcover\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#e6ebf1\",\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"landscape.natural.terrain\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"poi\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"road\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.airport\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.bus\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"transit.station.rail\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"visibility\": \"off\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t },\r\n\t\t\t\t\t\t {\r\n\t\t\t\t\t\t     \"featureType\": \"water\",\r\n\t\t\t\t\t\t     \"stylers\": [\r\n                             {\r\n                                 \"color\": \"#ffffff\"\r\n                             }\r\n\t\t\t\t\t\t     ]\r\n\t\t\t\t\t\t }\r\n                    ]\r\n                };\r\n                element.height(480);\r\n\r\n                var map = new google.maps.Map(document.getElementById(attrs.id), mapOptions);\r\n\r\n                var mcOptions = { gridSize: 50, maxZoom: 14, imagePath: scope.locations.baseImgUrl + 'm' };\r\n\r\n                var infowindow = new google.maps.InfoWindow({\r\n                    maxWidth: 360\r\n                });\r\n                var latlngbounds = new google.maps.LatLngBounds();\r\n                var markers = [];\r\n                var img;\r\n                var key;\r\n                var mapDataLeng = scope.locations.locData.length,\r\n                    dataGeoDataTemp,\r\n\t\t\t        markerCluster;\r\n\r\n                markerCluster = new MarkerClusterer(map, markers, mcOptions);\r\n                markerCluster.styles_.forEach(function (val, ind) {\r\n                    val.textColor = \"white\";\r\n                });\r\n\r\n                // onClickZoom OVERRIDE\r\n                markerCluster.onClickZoom = function (event) { return multiChoice(markerCluster, event); };\r\n                scope.locationClusterMarker = {};\r\n                for (key = 0; key < mapDataLeng; key++) {\r\n                    var geocoder = new google.maps.Geocoder();\r\n                    (function (value, key) {\r\n                        mapGeocodeFn(value, key, mapDataLeng)\r\n\r\n                    })(scope.locations.locData[key], key);\r\n                };\r\n\r\n                function infoWindowStyle() {\r\n\r\n                    var iwOuter = $('.gm-style-iw');\r\n                    var iwBackground = iwOuter.prev();\r\n                    var $infoWin = iwOuter.parent('div').parent('div').parent('div');\r\n\r\n                    $infoWin.css({ visibility: 'hidden' });\r\n                    iwOuter.next().css('display', 'none');\r\n                    iwOuter.children(':nth-child(1)').css({ 'overflow': 'visible' });\r\n                    iwBackground.children(':nth-child(2)').css({ 'display': 'none' });\r\n                    iwBackground.children(':nth-child(4)').css({ 'display': 'none' });\r\n                    iwOuter.parent().css({ width: '360px' });\r\n                    iwOuter.css({ 'z-index': '-1' });\r\n                    $infoWin.css({ visibility: 'visible' });\r\n\r\n                }\r\n\r\n                function mapGeocodeFn(value, key, mapDataLeng) {\r\n                    var addressData = value.countryInfo ? value.countryInfo.CountryCode.toString() : value.state ? value.state.toString() : '',\r\n                        zipcode = value.zipcode ? value.zipcode.toString() : '';\r\n                    geocoder.geocode({\r\n                        componentRestrictions: {\r\n                            country: addressData,\r\n                            postalCode: zipcode\r\n                        }\r\n                    }, function (results, status) {\r\n                        if (status == google.maps.GeocoderStatus.OK) {\r\n\r\n                            if (key >= 7) {\r\n                                img = key % 7;\r\n                            } else {\r\n                                img = key;\r\n                            }\r\n\r\n                            var marker = new google.maps.Marker({\r\n                                position: new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()),\r\n                                map: map,\r\n                                title: value.state,\r\n                                id: key,\r\n                                //animation: google.maps.Animation.DROP,\r\n                                icon: scope.locations.baseImgUrl + \"cmarker\" + img + \".png\"\r\n                            });\r\n                            marker.setMap(map);\r\n                            markers.push(marker);\r\n\r\n                            markerCluster.addMarkers(markers);\r\n\r\n                            google.maps.event.addListener(marker, 'click', function () {\r\n                                var marker = this;\r\n                                //infowindow.setContent($compile(linker)(scope)[0]);\r\n                                scope.locations.id = marker.id;\r\n                                infowindow.open(map, marker);\r\n                                infoWindowStyle();\r\n                            });\r\n\r\n                            //AutoZoom map to fit all markers\r\n                            latlngbounds.extend(new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng()));\r\n                            map.fitBounds(latlngbounds);\r\n                        }\r\n                        dataGeoDataTemp = markers.length ? false : true;\r\n                        if (dataGeoDataTemp != scope.locations.dataGeoData) {\r\n                            scope.$apply(function () {\r\n                                scope.locations.dataGeoData = dataGeoDataTemp;\r\n                            });\r\n                        }\r\n\r\n                        if (dataGeoDataTemp && scope.locations.viewSwitcherFlag.flag) {\r\n                            scope.$apply(function () {\r\n                                scope.locations.viewSwitcherFlag.flag = false;\r\n                            });\r\n                        }\r\n                    });\r\n                };\r\n                function multiChoice(mc, event) {\r\n\r\n                    scope.locationClusterMarker = event.cluster_;\r\n\r\n                    //map.panTo(event.cluster_.markers_[0].position);\r\n\r\n                    var clusterDom = '<ul id=\"dropdown1\" class=\"dropdown-content clusterDomContainer\"><li ng-click=\"clusterListFn(marker)\" ng-repeat=\"marker in locationClusterMarker.markers_\"><a href=\"javascript:void(0)\" class=\"grey-text text-darken-4\">{{locations.locData[marker.id].locname}}</a></li></ul>';\r\n                    clusterDom = $compile(clusterDom)(scope);\r\n                    if (!angular.element(event.div_).hasClass('clusterDomContainer-dropdown-button')) {\r\n                        angular.element(event.div_).addClass('clusterDomContainer-dropdown-button').attr({ 'data-activates': 'dropdown1', 'data-stoppropagation': true }).append(clusterDom);\r\n                        setTimeout(function () {\r\n                            var $dropBtn = angular.element('.clusterDomContainer-dropdown-button');\r\n                            $dropBtn.dropdown({\r\n                                constrain_width: false\r\n                            });\r\n                            $dropBtn.trigger('click');\r\n\r\n                        }, 10)\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                var unbindWatch = scope.$watch('locations.mapReinit', function (val) {\r\n                    if (val.reinit) {\r\n                        mapDataLeng = scope.locations.locData.length;\r\n                        infowindow.close();\r\n                        if (markerCluster) {\r\n                            markerCluster.clearMarkers();\r\n                            markers = [];\r\n                        }\r\n                        for (key = 0; key < mapDataLeng; key++) {\r\n                            var geocoder = new google.maps.Geocoder();\r\n                            (function (value, key) {\r\n                                mapGeocodeFn(value, key, mapDataLeng);\r\n                            })(scope.locations.locData[key], key);\r\n                        };\r\n                    }\r\n\r\n                    if (val.refresh) {\r\n                        setTimeout(function () {\r\n                            google.maps.event.trigger(map, \"resize\");\r\n                            map.fitBounds(latlngbounds);\r\n                            var zoom = map.getZoom();\r\n                            map.setZoom(zoom > 14 ? 14 : zoom);\r\n                        }, 100);\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    unbindWatch();\r\n                    scope.dataOption = null;\r\n                    infowindow = null;\r\n                    latlngbounds = null;\r\n                    markers = null;\r\n                    mapOptions = null;\r\n                    map = null;\r\n                    geocoder = null;\r\n                });\r\n\r\n                scope.clusterListFn = function (data) {\r\n                    var marker = data;\r\n                    $timeout(function () {\r\n                        scope.locations.id = marker.id;\r\n                        infowindow.setPosition(marker.position);\r\n                        infowindow.open(map);\r\n                        infoWindowStyle();\r\n                    }, 10);\r\n                };\r\n\r\n                google.maps.event.addListener(map, 'click', function (event) {\r\n                    if (infowindow) {\r\n                        var $locationCardDropdown = angular.element('.mapdropdownbtn');\r\n                        if ($locationCardDropdown.hasClass('active')) {\r\n                            $locationCardDropdown.trigger('click');\r\n                        }\r\n                        infowindow.close();\r\n                    }\r\n                });\r\n                var templateUrl = $sce.getTrustedResourceUrl(scope.locations.infoTemplateURL);\r\n                var linker;\r\n                $templateRequest(templateUrl).then(function (template) {\r\n                    linker = template;\r\n                    infowindow.setContent($compile(linker)(scope)[0]);\r\n                });\r\n                google.maps.event.addDomListener(map, 'zoom_changed', function () {\r\n                    if (infowindow) {\r\n                        var $locationCardDropdown = angular.element('.mapdropdownbtn');\r\n                        if ($locationCardDropdown.hasClass('active')) {\r\n                            $locationCardDropdown.trigger('click');\r\n                        }\r\n                        infowindow.close();\r\n                    }\r\n                    angular.element('#dropdown1').remove();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})(angular);\n(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartMetadataChips', ['debouncer', function (debouncer) {\r\n\t\treturn {\r\n\t\t\trestrict: 'E',\r\n\t\t\treplace: true,\r\n\t\t\tscope: {\r\n\t\t\t\t\"smartmetadata\": \"=metadata\",\r\n\t\t\t\t\"metadatatitle\": \"@\",\r\n\t\t\t\t\"maxlength\": \"@\",\r\n\t\t\t\t\"callBack\": \"&\"\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\tscope.fieldClass = typeof attrs.fieldClass === 'undefined' ? 's4' : attrs.fieldClass;\r\n\t\t\t\tscope.itemTotal = typeof attrs.itemTotal === 'undefined' ? 3 : (parseInt(attrs.itemTotal, 10) <= 0 ? 0 : parseInt(attrs.itemTotal, 10));\r\n\t\t\t\tscope.fieldkey = typeof attrs.fieldkey === 'undefined' ? 'name' : attrs.fieldkey;\r\n\t\t\t\tscope.showMoreChips = 0;\r\n\r\n\t\t\t\tattrs.$observe('optionId', function () {\r\n\t\t\t\t\tscope.optionId = attrs.optionId;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.$on('LastRepeaterElement', function (scope, element, attrs) {\r\n\t\t\t\t\tdebouncer.add(function () {\r\n\t\t\t\t\t\tvar $chipsActiceContainer;\r\n\t\t\t\t\t\t$chipsActiceContainer = typeof $chipsActiceContainer !== 'undefined' ? $chipsActiceContainer : angular.element('#' + scope.targetScope.$parent.optionId + '-chips-0');\r\n\t\t\t\t\t\tif ($chipsActiceContainer) {\r\n\t\t\t\t\t\t\t$chipsActiceContainer.css({ 'transition': 'all .5s ease-in-out', 'background': '#e4e4e4', 'color': '#000' });\r\n\t\t\t\t\t\t\t$chipsActiceContainer.find('.chips-icon').css({ 'transition': 'all .5s ease-in-out', 'color': '#9e9e9e' });\r\n\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\t$chipsActiceContainer.css('transition', 'none').find('.chips-icon').css('transition', 'none');\r\n\t\t\t\t\t\t\t}, 500);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 100);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.metadataAdd = function (data, $e) {\r\n\t\t\t\t\tvar metadataContainer = angular.element('#' + scope.optionId).width() - 200,\r\n\t\t\t\t\t\t$chipsActiceContainer,\r\n\t\t\t\t\t\tfieldKey = scope.fieldkey;\r\n\t\t\t\t\tif (angular.isString(data.displayfield.title)) {\r\n\t\t\t\t\t    data.displayfield.title = data.displayfield.title.trim();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!data.displayfield.title) {\r\n\t\t\t\t\t    data.displayfield.isfocus = true;\r\n\t\t\t\t\t    return 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$chipsActiceContainer = angular.element('#' + scope.optionId + '-chips-0');\r\n\t\t\t\t\tif ($chipsActiceContainer) {\r\n\t\t\t\t\t\t$chipsActiceContainer.css({ 'transition': 'none', 'background': '#159dfc', 'color': '#fff' });\r\n\t\t\t\t\t\t$chipsActiceContainer.find('.chips-icon').css({ 'transition': 'none', 'color': '#fff' });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.options.unshift({});\r\n\t\t\t\t\tdata.options[0][fieldKey] = data.displayfield.title;\r\n\t\t\t\t\tdata.displayfield.title = \"\";\r\n\t\t\t\t\tdata.displayfield.isfocus = true;\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataCheck = function (data, $e) {\r\n\t\t\t\t\tvar char = $e.which || $e.keyCode,\r\n\t\t\t\t\t\tcharReq = [13, 188, 186],\r\n\t\t\t\t\t\tcharReqLength = charReq.length,\r\n\t\t\t\t\t\tcharReqKey,\r\n\t\t\t\t\t\ti;\r\n\r\n\t\t\t\t\tif (data.displayfield.title) {\r\n\t\t\t\t\t\tfor (i = 0; i < charReqLength; i++) {\r\n\t\t\t\t\t\t\tif (char === charReq[i]) {\r\n\t\t\t\t\t\t\t\tcharReqKey = charReq[i] === 188 ? ',' : charReq[i] === 186 ? ';' : '';\r\n\t\t\t\t\t\t\t\tif (charReqKey) {\r\n\t\t\t\t\t\t\t\t\tdata.displayfield.title = data.displayfield.title.replace(charReqKey, '');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tangular.element($e.currentTarget).blur();\r\n\t\t\t\t\t\t\t\tscope.metadataAdd(data, $e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar beforeDelete = function (obj) {\r\n\t\t\t\t    scope.callBack({\r\n\t\t\t\t        data: {\r\n\t\t\t\t            'data': obj.data.chipData.options[obj.data.index],\r\n\t\t\t\t            'type': 'delete', callback: deleteCallback\r\n\t\t\t\t        }\r\n\t\t\t\t    });\r\n\t\t\t\t    function deleteCallback(a) {\r\n\t\t\t\t        if (a) { obj.success() }\r\n\t\t\t\t        else { obj.reject() }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.metadataDelete = function (data, ind) {\r\n\t\t\t\t    if (attrs.callBack) {\r\n\t\t\t\t        beforeDelete({\r\n\t\t\t\t            data: { chipData: data, index: ind },\r\n\t\t\t\t            success: function () {\r\n\t\t\t\t                // user wants to delete\r\n\t\t\t\t                data.options.splice(ind, 1);\r\n\t\t\t\t                scope.$apply();\r\n\t\t\t\t            },\r\n\t\t\t\t            reject: function () {\r\n\t\t\t\t                // deletion rejected!\r\n\t\t\t\t            }\r\n\t\t\t\t        });\r\n\t\t\t\t    } else {\r\n\t\t\t\t        data.options.splice(ind, 1);\r\n\t\t\t\t    }\r\n\t\t\t\t};\r\n\t\t\t\tscope.smartmetachipTitleClick = function (data, ind) {\r\n\t\t\t\t\tangular.isFunction(scope.callBack) && scope.callBack({ data: { 'data': data.options[ind], 'type': 'add' } });\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataShowMore = function (cont) {\r\n\t\t\t\t\tangular.element('#' + cont).css('transition', '1s ease-in-out');\r\n\t\t\t\t\tdebouncer.add(function () {\r\n\t\t\t\t\t\tscope.showMoreChips = 1;\r\n\t\t\t\t\t}, 10);\r\n\t\t\t\t};\r\n\t\t\t\tscope.metadataLessMore = function (cont) {\r\n\t\t\t\t\tangular.element('#' + cont).css('transition', 'none');\r\n\t\t\t\t\tscope.showMoreChips = 0;\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\ttemplateUrl: 'shared/directives/smartMetadataChips/smartMetadataChipsTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})(angular);\n(function () {\r\n\t'use strict';\r\n\tangular.module('SMART2').value('uiSliderConfig', {}).directive('smartRangeSlider', ['uiSliderConfig', '$timeout', function (uiSliderConfig, $timeout) {\r\n\t\tuiSliderConfig = uiSliderConfig || {};\r\n\t\treturn {\r\n\t\t\trequire: 'ngModel',\r\n\t\t\tcompile: function () {\r\n\t\t\t\tvar preLink = function (scope, elm, attrs, ngModel) {\r\n\r\n\t\t\t\t\tfunction parseNumber(n, decimals) {\r\n\t\t\t\t\t\treturn (decimals) ? parseFloat(n) : parseInt(n, 10);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar directiveOptions = angular.copy(scope.$eval(attrs.uiSlider));\r\n\t\t\t\t\tvar options = angular.extend(directiveOptions || {}, uiSliderConfig);\r\n\t\t\t\t\t// Object holding range values\r\n\t\t\t\t\tvar prevRangeValues = {\r\n\t\t\t\t\t\tmin: null,\r\n\t\t\t\t\t\tmax: null\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// convenience properties\r\n\t\t\t\t\tvar properties = ['min', 'max', 'step', 'lowerBound', 'upperBound'];\r\n\t\t\t\t\tvar useDecimals = (!angular.isUndefined(attrs.useDecimals)) ? true : false;\r\n\t\t\t\t\tvar updateOn = (angular.isDefined(options['updateOn'])) ? options['updateOn'] : 'slide'\r\n\r\n\t\t\t\t\tvar init = function () {\r\n\t\t\t\t\t\t// When ngModel is assigned an array of values then range is expected to be true.\r\n\t\t\t\t\t\t// Warn user and change range to true else an error occurs when trying to drag handle\r\n\t\t\t\t\t\tif (angular.isArray(ngModel.$viewValue) && options.range !== true) {\r\n\t\t\t\t\t\t\tconsole.warn('Change your range option of ui-slider. When assigning ngModel an array of values then the range option should be set to true.');\r\n\t\t\t\t\t\t\toptions.range = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Ensure the convenience properties are passed as options if they're defined\r\n\t\t\t\t\t\t// This avoids init ordering issues where the slider's initial state (eg handle\r\n\t\t\t\t\t\t// position) is calculated using widget defaults\r\n\t\t\t\t\t\t// Note the properties take precedence over any duplicates in options\r\n\t\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\t\tif (angular.isDefined(attrs[property])) {\r\n\t\t\t\t\t\t\t\toptions[property] = parseNumber(attrs[property], useDecimals);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\telm.slider(options);\r\n\t\t\t\t\t\tinit = angular.noop;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Find out if decimals are to be used for slider\r\n\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\t// support {{}} and watch for updates\r\n\t\t\t\t\t\tattrs.$observe(property, function (newVal) {\r\n\t\t\t\t\t\t\tif (!!newVal) {\r\n\t\t\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\t\t\toptions[property] = parseNumber(newVal, useDecimals);\r\n\t\t\t\t\t\t\t\telm.slider('option', property, parseNumber(newVal, useDecimals));\r\n\t\t\t\t\t\t\t\tngModel.$render();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\tattrs.$observe('disabled', function (newVal) {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\telm.slider('option', 'disabled', !!newVal);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Watch ui-slider (byVal) for changes and update\r\n\t\t\t\t\tscope.$watch(attrs.uiSlider, function (newVal) {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\tif (newVal !== undefined) {\r\n\t\t\t\t\t\t\telm.slider('option', newVal);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\t// Late-bind to prevent compiler clobbering\r\n\t\t\t\t\t$timeout(init, 0, true);\r\n\r\n\t\t\t\t\t// Update model value from slider\r\n\t\t\t\t\telm.bind(updateOn, function (event, ui) {\r\n\t\t\t\t\t\tvar valuesChanged;\r\n\r\n\t\t\t\t\t\tif (ui.values) {\r\n\t\t\t\t\t\t\tvar boundedValues = ui.values.slice();\r\n\r\n\t\t\t\t\t\t\tif (options.lowerBound && boundedValues[0] < options.lowerBound) {\r\n\t\t\t\t\t\t\t\tboundedValues[0] = Math.max(boundedValues[0], options.lowerBound);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (options.upperBound && boundedValues[1] > options.upperBound) {\r\n\t\t\t\t\t\t\t\tboundedValues[1] = Math.min(boundedValues[1], options.upperBound);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (boundedValues[0] !== ui.values[0] || boundedValues[1] !== ui.values[1]) {\r\n\t\t\t\t\t\t\t\tvaluesChanged = true;\r\n\t\t\t\t\t\t\t\tui.values = boundedValues;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar boundedValue = ui.value;\r\n\r\n\t\t\t\t\t\t\tif (options.lowerBound && boundedValue < options.lowerBound) {\r\n\t\t\t\t\t\t\t\tboundedValue = Math.max(boundedValue, options.lowerBound);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (options.upperBound && boundedValue > options.upperBound) {\r\n\t\t\t\t\t\t\t\tboundedValue = Math.min(boundedValue, options.upperBound);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (boundedValue !== ui.value) {\r\n\t\t\t\t\t\t\t\tvaluesChanged = true;\r\n\t\t\t\t\t\t\t\tui.value = boundedValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tngModel.$setViewValue(ui.values || ui.value);\r\n\t\t\t\t\t\t$(ui.handle).find('.ui-slider-tip').text(ui.value);\r\n\t\t\t\t\t\tscope.$apply();\r\n\r\n\t\t\t\t\t\tif (valuesChanged) {\r\n\t\t\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\t\t\telm.slider('value', ui.values || ui.value);\r\n\t\t\t\t\t\t\t}, 0);\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Update slider from model value\r\n\t\t\t\t\tngModel.$render = function () {\r\n\t\t\t\t\t\tinit();\r\n\t\t\t\t\t\tvar method = options.range === true ? 'values' : 'value';\r\n\r\n\t\t\t\t\t\tif (options.range !== true && isNaN(ngModel.$viewValue) && !(ngModel.$viewValue instanceof Array)) {\r\n\t\t\t\t\t\t\tngModel.$viewValue = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (options.range && !angular.isDefined(ngModel.$viewValue)) {\r\n\t\t\t\t\t\t\tngModel.$viewValue = [0, 0];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Do some sanity check of range values\r\n\t\t\t\t\t\tif (options.range === true) {\r\n\t\t\t\t\t\t\t// previously, the model was a string b/c it was in a text input, need to convert to a array.\r\n\t\t\t\t\t\t\t// make sure input exists, comma exists once, and it is a string.\r\n\t\t\t\t\t\t\tif (ngModel.$viewValue && angular.isString(ngModel.$viewValue) && (ngModel.$viewValue.match(/,/g) || []).length === 1) {\r\n\t\t\t\t\t\t\t\t// transform string model into array.\r\n\t\t\t\t\t\t\t\tvar valueArr = ngModel.$viewValue.split(',');\r\n\t\t\t\t\t\t\t\tngModel.$viewValue = [Number(valueArr[0]), Number(valueArr[1])];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Check outer bounds for min and max values\r\n\t\t\t\t\t\t\tif (angular.isDefined(options.min) && options.min > ngModel.$viewValue[0]) {\r\n\t\t\t\t\t\t\t\tngModel.$viewValue[0] = options.min;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(options.max) && options.max < ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\tngModel.$viewValue[1] = options.max;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check min and max range values\r\n\t\t\t\t\t\t\tif (ngModel.$viewValue[0] > ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\t// Min value should be less to equal to max value\r\n\t\t\t\t\t\t\t\tif (prevRangeValues.min >= ngModel.$viewValue[1]) {\r\n\t\t\t\t\t\t\t\t\tngModel.$viewValue[1] = prevRangeValues.min;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Max value should be less to equal to min value\r\n\t\t\t\t\t\t\t\tif (prevRangeValues.max <= ngModel.$viewValue[0]) {\r\n\t\t\t\t\t\t\t\t\tngModel.$viewValue[0] = prevRangeValues.max;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Store values for later user\r\n\t\t\t\t\t\t\tprevRangeValues.min = ngModel.$viewValue[0];\r\n\t\t\t\t\t\t\tprevRangeValues.max = ngModel.$viewValue[1];\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telm.slider(method, ngModel.$viewValue);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tscope.$watch(attrs.ngModel, function () {\r\n\t\t\t\t\t\tif (options.range === true) {\r\n\t\t\t\t\t\t\tngModel.$render();\r\n\r\n\t\t\t\t\t\t\t$(elm).find('.ui-slider-tip').each(function (i, tipElm) {\r\n\t\t\t\t\t\t\t\t$(tipElm).text(ngModel.$viewValue[i]);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$(elm).find('.ui-slider-tip').text(ngModel.$viewValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\tfunction destroy() {\r\n\t\t\t\t\t\tif (elm.hasClass('ui-slider')) {\r\n\t\t\t\t\t\t\telm.slider('destroy');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.$on(\"$destroy\", destroy);\r\n\t\t\t\t\telm.one('$destroy', destroy);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar postLink = function (scope, element, attrs, ngModel) {\r\n\t\t\t\t\t// Add tick marks if 'tick' and 'step' attributes have been setted on element.\r\n\t\t\t\t\t// Support horizontal slider bar so far. 'tick' and 'step' attributes are required.\r\n\t\t\t\t\tvar options = angular.extend({}, scope.$eval(attrs.uiSlider));\r\n\t\t\t\t\tvar properties = ['min', 'max', 'step', 'tick', 'tip'];\r\n\t\t\t\t\tangular.forEach(properties, function (property) {\r\n\t\t\t\t\t\tif (angular.isDefined(attrs[property])) {\r\n\t\t\t\t\t\t\toptions[property] = attrs[property];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (angular.isDefined(options['tick']) && angular.isDefined(options['step'])) {\r\n\t\t\t\t\t\tvar total = parseInt((parseInt(options['max']) - parseInt(options['min'])) / parseInt(options['step']));\r\n\t\t\t\t\t\tfor (var i = total; i >= 0; i--) {\r\n\t\t\t\t\t\t\tvar left = ((i / total) * 100) + '%';\r\n\t\t\t\t\t\t\t$(\"<div/>\").addClass(\"ui-slider-tick\").appendTo(element).css({ left: left });\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (angular.isDefined(options['tip'])) {\r\n\t\t\t\t\t\t$timeout(function () {\r\n\t\t\t\t\t\t\tvar handles = element.find('.ui-slider-handle');\r\n\t\t\t\t\t\t\tif (handles && handles.length > 1 && ngModel.$viewValue && angular.isArray(ngModel.$viewValue)) {\r\n\t\t\t\t\t\t\t\t$(handles[0]).append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue[0] + '</div>');\r\n\t\t\t\t\t\t\t\t$(handles[1]).append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue[1] + '</div>');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\telement.find('.ui-slider-handle').append('<div class=\"ui-slider-tip\">' + ngModel.$viewValue + '</div>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 10);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpre: preLink,\r\n\t\t\t\t\tpost: postLink\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();\n(function (angular,$) {\r\n    /*\r\n        :: directive attributes\r\n                onResize    :   & // fires when element changes size\r\n          onHeightChange    :   & // fires when element's height change\r\n           onWidthChange    :   & // fires when element's width change\r\n    */\r\n    \"use strict\";\r\n    angular.module(\"SMART2\")\r\n        .directive(\"smartResize\", [\"$timeout\", \"$parse\", smartResizeDir]);\r\n\r\n    function smartResizeDir($timeout, $parse) {\r\n        return {\r\n            link: function (scope, element, attrs) {\r\n                var callbacks = {\r\n                    onResize: attrs.onResize ? $parse(addArguments(attrs.onResize)) : null,\r\n                    onHeightChange: attrs.onHeightChange ? $parse(addArguments(attrs.onHeightChange)) : null,\r\n                    onWidthChange: attrs.onWidthChange ? $parse(addArguments(attrs.onWidthChange)) : null\r\n                };\r\n                function addArguments(fn) {\r\n                    return fn.replace(/\\(\\)/, '(e)');\r\n                }\r\n                $timeout(function () {\r\n                    resizeElement({\r\n                        element: element.get(0),\r\n                        onResize: function (a) {\r\n                            callbacks.onResize(scope, { e: a });\r\n                        },\r\n                        onHeightChange: function (a) {\r\n                            callbacks.onHeightChange(scope, { e: a });\r\n                        },\r\n                        onWidthChange: function (a) {\r\n                            callbacks.onWidthChange(scope, { e: a });\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function resizeElement(config) {\r\n                    var config = $.extend({\r\n                        element: null, // html element :: accepts Html Element not selector\r\n                        onResize: null, // callback fires after changed size of element :: accepts function\r\n                        onHeightChange: null, // callback fires after changed height of element :: accepts function\r\n                        onWidthChange: null // callback fires after changed width of element :: accepts function\r\n                    }, config),\r\n                        resizeSensorCss = 'width:100%;height:100%;position:absolute;left:0;top:0;z-index:-1;',\r\n                        sensorCss = 'position:absolute;left:0;top:0;overflow:hidden;height:100%;width:100%;',\r\n                        sensorElementCss = 'position:relative;top:0;',\r\n                        html = '<div class=\"resize-sensor\" style=\"' + resizeSensorCss + '\"><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"shrink\"><div class=\"sensor-element-shrink\" style=\"' + sensorElementCss + '\"></div></div><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"expand\"><div class=\"sensor-element-expand\" style=\"' + sensorElementCss + '\"></div></div></div>';\r\n\r\n                    var el = $(config.element),\r\n                        PD = { height: 0, width: 0 },\r\n                        PDC = { height: 0, width: 0 };\r\n                    if (el.length > 0) {\r\n                        var mainSensor = $(html);\r\n                        el.css(\"position\", \"relative\").append(mainSensor);\r\n                        mainSensor.find(\".sensor\").each(function () {\r\n                            var sensor = $(this);\r\n                            if (sensor.data(\"el\") == \"expand\") {\r\n                                sensor.find(\".sensor-element-expand\")\r\n                                    .css({ width: el.outerWidth() * 2, height: el.outerHeight() * 2 });\r\n                            } else if (sensor.data(\"el\") == \"shrink\") {\r\n                                sensor.find(\".sensor-element-shrink\")\r\n                                    .css({ width: \"200%\", height: \"200%\" });\r\n                            }\r\n                            sensor.scrollLeft(el.outerWidth() * 2);\r\n                            sensor.scrollTop(el.outerHeight() * 2);\r\n                        }).each(function () {\r\n                            var sensor = $(this);\r\n                            sensor.scroll(function (e) {\r\n                                var _this = $(this);\r\n                                if ((el.outerWidth() != PD.width || el.outerHeight() != PD.height) && (PD.height != 0 && PD.width != 0)) {\r\n                                    PD.height = el.outerHeight();\r\n                                    PD.width = el.outerWidth()\r\n                                    if (_this.data(\"el\") == \"shrink\") {\r\n                                        mainSensor\r\n                                            .find(\".sensor-element-expand\")\r\n                                            .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2);\r\n\r\n                                    } else if (_this.data(\"el\") == \"expand\") {\r\n                                        mainSensor\r\n                                            .find(\".sensor-element-shrink\")\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2)\r\n                                            .next()\r\n                                            .find(\".sensor-element-expand\")\r\n                                            .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                            .parent()\r\n                                            .scrollLeft(PD.width * 2)\r\n                                            .scrollTop(PD.height * 2);\r\n                                    }\r\n\r\n                                    initHandlers(PD, PDC); // invoke callbacks\r\n                                } else {\r\n                                    PD.height = el.outerHeight();\r\n                                    PD.width = el.outerWidth();\r\n\r\n                                    PDC.height = PD.height;\r\n                                    PDC.width = PD.width;\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    function initHandlers(size, previousSize) {\r\n                        if (callbacks.onResize) {\r\n                            config.onResize.call(config.element, size); // execute resize callback\r\n                        }\r\n\r\n                        if (size.height != previousSize.height && callbacks.onHeightChange) {\r\n                            config.onHeightChange.call(config.element, size); // execute height resize callback\r\n                        } else if (size.width != previousSize.width && callbacks.onWidthChange) {\r\n                            config.onWidthChange.call(config.element, size); // execute width resize callback\r\n                        }\r\n\r\n                        // save new dimention\r\n                        previousSize.height = size.height;\r\n                        previousSize.width = size.width;\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    $.fn.resizeSensor = function (setting) {\r\n\r\n        var resizeSensorCss = 'width:100%;height:100%;position:absolute;left:0;top:0;z-index:-1;',\r\n            sensorCss = 'position:absolute;left:0;top:0;overflow:hidden;height:100%;width:100%;',\r\n            sensorElementCss = 'position:relative;top:0;',\r\n            html = '<div class=\"resize-sensor\" style=\"' + resizeSensorCss + '\"><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"shrink\"><div class=\"sensor-element-shrink\" style=\"' + sensorElementCss + '\"></div></div><div class=\"sensor\" style=\"' + sensorCss + '\" data-el=\"expand\"><div class=\"sensor-element-expand\" style=\"' + sensorElementCss + '\"></div></div></div>',\r\n         defaultConfig = {\r\n             onResize: null, // callback fires after changed size of element :: accepts function\r\n             onHeightChange: null, // callback fires after changed height of element :: accepts function\r\n             onWidthChange: null // callback fires after changed width of element :: accepts function\r\n         };\r\n\r\n        return this.each(function () {\r\n\r\n            var config = $.extend(defaultConfig, setting),\r\n                el = $(this),\r\n                    PD = { height: 0, width: 0 },\r\n                    PDC = { height: 0, width: 0 };\r\n            if (el.length > 0) {\r\n                var mainSensor = $(html);\r\n                if (el.css('position') === 'static') {\r\n                    el.css(\"position\", \"relative\")\r\n                }\r\n                el.append(mainSensor);\r\n\r\n                mainSensor.find(\".sensor\").each(function () {\r\n                    var sensor = $(this);\r\n                    if (sensor.data(\"el\") == \"expand\") {\r\n                        sensor.find(\".sensor-element-expand\")\r\n                            .css({ width: el.outerWidth() * 2, height: el.outerHeight() * 2 });\r\n                    } else if (sensor.data(\"el\") == \"shrink\") {\r\n                        sensor.find(\".sensor-element-shrink\")\r\n                            .css({ width: \"200%\", height: \"200%\" });\r\n                    }\r\n                    sensor.scrollLeft(el.outerWidth() * 2);\r\n                    sensor.scrollTop(el.outerHeight() * 2);\r\n                }).each(function () {\r\n                    var sensor = $(this);\r\n                    sensor.scroll(function (e) {\r\n                        var _this = $(this);\r\n                        if ((el.outerWidth() != PD.width || el.outerHeight() != PD.height) && (PD.height != 0 && PD.width != 0)) {\r\n                            PD.height = el.outerHeight();\r\n                            PD.width = el.outerWidth()\r\n                            if (_this.data(\"el\") == \"shrink\") {\r\n                                mainSensor\r\n                                    .find(\".sensor-element-expand\")\r\n                                    .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2);\r\n\r\n                            } else if (_this.data(\"el\") == \"expand\") {\r\n                                mainSensor\r\n                                    .find(\".sensor-element-shrink\")\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2)\r\n                                    .next()\r\n                                    .find(\".sensor-element-expand\")\r\n                                    .css({ width: PD.width * 2, height: PD.height * 2 })\r\n                                    .parent()\r\n                                    .scrollLeft(PD.width * 2)\r\n                                    .scrollTop(PD.height * 2);\r\n                            }\r\n\r\n                            initHandlers(sensor, PD, PDC); // invoke callbacks\r\n                        } else {\r\n                            PD.height = el.outerHeight();\r\n                            PD.width = el.outerWidth();\r\n\r\n                            PDC.height = PD.height;\r\n                            PDC.width = PD.width;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function initHandlers(sensor, size, previousSize) {\r\n                    if (config.onResize) {\r\n                        config.onResize.call(sensor, size); // execute resize callback\r\n                    }\r\n\r\n                    if (size.height != previousSize.height && config.onHeightChange) {\r\n                        config.onHeightChange.call(sensor, size); // execute height resize callback\r\n                    } else if (size.width != previousSize.width && config.onWidthChange) {\r\n                        config.onWidthChange.call(sensor, size); // execute width resize callback\r\n                    }\r\n\r\n                    // save new dimention\r\n                    previousSize.height = size.height;\r\n                    previousSize.width = size.width;\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    };\r\n})(angular, jQuery);\r\n\n(function (angular) {\r\n    \"use strict\";\r\n    angular.module(\"SMART2\")\r\n        .directive(\"smartRevision\", [\"$timeout\", \"$sce\", \"$translate\", smartRevisionDir]);\r\n\r\n    function smartRevisionDir($timeout, $sce, $translate) {\r\n        return {\r\n            restrict: \"E\",\r\n            replace: true,\r\n            transclude: {\r\n                oldData: \"?span\",\r\n                newData:\"?div\"\r\n            },\r\n            scope: {\r\n                align: \"@\",\r\n                oldData: \"=?\",\r\n                newData: \"=?\",\r\n                label: \"@\",\r\n                type: \"=?\",\r\n                changes: \"@\",\r\n                imgDimention: \"@\",\r\n                treeCallback: \"&\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var value = {\r\n                    image: \"image\",\r\n                    normal: \"normal\",\r\n                    defaultDimention: 150,\r\n                    tree: \"tree\"\r\n                };\r\n                scope.type = scope.type || value.normal;\r\n                scope.align = scope.align ? scope.align : \"left\";\r\n                scope.treemode = attrs.treemode;\r\n                //scope.oldData = scope.oldData ? scope.oldData : attrs.oldData;\r\n                //scope.newData = scope.newData ? scope.newData : attrs.newData;\r\n\r\n                scope.closeButton = { title: $translate.instant(\"closeBtn\") };\r\n\r\n                scope.multiRows = function (data) {\r\n                    var ismultiRows = false;\r\n                    if (data) {\r\n                        var type = data.constructor.toString().match(/function ([A-Za-z]+)/)[1];\r\n                        if (type == \"Array\") {\r\n                            ismultiRows = true;\r\n                        }\r\n                    }\r\n                    return ismultiRows;\r\n                }(scope.oldData || scope.newData);\r\n                if (!scope.oldData && !scope.newData) { // for transclude element\r\n                    scope.transclude = true;\r\n                    $timeout(function () {\r\n                        element\r\n                            .find(\"[old-data]\")\r\n                            .addClass(\"revision-old-val\")\r\n                            .wrap(\"<span>\")\r\n                            .parent()\r\n                            .addClass(\"revision-old-data\");\r\n                        element\r\n                            .find(\"[new-data]\")\r\n                            .wrap(\"<span>\")\r\n                            .parent()\r\n                            .addClass(\"revision-new-data\");\r\n                    });\r\n                } else if (scope.oldData && scope.newData) {\r\n                    scope.isChanged = true;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.oldDataHtml = $sce.trustAsHtml(scope.oldData);\r\n                        scope.newDataHtml = $sce.trustAsHtml(scope.newData);\r\n                    }\r\n                } else if (scope.oldData && !scope.newData) {\r\n                    scope.isChanged = false;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.oldDataHtml = $sce.trustAsHtml(scope.oldData);\r\n                    }\r\n                } else if (!scope.oldData && scope.newData) {\r\n                    scope.isChanged = true;\r\n                    if (scope.type !== \"tree\") {\r\n                        scope.newDataHtml = $sce.trustAsHtml(scope.newData);\r\n                    }\r\n                }\r\n                if (scope.type == value.image) {\r\n                    if (scope.imgDimention) {\r\n                        scope.diagonal = {}\r\n                    } else {\r\n                        var diagonalWidth = calculateRectdiagonal(value.defaultDimention, value.defaultDimention);\r\n                        scope.diagonal = {\r\n                            width: diagonalWidth,\r\n                            left: -(diagonalWidth / 2 - value.defaultDimention / 2)\r\n                        }\r\n                    }\r\n                } else if (scope.type == value.tree) {\r\n                    scope.popup = {\r\n                        url: \"shared/directives/smartRevision/treeviewChanges.html\",\r\n                        show: false,\r\n                        callback: function (a) {\r\n                            scope.popup.show = false;\r\n                            if (attrs.treeCallback) {\r\n                                scope.treeCallback({\r\n                                    data: {\r\n                                        'oldData': scope.oldData,\r\n                                        'newData': scope.newData,\r\n                                        'type': 'close',\r\n                                        'label': scope.label\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                scope.treeChange = function () {\r\n                    if (attrs.treeCallback) {\r\n                        scope.treeCallback({\r\n                            data: {\r\n                                'oldData': scope.oldData,\r\n                                'newData': scope.newData,\r\n                                'type': 'open',\r\n                                'label': scope.label\r\n                            }\r\n                        });\r\n                    }\r\n                    scope.popup.show = true;\r\n                }\r\n            },\r\n            templateUrl: \"shared/directives/smartRevision/smartRevisionTemplate.html\"\r\n        }\r\n    }\r\n    function calculateRectdiagonal(w, h) {\r\n        return Math.sqrt(w * w + h * h);\r\n    }\r\n    function checkJson(a) {\r\n        if (a) {\r\n            try{\r\n                a = JSON.parse(a);\r\n            }catch(e){}\r\n        }\r\n\r\n        return a;\r\n    }\r\n})(angular);\n(function() {\r\n    'use strict';\r\n    angular.module('SMART2')\r\n        .directive('smartSavedViewPopup', ['notification', 'cacheHelperService', 'smartSavedViewPopupCollection', '$translate', smartSavedViewPopupFunc])\r\n        .service(\"smartSavedViewPopupCollection\", function () {\r\n            this.collection = [];\r\n            this.set = function (x) {\r\n                this.collection.push(x);\r\n            }\r\n            this.get = function (x) {\r\n                return this.collection;\r\n            }\r\n        });\r\n\r\n    function smartSavedViewPopupFunc(notification, cacheHelperService, smartSavedViewPopupCollection, $translate) {\r\n        return {\r\n            restrict: 'E',\r\n            transclude: true,\r\n            scope: {\r\n                show: '=',\r\n                hide: '&',\r\n                loader: '=',\r\n                model: '=ngModel',\r\n                config: '=',\r\n                isApplyFilters: \"=\",\r\n                isSavedView: \"=\",\r\n                isSavedViewModified: \"=\",\r\n                openPopupSavedView: \"=\",\r\n                api: \"=\",\r\n                setTitle: '@',\r\n                callbackFunc: \"&\"\r\n            },\r\n            controller: [\"$scope\", \"$http\", \"$timeout\", \"smartSavedViewPopupCollection\", function ($scope, $http, $timeout, smartSavedViewPopupCollection) {\r\n                //  $scope.collection = smartSavedViewPopupCollection.get(\"all\").length;\r\n                smartSavedViewPopupCollection.set($scope);\r\n                $scope.popupInc = smartSavedViewPopupCollection.get().length;\r\n                \r\n                $scope.disableDoneButton = true;\r\n                $scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n                $scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                $scope.uncheckMarkAsDefault;\r\n                /*for Done button disabled*/\r\n                var handleDoneButtonVisibility = function () {\r\n                    var isDefaultSelected = _.find($scope.config, { \"isDefault\": true });\r\n                    if (isDefaultSelected) {\r\n                        $scope.disableDoneButton = false;\r\n                    } else {\r\n                        $scope.disableDoneButton = true;\r\n                    }\r\n                }\r\n                handleDoneButtonVisibility();\r\n                $scope.defaultCheckUncheck = true;\r\n                var handleMarkAsDefault = function () {\r\n                    $scope.isMarkAsDefault.check = false;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].isDefault && $scope.config[i].isDefaultTxt) {\r\n                            $scope.isMarkAsDefault.check = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                $scope.setDefaultFiler = function (isDefaultTrue) {\r\n                    $scope.defaultCheckUncheck = true;\r\n                    if (isDefaultTrue) {\r\n                        $scope.uncheckMarkAsDefault = false;\r\n                    } else {\r\n                        $scope.uncheckMarkAsDefault = true;\r\n                    }\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].isDefault && $scope.config[i].isDefaultTxt) {\r\n                            $scope.defaultCheckUncheck = isDefaultTrue;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                $scope.showSavedViewPopup = true;\r\n                $scope.showSaveView = true;\r\n                $scope.radioChangeCallback = function (index, currentItem) {\r\n                    var view = _.find($scope.config, { \"index\": $scope.model.name });\r\n                    if (!view) {\r\n                        view = _.find($scope.config, { \"index\": $scope.model.index });\r\n                    }\r\n                    $scope.selectedFilter = view;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        $scope.config[i].isDefault = false;\r\n                    }\r\n                    \r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if (currentItem) {\r\n                            if ($scope.config[i].index === currentItem.index) {\r\n                                $scope.config[i].isDefault = true;\r\n                            }\r\n                        } else {\r\n                            if ($scope.config[i].index === (view && view.index)) {\r\n                                $scope.config[i].isDefault = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    handleDoneButtonVisibility();\r\n                    handleMarkAsDefault();\r\n                }\r\n                $scope.currentDefault;\r\n                $scope.showSavedView = function () {\r\n                    $scope.currentDefault = _.find($scope.config, { \"isDefaultTxt\": true });\r\n                    var currentCheck = $scope.defaultCheckUncheck;\r\n                    $scope.isSavedView = true;\r\n                    $scope.isSavedFilter = true;\r\n                    if ($scope.uncheckMarkAsDefault && $scope.uncheckMarkAsDefault != undefined) {\r\n                        for (var i = 0; i < $scope.config.length; i++) {\r\n                            $scope.config[i].isDefaultTxt = false;\r\n                        }\r\n                    }\r\n                    $scope.uncheckMarkAsDefault = false;\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.isMarkAsDefault.check == true) {\r\n                            $scope.config[i].isDefaultTxt = false;\r\n                            if ($scope.config[i].isDefault == true) {\r\n                                $scope.config[i].isDefaultTxt = true;\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!$scope.selectedFilter.name) {\r\n                        $scope.selectedFilter.name = $scope.api.currentViewApplied.name;\r\n                    }\r\n                    if ($scope.api) {\r\n                        $scope.api.currentViewApplied = _.find($scope.config, { index: $scope.selectedFilter.index });\r\n                        if ($scope.api.currentViewApplied == null) {\r\n                            cacheHelperService.setFilterDef('{\"defaultFilterType\":3,\"filters\":[]}');\r\n                        }\r\n                        if ($scope.api.currentViewApplied != undefined) {\r\n                            cacheHelperService.setFilterDef($scope.api.currentViewApplied.Filters);\r\n                        }\r\n                        $scope.api.selectedSavedview = { \"name\": $scope.selectedFilter.name };\r\n                        $scope.api.selectedFilterView = { \"name\": $scope.selectedFilter.name };\r\n                        if ($scope.currentDefault != undefined) {\r\n                            if ($scope.currentDefault.index != $scope.api.currentViewApplied.index) {\r\n                                $scope.currentDefault.isDefault = currentCheck;\r\n                                SaveResetOrMarkAsDefault($scope.currentDefault);\r\n                            }\r\n                        }\r\n                        if ($scope.isMarkAsDefault.check == true) {\r\n                            $scope.api.currentViewApplied.isDefault = true;\r\n                            SaveResetOrMarkAsDefault($scope.api.currentViewApplied);\r\n                            $scope.isMarkAsDefault.check = false;\r\n                        } else {\r\n                            $scope.api.currentViewApplied.isDefault = false;\r\n                            SaveResetOrMarkAsDefault($scope.api.currentViewApplied);\r\n                        }\r\n                        if($scope.setTitle != \"SAVED FILTERS\")\r\n                            $scope.api.applyViewOnGrid();\r\n                    }\r\n                    $scope.callbackFunc({\r\n                        e: {\r\n                            'model': $scope.selectedFilter,\r\n                            'currOperation': 'applyFilter'\r\n                        }\r\n                    });\r\n\r\n                };\r\n\r\n                $scope.Reset = function() {\r\n                    var sysDefault = _.find($scope.config, { IsSystemDefault: true });\r\n                    sysDefault.isDefault = true;\r\n                    $scope.api.currentViewApplied = sysDefault;\r\n                    var req = {\r\n                        method: 'POST',\r\n                        url: $scope.api.UpdateSavedViewURL,\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        }\r\n                    };\r\n                    _.each($scope.config, function(n) {\r\n                        if (!n.IsSystemDefault) {\r\n                            if (n.isDefault) {\r\n                                req.data = n;\r\n                                $http(req).then(function(response) {}).catch(function (errorCallback) {\r\n                                    console.log(errorCallback.statusText);\r\n                                });\r\n                            }\r\n                            n.isDefault = false;\r\n                        }\r\n                    })\r\n                    if($scope.setTitle != \"SAVED FILTERS\")\r\n                        $scope.api.applyViewOnGrid();\r\n                };\r\n\r\n                $scope.isMarkAsDefault = { 'check': false };\r\n                $scope.SystemAsDefault = { 'check': false };\r\n                $scope.showSavedViewPopup = false;\r\n                $scope.showSaveView = false;\r\n                $scope.focusSearch = false;\r\n                $scope.isActive = false;\r\n                $scope.showMe = false;\r\n\r\n                $scope.showSearch = function() {\r\n                    $scope.isActive = true;\r\n                    $scope.focusSearch = true;\r\n                    $scope.showMe = true;\r\n                    $scope.hideClose = true;\r\n                }\r\n\r\n                $scope.hideSearch = function() {\r\n                    $scope.isActive = false;\r\n                    $scope.focusSearch = false;\r\n                    $scope.hideClose = false;\r\n                }\r\n\r\n                var msg = {\r\n                    type: \"inform\",\r\n                    buttons: [{\r\n                        \"title\": $translate.instant('notificationButtonOk'),\r\n                        \"result\": \"true\"\r\n                    }]\r\n                }\r\n\r\n                $scope.deleteItem = function(index, currentItem, currOperation) {\r\n                    if (currentItem.IsSystemDefault && $scope.setTitle != \"SAVED FILTERS\") {\r\n                        msg.message = $translate.instant('deleteSystemDefaultMsg');\r\n                        notification.notify(msg, function(result) {});\r\n                    } else if (currentItem.isDefault == true && $scope.setTitle != \"SAVED FILTERS\") {\r\n                        msg.message = \"You can not delete a saved view when it is marked as default.\";\r\n                        notification.notify(msg, function(result) {});\r\n                    } else {\r\n                        var config = {\r\n                            type: \"warning\",\r\n                            message: $translate.instant('deleteMessage'),\r\n                            buttons: [{\r\n                                \"title\": $translate.instant('notificationButtonYes'),\r\n                                \"result\": \"true\"\r\n                            }, {\r\n                                \"title\": $translate.instant('notificationButtonNo'),\r\n                                \"result\": \"false\"\r\n                            }]\r\n                        };\r\n                        var alterView = cacheHelperService.getDefaultSavedView($scope.config, false) || cacheHelperService.getDefaultSavedView($scope.config, true);\r\n                        notification.notify(config, function(result) {\r\n                            if (result.result == \"true\") {\r\n                                var deletedView;\r\n                                for (var i = 0; i < $scope.config.length; i++) {\r\n                                    if ($scope.config[i].index === currentItem.index) {\r\n                                        deletedView = $scope.config.splice(i, 1);\r\n                                    }\r\n                                }\r\n\r\n                                handleDoneButtonVisibility();\r\n                                handleMarkAsDefault();\r\n                                $scope.callbackFunc({\r\n                                    e: {\r\n                                        'index': currentItem.index,\r\n                                        'currentItem': currentItem,\r\n                                        'currOperation': currOperation\r\n                                    }\r\n                                });\r\n                                var req = {\r\n                                    method: 'DELETE',\r\n                                    url: $scope.api.deleteSavedViewURL,\r\n                                    data: { \"data\": { \"savedViewId\": deletedView[0].ViewId } },\r\n                                    headers: {\r\n                                        \"Content-Type\": \"application/json\"\r\n                                    }\r\n                                };\r\n                                $http(req).then(function(response) {\r\n                                    if (response.data != null) {\r\n                                        if(alterView){\r\n                                            $scope.api.currentViewApplied = alterView;\r\n                                            $scope.selectedFilter.name = alterView.name;\r\n                                            $scope.api.applyViewOnGrid();\r\n                                            console.log(\"Saved View Deleted\");\r\n                                        }\r\n                                    }\r\n                                }).catch(function(errorCallback) {\r\n                                    console.log(errorCallback.statusText);\r\n                                });\r\n                            }\r\n\r\n                        });\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.showEditor = false;\r\n\r\n                $scope.editCurrentViewName = function (index, currentItem) {\r\n                    var _this = $scope;\r\n                    angular.forEach(_this.config, function (key, value) {\r\n                        if (_this.config[value].showCurrentItemEditor == true) {\r\n                            _this.config[value].showCurrentItemEditor = false;\r\n                        }\r\n                    });\r\n                    if (!currentItem.IsSystemDefault) {\r\n                        //$scope.config[index].showCurrentItemEditor = true;\r\n                        //$scope.getEditedviewName.name = $scope.config[index].name;\r\n\r\n                        for (var i = 0; i < _this.config.length; i++) {\r\n                            if (_this.config[i].index === currentItem.index) {\r\n                                _this.config[i].showCurrentItemEditor = true;\r\n                            }\r\n                        }\r\n                        _this.getEditedviewName.name = currentItem.name;\r\n                    } else {\r\n                        msg.message = $translate.instant('renameSystemDefaultMsg');\r\n                        notification.notify(msg, function(result) {});\r\n                    }\r\n                    $timeout(function() {\r\n                        _this.getEditedviewName.isFocus = true;\r\n                    }, 900);\r\n                }\r\n\r\n                $scope.getEditedviewName = { \"name\": \"\", isFocus: false };\r\n\r\n                $scope.updateViewName = function (index, currentItem, currOperation) {\r\n                    $scope.closeEditPanel(index, currentItem);\r\n                    $scope.callbackFunc({\r\n                        e: {\r\n                            'index': currentItem.index,\r\n                            'currentItem': currentItem,\r\n                            'currOperation': currOperation,\r\n                            'editedName': $scope.getEditedviewName.name\r\n                        }\r\n                    });\r\n                    if ($scope.getEditedviewName.name.length == 0) {\r\n                        keepPopupOpen();\r\n                        return false;\r\n                    }\r\n                    var duplicateItem = $scope.config.filter(function(view) {\r\n                        return (view.name === $scope.getEditedviewName.name && view.ViewId !== $scope.config[index].ViewId)\r\n                    });\r\n                    if (duplicateItem.length != 0) {\r\n                        showAlertMessage($scope.api.duplicateErrorMessage);\r\n                    } else if (greaterThanMaxCharacterLength($scope.getEditedviewName.name)) {\r\n                        showAlertMessage($scope.api.maxCharacterLength);\r\n                    } else {\r\n                        $scope.config[currentItem.index].name = $scope.getEditedviewName.name;\r\n                        $scope.config[currentItem.index].showCurrentItemEditor = false;\r\n                        var obj = {\r\n                            'ViewName': $scope.config[currentItem.index].name || $scope.config[currentItem.index].ViewName,\r\n                            'IsDefaultView': $scope.config[currentItem.index].isDefault,\r\n                            'IsSystemDefault': $scope.config[currentItem.index].IsSystemDefault,\r\n                            'SortColumn': $scope.config[currentItem.index].SortColumn,\r\n                            'SortOrder': $scope.config[currentItem.index].SortOrder,\r\n                            'ViewId': $scope.config[currentItem.index].ViewId,\r\n                            'GroupColumn': $scope.config[currentItem.index].GroupColumn,\r\n                            'Filters': $scope.config[currentItem.index].Filters,\r\n                            'DocumentTypeCode': $scope.config[currentItem.index].DocumentTypeCode,\r\n                            'ContactCode': $scope.config[currentItem.index].ContactCode,\r\n                            'ColumnList': $scope.config[currentItem.index].ColumnList\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.UpdateSavedViewURL,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n                        $http(req).then(function(response) {\r\n                            if (response.data != null) {\r\n                                console.log($scope.api.updateMessage);\r\n                            }\r\n                        }).catch(function(errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.closeEditPanel = function (index, currentItem) {\r\n                    for (var i = 0; i < $scope.config.length; i++) {\r\n                        if ($scope.config[i].index === currentItem.index) {\r\n                            $scope.config[i].showCurrentItemEditor = false;\r\n                        }\r\n                    }\r\n                    currentItem.validate = false;\r\n                };\r\n\r\n                $scope.viewObject = {};\r\n                $scope.viewObject.SaveViewName = \"\";\r\n\r\n                $scope.saveCurrentView = function(passData) {\r\n                    if (passData != '') {\r\n                        if (isNameDuplicate(passData)) {\r\n                            showAlertMessage($scope.api.duplicateErrorMessage);\r\n                        } else if (greaterThanMaxCharacterLength(passData)) {\r\n                            showAlertMessage($scope.api.maxCharacterLength);\r\n                        } else {\r\n                            $scope.isApplyFilters = false;\r\n\r\n                            $scope.model = { 'name': passData, 'isDefault': false, 'showCurrentItemEditor': false };\r\n\r\n                            var req = {\r\n                                method: 'POST',\r\n                                url: $scope.api.insertSavedViewURL,\r\n                                data: {\r\n                                    \"ViewId\": 0,\r\n                                    \"ViewName\": passData,\r\n                                    \"ContactCode\": $scope.api.contactCode,\r\n                                    \"ColumnList\": cacheHelperService.getColDef() || \"\",\r\n                                    \"Filters\": cacheHelperService.getFilterDef() || \"\",\r\n                                    \"SortColumn\": \"NeedByDate\",\r\n                                    \"SortOrder\": \"Ascending\",\r\n                                    \"GroupColumn\": cacheHelperService.getGroupDef() || \"\",\r\n                                    \"IsDefaultView\": false,\r\n                                    \"IsSystemDefault\": false,\r\n                                    \"DocumentTypeCode\": $scope.api.documentTypeCode\r\n                                },\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                }\r\n                            };\r\n                            $http(req).then(function(response) {\r\n                                if (response.data != null) {\r\n                                    $scope.isSavedView = true;\r\n                                    $scope.config.push({\r\n                                        \"ViewId\": response.data,\r\n                                        \"ViewName\": passData,\r\n                                        \"ContactCode\": $scope.api.contactCode,\r\n                                        \"ColumnList\": cacheHelperService.getColDef() || \"\",\r\n                                        \"Filters\": cacheHelperService.getFilterDef() || \"\",\r\n                                        \"SortColumn\": \"NeedByDate\",\r\n                                        \"SortOrder\": \"Ascending\",\r\n                                        \"GroupColumn\": cacheHelperService.getGroupDef() || \"\",\r\n                                        \"IsDefaultView\": false,\r\n                                        \"IsSystemDefault\": false,\r\n                                        \"DocumentTypeCode\": $scope.api.documentTypeCode,\r\n                                        \"showCurrentItemEditor\": false,\r\n                                        \"name\": passData,\r\n                                        \"isDefault\": false\r\n                                    });\r\n                                    $scope.api.currentViewApplied = _.find($scope.config, { name: $scope.selectedFilter.name });\r\n                                    console.log(\"Saved View Created\");\r\n                                }\r\n                            }).catch(function(errorCallback) {\r\n                                console.log(errorCallback.statusText);\r\n                            });\r\n                            $scope.isSavedFilter = true;\r\n                            $scope.viewObject.SaveViewName = '';\r\n\r\n\r\n                        }\r\n                    } else {\r\n                        keepPopupOpen();\r\n                    }\r\n                }\r\n\r\n                function keepPopupOpen(e) {\r\n                    if (!e) {\r\n                        var e = window.event;\r\n                    }\r\n                    e.cancelBubble = true;\r\n                    if (e.stopPropagation) {\r\n                        e.stopPropagation();\r\n                    }\r\n                }\r\n\r\n                function isNameDuplicate(editedSavedName) {\r\n                    var duplicateName = \"\";\r\n                    duplicateName = _.find($scope.config, { name: editedSavedName });\r\n                    if (typeof duplicateName === 'undefined') {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                function greaterThanMaxCharacterLength(editedSavedName) {\r\n                    if (editedSavedName.length > $scope.api.viewNameLength) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                function showAlertMessage(alertMessage) {\r\n                    notification.notify(alertMessage, function(result) { });\r\n                }\r\n                $scope.$watch('show', function(n, o) {\r\n                    angular.forEach($scope.config, function(key, value) {\r\n                        if ($scope.config[value].showCurrentItemEditor == true) {\r\n                            $scope.config[value].showCurrentItemEditor = false;\r\n                        }\r\n                    }); //clearing if anything in edit state\r\n                    if ($scope.openPopupSavedView == true && n == true) {\r\n                        $scope.showPopUp = true;\r\n                        $scope.showSavedViewPopup = true;\r\n                        $scope.showSaveView = false;\r\n                        $scope.hideSearch();\r\n                    } else if ($scope.openPopupSavedView != true && n == true) {\r\n                        $scope.showSavedViewPopup = false;\r\n                        $scope.showSaveView = true;\r\n                    } else {\r\n                        $scope.showSavedViewPopup = false;\r\n                        $scope.showSaveView = false;\r\n                        $scope.show = false;\r\n                        $scope.showPopUp = false;\r\n                    }\r\n                    $timeout(function () {\r\n                        angular.element('.searchWithHiddenTextField input').blur();\r\n                        angular.element('.savedFiltersPopUpLists').find(angular.element('input[checked=\"checked\"]')).prop('checked', true);\r\n                    }, 1000);\r\n                    $scope.radioChangeCallback();\r\n                });\r\n\r\n\r\n                $scope.loaderFlag = {\r\n                    plain: true,\r\n                    message: $translate.instant('loadingMsg'),\r\n                    center: true\r\n                };\r\n\r\n                $scope.$watch('setTitle', function (value) {\r\n                    if (value == 'SAVED FILTERS') {\r\n                        $scope.title = $translate.instant('savedFilters');\r\n                    }\r\n                    if (value == 'SAVED VIEWS') {\r\n                        $scope.title = $translate.instant('savedViews');\r\n                    }\r\n                    \r\n                });\r\n\r\n                function SaveResetOrMarkAsDefault(currentViewApplied) {\r\n                    if ($scope.setTitle == \"SAVED FILTERS\") {\r\n                        console.log(currentViewApplied);\r\n\r\n                        var obj =\r\n                        {\r\n                            \"rowKey\": currentViewApplied.rowKey,\r\n                            \"moduleName\": currentViewApplied.module,\r\n                            \"removeDefaultFilter\": currentViewApplied.isDefault ? false : true\r\n\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.MarkasDefault,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n\r\n                        $http(req).then(function (response) {\r\n                            if (response.data != null) {\r\n\r\n                                /*if (currentViewApplied.isDefault) {\r\n                                    for (var i = 0; i < $scope.config.length; i++) {\r\n                                        if ($scope.config[i].rowKey != currentViewApplied.rowKey && $scope.config[i].isDefault) {\r\n                                            $scope.config[i].isDefault = false; \r\n                                        }\r\n                                    }\r\n                                }*/\r\n\r\n                                var view = _.find($scope.config, { \"name\": $scope.selectedFilter.name || $scope.api.currentViewApplied.name });\r\n                                if (view) {\r\n                                    if (view.isDefault) {\r\n                                        $scope.isMarkAsDefault.check = true;\r\n                                    } else {\r\n                                        $scope.isMarkAsDefault.check = false;\r\n                                    }\r\n                                }\r\n\r\n                                for (var i = 0; i < $scope.config.length; i++) {\r\n                                    $scope.config[i].isDefault = false;\r\n                                }\r\n\r\n                                view.isDefault = true;\r\n                            }\r\n                        }).catch(function (errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n\r\n                    } else {\r\n                        var obj = {\r\n                            \"ViewId\": currentViewApplied.ViewId,\r\n                            \"ViewName\": currentViewApplied.name,\r\n                            \"ContactCode\": currentViewApplied.ContactCode,\r\n                            \"ColumnList\": currentViewApplied.ColumnList,\r\n                            \"Filters\": currentViewApplied.Filters,\r\n                            \"SortColumn\": \"NeedByDate\",\r\n                            \"SortOrder\": \"Ascending\",\r\n                            \"GroupColumn\": currentViewApplied.GroupColumn,\r\n                            \"IsDefaultView\": currentViewApplied.isDefault,\r\n                            \"IsSystemDefault\": currentViewApplied.IsSystemDefault,\r\n                            \"DocumentTypeCode\": currentViewApplied.DocumentTypeCode\r\n                        };\r\n                        var req = {\r\n                            method: 'POST',\r\n                            url: $scope.api.UpdateSavedViewURL,\r\n                            data: obj,\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        };\r\n                        $http(req).then(function(response) {\r\n                            if (response.data != null) {\r\n                                console.log($scope.api.updateMessage);\r\n                                if (currentViewApplied.isDefault) {\r\n                                    for (var i = 0; i < $scope.config.length; i++) {\r\n                                        if ($scope.config[i].ViewId != currentViewApplied.ViewId && $scope.config[i].isDefault) {\r\n                                            $scope.config[i].isDefault = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }).catch(function(errorCallback) {\r\n                            console.log(errorCallback.statusText);\r\n                        });\r\n                    }\r\n                }\r\n                $scope.search_data = $scope.config;\r\n                var b = [];\r\n                $scope.search_savedpopup = function(e) {\r\n                    $scope.config = [];\r\n\r\n                    if (e.data[0].value != null && e.data[0].value != \"\") {\r\n\r\n                        b = [];\r\n                        for (var i = 0; i < $scope.search_data.length; i++) {\r\n                            var lowerStr = ($scope.search_data[i].name + \"\").toLowerCase();\r\n                            var s = lowerStr.indexOf(e.data[0].value.toLowerCase()) === 0;\r\n                            if (s) {\r\n                                if (b.indexOf($scope.search_data[i].name) == -1) {\r\n                                    b.push({ 'name': $scope.search_data[i].name, 'isDefault': $scope.search_data[i].isDefault, 'showCurrentItemEditor': $scope.search_data[i].showCurrentItemEditor });\r\n                                }\r\n                            }\r\n                        }\r\n                        $scope.config = b;\r\n                    } else {\r\n                        b = [];\r\n                        $scope.config = $scope.search_data;\r\n                    }\r\n                }\r\n\r\n                $scope.onHide = function() {\r\n                    $scope.viewObject.SaveViewName = '';\r\n                    $scope.hide();\r\n                };\r\n\r\n            }],\r\n            templateUrl: 'shared/directives/smartSavedViewPopup/smartSavedViewPopupTemplate.html'\r\n        };\r\n    }\r\n})();\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartSearch', ['httpService', '$timeout', 'APPCONSTANTS', '$translate', function (httpService, $timeout, APPCONSTANTS, $translate) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            transclude: true,\n            scope: {\r\n                type: '@'\r\n            },\n            link: function (scope, element, attrs) {\r\n                var scopeValues = { \"RFX\": { \"value\": \"0\", \"string\": \"RFX\", \"SubAppCodes\": 103 }, \"RFP\": { \"value\": \"1\", \"string\": \"RFP\", \"SubAppCodes\": 103 }, \"RFQ\": { \"value\": \"2\", \"string\": \"RFQ\", \"SubAppCodes\": 103 }, \"RFI\": { \"value\": \"3\", \"string\": \"RFI\", \"SubAppCodes\": 103 }, \"Auction\": { \"value\": \"4\", \"string\": \"Auction\", \"SubAppCodes\": 103 }, \"Contract\": { \"value\": \"5\", \"string\": \"Contract\", \"SubAppCodes\": 104 }, \"Catalog\": { \"value\": \"6\", \"string\": \"Catalog\", \"SubAppCodes\": 108 }, \"Requisition\": { \"value\": \"7\", \"string\": \"Requisition\", \"SubAppCodes\": 107 }, \"PO\": { \"value\": \"8\", \"string\": \"PO\", \"SubAppCodes\": 107 }, \"Order\": { \"value\": \"8\", \"string\": \"Order\", \"SubAppCodes\": 107 }, \"Invoice\": { \"value\": \"9\", \"string\": \"Invoice\", \"SubAppCodes\": 107 }, \"Receipts\": { \"value\": \"10\", \"string\": \"Receipt\", \"SubAppCodes\": 107 }, \"Forms\": { \"value\": \"11\", \"string\": \"Forms\", \"SubAppCodes\": 105 }, \"Scorecards\": { \"value\": \"12\", \"string\": \"Scorecards\", \"SubAppCodes\": 105 }, \"Workbench\": { \"value\": \"13\", \"string\": \"Workbench\", \"SubAppCodes\": 110 }, \"InvoiceReconciliation\": { \"value\": \"14\", \"string\": \"InvoiceReconciliation\", \"SubAppCodes\": 107 }, \"Items\": { \"value\": \"20\", \"string\": \"Items\" }, \"Templates\": { \"value\": \"15\", \"string\": \"Templates\", \"SubAppCodes\": 111 }, \"Partners\": { \"value\": \"19\", \"string\": \"Partners\", \"SubAppCodes\": 105 }, \"ContractRequest\": { \"value\": \"16\", \"string\": \"ContractRequest\" }, \"RFxRequest\": { \"value\": \"17\", \"string\": \"RFxRequest\" }, \"AuctionRequest\": { \"value\": \"18\", \"string\": \"AuctionRequest\" }, \"PaymentRequest\": { \"value\": \"27\", \"string\": \"PaymentRequest\" }, \"Project\": { \"value\": \"21\", \"string\": \"Project\", \"SubAppCodes\": 113 }, \"CreditMemo\": { \"value\": \"22\", \"string\": \"CreditMemo\", \"SubAppCodes\": 107 }, \"ReturnNote\": { \"value\": \"20\", \"string\": \"ReturnNote\", \"SubAppCodes\": 107 }, \"ActionPlan\": { \"value\": \"23\", \"string\": \"ActionPlan\", \"SubAppCodes\": 105 }, \"Blanket\": { \"value\": \"30\", \"string\": \"Blanket\", \"SubAppCodes\": 104 }, \"CategoryWorkbench\": { \"value\": \"28\", \"string\": \"CategoryWorkbench\", \"SubAppCodes\": 116 }, \"ProjectDashboard\": { \"value\": \"101\", \"string\": \"ProjectDashboard\", \"SubAppCodes\": 113 } };\r\n\r\n                /*\r\n                 *  Get current module scope\r\n                 */\r\n                var getCurrentModuleScope = function () {\r\n                    var selectedModules = scope.selectedModule.FilterKey.split(',');\r\n                    var moduleScopeString = \"\";\r\n\r\n                    for (var i = 0; i < selectedModules.length; i++) {\r\n                        switch (selectedModules[i]) {\r\n                            case (scopeValues.RFI.value):\r\n                                moduleScopeString += scopeValues.RFI.string + \",\";\r\n                                break;\r\n                            case (scopeValues.RFP.value):\r\n                                moduleScopeString += scopeValues.RFP.string + \",\";\r\n                                break;\r\n                            case (scopeValues.RFQ.value):\r\n                                moduleScopeString += scopeValues.RFQ.string + \",\";\r\n                                break;\r\n                            case (scopeValues.Auction.value):\r\n                                moduleScopeString += scopeValues.Auction.string + \",\";\r\n                                break;\r\n                            case scopeValues.Workbench.value:\r\n                                moduleScopeString += scopeValues.Workbench.string + \",\";\r\n                                break;\r\n                            case scopeValues.Contract.value:\r\n                                moduleScopeString += scopeValues.Contract.string + \",\";\r\n                                break;\r\n                            case scopeValues.Scorecards.value:\r\n                                moduleScopeString += scopeValues.Scorecards.string + \",\";\r\n                                break;\r\n                            case scopeValues.Forms.value:\r\n                                moduleScopeString += scopeValues.Forms.string + \",\";\r\n                                break;\r\n                            case scopeValues.Requisition.value:\r\n                                moduleScopeString += scopeValues.Requisition.string + \",\";\r\n                                break;\r\n                            case scopeValues.Order.value:\r\n                                moduleScopeString += scopeValues.Order.string + \",\";\r\n                                break;\r\n                            case scopeValues.Invoice.value:\r\n                                moduleScopeString += scopeValues.Invoice.string + \",\";\r\n                                break;\r\n                            case scopeValues.InvoiceReconciliation.value:\r\n                                moduleScopeString += scopeValues.InvoiceReconciliation.string + \",\";\r\n                                break;\r\n                            case scopeValues.Receipts.value:\r\n                                moduleScopeString += scopeValues.Receipts.string + \",\";\r\n                                break;\r\n                            case scopeValues.AuctionRequest.value:\r\n                                moduleScopeString += scopeValues.AuctionRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.RFxRequest.value:\r\n                                moduleScopeString += scopeValues.RFxRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.ContractRequest.value:\r\n                                moduleScopeString += scopeValues.ContractRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.PaymentRequest.value:\r\n                                moduleScopeString += scopeValues.PaymentRequest.string + \",\";\r\n                                break;\r\n                            case scopeValues.Partners.value:\r\n                                moduleScopeString += scopeValues.Partners.string + \",\";\r\n                                break;\r\n                            case scopeValues.Templates.value:\r\n                                moduleScopeString += scopeValues.Templates.string + \",\";\r\n                                break;\r\n                            case scopeValues.Catalog.value:\r\n                                moduleScopeString += scopeValues.Catalog.string + \",\";\r\n                                break;\r\n                                //PPST\r\n                            case scopeValues.Project.value:\r\n                                moduleScopeString += scopeValues.Project.string + \",\";\r\n                                break;\r\n                            case scopeValues.CreditMemo.value:\r\n                                moduleScopeString += scopeValues.CreditMemo.string + \",\";\r\n                                break;\r\n                            case scopeValues.ReturnNote.value:\r\n                                moduleScopeString += scopeValues.ReturnNote.string + \",\";\r\n                                break;\r\n                            case scopeValues.ActionPlan.value:\r\n                                moduleScopeString += scopeValues.ActionPlan.string + \",\";\r\n                                break;\r\n                            case scopeValues.Blanket.value:\r\n                                moduleScopeString += scopeValues.Blanket.string + \",\";\r\n                                break;\r\n                            case scopeValues.CategoryWorkbench.value:\r\n                                moduleScopeString += scopeValues.CategoryWorkbench.string + \",\";\r\n                                break;\r\n                            case scopeValues.ProjectDashboard.value:\r\n                                moduleScopeString += scopeValues.ProjectDashboard.string + \",\";\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    //if ModuleScope is 'RFI,RFQ & RFP' than it should be RFx\r\n                    if ((moduleScopeString.indexOf(scopeValues.RFI.string) !== -1) ||\r\n                        (moduleScopeString.indexOf(scopeValues.RFP.string) !== -1) ||\r\n                        (moduleScopeString.indexOf(scopeValues.RFQ.string) !== -1)) {\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFI.string + \",\", '');\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFP.string + \",\", '');\r\n                        moduleScopeString = moduleScopeString.replace(scopeValues.RFQ.string + \",\", '');\r\n                        moduleScopeString += scopeValues.RFX.string;\r\n                    }\r\n\r\n                    // Remove last comma from modulescopestring\r\n                    var lastChar = moduleScopeString.slice(-1);\r\n                    if (lastChar == ',') {\r\n                        moduleScopeString = moduleScopeString.slice(0, -1);\r\n                    }\r\n\r\n                    return moduleScopeString;\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Get search navigation url\r\n                 */\r\n                scope.getSearchNavigateURL = function (moduleScope, fieldKey) {\r\n                    var redirectURL = generateUrl(moduleScope);\r\n                    if (fieldKey) {\r\n                        redirectURL += \"&fieldkey=\" + fieldKey;\r\n                    }\r\n                    return redirectURL;\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Get scope from module type\r\n                 */\r\n                var getScopeFromModuleType = function (moduleType) {\r\n                    var scope = '';\r\n                    var array = $.makeArray(\"16,17,18,27\".split(','), moduleType.split(',')[0]);\r\n\r\n                    if (moduleType == \"1,2,3\") {\r\n                        scope = scopeValues.RFX.string.toLowerCase();\r\n                    }\r\n                    else if (array == \"16\" || array == \"17\" || array == \"18\" || array == \"27\") {\r\n                        scope = \"request\";\r\n                    }\r\n                    else {\r\n                        for (var key in scopeValues) {\r\n                            if (scopeValues[key].value == moduleType) {\r\n                                scope = scopeValues[key].string.toLowerCase();\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    return scope;\r\n                };\r\n\r\n                var getModuleTypeFromScope = function (moduleScope) {\r\n                    var type = '';\r\n                    for (var key in scopeValues) {\r\n                        if (scopeValues[key].string.toLowerCase() == moduleScope) {\r\n                            type = scopeValues[key].value;\r\n                            break;\r\n                        }\r\n                    }\r\n                    return type;\r\n                };\r\n\r\n                var IsAdvanceSearchEnabled = function (moduleScope) {\r\n                    var productsArray = getAdvanceSearchEnabledProducts();\r\n                    var type = getModuleTypeFromScope(moduleScope);\r\n                    if (productsArray.length > 0) {\r\n                        if (productsArray.indexOf(type) != -1)\r\n                            return true;\r\n                        else\r\n                            return false;\r\n                    }\r\n                };\r\n\r\n                var getAdvanceSearchEnabledProducts = function () {\r\n                    var productsArray = scope.advancedSearchDocTypes != null ? scope.advancedSearchDocTypes.split(\",\") : [];\r\n                    return productsArray;\r\n                };\r\n\r\n                /*\r\n                 *  Create redirection url\r\n                 */\r\n                var generateUrl = function (moduleScope) {\r\n                    var searchText = scope.searchText.trim();\r\n                    var url = '';\r\n                    if (IsAdvanceSearchEnabled(moduleScope)) {\r\n                        url = searchConstants.portalURL + 'Portal/Dashboard/Documents?scope=' + moduleScope + '&q=' + searchText + '&oloc=' + searchConstants.documentTypeCodes;\r\n                    }\r\n                    else {\r\n                        url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&oloc=' + searchConstants.documentTypeCodes;\r\n                    }\r\n\r\n                    switch (moduleScope.toLowerCase()) {\r\n                        case scopeValues.Catalog.string.toLowerCase():\r\n                            url = searchConstants.portalURL + '/Catalog/Manage/Navigation?bpc=' + searchConstants.encryptedBPC + '&navTo=1&q=' + searchText + '&scope=' + moduleScope + '&' + searchConstants.catalogQueryString + '&oloc=' + scopeValues.Catalog.SubAppCodes;\r\n                            break;\r\n                        case scopeValues.Order.string.toLowerCase():\r\n                            url += '&' + searchConstants.orderQueryString;\r\n                            break;\r\n                        case scopeValues.Invoice.string.toLowerCase():\r\n                            url += '&' + searchConstants.invoiceQueryString;\r\n                            break;\r\n                        case scopeValues.Receipts.string.toLowerCase():\r\n                            url += '&' + searchConstants.receiptQueryString;\r\n                            break;\r\n                        case scopeValues.Requisition.string.toLowerCase():\r\n                            url += '&' + searchConstants.requisitionQueryString;\r\n                            break;\r\n                        case scopeValues.InvoiceReconciliation.string.toLowerCase():\r\n                            url += '&' + searchConstants.invoiceReconcillationQueryString;\r\n                            break;\r\n                        case scopeValues.CreditMemo.string.toLowerCase():\r\n                            url += '&' + searchConstants.creditMemoQuerystring;\r\n                            break;\r\n                        case scopeValues.Blanket.string.toLowerCase():\r\n                            url += '&' + searchConstants.blanketQueryString;\r\n                            break;\r\n                        case scopeValues.CategoryWorkbench.string.toLowerCase():\r\n                            url += '&' + searchConstants.categoryWorkbenchQueryString;\r\n                            break;\r\n                        case scopeValues.Partners.string.toLowerCase():\r\n                            url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&' + searchConstants.partnersQueryString + '&oloc=' + searchConstants.documentTypeCodes;\r\n                            break;\r\n                        case scopeValues.Forms.string.toLowerCase():\r\n                            url += '&' + searchConstants.formQueryString;\r\n                            break;\r\n                        case scopeValues.Scorecards.string.toLowerCase():\r\n                            url += '&' + searchConstants.assessmentQueryString;\r\n                            break;\r\n                        case scopeValues.Workbench.string.toLowerCase():\r\n                            url += '&' + searchConstants.workBenchQueryString;\r\n                            break;\r\n                        case scopeValues.RFX.string.toLowerCase():\r\n                        case scopeValues.RFP.string.toLowerCase():\r\n                        case scopeValues.RFQ.string.toLowerCase():\r\n                        case scopeValues.RFI.string.toLowerCase():\r\n                            url += '&' + searchConstants.rfxQueryString;\r\n                            break;\r\n                        case scopeValues.Auction.string.toLowerCase():\r\n                            url += '&' + searchConstants.auctionQueryString;\r\n                            break;\r\n                        case scopeValues.ActionPlan.string.toLowerCase():\r\n                            url += '&' + searchConstants.actionPlanQueryString;\r\n                            break;\r\n                        case scopeValues.Contract.string.toLowerCase():\r\n                            url += '&' + searchConstants.contractQueryString;\r\n                            break;\r\n                        case scopeValues.Templates.string.toLowerCase():\r\n                            url += '&' + searchConstants.catalogQueryString;\r\n                            break;\r\n                        case \"request\":\r\n                            moduleScope = scopeValues.RFxRequest.string.toLowerCase() + \",\" + scopeValues.AuctionRequest.string.toLowerCase() + \",\" + scopeValues.ContractRequest.string.toLowerCase() + \",\" + scopeValues.PaymentRequest.string.toLowerCase();\r\n                            url = searchConstants.portalURL + 'Portal/search/searchresults?q=' + searchText + '&scope=' + moduleScope + '&oloc=' + searchConstants.documentTypeCodes;\r\n                            break;\r\n                        case \"returnnote\":\r\n                            url += '&' + searchConstants.returnNoteQuerystring;\r\n                            break;\r\n                        case scopeValues.Project.string.toLowerCase():\r\n                            url = searchConstants.portalURL + 'PPST/Project/ProjectHome?oloc=113&q=' + searchText + '&' + searchConstants.projectQueryString;\r\n                            break;\r\n                        default:\r\n                            if ((moduleScope.toLowerCase().indexOf(scopeValues.AuctionRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.RFxRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.ContractRequest.string.toLowerCase()) !== -1) || (moduleScope.toLowerCase().indexOf(scopeValues.PaymentRequest.string.toLowerCase()) !== -1)) {\r\n                                url += '&' + searchConstants.auctionQueryString;\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    if (APPCONSTANTS.userPreferences.UserBasicDetails.IsSupplier) {\r\n                        url = url + \"&dd=\" + searchConstants.encryptedBPC;\r\n                    }\r\n\r\n                    return url;\r\n                };\r\n\r\n\r\n                scope.searchText = '';\n\n                var request, searchConstants, lastSearchedText;\n\n                /*\n                 *  Get search constants from .net controller\n                 */\n                if (APPCONSTANTS && APPCONSTANTS.userPreferences && APPCONSTANTS.userPreferences.constantURLAndQueryStringValue)\n                    searchConstants = APPCONSTANTS.userPreferences.constantURLAndQueryStringValue;\n                else {\r\n                    request = {\r\n                        method: 'GET',\r\n                        url: '/' + APPCONSTANTS.userPreferences.AreaName + '/GetConstantURLAndQueryStringValues?oloc=216'\r\n                    };\r\n\r\n                    httpService.directhttp(request).then(function (result) {\r\n                        searchConstants = result;\r\n                    }, function (errorData) {\r\n                        searchConstants = {};\r\n                    });\r\n                }\n\n                request = {\r\n                    method: 'GET',\r\n                    url: '/' + APPCONSTANTS.userPreferences.AreaName + '/GetAllowedModulesList?oloc=216&BuyerPartnerCode=' + APPCONSTANTS.userPreferences.UserBasicDetails.BuyerPartnerCode\r\n                };\n\n                function setAllowedModuleListData(result) {\r\n                    var modules = result.Output;\n                    var orderIndex = -1;\n                    for (var i = 0; i < modules.length; i++) {\r\n                        if (modules[i].FilterKey == 8) {\r\n                            orderIndex = i;\r\n                            break;\r\n                        }\r\n                    }\n                    if (orderIndex > -1) {\r\n                        var quickSearchItem = modules.splice(orderIndex, 1);\r\n                        modules.splice(1, 0, quickSearchItem[0]);\r\n                    }\n                    scope.modules = angular.copy(modules);\n                    scope.selectedModule = scope.modules[0];\r\n                    scope.advancedSearchDocTypes = result.AdvancedSearchDocTypes;\r\n                };\n\n                if (APPCONSTANTS.userPreferences.allowedModulesList){\n                    setAllowedModuleListData(APPCONSTANTS.userPreferences.allowedModulesList);\n                }else{\n                    httpService.directhttp(request).then(function (result) {\r\n                        setAllowedModuleListData(result);\r\n                    }, function (errorData) { });\r\n                }\n                \n                /*\n                 *  On module item click handler\n                 */\n                scope.onModuleClick = function (module) {\r\n                    scope.selectedModule = module;\r\n                    scope.showFilterList = false;\r\n                    scope.recentSearches = null;\r\n                    scope.searchResult = null;\r\n                };\n\n\n                /*\n                 *  Get recent searches\n                 */\n                var getRecentSearches = function () {\r\n                    if (scope.recentSearches) {\r\n                        scope.recentSearches = scope.recentSearches.splice(0, 5);\r\n                        scope.showRecentSearches = true;\r\n                        return;\r\n                    }\r\n\r\n                    scope.recentSearches = null;\r\n\r\n                    scope.isRecentSearchesLoading = true;\r\n\r\n                    request = {\r\n                        method: 'GET',\r\n                        url: '/Controls/HeaderBar/GetRecentSearches?oloc=101&moduleType=' + (scope.selectedModule.IsAllMenu ? 0 : scope.selectedModule.FilterKey.split(',')[0]) + '&fieldKey=' + (scope.selectedModule.FieldKey != undefined ? scope.selectedModule.FieldKey : 0)\r\n                    };\r\n\r\n                    httpService.directhttp(request).then(function (result) {\r\n                        scope.showRecentSearches = true;\r\n                        scope.isRecentSearchesLoading = false;\r\n                        try {\r\n                            scope.recentSearches = JSON.parse(result.RecentSearches).splice(0, 5);\r\n                        }\r\n                        catch (e) {\r\n                            scope.recentSearches = [];\r\n                        }\r\n                    }, function (errorData) {\r\n                        scope.isRecentSearchesLoading = false;\r\n                    });\r\n                };\n\n\n                /*\n                 *  Get search results\n                 */\n                scope.onSearchTextChange = function (event) {\r\n                    if (event.keyCode === 13 && scope.searchText.trim().length > 2) {\r\n                        if (!scope.selectedModule.IsAllMenu) {\r\n                            window.location.href = scope.getSearchNavigateURL(getScopeFromModuleType(scope.selectedModule.FilterKey), scope.selectedModule.FieldKey);\r\n                            return;\r\n                        }\r\n\r\n                        scope.showRecentSearches = false;\r\n                        scope.showFilterList = false;\r\n                        scope.showSearchResult = true;\r\n                        scope.isSearchResultLoading = true;\r\n\r\n                        //  If user has recently searched for the text entered, do not hit the service\r\n                        if (lastSearchedText === scope.searchText.trim() && scope.searchResult) {\r\n                            scope.isSearchResultLoading = false;\r\n                            return;\r\n                        }\r\n\r\n                        if (!scope.recentSearches) {\r\n                            getSearchResults();\r\n                            return;\r\n                        }\r\n\r\n                        var recentSearches = [{ \"Sequence\": 0, \"SearchText\": scope.searchText.trim() }];\r\n\r\n                        //  Remove duplicate entries from recent searches and generate recent search sequence\r\n                        for (var i = 0; i < scope.recentSearches.length; i++) {\r\n                            if (scope.recentSearches[i].SearchText != scope.searchText.trim()) {\r\n                                recentSearches.push({\r\n                                    \"Sequence\": recentSearches.length,\r\n                                    \"SearchText\": scope.recentSearches[i].SearchText\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        scope.recentSearches = angular.copy(recentSearches);\r\n\r\n                        request = {\r\n                            method: 'POST',\r\n                            url: '/Controls/HeaderBar/SaveRecentSearches?oloc=101',\r\n                            data: {\r\n                                \"recentSearches\": JSON.stringify(recentSearches),\r\n                                \"moduleType\": scope.selectedModule.IsAllMenu ? 0 : scope.selectedModule.FilterKey.split(\",\")[0],\r\n                                \"fieldKey\": scope.selectedModule.FieldKey != undefined ? scope.selectedModule.FieldKey : 0\r\n                            }\r\n                        };\r\n\r\n                        httpService.directhttp(request).then(function (result) {\r\n                            getSearchResults();\r\n                        }, function (errorData) {\r\n                            getSearchResults();\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (scope.searchText.trim().length == 0) {\r\n                            scope.showSearchResult = false;\r\n                            getRecentSearches();\r\n                        }\r\n                    }\r\n                };\n\n\n                var getSearchResults = function () {\r\n                    lastSearchedText = angular.copy(scope.searchText.trim());\r\n\r\n                    scope.searchResult = null;\r\n\r\n                    request = {\r\n                        method: 'POST',\n                        url: '/Controls/BaseSearch/GetSearchResultForWeb?oloc=101',\r\n                        data: {\r\n                            \"searchKeyword\": scope.searchText.trim(),\r\n                            \"Filters\": [\"searchScope:All\", \"pageNumber:1\", \"isGlobalSearch:true\", \"module:all\", \"moduleScope:\" + getCurrentModuleScope(), \"noOfRecords:0\"]\r\n                        }\r\n                    };\n\n                    if (scope.selectedModule.FieldKey) {\r\n                        request.data.Filters.push(\"fieldkey:\" + scope.selectedModule.FieldKey);\r\n                    }\n\n                    httpService.directhttp(request).then(function (result) {\r\n                        scope.isSearchResultLoading = false;\r\n                        if (result.DataSearchResult.GroupTotal.TotalCount > 0) {\r\n                            scope.searchResult = result.DataSearchResult.GroupTotal;\r\n                        }\r\n                        else {\r\n                            scope.searchResult = [];\r\n                        }\r\n                    }, function (errorData) {\r\n                        scope.isSearchResultLoading = false;\r\n                    });\r\n                };\n\n\n                /*\n                 *  On search-text focus\n                 */\n                scope.onSearchTextFocus = function (e) {\r\n                    if (scope.searchText.trim().length == 0) {\r\n                        scope.showSearchResult = false;\r\n                        getRecentSearches();\r\n                    }\r\n                };\n\n\n                /*\n                 *  On recent search item click handler\n                 */\n                scope.onRecentSearchItemClick = function (text) {\r\n                    scope.searchText = text;\r\n                    scope.onSearchTextChange({ keyCode: 13 });\r\n                };\n\n\n                /*\n                 *  Get translated label\n                 */\n                scope.getTranslatedLabel = function (label) {\r\n                    return $translate.instant(label);\r\n                };\n\n\n                /*\n                 *  On document click handler\n                 */\n                var onDocumentClick = function () {\r\n                    $timeout(function () {\r\n                        scope.showRecentSearches = false;\n                        scope.showFilterList = false;\r\n                        scope.showSearchResult = false;\r\n                        try {\r\n                            httpService.abort(request);\r\n                        }\r\n                        catch (e) { }\r\n                    });\r\n                };\n\n                $(document).on('click', onDocumentClick);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    $(document).off('click', onDocumentClick);\r\n                })\r\n            },\n            templateUrl: 'shared/directives/smartSearch/smartSearchTemplate.html'\r\n        };\r\n    }]);\r\n})();\n/*\r\n    ::attributes {\r\n        getCheckboxInfo : & (callback for getting selected items and total length of set)\r\n                   data : @ (takes pipe \"|\" sepereted values like eg. \"dataset|selector\")\r\n            checkerFlag : @\r\n            disableFlag : @\r\n    }\r\n*/\r\n\r\n(function (angular) {\r\n    \"use strict\";\r\n    angular\r\n        .module(\"SMART2\")\r\n        .directive(\"smartSelectall\", [\"$parse\", \"$timeout\", smartSelectallFun]);\r\n\r\n    function smartSelectallFun($parse, $timeout) {\r\n        return {\r\n            restrict: \"A\",\r\n            require: \"ngModel\",\r\n            link: function (scope, element, attrs, ngModel) {\r\n                var getCheckboxInfo = attrs.getCheckboxInfo ? $parse(attrs.getCheckboxInfo.replace(/\\(\\)/, '(selected, length)')) : false, // callback for to get checkbox selection status info\r\n                    config = function () {\r\n                        var a = attrs.data.split(\"|\"),\r\n                        scopeDeep = a[0] ? a[0].replace(/\\s+/ig, '') : null,\r\n                        checkboxSelector = a[1] ? a[1].replace(/\\s+/ig, '') : null,\r\n                        checkerFlag = attrs.checkerFlag ? attrs.checkerFlag : \"checked\",\r\n                        disableFlag = attrs.disableFlag ? attrs.disableFlag : \"disable\",\r\n                        //checkerStyle = attrs.checkerFlag.indexOf(\"{\") == 0 ? \"eval\" : \"flag\",\r\n                        disableStyle = disableFlag.indexOf(\"{\") == 0 ? \"eval\" : \"flag\",\r\n                        sc = getScope(scope, scopeDeep);\r\n\r\n                        return {\r\n                            checkerFlag: checkerFlag,\r\n                            //checkerStyle: checkerStyle,\r\n                            disableFlag: disableFlag,\r\n                            disableStyle: disableStyle,\r\n                            scopeDeep: scopeDeep,\r\n                            scopeData: sc, // set of list items\r\n                            selector: checkboxSelector,\r\n                            selected: 0,\r\n                            length: sc.length\r\n                        };\r\n                    }(),\r\n                    mainCheckbox = element.find(\"input[type=checkbox]\");\r\n\r\n                if (scope.__selectallExoprt) {\r\n                    !scope.__selectallExoprt && (scope.__selectallExoprt = {});\r\n                    scope.__selectallExoprt.selectall = function (check) {\r\n                        mainCheckbox.prop('checked', check).change();\r\n                    };\r\n                };\r\n\r\n                mainCheckbox.change(function (e) {\r\n                    var el = $(this),\r\n                        _scope = scope,\r\n                        isChecked = el.prop(\"checked\");\r\n\r\n                    config.scopeData.forEach(function (a) {\r\n                        var isDisabled = function () {\r\n                            var r;\r\n                            if (config.disableStyle == \"flag\") {\r\n                                r = a[config.disableFlag];\r\n                            } else if (config.disableStyle == \"eval\") {\r\n                                r = eval(config.disableFlag.replace(/(\\{|\\})/ig, '').replace(/this/ig, 'a'));\r\n                            }\r\n                            return r;\r\n                        }();\r\n                        if (!isDisabled) {\r\n                            a[config.checkerFlag] = isChecked;\r\n                        }\r\n                    });\r\n                    element.removeClass(\"filled-partial\");\r\n                    config.selected = isChecked ? config.scopeData.length : 0;\r\n                    if (getCheckboxInfo)\r\n                        scope.$apply(function () {\r\n                            getCheckboxInfo(scope, getInfo());\r\n                        });\r\n                });\r\n\r\n\r\n                scope.$watchCollection(config.scopeData, function () {\r\n                    refresh();\r\n                });\r\n\r\n                scope.$watch(config.scopeDeep + \".length\", function () {\r\n                    refresh();\r\n                });\r\n\r\n                initCheckbox(); // applying events to checkbox\r\n\r\n\r\n                function initCheckbox() {\r\n                    $timeout(function () {\r\n                        initCheckboxItem();\r\n                    });\r\n                }\r\n                function initCheckboxItem() {\r\n                    var allCheckbox = $(config.selector).find(\"input[type=checkbox]\");\r\n                    if (allCheckbox && allCheckbox.length > 0) {\r\n                        allCheckbox.unbind(\"change\").change(function (e) {\r\n                            var el = $(this),\r\n                                isChecked = el.prop(\"checked\");\r\n\r\n                            config.selected = isChecked ? config.selected += 1 : config.selected -= 1;\r\n                            if (config.selected < config.length) {\r\n                                config.selected == 0 ? element.removeClass(\"filled-partial\") : element.addClass(\"filled-partial\");\r\n                                ngModel.$setViewValue(false);\r\n                                ngModel.$render();\r\n                            } else if (config.selected == config.length) {\r\n                                element.removeClass(\"filled-partial\");\r\n                                ngModel.$setViewValue(true);\r\n                                ngModel.$render();\r\n                            }\r\n                            if (getCheckboxInfo)\r\n                                scope.$apply(function () {\r\n                                    getCheckboxInfo(scope, getInfo());\r\n                                });\r\n                        });\r\n                    }\r\n                }\r\n                function resetConfig() {\r\n                    var selected = 0;\r\n                    config.scopeData = getScope(scope, config.scopeDeep);\r\n                    config.scopeData.forEach(function (a) {\r\n                        if (a[config.checkerFlag]) selected++;\r\n                    });\r\n\r\n                    config.selected = selected;\r\n                    config.length = config.scopeData.length;\r\n\r\n                    if (config.selected < config.length) {\r\n                        config.selected == 0 ? element.removeClass(\"filled-partial\") : element.addClass(\"filled-partial\");\r\n                        ngModel.$setViewValue(false);\r\n                        ngModel.$render();\r\n                    } else if (config.selected == config.length) {\r\n                        element.removeClass(\"filled-partial\");\r\n                        ngModel.$setViewValue(true);\r\n                        ngModel.$render();\r\n                    }\r\n\r\n                    if (getCheckboxInfo)\r\n                        scope.$applyAsync(function () {\r\n                            getCheckboxInfo(scope, getInfo());\r\n                        });\r\n                }\r\n                function getScope(scope, deep) {\r\n                    var a, b = deep.split(\".\");\r\n                    if (b.length > 1) {\r\n                        a = scope;\r\n                        for (var i = 0; i < b.length; i++) {\r\n                            a = a[b[i]];\r\n                        }\r\n                    } else {\r\n                        a = scope[deep];\r\n                    }\r\n                    return a;\r\n                }\r\n                function refresh() {\r\n                    initCheckbox();\r\n                    resetConfig();\r\n                }\r\n                function getInfo() {\r\n                    return {\r\n                        selected: config.selected,\r\n                        length: config.length\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n})(angular);\nangular.module('SMART2').directive('smartSort', function () {\r\n    return {\r\n        restrict: 'E',\r\n       \ttransclude: true,\r\n       \ttemplate:'<a href=\\\"javascript:void(0)\\\" class=\"waves-circle waves-effect waves-grey\" ng-click=\\\"ascDescToggler()\\\">\\n<i ng-if=\"currentCell != sortBy\" class=\\\"icon iconSmall grey-text\\\" smart-tooltip position=\\\"bottom\\\" delay=\\\"50\\\" message=\\\"{{ \\'Sort By \\' | translate }}\\\">\\n<svg>\\n<use xlink:href=\\\"{{ \\'#icon_Sort\\' }}\\\"><\\/use>\\n<\\/svg><\\/i><i class=\\\"icon iconSmall grey-text\\\" ng-if=\"currentCell == sortBy\" ng-class=\\\" { \\'s-dd-icon-wth-color\\':  currentCell == sortBy }\\\"  smart-tooltip position=\\\"bottom\\\" delay=\\\"50\\\" message=\\\"{{ iconWithTooltip.tooltip | translate }}\\\">\\n<svg>\\n<use xlink:href=\\\"{{ iconWithTooltip.sortbyIcon }}\\\"><\\/use>\\n<\\/svg><\\/i><\\/a>',\r\n       \tscope:{\r\n       \t\tsortBy:\"=\",\r\n       \t\tsortReverse:\"=\",\r\n\t\t\tcurrentCell:\"@\"\r\n       \t},\r\n       \tlink:function($scope, $element, $attrs){\r\n\r\n       \t\t$scope.iconWithTooltip = {\r\n\t\t\t\tsortbyIcon : \"\",\r\n       \t\t\ttooltip\t:\t\"\"\r\n\r\n       \t\t}\r\n\r\n       \t\t\r\n\t       \t\t$scope.ascDescToggler = function(){\r\n              \r\n       \t\t\t$scope.sortBy = $scope.currentCell;\r\n\t       \t\t\t$scope.sortReverse = !$scope.sortReverse;\r\n\r\n\t       \t\t\tif($scope.sortBy == $scope.currentCell && $scope.sortReverse == false ){\r\n\t\t\t\t\t\t\t$scope.iconWithTooltip.sortbyIcon = \"#icon_SortDescending\";\r\n\t       \t\t\t\t\t$scope.iconWithTooltip.tooltip\t=\t\"Descending\";\r\n\t       \t\t\t}\r\n\t       \t\t\telse if($scope.sortBy == $scope.currentCell && $scope.sortReverse == true ){\r\n\t\t\t\t\t\t\t$scope.iconWithTooltip.sortbyIcon = \"#icon_SortAscending\";\r\n\t       \t\t\t\t\t$scope.iconWithTooltip.tooltip\t=\t\"Ascending\";\r\n\t       \t\t\t}\r\n\t       \t\t\t\r\n       \t\t\t};\r\n       \t\t\r\n       \t}\r\n       \r\n    }\r\n});\n var isRegionalSettingEnabled = typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable;\r\n(function () {\r\n    'use strict';\r\n\r\n    var app = angular.module('SMART2');\r\n\r\n\r\n    window.onmousedown = function (e) {\r\n        if ($(e.target).closest('.smart-table-cell-template').length > 0) {\r\n            window.isSmartTableCellClicked = true;\r\n        }\r\n\r\n        //\tIf autosuggest option is not clicked, allow scope to be cleared\r\n        if (window.lastActiveCellScope && ($(e.target).closest('.daterangepicker').length > 0 || $(e.target).closest('.autocomplete-suggestion').length > 0 ||\r\n        $(e.target).closest('.autocomplete-suggestions').length > 0 || $(e.target).closest('.modal').length > 0 || $(e.target).closest('.lean-overlay').length > 0)) {\r\n            return;\r\n        }\r\n\r\n        //\tClear and update last rendered cell when selection or tree icon is clicked\r\n        if ($(e.target).closest('.smart-table-row-cell').length == 0 || $(e.target).closest('.smart-table-icon-holder').length > 0) {\r\n            if (window.lastActiveCellScope) {\r\n                window.lastActiveCellScope.stopEdit();\r\n                window.lastActiveCellScope = undefined;\r\n            }\r\n            return;\r\n        }\r\n    };\r\n\r\n\r\n    window.focusHandler = function (element) {\r\n        element.focus(function () {\r\n            setTimeout((function (el) {\r\n                var strLength = el.value.length;\r\n                return function () {\r\n                    if (el.setSelectionRange !== undefined) {\r\n                        el.setSelectionRange(strLength, strLength);\r\n                    }\r\n                    else {\r\n                        $(el).val(el.value);\r\n                    }\r\n                }\r\n            }(this)), 0);\r\n        });\r\n    };\r\n\r\n\r\n    //  To handle date picker control issue\r\n    setTimeout(function () {\r\n        window.onkeydown = function (e) {\r\n            if ($(e.target).is('body') && window.lastActiveCellScope &&\r\n                window.lastActiveCellScope.column.attributes && window.lastActiveCellScope.column.attributes.type == 'date') {\r\n                window.lastActiveCellScope.onElementKeyDown(e);\r\n                return false;\r\n            }\r\n        };\r\n    }, 500);\r\n\r\n\r\n    function getObjectValue(obj, keys) {\r\n        try {\r\n            var arr = keys.split('.');\r\n            while (arr.length) {\r\n                obj = obj[arr.shift()];\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return obj;\r\n    };\r\n\r\n    function getObjectValueForAutoSuggest(obj, keys) {\r\n        var arr = keys.split('.');\r\n        if (arr.length > 1) {\r\n            arr.splice(arr.length - 1, 1);\r\n            return getObjectValue(obj, arr.join('.'));\r\n        }\r\n        return obj[arr[0]];\r\n    };\r\n\r\n    function setObjectValue(obj, keys, value) {\r\n        try {\r\n            var arr = keys.split('.');\r\n            if (arr.length == 1) {\r\n                obj[arr[0]] = value;\r\n            }\r\n            else {\r\n                var obj = obj[arr[0]];\r\n                arr.shift();\r\n                var keys = arr.join('.');\r\n                setObjectValue(obj, keys, value);\r\n            }\r\n        }\r\n        catch (e) { }\r\n    };\r\n\r\n    function updateCell(obj, keys, value) {\r\n        if (!angular.isObject(value)) {\r\n            setObjectValue(obj, keys, value);\r\n            return;\r\n        }\r\n        else if (!angular.isObject(obj[keys.split('.')[0]]) && angular.isObject(value)) {\r\n            setObjectValue(obj, keys, value[keys.split('.')[0]]);\r\n            return;\r\n        }\r\n        angular.extend(obj[keys.split('.')[0]], value);\r\n    };\r\n\r\n    function getFormattedData(data, displayFormat) {\r\n        if (!data || data.length == 0) {\r\n            return [];\r\n        }\r\n        for (var i = 0; i < data.length; i++) {\r\n            var str = displayFormat;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (e) { }\r\n            data[i].value = str.trim();\r\n        }\r\n        return data;\r\n    };\r\n\r\n    function getDisplayData(data, displayFormat) {\r\n        if (data == undefined || data == null || data == '') {\r\n            return '';\r\n        }\r\n        var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n        try {\r\n            var parentSplit = str.split('{');\r\n            for (var j = 0; j < parentSplit.length; j++) {\r\n                var childSplit = parentSplit[j].split('}');\r\n                for (var k = 0; k < childSplit.length; k++) {\r\n                    if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                        evalResult = eval('data.' + childSplit[k]);\r\n                        evaluatedKeysCounter++;\r\n                        if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                            evalResult = '';\r\n                            nullKeysCounter++;\r\n                        }\r\n                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                    }\r\n                }\r\n            }\r\n            if (evaluatedKeysCounter == nullKeysCounter) {\r\n                str = '';\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n    };\r\n\r\n    function convertNumberToFixed(number, minPrecision, maxPrecision) {\r\n        var arrTmpInputValue, tmpStrAfterPrecision;\r\n        arrTmpInputValue = (number + '').split('.');\r\n\r\n        if (arrTmpInputValue.length > 1) {\r\n            tmpStrAfterPrecision = arrTmpInputValue[arrTmpInputValue.length - 1];\r\n            if (maxPrecision > 0 && tmpStrAfterPrecision.length >= maxPrecision) {\r\n                return number.toString().match(new RegExp('^-?\\\\d+(?:\\.\\\\d{0,' + (maxPrecision || -1) + '})?'))[0];\r\n            }\r\n            else if (minPrecision > 0 && tmpStrAfterPrecision.length <= minPrecision) {\r\n                return Number(Math.round(number + 'e' + minPrecision) + 'e-' + minPrecision);             \r\n            }\r\n            else {\r\n                return number;\r\n            }\r\n        }\r\n        else {\r\n            return Number(Math.round(number + 'e' + minPrecision) + 'e-' + minPrecision);\r\n        }\r\n    };\r\n\r\n    function sortSmartTableData(data, column, isAscending, translate) {\r\n        return data.sort(function (a, b) {\r\n            var strOne = getObjectValue(a, column.field);\r\n            var strTwo = getObjectValue(b, column.field);\r\n\r\n            var intOne = parseFloat(strOne);\r\n            var intTwo = parseFloat(strTwo);\r\n\r\n            if (isNaN(intOne) && isNaN(intTwo)) {\r\n                try {\r\n                    if (column.enableTranslation) {\r\n                        strOne = translate.instant(strOne);\r\n                        strTwo = translate.instant(strTwo);\r\n                    }\r\n                    strOne = strOne.toLowerCase();\r\n                    strTwo = strTwo.toLowerCase();\r\n                }\r\n                catch (e) { }\r\n                return strOne > strTwo ? (isAscending ? -1 : 1) : (strOne < strTwo ? (isAscending ? 1 : -1) : 0);\r\n            }\r\n            else if (isNaN(intOne)) {\r\n                return isAscending ? -1 : 1;\r\n            }\r\n            else if (isNaN(intTwo)) {\r\n                return isAscending ? 1 : -1;\r\n            }\r\n            else {\r\n                return intOne > intTwo ? (isAscending ? -1 : 1) : (intOne < intTwo ? (isAscending ? 1 : -1) : 0);\r\n            }\r\n        });\r\n    };\r\n\r\n    app.filter('smartTableFilter', ['$filter', '$translate', 'smartTableUtils', function ($filter, $translate, smartTableUtils) {\r\n        var isParentRowToBeDisplayed = function (data, index, filters) {\r\n            var result = false;\r\n\r\n            for (var i = index + 1; i < data.length; i++) {\r\n                if (data[i].$$treeLevel == 0) {\r\n                    break;\r\n                }\r\n                else {\r\n                    for (var j = 0; j < filters.length; j++) {\r\n                        if (((getObjectValue(data[i], filters[j].filterKey) + \"\").toLowerCase()).indexOf((filters[j].filterText + \"\").toLowerCase()) > -1) {\r\n                            result = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        };\r\n\r\n        var getChildrenNodes = function (data, nodeIndex) {\r\n            var tmpRows = $filter('filter')(data, function (row, i) {\r\n                return row.$$treeLevel > 0 && row.$$nodeIndex == nodeIndex;\r\n            });\r\n            tmpRows = $filter('orderBy')(tmpRows, '$$treeLevel', false);\r\n            return tmpRows;\r\n        };\r\n\r\n        return function (data, filters, sortState, enableTreeView, showTreeView, offset, limit, useExternalPagination, smartTableId) {\r\n            var outputData;\r\n            if (filters.length == 0) {\r\n                if (data) {\r\n                    if (enableTreeView) {\r\n                        var nodeIndex = -1;\r\n                        var parentIndex = -1;\r\n\r\n                        outputData = $filter('filter')(data, function (row, index) {\r\n                            if (row.$$treeLevel == 0) {\r\n                                nodeIndex++;\r\n                                parentIndex = index;\r\n                                row.$$enableTreeView = false;\r\n                            }\r\n                            else {\r\n                                try {\r\n                                    data[parentIndex].$$enableTreeView = true;\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n\r\n                            row.$$nodeIndex = nodeIndex;\r\n                            row.$$index = (useExternalPagination ? offset : 0) + index;\r\n                            row.$$parentIndex = parentIndex;\r\n                            row.$$isExpanded = data[parentIndex].$$isExpanded || !showTreeView;\r\n                            row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n\r\n                            return row.$$treeLevel == 0 || row.$$isExpanded;\r\n                        });\r\n                    }\r\n                    else {\r\n                        outputData = $filter('filter')(data, function (row, index) {\r\n                            row.$$index = (useExternalPagination ? offset : 0) + index;\r\n                            row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                            return true;\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    outputData = [];\r\n                }\r\n            }\r\n            else {\r\n                var keysMatchCounter = 0;\r\n                var nodeIndex = -1;\r\n                var parentIndex = -1;\r\n                var cellValue;\r\n\r\n                if (enableTreeView) {\r\n                    outputData = $filter('filter')(data, function (row, index) {\r\n                        if (row.$$treeLevel == 0) {\r\n                            nodeIndex++;\r\n                            parentIndex = index;\r\n                            row.$$enableTreeView = false;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                data[parentIndex].$$enableTreeView = true;\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n\r\n                        row.$$nodeIndex = nodeIndex;\r\n                        row.$$index = index;\r\n                        row.$$parentIndex = parentIndex;\r\n                        row.$$isExpanded = data[parentIndex].$$isExpanded || !showTreeView;\r\n                        row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                        keysMatchCounter = 0;\r\n\r\n                        for (var j = 0; j < filters.length; j++) {\r\n                            cellValue = (filters[j].colDef.enableTranslation && $translate.instant(getObjectValue(row, filters[j].filterKey) + '')) || getObjectValue(row, filters[j].filterKey) + '';\r\n\r\n                            if ((cellValue.toLowerCase()).indexOf((filters[j].filterText + '').toLowerCase()) > -1 ||\r\n                            (angular.isFunction(filters[j].condition) && filters[j].condition(filters[j].filterText, row, filters[j].colDef))) {\r\n                                keysMatchCounter++;\r\n                            }\r\n                        }\r\n\r\n                        return (row.$$treeLevel == 0 && keysMatchCounter == filters.length) ||\r\n                            (row.$$treeLevel != 0 && row.$$isExpanded && keysMatchCounter == filters.length) ||\r\n                            (row.$$treeLevel == 0 && isParentRowToBeDisplayed(data, index, filters));\r\n                    });\r\n                }\r\n                else {\r\n                    outputData = $filter('filter')(data, function (row, index) {\r\n                        row.$$index = index;\r\n                        row.$$isSelectable = angular.isUndefined(row.$$isSelectable) ? true : row.$$isSelectable;\r\n                        keysMatchCounter = 0;\r\n\r\n                        for (var j = 0; j < filters.length; j++) {\r\n                            cellValue = (filters[j].colDef.enableTranslation && $translate.instant(getObjectValue(row, filters[j].filterKey) + '')) || getObjectValue(row, filters[j].filterKey) + '';\r\n\r\n                            if ((cellValue.toLowerCase()).indexOf((filters[j].filterText + '').toLowerCase()) > -1 ||\r\n                            (angular.isFunction(filters[j].condition) && filters[j].condition(filters[j].filterText, row, filters[j].colDef))) {\r\n                                keysMatchCounter++;\r\n                            }\r\n                        }\r\n\r\n                        return keysMatchCounter == filters.length;\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (sortState) {\r\n                if (enableTreeView) {\r\n                    //\treorder tree data\r\n                    var arrParentNodes = $filter('filter')(outputData, function (row) {\r\n                        return row.$$treeLevel == 0;\r\n                    });\r\n                    if (sortState.order > -1) {\r\n                        if (angular.isFunction(sortState.condition)) {\r\n                            arrParentNodes = sortState.condition(arrParentNodes, sortState.column, sortState.order == 0 ? false : true);\r\n                        }\r\n                        else {\r\n                            arrParentNodes = sortSmartTableData(arrParentNodes, sortState.column, sortState.order == 0 ? false : true, $translate);\r\n                        }\r\n                    }\r\n                    var arrOrderedData = [];\r\n                    angular.forEach(arrParentNodes, function (row) {\r\n                        arrOrderedData = arrOrderedData.concat([row]).concat(getChildrenNodes(outputData, row.$$nodeIndex));\r\n                    });\r\n                    outputData = arrOrderedData;\r\n                }\r\n                else {\r\n                    if (sortState.order > -1) {\r\n                        if (angular.isFunction(sortState.condition)) {\r\n                            outputData = sortState.condition(outputData, sortState.column, sortState.order == 0 ? false : true);\r\n                        }\r\n                        else {\r\n                            outputData = sortSmartTableData(outputData, sortState.column, sortState.order == 0 ? false : true, $translate);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!useExternalPagination) {\r\n                //\tUpdate total number of pages\r\n                smartTableUtils.broadcast('dataChange', { totalRecords: outputData.length, smartTableId: smartTableId });\r\n\r\n                outputData = outputData.slice(offset, limit);\r\n\r\n                //\tUpdate currently displayed records count\r\n                smartTableUtils.broadcast('pageIndexChanged', { currentPageDataLength: outputData.length, smartTableId: smartTableId });\r\n            }\r\n\r\n            return outputData;\r\n        }\r\n    }]);\r\n\r\n\r\n    app.directive('smartTable', ['$filter', '$timeout', '$templateCache', 'smartTableUtils', function ($filter, $timeout, $templateCache, smartTableUtils) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                smartTable: '=?'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var areEventListenersAdded = false, arrSelectedRowsIndexes = [], smartTableState;\r\n                var pageIndex = 0;\r\n                var recordsFetchedCount = 0;\r\n                var totalPages;\r\n                var apis;\r\n                var isStatePageIndexSet = false;\r\n\r\n                var sortOrder = 1;  //  1 = descending, 0 = ascending, -1 = reset\r\n                scope.filters = [];\r\n                scope.enableRowSelection = false;\r\n                scope.enableTreeView = false;\r\n                scope.showTreeView = false;\r\n                scope.arrRowsPerPageOptions = [10, 20, 30, 40, 50];\r\n                scope.rowsPerPage = \"10\";\r\n                scope.useExternalPagination = false;\r\n                scope.smartTableId = 'smart-table-' + (new Date().getTime());\r\n\r\n                scope.listeners = {};\r\n\r\n                var limit = parseInt(scope.rowsPerPage);\r\n\r\n                var addEventListeners = function (smartTable) {\r\n                    apis = {\r\n                        core: {\r\n                            getActiveColumns: function () {\r\n                                return scope.smartTableConfig.columnDefs;\r\n                            },\r\n                            getColDefs: function () {\r\n                                return scope.smartTableConfig.columnDefs;\r\n                            },\r\n                            notifyColumnChange: function () {\r\n                                init('columnChange');\r\n                            },\r\n                            notifyRowDataChange: function (rowIndex) {\r\n                                smartTableUtils.broadcast('rowDataChange', { rowIndex: rowIndex, smartTableId: scope.smartTableId });\r\n                            },\r\n                            notifyDataChange: function (isToBeRefreshed) {\r\n                                if (isToBeRefreshed) {\r\n                                    init('refresh');\r\n                                }\r\n                                else {\r\n                                    smartTableUtils.broadcast('dataChange', { smartTableId: scope.smartTableId, updateCell: true });\r\n                                }\r\n                            },\r\n                            refresh: function () {\r\n                                scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                                scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                                scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                                scope.useExternalPagination = scope.smartTableConfig.useExternalPagination ? true : false;\r\n                                init('refresh');\r\n                                angular.isFunction(smartTable.onRefresh) && smartTable.onRefresh(apis);\r\n                            },\r\n                            update: function () {\r\n                                init('dataChange');\r\n                            },\r\n                            stopEdit: function () {\r\n                                if (window.lastActiveCellScope) {\r\n                                    window.lastActiveCellScope.stopEdit();\r\n                                    window.lastActiveCellScope = undefined;\r\n                                }\r\n                            },\r\n                            pagination: {\r\n                                on: {\r\n                                    nextButtonClick: function (scopeRef, onNextButtonClick) {\r\n                                        scope.listeners['nextButtonClick'] = onNextButtonClick;\r\n                                    },\r\n                                    previousButtonClick: function (scopeRef, onPreviousButtonClick) {\r\n                                        scope.listeners['previousButtonClick'] = onPreviousButtonClick;\r\n                                    },\r\n                                    sort: function (scopeRef, onSort) {\r\n                                        scope.listeners['sort'] = onSort;\r\n                                    },\r\n                                    filter: function (scopeRef, onFilter) {\r\n                                        scope.listeners['filter'] = onFilter;\r\n                                    }\r\n                                },\r\n                                setDataLength: function (totalItemsCount) {\r\n                                    scope.displayedRecords = totalItemsCount;\r\n                                },\r\n                                setData: function (items) {\r\n                                    scope.smartTableConfig.data = items;\r\n                                    scope.currentPageDataLength = items.length;\r\n                                },\r\n                                setOffset: function (offset) {\r\n                                    scope.offset = offset;\r\n                                },\r\n                                setLimit: function (limit) {\r\n                                    scope.limit = limit;\r\n                                },\r\n                                getOffset: function () {\r\n                                    return scope.offset;\r\n                                },\r\n                                getRowsPerPage: function () {\r\n                                    return scope.rowsPerPage;\r\n                                }\r\n                            },\r\n                            on: {\r\n                                columnRefresh: function (scopeRef, onColumnRefresh) {\r\n                                    scope.listeners['columnRefresh'] = onColumnRefresh;\r\n                                }\r\n                            }\r\n                        },\r\n                        cell: {\r\n                            on: {\r\n                                click: function (scopeRef, onCellClick) {\r\n                                    scope.listeners['cellClick'] = onCellClick;\r\n                                },\r\n                                change: function (scopeRef, onCellChange) {\r\n                                    scope.listeners['cellChange'] = onCellChange;\r\n                                },\r\n                                optionsChange: function (scopeRef, onOptionsChange) {\r\n                                    scope.listeners['optionsChange'] = onOptionsChange;\r\n                                },\r\n                                optionSelect: function (scopeRef, onOptionSelect) {\r\n                                    scope.listeners['optionSelect'] = onOptionSelect;\r\n                                }\r\n                            }\r\n                        },\r\n                        cellNav: {\r\n                            scrollToFocus: function (rowIndex, colField) {\r\n                                var columnIndex, toBeFocused = true;\r\n\r\n                                for (var i = 0; i < scope.colDefs.length; i++) {\r\n                                    if (scope.colDefs[i].field == colField) {\r\n                                        columnIndex = i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n\r\n                                if (scope.enableTreeView && scope.showTreeView && !scope.smartTableConfig.data[scope.smartTableConfig.data[rowIndex].$$parentIndex].$$isExpanded) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.smartTableConfig.data[scope.smartTableConfig.data[rowIndex].$$parentIndex].$$isExpanded = true;\r\n                                    toBeFocused = false;\r\n                                }\r\n\r\n                                //  Load next page\r\n                                if (rowIndex > (scope.limit > scope.displayedRecords ? scope.displayedRecords : scope.limit) - 1) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.updatePagination(true, false);\r\n                                }\r\n                                    //  Load previous page\r\n                                else if (rowIndex < scope.offset) {\r\n                                    scope.pendingFocus = {\r\n                                        rowIndex: rowIndex,\r\n                                        columnIndex: columnIndex\r\n                                    };\r\n                                    scope.updatePagination(false, false);\r\n                                }\r\n                                else if (toBeFocused) {\r\n                                    scope.pendingFocus = undefined;\r\n                                    $('#' + scope.smartTableId + '-smart-table-cell-' + ((scope.pinnedColumns.length + scope.unpinnedColumns.length) * (rowIndex - scope.offset) + columnIndex)).focus();\r\n                                    //smartTableUtils.broadcast('focusCell', { rowIndex: rowIndex - scope.offset, colField: colField, smartTableId: scope.smartTableId });\r\n                                }\r\n\r\n                                document.getSelection().removeAllRanges();\r\n                            }\r\n                        },\r\n                        edit: {\r\n                            on: {\r\n                                beginCellEdit: function (scopeRef, onBeginCellEdit) {\r\n                                    scope.listeners['beginCellEdit'] = onBeginCellEdit;\r\n                                },\r\n                                endCellEdit: function (scopeRef, onEndCellEdit) {\r\n                                    scope.listeners['endCellEdit'] = onEndCellEdit;\r\n                                },\r\n                                afterCellEdit: function (scopeRef, onAfterCellEdit) {\r\n                                    scope.listeners['afterCellEdit'] = onAfterCellEdit;\r\n                                }\r\n                            }\r\n                        },\r\n                        saveState: {\r\n                            save: function () {\r\n                                var columnsState = [];\r\n                                var tmpColDefs = getReOrderedColumnDefsForState(scope.smartTableConfig.columnDefs);\r\n\r\n                                for (var i = 0; i < tmpColDefs.length; i++) {\r\n                                    columnsState.push({\r\n                                        displayKey: tmpColDefs[i].displayKey,\r\n                                        displayName: tmpColDefs[i].displayName,\r\n                                        field: tmpColDefs[i].field,\r\n                                        width: tmpColDefs[i].width,\r\n                                        visible: tmpColDefs[i].visible\r\n                                    });\r\n                                }\r\n\r\n                                return {\r\n                                    columns: JSON.stringify(columnsState),\r\n                                    filters: scope.filters,\r\n                                    sort: scope.sortState,\r\n                                    enableRowSelection: scope.enableRowSelection,\r\n                                    enableTreeView: scope.enableTreeView,\r\n                                    showTreeView: scope.showTreeView,\r\n                                    pagination: {\r\n                                        pageIndex: pageIndex,\r\n                                        limit: limit,\r\n                                        paginationCurrentPage: 1,\r\n                                        paginationPageSize: 10\r\n                                    },\r\n                                    timestamp: new Date(),\r\n                                    documentURL: window.location.href,\r\n                                    isSmartTable: true\r\n                                };\r\n                            },\r\n                            restore: function (scopeRef, state) {\r\n                                //\trestore table state\r\n                                if (state.isSmartTable) {\r\n                                    scope.enableRowSelection = state.enableRowSelection ? true : false;\r\n                                    scope.enableTreeView = state.enableTreeView ? true : false;\r\n                                    scope.showTreeView = state.showTreeView ? true : false;\r\n\r\n                                    if (state.filters && !scope.useExternalPagination && scope.smartTable.showFilters != undefined) {\r\n                                        scope.filters = state.filters;\r\n                                    }\r\n                                    if (angular.isDefined(state.columns)) {\r\n                                        scope.smartTableConfig.columnDefs = getReOrderedColumnDefs(state.columns);\r\n                                    }\r\n                                    if (!scope.useExternalPagination) {\r\n                                        if (state.pagination) {\r\n                                            pageIndex = state.pagination.limit > 10 ? 0 : (state.pagination.pageIndex > (Math.ceil(scope.smartTableConfig.data.length / 10) - 1) ? 0 : state.pagination.pageIndex);\r\n                                            limit = 10; // state.pagination.limit;\r\n                                            scope.offset = pageIndex * limit;\r\n                                            scope.limit = (pageIndex * limit) + limit;\r\n                                            scope.rowsPerPage = \"10\";\r\n                                            isStatePageIndexSet = true;\r\n                                        }\r\n                                        if (state.sort) {\r\n                                            scope.sortState = state.sort;\r\n                                            sortOrder = state.sort.order;\r\n                                        }\r\n                                    }\r\n                                    refreshColumns();\r\n                                    angular.isFunction(smartTable.onRefresh) && smartTable.onRefresh(apis);\r\n                                }\r\n                                else {\r\n                                    scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                                    scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                                    scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                                    init('refresh');\r\n                                }\r\n                            }\r\n                        },\r\n                        selection: {\r\n                            clearSelectedRows: function () {\r\n                                for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                                    scope.smartTableConfig.data[i].$$isSelected = false;\r\n                                }\r\n                                arrSelectedRowsIndexes = [];\r\n                                scope.isAllRowSelected = false;\r\n                            },\r\n                            getSelectedRows: function () {\r\n                                var tmpSelectedRows = [], tmpRow, arrDeletedIndexes = [];\r\n                                for (var i = 0; i < arrSelectedRowsIndexes.length; i++) {\r\n                                    tmpRow = angular.copy(scope.smartTableConfig.data[arrSelectedRowsIndexes[i]]);\r\n                                    if (tmpRow) {\r\n                                        tmpRow.$$isSelected = false;\r\n                                        tmpSelectedRows.push({ entity: tmpRow, index: arrSelectedRowsIndexes[i] });\r\n                                    }\r\n                                    else {\r\n                                        arrDeletedIndexes.push(i);\r\n                                    }\r\n                                }\r\n                                for (var i = arrDeletedIndexes.length - 1; i >= 0; i--) {\r\n                                    arrSelectedRowsIndexes.splice(arrDeletedIndexes[i], 1);\r\n                                }\r\n                                return tmpSelectedRows;\r\n                            },\r\n                            on: {\r\n                                rowSelectionChanged: function (scopeRef, onRowSelectedChanged) {\r\n                                    scope.listeners['rowSelectionChanged'] = onRowSelectedChanged;\r\n                                }\r\n                            }\r\n                        },\r\n                        options: scope.smartTableConfig\r\n                    };\r\n                    angular.isFunction(smartTable.onRegister) && smartTable.onRegister(apis);\r\n                };\r\n\r\n\r\n                var onSmartTableConfigChange = scope.$watch('smartTable', function (newConfig) {\r\n                    if (!newConfig) {\r\n                        return;\r\n                    }\r\n\r\n                    scope.smartTableConfig = newConfig;\r\n                    scope.enableRowSelection = scope.smartTableConfig.enableRowSelection ? true : false;\r\n                    scope.enableTreeView = scope.smartTableConfig.enableTreeView ? true : false;\r\n                    scope.showTreeView = scope.smartTableConfig.showTreeView ? true : false;\r\n                    scope.useExternalPagination = scope.smartTableConfig.useExternalPagination ? true : false;\r\n\r\n                    scope.smartTableConfig.columnDefs = newConfig.columnDefs ? newConfig.columnDefs : [];\r\n                    scope.smartTableConfig.data = newConfig.data ? newConfig.data : [];\r\n\r\n                    init('refresh');\r\n\r\n                    if (!areEventListenersAdded) {\r\n                        addEventListeners(scope.smartTable);\r\n                        areEventListenersAdded = true;\r\n                    }\r\n                });\r\n\r\n\r\n                var getColumnDef = function (srcConfig, colField) {\r\n                    for (var i = 0; i < srcConfig.length; i++) {\r\n                        if (srcConfig[i].field == colField) {\r\n                            return srcConfig[i];\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n\r\n\r\n                var getColumFilterText = function (colField) {\r\n                    for (var i = 0; i < scope.filters.length; i++) {\r\n                        if (scope.filters[i].filterKey == colField) {\r\n                            return scope.filters[i].filterText;\r\n                        }\r\n                    }\r\n                    return undefined;\r\n                };\r\n\r\n\r\n                var getReOrderedColumnDefs = function (colDefs) {\r\n                    colDefs = typeof colDefs == 'string' ? JSON.parse(colDefs) : colDefs;\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        if (angular.isUndefined(getColumnDef(colDefs, scope.smartTableConfig.columnDefs[i].field))) {\r\n                            return scope.smartTableConfig.columnDefs;\r\n                        }\r\n                    }\r\n                    var reOrderedColumns = [];\r\n                    var colDef;\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        colDef = getColumnDef(scope.smartTableConfig.columnDefs, colDefs[i].field);\r\n                        if (angular.isUndefined(colDef)) {\r\n                            return scope.smartTableConfig.columnDefs;\r\n                        }\r\n                        reOrderedColumns.push(angular.extend(colDef, {\r\n                            width: colDefs[i].width,\r\n                            visible: angular.isUndefined(colDefs[i].visible) ? colDef.visible : colDefs[i].visible,\r\n                            filterText: getColumFilterText(colDefs[i].field)\r\n                        }));\r\n                    }\r\n                    return reOrderedColumns;\r\n                };\r\n\r\n\r\n                var getReOrderedColumnDefsForState = function (colDefs) {\r\n                    var pinnedColumns = [];\r\n                    var unpinnedColumns = [];\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    return pinnedColumns.concat(unpinnedColumns);\r\n                };\r\n\r\n\r\n                function setFilterText() {\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        var field = scope.smartTableConfig.columnDefs[i].field;\r\n                        var filterDef = '';\r\n                        for (var j = 0; j < scope.filters.length; j++) {\r\n                            if (scope.filters[j] && scope.filters[j].filterKey == field) {\r\n                                filterDef = scope.filters[j];\r\n                                break;\r\n                            }\r\n                        }\r\n                        scope.smartTableConfig.columnDefs[i].filterText = filterDef ? filterDef.filterText : \"\";\r\n                    }\r\n                };\r\n\r\n                var refreshColumns = function () {\r\n                    var pinnedColumns = [];\r\n                    var unpinnedColumns = [];\r\n                    var pinnedContainerWidth = 0;\r\n\r\n                    setFilterText();\r\n\r\n                    var colDefs = angular.copy(scope.smartTableConfig.columnDefs);\r\n                    var tmpColDefs = [];\r\n                    var leftPos = (scope.enableRowSelection ? 40 : 0) + (scope.enableTreeView && scope.showTreeView ? 40 : 0);\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].visible == false) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            colDefs[i].pinnedLeft = false;\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    colDefs = pinnedColumns.concat(unpinnedColumns);\r\n                    pinnedColumns = [];\r\n                    unpinnedColumns = [];\r\n\r\n                    for (var i = 0; i < colDefs.length; i++) {\r\n                        if (colDefs[i].visible == false) {\r\n                            continue;\r\n                        }\r\n\r\n                        colDefs[i].left = leftPos;\r\n\r\n                        leftPos = leftPos + colDefs[i].width;\r\n\r\n                        if (colDefs[i].pinnedLeft) {\r\n                            pinnedContainerWidth = pinnedContainerWidth + (colDefs[i].visible ? (colDefs[i].width ? colDefs[i].width : '100') : 0);\r\n                            pinnedColumns.push(colDefs[i]);\r\n                        }\r\n                        else {\r\n                            unpinnedColumns.push(colDefs[i]);\r\n                        }\r\n                    }\r\n\r\n                    tmpColDefs = pinnedColumns.concat(unpinnedColumns);\r\n\r\n                    scope.colDefs = angular.copy(tmpColDefs);\r\n\r\n                    $(element.find('.smart-table-unpinned-container')).css('margin-left', pinnedContainerWidth + (scope.enableRowSelection ? 40 : 0) + (scope.enableTreeView && scope.showTreeView ? 40 : 0));\r\n\r\n                    scope.pinnedColumns = pinnedColumns;\r\n                    scope.unpinnedColumns = unpinnedColumns;\r\n\r\n                    scope.updateSmartTableColumnResizer = true;\r\n                    scope.updateSmartTableColumnSorter = true;\r\n                };\r\n\r\n\r\n                var init = function (eventType) {\r\n                    switch (eventType) {\r\n                        case 'refresh':\r\n                            pageIndex = 0;\r\n                            scope.rowsPerPage = \"10\";\r\n                            limit = parseInt(scope.rowsPerPage); // 10;\r\n                            recordsFetchedCount = 0;\r\n\r\n                            sortOrder = 1;\r\n\r\n                            scope.filters = [];\r\n                            scope.sortState = undefined;\r\n\r\n                            scope.isRowSelectionEnabled = true;\r\n                            scope.isAllRowSelected = false;\r\n\r\n                            refreshColumns();\r\n\r\n                            scope.updatePagination(false, true);\r\n                            break;\r\n\r\n                        case 'columnChange':\r\n                        case 'dataChange':\r\n                            refreshColumns();\r\n                            break;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.updatePagination = function (isNextButtonClicked, isRefresh) {\r\n                    if (scope.useExternalPagination) {\r\n                        if (isNextButtonClicked) {\r\n                            angular.isFunction(scope.listeners.nextButtonClick) && scope.listeners.nextButtonClick();\r\n                        }\r\n                        else {\r\n                            angular.isFunction(scope.listeners.previousButtonClick) && scope.listeners.previousButtonClick();\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (isRefresh) {\r\n                        scope.offset = 0;\r\n                        scope.limit = parseInt(scope.rowsPerPage); // 10\r\n                        pageIndex = 0;\r\n                    }\r\n                    else {\r\n                        if (isNextButtonClicked && pageIndex < totalPages) {\r\n                            pageIndex++;\r\n                        }\r\n                        else if (!isNextButtonClicked && pageIndex > 0) {\r\n                            pageIndex--;\r\n                        }\r\n                        scope.offset = pageIndex * limit;\r\n                        scope.limit = (pageIndex * limit) + limit;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.onRowsPerPageOptionChange = function (rowsPerPage) {\r\n                    limit = parseInt(rowsPerPage);\r\n                    scope.updatePagination(false, true);\r\n                };\r\n\r\n\r\n                scope.filterData = function (column) {\r\n                    for (var i = 0; i < scope.filters.length; i++) {\r\n                        if (scope.filters[i].filterKey == column.field) {\r\n                            if (column.filterText.trim() == '') {\r\n                                scope.filters.splice(i, 1);\r\n                            }\r\n                            else {\r\n                                scope.filters[i].filterText = column.filterText;\r\n                            }\r\n                            scope.updatePagination(false, true);\r\n                            return;\r\n                        }\r\n                    }\r\n                    scope.filters.push({\r\n                        filterKey: column.field,\r\n                        filterText: column.filterText,\r\n                        colDef: column,\r\n                        condition: column.hasOwnProperty('filter') && column.filter.condition\r\n                    });\r\n                    scope.updatePagination(false, true);\r\n                };\r\n\r\n\r\n                scope.sortData = function (column) {\r\n                    smartTableUtils.debounce.add(function () {\r\n                        //\tIf new column needs to be sorted, then reset sort flag\r\n                        if (scope.sortState && scope.sortState.column.field != column.field || sortOrder < -1) {\r\n                            sortOrder = 1;\r\n                        }\r\n                        refreshColumns();\r\n                        scope.updatePagination(false, true);\r\n                        scope.sortState = {\r\n                            column: column,\r\n                            order: sortOrder,\r\n                            condition: column.sortCondition\r\n                        };\r\n                        sortOrder--;\r\n                    }, 250);\r\n                };\r\n\r\n\r\n                scope.selectRow = function (row, rowIndex, shouldSelectedAllRows) {\r\n                    if (shouldSelectedAllRows) {\r\n                        scope.isAllRowSelected = !scope.isAllRowSelected;\r\n                        if (scope.isAllRowSelected) {\r\n                            arrSelectedRowsIndexes = [];\r\n                        }\r\n                        for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                            scope.smartTableConfig.data[i].$$isSelected = scope.smartTableConfig.data[i].$$isSelectable && scope.isAllRowSelected;\r\n                            if (scope.isAllRowSelected && scope.smartTableConfig.data[i].$$isSelected) {\r\n                                arrSelectedRowsIndexes.push(i);\r\n                            }\r\n                        }\r\n                        if (!scope.isAllRowSelected) {\r\n                            arrSelectedRowsIndexes = [];\r\n                        }\r\n                    }\r\n                    else {\r\n                        row.$$isSelected = row.$$isSelectable && !row.$$isSelected;\r\n                        if (row.$$isSelected) {\r\n                            arrSelectedRowsIndexes.push(rowIndex);\r\n                        }\r\n                        else {\r\n                            if (arrSelectedRowsIndexes.indexOf(rowIndex) > -1) {\r\n                                arrSelectedRowsIndexes.splice(arrSelectedRowsIndexes.indexOf(rowIndex), 1);\r\n                            }\r\n                        }\r\n                        scope.isAllRowSelected = arrSelectedRowsIndexes.length == scope.smartTableConfig.data.length;\r\n                    }\r\n\r\n                    if (/*rowIndex > -1 &&*/ angular.isFunction(scope.listeners.rowSelectionChanged)) {\r\n                        scope.listeners.rowSelectionChanged({\r\n                            row: {\r\n                                entity: row,\r\n                                index: rowIndex,\r\n                                isSelected: scope.isAllRowSelected || (row && row.$$isSelected)\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n\r\n                scope.expandRow = function (row, rowIndex, shouldExpandAllRows) {\r\n                    if (shouldExpandAllRows) {\r\n                        for (var i = 0; i < scope.smartTableConfig.data.length; i++) {\r\n                            if (scope.smartTableConfig.data[i].$$treeLevel == 0) {\r\n                                scope.smartTableConfig.data[i].$$isExpanded = !scope.isAllRowExpanded\r\n                            }\r\n                        }\r\n                        scope.isAllRowExpanded = !scope.isAllRowExpanded;\r\n                        scope.updatePagination(false, true);\r\n                    }\r\n                    else {\r\n                        if (row.$$treeLevel > 0) {\r\n                            return;\r\n                        }\r\n                        row.$$isExpanded = !row.$$isExpanded;\r\n                        scope.isAllRowExpanded = false;\r\n                    }\r\n                };\r\n\r\n\r\n                scope.onColumnSort = function (e) {\r\n                    var activeColDefs = angular.copy(scope.colDefs);\r\n                    var startIndex, endIndex, toBeSorted;\r\n\r\n                    var startCol = activeColDefs[e.startIndex];\r\n                    var endCol = activeColDefs[e.endIndex];\r\n\r\n                    if (startCol.pinnedLeft != endCol.pinnedLeft || startCol.field == endCol.field) {\r\n                        return;\r\n                    }\r\n\r\n                    scope.$apply(function () {\r\n                        for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                            if (scope.smartTableConfig.columnDefs[i].field == startCol.field) {\r\n                                startIndex = i;\r\n                                if (angular.isDefined(endIndex)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (scope.smartTableConfig.columnDefs[i].field == endCol.field) {\r\n                                endIndex = i;\r\n                                if (angular.isDefined(startIndex)) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var tmpColDefs = angular.copy(scope.smartTableConfig.columnDefs);\r\n                        var item = tmpColDefs.splice(startIndex, 1);\r\n                        tmpColDefs.splice(endIndex, 0, item[0]);\r\n                        scope.smartTableConfig.columnDefs = angular.copy(tmpColDefs);\r\n                        tmpColDefs = null;\r\n\r\n                        init('columnChange');\r\n                        angular.isFunction(scope.listeners.columnRefresh) && scope.listeners.columnRefresh(scope.colDefs);\r\n                    });\r\n                };\r\n\r\n\r\n                scope.onColumnResize = function (e) {\r\n                    var activeColDefs = angular.copy(scope.colDefs);\r\n                    var colToBeResized;\r\n\r\n                    for (var i = 0; i < activeColDefs.length; i++) {\r\n                        if (e.columnIndex == i) {\r\n                            colToBeResized = activeColDefs[i];\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (var i = 0; i < scope.smartTableConfig.columnDefs.length; i++) {\r\n                        if (scope.smartTableConfig.columnDefs[i].field == colToBeResized.field) {\r\n                            scope.smartTableConfig.columnDefs[i].width = e.width;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    init('columnChange');\r\n                    angular.isFunction(scope.listeners.columnRefresh) && scope.listeners.columnRefresh(scope.colDefs);\r\n                };\r\n\r\n\r\n                var watchers;\r\n\r\n                scope.onSmartTableRenderingStart = function () {\r\n                    watchers = scope.$$watchers;\r\n                    scope.$$watchers = [];\r\n                    // window.startTime = performance.now();\r\n                    // console.log('rendering start');\r\n                };\r\n\r\n                scope.onSmartTableRenderingDone = function () {\r\n                    if (watchers) {\r\n                        scope.$$watchers = watchers;\r\n                    }\r\n                    // discard our copy of the watchers\r\n                    watchers = void 0;\r\n                    // console.log('rendering done in => ' + ((performance.now() - window.startTime) / 1000) + ' seconds');\r\n                };\r\n\r\n                var onDataChange = smartTableUtils.on('dataChange', function (e) {\r\n                    if (angular.isDefined(e.totalRecords) && e.smartTableId == scope.smartTableId) {\r\n                        totalPages = Math.ceil(e.totalRecords / limit) - 1;\r\n                        scope.displayedRecords = e.totalRecords;\r\n                    }\r\n                });\r\n\r\n                var onPageIndexChanged = smartTableUtils.on('pageIndexChanged', function (e) {\r\n                    if (e.smartTableId == scope.smartTableId) {\r\n                        scope.currentPageDataLength = e.currentPageDataLength;\r\n                    }\r\n                });\r\n\r\n                var onSmartTableCurrentPageDataLength = scope.$watch('currentPageDataLength', function (newLength) {\r\n                    if (newLength == 0 && pageIndex > 0 && !isStatePageIndexSet) {\r\n                        scope.updatePagination(false, false);\r\n                    }\r\n                    isStatePageIndexSet = false;\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onSmartTableConfigChange();\r\n                    onPageIndexChanged();\r\n                    onSmartTableCurrentPageDataLength();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/smartTable/smartTableTemplate.html'\r\n        };\r\n    }]);\r\n\r\n    app.service('smartTableUtils', ['$timeout', function ($timeout) {\r\n        var _this = this;\r\n\r\n        /*\r\n         *  Alternative of broadcast event\r\n         */\r\n        var arrEvents = [];\r\n        var eventCounter = 0;\r\n\r\n\r\n        /*\r\n         *  Deregister an event or events\r\n         */\r\n        this.removeEventListener = function (event) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (arrEvents[i].eventName == event.eventName && arrEvents[i].eventId == event.eventId) {\r\n                    arrEvents[i].callback = null;\r\n                    arrEvents.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n         *  Register a listener\r\n         */\r\n        this.on = function (eventName, callback) {\r\n            eventCounter++;\r\n            arrEvents.push({\r\n                eventName: eventName,\r\n                callback: callback,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            });\r\n            var objEvent = {\r\n                eventName: eventName,\r\n                eventId: 'smart-broadcast-event-' + eventCounter\r\n            };\r\n            return function () {\r\n                _this.removeEventListener(objEvent);\r\n            };\r\n        };\r\n\r\n\r\n        /*\r\n         *  Fire an event\r\n         */\r\n        this.broadcast = function (eventName, data) {\r\n            for (var i = 0; i < arrEvents.length; i++) {\r\n                if (eventName == arrEvents[i].eventName) {\r\n                    angular.isFunction(arrEvents[i].callback) && arrEvents[i].callback(data);\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n\t     *\tDebouncer logic\r\n\t\t */\r\n        var functionTimeout, isAngularTimeout;\r\n\r\n        this.debounce = {\r\n            add: function (callback, duration, isDigestCycleToBeTriggered) {\r\n                if (functionTimeout) {\r\n                    if (angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false) {\r\n                        clearTimeout(functionTimeout);\r\n                    }\r\n                    else {\r\n                        $timeout.cancel(functionTimeout);\r\n                    }\r\n                }\r\n                functionTimeout = angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false ? setTimeout(function () {\r\n                    angular.isFunction(callback) && callback();\r\n                }, duration ? duration : 1000) : $timeout(function () {\r\n                    angular.isFunction(callback) && callback();\r\n                }, duration ? duration : 1000);\r\n                isAngularTimeout = !angular.isDefined(isDigestCycleToBeTriggered) && isDigestCycleToBeTriggered == false;\r\n            },\r\n            cancel: function () {\r\n                if (isAngularTimeout) {\r\n                    $timeout.cancel(functionTimeout);\r\n                }\r\n                else {\r\n                    clearTimeout(functionTimeout);\r\n                }\r\n                functionTimeout = null;\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableCellStyle', ['$compile', '$timeout',\r\n\tfunction () {\r\n\t    return {\r\n\t        restrict: 'A',\r\n\t        link: function (scope, element, attrs) {\r\n\t            //\tto watch the rendering changes e.g. sort or filter\r\n\t            var onColumnConfigChange = scope.$watch('column', function (n) {\r\n\t                init();\r\n\t            });\r\n\r\n\t            var init = function () {\r\n\t                element.removeClass('smart-table-pinned-column smart-table-unpinned-column');\r\n\t                if (scope.column.pinnedLeft) {\r\n\t                    element.addClass('smart-table-pinned-column');\r\n\t                    element.css('left', scope.column.left);\r\n\t                    element.css('width', scope.column.width);\r\n\t                }\r\n\t                else {\r\n\t                    element.addClass('smart-table-unpinned-column');\r\n\t                }\r\n\t            };\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                onColumnConfigChange();\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t}]);\r\n\r\n    app.directive('smartTableHeaderCellTextContainer', ['$compile', '$timeout',\r\n\tfunction () {\r\n\t    return {\r\n\t        restrict: 'C',\r\n\t        link: function (scope, element, attrs) {\r\n\t            //\tto watch the rendering changes e.g. sort or filter\r\n\t            var onColumnConfigChange = scope.$watch('column', function (n) {\r\n\t                init();\r\n\t            });\r\n\r\n\t            var init = function () {\r\n\t                element.css('width', scope.column.width - (scope.column.pinnedLeft ? 12 : 0));\r\n\t            };\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                onColumnConfigChange();\r\n\t            });\r\n\t        }\r\n\t    };\r\n\t}]);\r\n\r\n    app.directive('smartTableColumnResizer', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var isMouseDown, canBeResized, resizer, leftPosLimit = 0, columnIndex, maxWidth, width, newWidth;\r\n\r\n                var onMouseMove = function (e) {\r\n                    if (isMouseDown) {\r\n                        if (e.clientX > leftPosLimit && (angular.isUndefined(maxWidth) || (angular.isDefined(maxWidth) && e.clientX - leftPosLimit < maxWidth))) {\r\n                            resizer.css({\r\n                                left: e.clientX\r\n                            });\r\n                        }\r\n                        document.getSelection().removeAllRanges();\r\n                    }\r\n                    else {\r\n                        if (e.offsetX > (($(this).outerWidth(true) - 2) - 5) && e.offsetX < (($(this).outerWidth(true) - 2))) {\r\n                            $(this).css('cursor', 'col-resize');\r\n                        }\r\n                        else {\r\n                            $(this).css('cursor', 'default');\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var onMouseUp = function (e) {\r\n                    if (isMouseDown) {\r\n                        resizer.off('mousemove', onMouseMove);\r\n                        resizer.off('mouseup', onMouseUp);\r\n                        resizer.remove();\r\n                        canBeResized = false;\r\n                        isMouseDown = false;\r\n                        newWidth = (angular.isDefined(maxWidth) && e.clientX - leftPosLimit > maxWidth) ? maxWidth : e.clientX - leftPosLimit;\r\n\r\n                        if (Math.abs(newWidth - width) > 5) {\r\n                            scope.$apply(function () {\r\n                                scope.onColumnResize({\r\n                                    columnIndex: columnIndex,\r\n                                    width: newWidth < 20 ? 20 : newWidth\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var onMouseDown = function (e) {\r\n                    if (e.offsetX >= (($(this).outerWidth(true) - 2) - 5) && e.offsetX < (($(this).outerWidth(true) - 2))) {\r\n                        $(this).css('cursor', 'col-resize');\r\n                        leftPosLimit = $(this).offset().left;\r\n                        resizer = $(document.createElement('div'));\r\n                        columnIndex = parseInt($(this).attr('column-index'));\r\n                        maxWidth = scope.colDefs[columnIndex].maxWidth;\r\n                        width = scope.colDefs[columnIndex].width;\r\n\r\n                        resizer.css({\r\n                            position: 'absolute',\r\n                            left: $(this).offset().left + $(this).outerWidth(true),\r\n                            top: $(this).offset().top,\r\n                            width: '1px',\r\n                            height: $(this).closest('table').outerHeight(true),\r\n                            'z-index': 1000,\r\n                            border: 'dotted'\r\n                        });\r\n\r\n                        resizer.on('mousemove', onMouseMove);\r\n                        resizer.on('mouseup', onMouseUp);\r\n\r\n                        $(document.body).append(resizer);\r\n\r\n                        isMouseDown = true;\r\n                    }\r\n                    else {\r\n                        $(this).css('cursor', 'default');\r\n                    }\r\n                };\r\n\r\n                var bindEvents = function () {\r\n                    setTimeout(function () {\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousemove', onMouseMove);\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousemove', onMouseMove);\r\n                    }, 250);\r\n                };\r\n\r\n                scope.$watch('updateSmartTableColumnResizer', function (newValue) {\r\n                    if (newValue) {\r\n                        bindEvents();\r\n                        scope.updateSmartTableColumnResizer = false;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableColumnSorter', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var isMouseDown, startX, offsetX, isPinnedColumn, clone, mouseDownTimeout;\r\n\r\n                var onMouseMove = function (e) {\r\n                    if (isMouseDown) {\r\n                        $(clone).css({\r\n                            left: e.clientX - offsetX\r\n                        });\r\n                        document.getSelection().removeAllRanges();\r\n                    }\r\n                };\r\n\r\n                var onMouseUp = function (e) {\r\n                    $(clone).off('mousemove', onMouseMove);\r\n                    $(clone).off('mouseup', onMouseUp);\r\n                    $(clone).off('mouseleave', onMouseUp);\r\n                    $(clone).remove();\r\n\r\n                    if (isMouseDown && e.type == 'mouseup') {\r\n                        var startIndex, endIndex;\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').each(function (index, th) {\r\n                            if (angular.isUndefined(startIndex) && startX > $(th).offset().left && startX < $(th).offset().left + $(th).outerWidth(true)) {\r\n                                startIndex = index;\r\n                            }\r\n                            else if (angular.isUndefined(endIndex) && e.clientX > $(th).offset().left && e.clientX < $(th).offset().left + $(th).outerWidth(true)) {\r\n                                endIndex = index;\r\n                            }\r\n                        });\r\n\r\n                        if (angular.isDefined(startIndex) && angular.isDefined(endIndex)) {\r\n                            scope.onColumnSort({\r\n                                startIndex: startIndex,\r\n                                endIndex: endIndex,\r\n                                isPinnedColumn: isPinnedColumn\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    isMouseDown = false;\r\n\r\n                    if (mouseDownTimeout) {\r\n                        clearTimeout(mouseDownTimeout);\r\n                        mouseDownTimeout = undefined;\r\n                    }\r\n                };\r\n\r\n                var onMouseDown = function (e) {\r\n                    if ($(e.target).closest('.smart-table-search-container').length > 0 || e.offsetX >= $(this).outerWidth(true) - 20) {\r\n                        return;\r\n                    }\r\n\r\n                    var $this = this;\r\n\r\n                    mouseDownTimeout = setTimeout(function () {\r\n                        startX = e.clientX;\r\n                        offsetX = e.offsetX;\r\n                        isMouseDown = true;\r\n\r\n                        isPinnedColumn = $(e.target).closest('.smart-table-pinned-column').length > 0;\r\n                        clone = $($this).clone();\r\n\r\n                        $(clone).on('mousemove', onMouseMove);\r\n                        $(clone).on('mouseup', onMouseUp);\r\n                        $(clone).on('mouseleave', onMouseUp);\r\n\r\n                        $(clone).css({\r\n                            position: 'absolute',\r\n                            left: $($this).offset().left,\r\n                            top: $($this).offset().top,\r\n                            width: $($this).outerWidth(true),\r\n                            height: $($this).outerHeight(true),\r\n                            'z-index': 1000,\r\n                            border: 'dotted'\r\n                        });\r\n\r\n                        $(document.body).append(clone);\r\n\r\n                        mouseDownTimeout = undefined;\r\n                    }, 500);\r\n                };\r\n\r\n                var bindEvents = function () {\r\n                    setTimeout(function () {\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mouseup', onMouseUp);\r\n                        element.find('th').not('.smart-table-icon-holder').off('mousemove', onMouseMove);\r\n\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousedown', onMouseDown);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mousemove', onMouseMove);\r\n                        element.find('th').not('.smart-table-icon-holder').on('mouseup', onMouseUp);\r\n                    }, 250);\r\n                };\r\n\r\n                scope.$watch('updateSmartTableColumnSorter', function (newValue) {\r\n                    if (newValue) {\r\n                        bindEvents();\r\n                        scope.updateSmartTableColumnSorter = false;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n    app.directive('smartTableCell', ['$rootScope', '$compile', '$timeout', 'smartTableUtils', '$filter', '$translate', 'APPCONSTANTS', 'httpService',\r\n\tfunction ($rootScope, $compile, $timeout, smartTableUtils, $filter, $translate, APPCONSTANTS, httpService) {\r\n\t    return {\r\n\t        restrict: 'EA',\r\n\t        replace: true,\r\n\t        link: function (scope, element, attrs) {\r\n\t            var tabIndex, oldCellValue, oldCellClass, tmpCellValue, tmpInputValue, tmpValueForAutoSuggest;\r\n\t            var isInEditMode = false, selectedOption, selectedDate;\r\n\r\n\t            var templateContainer, cellClassElement = $(element.closest('.smart-table-row-cell'));\r\n\t            var hasStopEditCalled = false, isLineNumberAssigned = false, isInputFieldFocused = false, isRenderingToBeSkipped = false, isFocusToBeSkipped = false;\r\n\r\n\t            var appScope = scope.$parent.$parent.$parent;\r\n\t            var smartTableScope = scope.$parent.$parent;\r\n\r\n\t            //\tto watch the rendering changes e.g. sort or filter, col def change\r\n\t            var onCellDataAndColDefChange = scope.$watchGroup(['value', 'column'], function (n) {\r\n\t                tabIndex = (scope.pinnedColumns.length + scope.unpinnedColumns.length) * scope.$parent.$index + scope.$index;\r\n\t                element.attr('id', smartTableScope.smartTableId + '-smart-table-cell-' + tabIndex);\r\n\t                element.attr('tabindex', tabIndex);\r\n\t                oldCellClass = undefined;\r\n\t                init(false, true);\r\n\t                if (angular.isDefined(smartTableScope.pendingFocus) && (smartTableScope.pendingFocus.rowIndex - smartTableScope.offset) == scope.rowIndex && smartTableScope.pendingFocus.columnIndex == scope.columnIndex) {\r\n\t                    element.trigger('focus');\r\n\t                    scope.pendingFocus = undefined;\r\n\t                }\r\n\t            });\r\n\r\n\t            var init = function (isRowDataUpdated, toBeTranslated) {\r\n\t                scope.row = {\r\n\t                    entity: scope.value\r\n\t                };\r\n\r\n\t                if (angular.isDefined(scope.column) && scope.column.uiType == 'editable' && scope.column.attributes.type == 'date' && isRegionalSettingEnabled) {\r\n\t                    scope.column.attributes.format = moment.localeData().longDateFormat('L').toLowerCase().replace(/m/g, 'M');\r\n\t                }\r\n\r\n\t                scope.enableCellEdit = angular.copy(scope.column.enableCellEdit);\r\n\r\n\t                cellClassElement.removeClass('smart-table-row-cell-invalid smart-table-row-cell-disabled smart-table-row-cell-canceled');\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css({\r\n\t                    border: '',\r\n\t                    width: scope.column.width + (scope.column.pinnedLeft ? -2 : 10)\r\n\t                });\r\n\r\n\t                if (!isRowDataUpdated) {\r\n\t                    //\trendering start callback\r\n\t                    if (!smartTableScope.hasSmartTableRenderingStarted) {\r\n\t                        scope.onSmartTableRenderingStart();\r\n\t                        smartTableScope.hasSmartTableRenderingStarted = true;\r\n\t                    }\r\n\r\n\t                    scope.pinned = attrs.pinned == 'true';\r\n\r\n\t                    scope.rowIndex = scope.$parent.$index;\r\n\t                    scope.columnIndex = scope.$index;\r\n\r\n\t                    if (scope.column.autoIncrement && !smartTableScope.useExternalPagination) {\r\n\t                        if (angular.isDefined(scope.row.entity.$$nodeIndex)) {\r\n\t                            updateCell(scope.row.entity, scope.column.field, scope.row.entity.$$nodeIndex + 1);\r\n\t                        }\r\n\t                        else {\r\n\t                            updateCell(scope.row.entity, scope.column.field, scope.row.entity.$$index + 1);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (angular.isDefined(scope.column.attributes) && scope.column.attributes.type == \"autocomplete\" &&\r\n                    angular.isDefined(scope.column.attributes.displayformat) && angular.isDefined(scope.column.field)) {\r\n\t                    tmpValueForAutoSuggest = getObjectValueForAutoSuggest(scope.row.entity, scope.column.field);\r\n\t                    if (angular.isObject(tmpValueForAutoSuggest)) {\r\n\t                        //scope.COL_FIELD = getDisplayData(getObjectValue(scope.row.entity, scope.column.field.split('.')[0]), scope.column.attributes.displayformat);\r\n\t                        scope.COL_FIELD = getDisplayData(tmpValueForAutoSuggest, scope.column.attributes.displayformat);\r\n\t                    }\r\n\t                    else {\r\n\t                        scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                }\r\n\r\n\t                if (angular.isFunction(scope.column.cellClass) /*&& oldCellValue != scope.COL_FIELD*/) {\r\n\t                    var tmpClass = scope.column.cellClass({}, { entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex, value: getObjectValue(scope.row.entity, scope.column.field) });\r\n\t                    if (angular.isObject(tmpClass)) {\r\n\t                        if (cellClassElement.find('.smart-table-row-cell-info-icon').length == 0) {\r\n\t                            var iconTemplate = '';\r\n\t                            switch (tmpClass.type) {\r\n\t                                case 'smart-table-row-cell-info':\r\n\t                                    iconTemplate += '<svg><use xlink:href=\"#icon_Info\"></use></svg>';\r\n\t                                    break;\r\n\t                                default:\r\n\t                                    iconTemplate += '<svg><use xlink:href=\"#icon_Info\"></use></svg>';\r\n\t                                    break;\r\n\t                            }\r\n\t                            cellClassElement.find('.smart-table-cell-text').append('<i class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + tmpClass.message + '\">' + iconTemplate + '</i>');\r\n\t                        }\r\n\t                        cellClassElement.addClass(tmpClass.class);\r\n\t                    }\r\n\t                    else {\r\n\t                        cellClassElement.addClass(tmpClass);\r\n\t                    }\r\n\t                    oldCellClass = tmpClass;\r\n\t                }\r\n\r\n\t                if (angular.isFunction(scope.column.cellEditableCondition)) {\r\n\t                    scope.enableCellEdit = scope.column.cellEditableCondition({ row: scope.row, index: scope.rowIndex, col: { colDef: scope.column, index: scope.columnIndex }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element });\r\n\t                }\r\n\r\n\t                updateCellTemplate(true, toBeTranslated);\r\n\r\n\t                if (!isRowDataUpdated) {\r\n\t                    //\trendering done callback\r\n\t                    if (scope.$parent.$last && scope.$last) {\r\n\t                        scope.onSmartTableRenderingDone();\r\n\t                        smartTableScope.hasSmartTableRenderingStarted = false;\r\n\t                    }\r\n\t                }\r\n\t            };\r\n\r\n\t            // init();\r\n\r\n\r\n\t            //  Update date\r\n\t            var updateDate = function (tmpDate) {\r\n                    if (selectedDate == '/Date(' + ((tmpDate.unix() * 1000) + 43200000) + '+0000)/') {\r\n\t                    return;\r\n\t                }\r\n                    selectedDate = '/Date(' + ((tmpDate.unix() * 1000) + 43200000) + '+0000)/';\r\n\t                element.find('input').val($filter('smartDateFormat')(selectedDate, scope.column.attributes.format));\r\n\t                if (scope.column.isRegUpdateCol) {\r\n\t                    //\tcell change listener\r\n\t                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: selectedDate });\r\n\t                }\r\n\t            };\r\n\r\n\r\n\t            //  Pop-up listeners\r\n\t            var onPopupOpened, onPopupClosed;\r\n\r\n\t            var addPopupListeners = function () {\r\n\t                var oldCellModel, newCellModel;\r\n\r\n\t                onPopupOpened = $rootScope.$on(\"popupOpened\", function () {\r\n\t                    oldCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                });\r\n\r\n\t                onPopupClosed = $rootScope.$on(\"popupClosed\", function () {\r\n\t                    if (angular.isDefined(scope.column.debounce) && scope.column.debounce > 0) {\r\n\t                        setTimeout(function () {\r\n\t                            newCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                            updateCellValueForPopup(oldCellModel, newCellModel);\r\n\t                        }, scope.column.debounce);\r\n\t                    }\r\n\t                    else {\r\n\t                        newCellModel = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                        updateCellValueForPopup(oldCellModel, newCellModel);\r\n\t                    }\r\n\r\n\t                    element.trigger('focus');\r\n\t                });\r\n\t            };\r\n\r\n\r\n\t            var updateCellValueForPopup = function (oldCellModel, newCellModel) {\r\n\t                if (!angular.equals(oldCellModel, newCellModel)) {\r\n\t                    scope.COL_FIELD = newCellModel;\r\n\t                    updateCellTemplate(true, true);\r\n\t                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }\r\n\t            };\r\n\r\n\r\n\t            var removePopupListeners = function () {\r\n\t                angular.isFunction(onPopupOpened) && onPopupOpened();\r\n\t                angular.isFunction(onPopupClosed) && onPopupClosed();\r\n\t            };\r\n\r\n\t            function triggerTaxesPopup() {\r\n\t                element.trigger(\"blur\");\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t            }\r\n\t            function triggerAdhocPopup() {            \r\n\t               \r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t                event.stopPropagation();\r\n\t                event.preventDefault();\r\n\t            }\r\n\t            function triggerSupplierCardPopup() {\r\n\r\n\t                smartTableUtils.debounce.add(function () {\r\n\t                    window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                    angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }, 100);\r\n\t                event.stopPropagation();\r\n\t                event.preventDefault();\r\n\t            }\r\n\t            var updateCellTemplate = function (toBeFiltered, toBeTranslated) {\r\n\t                if (angular.isFunction(scope.column.cellTemplate)) {\r\n\t                    tmpCellValue = scope.column.cellTemplate({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                    if (scope.column.uiType == 'popup' && angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\t                    element.find('.smart-table-cell-template').html((scope.column.uiType == 'popup' ? '<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' : '<span>') + tmpCellValue + (scope.column.uiType == 'popup' ? '</a>' : '</span>'));\r\n\t                    element.parent().attr('title', tmpCellValue);\r\n\t                    return;\r\n\t                }\r\n\r\n\t                if (scope.column.uiType == 'editable') {\r\n\t                    switch (scope.column.attributes.type) {\r\n\t                        case 'number':\r\n\t                            if (toBeFiltered && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        case 'date':\r\n\t                            if (toBeFiltered) {\r\n\t                                scope.COL_FIELD = scope.COL_FIELD == '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : $filter('smartDateFormat')(scope.COL_FIELD, scope.column.attributes.format);\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        default:\r\n\t                            if (toBeTranslated && scope.column.enableTranslation) {\r\n\t                                scope.COL_FIELD = $translate.instant(scope.COL_FIELD);\r\n\t                            }\r\n\t                            if (toBeFiltered && angular.isDefined(scope.column.attributes.maxlength) && angular.isDefined(scope.COL_FIELD)) {\r\n\t                                scope.COL_FIELD = scope.COL_FIELD.substr(0, scope.column.attributes.maxlength);\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                    tmpCellValue = (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD);\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                    if (scope.column.uiType == \"editable\" && scope.column.adhocpopup && scope.column.adhocpopup===\"adhocpopup\") {                            \t                      \r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Common_AddAdhocLocation\") + '\"><svg><use xlink:href=\"#icon_Location\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerAdhocPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\t                      \r\n\t                    }\r\n\t                    else if (scope.column.uiType == \"editable\" && scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Req_SupplierName\") + '\"><svg><use xlink:href=\"#icon_ContactCard\"></use></svg></i>')\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerSupplierCardPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').append(icon);\r\n\t                    }\r\n\t                    if (scope.row.entity.RequisitionSource != undefined && scope.row.entity.RequisitionSource == 3 && scope.column.uiType == \"editable\" && scope.column.Changereq && scope.column.Changereq === \"Changereq\") {\r\n\t                        if (scope.row.entity.IsAddedFromRequistion != undefined) {\r\n\t                            if (scope.row.entity.IsAddedFromRequistion == true) {\r\n\t                            }\r\n\t                            else {\r\n\t                                var icon = $('<i  style=\"float: right\" class=\"icon small red-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"\"><svg><use xlink:href=\"#icon_AddToDefault \"></use></svg></i>')\r\n\t                                element.find('.smart-table-cell-template').append(icon);\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else if (scope.column.uiType == 'popup') {\r\n\t                    tmpCellValue = (scope.COL_FIELD === '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null) ? (scope.column.placeHolder ? scope.column.placeHolder : $translate.instant('P2P_Common_Add')) : scope.COL_FIELD;\r\n\t                    if (angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\r\n\t                    element.find('.smart-table-cell-template').html('<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' + tmpCellValue + '</a>');\r\n\t                }\r\n\t                else if (scope.column.uiType == 'dropdown') {\r\n\t                    tmpCellValue = toBeTranslated && scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : scope.COL_FIELD;\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                }\r\n\t                else if (scope.column.uiType == 'taxesPopup') {\r\n\t                    tmpCellValue = scope.row.entity[scope.column.field];\r\n\r\n\t                    if (angular.isNumber(tmpCellValue)) {\r\n\t                        if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                        }\r\n\t                        else {\r\n\t                            tmpCellValue = $filter('minPrecisionHandler')(tmpCellValue);\r\n\t                        }\r\n\t                    }\t                    \r\n\t\r\n\t                    element.find('.smart-table-cell-template').html('<a' + (scope.column.enableCellEdit && scope.enableCellEdit ? '' : ' class=\"disabled\" ') + '>' + tmpCellValue + '</a>');\r\n\t                    if (scope.row.entity.isTaxExempt) {\r\n\t                        var taxExempt = $('<a>' + $translate.instant(\"P2P_Common_Exempt\") + '</a>');\r\n\t                        taxExempt.mousedown(function () {\r\n\t                            triggerTaxesPopup();\r\n\t                        })\r\n\t                        element.find('.smart-table-cell-template').html(taxExempt);\r\n\t                    }\t                    \r\n\t                    var icon = $('<i style=\"float: right\" class=\"icon iconSmall tooltipped\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"ADD\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i>')\r\n\t                    icon.mousedown(function () {\r\n\t                        triggerTaxesPopup();\r\n\t                    })\r\n\t                    element.find('.smart-table-cell-template').append(icon);\r\n                        element.parent().attr('title', tmpCellValue);\r\n\t                }\r\n\t                else {\r\n\t                    if (toBeFiltered && scope.column.attributes && scope.column.attributes.type == 'number' && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                        scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                    }\r\n\t                    tmpCellValue = toBeTranslated && scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD);\r\n\t                    element.find('.smart-table-cell-template').html('<span>' + tmpCellValue + '</span>');\r\n\t                }\r\n\t                element.parent().attr('title', tmpCellValue);\r\n\t            };\r\n\r\n\r\n\t            var getEditableTemplate = function () {\r\n\t                var template = '<div>';\r\n\t                switch (scope.column.uiType) {\r\n\t                    case 'editable':\r\n\t                        switch (scope.column.attributes.type) {\r\n\t                            case 'number':\r\n\t                                tmpInputValue = parseFloat(getObjectValue(scope.row.entity, scope.column.field));\r\n\r\n\t                                if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                    tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1])\r\n\t                                }\r\n\r\n\t                                template += '<input type=\"number\" autocomplete=\"off\" value=\"' + (tmpInputValue == 0 ? '' : tmpInputValue) + '\">';\r\n\t                                break;\r\n\r\n\t                            case 'date':\r\n\t                                template += '<input type=\"text\" autocomplete=\"off\" value=\"' + (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD) + '\" placeholder=\"' + (scope.column.attributes.format ? (scope.column.attributes.format).toUpperCase() : 'MM/DD/YYYY') + '\">';\r\n\t                                break;\r\n\r\n\t                            default:\r\n\t                                template += '<input type=\"text\" autocomplete=\"off\" value=\"' + (scope.COL_FIELD == undefined || scope.COL_FIELD == null ? '' : scope.COL_FIELD) + '\"' + (angular.isDefined(scope.column.attributes.maxlength) ? 'maxlength=\"' + scope.column.attributes.maxlength : '\"') + '>';\r\n\t                                break;\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'dropdown':\r\n\t                    case 'select':\r\n\t                        template += '<select style=\"display: block !important;\">';\r\n\t                        for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                            template += '<option ' + ($translate.instant(scope.column.attributes.options[i][scope.column.attributes.dataKey] + '') == $translate.instant(scope.COL_FIELD + '') ? 'selected' : '') + ' value=\"' + $translate.instant(scope.column.attributes.options[i][scope.column.attributes.idKey] + '') + '\">' + $translate.instant(scope.column.attributes.options[i][scope.column.attributes.dataKey] + '') + '</option>';\r\n\t                        }\r\n\t                        template += '</select>';\r\n\t                        break;\r\n\r\n\t                        //case 'popup':\r\n\t                        //    template += '<div><a>' + ((scope.COL_FIELD === '' || scope.COL_FIELD == undefined || scope.COL_FIELD == null) ? (scope.column.placeHolder ? scope.column.placeHolder : 'ADD') : scope.COL_FIELD) + '</a></div>';\r\n\t                        //    break;\r\n\t                }\r\n\t                return template + '</div>'\r\n\t            };\r\n\r\n\r\n\t            var onElementKeyDown = function (e) {\r\n\t                window.lastKeyPressed = e.keyCode;\r\n\t                switch (e.keyCode) {\r\n\t                    //\tspace key\r\n\t                    case 32:\r\n\t                        if (scope.column.uiType == 'editable' && element.find('input').length > 0) {\r\n\t                            if (element.find('input:focus').length > 0) {\r\n\t                                isInputFieldFocused = true;\r\n\t                            }\r\n\t                            if (scope.column.attributes.type == 'date') {\r\n\t                                element.find('input').focus();\r\n\t                                e.stopPropagation();\r\n\t                                return false;\r\n\t                            }\r\n\t                            else {\r\n\t                                if (!isInputFieldFocused) {\r\n\t                                    isInputFieldFocused = true;\r\n\r\n\t                                    //if (element.find('input:focus').length == 0) {\r\n\t                                    tmpInputValue = element.find('input').val();\r\n\t                                    element.find('input').focus().val('').val(tmpInputValue);\r\n\t                                    //if (element.find('input').val().trim().length == 0) {\r\n\t                                    e.stopPropagation();\r\n\t                                    return false;\r\n\t                                    //}\r\n\t                                    //}\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'dropdown' && element.find('select').length > 0) {\r\n\t                            element.find('select').focus();\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'popup' && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }) && scope.column.isRegClickCol) {\r\n\t                            smartTableUtils.debounce.add(function () {\r\n\t                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                                //\tcell click listener\r\n\t                                angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                            }, 100);\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        else {\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                        //\tarrow keys\r\n\t                    case 37:\r\n\t                        if (!isInputFieldFocused) {\r\n\t                            if (element.find('input:focus').length > 0) {\r\n\t                                isInputFieldFocused = true;\r\n\t                                return;\r\n\t                            }\r\n\r\n\t                            if (scope.rowIndex == 0 && scope.columnIndex == 0) { }\r\n\t                            else {\r\n\t                                $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) - 1)).focus();\r\n\t                                scope.stopEdit();\r\n\t                            }\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                    case 39:\r\n\t                    case 9:\r\n\t                        if (e.keyCode == 39) {\r\n\t                            if (!isInputFieldFocused) {\r\n\t                                if (element.find('input:focus').length > 0) {\r\n\t                                    isInputFieldFocused = true;\r\n\t                                    return;\r\n\t                                }\r\n\r\n\t                                if (scope.$parent.$last && scope.$last) {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-0').focus();\r\n\t                                }\r\n\t                                else {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) + 1)).focus();\r\n\t                                }\r\n\t                                scope.stopEdit();\r\n\t                                e.stopPropagation();\r\n\t                                return false;\r\n\t                            }\r\n\t                        }\r\n\t                        else {\r\n\t                            if (e.shiftKey) {\r\n\t                                if (scope.rowIndex == 0 && scope.columnIndex == 0) {\r\n\t                                }\r\n\t                                else {\r\n\t                                    $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) - 1)).focus();\r\n\t                                    scope.stopEdit();\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + (parseInt(tabIndex) + 1)).focus();\r\n\t                                scope.stopEdit();\r\n\t                            }\r\n\t                            e.stopPropagation();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                    case 38:\r\n\t                        // if(!$(e.target).is('select')) {\r\n\t                        if (scope.rowIndex > 0) {\r\n\t                            var cellIndexFocus = parseInt(tabIndex) - (smartTableScope.pinnedColumns.length + smartTableScope.unpinnedColumns.length);\r\n\t                            $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + cellIndexFocus).focus();\r\n\t                            scope.stopEdit();\r\n\t                        }\r\n\t                        e.stopPropagation();\r\n\t                        return false;\r\n\t                        // }\r\n\t                        break;\r\n\t                    case 40:\r\n\t                    case 13:\r\n\t                        // if(!$(e.target).is('select')) {\r\n\t                        if (scope.rowIndex < smartTableScope.currentPageDataLength - 1) {\r\n\t                            var cellIndexFocus = parseInt(tabIndex) + (smartTableScope.pinnedColumns.length + smartTableScope.unpinnedColumns.length);\r\n\t                            $('#' + smartTableScope.smartTableId + '-smart-table-cell-' + cellIndexFocus).focus();\r\n\t                            scope.stopEdit();\r\n\t                        }\r\n\t                        e.stopPropagation();\r\n\t                        return false;\r\n\t                        // }\r\n\t                        break;\r\n\t                        //  escape key\r\n\t                    case 27:\r\n\t                        if ((scope.column.uiType == 'editable' || scope.column.uiType == 'dropdown') && (scope.column.attributes.type != 'autocomplete' || (scope.column.attributes.type == 'autocomplete' &&\r\n                            scope.column.isFreeText && !selectedOption))) {\r\n\t                            isInputFieldFocused = false;\r\n\r\n\t                            if (scope.column.attributes.type == 'number') {\r\n\t                                tmpInputValue = parseFloat(oldCellValue);\r\n\t                                if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                    tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1]);\r\n\t                                }\r\n\t                                element.find('input').val(tmpInputValue == 0 ? '' : tmpInputValue).blur();\r\n\t                                if (isRegionalSettingEnabled) {\r\n\t                                    try {\r\n\t                                        element.find('input').autoNumeric('get');\r\n\t                                    }\r\n\t                                    catch (e) { }\r\n\t                                }\r\n\t                                updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                            }\r\n\t                            else if (scope.column.attributes.type == 'date') {\r\n\t                                element.find('input').val($filter('smartDateFormat')(oldCellValue, scope.column.attributes.format)).blur();\r\n\t                                updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                                selectedDate = undefined;\r\n\t                            }\r\n\t                            else {\r\n\t                                if (scope.column.uiType == 'dropdown') {\r\n\t                                    var tmpPreviousSelectedDropdownObj;\r\n\t                                    for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                        if (oldCellValue == scope.column.attributes.options[i][scope.column.attributes.dataKey]) {\r\n\t                                            tmpPreviousSelectedDropdownObj = scope.column.attributes.options[i];\r\n\t                                            updateCell(scope.row.entity, scope.column.field, scope.column.attributes.options[i]);\r\n\t                                            break;\r\n\t                                        }\r\n\t                                    }\r\n\t                                    element.find('select').val(tmpPreviousSelectedDropdownObj[scope.column.attributes.idKey]).blur();\r\n\t                                }\r\n\t                                else {\r\n\t                                    element.find('input').val(oldCellValue).blur();\r\n\t                                    updateCell(scope.row.entity, scope.column.field, oldCellValue);\r\n\t                                }\r\n\t                            }\r\n\r\n\t                            isRenderingToBeSkipped = true;\r\n\t                            isFocusToBeSkipped = true;\r\n\t                            element.focus();\r\n\r\n\t                            if (scope.column.attributes.type == 'number' && scope.column.isRegUpdateCol) {\r\n\t                                smartTableUtils.debounce.add(function () {\r\n\t                                    //\tcell change listener\r\n\t                                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                    smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                }, 250, false);\r\n\t                            }\r\n\t                            else if (scope.column.attributes.type == 'date') {\r\n\t                                if (scope.column.isRegUpdateCol) {\r\n\t                                    //\tcell change listener\r\n\t                                    angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: selectedDate });\r\n\t                                }\r\n\t                            }\r\n\t                            else if (scope.column.uiType == 'dropdown') {\r\n\t                                // Options change listener\r\n\t                                angular.isFunction(smartTableScope.listeners.optionSelect) && smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpPreviousSelectedDropdownObj });\r\n\t                            }\r\n\t                        }\r\n\t                        break;\r\n\t                    default:\r\n\t                        //  disable focus on function and filter keys\r\n\t                        if ((e.keyCode >= 112 && e.keyCode <= 123) || [16, 20, 255, 17, 91, 18, 33, 34, 144, 45, 19, 145, 93, 173, 174, 175].indexOf(e.keyCode) > -1) {\r\n\t                            e.preventDefault();\r\n\t                            return false;\r\n\t                        }\r\n\t                        if ((scope.column.uiType == 'editable' || scope.column.uiType == 'taxesPopup') && element.find('input').length > 0) {\r\n\t                            //  HOME and END keys\r\n\t                            if (!isInputFieldFocused && [35, 36].indexOf(e.keyCode) > -1) {\r\n\t                                e.preventDefault();\r\n\t                                return false;\r\n\t                            }\r\n\t                            if (!isInputFieldFocused) {\r\n\t                                isInputFieldFocused = true;\r\n\r\n\t                                if (element.find('input:focus').length == 0) {\r\n\t                                    //tmpInputValue = element.find('input').val();\r\n\t                                    //element.find('input').focus().val('').val(tmpInputValue);\r\n\t                                    element.find('input').focus().val('');\r\n\r\n\t                                    if (scope.column.attributes.type == 'number' && !isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        var arrDecimalSplits = element.find('input').val().split('.');\r\n\r\n\t                                        if (arrDecimalSplits.length > 1) {\r\n\t                                            if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                                e.preventDefault();\r\n\t                                                return false;\r\n\t                                            }\r\n\t                                        }\r\n\t                                        else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                            e.preventDefault();\r\n\t                                            return false;\r\n\t                                        }\r\n\t                                    }\r\n\t                                }\r\n\t                            }\r\n\t                        }\r\n\t                        else if (scope.column.uiType == 'dropdown' && element.find('select').length > 0) {\r\n\t                            element.find('select').focus();\r\n\t                        }\r\n\t                        if (e.keyCode == 8 && element.find('input').length == 0) {\r\n\t                            e.preventDefault();\r\n\t                            return false;\r\n\t                        }\r\n\t                        break;\r\n\t                }\r\n\t            };\r\n\r\n\t            scope.onElementKeyDown = onElementKeyDown;\r\n\r\n\t            element.on('keydown', onElementKeyDown);\r\n\r\n\r\n\t            scope.stopEdit = function (isWindowClickFired) {\r\n\t                isRenderingToBeSkipped = false;\r\n\t                isFocusToBeSkipped = false;\r\n\r\n\t                //  prevent stop edit \r\n\t                if (isWindowClickFired && scope.column.uiType == 'popup') {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                //\tscroll container to left\r\n\t\t\t\t\tif (scope.$last && window.lastKeyPressed != 37 && !window.isSmartTableCellClicked && (window.shiftKey && window.lastKeyPressed == 9)) {\r\n\t                    $(element.closest('.smart-table-unpinned-container')).scrollLeft(0);\r\n\t                }\r\n\r\n\t                if ((scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup' || (scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") || (scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\")) && scope.column.isRegClickCol) {\r\n\t                    removePopupListeners();\r\n\t                }\r\n\r\n\t                if (hasStopEditCalled) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                isInEditMode = false;\r\n\t                isInputFieldFocused = false;\r\n\r\n\t                //\tIf cell is editable\r\n\t                if (scope.column.enableCellEdit && (angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }))) {\r\n\t                    switch (scope.column.uiType) {\r\n\t                        case 'editable':\r\n\t                            switch (scope.column.attributes.type) {\r\n\t                                case 'number':\r\n\t                                    if (isRegionalSettingEnabled) {\r\n\t                                        try {\r\n\t                                            scope.COL_FIELD = element.find('input').autoNumeric('get') * 1;\r\n\t                                        }\r\n\t                                        catch (error) {\r\n\t                                            console.log(error);\r\n\t                                            console.log(\"Error in number get. \" + scope.column.field);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = parseFloat($(element.find('input')).val());\r\n\t                                    }\r\n\t                                    scope.COL_FIELD = isNaN(scope.COL_FIELD) ? 0 : scope.COL_FIELD;\r\n\t                                    updateCell(scope.row.entity, scope.column.field, angular.copy(scope.COL_FIELD));\r\n\t                                    if (angular.isDefined(scope.column.attributes) && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                                    }\r\n\t                                    break;\r\n\r\n\t                                case 'autocomplete':\r\n\t                                    if (element.find('input').devbridgeAutocomplete()) {\r\n\t                                        element.find('input').devbridgeAutocomplete().dispose();\r\n\t                                    }\r\n\t                                    if (selectedOption) {\r\n\t                                        scope.COL_FIELD = angular.isDefined(scope.column.attributes.displayformat) ? getDisplayData(selectedOption, scope.column.attributes.displayformat) : $(element.find('input')).val();\r\n\t                                        updateCell(scope.row.entity, scope.column.field, selectedOption);\r\n\t                                        selectedOption = undefined;\r\n\t                                    }\r\n\t                                    else if (scope.column.isFreeText) {\r\n\t                                        scope.COL_FIELD = $(element.find('input')).val();\r\n\t                                        updateCell(scope.row.entity, scope.column.field, scope.COL_FIELD);\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = getObjectValue(scope.row.entity, scope.column.field);\r\n\t                                    }\r\n\t                                    break;\r\n\r\n\t                                case 'date':\r\n\t                                    if (element.find('input').daterangepicker()) {\r\n\t                                        element.find('input').daterangepicker().daterangepicker();\r\n\t                                    }\r\n\t                                    if (selectedDate == '') {\r\n\t                                        scope.COL_FIELD = '';\r\n\t                                        updateCell(scope.row.entity, scope.column.field, null);\r\n\t                                    }\r\n\t                                    else if (angular.isDefined(selectedDate) && selectedDate.indexOf('Date') > -1) {\r\n\t                                        scope.COL_FIELD = $filter('smartDateFormat')(selectedDate, scope.column.attributes.format);\r\n\t                                        updateCell(scope.row.entity, scope.column.field, selectedDate);\r\n\t                                    }\r\n\t                                    else {\r\n\t                                        scope.COL_FIELD = $filter('smartDateFormat')(getObjectValue(scope.row.entity, scope.column.field), scope.column.attributes.format);\r\n\t                                    }\r\n\t                                    selectedDate = undefined;\r\n\t                                    break;\r\n\r\n\t                                default:\r\n\t                                    scope.COL_FIELD = $(element.find('input')).val();\r\n\t                                    updateCell(scope.row.entity, scope.column.field, scope.COL_FIELD);\r\n\t                                    break;\r\n\t                            }\r\n\t                            break;\r\n\r\n\t                        case 'dropdown':\r\n\t                        case 'select':\r\n\t                            for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                if ($(element.find('select')).val() == scope.column.attributes.options[i][scope.column.attributes.idKey]) {\r\n\t                                    scope.COL_FIELD = scope.column.attributes.options[i][scope.column.attributes.dataKey];\r\n\t                                    updateCell(scope.row.entity, scope.column.field, scope.column.attributes.options[i]);\r\n\t                                    break;\r\n\t                                }\r\n\t                            }\r\n\t                            scope.COL_FIELD = scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : scope.COL_FIELD;\r\n\t                            break;\r\n\t                        case 'taxesPopup':\r\n\t                            if (isRegionalSettingEnabled) {\r\n\t                                try {\r\n\t                                    if (element.find('input').length > 0) {\r\n\t                                        scope.COL_FIELD = element.find('input').autoNumeric('get') * 1;\r\n\t                                    }\r\n\t                                }\r\n\t                                catch (error) {\r\n\t                                    console.log(error);\r\n\t                                    console.log(\"Error in number get. \" + scope.column.field);\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                scope.COL_FIELD = parseFloat($(element.find('input')).val());\r\n\t                            }\r\n\t                            scope.COL_FIELD = isNaN(scope.COL_FIELD) ? 0 : scope.COL_FIELD;\r\n\t                            updateCell(scope.row.entity, scope.column.field, angular.copy(scope.COL_FIELD));\r\n\t                            if (angular.isDefined(scope.column.attributes) && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                scope.COL_FIELD = $filter('minPrecisionHandler')(scope.COL_FIELD, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1], false);\r\n\t                            }\r\n\t                            break;\r\n\t                    }\r\n\t                    updateCellTemplate();\r\n\t                }\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css('border', '');\r\n\t                templateContainer && templateContainer.empty();\r\n\r\n\t                if (scope.column.enableCellEdit && oldCellValue != scope.COL_FIELD) {\r\n\t                    if (oldCellValue != scope.COL_FIELD) {\r\n\t                        angular.isFunction(smartTableScope.listeners.afterCellEdit) && smartTableScope.listeners.afterCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\r\n\t                        smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                    }\r\n\r\n\t                    //\tend cell edit listener\r\n\t                    angular.isFunction(smartTableScope.listeners.endCellEdit) && smartTableScope.listeners.endCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                }\r\n\r\n\t                if (scope.column.enableCellEdit && (scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup')) {\r\n\t                    smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                }\r\n\r\n\t                hasStopEditCalled = true;\r\n\t            };\r\n\r\n\r\n\t            var onFocus = function (e) {\r\n\t                if (isRenderingToBeSkipped) {\r\n\t                    if (element.find('input').length > 0 && !isFocusToBeSkipped) {\r\n\t                        element.find('input').focus();\r\n\t                    }\r\n\t                    return;\r\n\t                }\r\n\r\n\t                oldCellValue = scope.column.enableTranslation ? $translate.instant(scope.COL_FIELD) : (scope.column.uiType == 'editable' && (scope.column.attributes.type == 'date' || scope.column.attributes.type == 'number') ? getObjectValue(scope.row.entity, scope.column.field) : scope.COL_FIELD);\r\n\r\n\t                //  Prevent from scrolling to left\r\n\t                if (scope.$last) {\r\n\t                    window.lastKeyPressed = 37;\r\n\t                }\r\n\r\n\t                if (window.lastActiveCellScope) {\r\n\t                    window.lastActiveCellScope.stopEdit();\r\n\t                    window.lastActiveCellScope = undefined;\r\n\t                }\r\n\r\n\t                window.lastActiveCellScope = scope;\r\n\r\n\t                hasStopEditCalled = false;\r\n\r\n\t                //\tscroll container to left\r\n\t                if (smartTableScope.pinnedColumns.length == scope.$index) {\r\n\t                    setTimeout(function () {\r\n\t                        $(element.closest('.smart-table-unpinned-container')).scrollLeft(0);\r\n\t                    }, 250);\r\n\t                }\r\n\r\n\t                if ((scope.column.uiType == 'popup' || scope.column.uiType == 'taxesPopup' || (scope.column.adhocpopup && scope.column.adhocpopup === \"adhocpopup\") || (scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\")) && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }) && scope.column.isRegClickCol) {\r\n\t                    addPopupListeners();\r\n\t                }\r\n\r\n\t                window.isSmartTableCellClicked = false;\r\n\r\n\t                $(element.closest('.smart-table-row-cell-text')).css('border', '1px solid ' + (cellClassElement.hasClass('smart-table-row-cell-invalid') ? 'red' : '#159dfc'));\r\n\t                if (isInEditMode || !scope.column.enableCellEdit || (angular.isFunction(scope.column.cellEditableCondition) && !scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }))) {\r\n\t                    return;\r\n\t                }\r\n\r\n\t                //\tBegin cell edit listener\r\n\t                angular.isFunction(smartTableScope.listeners.beginCellEdit) && smartTableScope.listeners.beginCellEdit({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\r\n\t                if (scope.column.uiType != 'popup') {\r\n\t                     $(element.find('.smart-table-cell-template')).html(getEditableTemplate());\r\n\t                     if (scope.column.uiType == \"editable\" && scope.column.adhocpopup && scope.column.adhocpopup===\"adhocpopup\") {\r\n\t                        var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Common_AddAdhocLocation\") + '\"><svg><use xlink:href=\"#icon_Location\"></use></svg></i>');\r\n\t                        icon.mousedown(function () {\r\n\t                            triggerAdhocPopup();\r\n\t                        });\r\n\t                        var inputvalue = $(element.find('.smart-table-cell-template')).html(getEditableTemplate()).css(\"width\", $(element.find('.smart-table-cell-template')).parent().width() - 40 + \"px\");\r\n\t                      $(element.find('.smart-table-cell-template')).append(inputvalue).append(icon);\r\n\t                     }\r\n\t                     else if (scope.column.uiType == \"editable\" && scope.column.supplierCardPopup && scope.column.supplierCardPopup === \"supplierCardPopup\") {\r\n\t                         var icon = $('<i style=\"float: right\" class=\"icon small blue-text smart-table-row-cell-info-icon\" style=\"float: right; line-height: 23px !important;\" title=\"' + $translate.instant(\"P2P_Req_SupplierName\") + '\"><svg><use xlink:href=\"#icon_ContactCard\"></use></svg></i>')\r\n\t                         icon.mousedown(function () {\r\n\t                             triggerSupplierCardPopup();\r\n\t                         })\r\n\t                         element.find('.smart-table-cell-template').append(icon);\r\n\t                     }\r\n\t                }\r\n\r\n\t                if (scope.column.uiType == 'taxesPopup') {\r\n\t                    var tmpInputValue = parseFloat(getObjectValue(scope.row.entity, scope.column.field));\r\n\t                    if (!isRegionalSettingEnabled && angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                        tmpInputValue = convertNumberToFixed(tmpInputValue, scope.column.attributes.minmaxprecisionfilter.split(':')[0], scope.column.attributes.minmaxprecisionfilter.split(':')[1]);\r\n\t                    }     \r\n\t                    var input = $('<input  type=\"number\" autocomplete=\"off\" value=\"' + (tmpInputValue == 0 ? '' : tmpInputValue) + '\">');\r\n\t                    if (scope.row.entity.isTaxExempt) {\r\n\t                        input = $('<a>' + $translate.instant(\"P2P_Common_Exempt\") + '</a>')\r\n\t                        input.mousedown(function () {\r\n\t                            triggerTaxesPopup();\r\n\r\n\t                        });\r\n\t                    }\r\n\t                    var icon = $('<i style=\"float: right\" class=\"icon iconSmall tooltipped\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i>');\r\n\t                    icon.mousedown(function () {\r\n\t                        triggerTaxesPopup();\r\n\t                    });\r\n\t                    input.css(\"width\", $(element.find('.smart-table-cell-template')).parent().width() - 40 + \"px\");\r\n\t                    $(element.find('.smart-table-cell-template')).html('').append(input).append(icon);\r\n\t                }\r\n\r\n\t                switch (scope.column.uiType) {\r\n\t                    case 'editable':\r\n\t                        switch (scope.column.attributes.type) {\r\n\t                            case 'number':\r\n\t                                setTimeout(function () {\r\n\t                                    var tmpVal;\r\n\t                                    if (isRegionalSettingEnabled) {\r\n\t                                        try {\r\n\t                                            element.find('input').attr('type', 'text');\t                                        \r\n\t                                            var mDec = scope.column.attributes.minmaxprecisionfilter != undefined && scope.column.attributes.minmaxprecisionfilter.split(':')[1] != '' ? scope.column.attributes.minmaxprecisionfilter.split(':')[1] : MaxPrecessionValue;\t                                           \r\n\t                                            element.find('input').autoNumeric('init', { mDec: mDec });\r\n\t                                        }\r\n\t                                        catch (error) {\r\n\t                                            console.log(\"Error in number init. \" + scope.column.field);\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                        var arrDecimalSplits;\r\n\r\n\t                                        element.find('input').on('keydown', function (e) {\r\n\t                                            arrDecimalSplits = $(this).val().split('.');\r\n\r\n\t                                            if (arrDecimalSplits.length > 1) {\r\n\t                                                if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                                    e.preventDefault();\r\n\t                                                    return false;\r\n\t                                                }\r\n\t                                            }\r\n\t                                            else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                                e.preventDefault();\r\n\t                                                return false;\r\n\t                                            }\r\n\t                                        });\r\n\t                                    }\r\n\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        if (isRegionalSettingEnabled) {\r\n\t                                            try {\r\n\t                                                tmpVal = $(this).autoNumeric('get')*1;\r\n\t                                            }\r\n\t                                            catch (error) {\r\n\t                                                console.log(\"Error in number format. \" + scope.column.field);\r\n\t                                            }\r\n\t                                        }\r\n\t                                        else {\r\n\t                                            if (tmpVal == $(this).val()) {\r\n\t                                                return;\r\n\t                                            }\r\n\t                                            tmpVal = $(this).val();\r\n\t                                        }\r\n\r\n\t                                        if (scope.column.isRegUpdateCol) {\r\n\t                                            smartTableUtils.debounce.add(function () {\r\n\t                                                updateCell(scope.row.entity, scope.column.field, parseFloat(tmpVal));\r\n\t                                                //\tcell change listener\r\n\t                                                angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                                smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                            }, 250, false);\r\n\t                                        }\r\n\t                                    });\r\n\t                                });\r\n\t                                break;\r\n\r\n\t                            case 'autocomplete':\r\n\t                                var filterKeys = scope.column.attributes.filterkeys ? scope.column.attributes.filterkeys : ['title'];\r\n\t                                var optionFormat = scope.column.attributes.optionformat ? scope.column.attributes.optionformat : '{title}';\r\n\t                                var displayFormat = scope.column.attributes.displayformat ? scope.column.attributes.displayformat + '' : '{title}';\r\n\r\n\t                                setTimeout(function () {\r\n\t                                    var serviceObj = scope.column.attributes.serviceObj;\r\n\t                                    var tmpVal = oldCellValue;\r\n\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        if (angular.isDefined(tmpVal) && $(this).val().trim().length > 0 && tmpVal.trim() == $(this).val().trim()) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        tmpVal = $(this).val();\r\n\r\n\t                                        if ([37, 38, 39, 40].indexOf(e.keyCode) > -1) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        //\tcell change listener\r\n\t                                        angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal });\r\n\r\n\t                                        if (angular.isDefined(tmpVal) && tmpVal.trim().length == 0 && !scope.column.attributes.populateListOnFocus) {\r\n\t                                            return;\r\n\t                                        }\r\n\r\n\t                                        smartTableUtils.debounce.add(function () {\r\n\t                                            if (serviceObj != undefined) {\r\n\t                                                var req = {\r\n\t                                                    method: serviceObj.method === \"POST\" ? \"POST\" : \"GET\",\r\n\t                                                    url: serviceObj.url,\r\n\t                                                    params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", tmpVal)),\r\n\t                                                    timeout: 120000,\r\n\t                                                    headers: {\r\n\t                                                        \"Content-Type\": \"application/json\",\r\n\t                                                        \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n\t                                                    }\r\n\t                                                };\r\n\t                                                if (req.method == \"POST\") {\r\n\t                                                    req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", tmpVal));\r\n\t                                                    delete req.params;\r\n\t                                                }\r\n\t                                                httpService.directhttp(req).then(function (response) {\r\n\t                                                    if (serviceObj.CallbackObj) {\r\n\t                                                        response = serviceObj.CallbackObj(response, scope.column.field)\r\n\t                                                    }\r\n\r\n\t                                                    var resp = [];\r\n\r\n\t                                                    if (typeof response === \"string\") {\r\n\t                                                        response = JSON.parse(response);\r\n\t                                                    }\r\n\r\n\t                                                    if (serviceObj.isFlatArray) {\r\n\t                                                        _.each(response, function (x, index) {\r\n\t                                                            var obj = {};\r\n\t                                                            obj[\"name\"] = x;\r\n\t                                                            obj[\"code\"] = x;\r\n\t                                                            resp.push(obj);\r\n\t                                                        });\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        _.each(response, function (obj) {\r\n\t                                                            var mapperObj = (serviceObj.isObjectArray) ? obj : {};\r\n\t                                                            _.each(serviceObj.mapper, function (mapper) {\r\n\t                                                                var mapperstri = '';\r\n\t                                                                if (angular.isArray(mapper['toBeMapped'])) {\r\n\t                                                                    var mapperkey = mapper.key;\r\n\t                                                                    _.each(mapper['toBeMapped'], function (res) {\r\n\t                                                                        if (mapperkey != undefined && mapperkey == 'email' && res == 'EmailAddress') {\r\n\t                                                                            mapperstri += \"</br>\" + obj[res] + \" \";\r\n\t                                                                        }\r\n\t                                                                        else {\r\n\t                                                                            mapperstri += obj[res] + \" \";\r\n\t                                                                        }\r\n\t                                                                    });\r\n\t                                                                    mapperstri.trim();\r\n\t                                                                }\r\n\t                                                                else {\r\n\t                                                                    mapperstri = obj[mapper['toBeMapped']];\r\n\t                                                                }\r\n\t                                                                mapperObj[mapper['key']] = mapperstri;\r\n\t                                                            });\r\n\t                                                            _.each(serviceObj.staticValues, function (item) {\r\n\t                                                                mapperObj[item['key']] = item['value'];\r\n\t                                                            });\r\n\t                                                            resp.push(mapperObj);\r\n\t                                                        });\r\n\t                                                    }\r\n\r\n\t                                                    if (element.find('input').devbridgeAutocomplete()) {\r\n\t                                                        element.find('input').devbridgeAutocomplete().setLookup(getFormattedData(resp, displayFormat));\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        element.find('input').devbridgeAutocomplete({\r\n\t                                                            filterKeys: filterKeys,\r\n\t                                                            optionFormat: optionFormat,\r\n\t                                                            displayFormat: displayFormat,\r\n\t                                                            lookup: getFormattedData(resp, displayFormat),\r\n\t                                                            width: scope.column.width,\r\n\t                                                            minChars: scope.column.attributes.populateListOnFocus ? 0 : 1,\r\n\t                                                            onSelect: function (suggestion) {\r\n\t                                                                selectedOption = suggestion;\r\n\t                                                                isRenderingToBeSkipped = true;\r\n\t                                                                element.find('input').devbridgeAutocomplete().setLookup([]);\r\n\t                                                                //\tOption select listener\r\n\t                                                                angular.isFunction(smartTableScope.listeners.optionSelect) && smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal, option: selectedOption });\r\n\t                                                                element.trigger('focus');\r\n\t                                                            }\r\n\t                                                        });\r\n\t                                                    }\r\n\r\n\t                                                    if (resp.length == 1 && scope.column.attributes.populateListOnFocus) {\r\n\t                                                        try {\r\n\t                                                            element.find('input').devbridgeAutocomplete().onSelect(0);\r\n\t                                                        }\r\n\t                                                        catch (e) { }\r\n\t                                                    }\r\n\t                                                    else {\r\n\t                                                        //\tOptions change listener\r\n\t                                                        angular.isFunction(smartTableScope.listeners.optionsChange) && smartTableScope.listeners.optionsChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: tmpVal, options: response });\r\n\t                                                    }\r\n\r\n\t                                                }, function () {\r\n\t                                                });\r\n\t                                            }\r\n\t                                        }, 250, false);\r\n\t                                    });\r\n\r\n\t                                    if (scope.column.attributes.populateListOnFocus) {\r\n\t                                        var triggerKeyUpOnfocus = function () {\r\n\t                                            if (!isInputFieldFocused) {\r\n\t                                                var tmpEvent = $.Event(\"keyup\", {\r\n\t                                                    keyCode: 32\r\n\t                                                });\r\n\t                                                element.find('input').trigger(tmpEvent);\r\n\t                                                isInputFieldFocused = true;\r\n\t                                            }\r\n\t                                        };\r\n\r\n\t                                        element.find('input').on('click', function (e) {\r\n\t                                            triggerKeyUpOnfocus();\r\n\t                                        });\r\n\r\n\t                                        if (element.find('input:focus').length > 0) {\r\n\t                                            triggerKeyUpOnfocus();\r\n\t                                        }\r\n\t                                    }\r\n\t                                });\r\n\t                                break;\r\n\r\n\t                            case 'date':\r\n\t                                setTimeout(function () {\r\n\t                                    element.find('input').on('keyup', function (e) {\r\n\t                                        selectedDate = $(this).val();\r\n\t                                    });\r\n\r\n\t                                    element.find('input').daterangepicker({\r\n\t                                        singleDatePicker: true,\r\n\t                                        showDropdowns: true,\r\n\t                                        locale: {\r\n\t                                            format: scope.column.attributes.format ? (scope.column.attributes.format).toUpperCase() : 'MM/DD/YYYY'\r\n\t                                        },\r\n\t                                        minDate: scope.column.attributes.min ? scope.column.attributes.min : null,\r\n\t                                        maxDate: scope.column.attributes.max ? scope.column.attributes.max : null,\r\n\t                                        autoUpdateInput: false\r\n\t                                    }, function (startDate, endDate) {\r\n                                            updateDate(startDate);\r\n\t                                    }).on('apply.daterangepicker', function (e, picker) {\r\n                                            updateDate(picker.startDate);\r\n\t                                    });\r\n\t                                });\r\n\t                                break;\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'dropdown':\r\n\t                        if (angular.isFunction(smartTableScope.listeners.optionSelect)) {\r\n\t                            setTimeout(function () {\r\n\t                                element.find('select').on('change', function () {\r\n\t                                    for (var i = 0; i < scope.column.attributes.options.length; i++) {\r\n\t                                        if ($(this).val() == scope.column.attributes.options[i][scope.column.attributes.idKey] + '') {\r\n\t                                            // Options change listener\r\n\t                                            smartTableScope.listeners.optionSelect({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex }, { value: scope.column.attributes.options[i] });\r\n\t                                            break;\r\n\t                                        }\r\n\t                                    }\r\n\t                                });\r\n\t                            });\r\n\t                        }\r\n\t                        break;\r\n\r\n\t                    case 'taxesPopup':\t                        \r\n\t                        setTimeout(function () {\r\n\t                            var tmpVal;\r\n\t                            if (isRegionalSettingEnabled) {\r\n\t                                try {\r\n\t                                    element.find('input').attr('type', 'text');\r\n\t                                    element.find('input').autoNumeric('init');\r\n\t                                }\r\n\t                                catch (error) {\r\n\t                                    console.log(\"Error in number init. \" + scope.column.field);\r\n\t                                }\r\n\t                            }\r\n\t                            else if (angular.isDefined(scope.column.attributes.minmaxprecisionfilter)) {\r\n\t                                var arrDecimalSplits;\r\n\r\n\t                                element.find('input').on('keydown', function (e) {\r\n\t                                    arrDecimalSplits = $(this).val().split('.');\r\n\r\n\t                                    if (arrDecimalSplits.length > 1) {\r\n\t                                        if (arrDecimalSplits[arrDecimalSplits.length - 1].length >= scope.column.attributes.minmaxprecisionfilter.split(':')[1] && ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {\r\n\t                                            e.preventDefault();\r\n\t                                            return false;\r\n\t                                        }\r\n\t                                    }\r\n\t                                    else if (scope.column.attributes.minmaxprecisionfilter.split(':')[0] == 0 && e.keyCode == 190) {\r\n\t                                        e.preventDefault();\r\n\t                                        return false;\r\n\t                                    }\r\n\t                                });\r\n\t                            }\r\n\r\n\t                            element.find('input').on('keyup', function (e) {\r\n\t                                if (isRegionalSettingEnabled) {\r\n\t                                    try {\r\n\t                                        tmpVal = $(this).autoNumeric('get')*1;\r\n\t                                    }\r\n\t                                    catch (error) {\r\n\t                                        console.log(\"Error in number format. \" + scope.column.field);\r\n\t                                    }\r\n\t                                }\r\n\t                                else {\r\n\t                                    if (tmpVal == $(this).val()) {\r\n\t                                        return;\r\n\t                                    }\r\n\t                                    tmpVal = $(this).val();\r\n\t                                }\r\n\r\n\t                                if (scope.column.isRegUpdateCol) {\r\n\t                                    smartTableUtils.debounce.add(function () {\r\n\t                                        updateCell(scope.row.entity, scope.column.field, parseFloat(tmpVal));\r\n\t                                        //\tcell change listener\r\n\t                                        angular.isFunction(smartTableScope.listeners.cellChange) && smartTableScope.listeners.cellChange({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                                        smartTableUtils.broadcast('rowDataChange', { rowIndex: scope.rowIndex, smartTableId: smartTableScope.smartTableId });\r\n\t                                    }, 250, false);\r\n\t                                }\r\n\t                            });\r\n\t                        });\r\n\t                        break;\r\n\t                }\r\n\r\n\t                smartTableScope.lastActiveCell = {\r\n\t                    rowIndex: scope.rowIndex,\r\n\t                    columnIndex: scope.columnIndex\r\n\t                };\r\n\r\n\t                isInEditMode = true;\r\n\t            };\r\n\r\n\r\n\t            element.on('focus', onFocus);\r\n\r\n\t            element.on('click', function (e) {\r\n\t                if (scope.column.uiType == 'popup' && scope.column.enableCellEdit && angular.isFunction(scope.column.cellEditableCondition) && scope.column.cellEditableCondition({ row: scope.row, col: { colDef: scope.column }, grid: { rows: smartTableScope.smartTableConfig.data }, cellElement: element }) && scope.column.isRegClickCol) {\r\n\t                    smartTableUtils.debounce.add(function () {\r\n\t                        window.isPopupOpenedByUIGridCompatibleElement = true;\r\n\t                        //\tcell click listener\r\n\t                        angular.isFunction(smartTableScope.listeners.cellClick) && smartTableScope.listeners.cellClick({ entity: scope.row.entity, index: scope.rowIndex }, { colDef: scope.column, index: scope.columnIndex });\r\n\t                    }, 100);\r\n\t                }\r\n\t            });\r\n\r\n\t            var onFocusCell = smartTableUtils.on('focusCell', function (e) {\r\n\t                if (e.rowIndex == scope.rowIndex && e.columnIndex == scope.columnIndex && e.smartTableId == smartTableScope.smartTableId) {\r\n\t                    element.trigger('focus');\r\n\t                }\r\n\t            });\r\n\r\n\t            var onRowDataChange = smartTableUtils.on('rowDataChange', function (e) {\r\n\t                if (e.rowIndex == scope.rowIndex && e.smartTableId == smartTableScope.smartTableId) {\r\n\t                    //\tskip updating the field since being already in edit mode\r\n\t                    if (!isInEditMode) {\r\n\t                        init(true, true);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\r\n\t            var onDataChange = smartTableUtils.on('dataChange', function (e) {\r\n\t                if (e.smartTableId == smartTableScope.smartTableId && e.updateCell) {\r\n\t                    init(true, true);\r\n\t                }\r\n\t            });\r\n\r\n\t            scope.$on('$destroy', function () {\r\n\t                // console.log('smart-cell scope destroyed');\r\n\t                onCellDataAndColDefChange();\r\n\t                onFocusCell();\r\n\t                onRowDataChange();\r\n\t                onDataChange();\r\n\t                element.off('keydown', onElementKeyDown);\r\n\t            });\r\n\t        },\r\n\t        template: '<span class=\"smart-table-cell-text\"><span class=\"smart-table-cell-template\"></span></span>'\r\n\t    };\r\n\t}]);\r\n})();\n(function (angular) {\r\n\t'use strict';\r\n\tangular.module('SMART2').directive('smartTreePopup', ['$timeout',\r\n\tfunction($timeout) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\tscope : {\r\n\t\t\t\theader : \"@\",\r\n\t\t\t\tisRadio : \"@\",\r\n\t\t\t\ttoggle : \"@\",\r\n\t\t\t\tpreselection : \"@\",\r\n\t\t\t\tonHide : \"&\",\r\n\t\t\t\tonSelect : \"&\",\r\n                disableLevelSelection : \"@\"\r\n\t\t\t},\r\n\t\t\tlink : function(scope, element, attrs) {\r\n\t\t\t    //watch treePopupToggle boolean to toggle popup\r\n\t\t\t    var isInitServiceCall = true;\r\n\t\t\t\tscope.$watch('toggle', function(value) {\r\n\t\t\t\t    scope.showPopupBool = scope.$eval(value);\r\n\t\t\t\t    if (scope.showPopupBool) {\r\n\t\t\t\t        scope.treeConfig.hideSearch = false;\r\n\t\t\t\t        if (isInitServiceCall) {\r\n\t\t\t\t            $timeout(function () {\r\n\t\t\t\t                scope.treeConfig.initServiceCall();\r\n\t\t\t\t            });\r\n\t\t\t\t            isInitServiceCall = false;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t//watch preselection\r\n\t\t\t\tscope.$watch('preselection', function(value) {\r\n\t\t\t\t\tscope.treeConfig.SelectedNodes = value;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//on-hide callback\r\n\t\t\t\tvar hideCallback = scope.$eval(scope.onHide);\r\n\t\t\t\t\r\n\t\t\t\t//on-select callback\r\n\t\t\t\tvar selectCalback = scope.$eval(scope.onSelect);\r\n\r\n\t\t\t\t//creating Tree Component Config\r\n\t\t\t\tscope.treeConfig = {\r\n\t\t\t\t\tIsRadio : scope.$eval(scope.isRadio),\r\n\t\t\t\t\ttype : \"Category\",\r\n\t\t\t\t\tSelectedNodes : \"\",\r\n\t\t\t\t\ttitle: scope.header,\r\n\t\t\t\t\tdisableLevelSelection: scope.disableLevelSelection,\r\n                    hideSearch : false\r\n\t\t\t\t};\r\n\t\t\t\tscope.onDoneCallback = function(e) {\r\n\t\t\t\t\tif (angular.isFunction(selectCalback)) {\r\n\t\t\t\t\t\tselectCalback(e);\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// view bindings\r\n\t\t\t\tscope.showPopupBool = false;\r\n\t\t\t\tscope.onPopupHideCallback = function() {\r\n\t\t\t\t    scope.showPopupBool = false;\r\n\t\t\t\t    scope.treeConfig.hideSearch = true;\r\n\t\t\t\t\tif (angular.isFunction(hideCallback)) {\r\n\t\t\t\t\t\thideCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/smartTree/smartTreePopup.html'\r\n\t\t};\r\n\t}]);\r\n\r\n\t/*******----smartTreeComponent Module----*******/\r\n\r\n\tangular.module('smartTreeComponent', []).directive('smartTreeComponent', ['$timeout', '$translate', 'RESTApiSt', '$q', 'APPCONSTANTS', 'Common',\r\n\tfunction ($timeout, $translate, RESTApiSt, $q, APPCONSTANTS, Common) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\treplace : true,\r\n\t\t\tscope : {\r\n\t\t\t\tconfig : '=',\r\n\t\t\t\tonDone : '&'\r\n\t\t\t},\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t    // ID's generation\r\n\t\t\t    scope.parentId = 'Parent_' + Common.uniqueIDGenerator();\r\n\t\t\t    scope.templateId = 'Template_' + Common.uniqueIDGenerator() + '.html';\r\n\r\n\r\n\t\t\t\t/*config for the directive*/\r\n\t\t\t    scope.config.initServiceCall = function () {\r\n\t\t\t        RESTApiSt.getData(scope.treeConfig.type, RESTApiStCallback, req);\r\n\t\t\t    }\r\n\t\t\t\tscope.treeConfig = scope.config;\r\n\t\t\t\tvar doneCallback = scope.$eval(scope.onDone);\r\n\t\t\t\tscope.$watch('config.SelectedNodes', function(n, o) {\r\n\t\t\t\t\tif (n) {\r\n\t\t\t\t\t\tpreselection = n.split(',');\r\n\t\t\t\t\t\tif (preselectionRecievedPromise)\r\n\t\t\t\t\t\t\tpreselectionRecievedPromise.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.$watch('config.hideSearch', function (n, o) {\r\n\t\t\t\t    if (n && scope.searchFieldVal.length > 0) {\r\n\t\t\t\t        $timeout(function () {\r\n\t\t\t\t            angular.element('#closeButton').trigger('click');\r\n\t\t\t\t        });\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\t/*promise*/\r\n\t\t\t\tvar dataRecievedCallPromise;\r\n\t\t\t\tvar preselectionRecievedPromise;\r\n\t\t\t\tvar promises = [];\r\n\t\t\t\tinitializePromise(true, true);\r\n\r\n\t\t\t\t/*Local variables*/\r\n\t\t\t\tvar dataSet;\r\n\t\t\t\tvar searchBucket = 50;\r\n\t\t\t\tvar lazyLoadingBucket = 50;\r\n\t\t\t\tvar maxLevel;\r\n\t\t\t\tvar lazyLoadOffset;\r\n\t\t\t\tvar lazyLoadMarker = [];\r\n\t\t\t\tvar levelKey = 'level';\r\n\t\t\t\tvar levelWiseData = {};\r\n\t\t\t\tvar parentStringConstant = \"parentString\";\r\n\t\t\t\tvar parentCodeStringConstant = \"parentCodeString\";\r\n\t\t\t\tvar preselection;\r\n\t\t\t\tvar searchCategories = [];\r\n\t\t\t\tvar req;\r\n\r\n\t\t\t\tswitch(scope.treeConfig.type) {\r\n\t\t\t\tcase 'Category':\r\n\t\t\t\t\tscope.codeProperty = 'PASCode';\r\n\t\t\t\t\tscope.titleProperty = 'PASName';\r\n\t\t\t\t\tscope.levelProperty = 'PASLevel';\r\n\t\t\t\t\tscope.parentProperty = 'ParentPASCode';\r\n\t\t\t\t\t/*req = {\r\n\t\t\t\t\t    method: 'POST',\r\n\t\t\t\t\t    url: 'https://gepqcsmart-rest.servicebus.windows.net/PortalRestService/GetPASForDeviceMob',\r\n\t\t\t\t\t    headers: {\r\n\t\t\t\t\t        'Content-Type': 'application/json',\r\n\t\t\t\t\t        'UserExecutionContext': '{\"ClientName\":\"BuyerSqlConn\",\"ClientID\":2,\"BuyerPartnerCode\":6315,\"Product\":2,\"UserId\":\"28082\",\"EntityType\":\"supplier registration\",\"EntityId\":8888,\"LoggerCode\":\"EC101\",\"Culture\":\"en-US\",\"UserName\":\"RiteAid.Admin@gep.com\",\"CompanyName\":\"BuyerSqlConn\",\"ContactCode\":63150040000001}'\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t    data: {\r\n\t\t\t\t\t        \"ContactCode\": 63150040000001,\r\n\t\t\t\t\t        \"entityDetailCode\": 7,\r\n\t\t\t\t\t        \"entityId\": 1\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t};*/\r\n\t\t\t\t\treq = {\r\n\t\t\t\t\t    method: 'POST',\r\n\t\t\t\t\t    url: APPCONSTANTS.userPreferences.URLs.AppURL + 'PortalRestService/GetPASForDeviceMob?oloc=218',\r\n\t\t\t\t\t    headers: {\r\n\t\t\t\t\t        'Content-Type': 'application/json',\r\n\t\t\t\t\t        'UserExecutionContext': JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails),\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t    data: {\r\n\t\t\t\t\t        \"ContactCode\": APPCONSTANTS.userPreferences.UserBasicDetails.ContactCode,\r\n\t\t\t\t\t        \"entityDetailCode\": APPCONSTANTS.userPreferences.ACEntityId,\r\n\t\t\t\t\t        \"entityId\": APPCONSTANTS.userPreferences.UserBasicDetails.EntityId\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'Region':\r\n\t\t\t\t\tscope.codeProperty = 'RegionId';\r\n\t\t\t\t\tscope.titleProperty = 'RegionName';\r\n\t\t\t\t\tscope.levelProperty = 'RegionLevel';\r\n\t\t\t\t\tscope.parentProperty = 'RegionParentId';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tscope.isLoading = true;\r\n\t\t\t\tscope.selectedData = [];\r\n\t\t\t\tscope.isSingleSelect = scope.treeConfig.IsRadio;\r\n\t\t\t\tscope.msg = $translate.instant('loadingMsg');\r\n\r\n\t\t\t\t/*Local member fuctions*/\r\n\r\n\t\t\t\tfunction initializePromise(dataRievedPromiseBool, preselectionRecievedPromiseBool) {\r\n\t\t\t\t\tdataRecievedCallPromise = null;\r\n\t\t\t\t\tpreselectionRecievedPromise = null;\r\n\t\t\t\t\tpromises.length = 0;\r\n\t\t\t\t\tif (dataRievedPromiseBool) {\r\n\t\t\t\t\t\tdataRecievedCallPromise = $q.defer();\r\n\t\t\t\t\t\tpromises.push(dataRecievedCallPromise.promise);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (preselectionRecievedPromiseBool) {\r\n\t\t\t\t\t\tpreselectionRecievedPromise = $q.defer();\r\n\t\t\t\t\t\tpromises.push(preselectionRecievedPromise.promise);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$q.all(promises).then(promiseResolved);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction promiseResolved() {\r\n\t\t\t\t\tinitatePreSelection();\r\n\t\t\t\t\tinitializePromise(false, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction createLevelWiseDataSet() {\r\n\t\t\t\t\tvar level = 1;\r\n\t\t\t\t\tvar parentNodes = dataSet[level];\r\n\t\t\t\t\tinsertParentHierarchyForFlatStrucure(parentNodes);\r\n\t\t\t\t\twhile (parentNodes) {\r\n\t\t\t\t\t\tlevelWiseData[levelKey + level] = parentNodes;\r\n\t\t\t\t\t\tinsertParentHierarchyForFlatStrucure(parentNodes, level);\r\n\t\t\t\t\t\tmaxLevel = level;\r\n\t\t\t\t\t\tlevel = level + 1;\r\n\t\t\t\t\t\tparentNodes = dataSet[level];\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction insertParentHierarchyForFlatStrucure(parentNodes, level) {\r\n\t\t\t\t\tvar fetchedData = (level) ? _.groupBy(dataSet[level + 1], scope.parentProperty) : null;\r\n\t\t\t\t\t_.each(parentNodes, function(parent) {\r\n\t\t\t\t\t\tvar childForParent = (fetchedData) ? fetchedData[parent[scope.codeProperty]] : parentNodes;\r\n\t\t\t\t\t\tif (childForParent) {\r\n\t\t\t\t\t\t\t_.each(childForParent, function(node, index) {\r\n\t\t\t\t\t\t\t\tnode[parentStringConstant] = parent[parentStringConstant] ? parent[parentStringConstant] + ' > ' + node[scope.titleProperty] : (node[scope.levelProperty] > 1) ? parent[scope.titleProperty] + ' > ' + node[scope.titleProperty] : \"\";\r\n\t\t\t\t\t\t\t\tnode[parentCodeStringConstant] = parent[parentCodeStringConstant] ? parent[parentCodeStringConstant] + '>' + node[scope.codeProperty] : (node[scope.levelProperty] > 1) ? parent[scope.codeProperty] + '>' + node[scope.codeProperty] : \"\";\r\n\t\t\t\t\t\t\t\tnode['isExpanded'] = false;\r\n\t\t\t\t\t\t\t\tnode['selection'] = \"0\";\r\n\t\t\t\t\t\t\t\tnode['index'] = index;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction RESTApiStCallback(response) {\r\n\t\t\t\t    try{\r\n\t\t\t\t        dataSet = _.groupBy(JSON.parse(response.data.GetPASForDeviceMobResult), scope.levelProperty);\r\n\t\t\t\t        createLevelWiseDataSet();\r\n\t\t\t\t        scope.categories = levelWiseData[levelKey + '1'].slice(0, lazyLoadingBucket);\r\n\t\t\t\t        lazyLoadMarker.push(levelWiseData[levelKey+'1'][levelWiseData[levelKey + '1'].length - 1]);\r\n\t\t\t\t        scope.isLoading = false;\r\n\t\t\t\t    }catch(e){\r\n\t\t\t\t        scope.msg = $translate.instant('loadingDataErr');\r\n\t\t\t\t    }\r\n\t\t\t\t    dataRecievedCallPromise.resolve();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction resetSelectionState() {\r\n\t\t\t\t\t_.each(scope.selectedData, function(_node) {\r\n\t\t\t\t\t\tscope.selectNode(_node, '0');\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction initatePreSelection() {\r\n\t\t\t\t\tresetSelectionState();\r\n\t\t\t\t\t_.each(preselection, function(preselectionNode) {\r\n\t\t\t\t\t\tvar searchLevel = 1;\r\n\t\t\t\t\t\twhile (searchLevel <= maxLevel) {\r\n\t\t\t\t\t\t\tvar foundNode = _.groupBy(levelWiseData[levelKey + searchLevel],scope.codeProperty)[preselectionNode];\r\n\t\t\t\t\t\t\tif (foundNode) {\r\n\t\t\t\t\t\t\t\tscope.selectNode(foundNode[0], '1');\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsearchLevel = searchLevel + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction openSelectionTree() {\r\n\t\t\t\t\tvar partialSeletedNodes = _.filter(levelWiseData[levelKey + 0], function(node) {\r\n\t\t\t\t\t\treturn node.selection = '2';\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_.each(partialSeletedNodes, function(nodes) {\r\n\t\t\t\t\t\tvar level = nodes[scope.levelProperty];\r\n\t\t\t\t\t\t//var childs = _.\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction getChildsForParentAsPerBucket(parent, bucket, startIndex) {\r\n\t\t\t\t\tvar childSearchLevel = parent[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCodeStringIterator;\r\n\t\t\t\t\tvar result = _.groupBy(levelWiseData[levelKey+childSearchLevel],scope.parentProperty)[parent[scope.codeProperty]];\r\n\t\t\t\t\t//var bucketData = (bucket) ? result.slice(startIndex, startIndex + bucket) : result;\r\n\t\t\t\t\tvar bucketData = result;\r\n\t\t\t\t\treturn bucketData;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction lazyLoadLevelWiseData(markerNode) {\r\n\t\t\t\t\tvar parentSearchLevel = markerNode[scope.levelProperty] - 1;\r\n\t\t\t\t\tvar markerNodeParent = markerNode[scope.parentProperty];\r\n\t\t\t\t\tvar parent = _.find(levelWiseData[levelKey + parentSearchLevel], function(node) {\r\n\t\t\t\t\t\treturn node[scope.codeProperty] == markerNodeParent;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\tvar bucketChilds = getChildsForParentAsPerBucket(parent, lazyLoadingBucket, markerNode.index + 1);\r\n\t\t\t\t\t\tconsole.log('childs appended = ' + bucketChilds.length);\r\n\t\t\t\t\t\tif (bucketChilds.length > 0) {\r\n\t\t\t\t\t\t\tparent.children = parent.children.concat(bucketChilds);\r\n\t\t\t\t\t\t\tlazyLoadMarker.push(bucketChilds[bucketChilds.length - 1]);\r\n\t\t\t\t\t\t\tscope.$apply();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar searchString = \"\";\r\n\t\t\t\tvar searchLevel;\r\n\t\t\t\tvar searchDataYetToBeDisplayed = [];\r\n\t\t\t\tvar searchWithContainsHitResult = [];\r\n\t\t\t\tscope.searchResults = [];\r\n\t\t\t\tfunction searchAsPerBucketSize(searchStr, bucket) {\r\n\t\t\t\t\tif (searchString != searchStr) {\r\n\t\t\t\t\t\tsearchString = searchStr;\r\n\t\t\t\t\t\tsearchLevel = maxLevel;\r\n\t\t\t\t\t\tsearchDataYetToBeDisplayed.length = 0;\r\n\t\t\t\t\t\tsearchWithContainsHitResult.length = 0;\r\n\t\t\t\t\t\tscope.searchResults.length = 0;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar searchData = getDataAsPerBucketSize(searchStr, bucket);\r\n\t\t\t\t\tscope.searchResults = scope.searchResults.concat(searchData);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getOffsetSearchData(bucket) {\r\n\t\t\t\t\tvar partitionedData = _.partition(searchDataYetToBeDisplayed, function(data, index) {\r\n\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsearchDataYetToBeDisplayed = partitionedData[0];\r\n\t\t\t\t\treturn partitionedData[1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getOffsetSearchDataForContainsSearch(bucket) {\r\n\t\t\t\t\tvar partitionedData = _.partition(searchWithContainsHitResult, function(data, index) {\r\n\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsearchWithContainsHitResult = partitionedData[0];\r\n\t\t\t\t\treturn partitionedData[1];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getDataAsPerBucketSize(searchStr, bucket) {\r\n\t\t\t\t\tvar bucketData = [];\r\n\t\t\t\t\twhile (bucketData.length < bucket && searchLevel > 0) {\r\n\t\t\t\t\t\tvar offsetSearchData = getOffsetSearchData(bucket);\r\n\t\t\t\t\t\tif (offsetSearchData.length == bucket) {\r\n\t\t\t\t\t\t\tbucketData = offsetSearchData;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar searchData = _.filter(levelWiseData[levelKey + searchLevel], function(node) {\r\n\t\t\t\t\t\t\treturn -1 != node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvar containsSarchResult = _.filter(levelWiseData[levelKey + searchLevel], function(node) {\r\n\t\t\t\t\t\t\treturn new RegExp(\"(\" + _.compact(searchString.split(' ')).join('|') + \")\", \"gi\").test(node[scope.titleProperty]) && -1 == node[scope.titleProperty].toLowerCase().indexOf(searchString.toLowerCase());\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsearchWithContainsHitResult = searchWithContainsHitResult.concat(containsSarchResult);\r\n\t\t\t\t\t\tvar qumulativeData = offsetSearchData.concat(searchData);\r\n\t\t\t\t\t\tvar partitionedData = _.partition(qumulativeData, function(data, index) {\r\n\t\t\t\t\t\t\treturn index > (bucket - 1);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tsearchDataYetToBeDisplayed = searchDataYetToBeDisplayed.concat(partitionedData[0]);\r\n\t\t\t\t\t\tbucketData = bucketData.concat(partitionedData[1]);\r\n\t\t\t\t\t\tsearchLevel = searchLevel - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (searchLevel == 0) {\r\n\t\t\t\t\t\twhile (bucketData.length < bucket) {\r\n\t\t\t\t\t\t\tvar containsSearchDataToBeAppended = getOffsetSearchDataForContainsSearch(bucket);\r\n\t\t\t\t\t\t\tif (containsSearchDataToBeAppended.length > 0) {\r\n\t\t\t\t\t\t\t\tbucketData = bucketData.concat(containsSearchDataToBeAppended);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn bucketData;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction closeChildsForParent(parent) {\r\n\t\t\t\t\tvar childs = _.filter(getChildsForParentAsPerBucket(parent), function(childNode) {\r\n\t\t\t\t\t\treturn childNode.isExpanded;\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_.each(childs, function(child) {\r\n\t\t\t\t\t\tchild.isExpanded = false;\r\n\t\t\t\t\t\tchild.children = [];\r\n\t\t\t\t\t\tcloseChildsForParent(child);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.searchText = '';\r\n\t\t\t\tscope.searchFieldVal = '';\r\n\r\n\t\t\t\tscope.expandNode = function(node, index) {\r\n\t\t\t\t\tnode.isExpanded = !node.isExpanded;\r\n\t\t\t\t\tif (node.isExpanded) {\r\n\t\t\t\t\t\tnode.children = getChildsForParentAsPerBucket(node, lazyLoadingBucket, 0);\r\n\t\t\t\t\t\tlazyLoadMarker.push(node.children[node.children.length - 1]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode.children = [];\r\n\t\t\t\t\t\tremoveMarkerForParent(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction removeMarkerForParent(parent) {\r\n\t\t\t\t\tvar childMarkers = _.filter(lazyLoadMarker, function(node, index) {\r\n\t\t\t\t\t\treturn -1 != node[parentCodeStringConstant].indexOf(parent[scope.codeProperty]);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tlazyLoadMarker = _.difference(lazyLoadMarker, childMarkers);\r\n\t\t\t\t\tcloseChildsForParent(parent);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar filterTextTimeout;\r\n\t\t\t\tscope.searchAndSelectNode = function(node) {\r\n\t\t\t\t\tif (filterTextTimeout)\r\n\t\t\t\t\t\t$timeout.cancel(filterTextTimeout);\r\n\t\t\t\t\tfilterTextTimeout = $timeout(function() {\r\n\t\t\t\t\t\tif (scope.searchFieldVal.length > 2)\r\n\t\t\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tsearchDataYetToBeDisplayed.length = 0;\r\n\t\t\t\t\t\t\tsearchWithContainsHitResult.length = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 300);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.selectNode = function(node, selectionState) {\r\n\t\t\t\t\tnode.selection = selectionState;\r\n\t\t\t\t\tif (scope.isSingleSelect) {\r\n\t\t\t\t\t    if (scope.selectedData && scope.selectedData[0] && scope.selectedData[0][scope.codeProperty] != node[scope.codeProperty]) {\r\n\t\t\t\t\t        scope.selectedData[0].selection = '0';\r\n\t\t\t\t\t    };\r\n\t\t\t\t\t    scope.selectedData = (selectionState == '0') ? [] : [node];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdateSelectionObject(node, selectionState);\r\n\t\t\t\t\t\tupdateChildsForNode(node, selectionState);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tupdateParentForNode(node, selectionState);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateSelectionObject(node, selectionState) {\r\n\t\t\t\t\tswitch(selectionState) {\r\n\t\t\t\t\tcase '0':\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '1':\r\n\t\t\t\t\t\tscope.selectedData.push(node);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateParentForNode(node, selectionState) {\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] - 1;\r\n\t\t\t\t\tvar immediateParentCode = node[scope.parentProperty].toString();\r\n\t\t\t\t\twhile (depthLevel > 0) {\r\n\t\t\t\t\t\tvar parent = _.find(levelWiseData[levelKey + depthLevel], function(node) {\r\n\t\t\t\t\t\t\treturn node[scope.codeProperty] == immediateParentCode;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\timmediateParentCode = parent[scope.parentProperty].toString();\r\n\t\t\t\t\t\tif (!parent['isExpanded']) {\r\n\t\t\t\t\t\t\tscope.expandNode(parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!scope.isSingleSelect) {\r\n\t\t\t\t\t\t\tparent.selection = getStateForNode(parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdepthLevel = depthLevel - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction getStateForNode(node) {\r\n\t\t\t\t\tvar childCount = node.ChildCount;\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCode = node[scope.codeProperty];\r\n\t\t\t\t\tvar groupByData = _.groupBy(levelWiseData[levelKey + depthLevel], scope.parentProperty);\r\n\t\t\t\t\tvar selectedChild = _.filter(groupByData[parentCode], function(node) {\r\n\t\t\t\t\t\treturn node.selection == '1';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tvar partiallySelectedChild = _.filter(groupByData[parentCode], function(node) {\r\n\t\t\t\t\t\treturn node.selection == '2';\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (childCount == selectedChild.length) {\r\n\t\t\t\t\t\tscope.selectedData = _.difference(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData.push(node);\r\n\t\t\t\t\t\treturn \"1\";\r\n\t\t\t\t\t} else if ((selectedChild.length + partiallySelectedChild.length) > 0) {\r\n\t\t\t\t\t\tscope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\treturn \"2\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tscope.selectedData = _.union(scope.selectedData, selectedChild);\r\n\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, node);\r\n\t\t\t\t\t\treturn \"0\";\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction updateChildsForNode(node, selectionState) {\r\n\t\t\t\t\tvar depthLevel = node[scope.levelProperty] + 1;\r\n\t\t\t\t\tvar parentCode = node[scope.codeProperty].toString();\r\n\t\t\t\t\twhile (depthLevel <= maxLevel) {\r\n\t\t\t\t\t\tvar childs = _.filter(levelWiseData[levelKey + depthLevel], function(node) {\r\n\t\t\t\t\t\t\treturn -1 != node[parentCodeStringConstant].indexOf(parentCode);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t_.each(childs, function(child) {\r\n\t\t\t\t\t\t\tchild.selection = selectionState;\r\n\t\t\t\t\t\t\tif (selectionState == \"1\") {\r\n\t\t\t\t\t\t\t\tscope.selectedData = _.without(scope.selectedData, child);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdepthLevel = depthLevel + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniqueIDGenerator = function() {\r\n\t\t\t\t\tvar d = new Date().getTime();\r\n\t\t\t\t\tvar uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function(c) {\r\n\t\t\t\t\t\tvar r = (d + Math.random() * 16) % 16 | 0;\r\n\t\t\t\t\t\td = Math.floor(d / 16);\r\n\t\t\t\t\t\treturn (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn uniqueID;\r\n\t\t\t\t};\r\n\t\t\t\tif (scope.isSingleSelect) {\r\n\t\t\t\t\tscope.uniqueRadioGroupName = uniqueIDGenerator();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*$timeout(function() {\r\n\t\t\t\t\tlazyLoadOffset = angular.element(\"#treeComponentContainer\")[0].getBoundingClientRect().bottom;\r\n\t\t\t\t\tangular.element('.scrollbar-outer').scrollbar({\r\n\t\t\t\t\t\tonScroll : function(y, x) {\r\n\t\t\t\t\t\t\tif (lazyLoadMarker.length > 0 && scope.searchFieldVal.length == 0) {\r\n\t\t\t\t\t\t\t\tvar markerNode = lazyLoadMarker[lazyLoadMarker.length - 1];\r\n\t\t\t\t\t\t\t\tif (angular.element(\"#\"+markerNode[scope.codeProperty])[0].getBoundingClientRect().top <= lazyLoadOffset) {\r\n\t\t\t\t\t\t\t\t\tconsole.log(markerNode);\r\n\t\t\t\t\t\t\t\t\tlazyLoadMarker.length = (lazyLoadMarker.length > 0) ? lazyLoadMarker.length - 1 : 0;\r\n\t\t\t\t\t\t\t\t\tlazyLoadLevelWiseData(markerNode);\r\n\t\t\t\t\t\t\t\t\tconsole.log(lazyLoadMarker.length);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (y.maxScroll > 0 && y.scroll == y.maxScroll && scope.searchFieldVal.length > 0) {\r\n\t\t\t\t\t\t\t\t$timeout(function() {\r\n\t\t\t\t\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});*/\r\n\t\t\t\t\r\n\t\t\t\tscope.scrollEnd = function(e){\r\n\t\t\t\t\tsearchAsPerBucketSize(scope.searchFieldVal, searchBucket);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n\r\n\t\t\t\tscope.doneClickHandler = function() {\r\n\t\t\t\t\tif (angular.isFunction(doneCallback)) {\r\n\t\t\t\t\t\tdoneCallback(scope.selectedData);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tscope.focusSearch = false;\r\n\t\t\t\tscope.isActive = false;\r\n\t\t\t\tscope.showMe = false;\r\n\t\t\t\tscope.showSearch = function () {\r\n\t\t\t\t    scope.isActive = true;\r\n\t\t\t\t    scope.focusSearch = true;\r\n\t\t\t\t    scope.showMe = true;\r\n\t\t\t\t    scope.hideClose = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.hideSearch = function () {\r\n\t\t\t\t    scope.isActive = false;\r\n\t\t\t\t    scope.focusSearch = false;\r\n\t\t\t\t    scope.hideClose = false;\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/smartTree/smartTreeTemplate.html'\r\n\t\t};\r\n\t}]).directive('ngIndeterminate', function($compile) {\r\n\t\treturn {\r\n\t\t\trestrict : 'A',\r\n\t\t\tlink : function(scope, element, attributes) {\r\n\t\t\t\tscope.$watch(attributes['ngIndeterminate'], function(value) {\r\n\t\t\t\t\telement.prop('indeterminate', value);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}).directive('ngHighlightSt',['$compile', 'hilitor', function($compile, hilitor) {\r\n\t\treturn {\r\n\t\t\trestrict : 'A',\r\n\t\t\tlink : function(scope, element, attributes) {\r\n\t\t\t\tscope.$watch(attributes['ngHighlight'], function(value) {\r\n\t\t\t\t\thilitor.getHilitor().apply(value);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}]).service('RESTApiSt', ['$http',\r\n\tfunction($http) {\r\n\t\tvar Callback;\r\n\r\n\t\tthis.getData = function(mode, callback, requestObject) {\r\n\t\t\tswitch(mode) {\r\n\t\t\tcase 'Category':\r\n\t\t\t\tCallback = callback;\r\n\t\t\t\tserviceCall(requestObject);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction serviceCall(req) {\r\n\t\t\t$http(req).then(function(response) {\r\n\t\t\t\tCallback(response);\r\n\t\t\t}, function(error) {\r\n\t\t\t\tCallback(error);\r\n\t\t\t});\r\n\t\t};\r\n\t}]).service('hilitor', [\r\n\tfunction() {\r\n\t\tvar hilitor = new Hilitor(\"treeComponentContainer\");\r\n\t\tthis.getHilitor = function() {\r\n\t\t\treturn hilitor;\r\n\t\t};\r\n\t}]);\r\n\r\n})(angular);\r\n\n// Original JavaScript code by Chirp Internet: www.chirp.com.au\n// Please acknowledge use of this code by including this header.\n// 2/2013 jon: modified regex to display any match, not restricted to word boundaries.\n\n// License at http://www.the-art-of-web.com/copyright.html\n\n(function ( window, factory ) {\n\n  if ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n    // Expose a factory as module.exports in loaders that implement the Node\n    // module pattern (including browserify).\n    // This accentuates the need for a real window in the environment\n    // e.g. var jQuery = require(\"jquery\")(window);\n    module.exports = function( w ) {\n      w = w || window;\n      if ( !w.document ) {\n        throw new Error(\"Hilitor requires a window with a document\");\n      }\n      return factory( w.document );\n    };\n  } else {\n    if ( typeof define === \"function\" && define.amd ) {\n      // AMD. Register as a named module.\n      define( [], function() {\n        return factory(document);\n      });\n    } else {\n        // Browser globals\n        window.Hilitor = factory(document);\n    }\n  }\n\n// Pass this, window may not be defined yet\n}(this, function ( document, undefined ) {\n\n\nfunction Hilitor(id, tag, options)\n{\n  var targetNode = document.getElementById(id) || document.body;\n  var hiliteTag = tag || \"EM\";\n  var skipTags = new RegExp(\"^(?:SCRIPT|FORM|INPUT|TEXTAREA|IFRAME|VIDEO|AUDIO)$\");\n  var colors = [\"#ff6\"];\n  var wordColor = [];\n  var colorIdx = 0;\n  var matchRegex = \"\";\n  var openLeft = true;\n  var openRight = true;\n  options = options || {};\n  if (typeof options.onStart !== 'function') {\n    options.onStart = function () { /* return FALSE when you want to abort */ };\n  }\n  if (typeof options.onFinish !== 'function') {\n    options.onFinish = function () { /* What you return here is returned by Hilitor.apply() */ return true; };\n  }\n  if (typeof options.onDoOne !== 'function') {\n    options.onDoOne = function (node) { /* return FALSE when you want to skip the highlighting change for this node */ };\n  }\n\n  this.setMatchType = function(type)\n  {\n    switch(type)\n    {\n    case \"left\":\n      openLeft = false;\n      openRight = true;\n      break;\n    case \"right\":\n      openLeft = true;\n      openRight = false;\n      break;\n    default:\n    case \"open\":\n      openLeft = openRight = true;\n      break;\n    case \"complete\":\n      openLeft = openRight = false;\n      break;\n    }\n  };\n\n  this.setRegex = function (input)\n  {\n    input = input.replace(/^[^\\w]+|[^\\w]+$/g, \"\").replace(/[^\\w'\\-]+/g, \"|\");\n    var re = \"(\" + input + \")\";\n    if(!openLeft) re = \"\\\\b\" + re;\n    if(!openRight) re = re + \"\\\\b\";\n    matchRegex = new RegExp(re, \"i\");\n  };\n\n  this.getRegex = function ()\n  {\n    var retval = matchRegex.toString();\n    retval = retval.replace(/^\\/(\\\\b)?|(\\\\b)?\\/i$/g, \"\");\n    retval = retval.replace(/\\|/g, \" \");\n    return retval;\n  };\n\n  // recursively apply word highlighting\n  this.hiliteWords = function (node)\n  {\n    var i;\n\n    if(!node)\n      return;\n    if(!matchRegex)\n      return;\n    if(skipTags.test(node.nodeName))\n       return;\n    if(node.nodeName === hiliteTag && node.className === \"hilitor\")\n      return;\n\n    if(node.hasChildNodes()) {\n      for(i = 0; i < node.childNodes.length; i++) {\n        this.hiliteWords(node.childNodes[i]);\n      }\n    }\n    if(node.nodeType === 3) { // NODE_TEXT\n      if((nv = node.nodeValue) && (regs = matchRegex.exec(nv))) {\n        if (false !== options.onDoOne.call(this, node)) {\n          if(!wordColor[regs[0].toLowerCase()]) {\n            wordColor[regs[0].toLowerCase()] = colors[colorIdx++ % colors.length];\n          }\n\n          var match = document.createElement(hiliteTag);\n          match.appendChild(document.createTextNode(regs[0]));\n          match.className = \"hilitor\";\n          match.style.backgroundColor = wordColor[regs[0].toLowerCase()];\n          match.style.fontStyle = \"inherit\";\n          match.style.color = \"#000\";\n\n          var after = node.splitText(regs.index);\n          after.nodeValue = after.nodeValue.substring(regs[0].length);\n          node.parentNode.insertBefore(match, after);\n        }\n      }\n    }\n  };\n\n  // remove highlighting\n  this.remove = function ()\n  {\n    var arr, i;\n    do {\n      arr = document.querySelectorAll(hiliteTag + \".hilitor\");\n      i = 0;\n      while (i < arr.length && (el = arr[i])) {\n        // store the reference to the parent of the hilite tag as that node itself, \n        // and all its links, is invalidated in the next .replaceChild() call:\n        var parentNode = el.parentNode;\n        if (!parentNode) {\n          i++;      \n          // this entry would otherwise crash in the code below; we can however improve \n          // on the total run-time costs by cutting back on the number of times we trigger\n          // the outer loop (which serves as a recovery mechanism anyway) by continuing\n          // with this querySelectorAll()'s results, but at it's higher indexes, which\n          // are very probably still valid/okay. This saves a number of outer loops and \n          // thus a number of querySelectorAll calls.\n          continue;\n        }\n        // Note that this stuff can crash (due to the parentNode being nuked) when multiple\n        // snippets in the same text node sibling series are merged. That's what the\n        // parentNode check is for. Ugly. Even while the .querySelectorAll() 'array' is updated\n        // automatically, which would imply that this never occurs, yet: it does. :-(\n        parentNode.replaceChild(el.firstChild, el);\n        // and merge the text snippets back together again.\n        parentNode.normalize();\n      }\n    } while (arr.length > 0);\n  };\n\n  // start highlighting at target node\n  this.apply = function (input)\n  {\n    // always remove all highlight markers which have been done previously\n    this.remove();\n    if(!input) {\n      return false;\n    }\n    this.setRegex(input);\n    var rv = options.onStart.call(this);\n    if (rv === false) {\n      return rv;\n    }\n    // ensure all text node series are merged, etc. so that we don't have to bother with fragmented texts in the search/scan.\n    targetNode.normalize();\n    this.hiliteWords(targetNode);\n    return options.onFinish.call(this);\n  };\n}\n\n\n  return Hilitor;\n}));\n\nangular.module('SMART2').directive('stickOnScroll', function ($window, $compile) {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            setTop: '@',\r\n            setZindex: '@',\r\n            onScroll:'&',\r\n            setLeft:\"@\",\r\n            setRight:\"@\",\r\n        },\r\n        link: function (scope, elem, attrs) {\r\n\r\n\r\n            if (scope.setTop == '' || scope.setTop == undefined) {\r\n                scope.setTop = '0'\r\n            }\r\n            if (scope.setLeft == '' || scope.setLeft == undefined) {\r\n                scope.setLeft = '0'\r\n            }\r\n            if (scope.setRight == '' || scope.setRight == undefined) {\r\n                scope.setRight = '0'\r\n            }\r\n\r\n            if (scope.setZindex == '' || scope.setZindex == undefined) {\r\n                scope.setZindex = '1'\r\n            }\r\n            \r\n\r\n            var template = '<div id=\"fixedtoHeaderheight_' + scope.$id + '\" style=\"display:none\"></div>';\r\n            attrs.$observe('stickOnScroll', function (value) {\r\n                if (value == \"true\") {\r\n                    var newElement = $compile(template)(scope);\r\n                    elem.after(newElement);\r\n                    var scrollTop = elem.offset().top;\r\n                    angular.element($window).bind('scroll', function () {\r\n                        var elemHeight = elem.outerHeight(),\r\n                            winScrollTop = angular.element($window).scrollTop();\r\n\r\n                        if (winScrollTop >= scrollTop) {\r\n                            if (attrs.stickLimit != undefined) {\r\n                                var el = $(attrs.stickLimit),\r\n                                    config = {\r\n                                        top: el.offset().top,\r\n                                        height: el.outerHeight()\r\n                                    };\r\n                                if ((winScrollTop + elem.outerHeight()) > (config.top + config.height)) {\r\n                                    elem.removeClass('is-fixed-on-top').css({ 'top': \"\", \"left\": \"\", \"right\": \"\", 'z-index': \"\" });\r\n                                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                                } else {\r\n                                    elem.addClass('is-fixed-on-top ' + attrs.applyClassOnFixed).css({ 'top': scope.setTop, 'left': scope.setLeft, 'right': scope.setRight, 'z-index': scope.setZindex });\r\n                                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': elemHeight, 'display': 'block' });\r\n                                }\r\n                            } else {\r\n                                elem.addClass('is-fixed-on-top ' + attrs.applyClassOnFixed).css({ 'top': scope.setTop, 'left': scope.setLeft, 'right': scope.setRight, 'z-index': scope.setZindex });\r\n                                angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': elemHeight, 'display': 'block' });\r\n                            }\r\n                        } else {\r\n                            elem.removeClass('is-fixed-on-top').css({ 'top': \"\", \"left\": \"\", \"right\":\"\", 'z-index': \"\" });\r\n                            angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                        }\r\n\r\n                        scope.onScroll();\r\n                    });\r\n                }\r\n                else {\r\n                    angular.element('#fixedtoHeaderheight_' + scope.$id).css({ 'height': 0, 'display': 'none' });\r\n                    elem.next('#fixedtoHeaderheight_' + scope.$id).remove();\r\n                    elem.removeClass('is-fixed-on-top').css({ 'top': \"\",   \"left\": \"\", \"right\":\"\",'z-index': \"\" });\r\n                    \r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n});\r\n\r\n\n(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n.directive('customTab', [function () {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attrs) {\r\n            var tabbingOnKeyDown = function (e) {\r\n                var $this = $(this),\r\n                    tabType = angular.isDefined(attrs.tabType);\r\n                if (e.keyCode == 38 && !tabType && ($this.prev().length > 0) || e.keyCode == 37 && tabType && ($this.prev().length > 0)) {\r\n                    $this.prev().focus();\r\n                    e.preventDefault();\r\n                }\r\n                else if (e.keyCode == 40 && !tabType && ($this.next().length > 0) || e.keyCode == 39 && tabType && ($this.next().length > 0)) {\r\n                    $this.next().focus();\r\n                    e.preventDefault();\r\n                }\r\n               else if (e.keyCode == 13) {\r\n                   $this.trigger(\"click\");\r\n                   e.preventDefault();\r\n               }\r\n                \r\n            };\r\n            elem.bind(\"keydown\", tabbingOnKeyDown);\r\n            scope.$on('$destroy', function () {\r\n                elem.unbind(\"keydown\", tabbingOnKeyDown);\r\n            });\r\n        }\r\n    }\r\n}]);\r\n})();\n(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n  .directive('focusonkeypress', ['$focusOnField', function ($focusOnField) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attr) {\r\n            var prevFocus;\r\n            var bindKeyEventFunction = function (e) {\r\n                var focusInfunc = function () {\r\n                    if (!elem.hasClass(\"focused\")) {\r\n                        prevFocus = document.activeElement;\r\n                        elem.addClass(\"focused\");\r\n                        var firstFieldFocus = elem.find(\"a, input, textarea, [tabindex]\").first();\r\n                        $focusOnField(firstFieldFocus);\r\n                    }\r\n                },\r\n                focusOutfunc = function () {\r\n                    if (elem.hasClass(\"focused\")) {\r\n                        $focusOnField(prevFocus);\r\n                        prevFocus = ''\r\n                        elem.removeClass(\"focused\");\r\n\r\n                    }\r\n                };\r\n\r\n                if (attr.altkey && attr.altkey != 'false') {\r\n                    if (attr.focusin && e.key == attr.focusin && e.altKey == true) {\r\n                        focusInfunc();\r\n                    } else if (attr.focusout && e.key == attr.focusout && e.altKey == true) {\r\n                        focusOutfunc();\r\n                    };\r\n                }\r\n                else {\r\n                    if (attr.focusin && e.key == attr.focusin) {\r\n                        focusInfunc();\r\n                    } else if (attr.focusout && e.key == attr.focusout) {\r\n                        focusOutfunc();\r\n                    };\r\n                };\r\n\r\n            };\r\n            $(document).bind(\"keydown\", bindKeyEventFunction);\r\n          scope.$on('$destroy', function () {\r\n                $(document).unbind(\"keydown\", bindKeyEventFunction);\r\n            });\r\n        }\r\n    }\r\n  }]);\r\n})();\n(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n  .directive('a', function () {\r\n      return {\r\n          restrict : 'E',\r\n          link: function (scope, elem, attr) {\r\n              var checkAttr = attr.href,\r\n                  svgIcon = elem.find('svg');\r\n                  \r\n              if(svgIcon){\r\n                  svgIcon.attr(\"focusable\",\"false\");// ie 11 not supported for this\r\n              }  \r\n              if(checkAttr == undefined){\r\n                  attr.$set(\"href\",\"\");\r\n              }\r\n          }\r\n      }\r\n  })\r\n.directive('menuItemList', ['menuListItemServ', function (menuListItemServ) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attr) {\r\n            menuListItemServ(elem);\r\n        }\r\n    }\r\n}])\r\n.directive('extraNavTitle', [function () {\r\n    return {\r\n        restrict: 'C',\r\n        link: function (scope, element, attrs) {\r\n            var firstField = element.find(\"a, input, button, textarea, [tabindex]\").not(\":disabled, :hidden, [tabindex = -1]\").first();\r\n            firstField.focus();\r\n        }\r\n    }\r\n\r\n}]);\r\n})();\n(function () {\r\n    'use strict';\r\nangular.module('SMART2')\r\n.directive('tabbingGroup', ['$focusOnField', function ($focusOnField) {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, elem, attrs) {\r\n            elem.bind(\"keydown\", function (e) {\r\n                if (e.which == 9) {\r\n                    var focusableEle = \"a, input[type=text],input[type=radio]:checked,input[type=checkbox], button, textarea, [tabindex='0']\",\r\n                        avoidFocusableEle = \":disabled, :hidden, [tabindex=-1]\",\r\n                        $firstField = elem.find(focusableEle).not(avoidFocusableEle).first(),\r\n                        $lastField = elem.find(focusableEle).not(avoidFocusableEle).last();\r\n                    if (e.target == $firstField.get(0) && e.shiftKey) {\r\n                        e.preventDefault();\r\n                        $focusOnField($lastField);\r\n                    } else if (e.target == $lastField.get(0) && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        $focusOnField($firstField);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n}]);\r\n})();\n(function () {\r\nangular.module(\"SMART2\").directive(\"searchableCube\", [function () {\r\n        \"use strict\";\r\n        return {\r\n            restrict: 'E',\r\n            transclude: true,\r\n            scope: {\r\n                cubeletList: '=?',\r\n                enableProceed: '&',\r\n                selectedCube: '=?',\r\n                formatKey: '@'\r\n            },\r\n            link: function (scope, $element, attrs) {\r\n                scope.proceed = false;\r\n\r\n                var enableProceed = scope.$eval(scope.enableProceed);\r\n                scope.options = JSON.parse(JSON.stringify(scope.cubeletList));\r\n\r\n                scope.selectedCube = scope.selectedCube || {};\r\n\r\n                var container,\r\n                    camera, scene, renderer,\r\n                    canvasMouseMove = false,\r\n                    mouse = new THREE.Vector2(),\r\n                    INTERSECTED, previousInt,\r\n                    group = new THREE.Group(),\r\n\r\n                    // mouseRotation vars\r\n                    mouseDown = false,\r\n                    mousemoved = false,\r\n                    startPosition = { x: 0, y: 0, z: 0 },\r\n                    rotateStartPoint = new THREE.Vector3(0, 0, 1),\r\n                    rotateEndPoint = new THREE.Vector3(0, 0, 1),\r\n                    curQuaternion,\r\n                    animationComplete = true,\r\n                    windowHalfX = window.innerWidth / 2,\r\n                    windowHalfY = window.innerHeight / 2,\r\n                    rotationSpeed = 2,\r\n                    lastMoveTimestamp,\r\n                    moveReleaseTimeDelta = 50,\r\n                    selectedCublet,\r\n                    startPoint = {\r\n                        x: 0,\r\n                        y: 0\r\n                    },\r\n                    deltaX = 0,\r\n                    deltaY = 0;\r\n                // mouseRotation vars End\r\n\r\n\r\n\r\n                init();\r\n                animate();\r\n\r\n                function init() {\r\n                    container = $element[0];\r\n\r\n                    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);\r\n                    camera.position.set(-360, 440, 700);\r\n\r\n                    scene = new THREE.Scene();\r\n                    //scene.background = new THREE.Color(0x0067b0);\r\n\r\n                    camera.lookAt(scene.position);\r\n\r\n                    scene.add(new THREE.AmbientLight(0x505050));\r\n\r\n                    var light = new THREE.SpotLight(0xffffff, 1.25);\r\n                    light.position.set(-650, 650, 650);\r\n                    // light.rotation.set(  37.32 * Math.PI/180,    -16.45* Math.PI/180,    204.184* Math.PI/180);\r\n                    light.castShadow = true;\r\n\r\n                    light.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(70, 1, 100, 10000));\r\n                    light.shadow.bias = 0.00001;\r\n\r\n                    light.shadow.mapSize.width = 4096;\r\n                    light.shadow.mapSize.height = 4096;\r\n\r\n                    scene.add(light);\r\n\r\n                    var cubletWidth = 90,\r\n                        cubeSeparation = 20,\r\n                        geometry,\r\n                        generateThreeByThree,\r\n                        generateTwoByTwo;\r\n\r\n                    var positionsArrayThreeByThree = [\r\n                            [-1, 1, 1],\r\n                            [-1, 0, 1],\r\n                            [-1, -1, 1],\r\n                            [0, 1, 1],\r\n                            [0, 0, 1],\r\n                            [0, -1, 1],\r\n                            [1, 1, 1],\r\n                            [1, 0, 1],\r\n                            [1, -1, 1],\r\n                            [1, 1, 0],\r\n                            [1, 0, 0],\r\n                            [1, -1, 0],\r\n                            [1, 1, -1],\r\n                            [1, 0, -1],\r\n                            [1, -1, -1],\r\n                            [0, 1, -1],\r\n                            [0, 0, -1],\r\n                            [0, -1, -1],\r\n                            [-1, 1, -1],\r\n                            [-1, 0, -1],\r\n                            [-1, -1, -1],\r\n                            [-1, 1, 0],\r\n                            [-1, 0, 0],\r\n                            [-1, -1, 0],\r\n                            [0, 1, 0],\r\n                            [0, -1, 0],\r\n                            [0, 0, 0]\r\n                        ],\r\n                        positionsArrayTwoByTwo = [\r\n                            [-1, 1, 1],\r\n                            [-1, -1, 1],\r\n                            [1, 1, 1],\r\n                            [1, -1, 1],\r\n                            [1, 1, -1],\r\n                            [1, -1, -1],\r\n                            [-1, 1, -1],\r\n                            [-1, -1, -1]\r\n                        ];\r\n\r\n\r\n                    generateThreeByThree = function () {\r\n                        geometry = new THREE.BoxGeometry(cubletWidth, cubletWidth, cubletWidth);\r\n                        var object;\r\n                        for (var i = 0; i < 27; i++) {\r\n                            if (i < scope.options.length) {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: \"#6fc2fb\" }));\r\n                            } else {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\r\n                                    color: 0xffffff,\r\n                                    transparent: true,\r\n                                    opacity: 0.7\r\n                                }));\r\n                            }\r\n                            object.position.x = positionsArrayThreeByThree[i][0] * (cubletWidth + cubeSeparation);\r\n                            object.position.y = positionsArrayThreeByThree[i][1] * (cubletWidth + cubeSeparation);\r\n                            object.position.z = positionsArrayThreeByThree[i][2] * (cubletWidth + cubeSeparation);\r\n\r\n                            object.scale.x = 1;\r\n                            object.scale.y = 1;\r\n                            object.scale.z = 1;\r\n\r\n                            \r\n                            object.dataID = i + 1;\r\n                            if (i < scope.options.length) {\r\n                                object.castShadow = true;\r\n                                object.receiveShadow = true;\r\n                                object.name = scope.options[i][scope.formatKey];\r\n                                object.disable = false;\r\n                            } else {\r\n                                object.disable = true;\r\n                            }\r\n\r\n                            group.add(object);\r\n                        }\r\n                    };\r\n\r\n                    generateTwoByTwo = function () {\r\n                        geometry = new THREE.BoxGeometry(cubletWidth + 45, cubletWidth + 45, cubletWidth + 45);\r\n                        var object;\r\n                        for (var i = 0; i < 8; i++) {\r\n                            if (i < scope.options.length) {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: \"#6fc2fb\" }));\r\n                            } else {\r\n                                object = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({\r\n                                    color: 0xffffff,\r\n                                    transparent: true,\r\n                                    opacity: 0.7\r\n                                }));\r\n                            }\r\n\r\n                            object.position.x = positionsArrayTwoByTwo[i][0] * (cubletWidth + cubeSeparation + 45) / 2;\r\n                            object.position.y = positionsArrayTwoByTwo[i][1] * (cubletWidth + cubeSeparation + 45) / 2;\r\n                            object.position.z = positionsArrayTwoByTwo[i][2] * (cubletWidth + cubeSeparation + 45) / 2;\r\n\r\n                            object.scale.x = 1;\r\n                            object.scale.y = 1;\r\n                            object.scale.z = 1;\r\n                            object.dataID = i + 1;\r\n                            \r\n                            if (i < scope.options.length) {\r\n                                object.name = scope.options[i][scope.formatKey];\r\n                                object.castShadow = true;\r\n                                object.receiveShadow = true;\r\n                                object.disable = false;\r\n                            } else {\r\n                                object.disable = true;\r\n                            }\r\n\r\n                            group.add(object);\r\n                        }\r\n                    };\r\n                    \r\n\r\n                    if (scope.options.length > 8) {\r\n                        generateThreeByThree();\r\n                    } else {\r\n                        generateTwoByTwo();\r\n                    }\r\n\r\n                    scene.add(group);\r\n\r\n                    renderer = new THREE.WebGLRenderer({\r\n                            alpha: true,\r\n                            antialias: true\r\n                    });\r\n                    renderer.setPixelRatio(window.devicePixelRatio);\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n                    renderer.shadowMap.enabled = true;\r\n                    renderer.shadowMap.type = THREE.PCFShadowMap;\r\n                    renderer.shadowMap.soft = true;\r\n\r\n                    container.appendChild(renderer.domElement);\r\n                    container.addEventListener('mousemove', onMouseMove);\r\n\r\n                    // window.addEventListener('resize', onWindowResize, false);\r\n                    container.addEventListener('mousedown', onDocumentMouseDown, true);\r\n                    window.addEventListener('resize', onWindowResize, false);\r\n                }\r\n\r\n                // keyhandler\r\n                container.addEventListener('keydown', keyPressed);\r\n\r\n                function keyPressed(e) {\r\n                    switch (e.keyCode) {\r\n                        case 38:\r\n                            scope.handleRotation(\"top\");\r\n                            break;\r\n                        case 40:\r\n                            scope.handleRotation(\"bottom\");\r\n                            break;\r\n                        case 37:\r\n                            scope.handleRotation(\"left\");\r\n                            break;\r\n                        case 39:\r\n                            scope.handleRotation(\"right\");\r\n                            break;\r\n                    }\r\n                };\r\n                \r\n\r\n                //$element.find(\".searchElement\").on('click', function (event) {\r\n                //    event.stopPropagation();\r\n                //});\r\n                   \r\n                \r\n                //$element.find(\".navBtn\").on('click', function(event) {\r\n                //    scope.handleRotation(this.id);\r\n                //});\r\n\r\n                scope.handleRotation = function(btnType) {\r\n                    if (!animationComplete) {\r\n                        return;\r\n                    }\r\n                    switch (btnType) {\r\n                        case \"top\":\r\n                            animateRotation(1, 0, 0);\r\n                            break;\r\n                        case \"bottom\":\r\n                            animateRotation(-1, 0, 0);\r\n                            break;\r\n                        case \"left\":\r\n                            animateRotation(0, 1, 0);\r\n                            break;\r\n                        case \"right\":\r\n                            animateRotation(0, -1, 0);\r\n                            break;\r\n                    }\r\n                };\r\n\r\n                scope.routeToReport = function () {\r\n                    location.href = \"index_reports.html#/analytics/new\";\r\n                }\r\n\r\n                scope.searchElementByValue = function () {\r\n                    var value = $element.find(\".searchElement input\").val().toLowerCase();\r\n                    var index = _.findIndex(this.cubeletList, { name: value.charAt(0).toUpperCase() + value.slice(1) });\r\n                    if (index !== -1) {\r\n                        scope.selectedCube.select = this.cubeletList[index];\r\n                        scope.searchElement(scope.selectedCube.select.id);\r\n                    }\r\n                }\r\n                \r\n\r\n                function animateRotation(xDirection, yDirection, zDirection) {\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: Math.PI / 2 },\r\n                        tween = new TWEEN.Tween(position).to(target, 1000),\r\n                        prePositon = { x: 0, y: 0 },\r\n                        X = 0,\r\n                        Y = 0,\r\n                        Z = 0;\r\n\r\n                    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.y - prePositon.y;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        } else {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        var deltaRotationQuaternion = new THREE.Quaternion()\r\n                            .setFromEuler(new THREE.Euler(X,\r\n                                Y,\r\n                                Z,\r\n                                'XYZ'\r\n                            ));\r\n                        group.quaternion.multiplyQuaternions(deltaRotationQuaternion, group.quaternion);\r\n                        prePositon.y = position.y;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                // keyhandler end\r\n\r\n\r\n                function onWindowResize() {\r\n                    camera.aspect = window.innerWidth / window.innerHeight;\r\n                    camera.updateProjectionMatrix();\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n                };\r\n\r\n                function animate() {\r\n                    requestAnimationFrame(animate);\r\n                    render();\r\n                    update();\r\n                    TWEEN.update();\r\n                };\r\n\r\n                // animationLogic\r\n                function onDocumentMouseDown(event) {\r\n                    if (!animationComplete || event.target != $element.find('.mainScreen')[0]) {\r\n                        return;\r\n                    }\r\n                    //event.preventDefault();\r\n                    container.addEventListener('mousemove', onDocumentMouseMove, false);\r\n                    container.addEventListener('mouseup', onDocumentMouseUp, false);\r\n\r\n                    mouseDown = true;\r\n\r\n                    startPoint = {\r\n                        x: event.clientX,\r\n                        y: event.clientY\r\n                    };\r\n\r\n                    rotateStartPoint = rotateEndPoint = projectOnTrackball(0, 0);\r\n                };\r\n\r\n                function onMouseMove(e) {\r\n                    canvasMouseMove = true;\r\n                    event.preventDefault();\r\n                    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n                    mouse.clientX = event.clientX;\r\n                    mouse.clientY = event.clientY;\r\n                };\r\n\r\n                function onDocumentMouseMove(event) {\r\n                    mousemoved = true;\r\n\r\n                    deltaX = event.x - startPoint.x;\r\n                    deltaY = event.y - startPoint.y;\r\n\r\n                    handleRotationMouse();\r\n\r\n                    startPoint.x = event.x;\r\n                    startPoint.y = event.y;\r\n\r\n                    lastMoveTimestamp = new Date();\r\n                };\r\n\r\n                function onDocumentMouseUp(event) {\r\n                    highlightCublet(previousInt);\r\n                    if (new Date().getTime() - (lastMoveTimestamp ? lastMoveTimestamp.getTime() : 0) > moveReleaseTimeDelta) {\r\n                        deltaX = event.x - startPoint.x;\r\n                        deltaY = event.y - startPoint.y;\r\n                    }\r\n\r\n                    mouseDown = false;\r\n\r\n                    container.removeEventListener('mousemove', onDocumentMouseMove, false);\r\n                    container.removeEventListener('mouseup', onDocumentMouseUp, false);\r\n                    if (mousemoved && animationComplete) {\r\n                        // resetCube();\r\n                    }\r\n                    mousemoved = false;\r\n\r\n\r\n                    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\r\n                    vector.unproject(camera);\r\n                    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n\r\n                    // create an array containing all objects in the scene with which the ray intersects\r\n                    var intersects = ray.intersectObjects(scene.children[2].children);\r\n\r\n                    // if there is one (or more) intersections\r\n                    if (intersects.length > 0 && (selectedCublet == void 0 || intersects[0].object.name != selectedCublet.name)) {\r\n                        popInCube(INTERSECTED);\r\n                        popOutCube(INTERSECTED);\r\n                        //console.log(\"route to: \" + intersects[0].object.name);\r\n                        \r\n                    }\r\n                };\r\n\r\n\r\n                function projectOnTrackball(touchX, touchY) {\r\n                    var mouseOnBall = new THREE.Vector3();\r\n\r\n                    mouseOnBall.set(\r\n                        clamp(touchX / windowHalfX, -1, 1), clamp(-touchY / windowHalfY, -1, 1),\r\n                        0.0\r\n                    );\r\n\r\n                    var length = mouseOnBall.length();\r\n\r\n                    if (length > 1.0) {\r\n                        mouseOnBall.normalize();\r\n                    } else {\r\n                        mouseOnBall.z = Math.sqrt(1.0 - length * length);\r\n                    }\r\n\r\n                    return mouseOnBall;\r\n                };\r\n\r\n                function rotateMatrix(rotateStart, rotateEnd) {\r\n                    var axis = new THREE.Vector3(),\r\n                        quaternion = new THREE.Quaternion(),\r\n                        angle;\r\n\r\n                    angle = Math.acos(rotateStart.dot(rotateEnd) / rotateStart.length() / rotateEnd.length());\r\n\r\n                    if (angle) {\r\n                        axis.crossVectors(rotateStart, rotateEnd).normalize();\r\n                        angle *= rotationSpeed;\r\n                        quaternion.setFromAxisAngle(axis, angle);\r\n                    }\r\n                    return quaternion;\r\n                };\r\n\r\n                function clamp(value, min, max) {\r\n                    return Math.min(Math.max(value, min), max);\r\n                };\r\n                // animationLogicEnds\r\n\r\n\r\n                function render() {\r\n                    TWEEN.update();\r\n                    if (!mouseDown) {\r\n                        var drag = 0.95,\r\n                            minDelta = 0.05;\r\n\r\n                        if (deltaX < -minDelta || deltaX > minDelta) {\r\n                            deltaX *= drag;\r\n                        } else {\r\n                            deltaX = 0;\r\n                        }\r\n\r\n                        if (deltaY < -minDelta || deltaY > minDelta) {\r\n                            deltaY *= drag;\r\n                        } else {\r\n                            deltaY = 0;\r\n                        }\r\n\r\n                        // handleRotationMouse();\r\n                    }\r\n                    renderer.render(scene, camera);\r\n                };\r\n\r\n\r\n                var handleRotationMouse = function() {\r\n                    rotateEndPoint = projectOnTrackball(deltaX, deltaY, -1 * deltaX);\r\n                    var rotateQuaternion = rotateMatrix(rotateStartPoint, rotateEndPoint);\r\n                    curQuaternion = group.quaternion;\r\n                    curQuaternion.multiplyQuaternions(rotateQuaternion, curQuaternion);\r\n                    curQuaternion.normalize();\r\n                    group.setRotationFromQuaternion(curQuaternion);\r\n                    rotateEndPoint = rotateStartPoint;\r\n                };\r\n\r\n                function resetCube() {\r\n                    var position = group.rotation;\r\n                    animateResetRotation(Math.sign(position.x), Math.sign(position.y), Math.sign(position.z), group.rotation.x, group.rotation.y, group.rotation.z);\r\n                    group.updateMatrix();\r\n                };\r\n\r\n                function animateResetRotation(xDirection, yDirection, zDirection, anglex, angley, anglez) {\r\n                    var PI = Math.PI,\r\n                        position = { x: anglex, y: angley, z: anglez },\r\n                        nearesrXGap = Math.abs(anglex % (PI / 2)) > PI / 4 ? anglex + xDirection * (PI / 2 - Math.abs(anglex % (PI / 2))) : anglex - anglex % (PI / 2),\r\n                        nearesrYGap = Math.abs(angley % (PI / 2)) > PI / 4 ? angley + yDirection * (PI / 2 - Math.abs(angley % (PI / 2))) : angley - angley % (PI / 2),\r\n                        nearesrZGap = Math.abs(anglez % (PI / 2)) > PI / 4 ? anglez + zDirection * (PI / 2 - Math.abs(anglez % (PI / 2))) : anglez - anglez % (PI / 2),\r\n                        target = { x: nearesrXGap, y: nearesrYGap, z: nearesrZGap },\r\n                        tween = new TWEEN.Tween(position).to(target, 200),\r\n                        prePositon = { x: anglex, y: anglex, z: anglez },\r\n                        X, Y, Z;\r\n\r\n                    // tween.easing(TWEEN.Easing.Linear.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.x - prePositon.x;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        }\r\n                        if (yDirection) {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n                        if (zDirection) {\r\n                            Z = position.z - prePositon.z;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        group.rotation.x = position.x;\r\n                        group.rotation.y = position.y;\r\n                        group.rotation.z = position.z;\r\n                        prePositon.x = position.x;\r\n                        prePositon.y = position.y;\r\n                        prePositon.z = position.z;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                //$element.find(\"#search-cublet\").on(\"click\", function (e) {\r\n                //     searchElement();\r\n                //});\r\n\r\n                scope.searchElement = function (requestedID) {\r\n                    if (scope.options.length > 8) {\r\n                        switch (requestedID) {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                            case 9:\r\n                                animateFindElementRotation(0, 0, 0, 0, 0, 0, requestedID);\r\n                                break;\r\n                            case 16:\r\n                            case 17:\r\n                            case 18:\r\n                            case 19:\r\n                            case 20:\r\n                            case 21:\r\n                                animateFindElementRotation(1, 0, 1, Math.PI, 0, Math.PI, requestedID);\r\n                                break;\r\n                            case 22:\r\n                            case 23:\r\n                            case 24:\r\n                                animateFindElementRotation(0, 1, 0, 0, Math.PI / 2, 0, requestedID);\r\n                                break;\r\n                            case 10:\r\n                            case 11:\r\n                            case 12:\r\n                            case 13:\r\n                            case 14:\r\n                            case 15:\r\n                                animateFindElementRotation(0, -1, 0, 0, -Math.PI / 2, 0, requestedID);\r\n                                break;\r\n                            case 25:\r\n                                animateFindElementRotation(1, 0, 0, Math.PI / 2, 0, 0, requestedID);\r\n                                break;\r\n                            case 26:\r\n                                animateFindElementRotation(-1, 0, 0, -Math.PI / 2, 0, 0, requestedID);\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        switch (requestedID) {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                                animateFindElementRotation(0, 0, 0, 0, 0, 0, requestedID);\r\n                                break;\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                                animateFindElementRotation(1, 0, 1, Math.PI, 0, Math.PI, requestedID);\r\n                                break;\r\n                        }\r\n                    }\r\n                    \r\n                };\r\n\r\n                function animateFindElementRotation(xDirection, yDirection, zDirection, anglex, angley, anglez, requestedID) {\r\n                    var INTERSECTED = scene.children[2].children[parseInt(requestedID) - 1],\r\n                        currentAngles = group.rotation,\r\n                        PI = Math.PI,\r\n                        position = { x: currentAngles.x, y: currentAngles.y, z: currentAngles.z },\r\n                        target = { x: anglex, y: angley, z: anglez },\r\n                        tween = new TWEEN.Tween(position).to(target, 200),\r\n                        prePositon = { x: anglex, y: anglex, z: anglez },\r\n                        X, Y, Z;\r\n\r\n                    highlightCublet(previousInt);\r\n                    //if (previousInt == void 0 || previousInt.dataID !== requestedID) {\r\n                        animateCubePopup(INTERSECTED, true);\r\n                        popInCube(INTERSECTED);\r\n                        popOutCube(INTERSECTED);\r\n                    //}\r\n\r\n                    previousInt = INTERSECTED;\r\n\r\n                    // tween.easing(TWEEN.Easing.Linear.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        if (xDirection) {\r\n                            X = position.x - prePositon.x;\r\n                            if (xDirection == 1) {\r\n                                X = -1 * X;\r\n                            }\r\n                        }\r\n                        if (yDirection) {\r\n                            Y = position.y - prePositon.y;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n                        if (zDirection) {\r\n                            Z = position.z - prePositon.z;\r\n                            if (yDirection == 1) {\r\n                                Y = -1 * Y;\r\n                            }\r\n                        }\r\n\r\n                        animationComplete = false;\r\n                        group.rotation.x = position.x;\r\n                        group.rotation.y = position.y;\r\n                        group.rotation.z = position.z;\r\n                        prePositon.x = position.x;\r\n                        prePositon.y = position.y;\r\n                        prePositon.z = position.z;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                    });\r\n                };\r\n\r\n                // highlight logic\r\n                function update() {\r\n                    if (!animationComplete || mouseDown || !canvasMouseMove) {\r\n                        return;\r\n                    }\r\n                    // find intersections\r\n\r\n                    // create a Ray with origin at the mouse position\r\n                    //   and direction into the scene (camera direction)\r\n                    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\r\n                    vector.unproject(camera);\r\n                    var ray = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\r\n\r\n                    // create an array containing all objects in the scene with which the ray intersects\r\n                    var intersects = ray.intersectObjects(scene.children[2].children);\r\n\r\n                    // INTERSECTED = the object in the scene currently closest to the camera \r\n                    //      and intersected by the Ray projected from the mouse position    \r\n\r\n                    // if there is one (or more) intersections\r\n                    if (intersects.length > 0) {\r\n                        // if the closest object intersected is not the currently stored intersection object\r\n                        if (intersects[0].object != INTERSECTED) {\r\n\r\n                            // restore previous intersection object (if it exists) to its original color\r\n                            if (INTERSECTED && (selectedCublet == void 0 || INTERSECTED.id != selectedCublet.id) && !INTERSECTED.disable) {\r\n                                INTERSECTED.material.color.setHex(INTERSECTED.currentHex);\r\n                            }\r\n\r\n\r\n                            // store reference to closest object as current intersection object\r\n                            INTERSECTED = intersects[0].object;\r\n                            if (INTERSECTED.disable) {\r\n                                return;\r\n                            }\r\n\r\n                            if (previousInt !== void 0 && INTERSECTED.name !== previousInt.name && previousInt.hovered) {\r\n                                highlightCublet(previousInt);\r\n                            }\r\n\r\n                            if (previousInt == void 0 || INTERSECTED.name !== previousInt.name) {\r\n                                // store color of closest object (for later restoration)\r\n                                canvasMouseMove = false;\r\n\r\n                                animateCubePopup(INTERSECTED);\r\n                            }\r\n                        }\r\n                    } else // there are no intersections\r\n                    {\r\n                        INTERSECTED = null;\r\n                    }\r\n                };\r\n\r\n                var getIntersect = function (INTERSECTED, camera, jqdiv) {\r\n\r\n\r\n                    var pos = INTERSECTED.position.clone(),\r\n                    projScreenMat = new THREE.Matrix4();\r\n                    projScreenMat.multiply(camera.projectionMatrix, camera.matrixWorldInverse);\r\n                    projScreenMat.multiplyVector3(pos);\r\n\r\n                    return {\r\n                        \"x\": (pos.x + 1) * jqdiv.width() / 2 + jqdiv.offset().left,\r\n                        \"y\": (-pos.y + 1) * jqdiv.height() / 2 + jqdiv.offset().top\r\n                    };\r\n                };\r\n\r\n\r\n                function animateCubePopup(INTERSECTED, fromSerach) {\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: 20 },\r\n                        tween = new TWEEN.Tween(position).to(target, 100),\r\n                        prePositon = { x: 0, y: 0 },\r\n                        $mainScreen = $element.find(\".mainScreen\"),\r\n                        intersect = {\r\n                            x: mouse.clientX + 10,\r\n                            y: mouse.clientY\r\n                        };\r\n\r\n                        if (fromSerach) {\r\n                            intersect = getIntersect(INTERSECTED, camera, $element);\r\n                        }\r\n\r\n                    $mainScreen.attr(\"interesect\", JSON.stringify(intersect))\r\n                    .attr(\"tooltipActive\", true)\r\n                    .attr(\"message\", \"Cublet <b>\" + INTERSECTED.name + \"</b>\")\r\n                    .trigger(\"interesected\");\r\n\r\n                    INTERSECTED.currentHex = INTERSECTED.material.color.getHex();\r\n                    INTERSECTED.hovered = true;\r\n                    // set a new color for closest object\r\n                    if (!INTERSECTED.selected) {\r\n                        INTERSECTED.material.color.setHex(0xa49cfb);\r\n                    } else {\r\n                        INTERSECTED.material.color.setHex(0xffa600);\r\n                    }\r\n                    previousInt = INTERSECTED;\r\n                };\r\n\r\n                function highlightCublet(cublet) {\r\n                    $element.find(\".mainScreen\").attr(\"tooltipActive\", false);\r\n                    if (cublet !== void 0 && cublet.hovered) {\r\n                        if (selectedCublet == void 0 || previousInt.id != selectedCublet.id) {\r\n                            previousInt.material.color.setHex(previousInt.currentHex);\r\n                            previousInt.hovered = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function popOutCube(cublet) {\r\n                    if (cublet.disable) {\r\n                        return;\r\n                    }\r\n                    animationComplete = false;\r\n                    previousInt.material.color.setHex(0xffa600);\r\n                    cublet.selected = true;\r\n                    scope.selectedCube.select = _.where(scope.cubeletList, { id: cublet.dataID })[0];\r\n\r\n\r\n                    var position = { x: 0, y: 0 },\r\n                        target = { x: 0, y: 20 },\r\n                        tween = new TWEEN.Tween(position).to(target, 100),\r\n                        prePositon = { x: 0, y: 0 };\r\n                    \r\n                    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n                    tween.onUpdate(function() {\r\n                        cublet.position.x += Math.sign(cublet.position.x) * (position.y - prePositon.y);\r\n                        cublet.position.y += Math.sign(cublet.position.y) * (position.y - prePositon.y);\r\n                        cublet.position.z += Math.sign(cublet.position.z) * (position.y - prePositon.y);\r\n                        selectedCublet = cublet;\r\n                        prePositon.y = position.y;\r\n                    });\r\n                    tween.start();\r\n                    tween.onComplete(function() {\r\n                        animationComplete = true;\r\n                        if(!scope.proceed) {\r\n                            scope.proceed = true;\r\n                            enableProceed();\r\n                            scope.$apply();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function popInCube(currentSelection) {\r\n                    if (selectedCublet == void 0 || currentSelection.disable) {\r\n                        return;\r\n                    }\r\n                    selectedCublet.selected = false;\r\n                    selectedCublet.material.color.setHex(7324411);\r\n                    selectedCublet.position.x -= Math.sign(selectedCublet.position.x) * 20;\r\n                    selectedCublet.position.y -= Math.sign(selectedCublet.position.y) * 20;\r\n                    selectedCublet.position.z -= Math.sign(selectedCublet.position.z) * 20;\r\n                }\r\n\r\n                if (scope.selectedCube.select)\r\n                    scope.searchElement(scope.selectedCube.select.id);\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/searchableCube/searchableCubeTemplate.html'\r\n        };\r\n\r\n}]);\r\n})();\n(function () {\n    'use strict';\n    angular.module('SMART2').directive('smartBack', ['$timeout','persistenceService', '$rootScope', function ($timeout, persistenceService, $rootScope) {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                callback: \"&\"\n            },\n            link: function (scope, element, attrs) {\n               \n                //click callback\n                var callback = scope.$eval(scope.callback);\n                \n                if(!persistenceService.nPlusOne.historyIsEmpty()){\n                    scope.show=true;\n                }\n                \n                //Local click binding\n                scope.goBackClick = function (e) {\r\n                    if (!scope.disable) {\r\n                        if (angular.isFunction(callback)) {\r\n                            callback(e)\r\n                        };\n                        persistenceService.redirectToPreviousNode();\r\n                    }\r\n                };\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartBack/smartBackTemplate.html'\n        };\n    }]);\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('browserSniffing', [function () {\r\n        var ua = navigator.userAgent, tem,\r\n                   old_ie = ua.indexOf('MSIE '), //IE browser version less than 11\r\n                    new_ie = ua.indexOf('Trident/'), //IE browser version greater or equal to 11\r\n              // M = ua.match(/(opera|chrome|safari|firefox|msie|android|ipad|iphone|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\r\n\r\n        //For checking if browser is from Internet Explorer family\r\n        if (/trident/i.test(M[1]) || /MSIE/i.test(M[1])) {\r\n            tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\r\n            if (tem.length == 0) {\r\n                return 'IE ' + (M[2] || '');\r\n            } else {\r\n                return 'IE ' + (tem[1] || '');\r\n            }\r\n        }\r\n        if (M[1] === 'Chrome') {\r\n            tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\r\n            if (tem != null)\r\n                return tem.slice(1).join(' ').replace('OPR', 'Opera');\r\n        }\r\n        M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\r\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null)\r\n            M.splice(1, 1, tem[1]);\r\n        return M; // returning browser name and browser version\r\n    }]);\r\n\r\n    angular.module('SMART2').directive('smartBrowserSniffing', ['$window', '$timeout', '$translate', 'browserSniffing', 'notification', 'APPCONSTANTS', 'favoriteOps', function ($window, $timeout, $translate, browserSniffing, notification, APPCONSTANTS, favoriteOps) {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                showSniffing: '@',\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartBrowserSniffing/browerSniffingTemplate.html',\r\n            link: function (scope, element) {\r\n                var showSniffing = (scope.showSniffing == 'true') ? true : false;\r\n                scope.image960 = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/960-error-trans.png\";\r\n                scope.image1920 = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/1920-error-trans.png\";\r\n                var iconIE = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/IE.png\",\r\n                    iconChrome = APPCONSTANTS.userPreferences.URLs.ContentURL + \"smartcontent/workspace/shared/resources/images/browser-sniff/Chrome.png\";\r\n                if (showSniffing == true) {\r\n                    $timeout(function () {\r\n                        scope.execBrowserSniffing();\r\n                    });\r\n\r\n                    angular.element($window).bind('resize', function () {\r\n                        scope.execBrowserSniffing();\r\n                    });\r\n\r\n                    scope.Screen960 = false;\r\n                    scope.Screen1920 = false;\r\n\r\n                    scope.execBrowserSniffing = function () {\r\n                        scope.isShowSniffer = favoriteOps.getSnifferFlag && favoriteOps.getSnifferFlag();\r\n                        if (!scope.isShowSniffer) {\r\n                            scope.sniffTemplateUrl = \"\";\r\n                            angular.element('html').css('overflow', 'hidden');\r\n\r\n                            if (angular.element($window).innerWidth() < 960 || angular.element($window).innerWidth() > 1920) {\r\n                                if (angular.element($window).innerWidth() < 960) {\r\n                                    scope.Screen960 = true;\r\n                                    scope.sniffTemplateUrl = \"shared/directives/uiElements/smartBrowserSniffing/Browse960.html\";\r\n                                    element.addClass('active');\r\n                                    scope.$apply();\r\n                                }\r\n                                if (angular.element($window).innerWidth() > 1920) {\r\n                                    scope.Screen1920 = true;\r\n                                    scope.sniffTemplateUrl = \"shared/directives/uiElements/smartBrowserSniffing/Browse1920.html\";\r\n                                    element.addClass('active');\r\n                                    scope.$apply();\r\n                                }\r\n                            }\r\n                            else {\r\n                                element.removeClass('active');\r\n                                angular.element('html').removeAttr('style');\r\n                            }\r\n                            angular.element('.sniffingContainer').animate({ scrollTop: 1000 }, 'slow');\r\n                        }\r\n                    }\r\n\r\n                    scope.onChange = function (isTrue) {\r\n                        scope.isShowSniffer = isTrue;\r\n                    }\r\n\r\n                    scope.hideSniffingOverlay = function () {\r\n                        scope.Screen1920 = false;\r\n                        scope.Screen960 = false;\r\n                        element.removeClass('active');\r\n                        angular.element('html').removeAttr('style');\r\n                        favoriteOps.setSnifferFlag(scope.isShowSniffer);\r\n                    }\r\n                    if (!(typeof browserSniffing === 'object')) {\r\n                        browserSniffing = browserSniffing.split(' ');\r\n                    }\r\n                    var browserDetail = browserSniffing;\r\n\r\n                    scope.remindOptions = [{\r\n                        \"title\": \"30 Days\"\r\n                    }, {\r\n                        \"title\": \"15 Days\"\r\n                    }];\r\n                    scope.selectedDate = { \"title\": \"30 Days\" };\r\n\r\n                    var unsupportedBrowserVersion = {\r\n                        type: \"unsupportedBrowserVersion\",\r\n                        isMultipleCheck: true,\r\n                        titleTextColor: \"browser-version-header-text\",\r\n                        buttons: [\r\n                            {\r\n                                title: $translate.instant('updateNowBtn'),\r\n                                result: \"Update Now\"\r\n                            },\r\n                        {\r\n                            title: $translate.instant('dismissLink'),\r\n                            result: \"dismiss\"\r\n                        }\r\n                        ],\r\n                        multipleCheckList: [{\r\n                            type: \"select\",\r\n                            checkContext: scope.selectedDate,\r\n                            options: scope.remindOptions,\r\n                            model: scope.selectedDate,\r\n                            preSelected: scope.selectedDate,\r\n                            header: $translate.instant('yourCurrentBrowser')\r\n                        }]\r\n                    };\r\n\r\n                    var unsupportedBrowser = {\r\n                        type: \"unsupportedBrowser\",\r\n                        isMultipleCheck: true,\r\n                        //message: \"<em>\" + browserDetail[0] + \"</em> \" + $translate.instant(\"browserIncompatibleMsg\") + \"<ul class=\\\"browser-list\\\"><li><a href=\\\"https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD&gclid=EAIaIQobChMIuPufvL320gIVwpe9Ch3VhQUtEAAYASAAEgJ8ifD_BwE\\\" target=\\\"_blank\\\"><img src=\" + iconChrome + \" /><p>\" + $translate.instant('broswerChrome') + \"</p></a></li><li><a href=\\\"https://www.microsoft.com/en-in/download/Internet-Explorer-11-for-Windows-7-details.aspx\\\" target=\\\"_blank\\\"><img src=\" + iconIE + \" /><p>\" + $translate.instant('browserInterExplorer') + \"</p></a></li></ul>\",\r\n                        titleTextColor: \"browser-unsupported-header-text\",\r\n                        buttons: [\r\n                            {\r\n                                title: $translate.instant('dismissLink'),\r\n                                result: \"dismiss\"\r\n                            }\r\n                        ],\r\n                        multipleCheckList: [{\r\n                            type: \"select\",\r\n                            checkContext: scope.selectedDate,\r\n                            options: scope.remindOptions,\r\n                            model: scope.selectedDate,\r\n                            preSelected: scope.selectedDate,\r\n                            header: \"<em>\" + browserDetail[0] + \"</em> \" + $translate.instant(\"browserIncompatibleMsg\") + \"<ul class=\\\"browser-list\\\"><li><a href=\\\"https://www.google.com/chrome/browser/desktop/index.html?brand=CHBD&gclid=EAIaIQobChMIuPufvL320gIVwpe9Ch3VhQUtEAAYASAAEgJ8ifD_BwE\\\" target=\\\"_blank\\\"><img src=\" + iconChrome + \" /><p>\" + $translate.instant('broswerChrome') + \"</p></a></li><li><a href=\\\"https://www.microsoft.com/en-in/download/Internet-Explorer-11-for-Windows-7-details.aspx\\\" target=\\\"_blank\\\"><img src=\" + iconIE + \" /><p>\" + $translate.instant('browserInterExplorer') + \"</p></a></li></ul>\",\r\n                        }]\r\n                    };\r\n\r\n                    var standalone = window.navigator.standalone,\r\n                    userAgent = window.navigator.userAgent.toLowerCase(),\r\n                    mobile = /iphone|ipod|ipad|android/.test(userAgent);\r\n                    if (mobile) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        if ((browserSniffing[0] == \"Chrome\" && browserSniffing[1] < 45) ||\r\n                            (browserSniffing[0] == \"IE\" && browserSniffing[1] < 11)) {\r\n                            notification.notify(unsupportedBrowserVersion, function (result) {\r\n                            });\r\n                        }\r\n\r\n                        if ((browserSniffing[0] != \"Chrome\" && browserSniffing[0] != \"IE\")) {\r\n                            notification.notify(unsupportedBrowser, function (result) { });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();\n(function () {\n    'use strict';\n    angular.module('SMART2').directive('smartButton', ['$timeout', 'persistenceService', function ($timeout, persistenceService) {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                callback: \"&\",\n                onClick: \"&\",\n                config: \"=\",\n                backgroundColor: \"=\",\n                fabConfig: \"=\",\n                flat: \"=\",\n                disable: \"=\",\n                callbackParams: \"=\",\n                buttonType: \"=\"\n            },\n            link: function (scope, element, attrs) {\n                //check is floating\n                scope.isFloating = (attrs.floating) ? scope.$eval(attrs.floating) : false;\n\n                //check is large\n                scope.isLarge = (attrs.large) ? scope.$eval(attrs.large) : false;\n\n                //click callback\n                var callback = scope.$eval(scope.callback);\n           \n                //Local click binding\n                scope.clickCallback = function (e) {\n                    e.goBack= persistenceService.redirectToPreviousNode;\n                    if (!scope.buttonType  || (scope.buttonType && scope.buttonType != \"Cancel\")) {\r\n                        if (!scope.disable) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback(e, scope.callbackParams)\r\n                            };\r\n                            scope.onClick({ $event: e });\r\n                        }\r\n                    }\n                    else {\r\n                        persistenceService.redirectToPreviousNode();\r\n                    }\n                };\n\n                attrs.$observe('ngClass', function (value) {\n                    scope.styleClass = value;\n                });\n            },\n            templateUrl: 'shared/directives/uiElements/smartButton/smartButtonTemplate.html'\n        };\n    }]);\n})();\n  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Checkbox\r\n   * @description This directive is useful for creating a checkbox.\r\n   *\r\n   * @attr {String} label\r\n   *    Label to be displayed for identification of this ui element\r\n   * @attr {Boolean} ng-model\r\n   *    Checkbox's default state (selected or unselected)\r\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\r\n   * @attr {Boolean} disable\r\n   *    If value of this attribute is set to true, checkbox will not be clickable\r\n   * @attr {Boolean} focus \r\n   *    If set to true, this ui element will be focused\r\n   * @attr {Boolean} validate\r\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n   * @attr {Array} rules \r\n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n   * @attr {String} error-message \r\n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n   * @attr {Boolean} is-mandatory \r\n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n   * @attr {Boolean} is-visible \r\n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-change\r\n   *    Callback function when checkbox state is changed \r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"isUrgent\": true\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"Urgent\",\r\n                                        \"type\": \"checkbox\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"isUrgent\",\r\n                                        \"colspan\": 1,\r\n                                        \"onChange\": \"onChange\"  //  controller function ,\r\n                                        \"attributes\": {\r\n                                            \"fill\": true\r\n                                        },\r\n                                        \"rules\": [\r\n                                            { \r\n                                                \"rule\": \"this == true\", \r\n                                                \"error\": \"Checkbox should not be selected\" \r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n   \r\n   * @example\r\n   Static:\r\n   Controller:\r\n       $scope.isUrgent = true;\r\n       $scope.onChange = function(isUrgent) {\r\n           console.log(isUrgent);\r\n       };\r\n   Usage:\r\n       <smart-checkbox label=\"Urgent\" ng-model=\"isUrgent\" on-change=\"onChange(isUrgent)\"></smart-checkbox>\r\n       \r\n   * @example\r\n   Disabled checkbox:\r\n   <smart-checkbox disable=\"true\"></smart-checkbox>     \r\n   */\r\n  \r\n\r\n(function() {\r\n    'use strict';\r\n    var checkboxCounter = 0;\r\n    \r\n    angular.module('SMART2').directive('smartCheckbox', ['$timeout', 'ScrollTo', 'RuleEngine', function ($timeout, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                //ngModel: '=?',\r\n                ngModelResolve: '&',\r\n                disable: '@',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                label: '@',\r\n                minHeight: '@',\r\n                fill: '@',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                errorMessage: '@',\r\n                onChange: '&',\r\n                removable: '@',\r\n                showTooltip: '@',\r\n                tooltipPosition: '@',\r\n                showinfo: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                checkboxCounter++;\r\n                scope.checkBoxId = \"checkbox-\" + checkboxCounter;\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n                scope.showTooltip = (scope.showTooltip == undefined || scope.showTooltip == null) ? false : scope.showTooltip;\r\n                scope.fill = scope.$eval(scope.fill) == undefined ? true : scope.$eval(scope.fill);\r\n                var checkboxEle = element.find(\":checkbox\");\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\r\n\r\n\r\n                /*\r\n                 * Focus field when focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate field whene validate is set to true\r\n                 */\r\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(rules[i], function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                scope.ngChange = function () {\r\n                    if (attrs.ngModelResolve) {\r\n                        var isChecked = checkboxEle.prop('checked');\r\n                        checkboxEle.prop('checked', !isChecked);\r\n                        ngModelCtrl.$setViewValue(!isChecked);\r\n                        scope.ngModel = !isChecked;\r\n\r\n                        scope.ngModelResolve({\r\n                            $event: {\r\n                                isChecked: !checkboxEle.prop('checked'),\r\n                                resolveFun: function (checked) {\r\n                                    checkboxEle.prop('checked', checked);\r\n                                    ngModelCtrl.$setViewValue(checked);\r\n                                    scope.ngModel = checked;\r\n                                    updateView();\r\n                                    scope.validateRules();\r\n                                    var timeout = $timeout(function () {\r\n                                        scope.onChange();\r\n                                        $timeout.cancel(timeout);\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        updateView();\r\n                        scope.validateRules();\r\n                        var timeout = $timeout(function () {\r\n                            scope.onChange();\r\n                            $timeout.cancel(timeout);\r\n                        });\r\n                    };\r\n                };\r\n\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                    element.remove();\r\n                    scope = null;\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartCheckBox/smartCheckBoxTemplate.html'\r\n        };\r\n    }]);\r\n})();\r\n\nangular.module('SMART2').directive('smartCultureDate', ['APPCONSTANTS', function (APPCONSTANTS) {\r\n    \"use strict\";\r\n    var monthAbr = {\r\n        january: 'Jan',\r\n        february: 'Feb',\r\n        march: 'Mar',\r\n        april: 'Apr',\r\n        may: 'May',\r\n        june: 'Jun',\r\n        july: 'Jul',\r\n        august: 'Aug',\r\n        september: 'Sep',\r\n        october: 'Oct',\r\n        november: 'Nov',\r\n        december: 'Dec'\r\n    };\r\n    return {\r\n        restrict: 'AE',\r\n        scope: {\r\n            ngModel: '=ngModel',\r\n            culture: '=culture',\r\n            enableShortMonth: '@'\r\n        },\r\n        replace: true,\r\n        link: function ($scope, elem, attr) {\r\n            var matchExpression = /^[0-9]+$/;\r\n            var cultureCode = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n            //var currencyCode = APPCONSTANTS.userPreferences.UserBasicDetails.DefaultCurrencyCode;\r\n            $scope.formatedModel = $scope.ngModel;\r\n            var formatNumber = function () {\r\n                $scope.formatedModel = $scope.ngModel;\r\n                if ($scope.ngModel != undefined && $scope.ngModel != '') {\r\n                    elem.find('.showCultureVal').autoNumeric('init', {\r\n                        mDec: 2,\r\n                        aPad: false,\r\n                        aSep: thousandSep,\r\n                        aDec: decimalSep,\r\n                        vMin: Number.NEGATIVE_INFINITY,\r\n                        vMax: Number.POSITIVE_INFINITY\r\n                    });\r\n\r\n                    elem.find('.showCultureVal').autoNumeric('set', $scope.ngModel);\r\n                    $scope.formatedModel = elem.find('.showCultureVal').text();\r\n                }\r\n            };\r\n\r\n            function extendTheLibrary() {\r\n                if (!isLibraryExtended) {\r\n\r\n                    if (typeof UserCountryCultureInfo != 'undefined' && UserCountryCultureInfo != \"\") {\r\n                        var tempCulture = Globalize.culture().language;\r\n                        thousandSep = Globalize.culture(UserCountryCultureInfo).numberFormat.currency[','];\r\n                        decimalSep = Globalize.culture(UserCountryCultureInfo).numberFormat.currency['.'];\r\n                        Globalize.culture(tempCulture);\r\n                    }\r\n                    try {\r\n                        var cultureCode = _language.toLowerCase();\r\n                        if (cultureCode == 'zh-cht') {\r\n                            cultureCode = 'zh-hk';\r\n                        }\r\n                        moment().lang(cultureCode)._locale._longDateFormat['L'] = moment().lang(UserCountryCultureInfo)._locale._longDateFormat['L']\r\n                        var x = moment.locale(cultureCode)\r\n\r\n                        if (x == 'en' && cultureCode.indexOf('en') < 0) {\r\n                            x = moment.locale(cultureCode.split('-')[0]);\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        console.log(error);\r\n                    }\r\n                    try {\r\n                        $.extend($.fn.autoNumeric.defaults, {\r\n                            aSep: thousandSep,\r\n                            aDec: decimalSep,\r\n                            vMin: Number.NEGATIVE_INFINITY,\r\n                            vMax: Number.POSITIVE_INFINITY,\r\n                            mDec: MaxPrecessionValue != undefined && MaxPrecessionValue != '' ? MaxPrecessionValue * 1 : 4, //4, // hard code value, make sure updated later on getPrecessionValues callback\r\n                            aPad: false\r\n                        });\r\n                        isLibraryExtended = true;\r\n                    }\r\n                    catch (error) {\r\n                        console.log(error);\r\n                    }\r\n                }\r\n            }\r\n            var formatDate = function () {\r\n                $scope.formatedModel = $scope.ngModel;\r\n                if (attr.type == 'date' && $scope.ngModel != undefined && $scope.ngModel != '') {\r\n                    if (matchExpression.test($scope.ngModel)) {\r\n                        if (attr.showTime == 'true') {\r\n                            $scope.formatedModel = moment.unix(new Date(JSON.parse($scope.ngModel)).getTime() / 1000).format(moment.localeData()._longDateFormat.L + \" \" + 'HH:mm');\r\n                        } else {\r\n                            $scope.formatedModel = moment.unix(new Date(JSON.parse($scope.ngModel)).getTime() / 1000).format(moment.localeData()._longDateFormat.L);\r\n                        }\r\n                    } else {\r\n                        if (attr.showTime == 'true') {\r\n                            $scope.formatedModel = moment.unix(new Date($scope.ngModel).getTime() / 1000).format(moment.localeData()._longDateFormat.LL + \" \" + 'HH:mm');\r\n                        } else {\r\n                            $scope.formatedModel = moment.unix(new Date($scope.ngModel).getTime() / 1000).format(moment.localeData()._longDateFormat.LL);\r\n                        }\r\n                    }\r\n\r\n                    if ($scope.enableShortMonth == true && $scope.ngModel) {\r\n                        for (var i = 0, abr = Object.keys(monthAbr); i < abr.length; i++) {\r\n                            if ($scope.formatedModel.search(new RegExp(abr[i], 'gi')) > -1) {\r\n                                $scope.formatedModel = $scope.formatedModel.replace(new RegExp(abr[i], 'gi'), monthAbr[abr[i]]);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            \r\n            extendTheLibrary();\r\n            if (attr.type == 'date') {\r\n                formatDate();\r\n                $scope.$watch('ngModel', function (newValue, oldValue) {\r\n                    if (newValue != oldValue) {\r\n                        formatDate();\r\n                    }\r\n                });\r\n            }\r\n            else if (attr.type == \"number\"){\r\n                formatNumber();               \r\n                    $scope.$watch('ngModel', function (newValue, oldValue) {\r\n                        if (newValue != oldValue) {\r\n                            formatNumber();\r\n                        }\r\n                    });              \r\n            }\r\n\r\n            formatNumber();\r\n\r\n            /*$scope.$watch('ngModel', function (newValue) {\r\n                if (newValue) formatNumber();\r\n            });*/\r\n\r\n        },\r\n        templateUrl: 'shared/directives/uiElements/smartCultureDate/smartCultureDate.html',\r\n    };\r\n}]);\n(function () {\r\n    'use strict';\n\n    var startIndex;\n\n    angular.module('SMART2').directive('smartSortable', [function () {\r\n        return {\r\n            restrict: 'A',\n            scope: {\r\n                onSort: '&',\r\n                onDrag: '&'\r\n            },\n            link: function (scope, element, attrs) {\r\n                element.sortable({\r\n                    placeholder: attrs.placeholder ? attrs.placeholder : \"drop-hover\",\r\n                    helper: attrs.helper ? attrs.helper : \"original\",\r\n                    handle: \".collapsible-header-drag-icon\",\r\n                    items: \">*:not(.disable-sort-item)\",\r\n                    cancel: \".disable-sort-item\",\r\n                    connectWith: attrs.connectWith ? attrs.connectWith : \"\",\r\n                    appendTo: attrs.appendTo ? attrs.appendTo : \"parent\",\r\n                    containment: attrs.containment ? attrs.containment : \"parent\",\r\n                    tolerance: attrs.tolerance ? attrs.tolerance : \"intersect\",\r\n                    start: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', 'hidden');\r\n                        }\r\n                        startIndex = ui.item.index();\r\n                        if (ui.placeholder) {\r\n                            ui.placeholder.height(ui.item.height()).css(\"width\", ui.item.outerWidth());\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: true\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    stop: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', '');\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: false\r\n                                }\r\n                            });\r\n                        });\r\n                    },\r\n                    update: function (event, ui) {\r\n                        if (attrs.isOverflowHidden == 'true') {\r\n                            $('body').css('overflow', '');\r\n                        }\r\n                        scope.$apply(function () {\r\n                            scope.onSort({\r\n                                $event: {\r\n                                    startIndex: startIndex,\r\n                                    endIndex: ui.item.index()\r\n                                }\r\n                            });\r\n                            scope.onDrag({\r\n                                $event: {\r\n                                    dragging: false\r\n                                }\r\n                            });\r\n                        });\r\n                        if (attrs.swipItem == \"true\") {\r\n                            // swiping element position with each other\r\n                            if (ui.sender) {\r\n                                var el = ui.item.next().length == 1 ? ui.item.next() : ui.item.prev();\r\n                                ui.sender.append(el);\r\n                            }\r\n                        }\r\n                    },\r\n                    sort: function (event, ui) {\r\n                        //console.log({ event, ui })\r\n                        if (attrs.whileSorting == \"true\") {\r\n                            var ele = $(\".slick-list\"),\r\n                                scrollpos = ele.scrollLeft(),\r\n                                main_width = ele.outerWidth(),\r\n                                ew = ui.helper.outerWidth(),\r\n                                elft = ui.helper.offset().left - ele.offset().left,\r\n                                rpos = (main_width - (elft + ew));\r\n                            if (elft < 0) { // left\r\n                                $('.slick-prev').click();\r\n                            } else if (rpos < 0) { // right    \r\n                                $('.slick-next').click();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\n\n    angular.module('SMART2').directive('isDraggable', [function () {\r\n        return {\r\n            restrict: 'A',\n            link: function (scope, element, attrs) {\r\n                attrs.$observe('isDraggable', function (isDraggable) {\r\n                    if (isDraggable != undefined && isDraggable != \"\") {\r\n                        if (isDraggable == 'true' || isDraggable == true) {\r\n                            element.removeClass('disable-sort-item');\r\n                        }\n                        if (isDraggable == 'false' || isDraggable == false) {\r\n                            element.addClass('disable-sort-item');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\n\n\n\r\n    //var droppableParent;\n\n    ///*\n    // * Highlight droppables on mouse down\n    // */\n    //var highlightDroppableElements = function (currentDraggableElement) {\r\n    //    currentDraggableElement.removeAttr('style').addClass('being-dragged z-index-plus');\n    //    angular.element('.ui-droppable').addClass('being-dropped-on');\r\n    //};\n\n    ///*\n    // * Unhighlight droppables on mouse up\n    // */\n    //var unhighlightDroppableElements = function (currentDraggableElement) {\r\n    //    currentDraggableElement.removeClass('being-dragged z-index-plus');\n    //    angular.element('.ui-droppable').removeClass('being-dropped-on');\r\n    //};\n\n    ///*\n    // *  This directive will handle dragging of portlet\n    // */\n    //angular.module('SMART2').directive('smartDraggable', [function () {\r\n    //    return {\r\n    //        restrict: 'A',\n    //        link: function (scope, element, attrs) {\r\n    //            if (attrs.smartDraggable == 'false' || attrs.smartDraggable == false) {\r\n    //                return;\r\n    //            }\n\n    //            attrs.$observe('enabled', function (isEnabled) {\r\n    //                if (isEnabled != undefined) {\r\n    //                    if (isEnabled == 'true' || isEnabled == true) {\r\n    //                        element.draggable('enable');\r\n    //                    }\n    //                    if (isEnabled == 'false' || isEnabled == false) {\r\n    //                        element.draggable('disable');\r\n    //                    }\r\n    //                }\r\n    //            });\n\n    //            /*\n    //             *  Make portlet dragging enabled\n    //             */\n    //            element.draggable({\r\n    //                revert: 'invalid',\n    //                handle: '.collapsible-header-drag-icon',\n    //                revertDuration: 200,\n    //                delay: 200,\n    //                appendTo: 'body',\r\n    //                containment: 'body',\r\n    //                start: function () {\r\n    //                    droppableParent = $(this).parent();\n    //                    $(droppableParent).addClass('being-dragged z-index-plus');\r\n    //                },\n    //                drag: function (e) {\r\n    //                    if (e.clientX > window.innerWidth - 10 || e.clientX < 10 || e.clientY > window.innerHeight - 10 || e.clientY < 10) {\r\n    //                        $(document).trigger('mouseup');\r\n    //                    }\r\n    //                },\n    //                stop: function () {\r\n    //                    setTimeout(function () {\r\n    //                        $(droppableParent).removeClass('being-dragged z-index-plus');\n    //                        // clearTimeout(dragTimeout);\n    //                    }, 250);\r\n    //                }\r\n    //            });\r\n    //        }\r\n    //    };\r\n    //}]);\n\n\n    ///*\n    // *  This directive will handle dropping of portlet\n    // */\n    //angular.module('SMART2').directive('smartDroppable', ['$compile', '$timeout', function ($compile, $timeout) {\r\n    //    return {\r\n    //        restrict: 'A',\n    //        link: function (scope, element, attrs) {\r\n    //            if (attrs.smartDroppable == 'false' || attrs.smartDroppable == false) {\r\n    //                return;\r\n    //            }\n\n    //            /*\n    //             *  Make portlet dropping enabled\n    //             */\n    //            element.droppable({\r\n    //                hoverClass: 'drop-hover',\n    //                drop: function (event, ui) {\r\n    //                    var draggable = $(ui.draggable[0]),\n    //                        draggableOffset = draggable.offset(),\n    //                        container = $(event.target),\n    //                        containerOffset = container.offset();\n\n    //                    $('.draggable', event.target).appendTo(droppableParent).css({ opacity: 0 }).animate({ opacity: 1 }, 200);\n    //                    draggable.appendTo(container).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ left: 0, top: 0 }, 200);\r\n    //                }\r\n    //            });\r\n    //        }\r\n    //    };\r\n    //}]);\r\n})();\n\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartDropdown', ['$window', '$timeout', 'menuListItemServ', '$focusOnField', function ($window, $timeout, menuListItemServ, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                config: \"@\",\r\n                show: \"@\",\r\n                onHide: \"&\",\r\n                stopProg: \"@\",\r\n                autoClose: \"@\"\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var islistDropdown;\r\n                var dropDownMenuListItem = function (dropdownContent) {\r\n                    /*dropdown checker*/\r\n                    var liList = dropdownContent.children('li'),\r\n                        liLength = liList.length;\r\n                    if (!liList.attr(\"isItemList\")) {\r\n                       \r\n                        for (var i = 0; i < liLength; i++) {\r\n                            var $this = liList.eq(i),\r\n                                children = $this.children().eq(0);\r\n                            if ($this.children().length == 1 && !$this.hasClass(\"dropdown-content-footer\") && (children.attr(\"ng-click\") != null || children.attr(\"ui-sref\") != null || $this.attr(\"ng-click\") != null)) {\r\n                                islistDropdown = true;\r\n                                break;\r\n                            }\r\n                        };\r\n                        if (islistDropdown == true) {\r\n                            if (liList.last().hasClass(\"dropdown-content-footer\")) {\r\n                                liList.splice(liLength - 1, 1);\r\n                            }\r\n                            menuListItemServ(liList);\r\n                            islistDropdown = false;\r\n                        };\r\n                    }\r\n                    /*dropdown checker end*/\r\n\r\n                },\r\n                keycodeis,\r\n\t\t\t     hideOnTabOut = function (e) {\r\n\t\t\t         if (e.keyCode == 9) {\r\n\t\t\t             keycodeis = e.keyCode;\r\n\t\t\t             window.lastOpenedDropdownConfig.activates.hide().removeClass('active');\r\n\t\t\t             window.lastOpenedDropdownConfig.origin.removeClass(\"active\");\r\n\t\t\t             window.lastOpenedDropdownConfig.activates.unbind(\"keydown\", hideOnTabOut);\r\n\t\t\t         };\r\n\t\t\t     };\r\n\r\n\r\n                //initialization\r\n                var clrTout = setTimeout(function () {\r\n                    var _element = element.find(\".dropdown-button\"),\r\n\t\t\t            closeDDButtons = element.find(\".close-dd\");\r\n                    $(_element).dropdown(angular.extend(typeof scope.$eval(attrs.config) == \"object\" ? scope.$eval(attrs.config) : {}, {\r\n                        onHide: function () {\r\n                            if (keycodeis != 9 && (attrs.singleElementDropdown != undefined)) {\r\n                                window.lastOpenedDropdownConfig.origin.focus();\r\n                                keycodeis = null;\r\n                            }\r\n                            if (scope.autoClose == \"false\") {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }));\r\n                    var ddCloseOff = angular.element(\".dd-close-off\");\r\n                    if (ddCloseOff.length > 0) {\r\n                        ddCloseOff.click(function (e) {\r\n                            var _elem = angular.element(e.target);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(!_elem.hasClass(\"btn-flat\") && !_elem.hasClass(\"btn\") && !_elem.hasClass(\"btn-large\")){\r\n\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t}\r\n                        });\r\n                    }\r\n\r\n                    if (closeDDButtons.length > 0) {\r\n                        closeDDButtons.click(function () {\r\n                            var dd = element.find(\".dropdown-content\");\r\n                            if (dd.length > 0) {\r\n                                scope.hideDropDown(dd);\r\n                            };\r\n                        });\r\n                    }\r\n\r\n                    clearTimeout(clrTout);\r\n                    clrTout = null;\r\n                });\r\n\r\n                if (scope.$eval(attrs.fixed)) {\r\n                    $(element).find('.dropdown-content').addClass('fixeddd');\r\n                    $(element).find('.dropdown-button').bind('click', function (e) {\r\n                        (function ($t) {\r\n                            var clrTout1 = setTimeout(function () {\r\n                                var ddCnt = $t.next('.dropdown-content'),\r\n                                    $tOffsetTop = $t.offset().top - $(window).scrollTop(),\r\n                                    $tOffsetLeft = $t.offset().left - $(window).scrollLeft();\r\n                                ddCnt.css({ 'left': $tOffsetLeft - 2 + 'px', 'top': $tOffsetTop - 2 + 'px' });\r\n                                //ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n                                var lastScrollPosition = $tOffsetTop - 2,\r\n\t\t\t\t\t\t\t\t\tnewScrollPosition = $tOffsetTop - 2;\r\n\r\n                                var ddHgt = ddCnt.css('height'),\r\n                                    winHgt = angular.element(window).height();\r\n                                if ((parseInt(ddHgt) + $tOffsetTop) > winHgt) {\r\n                                    var diffHgt = (parseInt(ddHgt) + $tOffsetTop) - winHgt,\r\n                                        clientOffsetHgt = ($tOffsetTop - diffHgt - 15);\r\n                                    ddCnt.css('top', clientOffsetHgt + 'px');\r\n                                    lastScrollPosition = clientOffsetHgt,\r\n\t\t\t\t\t\t\t\t\tnewScrollPosition = clientOffsetHgt;\r\n                                }\r\n\r\n                                angular.element($window).on(\"scroll.smartFixedSmartDrop\", function () {\r\n                                    newScrollPosition = this.pageYOffset;\r\n                                    if (newScrollPosition !== lastScrollPosition) {\r\n                                        if (ddCnt.hasClass('active')) {\r\n                                            scope.hideDropDown(ddCnt);\r\n                                        }\r\n                                    }\r\n                                    lastScrollPosition = newScrollPosition;\r\n                                });\r\n                                dropDownMenuListItem(ddCnt) // function for apply the tabbing\r\n                                if (attrs.singleElementDropdown != undefined ) {\r\n                                    ddCnt.bind(\"keydown\", hideOnTabOut);\r\n                                }\r\n                                var firstFieldFocus = ddCnt.find(\"a, input, textarea, [tabindex]\").first();\r\n                                $focusOnField(firstFieldFocus);\r\n\r\n                                clearTimeout(clrTout1);\r\n                                clrTout1 = null;\r\n\r\n                            });\r\n                        })($(this));\r\n                    });\r\n\r\n                } else {\r\n\r\n                    // Animation from bottom to top\r\n                    $(element).find('.dropdown-button').bind('click', function (e) {\r\n                        var dropdownContent = $(this).next('.dropdown-content');\r\n                        dropDownMenuListItem(dropdownContent) // function for apply the tabbing\r\n                        if (attrs.singleElementDropdown != undefined) {\r\n                            dropdownContent.bind(\"keydown\", hideOnTabOut);\r\n                        }\r\n\r\n                        $(this).next('.dropdown-content').addClass('ddautoHeight');\r\n                        (function ($t) {\r\n                            var tOut2 = setTimeout(function () {\r\n                                var ddCnt = $t.next('.dropdown-content');\r\n                                var ddCntTop = (parseInt(ddCnt.css('top')) + 5) + 'px';\r\n                                var ddCntLeft = (parseInt(ddCnt.css('left')) + 5) + 'px';\r\n                                if (parseInt(ddCntTop, 10) < 0) {\r\n                                    ddCnt.css('top', 0);\r\n                                    ddCnt.animate({\r\n                                        top: ddCntTop, left: ddCntLeft\r\n                                    });\r\n                                }\r\n                                var firstFieldFocus = ddCnt.find(\"a, input, textarea, [tabindex]\").first();\r\n                                $focusOnField(firstFieldFocus);\r\n                                clearTimeout(tOut2);\r\n                                tOut2 = null;\r\n                            });\r\n                        })($(this));\r\n                    });\r\n                }\r\n\r\n\r\n                var onShow = attrs.$observe('show', function (value) {\r\n                    if (angular.isDefined(value)) {\r\n                        if (!scope.$eval(value)) {\r\n                            var dropdown = element.find('.dropdown-content');\r\n                            scope.hideDropDown(dropdown);\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n                scope.hideDropDown = function (dropdown) {\r\n                    if (dropdown.length > 0) {\r\n                        dropdown.fadeOut(250);\r\n                        dropdown.removeClass('active');\r\n                        dropdown.css('max-height', '');\r\n                        angular.element(\"[data-activates='\" + dropdown.attr('id') + \"']\").removeClass('active');\r\n                        angular.isFunction(scope.onHide) && scope.onHide();\r\n                    }\r\n                }\r\n\r\n                /*Stop Propogation: Start*/\r\n                if (scope.stopProg === \"true\") {\r\n                    var cancelTout = $timeout(function () {\r\n                        element.find(\".dropdown-button\").click(function (e) {\r\n                            e.stopPropagation();\r\n                        }).end().find(\".dropdown-content\").click(function (e) {\r\n                            //Close dropdown after option get selected, this is default fuctionality of materialize framework\r\n                            var a = window.lastOpenedDropdownConfig;\r\n                            a.activates.fadeOut(a.options.outDuration);\r\n                            a.activates.removeClass('active');\r\n                            a.activates.css('max-height', '');\r\n                            a.origin.removeClass('active');\r\n                            e.stopPropagation();\r\n                        });\r\n                        $timeout.cancel(cancelTout);\r\n                        cancelTout = null;\r\n                    });\r\n                }\r\n                /*Stop Propogation: End*/\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onShow();\r\n                    angular.element($window).off(\"scroll.smartFixedSmartDrop\");\r\n                    $(element).find('.dropdown-button').unbind('click');\r\n                    $(element).find('.dropdown-button').off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartDropdown/smartDropdownTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('actionCloseDropdown', [function () {\r\n        return {\r\n            restrict: 'C',\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n                //[commenting the traverseAndFireHideDropDown function as it takes time to close/hide dropdown container as soon as closing event is fired]\r\n                //var traverseAndFireHideDropDown = function (scopeRef, dropdown) {\r\n                //    for (var key in scopeRef) {\r\n                //        if (key == 'hideDropDown') {\r\n                //            scopeRef.hideDropDown(dropdown);\r\n                //            return;\r\n                //        }\r\n                //    }\r\n                //    traverseAndFireHideDropDown(scopeRef.$parent, dropdown);\r\n                //    dropdown = null; //[OPTIMIZATION]\r\n                //};\r\n\r\n                element.bind('click', function () {\r\n                    angular.element(document).trigger('click');\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    element.unbind('click', function () {\r\n                        angular.element(document).trigger('click');\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();\n'use strict';\nangular.module('SMART2').directive('smartErrorFieldHighlighter', ['$timeout', function ($timeout) {\r\n    return {\r\n        restrict: 'AE',\r\n        scope: {\r\n            errorConfig: \"=\"\r\n        },\r\n        link: function (scope, element, attrs) {\r\n            scope.otherMandetoryFields = false;\r\n            scope.$watch(\"errorConfig.check\", function (value) {\r\n                if (value == true) {\r\n                    $timeout(function () {\r\n                        $(element.find(\"[is-mandatory='true'] input\")).each(function () {\r\n                            if ($(this).hasClass('invalid')) {\r\n                                $(this).focus();\r\n                                scope.otherMandetoryFields = true;\r\n                                return false;\r\n                            } else {\r\n                                scope.otherMandetoryFields = false;\r\n                            }\r\n                        });\r\n\r\n                        if (!scope.otherMandetoryFields) {\r\n                            $(element.find(\"[is-mandatory='true'].smartMandetoryField\")).each(function () {\r\n                                if ($(this).find('.smartErrorText').length > 0 || $(this).find('.select-invalid-wrapper').length > 0) {\r\n                                    $(this).find('a.focusErrorField').focus();\r\n                                    $(this).find('input').focus();\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                        scope.errorConfig.check = false;\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}]);\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Form-widget\r\n * @description Form widget directive accepts form-config and model-data. \r\n *    ui elements (fields) that are optional are added in right-panel (widget-panel). Optional fields can be added on form by simply clicking that item in right-panel. \r\n *    Optional field can also be removed by clicking 'x' icon on the upper right corner of ui element or 'x' icon against that item in right-panel. \r\n * \r\n * @attr {Array} form-config\r\n *    Form config is expected to be an array of ui elements (fields)\r\n * @attr {Object} model-data\r\n *    Data to be bound on ui elements (fields)\r\n * @attr {Boolean} is-sequencial\r\n *    If the value of this attribute is set to true, newly added ui element (field) will be added at the end of the section.\r\n *    If the value of this attribute is set to false, newly added ui element (field) will be added by the orders it appears in form-config.  \r\n * @attr {Boolean} show-widget\r\n *    When form-config is passed to form-widget, right-panel will always be created if this attribute is not set to false.\r\n * @attr {String} search-holder\r\n *    Id of DOM element where search bar should appear. This attribute enables form-widget search feature, where user can search for optional sections and fields on the form.\r\n *    And navigate to optional section or field by clicking on search result item.\r\n * @attr {Number} widget-panel-top\r\n *    Top position for widget-panel (right-panel)\r\n * @attr {Number} widget-panel-right\r\n *    Right position for widget-panel (right-panel)\r\n * @attr {Function} on-section-sort\r\n *    Callback function when sections are sorted or rearranged\r\n * @attr {Function} on-save\r\n *    Callback function when sections are need to be save on outside section click\r\n *\r\n * @example\r\n Dynamic:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Dynamic attribute value. One can set a scope variable or function as attribute value. \r\n One can also pass parameters in calling function as is done on callback functions.\r\n In following example, value of 'isMandatory' field for 'Last Name' can be 'isLastNameMandatory(config.modelData)'.\r\n 'options' attribute does not support function as value.\r\n Controller:\r\n      $scope.isFirstNameMandatory = true;\r\n\r\n      $scope.isLastNameMandatory = function() {\r\n            return true;\r\n      };\r\n\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": \"isMandatory\",\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": \"isLastNameMandatory\",\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n      \r\n * @example\r\n Form widget without widget panel (right panel):\r\n <smart-form-widget show-widget=\"false\"></smart-form-widget>   \r\n     \r\n * @example\r\n If newly added ui elements (fields) to be added at the end of the section:\r\n <smart-form-widget is-sequencial=\"true\"></smart-form-widget>\r\n \r\n * @example\r\n Widget-panel with top and right position:\r\n <smart-form-widget widget-panel-top=\"100\" widget-panel-right=\"70\"></smart-form-widget>    \r\n \r\n * @example\r\n Form widget with 'Rule Engine' service:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\r\n      $scope.validateForm = function() {\r\n          RuleEngine.setRules($scope.config.formConfig.sections, $scope.config.modelData, $scope.config.rules);\r\n          RuleEngine.execute(function (e) {\r\n              console.log(e);   //  Check e for more details\r\n          }, $scope);  \r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n      <button ng-click=\"validateForm()\">Validate Form</button>\r\n\r\n* @example\r\nSaving sections on outside section click.\r\n\r\nmandatoryFieldStatus property used to initiate sec Nav validation and section indicator\r\n\r\n Dynamic:\r\n Controller:\r\n      $scope.config = {\r\n          modelData: {\r\n              \"firstName\": \"Sushant\",\r\n              \"lastName\": \"Ahirrao\"\r\n          },    \r\n          formConfig: {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                        \"save\":true,\r\n                        \"mandatoryFieldStatus\": {\r\n                            \"status\": \"complete\",\r\n                            \"isvalidate\":  false,\r\n                            \"description\": \"There are some mandatory fields that are not filled in this section\",\r\n                            \"title\": \"Section 3 - Completed\" \r\n                        },\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"First name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"firstName\"\r\n                                  }, {\r\n                                      \"label\": \"Last name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"lastName\"\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          },\r\n          \"rules\": [\r\n              {\r\n                  \"rule\": \"this.firstName == \\\"Sushant\\\" && this.lastName != \\\"Ahirrao\\\"\",\r\n                  \"error\": \"First name and last name combination is not matching\"\r\n              }\r\n          ]\r\n      };\r\n\t  $scope.onSave = function (data, prevObj) {\r\n\t      console.log(data, \"In Controller \", prevObj)\r\n          $scope.$digest();\r\n\t\t  // Note: data will give scope.modelData Obj and prevObj will give scope.formConfig.sections[..]\r\n\t\t  // use class=\"savable\" in actionable container within the section for avoiding the onSave callback function. \r\n\t  };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\" on-save=\"onSave(data, prevObj)\"></smart-form-widget>\r\n\r\n\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    var formWidgetCounter = 0;\r\n    angular.module('SMART2').directive('smartFormWidget', ['APPCONSTANTS', 'ScrollTo', 'formWidgetUtils', '$translate', '$timeout', '$compile', 'persistenceService', 'scrollPosition', '$window', function (APPCONSTANTS, ScrollTo, formWidgetUtils, $translate, $timeout, $compile, persistenceService, scrollPosition, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: true,\r\n            scope: {\r\n                formConfig: '=?',\r\n                modelData: '=?',\r\n                isSequential: '@',\r\n                showWidget: '@',\r\n                searchHolder: '@',\r\n                widgetPanelTop: '@',\r\n                widgetPanelRight: '@',\r\n                onSectionSort: '&',\r\n                onSave: '&',\r\n                revisionMode: \"@\",\r\n                secNav: '=?',\r\n                filterWith: '=?'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                $window.onload = function () {\r\n                    ///TODO \r\n                    //Call persistenceService to get All MasterData for all root fields\r\n                    persistenceService.masterPersistenceService.getMasterDataForRootField();\r\n                };\r\n                if (scope.secNav == undefined) {\r\n                    scope.secNav = true\r\n                }\r\n                scope.widgetPanelRightPos = scope.widgetPanelRight ? parseFloat(scope.widgetPanelRight) : 70;\r\n                formWidgetCounter = formWidgetCounter + 1;\r\n                scope.formWidgetId = 'form-widget-' + formWidgetCounter;\r\n                scope.addRemoveSection = $translate.instant('AddRemoveSectionTxt');\r\n                scope.visibleSectionTrackerItemsCount = 0;\r\n\r\n                var currentSelectedSection = 0,\r\n                    thumbnailsWrapHeightTemp = 0,\r\n                    secnavIndex = 0,\r\n                    thumbnailsWrapHeight = 0,\r\n                    sectionItemClicked = false,\r\n                    staticTopmargin = 64; // header height\r\n\r\n                scope.enableFieldPreview = false;\r\n\r\n                /*\r\n                 *  Update visible section tracker items\r\n                 */\r\n                var updateVisibleSectionTrackerItemsCount = function () {\r\n                    var count = 0,\r\n                        len = scope.sectionTrackerItems.length;\r\n                    for (var i = 0; i < len; i++) {\r\n                        var tItem = scope.sectionTrackerItems[i];\r\n                        if (tItem.visible && !tItem.hidden) {\r\n                            count++;\r\n                        }\r\n                    }\r\n                    scope.visibleSectionTrackerItemsCount = count;\r\n                };\r\n\r\n                var onSubHeaderHeight = attrs.$observe('subHeaderHeight', function (value) {\r\n                    if (!isNaN(value)) {\r\n                        ScrollTo.setScrollingTopMargin(parseInt(value));\r\n                    }\r\n                });\r\n\r\n\r\n                scope.isFormWidgetToBeLoaded = false;\r\n\r\n                var toutPromise = $timeout(function () {\r\n                    scope.isFormWidgetToBeLoaded = true;\r\n                    $timeout.cancel(toutPromise);\r\n                    toutPromise = null;\r\n                }, 500);\r\n\r\n\r\n\r\n                scope.checkPresistence = false;\r\n                scope.getPresistence = function (formConfig) {\r\n                    if (formConfig && typeof formConfig.documentType != 'undefined') {\r\n                        persistenceService.getUserData(formConfig.documentType);\r\n                        persistenceService.sectionPersistence.getSectionsPersistence(formConfig, persistenceService.userData);\r\n                    }\r\n                }\r\n\r\n                scope.modelDataWatcherEnabledOrNot = false;\r\n                scope.initModelDataWatcher = function (newConfig) {\r\n                    scope.modelDataWatcherEnabledOrNot = true;\r\n                    scope.unbindModelDataWatcher = scope.$watch('modelData', function (newVal, oldVal) {\r\n\r\n                        persistenceService.getModelData(newConfig, newVal, scope.unbindModelDataWatcher, scope.initChipsWatcher);\r\n                    }, true);\r\n                }\r\n                var persistenceTimeout;\r\n                scope.initChipsWatcher = function (arr) {\r\n\r\n                    scope.$watchGroup(arr, function (newVal, oldVal) {\r\n                        persistenceService.nPlusOne.getSelectedSection();\r\n                        if (persistenceTimeout) {\r\n                            $timeout.cancel(persistenceTimeout);\r\n                            persistenceTimeout = undefined;\r\n                        }\r\n                        persistenceTimeout = $timeout(function () {\r\n                            persistenceService.saveRecentDocument(newVal, scope.modelData);\r\n                        }, 1000);\r\n\r\n                    });\r\n                }\r\n\r\n                var unbindSectionsLoadedWathcer;\r\n                function initSectionsLoadedWatcher() {\r\n                    scope.SectionLoaderInitiated = true;\r\n                    var arr = [];\r\n                    for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                        arr.push('formConfig.sections[' + i + '].isContentLoaded');\r\n                    }\r\n\r\n\r\n                    unbindSectionsLoadedWathcer = scope.$watchGroup(arr, function (newVal, oldVal) {\r\n                        if (newVal) {\r\n                            var loadedCompletely = false;\r\n                            for (var i = 0; i < newVal.length; i++) {\r\n                                if (newVal[i] == false && !scope.formConfig.sections[i].isLazyLoadEnabled) {\r\n                                    break;\r\n                                }\r\n                                if (i == newVal.length - 1 && (newVal[i] == true || typeof newVal[i] == 'undefined')) {\r\n                                    scope.initSectionFocus();\r\n                                    var seclectedSectionId = persistenceService.nPlusOne.getSelectedSection();\r\n                                    if (seclectedSectionId != '') {\r\n                                        var seclectedSectionIndex = -1;\r\n                                        var sections = scope.formConfig.sections;\r\n                                        for (var j = 0; j < sections.length; j++) {\r\n                                            if (typeof sections[j].id != 'undefined' && sections[j].id == seclectedSectionId) {\r\n                                                seclectedSectionIndex = j;\r\n                                                sections[j].isActive = true;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                        loadedCompletely = true;\r\n                                        if (seclectedSectionIndex > -1) {\r\n                                            sectionItemClicked = true;\r\n                                            var mySection = scope.sectionTrackerItems[seclectedSectionIndex];\r\n                                            if (mySection.visible) {\r\n                                                scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                                mySection.isActive = true;\r\n                                                currentSelectedSection = seclectedSectionIndex;\r\n\r\n\r\n                                            }\r\n\r\n                                            scope.isSectionsLoaded = false;\r\n                                            ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + seclectedSectionIndex), angular.element('#' + scope.formWidgetId), function (e) {\r\n                                                setTimeout(function () {\r\n                                                    sectionItemClicked = false;\r\n                                                    scope.isSectionsLoaded = true;\r\n                                                }, 250);\r\n\r\n                                                // scope.sectionsLoadedCompletely = true;\r\n                                                unbindSectionsLoadedWathcer();\r\n                                            });\r\n                                        }\r\n                                        else {\r\n                                            scope.isSectionsLoaded = true;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        scope.isSectionsLoaded = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                var formWidgetTimeout,\r\n                    fixedElemHeight = 0,\r\n                    windowScrollTop = 0;\r\n                scope.sectionTrackerItems = [];\r\n                var onFormConfig = scope.$watch('formConfig', function (newConfig, oldConfig) {\r\n                    if (newConfig) {\r\n                        if (formWidgetTimeout) {\r\n                            $timeout.cancel(formWidgetTimeout);\r\n                            formWidgetTimeout = undefined;\r\n                        }\r\n                        if (scope.checkPresistence != true) {\r\n                            scope.getPresistence(newConfig);\r\n                            scope.formConfig.sections = newConfig.sections;\r\n                            scope.checkPresistence = true;\r\n                        }\r\n\r\n                        if (scope.modelDataWatcherEnabledOrNot == false && newConfig != undefined) {\r\n                            scope.initModelDataWatcher(newConfig);\r\n\r\n                        }\r\n\r\n                        formWidgetTimeout = $timeout(function () {\r\n                            var sectionItems = [];\r\n                            var optionalSections = [];\r\n                            var optionalFieldsAndSections = [],\r\n                                sectionLen = scope.formConfig.sections.length;\r\n\r\n                            scope.enableFieldPreview = newConfig.enableFieldPreview;\r\n\r\n                            for (var i = 0; i < sectionLen; i++) {\r\n                                var tSection = scope.formConfig.sections[i];\r\n                                //  if (firstTime || !angular.equals(newConfig.sections[i], (typeof oldConfig === 'undefined') ? null : oldConfig.sections[i])) {\r\n                                tSection.isMandatory = formWidgetUtils.convertAndGetValue(tSection.isMandatory, scope, tSection);\r\n                                if (angular.isDefined(tSection.isVisible)) {\r\n                                    tSection.isVisible = formWidgetUtils.convertAndGetValue(tSection.isVisible, scope, tSection);\r\n                                } else {\r\n                                    tSection.isVisible = tSection.isMandatory;\r\n                                }\r\n                                if (!angular.isDefined(tSection.isHidden)) {\r\n                                    //tSection.isHidden = scope.formConfig.sections[i].isHidden; //[TODO] not needed code\r\n                                    tSection.isHidden = false;\r\n                                } //else {\r\n                                //tSection.isHidden = false;\r\n                                //}\r\n                                tSection.key = scope.formWidgetId + '-section-' + i;\r\n\r\n                                if (scope.$eval(scope.showWidget) != false) {\r\n                                    sectionItems.push({\r\n                                        sectionKey: tSection.key,\r\n                                        sectionId: tSection.sectionId,\r\n                                        isOptionalSection: !tSection.isMandatory,\r\n                                        label: tSection.label,\r\n                                        sectionIndex: i,\r\n                                        visible: tSection.isVisible,\r\n                                        hidden: tSection.isHidden,\r\n                                        isActive: i == currentSelectedSection,\r\n                                        save: tSection.save,\r\n                                        id: tSection.id || '',\r\n                                        mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                        isReadOnly: tSection.isReadOnly\r\n                                    });\r\n\r\n                                    var sectionTLength = scope.sectionTrackerItems.length;\r\n                                    if (sectionTLength) {\r\n\r\n                                        //  For loop is needed in this case, because it is difficult to maintain the index of dragged/dropped item with ng-repeat.\r\n\r\n                                        for (var ij = 0; ij < sectionTLength; ij++) {\r\n                                            if (scope.sectionTrackerItems[ij].sectionIndex == tSection.key.split('section-')[1]) {\r\n                                                scope.sectionTrackerItems[ij] = {\r\n                                                    sectionKey: tSection.key,\r\n                                                    sectionId: tSection.sectionId,\r\n                                                    isOptionalSection: !tSection.isMandatory,\r\n                                                    label: tSection.label,\r\n                                                    sectionIndex: i,\r\n                                                    visible: tSection.isVisible,\r\n                                                    hidden: tSection.isHidden,\r\n                                                    isActive: i == currentSelectedSection,\r\n                                                    save: tSection.save,\r\n                                                    mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                                    isReadOnly: tSection.isReadOnly\r\n                                                };\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                if (!tSection.isMandatory && scope.$eval(scope.showWidget) != false && !tSection.isHidden) {\r\n                                    optionalSections.push({\r\n                                        sectionKey: tSection.key,\r\n                                        sectionId: tSection.sectionId,\r\n                                        isOptionalSection: !tSection.isMandatory,\r\n                                        label: tSection.label,\r\n                                        searchLabel: $translate.instant(tSection.label),\r\n                                        sectionIndex: i,\r\n                                        visible: tSection.isVisible,\r\n                                        hidden: scope.formConfig.sections[i].isHidden,\r\n                                        isActive: false,\r\n                                        isSection: true,\r\n                                        save: tSection.save,\r\n                                        mandatoryFieldStatus: tSection.mandatoryFieldStatus,\r\n                                        isReadOnly: tSection.isReadOnly\r\n                                    });\r\n                                }\r\n\r\n                                var sectionOptionalFields = [],\r\n                                    rowsLength = tSection.rows.length;\r\n\r\n                                for (var j = 0; j < rowsLength; j++) {\r\n                                    var trowsData = tSection.rows[j],\r\n                                        propertyLen = trowsData.properties.length;\r\n                                    for (var k = 0; k < propertyLen; k++) {\r\n                                        var tProperty = trowsData.properties[k];\r\n                                        tProperty.isMandatory = formWidgetUtils.convertAndGetValue(tProperty.isMandatory, scope, tProperty);\r\n                                        if (angular.isDefined(tProperty.isVisible)) {\r\n                                            tProperty.isVisible = formWidgetUtils.convertAndGetValue(tProperty.isVisible, scope, tProperty);\r\n                                        } else {\r\n                                            tProperty.isVisible = tProperty.isMandatory;\r\n                                        }\r\n                                        if (angular.isDefined(tProperty.isHidden)) {\r\n                                            tProperty.isHidden = formWidgetUtils.convertAndGetValue(tProperty.isHidden, scope, tProperty);\r\n                                        }\r\n                                        if (!tProperty.isMandatory && scope.$eval(scope.showWidget) != false && !tProperty.isHidden) {\r\n                                            sectionOptionalFields.push({\r\n                                                sectionKey: tSection.key,\r\n                                                label: tProperty.label,\r\n                                                sectionLabel: tSection.label,\r\n                                                searchLabel: $translate.instant(tSection.label) + ' ' + $translate.instant(tProperty.label),\r\n                                                sectionIndex: i,\r\n                                                rowIndex: j,\r\n                                                propertyIndex: k,\r\n                                                visible: tProperty.isVisible,\r\n                                                isSection: false\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                tSection.optionalFields = sectionOptionalFields;\r\n                                optionalFieldsAndSections = optionalFieldsAndSections.concat(tSection.optionalFields);\r\n                                //}\r\n                            }\r\n                            //  firstTime = false;\r\n\r\n                            if (scope.sectionTrackerItems.length != sectionItems.length) {\r\n                                scope.sectionTrackerItems = sectionItems;\r\n                            }\r\n\r\n                            scope.optionalSections = optionalSections;\r\n\r\n                            optionalFieldsAndSections = scope.optionalSections.concat(optionalFieldsAndSections);\r\n\r\n                            scope.optionalFieldsAndSections = optionalFieldsAndSections;\r\n\r\n                            updateVisibleSectionTrackerItemsCount();\r\n\r\n                            scope.showWidget = scope.sectionTrackerItems.length > 1 || scope.optionalSections.length > 0;\r\n                            if (!scope.SectionLoaderInitiated) {\r\n                                initSectionsLoadedWatcher();\r\n                            }\r\n                        }, 250);\r\n                    }\r\n                }, true);\r\n                /*\r\n                *  If search is enabled \r\n                */\r\n                //caching the selector.\r\n                var searchHolder = angular.element('#' + scope.searchHolder);\r\n                if (searchHolder.length > 0) {\r\n                    searchHolder.html('<div ng-include=\"\\'shared/directives/uiElements/smartFormWidget/searchTemplate.html\\'\"></div>');\r\n                    $compile(searchHolder.contents())(scope);\r\n                }\r\n\r\n                function getOpenWidgetSection(a_id) {\r\n                    var returnItem = false,\r\n                        len = scope.formConfig.sections.length;\r\n                    for (var indx = 0; indx < len; indx++) {\r\n                        var tmpObj = scope.formConfig.sections[indx];\r\n                        if (tmpObj.id === a_id) {\r\n                            returnItem = tmpObj;\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n                    return returnItem;\r\n                }\r\n\r\n                if (scope.$eval(scope.showWidget) != false) {\r\n                    var draggableWidth = $(window).width() / 2,\r\n                        restrictWidth = 0,\r\n                        secnavcontainerExpandWidth = 350;\r\n                    // To expand the sec nav\r\n                    element.on('click.secnavchevroicon', '#secnavchevroicon', function () {\r\n                        var $panelExp = $('#panelexpandor');\r\n                        if (!$panelExp.data('ui-draggable')) {\r\n                            $panelExp.draggable({\r\n                                axis: 'x',\r\n                                drag: function (e, ui) {\r\n                                    restrictWidth = secnavcontainerExpandWidth - draggableWidth;\r\n                                    ui.position.left = Math.min(secnavcontainerExpandWidth - 300, ui.position.left);\r\n                                    ui.position.left = Math.max(restrictWidth, ui.position.left);\r\n                                },\r\n                                stop: function (e, ui) {\r\n                                    secnavcontainerExpandWidth -= ui.position.left;\r\n                                    $('.secnavcontainer-expand').width(secnavcontainerExpandWidth);\r\n                                    $panelExp.css('left', 0);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        var $this = $(this),\r\n                            $secNavCont = $this.closest('.secnavcontainer');\r\n\r\n                        if ($secNavCont.hasClass('secnavcontainer-animate')) {\r\n\r\n                            $secNavCont.removeClass('secnavcontainer-animate secnavcontainer-expand').width(69);\r\n                            $this.find('use').attr('xlink:href', '#icon_LeftChevron');\r\n                            $('#sevnav-overlay').remove();\r\n                            $('body').css('overflow', 'auto');\r\n                            secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight)\r\n                        } else {\r\n\r\n                            $('body').css('overflow', 'hidden').append('<div id=\"sevnav-overlay\" class=\"sevnav-overlay\"></div>');\r\n                            $secNavCont.addClass('secnavcontainer-animate').width(secnavcontainerExpandWidth);\r\n                            setTimeout(function () {\r\n                                $secNavCont.addClass('secnavcontainer-expand');\r\n                            }, 450);\r\n                            $this.find('use').attr('xlink:href', '#icon_RightChevro');\r\n                            var $secNavContList = $secNavCont.find('.thumbnails-wrap').children('li')\r\n                            $secNavContList.each(function (k, v) {\r\n                                v.style.height = \"46px\";\r\n                            });\r\n                            var $thumbnailswrap = $('#thumbnails-wrap');\r\n                            $thumbnailswrap.animate({ scrollTop: (($($secNavContList[secnavIndex]).offset().top - $thumbnailswrap.offset().top) - 20) }, \"slow\");\r\n                            $('#sevnav-overlay').off('click').on('click', function () {\r\n                                $('#secnavchevroicon').trigger('click');\r\n                            });\r\n                        }\r\n\r\n                    });\r\n\r\n                    // Sec nav dot mouse enter functionality \r\n                    element.on('mouseenter.secnav', '.thumbnails-wrap li', function (e) {\r\n                        var $this = $(this);\r\n                        if ($this.closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n\r\n                        $('.nearby').removeClass(\"nearby\");\r\n                        $this.prev(\"li\").addClass(\"nearby\");\r\n                        $this.next(\"li\").addClass(\"nearby\");\r\n                        secnavHeightCal(element, e, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // SubHeader \r\n                    $('.extra-nav-wrap').resizeSensor({\r\n                        onHeightChange: function (a) {\r\n                            $('#subheaderwrapper').height(a.height);\r\n                            onDocumentScroll();\r\n                        }\r\n                    });\r\n\r\n                    // Sec nav dot mouse leave functionality \r\n                    element.on('mouseleave.secnav', '.thumbnails-wrap', function () {\r\n                        if ($(this).closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n                        element.find('li').removeClass(\"nearby\");\r\n                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // Sec nav dot mouse leave functionality \r\n                    element.on('mouseenter.secnavform', '.accountDetails', function () {\r\n                        if ($(this).closest('.secnavcontainer').hasClass('secnavcontainer-animate')) return;\r\n                        element.find('li').removeClass(\"nearby\");\r\n                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight, 'mouse');\r\n                    });\r\n\r\n                    // For calculating the dot height of sec nav \r\n                    var secnavHeightCal = function (element, e, thumbnailsWrapHeight, type) {\r\n                        var $secNavSelector = $('#thumbnails-wrap').children('li'),\r\n                            selectedLiIndex = typeof e === 'number' ? e : $secNavSelector.index($(e.currentTarget).closest('li')),\r\n                            prevSec = selectedLiIndex - 1,\r\n                            afterSec = selectedLiIndex + 1,\r\n                            prevSecDiff = prevSec,\r\n                            afterSecDiff = 2,\r\n                            secNavUlHeight;\r\n\r\n                        secNavUlHeight = Math.floor((thumbnailsWrapHeight) / ($secNavSelector.length));\r\n\r\n                        if (type != 'mouse') {\r\n                            secnavIndex = selectedLiIndex;\r\n                        }\r\n                        if (element.find('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                            return\r\n                        };\r\n\r\n                        $secNavSelector.each(function (k, v) {\r\n                            v.style.height = secNavUlHeight + \"px\";\r\n\r\n                            //if (k === selectedLiIndex) {\r\n                            //    v.style.height = (secNavUlHeight + 16) + \"px\";\r\n\r\n                            //} else if (k <= prevSec) {\r\n\r\n                            //    v.style.height = prevSecDiff === 1 ? (5 + secNavUlHeight) + \"px\" : prevSecDiff === 0 ? (10 + secNavUlHeight) + \"px\" : v.style.height = secNavUlHeight + \"px\";\r\n\r\n                            //    prevSecDiff--;\r\n                            //} else {\r\n                            //    if (afterSecDiff === 2) {\r\n                            //        v.style.height = (5 + secNavUlHeight) + \"px\";\r\n                            //    } else {\r\n                            //        v.style.height = secNavUlHeight + \"px\";\r\n                            //    }\r\n                            //    afterSecDiff--;\r\n                            //}\r\n                        });\r\n                    };\r\n\r\n                    var filterTextTimeout,\r\n                        onDocumentScroll = function () {\r\n\r\n                            /**\r\n                             ** Adding and Removing fixed class on subheader\r\n                             ** Setting height of sec nav\r\n                             ** Highlighting sec nav dots \r\n                            **/\r\n                            if (filterTextTimeout) {\r\n                                $timeout.cancel(filterTextTimeout);\r\n                            }\r\n\r\n                            try {\r\n                                var $fixedElem = $('.extra-nav-wrap'),\r\n                                    $subHeaderFixedContainer = $('#subheaderwrapper'),\r\n                                    $formWidgetElem = $('.secondary-navigation'),\r\n                                    formWidgetElemHeight = $formWidgetElem && $formWidgetElem.height(),\r\n                                    $thumbnailsWrap = $('#thumbnails-wrap'),\r\n                                    $secnavchevroicon = $('#secnavchevroicon'),\r\n                                    formWidgetTop,\r\n                                    formWidgetFixedTop = 1;\r\n                                windowScrollTop = $(window).scrollTop();\r\n                                fixedElemHeight = $fixedElem.outerHeight();\r\n                                if (windowScrollTop > 63) {\r\n\r\n                                    $formWidgetElem.css(\"top\", fixedElemHeight);\r\n\r\n                                    thumbnailsWrapHeight = $(window).height() - ((scope.optionalSections && scope.optionalSections.length ? 193 : 150) + (fixedElemHeight - 63));\r\n\r\n                                    if (!$fixedElem.hasClass('extra-nav-wrap-fixed')) {\r\n                                        $fixedElem.addClass('extra-nav-wrap-fixed');\r\n                                        $subHeaderFixedContainer.addClass('extra-nav-wrap-fixed');\r\n                                    }\r\n\r\n                                } else {\r\n\r\n                                    $formWidgetElem.css(\"top\", \"auto\");\r\n                                    if ($fixedElem.hasClass('extra-nav-wrap-fixed')) {\r\n                                        $fixedElem.removeClass('extra-nav-wrap-fixed');\r\n                                        $subHeaderFixedContainer.removeClass('extra-nav-wrap-fixed');\r\n                                    }\r\n\r\n                                    thumbnailsWrapHeight = $(window).height() - (((scope.optionalSections && scope.optionalSections.length ? 193 : 150) + (fixedElemHeight)) - windowScrollTop);\r\n                                }\r\n                                $formWidgetElem.height(thumbnailsWrapHeight + 24);\r\n                                $secnavchevroicon.css(\"top\", (thumbnailsWrapHeight / 2));\r\n\r\n                                formWidgetTop = $formWidgetElem.length && $formWidgetElem.offset().top;\r\n                                var trackerItemsLen = scope.sectionTrackerItems && scope.sectionTrackerItems.length;\r\n\r\n\r\n                                if (!sectionItemClicked && trackerItemsLen) {\r\n\r\n                                    var $cardParent = element.find('#' + scope.formWidgetId + '-sortable').find('.cardParent');\r\n                                    for (var i = 0; i < trackerItemsLen; i++) {\r\n                                        var $this = element.find('#' + scope.formWidgetId + '-section-' + i);\r\n\r\n                                        // Position of section relative to window\r\n                                        if ($this.children().length > 0) {\r\n                                            var offsetLi = $this.offset().top - 10,\r\n                                                offsetLiHeight = offsetLi + $this.height();\r\n                                            //activeoffset = offsetLi - formWidgetTop;\r\n                                            //get index of div in the parent document  \r\n                                            if (formWidgetTop >= offsetLi && formWidgetTop <= offsetLiHeight || thumbnailsWrapHeightTemp != thumbnailsWrapHeight) {\r\n                                                thumbnailsWrapHeightTemp = thumbnailsWrapHeight;\r\n                                                newSelected = scope.sectionTrackerItems[i].sectionIndex;\r\n\r\n                                                if (scope.sectionTrackerItems[newSelected].visible) {\r\n                                                    filterTextTimeout = $timeout(function () {\r\n                                                        scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                                        scope.sectionTrackerItems[newSelected].isActive = true;\r\n                                                        currentSelectedSection = newSelected;\r\n                                                        if (typeof scope.sectionTrackerItems[newSelected].id != 'undefined') {\r\n                                                            persistenceService.nPlusOne.saveSelectedSection(scope.sectionTrackerItems[newSelected].id);\r\n                                                        }\r\n                                                        secnavHeightCal(element, $cardParent.index($this), thumbnailsWrapHeight);\r\n                                                    });\r\n                                                }\r\n                                                $cardParent.children('.collapsible-container').removeClass('collapsible-focus');\r\n\r\n                                                $this.children('.collapsible-container').addClass('collapsible-focus');\r\n\r\n\r\n\r\n                                                if (formWidgetTop >= offsetLi && formWidgetTop <= offsetLiHeight) {\r\n                                                    break;\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                        $this = null;\r\n                                    }\r\n                                }\r\n\r\n\r\n                            } catch (e) { console.log(\"onDocumentScroll\") }\r\n                        },\r\n                        checkSubheaderHeight,\r\n                        subheaderHeight,\r\n                        newSelected = 0,\r\n                        filterTextTimeout = null;\r\n\r\n                    setTimeout(function () {\r\n                        isCheckSecnav();\r\n                    }, 100);\r\n\r\n                    function isCheckSecnav() {\r\n                        if ($('.secondary-navigation').length) {\r\n                            onDocumentScroll();\r\n                            $(document).on('scroll.secnav', onDocumentScroll);\r\n                        } else {\r\n                            setTimeout(function () {\r\n                                isCheckSecnav();\r\n                            }, 500);\r\n                        }\r\n                    }\r\n\r\n                    setTimeout(function () {\r\n                        isCheckWidget();\r\n                    }, 1000);\r\n\r\n                    function isCheckWidget() {\r\n                        if ($('#' + scope.formWidgetId).length) {\r\n                            scrollPosition.scrollWitgetsection(scope.sectionTrackerItems);\r\n                        } else {\r\n                            setTimeout(function () {\r\n                                isCheckWidget();\r\n                            }, 1000);\r\n                        }\r\n                    };\r\n                    /*\r\n                     * Section item click handler\r\n                     */\r\n                    var activeItem;\r\n                    scope.onSectionItemClick = function (item, sectionNumber, e) {\r\n\r\n                        var sectionTrackerLength = scope.sectionTrackerItems.length;\r\n                        //  For loop is needed in this case, because it is difficult to maintain the index of dragged/dropped item.\r\n                        for (var i = 0; i < sectionTrackerLength; i++) {\r\n                            scope.sectionTrackerItems[i].isActive = false;\r\n                        }\r\n                        scope.sectionTrackerItems[sectionNumber].isActive = true;\r\n                        currentSelectedSection = sectionNumber;\r\n                        var Selectedsection = scope.formConfig.sections[item.sectionIndex];\r\n                        Selectedsection.isActive = true;\r\n                        if (typeof Selectedsection.id != 'undefined') {\r\n                            persistenceService.nPlusOne.saveSelectedSection(Selectedsection.id);\r\n                        }\r\n                        scope.formConfig.sections[item.sectionIndex].isActive = true;\r\n                        sectionItemClicked = true;\r\n                        activeItem = e;\r\n                        ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                        ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId + '-sortable'), function (e) {\r\n\r\n                            setTimeout(function () {\r\n                                secnavHeightCal(element, activeItem, thumbnailsWrapHeight);\r\n                                sectionItemClicked = false;\r\n                            }, 300);\r\n                        });\r\n                    };\r\n\r\n\r\n                    /*\r\n                     * On optional section item click handler\r\n                     */\r\n                    scope.onOptionalSectionItemClick = function (isLabelClicked, item) {\r\n                        if (isLabelClicked && item.isVisible) {\r\n                            return;\r\n                        }\r\n\r\n                        scope.formConfig.sections[item.sectionIndex].isVisible = !scope.formConfig.sections[item.sectionIndex].isVisible;\r\n                        //  Toggle section tracker item visibility\r\n                        var trackerTLen = scope.sectionTrackerItems.length;\r\n                        for (var i = 0; i < trackerTLen; i++) {\r\n                            if (scope.sectionTrackerItems[i].label === item.label) {\r\n                                scope.sectionTrackerItems[i].visible = !item.visible;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        /*\r\n                         *  scope.isSequential is set to 'true', form-widget-section would be added \r\n                         *  where it is positioned in the JSON structure else \r\n                         *  form-widget-section would be added at the end of row\r\n                         */\r\n                        if (!scope.$eval(scope.isSequential) && scope.formConfig.sections[item.sectionIndex].isVisible) {\r\n                            //  Re-arrange sections order\r\n                            var tmpSection = scope.formConfig.sections[item.sectionIndex];\r\n                            scope.formConfig.sections.splice(item.sectionIndex, 1);\r\n                            scope.formConfig.sections.push(tmpSection);\r\n\r\n                            //  Re-arrange sections tracker items order\r\n                            for (var i = 0; i < scope.sectionTrackerItems.length; i++) {\r\n                                if (scope.sectionTrackerItems[i].label === item.label) {\r\n                                    var tmpSection = scope.sectionTrackerItems[i];\r\n                                    scope.sectionTrackerItems.splice(i, 1);\r\n                                    scope.sectionTrackerItems.push(tmpSection);\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            //  Re-arrange sections tracker items section index\r\n                            for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                                for (var j = 0; j < scope.sectionTrackerItems.length; j++) {\r\n                                    if (scope.formConfig.sections[i].label == scope.sectionTrackerItems[j].label) {\r\n                                        scope.sectionTrackerItems[j].sectionIndex = i;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //  Re-arrange sections optional fields section index\r\n                            for (var i = 0; i < scope.formConfig.sections.length; i++) {\r\n                                for (var j = 0; j < scope.optionalSections.length; j++) {\r\n                                    if (scope.formConfig.sections[i].label == scope.optionalSections[j].label) {\r\n                                        scope.optionalSections[j].sectionIndex = i;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        var itemVisible = !item.visible;\r\n                        var tempTOut = setTimeout(function () {\r\n                            if (itemVisible) {\r\n\r\n                                ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                                ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId + '-sortable'), function () {\r\n                                    if ($('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                                        $('.secnavcontainer').find('.thumbnails-wrap').children('li').each(function (k, v) {\r\n                                            v.style.height = \"46px\";\r\n                                        });\r\n                                    } else {\r\n                                        secnavHeightCal(element, secnavIndex, thumbnailsWrapHeight);\r\n                                    }\r\n                                });\r\n                            }\r\n                            clearTimeout(tempTOut);\r\n                        }, 200);\r\n\r\n                        updateVisibleSectionTrackerItemsCount();\r\n                    };\r\n\r\n\r\n                    scope.onOptionalFieldClick = function (isLabelClicked, item) {\r\n                        if (!item.visible) {\r\n                            ScrollTo.setScrollingTopMargin(staticTopmargin);\r\n                            ScrollTo.perform(element.find('#' + scope.formWidgetId + '-section-' + item.sectionIndex), angular.element('#' + scope.formWidgetId));\r\n                        }\r\n                        scope.$broadcast('optionalFieldClick', {\r\n                            isLabelClicked: isLabelClicked, item: item\r\n                        });\r\n                    };\r\n\r\n\r\n                    /*\r\n                     * Widget panel\r\n                     */\r\n                    scope.showWidgetPanel = false;\r\n\r\n                    scope.toggleWidgetPanel = function () {\r\n                        scope.showWidgetPanel = !scope.showWidgetPanel;\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Callback function when section order gets changed\r\n                     */\r\n\r\n                    scope.onSort = function (e) {\r\n                        scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n\r\n                        var sectionTrackerItems = angular.copy(scope.sectionTrackerItems),\r\n                            item = sectionTrackerItems.splice(e.startIndex, 1);\r\n                        sectionTrackerItems.splice(e.endIndex, 0, item[0]);\r\n\r\n                        var formConfigAfterSort = [],\r\n                            trackerSortLen = scope.sectionTrackerItems.length;\r\n                        var sectionsList = [];\r\n                        for (var i = 0; i < trackerSortLen; i++) {\r\n                            var section = scope.formConfig.sections[scope.sectionTrackerItems[i].sectionIndex];\r\n                            formConfigAfterSort.push(section);\r\n                            if (typeof section.id != 'undefined') {\r\n                                sectionsList.push(section.id);\r\n                            }\r\n                        }\r\n                        if (sectionsList.length > 0 && typeof scope.formConfig.documentType != 'undefined') {\r\n                            persistenceService.updateUserData('sections', sectionsList);\n                            persistenceService.saveUserData(scope.formConfig.documentType);\r\n                        }\r\n                        scope.onSectionSort({\r\n                            $event: {\r\n                                formConfig: formConfigAfterSort\r\n                            }\r\n                        });\r\n\r\n                        if (element.find('.secnavcontainer').hasClass('secnavcontainer-animate')) {\r\n                            var $sectionCont = $('#form-widget-1-sortable'),\r\n                                sectionList = $sectionCont.children('li'),\r\n                                sectionListitem = sectionList.splice(e.startIndex, 1);\r\n                            sectionList.splice(e.endIndex, 0, sectionListitem[0]);\r\n                            $sectionCont.append(sectionList);\r\n                        } else {\r\n                            var $thumbnailsCont = $('#thumbnails-wrap'),\r\n                                thumbnailsList = $thumbnailsCont.children('li'),\r\n                                thumbnailsListitem = thumbnailsList.splice(e.startIndex, 1),\r\n                                thumbNodes = [],\r\n                                count = 0;\r\n                            thumbnailsList.splice(e.endIndex, 0, thumbnailsListitem[0]);\r\n\r\n                            $.each($thumbnailsCont.get(0).childNodes, function (k, v) {\r\n                                if ($(v).is('li')) {\r\n                                    thumbNodes[k] = thumbnailsList[count];\r\n                                    count++;\r\n                                } else {\r\n                                    thumbNodes[k] = v;\r\n                                }\r\n                            });\r\n                            $thumbnailsCont.append(thumbNodes);\r\n                        }\r\n                        setTimeout(function () {\r\n                            onDocumentScroll();\r\n                        }, 10);\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Make section active in section tracker\r\n                     */\r\n                    var previousClickedSection = [];\r\n                    scope.initSectionFocus = function () {\r\n                        scope.$on('sectionFocus', function (event, data) {\r\n                            var openedSec = getOpenWidgetSection(data.id);\r\n                            var sectionNumber = openedSec.sectionIndex;\r\n                            if (openedSec) {\r\n                                scope.onSectionItemClick(openedSec, sectionNumber);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    scope.onSectionClick = function (section) {\r\n\r\n                        //scrollPosition.set(0, location.hash, { key: section.key.split('section-')[1], active: true });\r\n\r\n                        if (attrs.onSave) {\r\n                            if (section.hasOwnProperty('save') && section != previousClickedSection[(previousClickedSection.length - 1)]) {\r\n                                previousClickedSection.push(section);\r\n                            }\r\n\r\n                            if (previousClickedSection.length > 2) {\r\n                                previousClickedSection.shift();\r\n                            }\r\n                        }\r\n                        if (scope.sectionTrackerItems[currentSelectedSection].label === section.label) {\r\n                            return;\r\n                        }\r\n                        var tlenTracker = scope.sectionTrackerItems.length;\r\n                        for (var i = 0; i < tlenTracker; i++) {\r\n                            if (scope.sectionTrackerItems[i].label === section.label) {\r\n                                scope.sectionTrackerItems[currentSelectedSection].isActive = false;\r\n                                scope.sectionTrackerItems[i].isActive = true;\r\n                                currentSelectedSection = i;\r\n                                if (typeof scope.sectionTrackerItems[i].id != 'undefined') {\r\n                                    persistenceService.nPlusOne.saveSelectedSection(scope.sectionTrackerItems[i].id);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    };\r\n\r\n\r\n                    /*\r\n                     *  Callback function when user expands or collapses the section\r\n                     */\r\n                    scope.onSectionHeaderClick = function (section) {\r\n                        if (angular.isDefined(section.onHeaderClick)) {\r\n                            eval('scope.' + formWidgetUtils.generateFunctionWithParams(section.onHeaderClick, '$parent', true));\r\n                        }\r\n                        if (!section.isContentLoaded) {\r\n                            section.isContentLoaded = true;\r\n                        }\r\n\r\n                        var $itemSelected = element.find('#' + section.key);\r\n\r\n                        if (!$itemSelected.find('.collapsible-body').hasClass('displayBlock')) {\r\n\r\n                            var displacementItem = $itemSelected.offset().top - angular.element('#' + scope.formWidgetId + '-sortable').offset().top;\r\n\r\n                            displacementItem = displacementItem + staticTopmargin;\r\n                            setTimeout(function () {\r\n                                angular.element('body,html').animate({\r\n                                    scrollTop: displacementItem\r\n                                }, \"medium\");\r\n                            }, 200)\r\n                        }\r\n                    };\r\n\r\n\r\n                    // Auto Save Callback\r\n                    if (attrs.onSave) {\r\n                        var onDocumentClick = function (e) {\r\n                            if (!previousClickedSection.length) {\r\n                                return;\r\n                            }\r\n                            var prevKeyLen = $(e.target).closest('#' + previousClickedSection[0].key).length;\r\n                            if ((!prevKeyLen) || (prevKeyLen && $(e.target).closest('.savable').length)) {\r\n                                if (!$(e.target).closest('.modal').length && !$(e.target).closest('.noSaveItem').length && !$(e.target).closest('.lean-overlay').length) {\r\n                                    scope.onSave({\r\n                                        data: scope.modelData, prevObj: previousClickedSection[0]\r\n                                    });\r\n                                    previousClickedSection.shift();\r\n                                }\r\n                                //scope.$digest();\r\n                            }\r\n                        }\r\n\r\n                        $(document).off('click.saveSection').on('click.saveSection', onDocumentClick);\r\n\r\n                        // Needed due to selectbox plugin using stopPropagation\r\n                        $(document).off('change.saveSelect').on('change.saveSelect', '.select-wrapper select', function (e) {\r\n                            //var ind = $('#' + scope.formWidgetId + '-sortable').children('li').index($(this).closest('li')),\r\n                            //    sectionDatastore = scope.formConfig.sections[ind];\r\n\r\n\r\n                            var ind = $(this).closest('.card.cardParent').attr('id').split('section-'),\r\n                                sectionDatastore = scope.formConfig.sections[ind[1]];\r\n                            if (sectionDatastore.hasOwnProperty('save') && sectionDatastore != previousClickedSection[(previousClickedSection.length - 1)]) {\r\n                                previousClickedSection.push(sectionDatastore);\r\n                            }\r\n\r\n                            if (previousClickedSection.length > 2) {\r\n                                previousClickedSection.shift();\r\n                            }\r\n\r\n                            onDocumentClick(e);\r\n                        });\r\n                    };\r\n\r\n                    /*\r\n                     *  Remove all listeners on scope destroy\r\n                     */\r\n                    scope.$on('$destroy', function () {\r\n                        $(document).off('scroll.secnav click.saveSection change.saveSelect');\r\n                        $('#sevnav-overlay') && $('#sevnav-overlay').remove();\r\n\r\n                        element.off('mouseenter.secnav mouseleave.secnav click.secnavchevroicon mouseenter.secnavform');\r\n                        onSubHeaderHeight();\r\n                        onFormConfig();\r\n\r\n                    });\r\n\r\n\r\n                    scope.iconClasses = APPCONSTANTS.formWidgetItemClasses;\r\n                };\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartFormWidget/smartFormWidgetTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('smartSvgIcon', [function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                element.html('<svg><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#' + attrs.smartSvgIcon + '\"></use></svg>');\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    /*\r\n     *  Text highlighting filter\r\n     */\r\n    angular.module('SMART2').filter('highlight', ['$sce', function ($sce) {\r\n        return function (text, phrase) {\r\n            if (phrase) {\r\n                text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span style=\"background: yellow\">$1</span>');\r\n            }\r\n            return $sce.trustAsHtml(text);\r\n        }\r\n    }]);\r\n})();\r\n\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartGrid', ['$filter', function ($filter) {\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                gridConfig: '=config'\r\n            },\r\n            controller: function ($scope) {\r\n                /*\r\n                 * Current formatter\r\n                 */\r\n                $scope.currencyFormatter = function (amountarg, symbol, zeroprecision, defaultCurrency) {\r\n                    var amount = amountarg;\r\n                    if (zeroprecision)\r\n                        amount = Number(amountarg).toFixed(0);\r\n\r\n                    var formattedAmount;\r\n                    if (amount >= 1000000 || amount <= -1000000) {\r\n                        shortamount = amount / 1000000;\r\n                        formattedAmount = $scope.currencyFormatter(shortamount, symbol, false, defaultCurrency);\r\n                        //if (zeroprecision)\r\n                        //formattedAmount = formattedAmount.substring(0, formattedAmount.length - 3);\r\n                        formattedAmount = formattedAmount + \" MM\";\r\n                    }\r\n                    else {\r\n                        formattedAmount = $filter('currency')(amount);\r\n                        if (defaultCurrency != undefined) symbol = defaultCurrency;\r\n                        if (amount < 0) {\r\n                            if (symbol !== undefined)\r\n                                formattedAmount = $filter('currency')(amount, symbol).replace(\"(\", \"-\").replace(\")\", \"\");\r\n                            else\r\n                                formattedAmount = $filter('currency')(amount).replace(\"(\", \"-\").replace(\")\", \"\");\r\n                        }\r\n                        else if (symbol !== undefined) {\r\n                            formattedAmount = $filter('currency')(amount, symbol);\r\n                        }\r\n                        if (zeroprecision) {\r\n                            if (parseInt(formattedAmount.substring(formattedAmount.length - 2, formattedAmount.length)) == 0) {\r\n                                formattedAmount = formattedAmount.substring(0, formattedAmount.length - 3);\r\n                            }\r\n                        }\r\n                    }\r\n                    return formattedAmount.toString();\r\n                };\r\n\r\n                /*\r\n                 * Number formatter\r\n                 */\r\n                $scope.numberFormatter = function (amountarg, zeroprecision) {\r\n                    var formattedAmount = amountarg;\r\n                    if (zeroprecision)\r\n                        formattedAmount = Number(amountarg).toFixed(0);\r\n                    if (formattedAmount >= 1000000 || formattedAmount <= -1000000) {\r\n                        var shortamount = formattedAmount / 1000000;\r\n                        if (zeroprecision) {\r\n                            formattedAmount = Number(shortamount).toFixed(0);\r\n                        } else {\r\n                            formattedAmount = shortamount;\r\n                        }\r\n                        return $filter('number')(formattedAmount) + \" MM\";\r\n                    }\r\n                    else {\r\n                        return $filter('number')(formattedAmount);\r\n                    }\r\n                };\r\n            },\r\n            link: function (scope, element, attr) {\r\n                var headerTemplate, rowTemplate, headerData, rowData, cellTemplate, cellRenderer, headerCellRenderer, onClick, rowHeight, cellStyle;\r\n\r\n                scope.$watch('gridConfig', function (n, o) {\r\n                    if (n) {\r\n                        scope.config = scope.gridConfig;\r\n\r\n                        if (scope.config && scope.config.headerTemplate) {\r\n                            headerTemplate = scope.config.headerTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowTemplate) {\r\n                            rowTemplate = scope.config.rowTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.headerData) {\r\n                            headerData = scope.config.headerData;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowData) {\r\n                            rowData = scope.config.rowData;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.dimension && scope.config.dimension.height) {\r\n                            scope.gridHeight = scope.config.dimension.height;\r\n                        }\r\n                        else {\r\n                            scope.gridHeight = element.parent().outerHeight(true);\r\n                        }\r\n\r\n                        scope.gridHeight = scope.gridHeight - 1; // 1 is the border\r\n\r\n                        if (scope.config && scope.config.cellRenderer) {\r\n                            cellRenderer = scope.config.cellRenderer;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.headerCellRenderer) {\r\n                            headerCellRenderer = scope.config.headerCellRenderer;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.onClick) {\r\n                            onClick = scope.config.onClick;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.cellTemplate) {\r\n                            cellTemplate = scope.config.cellTemplate;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.rowHeight) {\r\n                            rowHeight = scope.config.rowHeight;\r\n                        }\r\n                        else {\r\n                            rowHeight = 40;\r\n                        }\r\n\r\n                        if (scope.config && scope.config.cellStyle) {\r\n                            cellStyle = scope.config.cellStyle;\r\n                        }\r\n\r\n                        var columnDefs = [];\r\n                        var cellWidth = element.parent().outerWidth() / headerData.length;\r\n\r\n                        for (var i = 0; i < headerData.length; i++) {\r\n                            columnDefs.push({\r\n                                displayName: headerData[i].title,\r\n                                field: headerData[i].datamappingkey,\r\n                                suppressSorting: headerData[i].sortable ? false : true,\r\n                                formatterType: headerData[i].formatterType,\r\n                                clickable: headerData[i].clickable ? true : false,\r\n                                align: headerData[i].align,\r\n                                width: headerData[i].width != undefined ? headerData[i].width : cellWidth,\r\n                                cellStyle: headerData[i].cellStyle != undefined ? headerData[i].cellStyle : undefined\r\n                            });\r\n\r\n                            //  Set default currency if the formatter type is currency\r\n                            if (headerData[i].formatterType == 'currency') {\r\n                                columnDefs[columnDefs.length - 1].defaultCurrency = headerData[i].defaultCurrency;\r\n                            }\r\n\r\n                            if (cellTemplate != undefined) {\r\n                                columnDefs[columnDefs.length - 1].template = cellTemplate;\r\n                            }\r\n                            else {\r\n                                columnDefs[columnDefs.length - 1].cellRenderer = cellRenderer ? cellRenderer : function (e) {\r\n                                    var columnValue, titleValue;\r\n                                    switch (e.colDef.formatterType) {\r\n                                        case 'link':\r\n                                            columnValue = titleValue = '<a>' + e.value + '</a>';\r\n                                            break;\r\n\r\n                                        case 'number':\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = titleValue = '<a>' + e.value + '</a>';\r\n                                            }\r\n                                            break;\r\n\r\n                                        case 'currency':\r\n                                            columnValue = titleValue = scope.currencyFormatter(e.value, undefined, true, e.colDef.defaultCurrency);\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = '<a>' + columnValue + '</a>';\r\n                                            }\r\n                                            break;\r\n\r\n                                        default:\r\n                                            columnValue = e.value === 0 || e.value === '0' ? '0' : (e.value == 'null' || e.value == null || e.value == '' ? '<span style=\"color: transparent;\">-</span>' : e.value);\r\n                                            titleValue = e.value;\r\n                                            if (e.colDef.clickable) {\r\n                                                columnValue = '<a>' + columnValue + '</a>';\r\n                                            }\r\n                                            break;\r\n                                    }\r\n                                    if (e.value == 'null' || e.value == null || e.value == '') {\r\n                                        return '<span style=\"width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\">' + columnValue + '</span>';\r\n                                    }\r\n                                    else {\r\n                                        return '<span style=\"width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\" title=\"' + titleValue + '\">' + columnValue + '</span>';\r\n                                    }\r\n                                    //'<a style=\"white-space: normal;\">' + columnValue + '</a>' - To avoid text ellipsis\r\n                                };\r\n                            }\r\n                        }\r\n\r\n                        var tmpRowData = [];\r\n                        for (var i = 0; i < rowData.length; i++) {\r\n                            tmpRowData[i] = {};\r\n                            for (var j = 0; j < columnDefs.length; j++) {\r\n                                tmpRowData[i][columnDefs[j].field] = rowData[i][columnDefs[j].field]; // rowData[i][columnDefs[j].field] == 'null' || rowData[i][columnDefs[j].field] == null  || rowData[i][columnDefs[j].field] == '' ? '<span style=\"color: transparent;\">-</span>' : rowData[i][columnDefs[j].field];\r\n                            }\r\n                        }\r\n\r\n                        if (scope.angularGridConfig) {\r\n                            scope.angularGridConfig.columnDefs = columnDefs;\r\n                            scope.angularGridConfig.rowData = tmpRowData;\r\n                            scope.angularGridConfig.api.onNewRows();\r\n                        }\r\n                        else {\r\n                            scope.angularGridConfig = {\r\n                                columnDefs: columnDefs,\r\n                                rowData: tmpRowData,\r\n                                enableSorting: true,\r\n                                angularCompileRows: true,\r\n                                virtualPaging: true,\r\n                                enableColResize: true,\r\n                                angularCompileHeaders: scope.config && scope.config.angularCompileHeaders,\r\n                                headerCellRenderer: headerCellRenderer ? headerCellRenderer : function (e) {\r\n                                    return '<span style=\"width: 80%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; float: ' + e.colDef.align + '; text-align: ' + e.colDef.align + ';\">' + e.colDef.displayName + '</span>';\r\n                                },\r\n                                cellClicked: onClick ? function (e) {\r\n                                    onClick({ dataMappingKey: e.colDef.field, value: e.value, rowIndex: e.rowIndex, rowData: rowData[e.rowIndex], clickable: e.colDef.clickable });\r\n                                } : undefined,\r\n                                rowHeight: rowHeight == undefined ? undefined : rowHeight\r\n                            };\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartGrid/smartGrid.html'\r\n        };\r\n    }]);\r\n})();\r\n/*\r\n * Inject required CSS\r\n */\r\n//var angularGridCSS = document.createElement(\"link\");\r\n//angularGridCSS.setAttribute(\"rel\", \"stylesheet\");\r\n//angularGridCSS.setAttribute(\"type\", \"text/css\");\r\n//angularGridCSS.setAttribute(\"href\", $('#blobURL').val()+'shared/libraries/angularGrid/angularGrid.css');\r\n//document.getElementsByTagName(\"head\")[0].appendChild(angularGridCSS);\r\n\r\n//var angularGridThemeCSS = document.createElement(\"link\");\r\n//angularGridThemeCSS.setAttribute(\"rel\", \"stylesheet\");\r\n//angularGridThemeCSS.setAttribute(\"type\", \"text/css\");\r\n//angularGridThemeCSS.setAttribute(\"href\", $('#blobURL').val()+'shared/libraries/angularGrid/theme-fresh.css');\r\n//document.getElementsByTagName(\"head\")[0].appendChild(angularGridThemeCSS);\r\n\nangular.module('SMART2').directive('smartInfotip', ['$window', function ($window) {\r\n    \"use strict\";\r\n    var _lastOpenInfotip = {},\r\n    hideLastInfotip = function (hObj) {\r\n        if (_lastOpenInfotip.target && _lastOpenInfotip.target.hasClass('isInfotipVisible')) {\r\n            _lastOpenInfotip.target.removeClass('isInfotipVisible');\r\n            _lastOpenInfotip.infotip.find(\".infotip-popover\").addClass('hide-popover-element');\r\n            _lastOpenInfotip.infotip.find(\".infotip-popover-triangle\").addClass('hide-popover-element');\r\n            _lastOpenInfotip._ev.value = true;\r\n        }\r\n    };\r\n    $(document).click(function (evt) {\r\n        hideLastInfotip();\r\n     });\r\n    return {\r\n        restrict: 'A',\r\n        transclude: true,\r\n        scope:true,\r\n        link: function (scope, element, attrs) {\r\n            //the root div of the popup template\r\n            var popover_container = element.find('.infotip-popover-container'),\r\n                popover_container_parent = popover_container.parent(),\r\n                popover = element.find('.infotip-popover'), //the popover element\r\n                triangle = element.find('.infotip-popover-triangle'), //the small triangle attached with the popover\r\n                triangle_height, //vertical height of the triangle\r\n                triangle_diagonal, //base of the triangle\r\n                triangle_div_side = 15, //side of the triangle\r\n                triangle_rect_div_side = 30, //the div which has been rotated to make a triangle using the after pseudo class\r\n                infotipElement = element,\r\n                getPosition = popover_container_parent.css('position') === \"\" || popover_container_parent.css('position') === \"static\" ? \"relative\" : popover_container_parent.css('position'),\r\n                $win = angular.element($window),\r\n                bindOn = !attrs.bindOn ? 'click mouseover interesected' : attrs.bindOn;\r\n\r\n            popover_container_parent.css({ 'position': getPosition, 'z-index': '1', 'display': 'inline-block' });\r\n            //popover_container_parent.css('position', getPosition);\r\n            //popover_container_parent.css('display', 'inline-block');\r\n            triangle_height = Math.sqrt(triangle_div_side * triangle_div_side / 2);\r\n            triangle_diagonal = Math.sqrt(triangle_div_side * triangle_div_side * 2);\r\n            var mode = attrs.mode === '' || attrs.mode === undefined ? 'mouseover' : attrs.mode;\r\n            var closeOnClick = attrs.closeOnClick === undefined ?\r\n                                    (mode == 'click' ? true : false) :\r\n                                    (attrs.closeOnClick === 'true');\r\n\r\n            var closeOnMouseleave = attrs.closeOnMouseleave === undefined ?\r\n                                        (mode == 'mouseover' ? true : false) :\r\n                                        (attrs.closeOnMouseleave === 'true');\r\n\r\n            var hideOnDocHover = { value: attrs.hideOnDocHover == 'true' };\r\n            //return the path of the popover template\r\n            scope.getContentPopover = attrs.templateUrl;\r\n\r\n            scope.isTemplateUrl = attrs.templateUrl ? true : false;\r\n\r\n            //depending upon the position specified, attached the appropriate class to the popover \r\n            var getTriangleClass = function () {\r\n                return 'infotip-popover-triangle-' + attrs.position;\r\n            }\r\n\r\n            var hideTooltip = function () {\r\n                setTimeout(function () {\r\n                    if (!onHoverablearea() && hideOnDocHover.value) {\r\n                        popover.addClass('hide-popover-element');\r\n                        triangle.addClass('hide-popover-element');\r\n                    }\r\n                }, 0);\r\n            };\r\n            var onHoverablearea = function () {\r\n                return (popover.is(':hover') || infotipElement.is(':hover') || triangle.is(':hover'));\r\n            };\r\n\r\n            scope.triangleClass = getTriangleClass();\r\n            if (closeOnMouseleave) {\r\n                if (hideOnDocHover.value) {\r\n                    infotipElement.bind('mouseleave blur', function () {\r\n                         hideTooltip();\r\n                    });\r\n                    popover.bind('mouseleave blur', function () {\r\n                        hideTooltip();\r\n                    });\r\n                    triangle.bind('mouseleave blur', function () {\r\n                        hideTooltip();\r\n                    });\r\n                }\r\n                else {\r\n                    infotipElement.bind('mouseleave blur ', function () {\r\n                        popover.addClass('hide-popover-element');\r\n                        triangle.addClass('hide-popover-element');\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (mode != 'click' && closeOnClick) {\r\n                infotipElement.bind('click', function () {\r\n                    popover.addClass('hide-popover-element');\r\n                    triangle.addClass('hide-popover-element');\r\n                });\r\n            }\r\n\r\n            popover.on('click', function (evt) {\r\n                evt.stopPropagation();\r\n            });\r\n\r\n            //Hide infotip on scroll\r\n            $win.bind('scroll', function (e) {\r\n                popover.addClass('hide-popover-element');\r\n                triangle.addClass('hide-popover-element');\r\n            });\r\n\r\n            //listen for click on the directive element\r\n            infotipElement.bind(bindOn, function (evt) {\r\n                evt.stopImmediatePropagation();\r\n               var _this = $(this),\r\n                parent_height = _this.outerHeight(),\r\n                parent_width, popover_height, popover_width,\r\n                elementOffsetTop = element.offset().top + 23,\r\n                elementOffsetLeft = element.offset().left,\r\n                leftPos;\r\n\r\n                if (evt.type == \"click\") {\r\n                    hideLastInfotip();\r\n                    hideOnDocHover.value = false;\r\n                    _this.addClass('isInfotipVisible');\r\n                    _lastOpenInfotip.target = _this;\r\n                    _lastOpenInfotip.infotip = popover_container;\r\n                    _lastOpenInfotip._ev = hideOnDocHover;\r\n                };\r\n\r\n                if (mode == \"canvas\") {\r\n                    elementOffsetTop = 100;\r\n                    elementOffsetLeft = 100;\r\n                    parent_height = 100;\r\n                }\r\n\r\n                //move the popover container to the bottom of the directive element\r\n                popover_container.css(\"top\", parent_height)//.style.top = parent_height + 'px';\r\n                parent_width = _this.outerWidth();\r\n\r\n                //'mouseover' mode\r\n                if (popover.hasClass('hide-popover-element') && attrs.message != '') {\r\n                    popover.removeClass('hide-popover-element');\r\n                    triangle.removeClass('hide-popover-element');\r\n                }\r\n\r\n                //if the template is supplied instead of templateUrl, set the popover innerHTML to the string passed in the 'template' attribute\r\n                if (attrs.message) {\r\n                    var templateElement = _this.find('.infotip-popover-template');\r\n                    templateElement.html(attrs.message);\r\n                }\r\n\r\n                var setDynamicInfotipPosition = function (position) {\r\n                    _this.find('.' + scope.triangleClass).removeClass(scope.triangleClass);\r\n                    triangle.removeClass(scope.triangleClass);\r\n                    attrs.position = position;\r\n                    scope.triangleClass = getTriangleClass();\r\n                    triangle.addClass(scope.triangleClass);\r\n                }\r\n\r\n                attrs.position = attrs.position === '' || attrs.position === undefined ? 'top' : attrs.position;\r\n\r\n                //function to set dynamic position for popover and triangle\r\n                var getDyanamicPositions = function () {\r\n                    var popoverOffset = popover.offset(),\r\n                                        bodyScrolled = $(\"body\").scrollTop() || $(\"html\").scrollTop();\r\n\r\n                    if (popoverOffset.left + popover.width() > $(window).width()) {\r\n                        leftPos = true;\r\n                        setDynamicInfotipPosition('left');\r\n                    } else if (popoverOffset.left < (0 || 10)) {\r\n                        setDynamicInfotipPosition('right');\r\n                    } else if (popover[0].getBoundingClientRect().top < 0) {\r\n                        setDynamicInfotipPosition('bottom');\r\n                    } else if ((popover[0].getBoundingClientRect().top + popover.height()) >= $(window).height()) {\r\n                        setDynamicInfotipPosition('top');\r\n                    } \r\n                };\r\n\r\n                //check position and calculate position for appending popover and triangle\r\n                var setInfotipPosition = function () {\r\n                    popover_height = popover.outerHeight();\r\n                    popover_width = popover.outerWidth();\r\n\r\n                    if (mode == \"canvas\") {\r\n                        popover_height = 100;\r\n                        popover_width = 100;\r\n                        if (infotipElement.attr(\"interesect\")) {\r\n                            var intersect = JSON.parse(infotipElement.attr(\"interesect\")),\r\n                                templateElement;\r\n\r\n                            popover.css({\r\n                                top: (intersect.y - triangle_height - 100),\r\n                                left: (intersect.x)\r\n                            });\r\n                            triangle.css({\r\n                                top: (intersect.y - triangle_height - 100),\r\n                                left: (intersect.x - triangle_rect_div_side)\r\n                            });\r\n\r\n                        }\r\n                        templateElement = _this.find('.infotip-popover-template');\r\n                        templateElement.html(infotipElement.attr(\"message\"));\r\n                        return;\r\n                    }\r\n\r\n                    switch (attrs.position) {\r\n                        case 'top':\r\n                            popover.css({\r\n                                top: (-parent_height - popover_height - triangle_height),\r\n                                left: ((parent_width - popover_width) / 2)\r\n                            });\r\n                            triangle.css({\r\n                                top: (-parent_height - triangle_height),\r\n                                left: ((parent_width - triangle_rect_div_side) / 2)\r\n                            });\r\n                            break;\r\n\r\n                        case 'bottom':\r\n                            popover.css({\r\n                                top: triangle_height,\r\n                                left: ((parent_width - popover_width) / 2)\r\n                            });\r\n                            triangle.css({\r\n                                top: -(triangle_rect_div_side - triangle_height),\r\n                                left: ((parent_width - triangle_rect_div_side) / 2)\r\n                            });\r\n                            break;\r\n\r\n                        case 'right':\r\n                            popover.css({\r\n                                top: ((parent_height - popover_height) / 2 - parent_height),\r\n                                left: parent_width + triangle_height\r\n                            });\r\n                            triangle.css({\r\n                                top: ((parent_height - triangle_rect_div_side) / 2 - parent_height),\r\n                                left: (parent_width - (triangle_rect_div_side - triangle_height))\r\n                            });\r\n                            break;\r\n\r\n                        case 'left':\r\n                            if (leftPos) {\r\n                                popover.css({ left: -(popover_width + triangle_div_side) })\r\n                            }\r\n                            popover.css({\r\n                                top: ((parent_height - popover_height) / 2 - parent_height),\r\n                                right: triangle_height\r\n                            });\r\n                            triangle.css({\r\n                                top: ((parent_height - triangle_rect_div_side) / 2 - parent_height),\r\n                                left: -triangle_height\r\n                            });\r\n                            if (attrs.customStyle == 'true') {\r\n                                popover.css({ left: -(popover_width + triangle_div_side - 5) });\r\n                                triangle.css({\r\n                                    top: ((parent_height - triangle_rect_div_side) / 2 - parent_height + 5),\r\n                                });\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                //Append infotip to body only when isFixed = 'true'\r\n                var appendInfotipToBody = function () {\r\n                    if (attrs.isFixed == 'true') {\r\n                        if (!popover_container.data('appended')) {\r\n                            angular.element('body').append(popover_container.data('appended', true));\r\n                        }\r\n                        if (attrs.customStyle == 'true') {\r\n                            popover_container.addClass('fullWidthInfo');\r\n                        }\r\n                        if (attrs.showFullTip == 'true') {\r\n                            popover_container.addClass('showFullTip');\r\n                        }\r\n                        var templateElementBody = popover_container.find('.infotip-popover-template');\r\n                        templateElementBody.html(attrs.message);\r\n                        popover_container.css({ 'top': elementOffsetTop + 'px', 'left': elementOffsetLeft + 'px' });\r\n                    }\r\n                }\r\n\r\n                setInfotipPosition();\r\n                appendInfotipToBody();\r\n                getDyanamicPositions();\r\n                setInfotipPosition();\r\n                appendInfotipToBody();\r\n            });\r\n        },\r\n        templateUrl: 'shared/directives/uiElements/smartInfotip/smartInfotipTemplate.html'\r\n    }\r\n}]);\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartList', ['$parse', '$window', 'commonUtilities', function ($parse, $window, commonUtilities) {\r\n        return {\r\n            restrict: 'AE',\n            replace: false,\n            scope: true,\n            link: function (scope, element, attrs) {\r\n                scope.styleClass = 'collection';\n                scope.itemClass = 'collection-item';\n                // evaluating callback for list\n                var clickCallback = $parse(attrs.clickCallback);\n\n                attrs.$observe('selectiveDisplayConfig', function (displayConfig) {\r\n                    if (displayConfig) {\r\n                        scope.listDisplayConfig = scope.$eval(displayConfig);\r\n                    } else {\r\n                        scope.listDisplayConfig = { \"showIcon\": true, \"showAction\": false, \"importantAttribLimit\": 5 };\r\n                    }\r\n\r\n                });\n\n                //Loacal list Click handler\n                scope.listClickHandler = function (item) {\r\n                    if (angular.isFunction(clickCallback)) {\r\n                        clickCallback(scope, { e: item });\r\n                    }\r\n                };\n\n                attrs.$observe(\"height\", function (value) {\r\n                    if (value) {\r\n                        scope.listHeight = value;\r\n                    }\r\n                });\n\n                attrs.$observe('model', function (value) {\r\n                    if (value) {\r\n                        scope.dataModel = scope.$eval(value);\r\n                    }\r\n                });\n\n\n                attrs.$observe('styleClass', function (value) {\r\n                    scope.styleClass = value;\r\n                });\n\n                attrs.$observe('itemClass', function (value) {\r\n                    scope.itemClass = value;\r\n                });\n\n                attrs.$observe('template', function (value) {\r\n                    scope.template = value;\r\n                });\n                var lazyLoadingCallback = $parse(attrs.lazyLoadCallback);\n                var backToTopCallback = $parse(attrs.backToTopCallback);\n                var scrolledCallback = $parse(attrs.scrollInProgress);\n\n                scope.scrollEndCallback = function () {\r\n                    if (angular.isFunction(lazyLoadingCallback)) {\r\n                        lazyLoadingCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.scrollToTopCallback = function () {\r\n                    if (angular.isFunction(backToTopCallback)) {\r\n                        backToTopCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.scrollInProgress = function () {\r\n                    if (angular.isFunction(scrolledCallback)) {\r\n                        scrolledCallback(scope, { e: '' });\r\n                    };\r\n                };\n\n                scope.actionElementID = commonUtilities.uniqueIDGenerator;\r\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartList/smartListTemplate.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartListLookup', ['$rootScope', '$timeout', 'ScrollTo', 'lookup', 'debouncer', function ($rootScope, $timeout, ScrollTo, lookup, debouncer) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                callAddNew: '&',\r\n                lookupOpen: '&',\r\n                lookupHide: '&',\r\n                searchtextKeyUp: '&',\r\n                readonly: '@',\r\n                displayformat: '@',\r\n                multiselect: '@',\r\n                addnew: '@',\r\n                titleofmodel: '@',\r\n                selecttypeoption: '='\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                var multiselect = (scope.multiselect == undefined || scope.multiselect == null) ? false : scope.multiselect == \"true\" ? true : false;\r\n                var addnew = (scope.addnew == undefined || scope.addnew == null) ? false : scope.addnew == \"true\" ? true : false;\r\n                //var readonly = (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false;\r\n                var formatedArray = eval(scope.displayformat);\r\n                scope.valuetoshow = [\"\"];\r\n                scope.titleofmodel = (scope.titleofmodel == undefined || scope.titleofmodel == null) ? 'Title Of Model' : scope.titleofmodel;\r\n                scope.toolTip = \"\";\r\n                var isInfoTipEnable = attrs.showInfoTip == 'true' ? true : false,\r\n                    checkInfoToolTip = function () {\r\n                        var infotipData = scope.ngModel;\r\n                        \r\n\r\n                        if (isInfoTipEnable) {\r\n                            scope.toolTip = _.pluck(scope.ngModel, \"name\").join('</br>');\r\n                        } \r\n                    };\r\n\r\n                function generateName(obj) {\r\n                    var label = \"\",\r\n                        formattedLen = formatedArray.length;\r\n                    for (var j = 0; j < formattedLen; j++) {\r\n                        if (obj.hasOwnProperty(formatedArray[j])) {\r\n                            label = label + \" \" + obj[formatedArray[j]];\r\n                        }\r\n                    }\r\n                    return label;\r\n                }\r\n\r\n               var deregisterWatchModel = scope.$watch(\"ngModel\", function (newVal) {\r\n                    scope.valuetoshow = [\"\"];\r\n                    if (multiselect) {\r\n                        if (angular.isDefined(newVal)) {\r\n                            if (newVal.length > 0) {\r\n                                scope.valuetoshow = [generateName(newVal[0])];\r\n                                var totalEl = newVal.length;\r\n                                if (totalEl > 1) {\r\n                                    scope.valuetoshow.push(\"+\" + (totalEl - 1) + \" More\");\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        scope.valuetoshow = [generateName(newVal)];\r\n                    }\r\n                    if (scope.valuetoshow[0] == \"\") {\r\n                        scope.isActive = false;\r\n                    } else {\r\n                        scope.isActive = true;\r\n                    }\r\n                    checkInfoToolTip();\r\n                });\r\n\r\n                scope.openLookup = function () {\r\n                    debouncer.add(function () {\r\n                        if (scope.readonly === 'true' && !scope.valuetoshow[1]) return false;\r\n                        if ($.isFunction(scope.lookupOpen)) {\r\n                            scope.lookupOpen();\r\n                        }\r\n                        var lookupConfig = {\r\n                            modelData: scope.ngModel,\r\n                            config: {\r\n                                mutliselect: multiselect,\r\n                                displayProperties: formatedArray,\r\n                                options: scope.options,\r\n                                addnew: addnew,\r\n                                isMandatory: scope.isMandatory,\r\n                                onKeyUp: attrs.searchtextKeyUp ? scope.searchtextKeyUp : '',\r\n                                titleOfModel: scope.titleofmodel,\r\n                                selectTypeOption: scope.selecttypeoption,\r\n                                readonly: (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false\r\n                            }\r\n                        }\r\n                        var cancelTimer = $timeout(function () {\r\n                            lookup.open(lookupConfig, function (response) {\r\n\r\n                                if (response.addnew) {\r\n                                    if ($.isFunction(scope.callAddNew)) {\r\n                                        scope.callAddNew();\r\n                                    }\r\n                                }\r\n                                scope.ngModel = response.result;\r\n                                scope.defaultselectiontext = response.defaultSelectionText;\r\n                                scope.selecttypeoption = response.selectTypeOption;\r\n                                if ($.isFunction(scope.lookupHide)) {\r\n                                    scope.lookupHide({ data: response });\r\n                                }\r\n                            });\r\n                            $timeout.cancel(cancelTimer);\r\n                            cancelTimer = null;\r\n                        });\r\n                    }, 300);\r\n                }\r\n\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                scope.$on('$destroy', function () {\r\n                    deregisterWatchModel();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartListLookup/smartListLookupTemplate.html'\r\n        };\r\n    }]);\r\n})();\n//(function () {\r\n//    'use strict';\n//    angular.module('SMART2').factory('httpLoaderInterceptor', ['$rootScope', function ($rootScope) {\n//        // Active request count\n//        var requestCount = 0;\n\n//        function startRequest(config) {\n//            // If no request ongoing, then broadcast start event\n//            if (!requestCount) {\r\n//                $rootScope.$broadcast('httpLoaderStart');\r\n//            }\n\n//            requestCount++;\n//            return config;\r\n//        }\n\n//        function endRequest(arg) {\n//            // No request ongoing, so make sure we don’t go to negative count\n//            if (!requestCount)\n//                return;\n\n//            requestCount--;\n//            // If it was last ongoing request, broadcast event\n//            if (!requestCount) {\r\n//                $rootScope.$broadcast('httpLoaderEnd');\r\n//            }\n\n//            return arg;\r\n//        }\n\n//        /* ROOTSCOPE EXPOSED BROADCAST TRIGGERS FOR LOADER */\n//        $rootScope.showCentralLoader = function () {\r\n//            $rootScope.$broadcast('httpLoaderStart');\r\n//        };\n\n//        $rootScope.hideCentralLoader = function () {\r\n//            $rootScope.$broadcast('httpLoaderEnd');\r\n//        };\n//        /* END FOR -- ROOTSCOPE EXPOSED BROADCAST TRIGGERS FOR LOADER */\n\n//        // Return interceptor configuration object\n//        return {\r\n//            'request': startRequest,\n//            'requestError': endRequest,\n//            'response': endRequest,\n//            'responseError': endRequest\r\n//        };\r\n//    }]);\n\n//    angular.module('SMART2').config(['$httpProvider', function ($httpProvider) {\r\n//        $httpProvider.interceptors.push('httpLoaderInterceptor');\r\n//    }]);\n\n//    angular.module('SMART2').directive('httpLoader', function () {\r\n//        return {\r\n//            restrict: 'EA',\n//            templateUrl: 'shared/directives/uiElements/smartLoader/smartLoaderTemplate.html',\n//            link: function (scope, element) {\n//                // Store original display mode of element\n//                var shownType = element.css('display');\n//                function hideElement() {\r\n//                    element.css('display', 'none');\r\n//                }\n\n//                scope.$on('httpLoaderStart', function () {\r\n//                    element.css('display', shownType);\r\n//                });\n\n//                scope.$on('httpLoaderEnd', hideElement);\n\n//                // Initially hidden\n//                hideElement();\r\n//            }\r\n//        };\r\n//    });\n\n//    angular.module('SMART2').directive('routeLoader', function () {\r\n//        return {\r\n//            restrict: 'EA',\r\n//            templateUrl: 'shared/directives/uiElements/smartLoader/smartLoaderTemplate.html',\r\n//            link: function (scope, element) {\r\n//                // Store original display mode of element\r\n//                var shownType = element.css('display');\r\n//                function hideElement() {\r\n//                    element.css('display', 'none');\r\n//                }\r\n\r\n//                scope.$on('$routeChangeStart', function () {\r\n//                    element.css('display', shownType);\r\n//                });\r\n//                scope.$on('$routeChangeSuccess', hideElement);\r\n//                scope.$on('$routeChangeError', hideElement);\r\n//                // Initially element is hidden\r\n//                hideElement();\r\n//            }\r\n//        }\r\n//    });\r\n//})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').factory('lookup', ['$rootScope', function ($rootScope) {\r\n        var Obj = {};\r\n        Obj.onCallback = undefined;\r\n        Obj.on = function (callback) {\r\n            Obj.onCallback = callback;\r\n        };\r\n\r\n        Obj.open = function (config, callback) {\r\n            this.config = config;\r\n            this.broadcastItem();\r\n            this.resultCallBack = function (result) {\r\n                callback(result);\r\n            };\r\n        };\r\n        Obj.optionUpdate = function (option) {\r\n            if (typeof this.config != 'undefined') {\r\n                this.config.config.options = option;\r\n            }\r\n        };\r\n        Obj.getConfig = function () {\r\n            return this.config;\r\n        };\r\n        Obj.setTempModel = function (arg) {\r\n            this.tempModel = arg;\r\n        };\r\n        Obj.getTempModel = function () {\r\n            return this.tempModel;\r\n        };\r\n        Obj.onScrollEnd = function (callback) {\r\n            this.onScrollEndCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.onScrollTop = function (callback) {\r\n            this.onScrollTopCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.onScrollInProgress = function (callback) {\r\n            this.onScrollInProgressCall = function () {\r\n                callback();\r\n            };\r\n        };\r\n        Obj.broadcastItem = function () {\r\n            angular.isFunction(Obj.onCallback) && Obj.onCallback();\r\n        };\r\n        return Obj;\r\n    }]);\r\n\r\n    var countForTheProprty = 0;\r\n    angular.module('SMART2').directive('smartLookup', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', function ($rootScope, $timeout, $translate, ScrollTo, lookup) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.lookupLoaderConfig = {\r\n                    plain: true,\r\n                    center: true,\r\n                    message: \"Loading...\"\r\n                };\r\n\r\n                scope.searchText = { title: \"\" };\r\n                scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                function isObjectEquals(obj1, obj2) {\r\n                    var checkObj2 = function () {\r\n                        for (var i in obj2) { }\r\n                        return i == undefined ? false : true;\r\n                    }\r\n                    if (obj2 == '' || obj2 == null || checkObj2() === false) {\r\n                        return false;\r\n                    }\r\n                    for (var i in obj2) {\r\n                        if (obj2.hasOwnProperty(i)) {\r\n                            if (!obj1.hasOwnProperty(i)) return false;\r\n                            if (obj2[i] != obj1[i]) return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                function containsObject(obj, list, catalogObj) {\r\n                    for (var i = 0; i < list.length; i++) {\r\n                        if (catalogObj) {\r\n                            if (obj.UserId == list[i]) {\r\n                                return true;\r\n                            };\r\n                        } else {\r\n                            if (isObjectEquals(obj, list[i])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                scope.smartScrollEnd = function () {\r\n                    if (angular.isFunction(lookup.onScrollEndCall)) {\r\n                        lookup.onScrollEndCall();\r\n                    };\r\n                    $timeout(function () {\r\n                        if (scope.isLazyLoadingEnabled && scope.limitToCount <= scope.options.length)\r\n                            scope.limitToCount = scope.limitToCount + 35;\r\n                    });\r\n                };\r\n                scope.smartScrollTop = function () {\r\n                    if (angular.isFunction(lookup.onScrollTopCall)) {\r\n                        lookup.onScrollTopCall();\r\n                    };\r\n                };\r\n                scope.smartScrollInProgress = function () {\r\n                    if (angular.isFunction(lookup.onScrollInProgressCall)) {\r\n                        lookup.onScrollInProgressCall();\r\n                    };\r\n                };\r\n                scope.searchText = { title: \"\" };\r\n                scope.selectdCount = 0;\r\n                scope.model = [];\r\n                scope.options = [];\r\n                scope.displayProperties = [\"name\"];\r\n                scope.selectTypeOptionWith = '';\r\n                scope.propKey = \"\";\r\n                countForTheProprty++;\r\n                function generateName(obj) {\r\n                    var label = \"\";\r\n                    if (scope.displayProperties.length == 1) {\r\n                        label = obj[scope.displayProperties[0]];\r\n                    }\r\n                    else {\r\n                        for (var j = 0; j < scope.displayProperties.length; j++) {\r\n                            if (scope.propSeparation !== undefined && j !== scope.displayProperties.length - 1) {\r\n                               label = label + \" \" + obj[scope.displayProperties[j]] + \" \" + scope.propSeparation;\r\n                            }\r\n                            else { \r\n                                label = label + \" \" + obj[scope.displayProperties[j]];\r\n                            }\r\n                        }\r\n                    }\r\n                    return label;\r\n              \r\n                }\r\n                var stopInit = false;\r\n                function initialize() {\r\n                    //migrate two array with flag\r\n                    scope.propKey = \"counterProp\" + countForTheProprty;\r\n                    if (scope.options == undefined || scope.config.options == undefined) {\r\n                        scope.options = [];\r\n                    } else {                      \r\n                            scope.options = scope.config.options;                        \r\n                    }\r\n                    if (scope.multiple) {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!scope.options[i].hasOwnProperty(\"ischecked\") && !stopInit) {\r\n                                if (containsObject(scope.options[i], scope.model, scope.isObjectCompareCatalog)) {\r\n                                    scope.options[i].ischecked = true;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                } else {\r\n                                    scope.options[i].ischecked = false;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                }\r\n                                if (scope.descriptionKey) {\r\n                                    scope.options[i].description = scope.options[i][scope.descriptionKey];\r\n                                }\r\n                            }                           \r\n                        }\r\n                        if (scope.minMultiselect) {\r\n                            checkSelectedItems();\r\n                        }\r\n                    } else {\r\n\t\t\t\t\t\tscope.itemSelected = false; // make done button disabled\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!stopInit) {\r\n                                if (isObjectEquals(scope.options[i], scope.model)) {\r\n                                    scope.options[i].ischecked = true;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n\t\t\t\t\t\t\t\t\tscope.itemSelected = true; // make done button active\r\n                                } else {\r\n                                    scope.options[i].ischecked = false;\r\n                                    scope.options[i][scope.propKey] = generateName(scope.options[i]);\r\n                                }\r\n                                if (scope.descriptionKey) {\r\n                                    scope.options[i].description = scope.options[i][scope.descriptionKey];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    scope.limitToCount = scope.isLazyLoadingEnabled ? 35 : scope.options.length;\r\n                };\r\n                function setLoader(e) {\r\n                    if (e.target.value.trim() != \"\") {\r\n                        scope.showLoader = true;\r\n                        scope.showSearchLoader = true;\r\n                    }\r\n\r\n                    if (scope.config.options.length == 0) {\r\n                        scope.showLoader = false;\r\n                    }\r\n\r\n                    element.find(\"#lookup-content-wrpper .scroll-content\").scrollTop(0);\r\n                    if (scope.clearModelOnEnter) {\r\n                        scope.model = [];\r\n                    }\r\n                }\r\n                scope.searchTextKeyUpFn = function (e) {\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: { text: e.target.value, type: \"textfield\", \"e\": e } });\r\n                    }\r\n                    if (e.keyCode === 13 && (scope.stopFilterOnKey === \"true\" || scope.stopFilterOnKey === true) && (scope.requireLoader === \"true\" || scope.requireLoader === true)) {\r\n                        if (scope.searchCount > 0 && e.target.value.length >= scope.searchCount) {\r\n                            setLoader(e);\r\n                        }\r\n                        else if (typeof (scope.searchCount) === \"undefined\") {\r\n                            setLoader(e);\r\n                        }\r\n                    }\r\n                    scope.cancelTitle = e.target.value == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                }\r\n\r\n                var regEx = new RegExp(\"\", \"ig\");\r\n                function scrollbarReload() {\r\n                    if (scope.scrollAlwaysTopOnload == true && scope.scrollReload == false) {\r\n                        scope.scrollReload = true\r\n                    } else if (scope.scrollAlwaysTopOnload == true && scope.scrollReload == true) {\r\n                        scope.scrollReload = false\r\n                    }\r\n                };\r\n                scope.triggerFlag = false;\r\n                var returnObj = {};\r\n                lookup.on(function () {\r\n                    scope.config = lookup.config.config;\r\n                    scope.minMultiselect = scope.config.minMultiselect;\r\n                    scope.label = scope.config.label;\r\n                    scope.isSearchOpen = false;\r\n                    scope.multiple = false;\r\n                    scope.addnew = false;\r\n                    scope.readonly = false;\r\n                    scope.multiple = typeof (scope.config.mutliselect) == \"undefined\" ? false : scope.config.mutliselect;\r\n                    scope.addnew = typeof (scope.config.addnew) == \"undefined\" ? false : scope.config.addnew;\r\n                    scope.readonly = typeof (scope.config.readonly) == \"undefined\" ? false : scope.config.readonly;\r\n                    scope.titleOfModel = typeof (scope.config.titleOfModel) === \"undefined\" ? $translate.instant('titleOfModel') : scope.config.titleOfModel;\r\n                \t/*  Default Selection scope variable */\r\n                    scope.config.defaultSelectOption = typeof (scope.config.defaultSelectOption) === \"undefined\" ? false : scope.config.defaultSelectOption;\r\n                    scope.config.defaultSelectionText = typeof (scope.config.defaultSelectionText) === \"undefined\" ? \"\" : scope.config.defaultSelectionText;\r\n                    scope.config.selectTypeOption = typeof (scope.config.selectTypeOption) === \"undefined\" ? null : scope.config.selectTypeOption;\r\n                    scope.selectiontext = angular.copy(scope.config.selectTypeOption);    \r\n                    scope.model = lookup.config.modelData;\r\n                    scope.isLazyLoadingEnabled = scope.config.isLazyLoadingEnabled;\r\n                    \r\n                    if (angular.isDefined(scope.model) && (scope.model != \"\" || angular.equals(scope.model, {}) )) {\r\n                        if (scope.multiple) {\r\n                            scope.selectdCount = scope.model.length || 0;\r\n                        }\r\n                        else if (scope.model.hasOwnProperty('name') || scope.model.hasOwnProperty('value') || scope.model.hasOwnProperty('id')) {\r\n                            scope.selectdCount = 1;\r\n                        }\r\n                    } else {\r\n                        scope.selectdCount = 0;\r\n                    }\r\n                    scope.options = scope.config.options;\r\n                    scope.limitToCount = scope.isLazyLoadingEnabled ? 35 : scope.options.length;\r\n                    scope.displayProperties = scope.config.displayProperties.length > 0 ? scope.config.displayProperties : scope.displayProperties;\r\n                    scope.descriptionKey = scope.config.descriptionKey;\r\n                    scope.propSeparation = scope.config.propSeparation;\r\n                    scope.scrollAlwaysTopOnload = (scope.config.scrollAlwaysTopOnload === undefined) ? false : scope.config.scrollAlwaysTopOnload;\r\n                    scope.scrollReload = scope.scrollAlwaysTopOnload ? false : true;\r\n                    scope.selectTypeOptionWith = scope.config.selectTypeOptionWith ? scope.config.selectTypeOptionWith : scope.selectTypeOptionWith;\r\n                    scope.searchFilterKey = scope.config.searchFilterKey; // added for filter on key basis\r\n                    scope.stopFilterOnKey = scope.config.stopFilterOnKey; // added for stop filtering on keydown\r\n                    scope.searchCount = scope.config.searchCount;\r\n                    scope.requireLoader = scope.config.requireLoader;\r\n                    if (scope.requireLoader == \"true\") {\r\n                        scope.showLoader = true;\r\n                    }\r\n                    scope.hideSelectedCount = scope.config.hideSelectedCount;\r\n                    scope.isObjectCompareCatalog = scope.config.isObjectCompareCatalog;\r\n                    scope.clearModelOnEnter = scope.config.clearModelOnEnter;\r\n                    initialize();\r\n                    scope.triggerFlag = true;\r\n                    scrollbarReload();\r\n                    $timeout(function () {\r\n                    element.find('.lookupPopupContent input[checked=\"checked\"]').prop('checked', true);            \r\n                });\r\n                    scope.$watch(function () {\r\n                        return lookup.config.config.options;\r\n                    },\r\n                    function (newVal, oldVal) {\r\n                        initialize();\r\n                        if (newVal.length > 0) {\r\n                            scope.showLoader = false;\r\n                        }\r\n\r\n                        if (newVal.length == 0 && scope.showSearchLoader == true) {\r\n                            scope.showLoader = false;\r\n                            scope.showSearchLoader = false;\r\n                        }\r\n                    }, true);\r\n                    returnObj.addnew = false;\r\n                    returnObj.result = scope.model;\r\n                    returnObj.btnType = '';\r\n                    returnObj.defaultSelectionText = scope.config.defaultSelectionText.trim(),\r\n                    returnObj.selectTypeOption = scope.config.selectTypeOption;\r\n                    returnObj.errorModel = scope.config.errorModel;\r\n                    scope.defaultError = false;\r\n\r\n                    if (scope.selectdCount == 0 && scope.$eval(scope.config.isMandatory))\r\n                    \tscope.itemSelected = false;\r\n                    else\r\n                        scope.itemSelected = true;\r\n\r\n                    scope.isLimitmultiselect = scope.minMultiselect ? scope.minMultiselect.event : false; scope.minMultiselect\r\n\r\n                });\r\n\r\n                scope.searchToggle = function () {\r\n                    if (scope.isSearchOpen == false) {\r\n                        scope.isSearchOpen = true;\r\n                        $timeout(function () {\r\n                            if ($(\"#searchTextbox\").find(\"input\").length) {\r\n                                $(\"#searchTextbox\").find(\"input\").focus();\r\n                            } else {\r\n                                $(\"#searchTextbox\").focus();\r\n                            }\r\n                        });\r\n                    }\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: { text: scope.searchText.title, type: \"search\" } });\r\n                    }\r\n                    scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                };\r\n                scope.closeSearch = function () {\r\n                    if (scope.searchText.title != \"\") {\r\n                        scope.searchText.title = \"\";\r\n                    } else {\r\n                        scope.isSearchOpen = false;\r\n                        $(\"#btnShowSearch\").focus();\r\n                    }\r\n                    if (scope.config.onKeyUp) {\r\n                        scope.config.onKeyUp({ $data: {text: scope.searchText.title, type : \"close\" } });\r\n                    }\r\n                    scope.cancelTitle = scope.searchText.title == \"\" ? $translate.instant('closeSearch') : $translate.instant('clearSearch'); \r\n                };\r\n\r\n            \t/*  triggers which default radio btn click */\r\n                scope.ondefaultSelectItem = function (obj) {\r\n                \tobj.ischecked = true;\r\n                \tscope.onChangeItem(obj);\r\n                \tscope.defaultError = false;\r\n                \tscope.config.errorModel = '';\r\n                };\r\n                var checkSelectedItems = function () {\r\n                    if (scope.selectdCount >= parseInt(scope.minMultiselect.value)) {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            if (!scope.options[i].ischecked) {\r\n                                scope.options[i].isdisable = true;\r\n                            } else {\r\n                                scope.options[i].isdisable = false;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            scope.options[i].isdisable = false;\r\n                        }\r\n                    }\r\n                }\r\n                scope.optionUnSelected = [];\r\n                scope.onChangeItem = function (obj) {\r\n                    if (scope.multiple) {\r\n                \t\tif (obj.ischecked) {\r\n                \t\t\tscope.selectdCount++;\r\n                \t\t} else {\r\n                \t\t    scope.selectdCount--;\r\n                \t\t    scope.optionUnSelected.push(obj);\r\n\r\n                \t\t    if (scope.$eval(scope.config.isDefaultMandatory) && obj[scope.propKey] === scope.config.defaultSelectionText) {\r\n                \t\t        scope.config.defaultSelectionText = ''\r\n                \t\t    }\r\n                \t\t}\r\n                \t\tif (scope.selectdCount == 0 && scope.$eval(scope.config.isMandatory)) {\r\n                \t\t\tscope.itemSelected = false;\r\n                \t\t\tscope.config.errorModel = $translate.instant(\"selectValueErrMsg\");\r\n                \t\t}\r\n                \t\telse {\r\n                \t\t\tscope.itemSelected = true;\r\n                \t\t\tscope.config.errorModel = '';\r\n                \t\t}\r\n                \t\tif (scope.minMultiselect && scope.minMultiselect.event) {\r\n                \t\t    checkSelectedItems();\r\n                \t\t}\r\n                \t} else {\r\n                \t\tscope.model = obj;\r\n                \t\tscope.itemSelected = true;\r\n                \t\tscope.config.errorModel = '';\r\n                \t\tinitialize();\r\n                \t}\r\n                };\r\n                \r\n                function cleanData() {\r\n                \tstopInit = true;\r\n                \tfor (var i = 0; i < scope.options.length; i++) {\r\n                \t\tdelete scope.options[i].ischecked;\r\n                \t\tdelete scope.options[i][scope.propKey];\r\n                \t}\r\n                \t$timeout(function () {\r\n                \t\tstopInit = false;\r\n                \t}, 500);\r\n                };\r\n                scope.defaultError = false;\r\n\r\n                scope.cancelButton = { title: $translate.instant(\"cancelBtn\") };\r\n                scope.doneButton = { title: $translate.instant(\"doneBtn\") };\r\n\r\n                scope.selectionCancel = function () {\r\n                    returnObj.btnType = 'cancel';\r\n                }\r\n                scope.selectionDone = function () {\r\n                    returnObj.UnSelectedResult = [];\r\n                \tif (!scope.itemSelected && scope.$eval(scope.config.isMandatory)) {\r\n                \t\treturn;\r\n                \t}\r\n                \tif (scope.$eval(scope.config.isDefaultMandatory) && scope.config.defaultSelectionText == '') {\r\n                \t\tscope.defaultError = true;\r\n                \t\tscope.config.errorModel = $translate.instant(\"markPaymentErrMsg\");\r\n                \t\treturn;\r\n                \t}\r\n                    if (scope.multiple) {\r\n                        var result = [];\r\n                        stopInit = true;\r\n                        for (var i = 0; i < scope.options.length; i++) {\r\n                            delete scope.options[i][scope.propKey];\r\n                            if (scope.options[i].ischecked) {\r\n                            \tdelete scope.options[i].ischecked;\r\n\r\n                            \t/*  Default Selection check point */\r\n                                if (scope.config.defaultSelectionText.trim() === scope.options[i].name) {\r\n                                \tresult.unshift(scope.options[i]);\r\n                                } else {\r\n                                \tresult.push(scope.options[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                        cleanData();\r\n                        $timeout(function () {\r\n                            stopInit = false;\r\n                        }, 500);\r\n                    }\r\n                    else {\r\n                        stopInit = true;\r\n                        delete scope.model.ischecked;\r\n                        delete scope.model[scope.propKey];\r\n                        result = scope.model;\r\n                        if (scope.config.selectTypeOption != null) {\r\n                            scope.config.selectTypeOption.selectiontext = scope.selectiontext.selectiontext;\r\n                        }\r\n                        cleanData();\r\n                        $timeout(function () {\r\n                            stopInit = false;\r\n                        }, 500)\r\n                    }\r\n\r\n                    returnObj.result = result;\r\n                    returnObj.UnSelectedResult = scope.optionUnSelected;\r\n                    scope.optionUnSelected = [];\r\n\r\n                    returnObj.btnType = 'save';\r\n                    returnObj.defaultSelectionText = scope.config.defaultSelectionText.trim();\r\n                    returnObj.selectTypeOption = scope.config.selectTypeOption;\r\n                    returnObj.errorModel = scope.config.errorModel;\r\n                    scope.callbackOnHide();\r\n                }\r\n                scope.addNew = function () {\r\n                    cleanData();\r\n                    returnObj.addnew = true;\r\n                    scope.triggerFlag = false;\r\n                    scrollbarReload();\r\n                }\r\n\r\n                //Popup hide/show flag\r\n                scope.callbackOnHide = function (e) {\r\n                    scope.triggerFlag = false;\r\n                    scrollbarReload();\r\n                    scope.searchText.title = \"\";\r\n                    if (scope.isLazyLoadingEnabled)\r\n                    scope.limitToCount = 35;\r\n                    scope.isSearchOpen = false;\r\n                    //cleanData() comment this and add in manually due to avoid timeout checkbox issue;\r\n                    stopInit = true;\r\n                    for (var i = 0; i < scope.options.length; i++) {\r\n                        delete scope.options[i].ischecked;\r\n                        delete scope.options[i][scope.propKey];\r\n                    }\r\n                    $timeout(function () {\r\n                        stopInit = false;\r\n                    });\r\n\r\n                    /*  Return Default Selection Object */\r\n                    lookup.resultCallBack(returnObj);\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartLookup/smartLookupTemplate.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    var multiSelectId = 0;\r\n    angular.module('SMART2').directive('smartMultiselect', ['$timeout', '$translate', 'RuleEngine', function ($timeout, $translate, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModel: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                onChange: '&',\r\n                onSelect: '&',\r\n                onBlur: '&',\r\n                disable: '@',\r\n                readonly: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                removable: '@',\r\n                autocomplete: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var options, filterKeys;\r\n                scope.defaultText = \"\";\r\n                var disableBlurEvent = true;\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.multiSelectId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    multiSelectId += multiSelectId;\r\n                    scope.multiSelectId = 'multiselect-' + multiSelectId;\r\n                }\r\n                scope.labelForMultiSelectId = 'label-for-' + scope.multiSelectId;\r\n                scope.displayformat = scope.displayformat ? scope.displayformat : '{title}';\r\n                var modelConfig = scope.$watch('ngModel', function (newValue) {\r\n                    if (newValue) {\r\n                         scope.selectedOptions = newValue;\r\n                    }\r\n                   \r\n                });\r\n\r\n                scope.multiSelectFocus = function () {\r\n                    if (!scope.$eval(scope.disable) && !scope.$eval(scope.readonly))\r\n                        $(\"#\" + scope.multiSelectId).focus();\r\n                };\r\n\r\n                scope.setDisplayFormat = function (item) {\r\n                    var displayArray = scope.displayformat.substring(1, scope.displayformat.length - 1);\r\n                    displayArray = displayArray.replace(/  +/g, ' ');\r\n                    var valu = \"\";\r\n                    var arrayD = displayArray.split('} {'), arrDLen = arrayD.length;\r\n                    for (var i = 0; i < arrDLen; i++) {\r\n                        valu += item[arrayD[i]] + \" \";\r\n                    }\r\n                    return valu;\r\n                }\r\n                var currentSelectForDelete = scope.ngModel.length;\r\n\r\n             \r\n                scope.ngKeyDown = function (event) {\r\n\r\n                    var evntKeyCode = event.keyCode;\r\n                    if (evntKeyCode === 40 && event.target.value == '') {\r\n                        event.stopImmediatePropagation();\r\n                    }\r\n                    if (scope.ngModel.length > 0) {\r\n                        if ((evntKeyCode === 8 || evntKeyCode === 46) && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete >= scope.ngModel.length) {\r\n                                currentSelectForDelete = scope.ngModel.length - 1;\r\n                                if ((scope.ngModel[currentSelectForDelete].selectForDelete) === false) {\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = true;\r\n                                    currentSelectForDelete = scope.ngModel.length - 1;\r\n                                }\r\n                                else {\r\n                                    scope.ngModel.splice(currentSelectForDelete, 1);\r\n                                     currentSelectForDelete = scope.ngModel.length;\r\n\r\n                                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                                    if (!isInvalidId) {\r\n                                        scope.invalidEmailId = false;\r\n                                        scope.validate = false;\r\n                                        scope.errorMessage = null;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if ((scope.ngModel[currentSelectForDelete].selectForDelete) === true) {\r\n                                scope.ngModel.splice(currentSelectForDelete, 1);\r\n                               \r\n                                currentSelectForDelete = scope.ngModel.length;\r\n                            }\r\n                        }\r\n                        else if (evntKeyCode === 37 && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete > 0) {\r\n                                scope.ngModel[currentSelectForDelete - 1].selectForDelete = true;\r\n\r\n                                if (currentSelectForDelete < scope.ngModel.length)\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n\r\n                                currentSelectForDelete--;\r\n                            }\r\n                        }\r\n                        else if (evntKeyCode === 39 && scope.defaultText == \"\") {\r\n                            if (currentSelectForDelete < scope.ngModel.length -1) {\r\n                                scope.ngModel[currentSelectForDelete + 1].selectForDelete = true;\r\n\r\n                                if (currentSelectForDelete >= 0)\r\n                                    scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n\r\n                                currentSelectForDelete++;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (currentSelectForDelete < scope.ngModel.length) {\r\n                                scope.ngModel[currentSelectForDelete].selectForDelete = false;\r\n                            } else {\r\n                                var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                                if (isInvalidId) {\r\n                                    scope.invalidEmailId = true;\r\n                                } else {\r\n                                    scope.invalidEmailId = false;\r\n                                    scope.validate = false;\r\n                                    scope.errorMessage = null;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        scope.invalidEmailId = false;\r\n                        scope.validate = false;\r\n                        scope.errorMessage = null;\r\n                    }\r\n                };\r\n\r\n                var checkEmailValidation = function (event, onBlur) {\r\n                    if (event.keyCode == 13 || event.keyCode == 9 || onBlur) {\r\n\r\n                        var currentTextValue = element.find('.multiselect-input').val().split(';'),\r\n                            pattern = /^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i;\r\n\r\n                        var filteredArray = [],\r\n                            invalidEmailArray = []; \r\n                        angular.forEach(currentTextValue, function (item) {\r\n                            if (item) filteredArray.push(item.trim());\r\n                        });\r\n                        var filteredLen = filteredArray.length;\r\n\r\n                        for (var i = 0; i < filteredLen; i++) {\r\n                            var filterdItem = filteredArray[i];\r\n                            if (filterdItem != '') {\r\n                                var currentItem = { UserName: filterdItem, value: filterdItem };\r\n                                if (!pattern.test(filterdItem)) {\r\n                                    currentItem.isInvalid = true;\r\n                                    scope.invalidEmailId = true;\r\n                                    invalidEmailArray.push(currentItem);\r\n                                } else {\r\n                                    currentItem.isInvalid = false;\r\n                                    scope.invalidEmailId = false;\r\n                                }\r\n\r\n                                if (!currentItem.isInvalid) {\r\n                                    scope.ngModel.push(currentItem);\r\n                                    scope.setDisplayFormat(currentItem);\r\n                                    scope.defaultText = \"\";\r\n                                  var timeout = $timeout(function () {\r\n                                        scope.onSelect({\r\n                                            $event: {\r\n                                                data: currentItem\r\n                                            }\r\n                                           \r\n                                        });\r\n                                        currentSelectForDelete = scope.ngModel.length;\r\n                                        scope.validateRules();\r\n                                        disableBlurEvent = true;\r\n                                        $timeout.cancel(timeout);\r\n                                        timeout = null;\r\n                                  });\r\n\r\n                                }\r\n                                else {\r\n                                    scope.validateRules();\r\n                                }\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        var result = invalidEmailArray.map(function (item) { return item.UserName; });\r\n                        scope.defaultText = result.join(';');\r\n                        if (result.length > 0)\r\n                            scope.invalidEmailId = true;\r\n                        scope.validateRules();\r\n                    }\r\n                };\r\n\r\n              \r\n                scope.ngKeyUp = function (event, onBlur) {\r\n                    checkEmailValidation(event, onBlur);\r\n                    var evtTrgt = $(event.target), defaultWidth = 250;\r\n                    var timeIntClear =$timeout(function () {\r\n                        if (event.keyCode == 13 && evtTrgt.parent('.multiselect-chip-wrap').find('.multiselect-input').val().length == 0) {\r\n                             evtTrgt.width(defaultWidth);\r\n                        } else {\r\n                            var ele = evtTrgt.parent('.multiselect-chip-wrap').find('.multiselect-input');\r\n                            if (ele.val().length >= 32) {\r\n                                defaultWidth = ele.val().length;\r\n                                evtTrgt.width(defaultWidth * 10);\r\n                            } else {\r\n                                \r\n                                evtTrgt.width(defaultWidth);\r\n                            }\r\n                        }\r\n\r\n                        $timeout.cancel(timeIntClear);\r\n                        timeIntClear = null;\r\n                    });\r\n                };\r\n\r\n\r\n                scope.deleteSelected = function (elementIndex) {\r\n                    disableBlurEvent = false;\r\n                    scope.ngModel.splice(elementIndex, 1);                   \r\n                    $(\"#\" + scope.multiSelectId).focus();\r\n                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                    if (scope.ngModel.length === 0 || !isInvalidId) {\r\n                        scope.invalidEmailId = false;\r\n                        scope.validate = false;\r\n                        scope.errorMessage = null;\r\n                        return;\r\n                    }\r\n                };\r\n\r\n                var onvalidateConfig = scope.$watch('validate', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                scope.ngChange = function (e) {\r\n                    scope.onChange({\r\n                        $event: {\r\n                            data: angular.element('#' + scope.multiSelectId)\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scope.ngBlur = function (e) {\r\n                    function checkChipIsDeleted() {\r\n                        if (disableBlurEvent) {\r\n                            scope.ngKeyUp(e, true);\r\n                        }\r\n                        disableBlurEvent = true;\r\n                        $timeout.cancel(toutPromise);\r\n                        toutPromise = null;\r\n                    }\r\n                    //Timeout is being added to differentiate between blur and delete chip click event.  \r\n                    var toutPromise = $timeout(checkChipIsDeleted, 200);\r\n                    scope.onBlur({ $event: e });\r\n                };\r\n\r\n                scope.validateRules = function () {\r\n                    if (scope.readonly == 'true') {\r\n                        return;\r\n                    }\r\n\r\n                    var isInvalidId = _.find(scope.ngModel, { \"isInvalid\": true });\r\n                    if (scope.invalidEmailId || isInvalidId) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"invalidEmailErrMsg\");\r\n                        return;\r\n                    }\r\n\r\n                    if (scope.$eval(scope.isMandatory) && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined)) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                        return;\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false, rulesLen = rules.length;\r\n\r\n                        for (var i = 0; i < rulesLen; i++) {\r\n                            var rulesItem = rules[i];\r\n                            if (typeof rulesItem == 'object') {\r\n                                if (eval((rulesItem.rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rulesItem.error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    if (typeof scope.ngModel != 'object')\r\n                                        var data = scope.ngModel;\r\n                                    else\r\n                                        var data = scope.displayModel;\r\n\r\n                                    RuleEngine.isValid(rulesItem, function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    }, data);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                    filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                }\r\n                else {\r\n                    filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                }\r\n                var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n                var displayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n                function getFormattedData(data) {\r\n                    var dataLen = data.length;\r\n                    if (!data || dataLen == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < dataLen; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{'), parentSplitLen = parentSplit.length;\r\n                            for (var j = 0; j < parentSplitLen; j++) {\r\n                                var childSplit = parentSplit[j].split('}'), childSplitLen = childSplit.length;\r\n                                for (var k = 0; k < childSplitLen; k++) {\r\n                                    var childItem = childSplit[k];\r\n                                    if (childItem.indexOf('.') > 0 || data[i].hasOwnProperty(childItem)) {\r\n                                        str = str.replace(new RegExp(\"{\" + childItem + \"}\", \"ig\"), eval('data[i].' + childItem));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n           var optionsConfig =  scope.$watch('options', function (newOptions) {\r\n                    var selector = $('#' + scope.multiSelectId);\r\n                    try {\r\n                        if (!selector.devbridgeAutocomplete()) {\r\n                            selector.devbridgeAutocomplete({\r\n                                filterKeys: filterKeys,\r\n                                optionFormat: optionFormat,\r\n                                displayFormat: displayFormat,\r\n                                lookup: getFormattedData(newOptions),\r\n                                width: scope.width,\r\n                                onSelect: function (suggestion) {\r\n\r\n                                    scope.$evalAsync(function () {\r\n                                        scope.ngModel.push(suggestion);\r\n                                    });\r\n                                    $(this).focus();\r\n                                    scope.defaultText = \"\";\r\n                                    var interval = $timeout(function () {\r\n                                        scope.defaultText = \"\";\r\n                                        scope.onSelect({\r\n                                            $event: {\r\n                                                data: suggestion\r\n                                            }\r\n                                        });\r\n                                        currentSelectForDelete = scope.ngModel.length;\r\n                                        scope.validateRules();\r\n                                        $timeout.cancel(interval);\r\n                                        interval = null;\r\n                                    });\r\n                                    angular.element('.autocomplete-suggestions').hide();\r\n\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            selector.devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                });\r\n\r\n                /*\r\n\t\t\t\t * Destroy autocomplete on scope destroy\r\n\t\t\t\t */\r\n                scope.$on('$destroy', function () {\r\n                    if ($('#' + scope.multiSelectId).devbridgeAutocomplete()) {\r\n                        $('#' + scope.multiSelectId).devbridgeAutocomplete().dispose();\r\n                    }\r\n                    modelConfig();\r\n                    onvalidateConfig();\r\n                    optionsConfig();\r\n                });\r\n\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartMultiselect/smartMultiselectTemplate.html'\r\n        }\r\n    }]\r\n\t)\r\n})();\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Popup\r\n * @description This directive is useful for creating a popup.\r\n * \r\n * @attr {String} template-url\r\n *    Template url that is expected to appear as popup contents\r\n * @attr {Boolean} show\r\n *    Popup will toggle as soon as value of this attribute changes\r\n * @attr {String} modal-type\r\n *    Modal type. Possible values are 'large' or 'small'.\r\n * @attr {Boolean} dismissible\r\n *   If set to true, popup will not hide when clicked outside. Default value is true.\r\n * @attr {Function} on-hide\r\n *    Callback function when popup hides\r\n * \r\n * @example\r\n Controller:\r\n $scope.showPopup = false;\r\n $scope.onPopupHide = function() {\r\n      $scope.showPopup = false;\r\n };\r\nUsage:\r\n <smart-popup template-url=\"abc.html\" show=\"{{showPopup}}\" on-hide=\"onPopupHide()\"></smart-popup>\r\n <button ng-click=\"showPopup=true\">Click here</button>\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartPopup', ['$rootScope', '$parse', '$timeout', '$smartModal', '$focusOnField', function ($rootScope, $parse, $timeout, $smartModal, $focusOnField) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: true,\r\n            controller: [\"$controller\", \"$scope\", \"$attrs\", \"$scoper\", function ($controller, $scope, $attrs, $scoper) {\r\n                var _scope = $scope,\r\n                    ctrl,\r\n                popupConfig = $scoper.getScope(_scope, $attrs.popupConfig);\r\n\r\n                if (popupConfig) {\r\n                    if (popupConfig.controller) {\r\n                        var launchObj = {\r\n                            $scope: _scope\r\n                        };\r\n                        if (popupConfig.resolve) {\r\n                            var val;\r\n                            angular.forEach(popupConfig.resolve, function (value, key) {\r\n                                if (typeof value == \"function\") {\r\n                                    val = value();\r\n                                } else {\r\n                                    val = value;\r\n                                }\r\n                                this[key] = val;\r\n                            }, launchObj);\r\n                        }\r\n                        ctrl = $controller(popupConfig.controller, launchObj);\r\n                        ctrl.$$smartModal = true;\r\n                    }\r\n                } else {\r\n                    ctrl = _scope;\r\n                };\r\n                return ctrl;\r\n            }],\r\n            link: function (scope, element, attrs, controller) {\r\n\r\n                var onHide = $parse(attrs.onHide),\r\n                    triggeredElement;\r\n                // Callback for complete popup close i.e this callback executes after popup animation over.\r\n                if (attrs.afterCompleteClosePopup) {\r\n                    var afterCompleteClosePopup = $parse(attrs.afterCompleteClosePopup);\r\n                }\r\n\r\n                var topPositionBeforeModalOpen = 0;\r\n\r\n                scope.isCancelButton = (attrs.cancelButton) ? scope.$eval(attrs.cancelButton) : false;\r\n\r\n                scope.headerUrl = attrs.headerUrl;\r\n                scope.contentUrl = attrs.contentUrl;\r\n                scope.footerUrl = attrs.footerUrl;\r\n                scope.templateUrl = attrs.templateUrl;\r\n                scope.modalType = attrs.type;\r\n                scope.isDraggable = attrs.isDraggable;\r\n\r\n                //Cleaning floating elements on drag\r\n                function cleanFloatingElements() {\r\n                    element.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                        var autoComplete = $(this).data().autocomplete;\r\n                        if (autoComplete && autoComplete.visible) {\r\n                            autoComplete.hide();\r\n                        }\r\n                    });\r\n                }\r\n                //End of cleaning floating elements on drag\r\n\r\n                if (scope.isDraggable) {\r\n                    angular.element(element).draggable({\r\n                        start: function () {\r\n                            cleanFloatingElements();\r\n                        },\r\n                        containment: \".is-popup-Draggable\"\r\n                    });\r\n                };\r\n\r\n                var tOut;\r\n                attrs.$observe('expandCollapse', function (value) {\r\n                    scope.expandCollapse = value;\r\n                    tOut = setTimeout(function () {\r\n\r\n                        angular.element(scope.expandCollapse).click(function () {\r\n                            var expandCollapse = angular.element(scope.expandCollapse),\r\n                                $modal = expandCollapse.closest('.modal'),\r\n                                $modalHeader = expandCollapse.closest('.modal .modal-header'),\r\n                                $leanOverlay = expandCollapse.parents('body').find('.lean-overlay');\r\n                            $modal.addClass('expand-css-trans');\r\n                            var innerTout1 = setTimeout(function () {\r\n                                $modalHeader.toggleClass('extra-nav-wrap expand-header expand-css-trans');\r\n                                clearTimeout(innerTout1);\r\n                                innerTout1 = null;\r\n                            }, 500);\r\n\r\n                            var innerTout2 = setTimeout(function () {\r\n                                $modal.removeClass('expand-css-trans');\r\n                                clearTimeout(innerTout2);\r\n                                innerTout2 = null;\r\n                            }, 200);\r\n\r\n                            $modal.toggleClass('expand-css');\r\n                            expandCollapse.parent('.modal-header').next().next('.modal-footer_new').find('.modal-close').click(function () {\r\n                                $modal.removeClass('expand-css');\r\n                                $modalHeader.removeClass('extra-nav-wrap expand-header expand-css-trans');\r\n                                $leanOverlay.css('display', 'block');\r\n                            });\r\n                            if ($modal.hasClass('expand-css')) {\r\n                                $leanOverlay.css('display', 'none');\r\n                                $modal.css('border-radius', '0');\r\n                            }\r\n                            else {\r\n                                $leanOverlay.css('display', 'block');\r\n                            }\r\n                        });\r\n                    }, 1000);\r\n                });\r\n\r\n\r\n                /*\r\n                 *  Unbind window keyup listener and assign tabindex back to .picker elements\r\n                 */\r\n                var reset = function () {\r\n                  //  $(window).off('keyup', onWindowKeyUp);\r\n                    angular.element('.picker').attr(\"tabindex\", 0);\r\n                    //COMMENTED: TWO-5672 impact   angular.element(document).scrollTop(topPositionBeforeModalOpen);\r\n                };\r\n\r\n\r\n                /*\r\n                 *  window on key up event listener\r\n                 */\r\n                //var onWindowKeyUp = function (e) {\r\n                //    if (angular.element(e.target).closest('.modal').length == 0 && e.keyCode == 9) {\r\n                //        angular.element(element.find(':focusable')[0]).focus();\r\n                //    }\r\n                //};\r\n\r\n\r\n                /*\r\n                 * Show pop up\r\n                 */\r\n                var $popup, onShow = attrs.$observe('show', function (value) {\r\n                    if (angular.isDefined(value)) {\r\n                        if (scope.$eval(value)) {\r\n                            triggeredElement = document.activeElement;\r\n                            angular.element(triggeredElement).addClass('currentPopupTriggerer');\r\n                            topPositionBeforeModalOpen = angular.element(document).scrollTop();\r\n                            angular.element(element).openModal({\r\n                                dismissible: scope.$eval(attrs.dismissible),\r\n                                beforeOpen: function () {\r\n                                    $popup = angular.element(element).data();\r\n                                    if (scope.isDraggable) {\r\n                                        angular.element('body').addClass('is-popup-Draggable');\r\n                                    }\r\n                                },\r\n                                complete: function () {\r\n                                    if (angular.isFunction(onHide)) {\r\n                                        scope.$apply(function () {\r\n                                            onHide(scope, { e: \"\" });\r\n                                        });\r\n                                    }\r\n                                    reset();\r\n\r\n                                    //  Check if popup is opened by uigrid-compatible element\r\n                                    if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                        //  Following event is listened inside uigrid-compatible dir\r\n                                        $rootScope.$emit(\"popupClosed\");\r\n                                        window.isPopupOpenedByUIGridCompatibleElement = undefined;\r\n                                    }\r\n\r\n                                    if (element.hasClass(\"noTransform\")) {\r\n                                        var toutpromise = setTimeout(function () {\r\n                                            element.css('top', 0).removeClass('noTransform');\r\n                                            clearTimeout(toutpromise);\r\n                                            toutpromise = null;\r\n                                        }, 100);\r\n                                    }\r\n                                },\r\n                                ready: function () {\r\n                                    //  Check if popup is opened by uigrid-compatible element\r\n                                    if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                        $rootScope.$emit(\"popupOpened\");\r\n                                    }\r\n                                    var cancelTOut = $timeout(function () {\r\n                                        if (scope.isDraggable) {\r\n                                            var $body = angular.element('body'),\r\n                                                $modalUiDragable = angular.element('.modal.ui-draggable');\r\n                                            var bodyHeight = $body.height() / 2,\r\n                                             modalHeight = $modalUiDragable.height() / 2,\r\n                                            bodyWidth = $body.width() / 2,\r\n                                            modalWidth = $modalUiDragable.width() / 2;\r\n\r\n                                            $(element).css({ 'position': \"absolute\", 'top': (bodyHeight - modalHeight) / 2, 'margin': 0, 'left': (bodyWidth - modalWidth) });\r\n                                        }\r\n                                        else {\r\n                                            var t = window.innerHeight / 2 - element.outerHeight() / 2;\r\n                                            element.css('top', t);\r\n                                        };\r\n                                        $(element).addClass('noTransform');\r\n\r\n                                        //Auto focus first feild / manage tab index\r\n\r\n                                      //  $(window).on('keyup', onWindowKeyUp);\r\n\r\n                                        //Remove picker tabindex when popup to avoid focus on picker element\r\n                                        angular.element('.picker').removeAttr(\"tabindex\");\r\n                                        $timeout.cancel(cancelTOut);\r\n                                        cancelTOut = null;\r\n                                    });\r\n                                    $timeout(function () {\r\n                                        var $firstField = element.find(\"a, input[type=text],input[type=radio]:checked,input[type=checkbox], button, textarea, [tabindex='0']\").not(\":disabled, :hidden, [tabindex = -1]\").first();\r\n                                        $focusOnField($firstField);\r\n                                    }, 600);\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            var el = angular.element(element),\r\n                                isPopupInit = el.data(\"overlay-id\") === undefined ? false : true;\r\n\r\n                            // isPopupInit variable is used  to check whether popup is initiated or not.\r\n                            if (isPopupInit) {\r\n                                el.closeModal({\r\n                                    complete: function () {\r\n                                        if (attrs.afterCompleteClosePopup)\r\n                                            afterCompleteClosePopup(scope, {});\r\n\r\n                                        if (scope.isDraggable) {\r\n                                            angular.element('body').removeClass('is-popup-Draggable');\r\n                                        }\r\n                                        if (controller.$$smartModal === true) {\r\n                                            $smartModal.destroyModal({ $view: el, $scope: scope });\r\n                                        }\r\n                                        angular.element(\".currentPopupTriggerer\").focus().removeClass('currentPopupTriggerer');\r\n                                        triggeredElement = null;\r\n                                    }\r\n                                });\r\n\r\n                                if (element.hasClass(\"noTransform\")) {\r\n                                    var tOutTemp = setTimeout(function () {\r\n                                        element.css('top', 0).removeClass('noTransform');\r\n                                        clearTimeout(tOutTemp);\r\n                                        tOutTemp = null;\r\n                                    }, 100);\r\n                                }\r\n                            }\r\n                            //  remove the listener and add tabindex back on picker\r\n                            reset();\r\n\r\n                            //  Check if popup is opened by uigrid-compatible element\r\n                            if (window.isPopupOpenedByUIGridCompatibleElement) {\r\n                                //  Following event is listened inside uigrid-compatible dir\r\n                                $rootScope.$emit(\"popupClosed\");\r\n                                window.isPopupOpenedByUIGridCompatibleElement = undefined;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onShow();\r\n                    reset();\r\n                    if ($popup) {\r\n                        $($popup.associatedOverlay).remove();\r\n                        $smartModal.destroyModal({ $view: element });\r\n                    }\r\n                    clearTimeout(tOut);\r\n                    tOut = null;\r\n                    angular.element(scope.expandCollapse).off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartPopUp/smartPopUpTemplate.html'\r\n        };\r\n    }])\r\n    .factory(\"$scoper\", function () {\r\n        return {\r\n            getScope: function (scope, deep) {\r\n                if (deep) {\r\n                    var a, b = deep.split(\".\");\r\n                    var bLength = b.length;\r\n                    if (bLength > 1) {\r\n                        a = scope;\r\n                        for (var i = 0; i < bLength; i++) {\r\n                            var sortCn = b[i].match(/(\\[\\d+\\])+$/);\r\n                            if (sortCn && sortCn.length > 0) {\r\n                                var subScope = b[i].substr(0, b[i].indexOf('['));\r\n                                a = a[subScope];\r\n                                sortCn = sortCn[0].replace(/\\]\\[/g, ',').replace(/[\\[\\]]/g, '').split(\",\");\r\n                                for (var j = 0; j < sortCn.length; j++) {\r\n                                    a = a[sortCn[j]];\r\n                                }\r\n                            } else {\r\n                                a = a[b[i]];\r\n                            };\r\n                        }\r\n                    } else {\r\n                        a = scope[deep];\r\n                    }\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n    })\r\n    .service(\"$smartModal\", [\"$timeout\", \"$compile\", function ($timeout, $compile) {\r\n        var _this = this;\r\n\r\n        _this.open = function (config) {\r\n            _this.initModal(config);\r\n        }\r\n\r\n        _this.initModal = function (config) {\r\n            var attrs = [\r\n                \"show='{{\" + (config.show || \"\") + \"}}'\",\r\n                \"popup-config='\" + (config.$config || \"\") + \"'\",\r\n                \"on-hide='\" + (config.onHide || \"\") + \"'\",\r\n                \"after-complete-close-popup='{{\" + (config.afterCompleteClosePopup || \"\") + \"}}'\",\r\n                \"cancel-button='\" + (config.cancelButton || \"\") + \"'\",\r\n                \"template-url='\" + (config.templateUrl || \"\") + \"'\",\r\n                \"header-url='\" + (config.headerUrl || \"\") + \"'\",\r\n                \"content-url='\" + (config.contentUrl || \"\") + \"'\",\r\n                \"footer-url='\" + (config.footerUrl || \"\") + \"'\",\r\n                \"type='\" + (config.type || \"\") + \"'\",\r\n                \"is-draggable='\" + (config.isDraggable || \"\") + \"'\",\r\n                \"expand-collapse='\" + (config.expandCollapse || \"\") + \"'\",\r\n                \"dismissible='\" + (config.dismissible || \"\") + \"'\",\r\n                \"class='\" + (config.class || \"\") + \"'\"\r\n            ]\r\n                , smartpopDir = '<smart-popup ' + attrs.join(\" \") + '> </smart-popup>';\r\n\r\n            var popup = $compile(smartpopDir)(config.$scope);\r\n            popup.appendTo(\"body\");\r\n        }\r\n\r\n        _this.destroyModal = function (modal) { // this method invoke automatically once popup goes hide and also executed on scope $destroy.\r\n            modal.$view && modal.$view.remove();\r\n            modal.$scope && modal.$scope.$destroy();\r\n        }\r\n    }]);\r\n})();\n/**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Radio\n   * @description This directive is useful for creating a radio button or a group of radio buttons.\n   * \n   * @attr {String} label\n   *    Label to be displayed for identification of this ui element\n   * @attr {Array} options\n   *    Number of radio buttons to be created. Only one option can be selected at a time.\n   * @attr {Object} ng-model\n   *    Default selected option. This is expected to be one of the 'options'.\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\n   * @attr {String} datakey\n   *    A property of an option to be used to display the label for option. Default value is 'title'.\n   * @attr {String} layout\n   *    'vertical' or 'horizontal' layout\n   * @attr {Boolean} validate\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\n   * @attr {Array} rules \n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\n   * @attr {String} error-message \n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\n   * @attr {Boolean} is-mandatory \n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\n   * @attr {Boolean} is-visible \n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\n   * @attr {Number} colspan\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\n   *    Default value is 1.\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\n   * @attr {Function} on-change\n   *    Callback function when any of the buttons from radio group is selected\n   * @type cool\n   * \n   * @example\n   Dynamic:\n   Controller:\n       $scope.config = {\n            \"modelData\": {\n                \"currency\": { \"code\": \"€\", \"name\": \"EUR\" }\n            }, \n            \"formConfig\": {\n                \"sections\": [\n                    {\n                        \"isMandatory\": true,\n                        \"rows\": [\n                            {\n                                \"properties\": [\n                                    {\n                                        \"label\": \"Currency\",\n                                        \"type\": \"radio\",\n                                        \"isMandatory\": true,\n                                        \"data\": \"currency\",\n                                        \"colspan\": 1,\n                                        \"onChange\": \"onChange\",  //  controller function\n                                        \"attributes\": {\n                                            \"options\": [{\n                                                \"code\": \"$\",\n                                                \"name\": \"USD\"\n                                            }, {\n                                                \"code\": \"€\",\n                                                \"name\": \"EUR\"\n                                            }],\n                                            \"datakey\": \"name\"\n                                        },\n                                        \"rules\": [\n                                            { \n                                                \"rule\": \"this.title == \\\"Option 2\\\"\", \n                                                \"error\": \"Invalid selection\" \n                                            }\n                                        ]\n                                    }\n                                ]    \n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n    Usage:\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\n   \n   * @example\n   Static:\n   Controller:\n       $scope.currencyOptions = [{\n            \"code\": \"$\",\n            \"name\": \"USD\"\n       }, {\n           \"code\": \"€\",\n           \"name\": \"EUR\"\n       }];\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\n       $scope.onChange = function(selectedCurrency) {\n           console.log(selectedCurrency);\n       };\n   Usage:\n       <smart-radio label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-radio> \n\n   * @example\n   Radio with disabled option:\n   Controller:\n       $scope.currencyOptions = [{\n            \"code\": \"$\",\n            \"name\": \"USD\",\n            \"disable\": true\n       }, {\n           \"code\": \"€\",\n           \"name\": \"EUR\"\n       }];\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\n   Usage:\n       <smart-radio label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\"></smart-radio> \n   */\n\n(function () {\r\n    'use strict';\n    var radioGroupId = 0;\n\n    angular.module('SMART2').directive('smartRadio', ['$timeout', '$translate', 'ScrollTo', 'RuleEngine', function ($timeout, $translate, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\n            replace: true,\n            require: '?ngModel',\n            scope: {\r\n                label: '@',\n                options: '=?',\n                ngModelCopy: '=?ngModel',\n                isMandatory: '@',\n                isVisible: '=?',\n                layout: '@',\n                rules: '@',\n                validate: '=?',\n                focus: '=?',\n                parentElement: '@',\n                errorMessage: '@',\n                onChange: '&',\n                removable: '@',\n                datakey: '@',\n                optionId: '@',\n                groupId: '@'\r\n            },\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\n\n                var isNgModelFunction = typeof scope.ngModelCopy == 'function';\n\n                // key to be used to bind options\n                scope.dataKey = scope.datakey ? scope.datakey : 'title';\n\n                //uniqueID\n                radioGroupId = radioGroupId + 1;\n                scope.radioGrouptId = (attrs.groupId) ? attrs.groupId : \"radio-group-\" + radioGroupId;\n\n                if (typeof attrs.optionId != \"undefined\") {\r\n                    scope.optionId = attrs.optionId;\r\n                }\n\n                //check is gap\n                scope.isGap = (attrs.gap) ? scope.$eval(attrs.gap) : false;\n\n                scope.layout = scope.layout ? scope.layout : 'horizontal';\n\n\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                if (isNgModelFunction) {\r\n                    try {\r\n                        ngModelCtrl.$render = function () {\r\n                            scope.ngModel = ngModelCtrl.$modelValue;\r\n                            scope.selectedOption = scope.ngModel;\r\n                        };\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                var updateView = function () {\r\n                    if (isNgModelFunction) {\r\n                        try {\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\n\n\n                /*\n                 * Focus field when focus is set to true\n                 */\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\n                        scope.focus = false;\r\n                    }\r\n                });\n\n                /*\n                 * Validate field whene validate is set to true\n                 */\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\n\n                /*\n                 * Watch needs to be added on ngModel\n                 */\n                var onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                    scope.selectedOption = newVal;\r\n                }, true);\n\n                /*\n                 * Validate rules\n                 */\n                scope.validateRules = function () {\r\n                    if (scope.$eval(scope.isMandatory) && (isNgModelFunction && (scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) || (!isNgModelFunction && (scope.ngModelCopy === '' || scope.ngModelCopy === undefined || scope.ngModelCopy === null))) {\r\n                        scope.validate = true;\n                        scope.errorMessage = $translate.instant('selectOptionErrMsg');\n                        return;\r\n                    }\n\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\n\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\n                            ruleLen = rules.length;\n\n                        for (var i = 0; i < ruleLen; i++) {\r\n                            var ruleT = rules[i]; // temp hold\r\n                            if (typeof ruleT == 'object') {\r\n                                if (eval((ruleT.rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                    scope.validate = true;\n                                    scope.errorMessage = ruleT.error;\n                                    break;\r\n                                }\r\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(ruleT, function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\n\n                scope.ngChange = function (selectedOption) {\r\n                    // Commented below code for fixing TWO-2748\r\n                    //if (!scope.$eval(scope.isMandatory) && angular.isDefined(scope.selectedOption) && scope.selectedOption[scope.dataKey] == selectedOption[scope.dataKey]) {\r\n                    //    scope.selectedOption = '';\r\n                    //}\r\n                    //else {\r\n                    //    scope.selectedOption = selectedOption;\r\n                    //}\r\n\r\n                    // Added below code for fixing TWO-2748\r\n                    scope.selectedOption = selectedOption;\r\n\r\n                    if (!scope.groupId) {\r\n                        if (isNgModelFunction) {\r\n                            scope.ngModel = scope.selectedOption;\r\n                        }\r\n                        else {\r\n                            scope.ngModelCopy = scope.selectedOption;\r\n                        }\r\n                    }\n                    updateView();\n                    scope.validateRules();\n                    var toutPromise = $timeout(function () {\r\n                        scope.onChange();\r\n                        $timeout.cancel(toutPromise); // cancel the timeout promise to avoid any leakage.\r\n                    });\r\n                };\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                    onNgModel();\r\n                    element.remove();\r\n                    scope = null;\r\n                });\r\n            },\n            templateUrl: 'shared/directives/uiElements/smartRadio/smartRadioTemplate.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    /**\r\n     * @memberof SMART2\r\n     * @ngdoc directive\r\n     * @name Widget Error Field \r\n     * @description This directive is useful for displaying total error field in widget form\r\n     * \r\n     * @attr {Object} showerrorsPanel: scope variable, that need to be declared in the controller.\r\n     *    \r\n     * @attr {String} customfieldsSelector: customfields-selector=\".linkError, .red-text\"\r\n     *    class and id can be passed \r\n     *    \r\n     * @attr {String} frmWidgetId: frm-widget-id=\"formWidgetUniqueIdTest1\"\r\n     *    widget Id need to be specified here.\r\n     *\r\n     * @example\r\n     Dynamic:\r\n     Controller:\r\n         $scope.onErrorFound = {\r\n            \"error\": false, // change value for triggering the error count.\r\n            \"isWarningHeader\": false, // set true for displaying the error band.\r\n            \"noMoreErrors\": false // \r\n        };\r\n\r\n      Usage:\r\n         <smart-read-errors showerrors-panel=\"onErrorFound\" customfields-selector=\".linkError\" frm-widget-id=\"formWidgetUniqueIdTest1\" class=\"bandcontainer clearfix\"></smart-read-errors>\r\n     * \r\n     */\r\n\r\n    'use strict';\r\n    angular.module('SMART2')\r\n    .directive('smartReadErrors', function ($rootScope, $compile, $timeout) {\r\n        return {\r\n            restrict: 'EA',\r\n            templateUrl: 'shared/directives/uiElements/smartReadErrors/smartReadErrorsTemplate.html',\r\n            replace: true,\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n                scope.counter = 0;\r\n                scope.emptyText = \"\";\r\n                scope.leftLabelText = \"Show only error field\";\r\n                var invalids = [],\r\n                    count = 0,\r\n                    currentManualFocus = '',\r\n                    isManualFocus = true,\r\n                    topMinus = 300,\r\n                    timeoutPeriod = 300,\r\n                    fieldsSelector = \"input.invalid, .invalid input, textarea.invalid\";\r\n\r\n                fieldsSelector += attrs.customfieldsSelector ? \", \" + attrs.customfieldsSelector : \"\";\r\n                scope.onErrorFound = scope[attrs.showerrorsPanel];\r\n                scope.nextDisable = false;\r\n                scope.prevDisable = false;\r\n                var formWidgetId = attrs.frmWidgetId;\r\n                var onblurEvent = function () {\r\n                    $timeout(function () {\r\n                        invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                        var invLen = invalids.length - 1;\r\n                        if (scope.counter != invLen) {\r\n                            count--;\r\n\r\n                            if (count < 0) {\r\n                                count = (scope.counter - invLen) < 0 ? 0 : invLen;\r\n                            }\r\n                            scope.counter = invLen;\r\n                        }\r\n                        if (invLen === 0) {\r\n                            $timeout(function () {\r\n                                scope.onErrorFound.isWarningHeader = false; // close the yellow bar\r\n                            }, 3000);\r\n\r\n                        }\r\n                        isManualFocus = true;\r\n                        //scope.counter = invLen;\r\n                    }, timeoutPeriod);\r\n                };\r\n\r\n\r\n                // To set focus on \r\n                function focusElem(a_indx) {\r\n                    var top,\r\n                        timeoutPeriodTemp = 0,\r\n                        $invalidDom = invalids.eq(a_indx);\r\n\r\n                    if (!$invalidDom.closest('.collapsible-body').hasClass('displayBlock')) {\r\n                        $invalidDom.closest('.collapsible-container').find('.collapsible-header').trigger('click');\r\n                        timeoutPeriodTemp = 350;\r\n                    }\r\n\r\n                    $timeout(function () {\r\n                        top = $invalidDom.offset().top - $('#subheaderwrapper').height();\r\n                        //if (top > 300) {\r\n                        $(window).scrollTop(top - 40);\r\n                        //}\r\n                        if ($invalidDom.is(\"span\")) {\r\n                            $invalidDom.closest('div').find('button, [href], input, select, textarea')[0].focus();\r\n                        } else {\r\n                            if ($invalidDom.closest('span').length) {\r\n                                $invalidDom.closest('span').find('.dropdown-button').focus();\r\n                            } else {\r\n\r\n                                $invalidDom.focus();\r\n                            }\r\n                        }\r\n                        scope.nextDisable = false;\r\n                        scope.prevDisable = false;\r\n                    }, timeoutPeriodTemp + timeoutPeriod);\r\n\r\n                }\r\n                // On focus to maintain the counter\r\n                var onFocusEvent = function (e) {\r\n                    if (isManualFocus) {\r\n                        invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                        currentManualFocus = $(this);\r\n                        var currInd = invalids.index(currentManualFocus);\r\n                        count = currInd >= 0 ? currInd : count;\r\n                    }\r\n                }\r\n\r\n                // Needed for tabbing navigation using tab key\r\n\r\n                //var onKeyPressEvent = function (e) {\r\n                //    var char = e.which || e.keyCode;\r\n                //    if (scope.onErrorFound.isTabSwitch && char === 9) {\r\n\r\n                //        e.preventDefault();\r\n\r\n                //        if (e.shiftKey) {\r\n                //            scope.prev()\r\n                //        } else {\r\n                //            scope.next()\r\n                //        }\r\n                //    }\r\n                //};\r\n\r\n                //$(window).keydown(function (e) {\r\n\r\n                //    onKeyPressEvent(e);\r\n                //});\r\n\r\n                scope.closeErrorHeader = function () {\r\n                    scope.onErrorFound.isWarningHeader = !scope.onErrorFound.isWarningHeader;\r\n                }\r\n\r\n                var watchSaveClick = scope.$watch('onErrorFound.error', function (newValue, oldValue) {\r\n\r\n                    if (newValue !== oldValue) {\r\n                        $timeout(function () {\r\n                            invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                            if (invalids.length > 0) {\r\n                                scope.onErrorFound.noMoreErrors = false;\r\n                                scope.onErrorFound.isWarningHeader = true;\r\n                                invalids.blur(onblurEvent).focus(onFocusEvent)\r\n                                scope.counter = invalids.length - 1;\r\n                                focusElem(0);\r\n                                isManualFocus = false; // No user manual focus\r\n                            } else {\r\n                                scope.onErrorFound.noMoreErrors = true;\r\n                                //scope.onErrorFound.isWarningHeader = '';\r\n                                //scope.onErrorFound.isWarningHeader = false;\r\n                            }\r\n                        }, 1000);\r\n\r\n                    }\r\n\r\n                });\r\n                scope.next = function () {\r\n                    scope.nextDisable = true;\r\n                    scope.prevDisable = true;\r\n                    isManualFocus = true;\r\n                    invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                    var invLen = invalids.length - 1;\r\n\r\n                    if (count < invLen) {\r\n                        isManualFocus = false;\r\n                        focusElem(count + 1);\r\n                        if (scope.counter === invLen) {\r\n                            count++;\r\n                        }\r\n                    } else {\r\n                        isManualFocus = false;\r\n                        count = 0;\r\n                        focusElem(count);\r\n                    };\r\n                    //scope.counter = invLen;\r\n                };\r\n\r\n                scope.prev = function () {\r\n                    scope.nextDisable = true;\r\n                    scope.prevDisable = true;\r\n                    isManualFocus = true;\r\n                    invalids = $('#' + formWidgetId).find(fieldsSelector);\r\n                    var newLen = invalids.length - 1;\r\n                    if (count > 0) {\r\n                        isManualFocus = false;\r\n                        focusElem(count - 1);\r\n                        if (scope.counter === newLen) {\r\n                            count--;\r\n                        }\r\n                    } else {\r\n                        isManualFocus = false;\r\n                        focusElem(newLen);\r\n                        count = newLen;\r\n                    };\r\n                    //scope.counter = newLen;\r\n                };\r\n\r\n                // Destroy event\r\n                scope.$on('$destroy', function () {\r\n                    watchSaveClick(); // Deregister\r\n                    invalids.unbind(); // unbind all events\r\n                    invalids = [];\r\n                    scope = {}; // nullify the scope\r\n                });\r\n\r\n            }\r\n        }\r\n    })\r\n})(angular);\n//resizeable Sidebar\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('resizeableSidebar',[function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                disableResize: '=?',\r\n                collapseCallback : '&',\r\n                scrollCallback : '&',\r\n                leftPanelWidthCallback : '&'\r\n            },\r\n            link: function(scope, element, attrs) {\r\n              var elementWidth = element.innerWidth();\r\n              var collapseCallback = scope.$eval(scope.collapseCallback);\r\n              var scrollCallback = scope.$eval(scope.scrollCallback);\r\n              var leftPanelWidthCallback = scope.$eval(scope.leftPanelWidthCallback);\r\n              var leftPanel = element.find('.leftPanel');\r\n              var resizableDiv = document.createElement('div');\r\n              resizableDiv.id = 'panelexpandorreports';\r\n              resizableDiv.className = 'panelexpandorreports';\r\n              leftPanel.prepend(resizableDiv);\r\n              var getResizableDiv = element.find('.panelexpandorreports');\r\n              var clickableDiv = document.createElement('div');\r\n              clickableDiv.id = 'panelexpandorreportsdiv';\r\n              clickableDiv.className = 'panelexpandorreportsdiv';\r\n              getResizableDiv.prepend(clickableDiv);\r\n              scope.$watch('disableResize', function (disableResize) {\r\n                    if (disableResize) {\r\n                        $('#panelexpandorreports').addClass('disableCursorAction');\r\n                    } else {\r\n                        $('#panelexpandorreports').removeClass('disableCursorAction');\r\n                    }\r\n                });\r\n                var restrictWidth = 0,\r\n                minDraggableWidth = attrs.minWidth || 100,\r\n                lowDraggableWidth = attrs.lowWidth || 100,\r\n                midDraggableWidth = attrs.midWidth || 282;\r\n                var maxDraggableWidth = window.innerWidth / 2;//$(window).width() / 2;\r\n                var UiLeftPosition = 0;\r\n                var UiOriginalPosition = 0;\r\n                var windowWidthBeforeResize = window.innerWidth //$(window).width();\r\n                var leftPecent = midDraggableWidth / windowWidthBeforeResize * 100;\r\n                var currentwindowWidth = window.innerWidth //$(window).width();\r\n                // on window resize calculations\r\n                $(window).resize(function() {                \r\n                    //maxDraggableWidth  = $(window).width() / 2;\r\n                    //restrictWidth = maxDraggableWidth - minDraggableWidth;\r\n                    currentwindowWidth = window.innerWidth //$(window).width();\r\n                    maxDraggableWidth = currentwindowWidth / 2\r\n                    UiLeftPosition = currentwindowWidth * leftPecent / 100;\r\n                    UiLeftPosition = Math.max(midDraggableWidth, UiLeftPosition); \r\n                    windowWidthBeforeResize = currentwindowWidth;\r\n                    $(\".leftPanel\").animate({\r\n                        'margin-left': -UiLeftPosition,\r\n                        width: UiLeftPosition\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false,\r\n                    }).addClass('overflowVisible');\r\n                    $(\".wrapper--withSidebar\").animate({\r\n                        'margin-left': UiLeftPosition\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false\r\n                    }).addClass('overflowVisible');\r\n                    $(\".panelexpandorreports\").animate({\r\n                            left: UiLeftPosition,\r\n                            backgroundColor:'#ccc'\r\n                    }, {\r\n                        duration: 500,\r\n                        queue: false,\r\n                        complete: function(){\r\n                            $(\".panelexpandorreports\").removeClass('dragLine');                                            \r\n                        }\r\n                    }).addClass('dragLine');\r\n                    leftPanelWidthCallback(UiLeftPosition,elementWidth);\r\n                });\r\n                \r\n                //var maxDraggableWidth  = window.innerWidth / 2, //attrs.maxWidth ||\r\n                  element.on('click mouseover.leftPanel', '#leftPanel', function () {\r\n                        var $panelExp = $('#panelexpandorreports');\r\n                        if (!$panelExp.data('ui-draggable')) {\r\n                            $panelExp.draggable({\r\n                                axis: 'x',\r\n                                drag: function (e, ui) {\r\n                                    restrictWidth = maxDraggableWidth - minDraggableWidth;\r\n                                    $('.panelexpandorreports').addClass('panelexpandorreports-nohover');\r\n                                    //ui.position.left = Math.max(minDraggableWidth, ui.position.left);  \r\n                                    ui.position.left = Math.min(maxDraggableWidth, ui.position.left);\r\n                                    UiLeftPosition = ui.position.left;\r\n                                    UiOriginalPosition = ui.originalPosition.left; \r\n                                    leftPecent = UiLeftPosition / windowWidthBeforeResize * 100;   \r\n                                    leftPanelWidthCallback(ui.position.left,elementWidth);      \r\n                                },\r\n                                stop: function (e, ui) {                               \r\n                                    if(ui.position.left < lowDraggableWidth){                    \r\n                                       collapseCallback();\r\n                                       $('#panelexpandorreports').css('left', ui.originalPosition.left);\r\n                                    } else if ((ui.position.left >= lowDraggableWidth) && (ui.position.left <= midDraggableWidth)) {\r\n                                        element.removeClass('conditionalLftPanelTransition');\r\n                                        /*var marginLeftValue = parseInt($('.wrapper--withSidebar').css('margin-left')) - (ui.originalPosition.left - ui.position.left);\r\n                                        $(\".leftPanel\").animate({\r\n                                           'margin-left': -marginLeftValue,\r\n                                            width: ui.position.left\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false\r\n                                        });\r\n\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': marginLeftValue\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false\r\n                                        });\r\n                                        // $panelExp.css('left', 282);*/                                 \r\n                                       // setTimeout(function () {\r\n                                        $(\".leftPanel\").animate({\r\n                                            'margin-left': -midDraggableWidth,\r\n                                            width: midDraggableWidth                                           \r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                           // complete: function(){\r\n                                            //  $(\".leftPanel\").removeClass('overflowVisible');\r\n                                            //}\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': midDraggableWidth,\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                            //complete: function(){\r\n                                            //  $(\".leftPanel\").removeClass('overflowVisible');\r\n                                           // }\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".panelexpandorreports\").animate({\r\n                                               left: midDraggableWidth,\r\n                                               backgroundColor:'#ccc'\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                            complete: function(){\r\n                                              $(\".panelexpandorreports\").removeClass('dragLine');                                            \r\n                                            }\r\n                                        }).addClass('dragLine');\r\n                                       // }, 400);\r\n                                    } else {                                   \r\n                                        element.removeClass('conditionalLftPanelTransition');\r\n                                        var marginLeftValue = parseInt($('.wrapper--withSidebar').css('margin-left')) - (ui.originalPosition.left - ui.position.left);\r\n                                        $(\".leftPanel\").animate({\r\n                                           'margin-left': -marginLeftValue,\r\n                                            width: ui.position.left\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                           // complete: function(){\r\n                                          //    $(\".leftPanel\").removeClass('overflowVisible');\r\n                                          //  }\r\n                                        }).addClass('overflowVisible');\r\n                                        $(\".wrapper--withSidebar\").animate({\r\n                                            'margin-left': marginLeftValue\r\n                                        }, {\r\n                                            duration: 500,\r\n                                            queue: false,\r\n                                          //  complete: function(){\r\n                                          //    $(\".leftPanel\").removeClass('overflowVisible');\r\n                                           // }\r\n                                        }).addClass('overflowVisible'); \r\n                                    }\r\n                                    scrollCallback(); \r\n                                    $('.panelexpandorreports').removeClass('panelexpandorreports-nohover');\r\n                                }\r\n                            });\r\n                        } \r\n                });\r\n            },\r\n        }\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    var scrollCounter = 0;\r\n\r\n    angular.module('SMART2').directive('smartScroll', ['$parse', '$timeout', '$window', function ($parse, $timeout, $window) {\r\n        return {\r\n            restrict: 'EA',\r\n            replace: false,\r\n            transclude: true,\r\n            scope: true,\r\n            link: function (scope, element, attrs) {\r\n\t\t\t\t//Setting for fixed header on scroll\r\n                var isFixedHeader = attrs.isFixedHeader ? true : false,\r\n                    isScrollDate = attrs.hideDate == 'true' ? true : false,\r\n                    onBreakPoints = attrs.onBreakPoints ? $parse(attrs.onBreakPoints.replace(/\\(\\)/, '(e)')) : false,\r\n                    onScrollLockUnlock = attrs.onScrollLockUnlock ? $parse(attrs.onScrollLockUnlock.replace(/\\(\\)/, '(e)')) : false;\r\n\r\n                scope.fixedHeader = function (e) {\r\n                    var _this = $(e.target),\r\n            \t\ttableElem = _this.find(\">\").eq(0).find(\">\").eq(0), // this is depending on the smartScroll directive html structure!\r\n            \t\t elScrollTop = _this.scrollTop();\r\n\r\n                    if (elScrollTop > 0 && !_this.data('appended')) {\r\n                        // reset display styles so column widths are correct when measured below\r\n                        tableElem.find('thead, tbody, tfoot').css('display', '');\r\n\r\n                        // set widths of columns\r\n                        tableElem.find('tr:first-child th').each(function (i, thElem) {\r\n                            var tdElems = tableElem.find('tbody > tr:first-child > td').eq(i),\r\n            \t\t\t\tcolumnWidth = tdElems.length ? tdElems.get(0).offsetWidth : thElem.offsetWidth;\r\n\r\n                            if (tdElems.length) {\r\n                                tdElems.css('width', columnWidth + 'px');\r\n                            }\r\n                            if (thElem) {\r\n                                $(thElem).css('width', columnWidth + 'px');\r\n                            }\r\n                        });\r\n\r\n                        var tbl = $('<table>');\r\n                        var theader = tableElem.find('thead tr:first-child').clone();\r\n                        tableElem.find('thead tr:first-child').css('opacity', '0');\r\n                        tbl.append(theader);\r\n                        tbl.addClass(\"fixed-header-when-scrolled\");\r\n                        _this.before(tbl);\r\n                        _this.data('appended', true);\r\n                    }\r\n                    else if (elScrollTop == 0) {\r\n                        _this.parent().find(\".fixed-header-when-scrolled\").remove();\r\n                        tableElem.find('thead tr:first-child').css('opacity', '1');\r\n                        _this.data('appended', false);\r\n                    }\r\n                };\r\n\r\n                function scrollBreakPoints(scrollTop, direction) {\r\n                    if (attrs.scrollBreakPoints) {\r\n                        var breakPConfig = JSON.parse(attrs.scrollBreakPoints),\r\n                            BCkeys = Object.keys(breakPConfig),\r\n                            srElements = element.find(BCkeys.join(\",\"));\r\n\r\n                        for (var z = 0; z < BCkeys.length; z++) {\r\n                            element.find(BCkeys[z]).data(\"configSele\", BCkeys[z]);\r\n                        }\r\n\r\n                        if (srElements.length > 0) {\r\n                            srElements.each(function (i, e) {\r\n                                var el = $(e),\r\n                                    pos = el.position(),\r\n                                    bConfig = breakPConfig[el.data(\"configSele\")],\r\n                                    touchValue = function () {\r\n                                        var r;\r\n                                        if (typeof bConfig.top == \"number\") {\r\n                                            r = bConfig.top * parseInt(scope.scrollHeight);\r\n                                        } else {\r\n                                            r = parseInt(bConfig.top);\r\n                                        }\r\n\r\n                                        return r;\r\n                                    }();\r\n\r\n                                if (direction == \"upward\" && pos.top <= touchValue && !el.data(\"fired\")) {\r\n                                    el.data(\"fired\", true);\r\n                                    onBreakPoints(scope, {\r\n                                        e: {\r\n                                            index: i,\r\n                                            direction: \"upward\"\r\n                                        }\r\n                                    });\r\n                                    scope.$digest();\r\n                                } else if (direction == \"downward\" && ((bConfig.reverse === true ? pos.top + el.outerHeight() : pos.top) >= (touchValue)) && el.data(\"fired\")) {\r\n                                    el.data(\"fired\", false);\r\n                                    onBreakPoints(scope, {\r\n                                        e: {\r\n                                            index: i,\r\n                                            direction: \"downward\"\r\n                                        }\r\n                                    });\r\n                                    scope.$digest();\r\n                                };\r\n                            });\r\n                        };\r\n                    };\r\n                };\r\n\r\n            \t//unique ID for scroll\r\n                scrollCounter = scrollCounter + 1;\r\n                scope.scrollid = 'scroll-' + scrollCounter;\r\n\r\n                //custom config\r\n                var customConfig;\r\n                attrs.$observe('scrollConfig', function (value) {\r\n                    if (value) {\r\n                        customConfig = scope.$eval(attrs.scrollConfig);\r\n                    };\r\n                });\r\n\r\n                //scroll config\r\n                var scrollConfig = {},\r\n                onScrollEnd = $parse(attrs.onScrollEnd),\r\n                onScrollToTop = $parse(attrs.onScrollToTop),\r\n                onScrollInProgress = $parse(attrs.onScrollInProgress);\r\n\r\n                attrs.$observe('height', function (value) {\r\n                    if (value) {                               \r\n                        if (angular.isFunction(onScrollEnd) || angular.isFunction(onScrollToTop)) {\r\n                            scrollConfig.onScroll = function (y, x) {\r\n                                if (y.maxScroll > 0 && y.scroll >= y.maxScroll && angular.isFunction(onScrollEnd)) {\r\n                                    onScrollEnd(scope, { e: \"\" });\r\n                                }\r\n                                if (y.scroll == 0 && angular.isFunction(onScrollToTop)) {\r\n                                    onScrollToTop(scope, { e: \"\" });\r\n                                }\r\n                                else if (y.maxScroll > y.scroll > 0 && angular.isFunction(onScrollInProgress)) {\r\n                                    onScrollInProgress(scope, { e: \"\" });\r\n                                }\r\n                                angular.element('.fixeddd').hide();\r\n                            };\r\n                        }\r\n                    \r\n\r\n                        if (!attrs.vOffset) {\r\n                            if (value == \"parent\") {\r\n                                scope.scrollHeight = element.parent().outerHeight();\r\n                                $(window).resize(resizeHeight100P);\r\n                            } else {\r\n                                scope.scrollHeight = value;\r\n                            }\r\n                        } else if (attrs.vOffset) {\r\n                        \t// If scroll to be responsive excluding an offset\r\n                            $(window).unbind(\"resize\", resizeHeight100P);\r\n                        \tscope.scrollHeight = $window.innerHeight - parseInt(attrs.vOffset);\r\n                        } else {\r\n                        \tscope.scrollHeight = value;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                function resizeHeight100P(a) {\r\n                    scope.scrollHeight = element.parent().outerHeight();\r\n                    scope.$digest();\r\n                };\r\n\r\n                if (attrs.vOffset || attrs.hOffset) {\r\n                \t// Resize event if scroll to be responsive excluding an offset\r\n                \t$(window).bind('resize', function () {\r\n                        scope.scrollHeight = $window.innerHeight - parseInt(attrs.vOffset);\r\n                        scope.$digest();\r\n                        $timeout(function () {\r\n                \t\t\tif (attrs.vOffset) {\r\n                \t\t\t\tif (element.closest('.modal').length > 0) {\r\n                \t\t\t\t\tvar modalHeight = element.closest('.modal').height();\r\n                \t\t\t\t\telement.closest('.modal').css('top', window.innerHeight / 2 - modalHeight / 2 + 'px');\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t});\r\n                \t});\r\n                }\r\n                attrs.$observe('vOffset', function (newVal) {\r\n                    scope.scrollHeight = $window.innerHeight - parseInt(newVal);\r\n                });\r\n                scope.$on('scrollTopToBottom', function (event, args) {\r\n                    element.find('.scrollbar-outer').animate({ scrollTop: args }, \"slow\");\r\n                });\r\n\r\n                var onScrollHEnd = $parse(attrs.onScrollHEnd);\r\n                var onScrollHToTop = $parse(attrs.onScrollHToTop);\r\n                var onScrollHInProgress = $parse(attrs.onScrollHInProgress);\r\n\r\n                var eleWidth = element.css('width');\r\n                scope.scrollWidth = parseInt(eleWidth) ? eleWidth : '100%';\r\n\r\n                attrs.$observe('width', function (value) {\r\n                \tif (value) {\r\n                \t\tif (angular.isFunction(onScrollHEnd) || angular.isFunction(onScrollHToTop)) {\r\n                \t\t\tscrollConfig.onScroll = function (y, x) {\r\n                \t\t\t\tif (x.maxScroll > 0 && x.scroll == x.maxScroll && angular.isFunction(onScrollHEnd)) {\r\n                \t\t\t\t\tonScrollHEnd(scope, { e: \"\" });\r\n                \t\t\t}\r\n                \t\t\t\tif (x.scroll == 0 && angular.isFunction(onScrollHToTop)) {\r\n                \t\t\t\t\tonScrollHToTop(scope, { e: \"\" });\r\n                \t\t\t\t}\r\n                \t\t\t\telse if (x.maxScroll > x.scroll > 0 && angular.isFunction(onScrollHInProgress)) {\r\n                \t\t\t\t\tonScrollHInProgress(scope, { e: \"\" });\r\n                \t\t\t}\r\n                \t\t};\r\n                \t};\r\n                \t\tscope.scrollWidth = value;\r\n                }\r\n                });\r\n\r\n                attrs.$observe('connectScrolls', function (value) {\r\n                \tif (value) {\r\n                \t\tvar value = JSON.parse(value),\r\n                \t\t\tscrollTopSourceStorage = 0;\r\n\r\n                \t\tscrollConfig.onScroll = function (y, x) {\r\n                \t\t\tvar $vSource = $('.' + value.vSource),\r\n\t\t\t\t\t\t\t$vSourceP = $vSource.parent().parent(),\r\n\t\t\t\t\t\t\t$hSource = $('.' + value.hSource),\r\n\t\t\t\t\t\t\t$hSourceP = $hSource.parent().parent(),\r\n\t\t\t\t\t\t\t$vertical = $('.' + value.vertical),\r\n\t\t\t\t\t\t\t$verticalP = $vertical.parent().parent(),\r\n                \t\t\t$horizontal = $('.' + value.horizontal);\r\n\r\n                \t\t\tvar sourceHeight = $vSource.height();\r\n                \t\t\tvar scrollTopSource = $vSourceP.scrollTop(),\r\n                \t\t\tscrollTopConnect = $verticalP.scrollTop();\r\n\r\n                \t\t\tif (scrollTopSource > scrollTopSourceStorage) {\r\n                \t\t\t\tif (scrollTopSource > scrollTopConnect) {\r\n                \t\t\t\t\t$verticalP.scrollTop(scrollTopSource);\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t\telse if (scrollTopSource < scrollTopSourceStorage) {\r\n                \t\t\t\tif (scrollTopSource < scrollTopConnect) {\r\n                \t\t\t\t\t$verticalP.scrollTop(scrollTopSource);\r\n                \t\t\t\t}\r\n                \t\t\t}\r\n                \t\t\telse {\r\n                \t\t\t\tvar scrollLeft = $hSourceP.scrollLeft();\r\n                \t\t\t\t$horizontal.scrollLeft(scrollLeft);\r\n                \t\t\t}\r\n                \t\t\tscrollTopSourceStorage = scrollTopSource;\r\n                \t\t\tangular.element('.fixeddd').hide();\r\n                \t\t};\r\n\t\t\t\t\t}\r\n                });\r\n\r\n                function dateHideOnScroll(e) {\r\n                    element.find(\"input.datepicker\").each(function (i, el) {\r\n                        var dobj = $(el).data(\"daterangepicker\");\r\n                        if (dobj && dobj.isShowing) {\r\n                            dobj.hide()\r\n                        }\r\n                    });\r\n                }\r\n                //Cleaning floating elements on scroll\r\n                var lastOpenSelectDD;\r\n                function cleanFloatingElements(e) {\r\n                    element.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                        var autoComplete = $(this).data().autocomplete;\r\n                        if (autoComplete && autoComplete.visible) {\r\n                            autoComplete.hide();\r\n                        }\r\n                    });\r\n                    /* close select-dropdown */\r\n                    var $selectDd = $window.lastOpenedDropdownConfig;\r\n                    if ($selectDd && $selectDd != lastOpenSelectDD && $selectDd.origin.hasClass('select-dropdown')) {\r\n                        $selectDd.origin.trigger('close');\r\n                    }\r\n                    lastOpenSelectDD = $selectDd;\r\n                }\r\n                //End of cleaning floating elements on scroll\r\n                var lockScrollObser = false;\r\n                attrs.$observe(\"lockScroll\", function (a) {\r\n                    if (!lockScrollObser) {\r\n                        lockScrollObser = true;\r\n                        $timeout(ls.bind(this, a));\r\n                    } else {\r\n                        ls(a);\r\n                    }\r\n                });\r\n\r\n                function ls(a) {\r\n                    if (a) {\r\n                        var $scroller = element.find(\".scroll-content\");\r\n                        if (a == \"true\") {\r\n                            $scroller.data(\"scrolltop\", $scroller.scrollTop());\r\n                            $scroller.get(0).addEventListener(\"scroll\", lockScroll, true);\r\n                            if (onScrollLockUnlock) {\r\n                                onScrollLockUnlock(scope, { e: 'locked' });\r\n                                scope.$digest();\r\n                            }\r\n                        } else if (a == \"false\") {\r\n                            $scroller.get(0).removeEventListener(\"scroll\", lockScroll, true);\r\n                            if (onScrollLockUnlock) {\r\n                                onScrollLockUnlock(scope, { e: 'unLocked' });\r\n                                scope.$digest();\r\n                            }\r\n                        }\r\n                }\r\n\t\t\t\t\r\n                };\r\n                //Cleaning floating elements on scroll\r\n                function cleanFloatingElements(e) {\r\n                \telement.find(\"[id^=typeahead-]\").each(function (i, el) {\r\n                \t\tvar autoComplete = $(this).data().autocomplete;\n                \t\tif (autoComplete && autoComplete.visible) {\r\n                \t\t\tautoComplete.hide();\r\n                \t\t}\r\n                \t});\r\n                }\r\n            \t//End of cleaning floating elements on scroll\r\n                function lockScroll(e) {\r\n                    var st = $(this).data(\"scrolltop\");\r\n                    this.scrollTop = st;\r\n                    e.stopPropagation();\r\n                    return false;\r\n                };\r\n\r\n                var scrollOnUpdate = {\r\n                        handlers: [],\r\n                        addHandlers: function (func) {\r\n                            this.handlers.push(func);\r\n                        }\r\n                    };\r\n\r\n                scrollConfig.onUpdate = function () {\r\n                    var _this = this,\r\n                        _arguments = arguments;\r\n\r\n                    scrollOnUpdate.handlers.forEach(function (func) {\r\n                        if (typeof func === \"function\") {\r\n                            func.apply(_this, _arguments);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scrollOnUpdate.addHandlers(function (y, x) {\r\n                    if (y.closest('.modal.noTransform').length > 0) {\r\n                        var modalHeight = y.closest('.modal').height();\r\n                        y.closest('.modal').css('top', window.innerHeight / 2 - modalHeight / 2 + 'px');\r\n                    }\r\n                });\r\n\r\n                var scrollToElement,\r\n                    scrollToElementName;\r\n                if (attrs.scrollToElement) {\r\n\r\n                    scrollOnUpdate.addHandlers(function (y, x) {\r\n                        var $scrollToElementName = y.find(scrollToElementName.content);\r\n                        if (scrollToElementName && scrollToElementName.status && $scrollToElementName.length) {\r\n                            y.animate({ scrollTop: (($scrollToElementName.offset().top - y.children('div').offset().top) - 10) }, \"slow\");\r\n                        }\r\n                    });\r\n\r\n                    scrollToElement = attrs.$observe('scrollToElement', function (value) {\r\n                        scrollToElementName = attrs.scrollToElement && JSON.parse(attrs.scrollToElement);\r\n                    });\r\n                }\r\n\r\n                setTimeout(function () {\r\n                    var scrollWrapper = angular.element('#' + scope.scrollid);\r\n                    var mergedConfig = angular.merge(scrollConfig, customConfig);\r\n                    scrollWrapper.scrollbar(mergedConfig);\r\n\r\n                \t//Fixed header on scroll\r\n                    var scrlTop;\r\n                    scrollWrapper.scroll(function (e) {\r\n                        var _this = $(this),\r\n                            currScrlTop = _this.scrollTop(),\r\n                            dir;\r\n\r\n                        if (isFixedHeader) {\r\n                            scope.fixedHeader(e);\r\n                        } else if (isScrollDate) {\r\n                            dateHideOnScroll(e);\r\n                        }\r\n                        if (attrs.scrollBreakPoints) {\r\n                            if (currScrlTop > scrlTop) {\r\n                                dir = \"upward\";\r\n                            } else if (currScrlTop < scrlTop) {\r\n                                dir = \"downward\";\r\n                            };\r\n                            scrollBreakPoints(currScrlTop, dir);\r\n                        }\r\n                        cleanFloatingElements(e);\r\n                        scrlTop = currScrlTop;\r\n                    });\r\n                    scrlTop = scrollWrapper.scrollTop();\r\n\r\n                    // for ie update the icon inside the smartscroll\r\n                    var ua = window.navigator.userAgent, use = scrollWrapper.find('use');\r\n                    if (ua.indexOf('MSIE') !== undefined || ua.indexOf('Trident/') !== undefined || ua.indexOf('Edge/') !== undefined) {\r\n                        if (use.length > 0) {\r\n                            use.each(function () {\r\n                                var _this = angular.element(this), currentItem = _this.attr(\"xlink:href\");\r\n                                _this.attr(\"xlink:href\", \"\").attr(\"xlink:href\", currentItem);\r\n                    });\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n                scope.$on('$destroy', function () {\r\n                    if (scrollToElement) {\r\n                        scrollToElement();\r\n                    }\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartScroll/smartScrollTemplate.html'\r\n        };\r\n    }]);\r\n})();\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartLazyLoad', function () {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                smartLazyLoad: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var scrollElement = element.closest('.scrollbar-outer');\r\n                scrollElement.scroll(function () {\r\n                    if (this.scrollTop + this.offsetHeight >= this.scrollHeight) {\r\n                        scope.$apply(function () {\r\n                            scope.smartLazyLoad();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n})();\n(function() {\r\n    'use strict';\r\n    \r\n    angular.module('SMART2').directive('smartPlaceholder', ['$translate', 'ScrollTo', function ($translate, ScrollTo) {\r\n        return {\r\n            restrict: 'A',\r\n            replace: true,\r\n            link: function (scope, element, attrs) {\r\n                window.activePlaceholder = element;\r\n\t\t\t\tvar tmpPlaceholder = getHTMLPlaceholder(scope);\r\n                element.addClass((!scope.property.isMandatory ? 'optionalField ' : '') + ((scope.property.attributes.readonly ? 'readOnlyField' : '')));\r\n                element.find('.smart-ph-label').html('<span>' + $translate.instant(scope.property.label) + '</span>');\r\n                element.find('.smart-ph-value').html('<span>' + tmpPlaceholder + '</span>');\r\n                element.attr('title', tmpPlaceholder);\r\n\t\t\t\t\r\n\t\t\t\tif (tmpPlaceholder != '') {\r\n                    element.find('.smart-ph-label').addClass('active');\r\n                }\r\n\r\n                if (scope.property.attributes.disable || scope.property.attributes.readonly) {\r\n                    element.find('.smart-ph-value').addClass('disabled');\r\n                }\r\n                else {\r\n                    element.attr('tabindex', 0);\r\n                }\r\n\t\t\t\t\r\n                var onAttributesChange = scope.$watchGroup(['property.attributes.disable', 'property.attributes.readonly', 'model.' + scope.property.data, 'property.validate', 'property.focus'], function (newVal, oldVal) {\r\n\t\t\t\t\t//\tdisable and readonly change listener\r\n\t\t\t\t\tif(!angular.equals(newVal[0], oldVal[0]) || !angular.equals(newVal[1], oldVal[1])) {\r\n\t\t\t\t\t    if (newVal[0] || newVal[1]) {\r\n\t\t\t\t\t        element.find('.smart-ph-value').addClass('disabled');\r\n\t\t\t\t\t        element.attr('tabindex', -1);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t    else {\r\n\t\t\t\t\t        element.find('.smart-ph-value').removeClass('disabled');\r\n\t\t\t\t\t        element.attr('tabindex', 0);\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//\tdata change listener\r\n\t\t\t\t\tif(!angular.equals(newVal[2], oldVal[2])) {\r\n\t\t\t\t\t\ttmpPlaceholder = getHTMLPlaceholder(scope);\r\n\t\t\t\t\t\telement.find('.smart-ph-value').html('<span>' + tmpPlaceholder + '</span>');\r\n\t\t\t\t\t\telement.attr('title', tmpPlaceholder);\r\n\t\t\t\t\t\tif (tmpPlaceholder != '') {\r\n\t\t\t\t\t\t\telement.find('.smart-ph-label').addClass('active');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t    element.find('.smart-ph-label').removeClass('active');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                    //\tvalidate change listener\r\n\t\t\t\t\tif (!angular.equals(newVal[3], oldVal[3])) {\r\n\t\t\t\t\t    if (scope.property.validate) {\r\n\t\t\t\t\t        if ((angular.isUndefined(scope.property.attributes.readonly) || scope.property.attributes.readonly == false) &&\r\n                                (angular.isUndefined(scope.property.attributes.disable) || scope.property.attributes.disable == false)) {\r\n\t\t\t\t\t            validate();\r\n\t\t\t\t\t        }\r\n\t\t\t\t\t        scope.property.validate = false;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n\r\n                    //\tfocus change listener\r\n\t\t\t\t\tif (!angular.equals(newVal[4], oldVal[4])) {\r\n\t\t\t\t\t    if (scope.property.focus) {\r\n\t\t\t\t\t        ScrollTo.perform(element, angular.element('#' + scope.formWidgetId));\r\n\t\t\t\t\t        scope.onFocus();\r\n\t\t\t\t\t        scope.property.focus = false;\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t}\r\n                });\r\n\r\n                var validate = function () {\r\n                    var model = eval('scope.model.' + scope.property.data);\r\n                    var error;\r\n\r\n                    if(scope.property.isMandatory) {\r\n                        if ((scope.property.attributes.type === 'text' || angular.isUndefined(scope.property.attributes.type)) && (angular.isUndefined(model) || model == null || model.trim() == '')) {\r\n                            error = $translate.instant(\"enterValueErrMsg\");\r\n                        }\r\n                        else if (scope.property.attributes.type == 'autocomplete' && (angular.isUndefined(model) || model == null || model == '' || (model && model.hasOwnProperty('value') && model.value.trim() == ''))) {\r\n                            error = $translate.instant(\"enterValueErrMsg\");\r\n                        }\r\n                        else if (scope.type == 'number' && isNaN(scope.ngModel)) {\r\n                            error = $translate.instant(\"enterNumberErrMsg\");\r\n                        }\r\n                    }\r\n\r\n                    if (angular.isUndefined(error) && scope.property.rules) {\r\n                        var rules = scope.property.rules;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, model))) {\r\n                                    error = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (error) {\r\n                        element.find('.smart-ph-label').addClass('active');\r\n                        element.find('.smart-ph-value').addClass('invalid');\r\n                        element.find('.smart-ph-error').html(error);\r\n                        //scope.$parent.errorMessage = error;\r\n                    }\r\n                    else {\r\n                        element.find('.smart-ph-value').removeClass('invalid');\r\n                        element.find('.smart-ph-error').html('');\r\n                        if (tmpPlaceholder == '') {\r\n                            element.find('.smart-ph-label').removeClass('active');\r\n                        }\r\n                        //scope.$parent.errorMessage = undefined;\r\n                    }\r\n                };\r\n\r\n                //validate();\r\n                \r\n                scope.onFocus = function (e) {\r\n                    if (scope.property.attributes.disable || scope.property.attributes.readonly) {\r\n                        return;\r\n                    }\r\n                    scope.$parent.isPreviewMode = false;\r\n                };\r\n\r\n                scope.onRemoveButtonClick = function (e) {\r\n                    scope.property.isVisible = !scope.property.isVisible;\r\n                    e.stopPropagation();\r\n                };\r\n\r\n                scope.$parent.onEditableRender = function (editableScope, editableEle) {\r\n                    editableEle.find('input').focus();\r\n                    editableEle.find('input').select();\r\n                    element.attr('tabindex', -1);\r\n                    if (this.errorMessage) {\r\n                        editableEle.find('input').addClass('invalid');\r\n                        editableEle.find('label').attr('data-error', this.errorMessage);\r\n                        this.errorMessage = undefined;\r\n                    }\r\n                };\r\n\r\n                scope.$parent.onStopEdit = function (editableScope, editableEle) {\r\n                    this.isPreviewMode = true;\r\n                    if (editableScope.errorMessage != undefined || editableScope.errorMessage != null) {\r\n                        this.errorMessage = editableScope.errorMessage;\r\n                        setTimeout(function () {\r\n                            window.activePlaceholder.find('.smart-ph-label').addClass('active');\r\n                            window.activePlaceholder.find('.smart-ph-value').addClass('invalid');\r\n                            window.activePlaceholder.find('.smart-ph-error').html(editableScope.errorMessage);\r\n                        });\r\n                    }\r\n                };\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onAttributesChange();\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSection/smartPlaceholderTemplate.html'\r\n        };\r\n    }]);\r\n\r\n\t\r\n\tvar setPrecisionLimits = function (number, decimalPrecision, minMaxPrecision) {\r\n        if (number != undefined) {\r\n            var arr = (number.toString()).split('e')\r\n            if (arr.length > 1 && parseInt(arr[1]) < 0) {\r\n                number = (number).toFixed(6);\r\n            }\r\n            var tempArr = number.toString().split('.');\r\n            if (tempArr != undefined && tempArr.length > 1) {\r\n                var preDecimal = tempArr[0];\r\n                if (preDecimal != 0 && preDecimal.toString().length > 20) {\r\n                    var tempVal = preDecimal.toString().substring(0, 19);\r\n                    number = parseInt(tempVal);\r\n                }\r\n            }\r\n            else {\r\n                if (number != 0 && number.toString().length > 20) {\r\n                    var tempVal = number.toString().substring(0, 19);\r\n                    number = parseInt(tempVal);\r\n                }\r\n            }\r\n            if (decimalPrecision != undefined) {\r\n                number = parseFloat(parseFloat(number).toFixed(decimalPrecision));\r\n            }\r\n            else if (minMaxPrecision !== undefined && minMaxPrecision !== '') {\r\n                var splitPrecision = JSON.parse(minMaxPrecision);\r\n                if (splitPrecision.length > 2 || splitPrecision.length < 1) {\r\n                    //\tdon't do anything\r\n                }\r\n                else {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    var highPrecisionLimit = splitPrecision[1];\r\n\r\n                    var postDecimalNumbers = ((number + \"\").split(\".\")[1] != undefined) ? (number + \"\").split(\".\")[1].length : 0;\r\n\r\n                    if (postDecimalNumbers == 0) {\r\n                        //\tdon't do anything\r\n                    }\r\n                    else if (lowerPrecisionLimit > postDecimalNumbers && postDecimalNumbers < highPrecisionLimit && postDecimalNumbers != 0) {\r\n                        number = parseFloat(parseFloat(number).toFixed(lowerPrecisionLimit));\r\n                    }\r\n                    else if (postDecimalNumbers >= highPrecisionLimit && postDecimalNumbers != 0) {\r\n                        var fixed = Math.pow(10, highPrecisionLimit);\r\n                        number = Math.floor(number * fixed) / fixed;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return number;\r\n    };\r\n\r\n\r\n    var getFormattedDate = function (dateVal, dateFormat, isSetFromGrid) {\r\n        var output = '';\r\n        dateFormat = dateFormat.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n        var isDateBlank = false;\r\n        var doesContainDateString = isSetFromGrid == 'true' ? true : (dateVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n\r\n        if (dateVal == \"\" || dateVal == null) {\r\n            dateVal = Date.now();\r\n            isDateBlank = true;\r\n        }\r\n        else {\r\n            if (doesContainDateString) {\r\n                var tmpModel = (dateVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                tmpModel = tmpModel.split('+');\r\n                tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + dateVal + '\").getTime()') : tmpModel[0]));\r\n                output = moment(tmpModel).format(dateFormat);\r\n            }\r\n            else {\r\n                if (Object.prototype.toString.call(dateVal) !== '[object Date]') {\r\n                    dateVal = parseInt(dateVal);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!isDateBlank) {\r\n            if (!doesContainDateString) {\r\n                output = moment(dateVal).format(dateFormat);\r\n            }\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n    var getHTMLPlaceholder = function (scope) {\r\n        var placeHolder;\r\n        var tmpModel = eval(\"scope.model.\" + scope.property.data);\r\n\r\n        switch (scope.property.type) {\r\n            case 'textfield':\r\n                switch (scope.property.attributes.type) {\r\n                    case 'number':\r\n                        placeHolder = setPrecisionLimits(tmpModel, scope.property.attributes.decimalprecision, scope.property.attributes.minmaxprecision);\r\n                        break;\r\n\r\n                    case 'date':\r\n                        placeHolder = getFormattedDate(tmpModel, scope.property.attributes.format);\r\n                        break;\r\n\r\n                    case 'autocomplete':\r\n                        if (tmpModel == undefined || tmpModel == null || tmpModel == '') {\r\n                            return '';\r\n                        }\r\n                        var str = scope.property.attributes.displayformat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                        try {\r\n                            var parentSplit = str.split('{');\r\n                            for (var j = 0; j < parentSplit.length; j++) {\r\n                                var childSplit = parentSplit[j].split('}');\r\n                                for (var k = 0; k < childSplit.length; k++) {\r\n                                    if (childSplit[k].indexOf('.') > 0 || tmpModel.hasOwnProperty(childSplit[k])) {\r\n                                        evalResult = eval('tmpModel.' + childSplit[k]);\r\n                                        evaluatedKeysCounter++;\r\n                                        if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                            evalResult = '';\r\n                                            nullKeysCounter++;\r\n                                        }\r\n                                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (evaluatedKeysCounter == nullKeysCounter) {\r\n                                str = '';\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                        placeHolder = str;\r\n                        break;\r\n\r\n                    default:\r\n                        placeHolder = eval(\"scope.model.\" + scope.property.data);\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            case 'dropdown':\r\n            case 'select':\r\n                placeHolder = (eval(\"scope.model.\" + scope.property.data + (scope.property.attributes.displaykey ? \".\" + scope.property.attributes.displaykey : (scope.property.attributes.datakey ? \"\" + scope.property.attributes.datakey : \"\"))));\r\n                break;\r\n        }\r\n        return placeHolder == null || placeHolder == undefined ? '' : placeHolder;\r\n    };\r\n\t\r\n})();    \n  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Section\r\n   * @description This directive is useful for creating a section.\r\n   * \r\n   * @attr {String} label\r\n   *    Label to be displayed on section header. If 'is-header' is set to true, label will be displayed on section header.\r\n   * @attr {Boolean} plain\r\n   *    If set to true, section with no style will be generated\r\n   * @attr {Boolean} is-collapsible\r\n   *    If set to true, section will be collapsible\r\n   * @attr {String} header-template\r\n   *    This attribute is useful for creating sections with custom header templates.\r\n   *    'header-template' is expected to be an URL of a template.\r\n   * @attr {Boolean} is-active\r\n   *    If set to false and if 'is-collapsible' is set to true, section will be displayed in collapsed mode. Default value is true.      \r\n   * @attr {Boolean} is-header\r\n   *    If set to true, section-header will be displayed. Default value is true.\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n    \r\n   * @example \r\n   Dynamic: (Section with header)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"label\": \"Section header\",\r\n                        \"isHeader\": true,\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example \r\n   Dynamic: (Section with custom header-template)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"headerTemplate\": \"abc.html\",\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example \r\n   Dynamic: (Section with collapsible header)\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"firstName\": \"Sushant\"\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"headerTemplate\": \"abc.html\",\r\n                        \"isCollapsible\": true,\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"First name\",\r\n                                        \"type\": \"textfield\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"firstName\"\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example\r\n   Static:\r\n   <smart-section>\r\n        Section contents will go here\r\n    </smart-section> \r\n\r\n   * @example\r\n   Static: (Section with header)\r\n   <smart-section label=\"Section Header\" is-header=\"true\">\r\n        Section contents will go here\r\n   </smart-section>\r\n\r\n   * @example\r\n   Static: (Section with collpsible header)\r\n   <smart-section is-collapsible=\"true\">\r\n        Section contents will go here\r\n   </smart-section>\r\n        \r\n   * @example\r\n   Static: (Section with header and content place holder)\r\n   <smart-section is-header=\"true\">\r\n        <smart-section-header>\r\n            Section header will go here\r\n        </smart-section-header>\r\n        <smart-section-content>\r\n            Section contents will go here\r\n        </smart-section-content>\r\n    </smart-section>    \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var Textid = 16011982;\r\n    var sectionCounter = 0;\r\n    \r\n    angular.module('SMART2').directive('smartSection', ['$timeout', '$parse', function ($timeout, $parse) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            transclude: {\r\n                'header': '?smartSectionHeader',\r\n                'body': '?smartSectionBody'\r\n            },\r\n            scope: {\r\n                config: '=?',\r\n                model: '=?',\r\n                label: '@',\r\n                isSequential: '@',\r\n                isMandatory: '@',\r\n                isDraggable: '@',\r\n                parentScope: '=?',\r\n                formWidgetId: '@',\r\n                isCollapsible: '@',\r\n                enableFieldPreview: '@',\r\n                headerTemplate: '@',\r\n                isActive: '=?',\r\n                isHeader: '@',\r\n                plain: '@',\r\n                onClick: '&',\r\n                onHeaderClick: '&',\n                revisionMode:'@',\n                isSwitchable: '@',\n                onClickSwitchable: '&',\r\n                infinite: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.isSwitchFunc = function () {\r\n                    scope.onClickSwitchable({ \"section\": scope.config });\r\n                }\r\n               if (attrs.id !== '' || attrs.id !== undefined || attrs.id !== null) {\r\n                    scope.sectionId = attrs.id;\r\n                }\r\n                else {\r\n                    scope.sectionId = 'section-' + sectionCounter;\r\n                    sectionCounter++;\r\n                }\r\n\r\n                element.attr('id', scope.sectionId);\r\n\r\n                scope.collapsible = scope.$eval(scope.isCollapsible) == true ? true : false;\r\n                scope.active = angular.isUndefined(scope.isActive) || scope.isActive == true ? true : false;\r\n                scope.header = scope.$eval(scope.isHeader) ? true : false;\r\n\r\n                if(!scope.collapsible) {\r\n                    scope.active = true;\r\n                }\r\n                else {\r\n                    scope.header = true;\r\n                }\r\n\r\n                scope.isCollapsed = scope.active;\r\n\r\n                if(!scope.headerTemplate) {\r\n                    scope.headerTemplate = '';\r\n                }\r\n                scope.formLoaderConfig = { bgwhite: true, plain: true, center: true, message: \"\" };\r\n\t\t\t\t/*\r\n\t\t\t\t * Update optional field item\r\n\t\t\t\t */\r\n                var onRowsConfig = scope.$watch('config.rows', function (newConfig) {\r\n                    if(newConfig) {\r\n                        var rowsLen = scope.config.rows.length;\r\n                        for (var j = 0; j < rowsLen; j++) {\r\n                            var propLength = scope.config.rows[j].properties.length;\r\n                            for (var k = 0; k < propLength; k++) {\r\n                                var tData = scope.config.rows[j].properties[k];\r\n                                if (!tData.isMandatory) {\r\n                                    updateOptionalField(tData);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n                    }\r\n                }, true);\r\n                    \r\n                var updateOptionalField = function (item) {\r\n                    var optFieldLen = scope.config.optionalFields.length;\r\n                    for (var i = 0; i < optFieldLen; i++) {\r\n                        var tData = scope.config.optionalFields[i];\r\n                        if (item.label == tData.label) {\r\n                            tData.visible = item.isVisible;\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\r\n                /*\r\n                 * Get row's visible properties length\r\n                 */\r\n                var getVisiblePropertiesLength = function (rowIndex) {\r\n                    var visiblePropertiesLength = 0,\r\n                        rowsPropLen = scope.config.rows[rowIndex].properties.length;\r\n                    for (var i = 0; i < rowsPropLen; i++) {\r\n                        var tData = scope.config.rows[rowIndex].properties[i];\r\n                        if (tData.isVisible && !tData.isHidden) {\r\n                            visiblePropertiesLength++;\r\n                        }\r\n                    }\r\n                    return visiblePropertiesLength;\r\n                };\r\n\r\n\r\n                scope.onOptionalFieldClick = function (isLabelClicked, item) {\r\n                    if (isLabelClicked && item.isVisible) {\r\n                        return;\r\n                    }\r\n\r\n                    /*\r\n                     *  If row's visible properties length is 0\r\n                     *  then splice the row and push it at the end of section\r\n                     */\r\n                    var tmpRow = scope.config.rows[item.rowIndex],\r\n                        tmpPropIndxData = tmpRow.properties[item.propertyIndex];\r\n                    if (!scope.$eval(scope.isSequential) && getVisiblePropertiesLength(item.rowIndex) == 0) {\r\n                        scope.config.rows.splice(item.rowIndex, 1);\r\n                        scope.config.rows.push(tmpRow);\r\n                        item.rowIndex = scope.config.rows.length - 1;\r\n                    }\r\n\r\n                    tmpPropIndxData.isVisible = !tmpPropIndxData.isVisible;\r\n\r\n                    /*\r\n                     *  scope.isSequential is set to 'true', form-widget-property would be added \r\n                     *  where it is positioned in the JSON structure else \r\n                     *  form-widget-property would be added at the end of row\r\n                     */\r\n                    if (!scope.$eval(scope.isSequential) && tmpPropIndxData.isVisible) {\r\n                        //var tmpProperty = scope.config.rows[item.rowIndex].properties[item.propertyIndex];\r\n                        tmpRow.properties.splice(item.propertyIndex, 1);\r\n                        tmpRow.properties.push(tmpPropIndxData);\r\n                        var rowsPropLength = scope.config.rows[item.rowIndex].properties.length;\r\n                        for (var i = 0; i < rowsPropLength; i++) {\r\n                            var optLength = scope.config.optionalFields.length;\r\n                            for (var j = 0; j < optLength; j++) {\r\n                                if (tmpRow.properties[i].label == scope.config.optionalFields[j].label) {\r\n                                    scope.config.optionalFields[j].propertyIndex = i;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    item.visible = !item.visible;\r\n                    //  Expand the section\r\n                    if (item.visible) {\r\n                        var clearMe = setTimeout(function () {\r\n                            expandSection();\r\n                            clearTimeout(clearMe);\r\n                            clearMe = null;\r\n                        }, 250);\r\n                    }\r\n                };\r\n\r\n                var isActiveTriggered = false;\r\n\r\n                /*\r\n                 * Expand section if isActive is set to true\r\n                 */\r\n                var onIsActive = scope.$watch('isActive', function (newValue) {\r\n                \tif (angular.isDefined(newValue) && newValue) {\r\n                \t\tisActiveTriggered = true;\r\n                    \texpandSection();\r\n                    \tscope.isActive = false;\r\n                    }\r\n                });\r\n\r\n\r\n                /*\r\n                 * On optional field click listener\r\n                 */\r\n                var onOptionalFieldClick = scope.$on('optionalFieldClick', function (event, args) {\r\n                    try {\r\n                        if (args.item.sectionKey === scope.config.key) {\r\n                            scope.onOptionalFieldClick(args.isLabelClicked, args.item);\r\n                        }\r\n                    }\r\n                    catch(e) {}\r\n                });\r\n\r\n\r\n                /*\r\n                 *  Expand section\r\n                 */\r\n                var expandSection = function () {\r\n                    var collapsibleHdr = element.find('.collapsible-header');\r\n                    if (!collapsibleHdr.hasClass('active')) {\r\n                        collapsibleHdr.trigger('click');\r\n                    }\r\n                    else if (!collapsibleHdr.hasClass('active')) {\r\n                        collapsibleHdr.trigger('click');\r\n                    }\r\n                };\r\n\r\n                var isClicked = false\r\n\r\n               var clrTimeout = setTimeout(function () {\r\n                    element.find('.collapsible-header').click(function () {\r\n                    \tvar ele = this;\r\n\r\n                        scope.$evalAsync(function () {\r\n                        \tif (isClicked && !isActiveTriggered)\r\n                        \t\treturn;\r\n                        \t\r\n                        \tisClicked = true;\r\n                            scope.isCollapsed = angular.element(ele).hasClass('active');\r\n                            scope.active = scope.isCollapsed;\r\n                            scope.onHeaderClick();\r\n                            scope.onClick();\r\n                        \t    isClicked = false;\r\n                        \tisActiveTriggered = false;\r\n                            clearTimeout(clrTimeout);\r\n                            clrTimeout = null;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                \r\n                /*\r\n                 *  Expand section on header focus\r\n                 */\r\n                scope.onSectionHeaderFocus = function (e) {\r\n                    if ($(e.target).hasClass('section-header-focuser') && !scope.active) {\r\n                        scope.config.isContentLoaded = true;\r\n                        scope.active = true;\r\n                        //scope.isCollapsed = true;\r\n                        expandSection();\r\n                    }\r\n                    /* in focus for section move on top */\r\n                    var conf = scope.config.key,\r\n                     formwidget = scope.formWidgetId,\r\n                     $itemSelected = $('#' + conf),\r\n                     staticTopmargin = 64; // 64 is subheader height\r\n\r\n                    var displacementItem = $itemSelected.offset().top - angular.element('#' + formwidget + '-sortable').offset().top;\r\n\r\n                    displacementItem = displacementItem + staticTopmargin;\r\n                    setTimeout(function () {\r\n                        angular.element('body,html').animate({\r\n                            scrollTop: displacementItem\r\n                        }, \"medium\");\r\n                    }, 200);\r\n                    /* in focus for section move on top end */\r\n                };\r\n                \r\n\r\n                /*\r\n                 *  Remove all listeners on scope destroy\r\n                 */\r\n                scope.$on('$destroy', function () {\r\n                    onRowsConfig();\r\n                    onIsActive();\r\n                    onOptionalFieldClick();\r\n                    element.find('.collapsible-header').off('click');\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSection/smartSectionTemplate.html'\r\n        };\r\n    }]);\r\n    \r\n\r\n    angular.module('SMART2').directive('smartSectionItemRenderer', ['$compile', 'formWidgetUtils', '$translate', '$templateCache', '$timeout', function ($compile, formWidgetUtils, $translate, $templateCache, $timeout) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: false,\r\n            link: function (scope, element, attrs) {\r\n                var html = \"\", commonAttributes;\r\n\r\n                if (scope.section) {\r\n                    if (scope.section.controller) {\r\n                        //  Creating dataModel variable so that child controller can access it using $scope.formDataModel\r\n                        scope.formDataModel = scope.$parent.$parent.$parent.modelData;\r\n\r\n                        html += '<div ng-controller=\"' + scope.section.controller + '\">';\r\n                    }\r\n\r\n                    if (scope.section.isLazyLoadEnabled) {\r\n                        scope.section.isActive = false;\r\n                    }\n\n                    //scope.section.isContentLoaded = !angular.copy(scope.section.isLazyLoadEnabled);\n\r\n                    //  Section's primary attribute and can be optional\r\n                    scope.extendedSectionConfig = angular.extend({\r\n                        isMandatory: false,\r\n                        isCollapsible: true,\r\n                        isDraggable: false,\r\n                        isHeader: true,\r\n                        isActive: true,\r\n                        isHidden: true,\r\n                        isSwitchable: false,\r\n                        isFieldPreviewEnabled: false,\r\n                        isSectionDisable: false,\r\n                        isLazyLoadEnabled: false,\r\n                        infinite:false,\r\n                        headerTemplate: ''\r\n                    }, scope.section);\r\n\r\n                    scope.section.isLoading = true;\n                    scope.section.isContentLoaded = false; // !angular.copy(scope.section.isLazyLoadEnabled);\n\n                    var cancelTOut = $timeout(function () {\r\n                        scope.section.isLoading = false;\r\n                        scope.section.isContentLoaded = !angular.copy(scope.section.isLazyLoadEnabled);\r\n                        $timeout.cancel(cancelTOut);\r\n                        cancelTOut = null;\r\n                    }, scope.$index * 500);\r\n\r\n                    //  Since smart-component-injector changes the scope hierarchy, change the parent scope ref accordingly\r\n                    scope.parentScopeRef = element.closest('smart-component-injector').length > 0 ? element.closest('smart-component-injector').scope() : scope.$parent.$parent.$parent.$parent;\r\n\r\n                    commonAttributes = ' label=\"{{section.label | translate}}\" config=\"section\" model=\"modelData\" plain=\"{{section.plain}}\" is-sequential=\"{{isSequential}}\" ' + formWidgetUtils.getAttributesMapping('primary', scope.extendedSectionConfig, scope, true) + ' parent-scope=\"' + (scope.section.controller ? '$parent.$$childTail' : 'parentScopeRef') + '\" form-widget-id=\"{{formWidgetId}}\" ';\r\n\r\n                    commonAttributes += \"revision-mode=\" + ((!scope.revisionMode || scope.revisionMode == \"false\") ? \"'false'\" : \"'true'\"); // added for revision mode\n\r\n                    html += '<smart-section id=' + scope.formWidgetId + '-section-' + scope.$index + ' ' + (scope.enableFieldPreview ? ' enable-field-preview=\"true\" ' : ' ') + commonAttributes + formWidgetUtils.mapEvents([\r\n                        { type: 'on-click', listener: 'onSectionClick(section)' },\n                        // { type: 'on-header-click', listener: formWidgetUtils.generateFunctionWithParams(scope.section.onHeaderClick, '$parent.$parent.$parent.$parent', true) },\n                        { type: 'on-header-click', listener: 'onSectionHeaderClick(section)' },\n                          { type: 'on-click-switchable', listener: formWidgetUtils.generateFunctionWithParams(scope.section.onClickSwitchable, '$parent.$parent.$parent.$parent', true) }\n                    ]) + '></smart-section>';\r\n\r\n                    if (scope.section.controller) {\r\n                        html += '</div>';\r\n                    }\r\n                }\r\n                else {\r\n                    var ngModelMapping, optionsMapping;\r\n\r\n\r\n                    if (scope.property.type == 'subsection') {\r\n                        ngModelMapping = 'model-data=\"model.' + scope.property.data + '\"' + 'form-model=\"model\"';\r\n                    }\r\n                    else if (scope.property.type == 'dropdown') {\r\n                        ngModelMapping = 'ng-model=\"model.' + scope.property.data + '\"';\r\n                        if (angular.isDefined(scope.property.optionsData))\r\n                            optionsMapping = 'options=\"model.' + scope.property.optionsData + '\"';\r\n                    }\r\n                    else {\r\n                        ngModelMapping = 'ng-model=\"model.' + scope.property.data + '\"';\r\n\r\n                        try {\r\n                            if (scope.property.attributes.ngModelOptions.getterSetter) {\r\n                                ngModelMapping = 'ng-model=\"parentScope.' + scope.property.data + '\"';\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n\r\n                    var areaType = false;\r\n                    if (typeof scope.property.attributes != 'undefined' && typeof scope.property.attributes.type != 'undefined' && scope.property.attributes.type == 'area')\r\n                    \tareaType = true;\r\n\r\n                    commonAttributes = ' class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + (scope.property.type != 'subsection' ? (scope.property.type == 'textfield' && areaType) ? ' area-height-manager' : ' line-height-manager' : '') + '\" label=\"{{property.label | translate}}\" focus=\"' + (typeof scope.property.focus == 'string' ? 'parentScope.' + scope.property.focus : 'property.focus') + '\" validate=\"' + (typeof scope.property.validate == 'string' ? 'parentScope.' + scope.property.validate : 'property.validate') + '\" ' + ngModelMapping + ' ' + optionsMapping + ' ' + formWidgetUtils.getAttributesMapping('primary', scope.property, scope) + ' parent-element=\"{{formWidgetId}}\" ' + formWidgetUtils.getAttributesMapping('secondary', scope.property.attributes, scope);\r\n                    if (scope.property.showInfo) {\r\n                        commonAttributes += 'showinfo =\"' + $translate.instant(scope.property.showInfo) + '\"';\r\n                    }\r\n           \r\n                    switch (scope.property.type) {\r\n                        case 'textfield':\n                            var enableFieldPreview = scope.enableFieldPreview == 'true' || scope.enableFieldPreview == true;\n\n                            if (enableFieldPreview) {\r\n                                scope.isPreviewMode = true;\r\n                                html = '<div style=\"margin-bottom: 15px;\" class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + ' input-field\" smart-placeholder ng-if=\"isPreviewMode\"></div>';\r\n                            }\n                            else {\r\n                                html = '';\r\n                            }\r\n\r\n                            html += '<smart-textfield' + (enableFieldPreview ? ' ng-if=\"!isPreviewMode\" ' : ' ') + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-focus', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onFocus, 'parentScope') },\r\n                                { type: 'on-blur', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onBlur, 'parentScope') },\r\n                                { type: 'on-key-up', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyUp, 'parentScope') },\r\n                                { type: 'on-key-down', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyDown, 'parentScope') },\r\n                                { type: 'on-key-press', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onKeyPress, 'parentScope') },\r\n                                { type: 'on-enter', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onEnter, 'parentScope') },\r\n                                { type: 'on-select', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onSelect, 'parentScope') },\r\n                                { type: 'on-date-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDateChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-textfield>';\r\n                            break;\r\n\r\n                        case 'dropdown':\r\n                        case 'select':\r\n                            html = '<smart-select validate=\"property.validate\" ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-select>';\r\n                            break;\r\n\r\n                        case 'radio':\r\n                            html = '<smart-radio gap=\"true\"' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-radio>';\r\n                            break;\r\n\r\n                        case 'checkbox':\r\n                            html = '<smart-checkbox fill=\"true\" min-height=\"50px\" ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-checkbox>';\r\n                            break;\r\n\r\n                        case 'switch':\r\n                            html = '<smart-switch ' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                { type: 'on-change', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onChange, 'parentScope') },\r\n                                { type: 'on-destroy', listener: formWidgetUtils.generateFunctionWithParams(scope.property.onDestroy, 'parentScope') }\r\n                            ]) + '></smart-switch>';\r\n                            break;\r\n\r\n                        case 'subsection':\r\n                            /*\r\n                             *  Check if subsection is angular2 enabled i.e. if sub-section should boostrap Angular2 app\r\n                             */\r\n                            if (scope.property.isAngular2Enabled) {\r\n                                html = $templateCache.get(scope.property.templateUrl);\r\n                            }\r\n                            else {\r\n                                /*\r\n                                 *  Convert onLoad function in a way that function name should be converted to subsection controller function\r\n                                 *  and its parameteres should be converted into parent controller's variables\r\n                                 */\r\n                                var onLoadFunction = '';\r\n                                if (scope.property.onLoad == '' || scope.property.onLoad == undefined || scope.property.onLoad == null) {\r\n                                    scope.property.onLoad = '';\r\n                                }\r\n                                if (scope.property.onLoad != '') {\r\n                                    onLoadFunction = formWidgetUtils.generateFunctionWithParams(scope.property.onLoad, 'parentScope');\r\n                                    onLoadFunction = onLoadFunction.replace('parentScope.' + scope.property.onLoad.split('(')[0], '$$$childHead.' + scope.property.onLoad.split('(')[0]);\r\n                                    onLoadFunction = onLoadFunction.replace(',property', '');\r\n                                }\r\n                                html = '<smart-subsection class=\"' + formWidgetUtils.getColspanClass(scope.property.colspan) + ' padding0\" controller=\"{{property.controller}}\" init=\"{{property.init}}\" template-url=\"{{property.templateUrl}}\" parent-scope=\"parentScope\" widget-scope=\"parentScope.$parent.$parent.$parent\"' + commonAttributes + formWidgetUtils.mapEvents([\r\n                                    { type: 'on-load', listener: onLoadFunction }\r\n                                ]) + '></smart-subsection>';\r\n                            }\r\n                            break;\r\n\r\n                        case 'revision':\r\n                            var revisionAttrs = [\r\n                                \"class = '\" + formWidgetUtils.getColspanClass(scope.property.colspan) + \"'\",\r\n                                \"label='{{::property.label | translate}}'\",\r\n                                \"old-data='::property.attributes.oldData'\",\r\n                                \"new-data='::property.attributes.newData' ng-if='::property.label'\"\r\n                            ].join(\" \");\r\n                            html = '<smart-revision '+ revisionAttrs +'></smart-revision>';\r\n                            break;\r\n                    }\r\n                }\r\n                \r\n\r\n                element.html(html);\r\n\r\n                if (scope.property && scope.property.isAngular2Enabled) {\r\n                    if (scope.property.isAngular2AppBootstrapped) {\r\n                        if (!window.angular2App.app._destroyed) {\r\n                            window.angular2App.app.destroy();\r\n                        }\r\n                        window.angular2App.platformBrowserDynamic.bootstrapModule(window.angular2App.moduleRef);\r\n                    }\r\n                    else {\r\n                        scope.property.isAngular2AppBootstrapped = true;\r\n                    }\r\n                }\r\n                else {\r\n                    $compile(element.contents())(scope);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    //angular.module('SMART2').directive('smartSectionPreview', ['$compile', '$translate', function ($compile, $translate) {\r\n    //    return {\r\n    //        restrict: 'AE',            \r\n    //        scope: false,\r\n    //        link: function (scope, element, attrs) {\r\n    //            var html = \"\";\r\n    //            var config = scope.$parent.config;\r\n    //            var model = scope.$parent.model;\r\n                \r\n\r\n    //            function getObjectValue(field, model, dataKey)\r\n    //            {\r\n    //                if (field.type)\r\n    //                {\r\n    //                    switch (field.type)\r\n    //                    {\r\n    //                        case 'textfield':\r\n    //                            if (field.attributes.type)\r\n    //                            {\r\n    //                                if (field.attributes.type == 'autocomplete') {\r\n    //                                    var obj = eval(\"model.\" + field.data);\r\n    //                                    if (obj)\r\n    //                                    {\r\n    //                                        if (field.attributes.displayformat.indexOf('-') > -1)\r\n    //                                        {\r\n    //                                            var splittedDisplayFormat = field.attributes.displayformat.split('-');\r\n    //                                            var result = \"\";\r\n    //                                            for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                                result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                                if (i < splittedDisplayFormat.length - 1)\r\n    //                                                    result += '--';\r\n    //                                            }\r\n    //                                            return (result ? result : '--');\r\n    //                                        }\r\n    //                                        var tVal = eval(\"obj.\" + field.attributes.displayformat.replace('{', '').replace('}', ''));\r\n    //                                        return (tVal ? tVal : '--');\r\n    //                                    }\r\n    //                                    return '--'; //eval(\"model.\" + field.data + \".\" + field.attributes.displayformat.replace('{', '').replace('}', ''));\r\n    //                                }\r\n    //                                else if (field.attributes.type == 'date') {\r\n    //                                    return getFormatedDate( eval(\"model.\" + field.data ), field.attributes.format);\r\n    //                                }\r\n    //                            }\r\n    //                            var tVal = eval(\"model.\" + field.data);\r\n    //                            return (tVal ? tVal : '');\r\n    //                            break;\r\n    //                        case 'dropdown':\r\n    //                            var obj = eval(\"model.\" + field.data);\r\n    //                            if (obj) {\r\n    //                                if (field.attributes.datakey.indexOf('-') > -1) {\r\n    //                                    var splittedDisplayFormat = field.attributes.datakey.split('-');\r\n    //                                    var result = \"\";\r\n    //                                    for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                        result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                        if (i < splittedDisplayFormat.length - 1)\r\n    //                                            result += '--';\r\n    //                                    }\r\n    //                                    return result;\r\n    //                                }\r\n    //                                var tVal = eval(\"obj.\" + field.attributes.datakey.replace('{', '').replace('}', ''));\r\n    //                                return (tVal ? tVal : '--');\r\n    //                            }\r\n    //                            return '--';\r\n    //                            break;\r\n    //                        case 'subsection':\r\n    //                            var obj = eval(\"model.\" + field.data);\r\n    //                            if (obj) {\r\n    //                                if (dataKey) {\r\n    //                                    if (dataKey.indexOf('-') > -1) {\r\n    //                                        var splittedDisplayFormat = dataKey.split('-');\r\n    //                                        var result = \"\";\r\n    //                                        for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n    //                                            result += eval(\"obj.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n    //                                            if (i < splittedDisplayFormat.length - 1)\r\n    //                                                result += '--';\r\n    //                                        }\r\n    //                                        return result;\r\n    //                                    }\r\n    //                                    var tVal = eval(\"obj.\" + dataKey.replace('{', '').replace('}', ''));\r\n    //                                    return (tVal ? tVal : '--');\r\n    //                                }\r\n    //                            }\r\n    //                            return '--';\r\n    //                            break;\r\n    //                        default:\r\n    //                            return eval(\"model.\" + field.data)\r\n    //                            break;\r\n                                \r\n    //                    }\r\n    //                }\r\n    //                return eval(\"model.\" + field.data)\r\n    //            }\r\n\r\n\r\n    //            function getFormatedDate(dateObj, dateFormate) {\r\n    //                dateFormate = dateFormate.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n    //               return moment(dateObj).format(dateFormate);\r\n    //                //var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n    //                // tmpModel = tmpModel.split('+');\r\n    //                // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n    //                //return moment(tmpModel).format(dateFormate);\r\n    //            }\r\n    //            function GetFieldLabel(field, model)\r\n    //            {\r\n                   \r\n    //                return $translate.instant(field.label);\r\n    //            }\r\n\r\n    //            for (var i = 0; i < config.rows.length; i++)\r\n    //            {\r\n                   \r\n    //                html+= \"<div class=\\\"row\\\" > <div class=\\\"col s12\\\" >\";\r\n    //                var row = config.rows[i];\r\n    //                for (var j = 0; j < row.properties.length; j++)\r\n    //                {\r\n    //                    Textid++;\r\n    //                    var field = row.properties[j];\r\n    //                    if (field.isVisible && !field.isHidden) {\r\n    //                        if (field.type) {\r\n    //                            if (field.type == 'subsection')\r\n    //                            {\r\n    //                                if (field.attributes) {\r\n    //                                    if (field.attributes.previewData) {\r\n    //                                        for (var x = 0; x < field.attributes.previewData.length; x++) {\r\n    //                                            Textid++;\r\n    //                                            var previewField = field.attributes.previewData[x];\r\n    //                                            html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                           \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model, previewField.data) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                           \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(previewField, model) + \"</label></div></div>\";\r\n    //                                        }\r\n    //                                    }\r\n    //                                }\r\n    //                            }\r\n    //                            else\r\n    //                            {\r\n    //                                html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                               \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                               \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(field, model) + \"</label></div></div>\";\r\n    //                            }\r\n    //                        } else {\r\n    //                            html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + getObjectValue(field, model) + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + GetFieldLabel(field, model) + \"</label></div></div>\";\r\n    //                        }\r\n    //                    }\r\n    //                    }\r\n    //                    html+=\"</div></div>\";\r\n\r\n\r\n    //            }\r\n\r\n\r\n\r\n    //            element.html(html);              \r\n    //            //$compile(element.contents())(scope);\r\n                \r\n    //        }\r\n    //    };\r\n    //}]);\r\n\r\n\r\n    //angular.module('SMART2').directive('smartFieldPreview', ['$compile', '$translate', function ($compile, $translate) {\r\n    //    return {\r\n    //        restrict: 'AE',\r\n    //        scope: false,\r\n    //        link: function (scope, element, attrs) {\r\n    //            var config = scope.config;\r\n    //            var localScope = scope;\r\n\r\n    //            if (config.attributes) {\r\n    //                var unbinedWatcher = scope.$watch(config.attributes.previewWatch, function (val) {\r\n    //                    if (val) {\r\n    //                        if (config.isVisible) {\r\n    //                            var obj = localScope;\r\n    //                            var html = \"\";\r\n    //                            var fields = config.attributes.previewData;\r\n    //                            if (fields) {\r\n    //                                for (var x = 0; x < fields.length; x++) {\r\n    //                                    Textid++;\r\n    //                                    var previewField = fields[x];\r\n    //                                    var lbl = $translate.instant(previewField.label);\r\n    //                                    var val = eval('obj.$parent.' + previewField.data);\r\n    //                                    if (!val) {\r\n    //                                        val = '--';\r\n    //                                    }\r\n    //                                    html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                   \"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + val + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                   \"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + lbl + \"</label></div></div>\";\r\n    //                                }\r\n    //                                //Textid++;\r\n    //                                //html += \"<div class=\\\"col s12 m6 l4 xl3 xxl2 line-height-manager input-field\\\" ><div class=\\\"elements-include\\\">\" +\r\n    //                                //\"<input type=\\\"text\\\"  id=\\\"txt-\" + Textid + \"\\\" class=\\\"left-align ng-not-empty\\\" value=\\\"\" + val + \"\\\" readonly=\\\"readonly\\\" disabled />\" +\r\n    //                                //\"<label  id=\\\"label-for-txt-\" + Textid + \"\\\"  for=\\\"txt-\" + Textid + \"\\\" class=\\\"active\\\" >\" + scope.$parent.label + \"</label></div></div>\";\r\n\r\n    //                                element.html(html);\r\n    //                            }\r\n    //                        }\r\n    //                        unbinedWatcher();\r\n    //                    }\r\n    //                });\r\n    //            }\r\n    //        }\r\n\r\n    //    };\r\n    //}]);\r\n\r\n})();    \n  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Select\r\n   * @description This directive is useful for creating a select ui element.\r\n   * \r\n   * @attr {String} label\r\n   *    Label to be displayed for identification of this ui element\r\n   * @attr {Array} options\r\n   *    Number of options to be created\r\n   * @attr {Var} ng-model\r\n   *    Default selected option. Please refer example for more details.\r\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\r\n   * @attr {String} datakey\r\n   *    ng-model variable will be updated on the basis of this property. datakey will be used to display an option when displaykey is not set.\r\n   * @attr {String} displaykey\r\n   *    A property of an option to be used to display an option\r\n   * @attr {Boolean} disable\r\n   *    If set to true, none of the options can be selected\r\n   * @attr {Boolean} focus \r\n   *    If set to true, this ui element will be focused\r\n   * @attr {Boolean} validate\r\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n   * @attr {Array} rules \r\n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n   * @attr {String} error-message \r\n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n   * @attr {Boolean} is-mandatory \r\n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n   * @attr {Boolean} is-visible \r\n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-change\r\n   *    Callback function when option is changed\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"currency\": { \"code\": \"€\", \"name\": \"EUR\" }\r\n            }, \r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"Currency\",\r\n                                        \"type\": \"dropdown\",      //  select will also work\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"currency\",\r\n                                        \"colspan\": 1,\r\n                                        \"onChange\": \"onChange\",  //  controller function\r\n                                        \"attributes\": {\r\n                                            \"options\": [{\r\n                                                \"code\": \"$\",\r\n                                                \"name\": \"USD\"\r\n                                            }, {\r\n                                                \"code\": \"€\",\r\n                                                \"name\": \"EUR\"\r\n                                            }],\r\n                                            \"datakey\": \"name\"\r\n                                        },\r\n                                        \"rules\": [\r\n                                            { \r\n                                                \"rule\": \"this.title == \\\"Option 2\\\"\", \r\n                                                \"error\": \"Invalid selection\" \r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]    \r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n   * @example\r\n   Static:\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\"\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n\r\n   * @example\r\n   Select with disabled state:\r\n   <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" disable=\"true\"></smart-radio> \r\n\r\n   * @example\r\n   Select with ng-model as 'String' (In following example, when an option is selected, ng-model would be either '$' or '€'):\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\"\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = \"$\";\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"code\" displaykey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n\r\n   * @example\r\n   Select with disabled option:\r\n   Controller:\r\n       $scope.currencyOptions = [{\r\n            \"code\": \"$\",\r\n            \"name\": \"USD\",\r\n            \"disable\": true\r\n       }, {\r\n           \"code\": \"€\",\r\n           \"name\": \"EUR\"\r\n       }];\r\n       $scope.selectedCurrency = { \"code\": \"€\", \"name\": \"EUR\" };\r\n       $scope.onChange = function(selectedCurrency) {\r\n           console.log(selectedCurrency);\r\n       };\r\n   Usage:\r\n       <smart-select label=\"Currency\" ng-model=\"selectedCurrency\" options=\"currencyOptions\" datakey=\"name\" on-change=\"onChange(selectedCurrency)\"></smart-select> \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var selectId = 0;\r\n    angular.module('SMART2').directive('smartSelect', ['$timeout', '$window', '$translate', 'ScrollTo', 'RuleEngine','smartSelectService',\r\n         (typeof isDirectiveV2enabled !== 'undefined' ? (isDirectiveV2enabled() == true ? smartSelectFunc2 : smartSelectFunc1) : smartSelectFunc1)\r\n    ]);\r\n\r\n    function smartSelectFunc1($timeout, $window, $translate, ScrollTo, RuleEngine) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModelCopy: '=?ngModel',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                disable: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                displaykey: '@',\r\n                removable: '@',\r\n                preview: '@',\r\n                customoption: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                customMessage: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                //debugger;\r\n                var options, isNgModelWatchAdded = false;\r\n                var onNgModel = function () { };\r\n                scope.selectOptions = [];\r\n                var typeOfNgModel;\r\n\r\n                var isNgModelFunction = typeof scope.ngModelCopy == 'function';\r\n\r\n                // create unique id\r\n                selectId = selectId + 1;\r\n                scope.dropDownId = \"dropdown-\" + selectId;\r\n\r\n                // key to be used to bind options\r\n                scope.dataKey = scope.datakey ? scope.datakey : 'title';\r\n                scope.displayKey = scope.displaykey ? scope.displaykey : scope.dataKey;\r\n\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                if (isNgModelFunction) {\r\n                    try {\r\n                        ngModelCtrl.$render = function () {\r\n                            scope.ngModel = ngModelCtrl.$modelValue;\r\n                            scope.selectedOption = scope.ngModel;\r\n                        };\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                var updateView = function () {\r\n                    if (isNgModelFunction) {\r\n                        try {\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\r\n                /*\r\n                 * Check if new option is added\r\n                 */\r\n                //scope.customOption = \r\n                scope.labelVal = \"\";\r\n                scope.customOptionReset = false;\r\n                var onOptions = scope.$watch('options', function (newOptions) {\r\n                    if (!newOptions) {\r\n                        return;\r\n                    }\r\n                    var optLen = newOptions.length;\r\n                    if (newOptions && optLen > 0) {\r\n                        //if (scope.label && newOptions[0][scope.dataKey] != scope.label) {\r\n                        var selLabel;\r\n                        if (scope.label) {\r\n                            selLabel = scope.label;\r\n                        } else {\r\n                            selLabel = $translate.instant('chooseOptionMsg');\r\n                        }\r\n                        var isDisabledOpt = true;\r\n                        if (scope.customoption) {\r\n                            selLabel = scope.customoption;\r\n                            isDisabledOpt = false;\r\n                            scope.customOptionReset = true;\r\n                        }\r\n                        if (scope.dataKey === scope.displayKey) {\r\n                            options = [{ title: selLabel, disable: isDisabledOpt, id: 'fakeOptionId' }].concat(newOptions);\r\n                            options[0][scope.displayKey] = options[0].title;\r\n                        }\r\n                        else {\r\n                            var firstOption = { disable: isDisabledOpt, id: 'fakeOptionId' };\r\n                            firstOption[scope.dataKey] = selLabel;\r\n                            firstOption[scope.displayKey] = selLabel;\r\n                            options = [firstOption].concat(newOptions)\r\n                        }\r\n\r\n                        //if (scope.$eval(scope.isMandatory)) {\r\n                        //    options = newOptions;\r\n                        //}\r\n                        //else {\r\n\r\n                        //    options = [{ title: selLabel, disable: false, id: 'fakeOptionId' }].concat(newOptions);\r\n                        //    options[0][scope.displayKey] = options[0].title;\r\n                        //}\r\n                        //}\r\n                        //else {\r\n                        //    options = newOptions;\r\n                        //}\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n\r\n                    var optionGroups = [],\r\n                        oldOptLen = options.length;\r\n\r\n                    for (var i = 0; i < oldOptLen; i++) {\r\n                        if (options[i].hasOwnProperty('groupName') && optionGroups.indexOf(options[i].groupName) == -1) {\r\n                            optionGroups.push(options[i].groupName);\r\n                        }\r\n                    }\r\n\r\n                    //if (optionGroups.length > 0) {\r\n                    //    options.splice(0, 1);\r\n                    //}\r\n\r\n                    scope.optionGroups = angular.copy(optionGroups);\r\n\r\n                    scope.selectOptions = options;\r\n\r\n                    //if (!scope.selectedOption) {\r\n                    //    scope.selectedOption = options[0];\r\n                    //}\r\n\r\n                    //try {\r\n                    //    scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                    //}\r\n                    //catch (e) { }\r\n\r\n                    if (!isNgModelWatchAdded) {\r\n                        onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                            if (angular.isUndefined(typeOfNgModel) && (newVal !== '' && newVal != undefined && newVal != null)) {\r\n                                typeOfNgModel = typeof newVal;\r\n                            }\r\n                            var newValueCopy;\r\n\r\n                            if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                for (var i = 0; i < oldOptLen; i++) {\r\n                                    if (newVal == options[i][scope.dataKey]) {\r\n                                        newValueCopy = options[i];\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                newValueCopy = newVal;\r\n                            }\r\n                            scope.selectedOption = angular.copy(newValueCopy);\r\n\r\n                            try {\r\n                                if (!scope.selectedOption) {\r\n                                    scope.selectedOption = angular.copy(options[0]);\r\n                                } else if (!scope.selectedOption[scope.displayKey]) {\r\n                                    scope.selectedOption = angular.copy(options[0]);\r\n                                }\r\n                                scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                                if (options[0] != scope.selectedOption[scope.dataKey]) {\r\n                                    scope.labelVal = scope.selectedOption[scope.dataKey];\r\n                                    if (scope.customoption && scope.customoption != scope.selectedOption[scope.dataKey]) {\r\n                                        scope.customOptionReset = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n\r\n                            var tOut = setTimeout(function () {\r\n                                var el = angular.element(\"#\" + scope.dropDownId);\r\n                                el.material_select();\r\n                                el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                    if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function () {\r\n                                        var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                        }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                        }\r\n                                      }, 0);\r\n                                   }\r\n                                });\r\n                                //el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                //    var _this = $(this);\r\n                                //  scope.ngChange(_this.val());\r\n                                //});\r\n                                clearTimeout(tOut);\r\n                                tOut = null;\r\n                            });\r\n                            // selectFixdd();\r\n\r\n                        }, true);\r\n\r\n                        isNgModelWatchAdded = true;\r\n                    }\r\n                    else { //If options are changes dynamically then again .material_select() will fired to update latest options in materialize select.\r\n                        var selectTout = setTimeout(function () {\r\n                            angular.element(\"#\" + scope.dropDownId).material_select();\r\n                            element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function () {\r\n                                        var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                        listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                        }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                        }\r\n                                    }, 0);\r\n                                            }\r\n                            });\r\n                            clearTimeout(selectTout);\r\n                            selectTout = null;\r\n                        });\r\n                    }\r\n                    var disableTOut = setTimeout(function () {\r\n                        var el = angular.element(\"#\" + scope.dropDownId);\r\n                        el.children().eq(0).attr(\"disabled\", \"disabled\");\r\n                        el.material_select();\r\n                        el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                setTimeout(function () {\r\n                                    var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                    $dropdownDiv.scrollTop(0);\r\n                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                        return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                    }))).offset();\r\n                                    if (listElOffset) {\r\n                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                    }\r\n                                }, 0);\r\n                            }\r\n                        });\r\n                        // el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                        //    var _this = $(this);\r\n                        //    scope.ngChange(_this.val());\r\n                        //});\r\n                        clearTimeout(disableTOut);\r\n                        disableTOut = null;\r\n                    });\r\n\r\n                    // selectFixdd();\r\n\r\n                    /*   function selectFixdd() {\r\n                           setTimeout(function () {\r\n                               if (scope.$eval(attrs.fixed)) {\r\n                                   $(element).find('input.select-dropdown').bind('focus', function (e) {\r\n                                       (function ($t) {\r\n                                           setTimeout(function () {\r\n                                               $(element).find('.dropdown-content').addClass('fixeddd');\r\n                                               var topOffset = $(e.target).offset().top - $(window).scrollTop();\r\n                                               var ddCnt = $t.next('.dropdown-content');\r\n                                               ddCnt.css({\r\n                                                   'left': $(e.target).offset().left + 'px', 'top': topOffset + 'px'\r\n                                               });\r\n                                               ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n\r\n                                               var ddHgt = ddCnt.css('height'),\r\n                                                   winHgt = angular.element(window).height();\r\n                                               if ((parseInt(ddHgt) + topOffset) > winHgt) {\r\n                                                   var diffHgt = (parseInt(ddHgt) + topOffset) - winHgt;\r\n                                                   ddCnt.css('top', (topOffset - diffHgt - 15) + 'px');\r\n                                               }\r\n\r\n                                               angular.element($window).on(\"scroll.smartFixedSmartSelect\", function () {\r\n                                                   if (ddCnt.hasClass('active'))\r\n                                                       ddCnt.hide();\r\n                                               });\r\n                                           });\r\n                                       })($(this));\r\n                                   });\r\n                               }\r\n                           }, 500);\r\n                       }\r\n                       */\r\n                }, true);\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n\r\n                /*\r\n                 * Watch needs to be added on disable since element needs to be updated\r\n                 */\r\n                var sOption = scope.label;\r\n                var onDisable = scope.$watch('disable', function (newVal) {\r\n                    var isDisableTout = setTimeout(function () {\r\n                        var el = angular.element(\"#\" + scope.dropDownId);\r\n                        el.material_select();\r\n                        element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                    setTimeout(function() {\r\n                                        var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                        $dropdownDiv.scrollTop(0);\r\n                                        listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                            return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                    }))).offset();\r\n                                        if (listElOffset) {\r\n                                            $dropdownDiv.scrollTop(listElOffset.top -$dropdownDiv.offset().top);\r\n                                            }\r\n                                            }, 0);\r\n                            }\r\n                        });\r\n                        el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                            /*var _this = $(this);\r\n                            if (scope.ngModelCopy != _this.val()) {\r\n                                scope.ngModelCopy = {\r\n                                    title: _this.val()\r\n                                };\r\n                                scope.ngModelCopy[scope.dataKey] = _this.val();\r\n                            }*/\r\n                            scope.validateRules()\r\n                        });\r\n                        clearTimeout(isDisableTout);\r\n                        isDisableTout = null;\r\n                    });\r\n                });\r\n\r\n\r\n\r\n                /*\r\n                 * Focus field when focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate field whene validate is set to true\r\n                 */\r\n                var onValidate = scope.$watch('validate', function (newValue) {\r\n                    if (newValue != undefined && newValue) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Validate rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    //debugger;\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    if (scope.$eval(scope.isMandatory) && scope.label) {\r\n                        if (!scope.ngModelCopy || scope.ngModelCopy.name === scope.label || (scope.customoption && scope.ngModelCopy.name === scope.customoption) || scope.ngModelCopy[scope.dataKey] === scope.label) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = scope.customMessage ? scope.customMessage : $translate.instant(\"selectOptionErrMsg\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\r\n                            ruleLength = rules.length;\r\n\r\n                        for (var i = 0; i < ruleLength; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                if (!isFoundInvalid) {\r\n                                    RuleEngine.isValid(rules[i], function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                };\r\n                var ch = false;\r\n                scope.ngChange = function (selectedOption, manual) {\r\n                    if (!manual) ch = true;\r\n                    sOption = selectedOption;\r\n                    if (selectedOption == scope.customoption) {\r\n                        scope.customOptionReset = true;\r\n                        //options[0][scope.dataKey] = scope.label;\r\n                    }\r\n                    else {\r\n                        scope.customOptionReset = false;\r\n                    }\r\n\r\n                    var tmpSelectedOption;\r\n                    if (!scope.$eval(scope.isMandatory) && selectedOption == options[0][scope.displayKey] && scope.optionGroups.length == 0) {\r\n                        tmpSelectedOption = '';\r\n                    }\r\n                    else {\r\n                        var optLen = options.length;\r\n                        for (var i = 0; i < optLen; i++) {\r\n                            if (options[i][scope.dataKey] == selectedOption) {\r\n                                tmpSelectedOption = options[i];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isNgModelFunction) {\r\n                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                            scope.ngModel = tmpSelectedOption[scope.dataKey];\r\n                        }\r\n                        else {\r\n                            scope.ngModel = tmpSelectedOption;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                            if (!scope.$eval(scope.isMandatory) && (selectedOption == options[0][scope.displayKey] || selectedOption == undefined || selectedOption == 'fakeOptionId')) {\r\n                                scope.ngModelCopy = '';\r\n                            }\r\n                            else {\r\n                                scope.ngModelCopy = tmpSelectedOption[scope.dataKey];\r\n                            }\r\n                        }\r\n                        else {\r\n                            scope.ngModelCopy = tmpSelectedOption;\r\n                        }\r\n                    }\r\n                    scope.labelVal = \"\";\r\n                    if (selectedOption == scope.label && selectedOption == options[0][scope.displayKey]) {\r\n                        scope.labelVal = selectedOption;\r\n                    }\r\n                    updateView();\r\n                    scope.selectedOption = tmpSelectedOption == '' ? options[0] : angular.copy(tmpSelectedOption);\r\n                    scope.validateRules();\r\n                    var clrTout = $timeout(function () {\r\n                        scope.onChange();\r\n                        $timeout.cancel(clrTout);\r\n                        clrTout = null;\r\n                    });\r\n                };\r\n\r\n\r\n                scope.$on('$destroy', function () {\r\n                    angular.element(\"#\" + scope.dropDownId).material_select('destroy');\r\n                    onOptions();\r\n                    onDisable();\r\n                    onNgModel();\r\n                    onFocus();\r\n                    onValidate();\r\n                    angular.element($window).off(\"scroll.smartFixedSmartSelect\");\r\n                });\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartSelect/smartSelectTemplate.html'\r\n        };\r\n    }\r\n\r\n    \r\n    function smartSelectFunc2($timeout, $window, $translate, ScrollTo, RuleEngine, smartSelectService) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                options: '=?',\r\n                ngModelCopy: '=?ngModel',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                disable: '@',\r\n                multiple: '@',\r\n                datakey: '@',\r\n                displaykey: '@',\r\n                removable: '@',\r\n                preview: '@',\r\n                customoption: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                customMessage: '@'\r\n            },\r\n            compile: function() {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        $(document).ready(function () {// To avoid flicker and timeout\r\n                            // Declare all the vars at the top\r\n                            var options = [],\r\n                                isNgModelWatchAdded = false,\r\n                                 onNgModel = function () { },\r\n                                 typeOfNgModel,\r\n                                isNgModelFunction = typeof scope.ngModelCopy == 'function';\r\n\r\n                            scope.selectOptions = [];\r\n                            // create unique id\r\n                            selectId = selectId + 1;\r\n                            scope.dropDownId = \"dropdown_\" + selectId;\r\n                            // key to be used to bind options\r\n                            scope.dataKey = scope.datakey ? scope.datakey : 'title';\r\n                            scope.displayKey = scope.displaykey ? scope.displaykey : scope.dataKey;\r\n\r\n                            /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                            if (isNgModelFunction) {\r\n                                try {\r\n                                    ngModelCtrl.$render = function () {\r\n                                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                        scope.selectedOption = scope.ngModel;\r\n                                    };\r\n                                }\r\n                                catch (e) { }\r\n                            }\r\n                            var updateView = function () {\r\n                                if (isNgModelFunction) {\r\n                                    try {\r\n                                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                    }\r\n                                    catch (e) { }\r\n                                }\r\n                            };\r\n                            /*\r\n                             * Check if new option is added\r\n                             */\r\n                            scope.labelVal = \"\";\r\n                            scope.customOptionReset = false;\r\n\r\n                            //To be triggered if option binding is delayed\r\n                            function watchOptions(a_options) {\r\n                                var optLen = a_options.length;\r\n                                if (a_options && optLen > 0) {\r\n                                    var selLabel,\r\n                                        isDisabledOpt = true;\r\n                                    if (scope.label) {\r\n                                        selLabel = scope.label;\r\n                                    } else {\r\n                                        selLabel = $translate.instant('chooseOptionMsg');\r\n                                    }\r\n\r\n                                    if (scope.customoption) {\r\n                                        selLabel = scope.customoption;\r\n                                        isDisabledOpt = false;\r\n                                        scope.customOptionReset = true;\r\n                                    }\r\n                                    if (scope.dataKey === scope.displayKey) {\r\n                                        options = [{ title: selLabel, disable: isDisabledOpt, id: 'fakeOptionId' }].concat(a_options);\r\n                                        options[0][scope.displayKey] = options[0].title;\r\n                                    }\r\n                                    else {\r\n                                        var firstOption = { disable: isDisabledOpt, id: 'fakeOptionId' };\r\n                                        firstOption[scope.dataKey] = selLabel;\r\n                                        firstOption[scope.displayKey] = selLabel;\r\n                                        options = [firstOption].concat(a_options)\r\n                                    }\r\n                                    scope.selectOptions = options;\r\n                                    var optionGroups = [],\r\n                                        len = options.length;\r\n                                    for (var i = 0; i < len; i++) {\r\n                                        var tmp = options[i];\r\n                                        if (tmp.hasOwnProperty('groupName') && optionGroups.indexOf(tmp.groupName) == -1) {\r\n                                            optionGroups.push(tmp.groupName);\r\n                                        }\r\n                                    }\r\n                                    scope.optionGroups = angular.copy(optionGroups);\r\n                                    watchModel();\r\n                                    smartSelectService.buildOptionsList(scope.optionGroups, scope.selectOptions,scope,element);\r\n                                } else {\r\n                                    return;\r\n                                };\r\n\r\n                            }\r\n\r\n                            // This function watches the selected value from the \r\n                            // dropdown and triggers on selection change\r\n                            function watchModel() {\r\n                                if (!isNgModelWatchAdded) {\r\n                                    onNgModel = scope.$watch(isNgModelFunction ? 'ngModel' : 'ngModelCopy', function (newVal) {\r\n                                        if (angular.isUndefined(typeOfNgModel) && (newVal !== '' && newVal != undefined && newVal != null)) {\r\n                                            typeOfNgModel = typeof newVal;\r\n                                        }\r\n                                        var newValueCopy;\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            var len = options.length;\r\n                                            for (var i = 0; i < len; i++) {\r\n                                                var tmp = options[i];\r\n                                                if (newVal == tmp[scope.dataKey]) {\r\n                                                    newValueCopy = tmp;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        else if (typeOfNgModel == 'object') {\r\n                                            scope.ngModel = newValueCopy = newVal;\r\n                                        }\r\n                                        else {\r\n                                            newValueCopy = newVal;\r\n                                        }\r\n                                        scope.selectedOption = angular.copy(newValueCopy);\r\n\r\n                                        try {\r\n                                            if (!scope.selectedOption) {\r\n                                                scope.selectedOption = angular.copy(options[0]);\r\n                                            } else if (!scope.selectedOption[scope.displayKey]) {\r\n                                                scope.selectedOption = angular.copy(options[0]);\r\n                                            }\r\n                                            scope.selectedOptionString = angular.copy(scope.selectedOption[scope.dataKey]);\r\n                                            if (options[0] != scope.selectedOption[scope.dataKey]) {\r\n                                                scope.labelVal = scope.selectedOption[scope.dataKey];\r\n                                                if (scope.customoption && scope.customoption != scope.selectedOption[scope.dataKey]) {\r\n                                                    scope.customOptionReset = false;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        catch (e) { }\r\n                                        smartSelectService.buildOptionsList(scope.optionGroups, scope.selectOptions, scope, element);\r\n                                        smartSelectService.updateLabelTemplate(scope, element);// added for update the label\r\n                                        angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                        element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                                setTimeout(function () {\r\n                                                    var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                                        listElOffset;\r\n                                                    $dropdownDiv.scrollTop(0);\r\n                                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                        return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                                    }))).offset();\r\n                                                    if (listElOffset) {\r\n                                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                    }\r\n                                                }, 0);\r\n                                            }\r\n                                        });\r\n                                        //selectFixdd();\r\n                                        element.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        }); \r\n                                    });\r\n                                    isNgModelWatchAdded = true;\r\n\r\n                                } else { //If options are changes dynamically then again .material_select() will fired to update latest options in materialize select.\r\n                                   var clrTout = setTimeout(function () {\r\n                                       angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                       element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                           if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                            setTimeout(function () {\r\n                                                var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                        listElOffset;\r\n                                                $dropdownDiv.scrollTop(0);\r\n                                                listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                    return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                                }))).offset();\r\n                                                if (listElOffset) {\r\n                                                    $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                }\r\n                                            }, 0);\r\n                                               }\r\n                                        });\r\n                                        element.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        });\r\n                                        clearTimeout(clrTout);\r\n                                        clrTout = null;\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            //watchOptions(scope.options); // onload data binding\r\n                            //To update value incase of late binding\r\n                            var collectionWatch = scope.$watchCollection('options', function (newValue) {\r\n                                if (newValue) {\r\n                                    watchOptions(newValue);\r\n                                }\r\n                            });\r\n\r\n                            /*function selectFixdd() {\r\n                                if (attrs.fixed) {\r\n                                    $(element).find('input.select-dropdown').bind('focus', function (e) {\r\n                                        (function ($t) {\r\n                                            var drpContent = $(element).find('.dropdown-content').addClass('fixeddd');\r\n                                            var topOffset = $(e.target).offset().top - $(window).scrollTop();\r\n                                            var ddCnt = $t.next('.dropdown-content');\r\n                                            ddCnt.css({\r\n                                                'left': $(e.target).offset().left + 'px', 'top': topOffset + 'px'\r\n                                            });\r\n                                            ddCnt.attr('style', function (i, s) { return s + 'display: block !important;' });\r\n\r\n                                            var ddHgt = ddCnt.css('height'),\r\n                                                winHgt = angular.element(window).height();\r\n                                            if ((parseInt(ddHgt) + topOffset) > winHgt) {\r\n                                                var diffHgt = (parseInt(ddHgt) + topOffset) - winHgt;\r\n                                                ddCnt.css('top', (topOffset - diffHgt - 15) + 'px');\r\n                                            }\r\n\r\n                                            angular.element($window).on(\"scroll.smartFixedSmartSelect\", function () {\r\n                                                if (ddCnt.hasClass('active'))\r\n                                                    ddCnt.hide();\r\n                                            });\r\n                                            drpContent = null;\r\n                                        })($(this));\r\n                                    });\r\n                                }\r\n                            }\r\n                            */\r\n                            scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                            /*\r\n                             * Watch needs to be added on disable since element needs to be updated\r\n                             */\r\n                            var sOption = scope.label;\r\n                            // Use watchgroup to watch all\r\n                            //Below declerations are to make watchGroup work on models\r\n                            scope.disable = (scope.disable) ? scope.disable : 1;\r\n                            scope.validate = (scope.validate) ? scope.validate : 2;\r\n                            var watchGrp = scope.$watchGroup(['disable', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                                if (newVal[0] !== oldVal[0]) {\r\n                                    var el = angular.element(\"#\" + scope.dropDownId);\r\n                                    if ((scope.disable === true && scope.disable !== 1) || (jQuery.type(scope.disable) === \"string\" && (scope.disable === \"true\"))) {\r\n                                        el.prop('disabled', 'disabled');\r\n                                        el.prop(\"readonly\", true);\r\n                                        el.attr('tabindex', -1);\r\n                                        el.material_select();\r\n                                        el.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                            if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                                setTimeout(function () {\r\n                                                    var $dropdownDiv = el.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                            listElOffset;\r\n                                                    $dropdownDiv.scrollTop(0);\r\n                                                    listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                        return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                                    }))).offset();\r\n                                                    if (listElOffset) {\r\n                                                        $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                                    }\r\n                                                }, 0);\r\n                                            }\r\n                                        });\r\n                                        el.parent().find(\"input.select-dropdown\").bind(\"close\", function () {\r\n                                            scope.validateRules()\r\n                                        });\r\n                                    }else\r\n                                    {\r\n                                        el.prop('disabled', false);\r\n                                        el.prop(\"readonly\", false);\r\n                                        el.removeAttr('tabindex');\r\n                                    }\r\n                                    angular.element(\"#\" + scope.dropDownId).material_select();\r\n                                    element.parent().find(\"input.select-dropdown\").off(\"openSelectList\").on(\"openSelectList\", function () {\r\n                                        if (this.value !== '' && this.value !== void 0 && this.value !== null) {\r\n                                        setTimeout(function () {\r\n                                            var $dropdownDiv = element.parent().find(\".dropdown-content.select-dropdown.active\"),\r\n                                                listElOffset;\r\n                                            $dropdownDiv.scrollTop(0);\r\n                                            listElOffset = $dropdownDiv.find(\"li\").eq(_.indexOf(scope.selectOptions, scope.selectOptions.find(function (obj) {\r\n                                                return obj[scope.dataKey] == (scope.ngModelCopy && scope.ngModelCopy[scope.dataKey]);\r\n                                            }))).offset();\r\n                                            if (listElOffset) {\r\n                                                $dropdownDiv.scrollTop(listElOffset.top - $dropdownDiv.offset().top);\r\n                                            }\r\n                                        }, 0);\r\n                                    }\r\n                                    });\r\n                                }\r\n                                if (newVal[1] !== oldVal[1] || newVal[2] !== oldVal[2]) {\r\n                                    scope.validateRules();\r\n                                }\r\n                                if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                                    if (scope.showinfo || scope.showwarning) {\r\n                                        element.addClass('field-has-icon');\r\n                                    }\r\n                                    else {\r\n                                        element.removeClass('field-has-icon');\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            var onFocus = scope.$watch('focus', function (newVal) {\r\n                                if (newVal) {\r\n                                    ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                                    scope.focus = false;\r\n                                    var clrMe = setTimeout(function () {\r\n                                        element.find('input').focus();\r\n                                        clearTimeout(clrMe);\r\n                                        clrMe = null;\r\n                                    }, 1000);\r\n                                }\r\n                            });\r\n\r\n                            /*\r\n                            * Validate rules\r\n                            */\r\n                            scope.validateRules = function () {\r\n                                scope.validate = false;\r\n                                scope.errorMessage = null;\r\n                                if (scope.$eval(scope.isMandatory) && scope.label && !scope.clienterror) {\r\n                                    if (!scope.ngModelCopy || scope.ngModelCopy.name === scope.label || (scope.customoption && scope.ngModelCopy.name === scope.customoption) || scope.ngModelCopy[scope.dataKey] === scope.label) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = scope.customMessage ? scope.customMessage : $translate.instant(\"selectOptionErrMsg\");\r\n                                        // return;\r\n                                    }\r\n                                }\r\n                                if (scope.clienterror) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                                }\r\n                                if (scope.rules && !scope.clienterror) {\r\n                                    var rules = scope.$eval(scope.rules);\r\n                                    var isFoundInvalid = false,\r\n                                        len = rules.length;\r\n\r\n                                    for (var i = 0; i < len; i++) {\r\n                                        var tmp = rules[i];\r\n                                        if (typeof tmp == 'object') {\r\n                                            if (eval((tmp.rule).replace(/this/g, 'scope.selectedOption'))) {\r\n                                                scope.validate = true;\r\n                                                scope.errorMessage = tmp.error;\r\n                                                break;\r\n                                            }\r\n                                        } else {\r\n                                            if (!isFoundInvalid) {\r\n                                                RuleEngine.isValid(tmp, function (e) {\r\n                                                    scope.validate = true;\r\n                                                    scope.errorMessage = e.errorData.error;\r\n                                                    isFoundInvalid = true;\r\n                                                });\r\n                                            }\r\n                                            else {\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                                var containerElm = element;\r\n                                var validateElm = $(element).find('#' + scope.dropDownId + '_validate');\r\n                                if (scope.validate == true && scope.errorMessage != null) {\r\n\r\n                                    if (!containerElm.hasClass('invalid')) {\r\n                                        containerElm.addClass('invalid');\r\n                                        \r\n                                    }\r\n\r\n                                    if (validateElm.length > 0) {\r\n                                        validateElm.html(scope.errorMessage);\r\n                                    }\r\n                                    else {\r\n                                        containerElm.append(smartSelectService.buildValidationTemplate(scope));\r\n                                        validateElm = $(element).find('#' + scope.dropDownId + '_validate');\r\n                                        validateElm.html(scope.errorMessage);\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    if (containerElm.hasClass('invalid')) {\r\n                                        containerElm.removeClass('invalid');\r\n                                    }\r\n\r\n                                    if (validateElm.length > 0) {\r\n                                        validateElm.remove();\r\n                                    }\r\n\r\n                                }\r\n                            };\r\n\r\n                            scope.hideShowField = function () {\r\n                                scope.isVisible = !scope.isVisible;\r\n                            };\r\n\r\n                            var onSelectChange = function (elm) {\r\n                                if (scope.selectOptions && scope.selectOptions.length>0) {\r\n                                    var selectedOption;\r\n                                    var selectedVal = elm.target.options[elm.target.options.selectedIndex].value;// elm.find(\":selected\").val();\r\n\r\n                                    selectedOption = selectedVal;\r\n\r\n                                    sOption = selectedOption;\r\n                                    if (selectedOption == scope.customoption) {\r\n                                        scope.customOptionReset = true;\r\n                                    }\r\n                                    else {\r\n                                        scope.customOptionReset = false;\r\n                                    }\r\n\r\n                                    var tmpSelectedOption;\r\n                                    if (!scope.$eval(scope.isMandatory) && selectedOption == options[0][scope.displayKey] && scope.optionGroups.length == 0) {\r\n                                        tmpSelectedOption = '';\r\n                                    }\r\n                                    else {\r\n                                        var len = options.length;\r\n                                        for (var i = 0; i < len; i++) {\r\n                                            if (typeof options[i][scope.dataKey] == 'string') {\r\n                                                if (options[i][scope.dataKey].replace(/&quot;/g, '\"') == selectedOption) {\r\n                                                    tmpSelectedOption = options[i];\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                if (options[i][scope.dataKey] == selectedOption) {\r\n                                                    tmpSelectedOption = options[i];\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (isNgModelFunction) {\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            scope.ngModel = tmpSelectedOption[scope.dataKey];\r\n                                        }\r\n                                        else {\r\n                                            scope.ngModel = tmpSelectedOption;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (typeOfNgModel == 'string' || typeOfNgModel == 'number') {\r\n                                            if (!scope.$eval(scope.isMandatory) && (selectedOption == options[0][scope.displayKey] || selectedOption == undefined || selectedOption == 'fakeOptionId')) {\r\n                                                scope.ngModelCopy = '';\r\n                                            }\r\n                                            else {\r\n                                                scope.ngModelCopy = tmpSelectedOption[scope.dataKey];\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            scope.ngModelCopy = tmpSelectedOption;\r\n                                            scope.ngModel = scope.ngModelCopy;\r\n                                        }\r\n                                    }\r\n                                    scope.labelVal = \"\";\r\n                                    if (selectedOption == scope.label && selectedOption == options[0][scope.displayKey]) {\r\n                                        scope.labelVal = selectedOption;\r\n                                    }\r\n                                    updateView();                                    \r\n                                    $(element).find('#' + scope.dropDownId + '_label').html(scope.label);\r\n\r\n                                    scope.selectedOption = tmpSelectedOption == '' ? options[0] : angular.copy(tmpSelectedOption);\r\n                                    scope.validateRules();\r\n                                   var cancelTout =  $timeout(function () {\r\n                                        scope.$apply();\r\n                                        scope.onChange();\r\n                                        $timeout.cancel(cancelTout);\r\n                                        cancelTout = null;\r\n                                    });\r\n                                }\r\n                            };\r\n\r\n                            smartSelectService.buildTemplate(scope, element, onSelectChange);\r\n                            if (scope.clienterror) {\r\n                                scope.validateRules();\r\n                            }\r\n\r\n                            scope.$on('$destroy', function () {\r\n                                angular.element(\"#\" + scope.dropDownId).material_select('destroy');\r\n                                collectionWatch();\r\n                                watchGrp();\r\n                                angular.element($window).off(\"scroll.smartFixedSmartSelect\");\r\n                                $(element).find('input.select-dropdown').unbind('focus');\r\n                                $(element).find('input.select-dropdown').unbind('close');\r\n                            });\r\n                            setTimeout(function(){\r\n                             if(scope.label != '' && scope.label != undefined)\r\n                                 $(element).find('#' + scope.dropDownId + '_label').html(scope.label);\r\n                            },0)\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('SMART2').factory('smartSelectService', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', smartSelectServiceFunc])\r\n    function smartSelectServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile) {\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((scope.isMandatory!= undefined && scope.isMandatory=='false') && scope.isRemovable == true) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.dropDownId + '_opField');\r\n                return optionalField;\r\n            }\r\n            return '';\r\n        };\r\n        var buildSelectTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectOptionTemplate.html');\r\n            html = html.replace('{{id}}', scope.dropDownId);\r\n            return html;\r\n        };\r\n        var buildValidationTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectValidationTemplate.html');\r\n            html = html.replace('{{id}}', scope.dropDownId + '_validate');\r\n            return html;\r\n        };\r\n        var updateLabelTemplate = function (scope, element) {\r\n            var elmLabel = element.find('#' + scope.dropDownId + '_label');\r\n            if (scope.label != scope.labelVal) {\r\n                elmLabel.removeClass('ng-hide');\r\n            } else {\r\n                elmLabel.addClass('ng-hide');\r\n\r\n            }\r\n        };\r\n        var buildLabelTemplate = function (scope) {\r\n            if (scope.label && scope.label != scope.labelVal) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectLabelTemplate.html');\r\n                html = html.replace('{{id}}', scope.dropDownId + '_label');\r\n                html = html.replace('{{dropDownId}}', scope.dropDownId);\r\n                html = html.replace('{{label}}', scope.label);\r\n                html = html.replace('{{title}}', scope.label);\r\n                return html;\r\n            } else {\r\n                return '';\r\n            };\r\n        };\r\n        var buildInfoTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectInfoTemplate.html');;\r\n            //if (scope.showinfo || scope.showwarning) {\r\n                \r\n            //    html = $templateCache.get('shared/directives/uiElements/smartSelect/smartSelectInfoTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n\r\n        var buildTemplate = function (scope,element, onChangeCallback) {\r\n            var container = element // $('<div/>', { id: scope.dropDownId + '_container' });\r\n            \r\n            var css = 'input-field';\r\n            if ((scope.isMandatory == 'false') && scope.isRemovable == true) {\r\n                css += ' optionalField line-height-manager';\r\n            }\r\n            if (scope.preview === true) {\r\n                css += ' selectPreview';\r\n            }\r\n            if (!scope.customoption) {\r\n                css += ' defaultSelected';\r\n            }\r\n            if (scope.validate === true && scope.errorMessage) {\r\n                css += ' invalid';\r\n            }\r\n            if (scope.showinfo || scope.showwarning){\r\n                css += ' field-has-icon'\r\n            }\r\n            if (scope.showinfo && scope.showwarning) {\r\n                css += ' field-has-two-icons'\r\n            }\r\n            \r\n            container.attr(\"id\", scope.dropDownId + '_container').addClass(css);\r\n\r\n            container.append(buildOptionalFieldTemplate(scope));\r\n            container.append(buildLabelTemplate(scope));\r\n            container.append(buildSelectTemplate(scope));\r\n            container.append(buildValidationTemplate(scope));\r\n            container.append($compile(buildInfoTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.append(container);\r\n            var elm = $(element).find('#' + scope.dropDownId);\r\n            elm.bind(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            var optionalField = $(element).find('#' + scope.dropDownId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0)\r\n            {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n            }\r\n\r\n            if (scope.disable === 'true' || scope.disable === true) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n            }\r\n\r\n        };\r\n\r\n        var buildOptionsList = function (OptionGroups, options,scope,element) {\r\n            var optHtml = '',\r\n                optionLength = options.length;\r\n            if (OptionGroups && OptionGroups.length > 0) {\r\n\r\n            }\r\n            else {\r\n                if (options && optionLength > 0 && scope.dataKey === scope.displayKey) {\r\n                    angular.forEach(options, function (option) {\r\n                        var selected = '';\r\n                        if (angular.equals(option, scope.selectedOption) || angular.equals(scope.ngModel, option) || angular.equals(scope.ngModelCopy, option) || angular.equals(option[scope.dataKey], scope.selectedOptionString)) {\r\n                            selected = ' selected=\"selected\"';\r\n                        }\r\n                        //if (option.name == scope.label) {\r\n                        //    $(element).find('#' + scope.dropDownId + '_label').html('');                            \r\n                        //}\r\n                        optHtml += '<option value=\"' + option[scope.dataKey] + '\"  ' + (option.disable ? 'disabled=\"disabled\"' : '') + ' ' + selected + '>' + option[scope.displayKey] + '</option>'\r\n                    });\r\n                } else if (options && optionLength > 0 && scope.dataKey !== scope.displayKey) {\r\n                    angular.forEach(options, function (option) {\r\n                        var selected = '';\r\n                        if (angular.equals(option, scope.selectedOption) || angular.equals(scope.ngModel, option) || angular.equals(scope.ngModelCopy, option) || angular.equals(option[scope.dataKey], scope.selectedOptionString)) {\r\n                            selected = ' selected=\"selected\"';\r\n                        }\r\n                        optHtml += '<option value=\"' + option[scope.dataKey] + '\"  ' + (option.disable ? 'disabled=\"disabled\"' : '') + ' ' + selected + '>' + option[scope.displayKey] + '</option>'\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (options[0][scope.datakey] == scope.label && options[0].disable && scope.datakey == 'title' && (!scope.selectedOption || options[0] == scope.selectedOption)) {\r\n                $(element).find('#' + scope.dropDownId + '_label').html('');\r\n            }\r\n\r\n            $(element).find('#' + scope.dropDownId).html(optHtml);\r\n        };\r\n\r\n        var service = {\r\n            buildOptionsList: buildOptionsList,\r\n            buildTemplate: buildTemplate,\r\n            buildValidationTemplate: buildValidationTemplate,\r\n            updateLabelTemplate: updateLabelTemplate\r\n        };\r\n        return service;\r\n    }\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').directive('optionalField', ['$timeout', '$translate', function ($timeout, $translate) {\r\n        return {\r\n            restrict: 'A',\n            link: function (scope, element, attrs) {\r\n\n                $timeout(function () {\r\n                    if (attrs.isMandatory !== \"true\") {\r\n                        element.find(\"label\").append('<span class=\"optionalFieldTxt\">' + '(' + $translate.instant('textfieldOptionalLabel') + ')' + '</span>');\r\n                        element.addClass('optionalFieldInPopup');\r\n                    }\r\n\r\n                    if (element.hasClass('hierarchylinktxt')) {\r\n                        element.append('<span class=\"optionalFieldTxt\">' + '(' + $translate.instant('textfieldOptionalLabel') + ')' + '</span>');\r\n                    }\r\n\r\n                }, 500);\r\n            }\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\r\n    angular.module('SMART2').service('StickyElements',[ function () {\r\n\r\n\t\tvar stickyElementsObj = [];\r\n\r\n\t\tthis.get = function () {\r\n\t\t\tvar stickyElementsHeight = 0;\r\n\t\t\tif (stickyElementsObj.length > 0) {\r\n\t\t\t\tangular.forEach(stickyElementsObj, function (value, key) {\r\n\t\t\t\t\tstickyElementsHeight = stickyElementsHeight + value.height();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\theight: stickyElementsHeight,\r\n\t\t\t\tlistOfElements: stickyElementsObj\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tthis.set = function (obj) {\r\n\t\t\tstickyElementsObj = obj;\r\n\t\t}\r\n    }])\r\n\t.directive('stickyHeader', ['$window', 'StickyElements', function ($window, StickyElements) {\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\tscope: true,\r\n\t\t\tlink: function ($scope, $elem, $attrs) {\r\n\t\t\t\tvar $win = angular.element($window);\r\n\t\t\t\tvar elem = $elem[0];\r\n\r\n\t\t\t\t$scope.scrollType = $attrs.scrollType;\r\n\r\n\t\t\t\tif ($scope.scrollType === \"page\") {\r\n\t\t\t\t\t$win.bind('scroll', function (e) {\r\n\t\t\t\t\t\tif (elem.offsetParent !== null) {\r\n\t\t\t\t\t\t\tvar windowScrollTop = $win[0].scrollY || $win[0].pageYOffset;\r\n\t\t\t\t\t\t\tvar elScrollTop = $(elem).offset().top;\r\n\t\t\t\t\t\t\tvar elScrollTopOriginal = $(elem).offset().top;\r\n\t\t\t\t\t\t\tvar stickyElementHeight = StickyElements.get().height;\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.grid-fixed-container').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.grid-fixed-container').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.alert-bar--fixed-to-nav').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.alert-bar--fixed-to-nav').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (angular.isDefined(angular.element('.breadcrum-container').height())) {\r\n\t\t\t\t\t\t\t\tstickyElementHeight = stickyElementHeight + angular.element('.breadcrum-container').height();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar elemforStick = angular.element($attrs.stickyHeader);\r\n\t\t\t\t\t\t\tif (elemforStick && elemforStick.length > 0) {\r\n\t\t\t\t\t\t\t    stickyElementHeight = stickyElementHeight + elemforStick.height();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar theadHgt = $(elem).find('thead').height();\r\n\r\n\t\t\t\t\t\t\tvar tbodyHgt = $(elem).find('tbody').not('.dummyThead').height();\r\n\t\t\t\t\t\t\tvar $dummyThead = $(elem).find('.dummyThead');\r\n\r\n\t\t\t\t\t\t\tif (windowScrollTop + stickyElementHeight > elScrollTop && windowScrollTop + stickyElementHeight < (elScrollTop + tbodyHgt)) {\r\n\t\t\t\t\t\t\t\telScrollTopOriginal = elScrollTop;\r\n\t\t\t\t\t\t\t\tstickTableHeader(stickyElementHeight, $scope.scrollType);\r\n\t\t\t\t\t\t\t\tif (!$dummyThead.length)\r\n\t\t\t\t\t\t\t\t\t$(\"<tbody class='dummyThead'><tr><td style='height:\" + theadHgt + \"px'></td></tr></tbody>\").insertAfter($(elem).find('thead'));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tangular.element(elem.querySelectorAll('thead')).css({ 'display': '', 'top': '', 'position': '', 'background': '' });\r\n\t\t\t\t\t\t\t\tif ($dummyThead.length)\r\n\t\t\t\t\t\t\t\t\t$dummyThead.remove();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction stickTableHeader(top, scrollType) {\r\n\t\t\t\t\tvar topVal = top;\r\n\t\t\t\t\t// reset display styles so column widths are correct when measured below\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\r\n\r\n\t\t\t\t\t// set widths of columns\r\n\t\t\t\t\tangular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\r\n\t\t\t\t\t     var tdSel = 'tbody tr' + (!$attrs.columnMap ? '' : $attrs.columnMap) + ':first-child td:nth-child(' + (i + 1) + ')',\r\n                           tdElems = elem.querySelector(tdSel);\r\n\r\n\t\t\t\t\t\tvar columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\r\n\r\n\t\t\t\t\t\tif (tdElems) {\r\n\t\t\t\t\t\t\ttdElems.style.width = columnWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (thElem) {\r\n\t\t\t\t\t\t\tthElem.style.width = columnWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('thead')).css({ 'top': topVal, 'position': 'fixed', 'background': '#ffffff', 'z-index': '2' });\r\n\r\n\t\t\t\t\tangular.element(elem.querySelectorAll('tbody')).css({\r\n\t\t\t\t\t\t'height': 'inherit',\r\n\t\t\t\t\t\t'overflow': 'hidden'\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}]);\r\n})();\n  /**\r\n   * @memberof SMART2\r\n   * @ngdoc directive\r\n   * @name Sub-section\r\n   * @description This directive is useful for creating subsection with custom behaviour.\r\n   * \r\n   * @attr {Var} ng-model\r\n   *    Data to be passed to subsection controller. ngModel can be accessed as $scope.ngModel.data. Any modifications done on $scope.ngModel.data will reflect in actual data model.\r\n   * @attr {String} template-url\r\n   *    Template to be rendered inside subsection ui element\r\n   * @attr {Number} colspan\r\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n   *    Default value is 1.\r\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n   * @attr {Function} on-load\r\n   *    Callback function when subsection is rendered. This is expected to be subsection controller function and parameters which are passed are expected to be form-widget controllers variables.\r\n   * \r\n   * @example\r\n   Dynamic:\r\n   Controller:\r\n       $scope.config = {\r\n            \"modelData\": {\r\n                \"location\": {\r\n                    \"address1\": \"Building no. 3, Mindspace IT park\",\r\n                    \"address2\": \"Airoli\",\r\n                    \"city\": \"Navi Mumbai\",\r\n                    \"state\": \"MH\",\r\n                    \"country\": \"India\"\r\n                }\r\n            },\r\n            \"formConfig\": {\r\n                \"sections\": [\r\n                    {\r\n                        \"isMandatory\": true,\r\n                        \"rows\": [\r\n                            {\r\n                                \"properties\": [\r\n                                    {\r\n                                        \"label\": \"\",\r\n                                        \"type\": \"subsection\",\r\n                                        \"isMandatory\": true,\r\n                                        \"data\": \"location\",\r\n                                        \"templateUrl\": \"abc.html\",\r\n                                        \"colspan\": 1\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    Usage:\r\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n    \r\n   * @example\r\n    Static:\r\n    Controller:\r\n        $scope.location = { \"address1\": \"Building no. 3, Mindspace IT park\", \"address2\": \"Airoli\", \"city\": \"Navi Mumbai\", \"state\": \"MH\", \"country\": \"India\" };\r\n       \r\n    Usage:\r\n        <smart-subsection template-url=\"abc.html\" ng-model=\"location\"></smart-subsection> \r\n   */\r\n\r\n(function() {\r\n    'use strict';\r\n    var subsectionId = 0;\r\n    \r\n    angular.module('SMART2').directive('smartSubsection', ['$compile', 'ScrollTo', function ($compile, ScrollTo) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                modelData: '=?',\r\n                templateUrl: '@',\r\n                controller: '@',\r\n                isMandatory: '@',\r\n                isVisible: '=',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                parentScope: '=?',\r\n                removable: '@',\r\n                formModel: '=?',\r\n\t\t\t\tinit: '@'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                scope.onLoad = attrs.onLoad;\r\n\r\n                subsectionId = subsectionId + 1;\r\n                scope.subsectionId = 'subsection-' + subsectionId;\r\n\r\n              \r\n\r\n                if (typeof scope.modelData == 'function') {\r\n                    scope.ngModel = {\r\n                        data: scope.modelData()\r\n                    };\r\n                }\r\n                else {\r\n\r\n                    scope.ngModel = {\r\n                        data: scope.modelData\r\n                    };\r\n                    /*\r\n                     *  Listen the changes on model data and update sub-section data\r\n                     */\r\n                    var onModelData = scope.$watch('modelData', function (newVal) {\r\n                        scope.ngModel = {\r\n                            data: newVal\r\n                        };\r\n                    }, true);\r\n\r\n                    /*\r\n                     *  Listen the changes send it to parent scope\r\n                     */\r\n                    var onNgModelData = scope.$watch('ngModel.data', function (newVal) {\r\n                        scope.modelData = newVal;\r\n                    }, true);\r\n\r\n                }           /*\r\n                 * Focus the textfield as soon as the focus is set to true\r\n                 */\r\n                var onFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                if (scope.controller == '') {\r\n                    element.html('<div ng-class=\"{\\'optionalField\\': isMandatory == \\'false\\' && isRemovable}\"><div class=\"optionalFieldHover highlight\" ng-if=\"isMandatory == \\'false\\' && isRemovable\" ng-include=\"\\'shared/directives/uiElements/commonTemplates/optionalFieldRemoveButton.html\\'\"></div><div ng-include=\"templateUrl\" on-subsection-load></div></div>');\r\n                }\r\n                else {\r\n                \telement.html('<div ng-class=\"{\\'optionalField\\': isMandatory == \\'false\\' && isRemovable}\"><div class=\"optionalFieldHover highlight\" ng-if=\"isMandatory == \\'false\\' && isRemovable\" ng-include=\"\\'shared/directives/uiElements/commonTemplates/optionalFieldRemoveButton.html\\'\"></div><div ng-controller=\"' + scope.controller + '\" ng-init=\"' + scope.init + '\" ng-include=\"templateUrl\" on-subsection-load></div></div>');\r\n                }\r\n                $compile(element.contents())(scope);\r\n\r\n                scope.$on('$destroy', function () {\r\n                    onModelData();\r\n                    onNgModelData();\r\n                    onFocus();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n\r\n\r\n    angular.module('SMART2').directive('onSubsectionLoad', ['$parse', function ($parse) {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                if (angular.isDefined(scope.onLoad)) {\r\n                    scope.$eval(scope.onLoad);\r\n                }\r\n            }\r\n        };\r\n    }]);\r\n})();    \n  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Switch\n   * @description This directive is useful for creating a switch.\n   *\n   * @attr {String} label\n   *    Label to be displayed for identification of this ui element\n   * @attr {Boolean} ng-model\n   *    Switch's default state (selected or unselected)\n   * @attr {Object} ng-model-options\r\n   *    https://docs.angularjs.org/api/ng/directive/ngModelOptions. \r\n   *    <a href=\"SMART2.Textfield.html\">Click here</a> and scoll down to 'Textfield with ng-model-options' to see example reference.\n   * @attr {Boolean} disable\n   *    If value of this attribute is set to true, switch will not be clickable\n   * @attr {Boolean} focus \n   *    If set to true, this ui element will be focused\n   * @attr {Boolean} validate\n   *    If set to true, this ui element will be validated on the basis of rules passed to it\n   * @attr {Array} rules \n   *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\n   *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\n   * @attr {String} error-message \n   *    Error message to be displayed. This attribute can be set at any point to display an error message.\n   * @attr {Boolean} is-mandatory \n   *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\n   * @attr {Boolean} is-visible \n   *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \n   *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\n   * @attr {Number} colspan\n   *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\n   *    Default value is 1.\n   *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\n   * @attr {Function} on-change\n   *    Callback function when switch state is changed \n   * \n   * @example\n   Dynamic:\n   Controller:\n       $scope.config = {\n            \"modelData\": {\n                \"isUrgent\": true\n            }, \n            \"formConfig\": {\n                \"sections\": [\n                    {\n                        \"isMandatory\": true,\n                        \"rows\": [\n                            {\n                                \"properties\": [\n                                    {\n                                        \"label\": \"Urgent\",\n                                        \"type\": \"switch\",\n                                        \"isMandatory\": true,\n                                        \"data\": \"isUrgent\",\n                                        \"colspan\": 1,\n                                        \"onChange\": \"onChange\"  //  controller function ,\n                                        \"rules\": [\n                                            { \n                                                \"rule\": \"this == true\", \n                                                \"error\": \"Checkbox should not be selected\" \n                                            }\n                                        ]\n                                    }\n                                ]    \n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n    Usage:\n        <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\n   \n   * @example\n   Static:\n   Controller:\n       $scope.isUrgent = true;\n       $scope.onChange = function(isUrgent) {\n           console.log(isUrgent);\n       };\n   Usage:\n       <smart-switch label=\"Urgent\" ng-model=\"isUrgent\" on-change=\"onChange(isUrgent)\"></smart-switch>\n       \n   * @example\n   Disabled switch:\n   <smart-switch disable=\"true\"></smart-switch>     \n   */\n  \n(function() {\n    'use strict';\n    \n    angular.module('SMART2').directive('smartSwitch', ['$timeout', 'ScrollTo', 'RuleEngine', function ($timeout, ScrollTo, RuleEngine) {\n        return {\n            restrict: 'E',\n            replace: true,\n            require: '?ngModel',\n            scope: {\r\n                //ngModel: '=?',\n                disable: '@',\n                isMandatory: '@',\n                isVisible: '=?',\n                label: '@',\n                rightLabel: '=?',\n                leftLabel:'=?',\n                minHeight: '@',\n                fill: '@',\n                rules: '@',\n                validate: '=?',\n                focus: '=?',\n                parentElement: '@',\n                errorMessage: '@',\n                onChange: '&',\n                removable: '@',\n                additionaltext: '=additionaltext'\n            },\n            link: function (scope, element, attrs, ngModelCtrl) {\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\n    \n                scope.fill = scope.$eval(scope.fill) == undefined ? true : scope.$eval(scope.fill);\n                scope.leftLbl = \"Off\";\n                scope.rightLbl = \"On\";\n\n                if (typeof scope.leftLabel != \"undefined\")\n                    scope.leftLbl = scope.leftLabel;\n                if (typeof scope.rightLabel!=\"undefined\")\n                    scope.rightLbl = scope.rightLabel;\n\n\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\n\n                \n                /*\n                 * Focus field when focus is set to true\n                 */\n                var onFocus = scope.$watch('focus', function(newVal) {\n                    if(newVal) {\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\n                        scope.focus = false;\n                    }\n                });\n                \n                /*\n                 * Validate field whene validate is set to true\n                 */\n                var onValidate = scope.$watch('validate', function(newValue) {\n                    if(newValue != undefined && newValue) {\n                        scope.validateRules();\n                    }\n                });\n                \n                /*\n                 * Validate rules\n                 */\n                scope.validateRules = function () {\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\n\n                    if (scope.rules) {\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\n\n                        for (var i = 0; i < rules.length; i++) {\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, 'scope.ngModel'))) {\r\n                                    scope.validate = true;\n                                    scope.errorMessage = rules[i].error;\n                                    break;\r\n                                }\n                                else {\r\n                                    if (!isFoundInvalid) {\r\n                                        RuleEngine.isValid(rules[i], function (e) {\r\n                                            scope.validate = true;\r\n                                            scope.errorMessage = e.errorData.error;\r\n                                            isFoundInvalid = true;\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\n                        }\n                    }\n                };\n                \n                scope.ngChange = function () {\n                    updateView();\n                    scope.validateRules();\n                    $timeout(function() {\n                        scope.onChange();\n                    });\n                };\n\n                scope.$on('$destroy', function () {\r\n                    onFocus();\r\n                    onValidate();\r\n                });\n            },\n            templateUrl: 'shared/directives/uiElements/smartSwitch/smartSwitchTemplate.html'\n        };\n    }]);\n})();    \n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Tabs-control\r\n * @description This directive is useful for creating a tabs control.\r\n *\r\n * @attr {Array} tab-config\r\n *    Tabs config. Please see example for more.\r\n * @attr {String} width\r\n *    Width of tabs holder. Default value is '100%'.\r\n *\r\n * @example\r\n Tabs Config in default case\r\n  $scope.tabsData = [{\r\n \"title\" : \"Tab 1\",\r\n \"contentUrl\" : \"tab1.html\",\r\n \"active\" : true\r\n }, {\r\n \"title\" : \"Tab 2\",\r\n \"contentUrl\" : \"tab2.html\"\r\n }, {\r\n \"title\" : \"Tab 3\",\r\n \"contentUrl\" : \"tab3.html\"\r\n }];\r\n \r\n *@example\r\n Controller in case default tab styling is to be overriden(set htmlmode=true and pass template url in tabsUrl):\r\n $scope.tabsData = [{\r\n \"title\" : \"Tab 1\",\r\n \"contentUrl\" : \"tab1.html\",\r\n \"active\" : true,\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template1.html\"\r\n }, {\r\n \"title\" : \"Tab 2\",\r\n \"contentUrl\" : \"tab2.html\",\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template2.html\"\r\n }, {\r\n \"title\" : \"Tab 3\",\r\n \"contentUrl\" : \"tab3.html\",\r\n \"htmlmode\":true,\r\n \"tabsUrl\":\"template3.html\"\r\n }];\r\n\r\n Usage:\r\n <smart-tabs tab-config=\"{{tabsData}}\" width=\"60%\" header-template=\"test_template.html\"></smart-tabs>\r\n */\r\n\r\n(function() {\r\n\t'use strict';\r\n\tvar tabsId = 0;\r\n\r\n\tangular.module('SMART2').directive('smartTabs', ['$timeout','$parse','$focusOnField',\r\n\tfunction ($timeout, $parse, $focusOnField) {\r\n\t\treturn {\r\n\t\t\trestrict : 'E',\r\n\t\t\treplace : true,\r\n\t\t\tscope: true,\r\n\t\t\tlink: function (scope, element, attrs) {\r\n                if(attrs.showCount == 'true') {\r\n                    scope.showCount = true;\r\n                }\r\n\t\t\t    var d = new Date().getTime();\r\n\t\t\t    scope.uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n\t\t\t        var r = (d + Math.random() * 16) % 16 | 0;\r\n\t\t\t        d = Math.floor(d / 16);\r\n\t\t\t        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n\t\t\t    });\r\n\r\n\t\t\t    var selectionCallback = $parse(attrs.onSelect),\r\n\t\t\t\t    tabWidth = attrs.width,\r\n\t\t\t\t    tabParent = element.find('.tabparent'),\r\n\t\t\t\t    currentTab;\r\n\r\n\t\t\t    scope.revisionMode = ((!attrs.revisionMode || attrs.revisionMode == \"false\") ? false : true);\r\n\t\t\t\ttabParent.css('width', tabWidth);\r\n\t\t\t\tvar timeoutCanel = $timeout(function() {\r\n\t\t\t\t\tvar tabs = element.find('.tabs');\r\n\t\t\t\t\ttabs.tabs();\r\n\t\t\t\t\t$timeout.cancel(timeoutCanel);\r\n\t\t\t\t});\r\n\t\t\t\t//scope.stickTabs = false;\r\n\r\n\t\t\t\tscope.vertical = attrs.vertical;\r\n\t\t\t\tscope.tabPanelHeight = angular.isDefined(attrs.tabPanelHeight) ? scope.vertical == 'true' ? attrs.tabPanelHeight : '100%' : '100%';\r\n\r\n\t\t\t\t//uniqueID\r\n\t\t\t\ttabsId = tabsId + 1;\r\n\t\t\t\tscope.tabId = \"tab-\" + tabsId;\r\n\t\t\t\tvar tabWidthInFloat = parseFloat(tabWidth);\r\n\t\t\t\tvar remainingWidth = (100 - tabWidthInFloat) + \"%\";\r\n\t\t\t\t//var rightHeaderStyle=\"{'background-color':'red';'width':\"+remainingWidth+\";'margin-left'}\";\r\n\t\t\t\tscope.headerStyle = {\r\n\t\t\t\t\t\"width\" : remainingWidth,\r\n\t\t\t\t\t\"margin-left\" : tabWidth,\r\n\t\t\t\t\t\"height\" : '48px'\r\n\t\t\t\t};\r\n\t\t\t\tscope.headerTemplate = attrs.headerTemplate;\r\n\t\t\t\tattrs.$observe('tabConfig', function (value) {\r\n\t\t\t\t    scope.tabConfig = scope.$eval(value);\r\n\t\t\t\t    var activeTabContent = currentTab;\r\n\t\t\t\t    var item = _.find(scope.tabConfig, function (item) { return item.active == true; });\r\n                    if (currentTab && currentTab.htmlmode && item == undefined) {\r\n                        for (var i = 0; i < scope.tabConfig.length; i++) {\r\n                            var tTab = scope.tabConfig[i];\r\n                            if (tTab.title.toLowerCase() === activeTabContent.title.toLowerCase()) {\r\n                                tTab.active = true;\r\n                               }\r\n\t\t\t    \t}\r\n\t\t\t\t    }\r\n\t\t\t\t    currentTab = (_.find(scope.tabConfig, function (tab) {\r\n\t\t\t\t        return tab.active;\r\n\t\t\t\t    }));\r\n\t\t\t\t    if (currentTab) {\r\n\t\t\t\t        currentTab.isLoaded = true;\r\n\t\t\t\t        scope.selectedTabContentUrl = currentTab.contentUrl;\r\n\t\t\t\t        //scope.tabClickCallback(currentTab);\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//attrs.$observe('stickTabs', function (value) {\r\n\t\t\t\t//    scope.stickTabs = scope.$eval(value);\r\n\t\t\t\t//});\r\n\r\n\t\t\t\t//scope.$on('checkTabIsDirty', function (event, data) {\r\n\t\t\t\t//    currentTab.isTabValidate = scope[currentTab.onBeforeTabChange] && scope[currentTab.onBeforeTabChange]();\r\n\t\t\t\t//});\r\n\r\n\t\t\t\tscope.tabClickCallback = function (item) {\r\n\t\t\t\t    var returnObject = angular.copy(item);\r\n\t\t\t\t    returnObject.previousTab = currentTab;\r\n\t\t\t\t    returnObject.previousTab.active = false;\r\n\t\t\t\t    currentTab = item;\r\n\t\t\t\t    item.active = true;\r\n\t\t\t\t    item.isLoaded = true;\r\n                    //returnObject.previousTab.isTabValidate = scope[returnObject.previousTab.onBeforeTabChange] && scope[returnObject.previousTab.onBeforeTabChange]();\r\n\t\t\t\t    if (angular.isFunction(selectionCallback)) {\r\n\t\t\t\t        selectionCallback(scope, { 'e': returnObject });\r\n\t\t\t\t    }\r\n\t\t\t\t    //TWO-6116  fixed.\r\n\t\t\t\t    //$timeout(function () {\r\n\t\t\t\t    //    scope.$broadcast('scrollTopToBottom', element.find('.scroll-container').outerHeight());\r\n\t\t\t\t    //}, 800);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.tabbingOnKeyDown = function (evt, $index, tabType) {\r\n\t\t\t\t    var moveTo;\r\n\t\t\t\t    if (evt.keyCode == 38 && angular.isDefined(tabType) || evt.keyCode == 37 && !angular.isDefined(tabType)) {\r\n\t\t\t\t        moveTo = $index - 1;\r\n\t\t\t\t        if (!(moveTo < 0)) {\r\n\t\t\t\t            element.find('.tab').eq(moveTo).focus();\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 40 && angular.isDefined(tabType) || evt.keyCode == 39 && !angular.isDefined(tabType)) {\r\n\t\t\t\t        moveTo = $index + 1;\r\n\t\t\t\t        if (!(moveTo >= scope.tabConfig.length)) {\r\n\t\t\t\t            element.find('.tab').eq(moveTo).focus();\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 13) {\r\n\t\t\t\t        scope.tabClickCallback(scope.tabConfig[$index]);\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (evt.keyCode == 9) {\r\n\t\t\t\t        var firstFieldFocus = element.find(\"tabContent\").find(\"a, input, textarea, [tabindex]\").first();\r\n\t\t\t\t        $focusOnField(firstFieldFocus);\r\n\t\t\t\t    }\r\n\t\t\t\t    evt.stopPropagation();\r\n\t\t\t\t};\r\n                \r\n\t\t\t\tscope.showTabArrows = false;\r\n\t\t\t\tscope.disableNext = false;\r\n\t\t\t\tscope.disablePrev = true;\r\n\t\t\t\tvar isMovableTabs = true;\r\n\t\t\t\tvar tabHorizontalWidth, tabWrapperWidth, totalTabWidth, def, transValue, tempValue = 0;\r\n\r\n\t\t\t\tfunction setTabs() {\r\n\t\t\t\t    $timeout(function () {\r\n\t\t\t\t        tabHorizontalWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).width();\r\n\t\t\t\t        totalTabWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper\")[0].scrollWidth; //.width() doesn't return overflowed width of child element\r\n\r\n\t\t\t\t        if (totalTabWidth > tabHorizontalWidth) {\r\n\t\t\t\t            scope.showTabArrows = true;\r\n\t\t\t\t        }\r\n\r\n\t\t\t\t        $timeout(function () {\r\n\t\t\t\t            tabWrapperWidth = element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper\").width();\r\n\t\t\t\t            def = totalTabWidth - tabWrapperWidth;\r\n\t\t\t\t        });\r\n\t\t\t\t    });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.$on('LastRepeaterElement', function (attrs, elem) {\r\n\t\t\t\t    if (elem.is(\"li\") && isMovableTabs && attrs.nextback) {\r\n\t\t\t\t        setTabs();\r\n\t\t\t\t        isMovableTabs = false;\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n\t\t\t\tscope.getTabsDimensions = function () {\r\n\t\t\t\t    return {\r\n\t\t\t\t        'w': element.find(\"#tabs-horizontal-\" + scope.uniqueID).width()\r\n\t\t\t\t    };\r\n\t\t\t\t};\r\n\t\t\t\tscope.$watch(scope.getTabsDimensions, function (newValue, oldValue) {\r\n\t\t\t\t    if (newValue.w != oldValue.w && attrs.nextback) {\r\n\t\t\t\t        setTabs();\r\n\t\t\t\t    }\r\n\t\t\t\t}, true);\r\n\r\n\t\t\t\tscope.goRight = function () {\r\n\t\t\t\t    if (!scope.disableNext) {\r\n\t\t\t\t        tempValue = tempValue + 175;\r\n\t\t\t\t        if (tempValue < def) {\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disablePrev = false;\r\n\t\t\t\t        }\r\n\t\t\t\t        else {\r\n\t\t\t\t            tempValue = def;\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disablePrev = false;\r\n\t\t\t\t            scope.disableNext = true;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.goLeft = function () {\r\n\t\t\t\t    if (!scope.disablePrev) {\r\n\t\t\t\t        tempValue = tempValue - 175;\r\n\t\t\t\t        if (tempValue < def && tempValue > 0) {\r\n\t\t\t\t            transValue = -Math.abs(tempValue);\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disableNext = false;\r\n\t\t\t\t        }\r\n\t\t\t\t        else {\r\n\t\t\t\t            tempValue = 0;\r\n\t\t\t\t            transValue = tempValue;\r\n\t\t\t\t            element.find(\"#tabs-horizontal-\" + scope.uniqueID).find(\".tabs-wrapper ul.tabs\").css(\"transform\", \"translateX(\" + transValue + \"px)\");\r\n\t\t\t\t            scope.disableNext = false;\r\n\t\t\t\t            scope.disablePrev = true;\r\n\t\t\t\t        }\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                \r\n\t\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\t    tabParent = null;\r\n\t\t\t\t    element.remove();\r\n\t\t\t\t    scope = null;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\ttemplateUrl : 'shared/directives/uiElements/smartTabs/smartTabsTemplate.html'\r\n\t\t};\r\n\t}]);\r\n})();\r\n\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Character-restrict\r\n * @description This directive is useful for preventing character from entering in text field .\r\n * \r\n * @attr {String} patternreg\r\n *    Js Regex pattern need to be entered\r\n * \r\n * @example\r\n Dynamic: \r\n  Usage:\r\n      <smart-textfield model-data=\"config.modelData\" smart-character-restrict pattern=\"[^\\w\\s-()]\"></smart-form-widget>\r\n */\r\n\r\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartCharacterRestrict', function () {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                var keyCheckRe = new RegExp(attrs.patternreg, 'ig'),\r\n                    valueCheckRe = attrs.validationreg ? new RegExp(attrs.validationreg, 'ig') : false,\r\n                    valueRegexPassed,\r\n                    allowCharacterFlag = attrs.allowpaste;\r\n\r\n                element\r\n                    .off('keypress.smartcharacterrestrict')\r\n                    .on('keypress.smartcharacterrestrict', 'input', function (inputValue) {\r\n                        keyCheckRe.compile(attrs.patternreg, 'ig');\r\n                        if (inputValue.key == null) {\r\n                            return ''\r\n                        }\r\n\r\n                        if (keyCheckRe.test(inputValue.key)) {\r\n                            inputValue.preventDefault();\r\n                        }\r\n\r\n                        if (valueCheckRe) {\r\n                            valueCheckRe.compile(attrs.validationreg, 'ig');\r\n                            valueRegexPassed = valueCheckRe.test(inputValue.target.value + inputValue.key)\r\n                            if (valueRegexPassed == false) {\r\n                                inputValue.preventDefault();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                element\r\n                    .off('paste.smartcharacterrestrict')\r\n                    .on('paste.smartcharacterrestrict', 'input', function (e) {\r\n                        if (allowCharacterFlag === 'true') {\r\n                            var numRegExp = new RegExp(attrs.patternreg);\r\n                            if (numRegExp == \"/[^0-9-+()]/\") {\r\n                                var copiedText = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n                                var isnum = /^[0-9-+()]+$/.test(copiedText);\r\n                                if (isnum != true) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return false;\r\n                        }\r\n\r\n                    });\r\n            }\r\n        }\r\n    });\r\n})(angular);\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Textfield\r\n * @description This directive is useful for creating a textfield or a date-picker or a auto-complete ui element depending upon the 'type' passed.\r\n * \r\n * @attr {String} label\r\n *    Label to be displayed for identification of this ui element\r\n * @attr {String} placeholder\r\n *    Hint text to be displayed in textfield\r\n * @attr {String} align\r\n *    Text alignment. Possible values are left, center, right.\r\n * @attr {Boolean} autocomplete \r\n *    This attribute is useful for turning off browser's default autocomplete behaviour\r\n * @attr {Number} maxlength\r\n *    Number of characters allowed in textfield\r\n * @attr {Number} decimalprecision\r\n *    Number of characters allowed after decimal precision in textfield\r\n * @attr {Number} min\r\n *    Minimum value allowed in textfield \r\n * @attr {Number} max\r\n *    Maximum value allowed in textfield\r\n * @attr {Number} minmaxprecision\r\n *    Number of characters that should be visible in number type textfield. Internally filter is applied for the given numbers. Data to be sent in array format with 2 array contents \r\n * @attr {Var} ng-model\r\n *    Default value to be displayed in textfield\r\n * @attr {Object} ng-model-options\r\n *    https://docs.angularjs.org/api/ng/directive/ngModelOptions\r\n * @attr {Boolean} focus \r\n *    If set to true, this ui element will be focused\r\n * @attr {Boolean} validate\r\n *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n * @attr {Array} rules \r\n *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n * @attr {String} error-message \r\n *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n * @attr {Boolean} is-mandatory \r\n *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n * @attr {Boolean} is-visible \r\n *    If set to true, this ui element will be displayed on form regardless of 'is-mandatory' property's value. \r\n *    This ui element can be removed from form by clicking 'x' button on top right corner of this ui element.\r\n * @attr {Number} colspan\r\n *    Number of columns to be occupied by this ui element. 1 column is equal to 1 ui element.\r\n *    Default value is 1.\r\n *    For e.g. If colspan is set to 2, this ui element will occupy width of 2 ui elements (fields).\r\n * @attr {String} type \r\n *    Type of textfield. Default value is 'text'. Possible values are area (textarea), number, email, date, autocomplete.\r\n * @attr {Boolean} readonly \r\n *    If set to true, textfield cannot be editable. Textfield's blur and focus events will still be fired (default behaviour).\r\n * @attr {Boolean} disable \r\n *    If set to true, textfield cannot be editable. Textfield's blur and focus events will not be fired (default behaviour).\r\n * @attr {Function} on-focus\r\n *    Callback function when ui element's focus event is fired\r\n * @attr {Function} on-blur\r\n *    Callback function when ui element's blur event is fired\r\n * @attr {Function} on-key-up\r\n *    Callback function when ui element's keyup event is fired\r\n * @attr {Function} on-key-down\r\n *    Callback function when ui element's keydown event is fired\r\n * @attr {Function} on-key-press\r\n *    Callback function when ui element's keypress event is fired\r\n * @attr {Function} on-enter\r\n *    Callback function when ENTER (RETURN) key is pressed\r\n * \r\n * @example\r\n Dynamic:\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"companyName\": \"GEP\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Company name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"isVisible\": false,\r\n                                      \"data\": \"companyName\",\r\n                                      \"colspan\": 1,\r\n                                      \"validate\": false,\r\n                                      \"focus\": false,\r\n                                      \"onFocus\": \"onFocus\",\r\n                                      \"onBlur\": \"onBlur\" \r\n                                      \"onChange\": \"onChange\"\r\n                                      \"onKeyPress\": \"onKeyPress\"\r\n                                      \"onKeyUp\": \"onKeyUp\"\r\n                                      \"onKeyDown\": \"onKeyDown\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"number\"\r\n                                          \"maxlength\": \"\",\r\n                                          \"decimalprecision\": \"\",\r\n                                          \"minmaxprecision\": [2,5],\r\n                                          \"disable\": true,\r\n                                          \"readonly\": true,\r\n                                          \"align\": \"left\",\r\n                                          \"placeholder\": \"\",\r\n                                          \"autocomplete\": false\r\n                                      },\r\n                                      \"rules\": [\r\n                                          { \r\n                                              \"rule\": \"this.length > 10\", \r\n                                              \"errorMessage\": \"Length should not be greater than 10\" \r\n                                          }\r\n                                      ]\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Textfield with ng-model-options. This example is applicable only if one wants to use 'ng-model-options' with 'getterSetter' option. Otherwise VM\r\n does not need to be used as 'ng-model' or 'data'.\r\n Dynamic:\r\n Controller:\r\n     var defaultCompanyName = 'GeP';\r\n     this.companyName = function (val) {\r\n         if (val !== undefined) {\r\n             defaultCompanyName = val;\r\n         }\r\n         return defaultCompanyName;\r\n     };\r\n\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"companyName\": \"GEP\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Company name\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"isVisible\": false,\r\n                                      \"data\": \"controllerVM.companyName\",\r\n                                      \"attributes\": {\r\n                                          \"ngModelOptions\": { getterSetter: true }\r\n                                      },\r\n                                      \"rules\": [\r\n                                          { \r\n                                              \"rule\": \"this.length > 10\", \r\n                                              \"errorMessage\": \"Length should not be greater than 10\" \r\n                                          }\r\n                                      ]\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Textfield with ng-model-options. This example is applicable only if one wants to use 'ng-model-options' with 'getterSetter' option. Otherwise VM\r\n does not need to be used as 'ng-model' or 'data'.\r\n Static:\r\n Controller:\r\n     angular.module('SMART2', []).controller('textFieldController', ['$scope', function($scope) {\r\n         var defaultCompanyName = 'GeP';\r\n         this.companyName = function (val) {\r\n             if (val !== undefined) {\r\n                 defaultCompanyName = val;\r\n             }\r\n             return defaultCompanyName;\r\n         };\r\n     }]);\r\n  Usage:\r\n      <div ng-controller=\"textFieldController as textFieldVM\">\r\n        <smart-textfield ng-model=\"textFieldVM.companyName\" ng-model-options=\"{getterSetter: true}\"></smart-textfield>\r\n      </div>\r\n\r\n * @example\r\n Static:\r\n Controller:\r\n      $scope.companyName = \"GEP\";\r\n Usage:\r\n      <smart-textfield label=\"First name\" ng-model=\"companyName\"></smart-textfield>\r\n      \r\n * @example\r\n Textfield with events: \r\n '$event' passed in callback functions in following example is angular event. \r\n  <smart-textfield on-focus=\"onFocus()\" \r\n                   on-blur=\"onBlur()\" \r\n                   on-change=\"onChange($event)\"\r\n                   on-key-press=\"onKeyPress($event)\"\r\n                   on-key-up=\"onKeyUp($event)\"\r\n                   on-key-down=\"onKeyDown($event)\"></smart-textfield>        \r\n */\r\n\r\n\r\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Date-picker\r\n * @description This directive is useful for creating a date picker. This directive is derived from 'textfield' directive. All the attributes of 'textfield' directive are applicable to this directive. Following are some additional attributes.\r\n * \r\n * @attr {String} format \r\n *    Date format. For e.g. dd/MM/yyyy. For more details browse https://docs.angularjs.org/api/ng/filter/date\r\n * @attr {Var} ng-model\r\n *    Default date to be displayed. 'ng-model' is expected to be in milliseconds (timestamp) or javascript date. For e.g. 5656534324368 or \"2014-09-18T10:03:58\" or \"Fri Mar 04 2016 13:10:56 GMT+0530 (IST)\"\r\n * \r\n * @example\r\n Dynamic: (Timestamp)\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"date\": 1457094173954\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Date\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"date\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"date\",\r\n                                          \"format\": \"dd/MM/yyyy\"\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Dynamic: (Javascript date)\r\n Controller:\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"date\": \"Fri Mar 04 2016 17:50:50 GMT+0530 (IST)\"\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Date\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"date\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"date\",\r\n                                          \"format\": \"dd/MM/yyyy\"\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n      };\r\n  Usage:\r\n      <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n\r\n * @example\r\n Static: (Timestamp)\r\n Controller:\r\n      $scope.date = 1457094173954;\r\n Usage:\r\n      <smart-textfield type=\"date\" label=\"Date\" ng-model=\"date\"><smart-textfield> \r\n      \r\n * @example\r\n Static: (Javascript date)\r\n Controller:\r\n      $scope.date = \"Fri Mar 04 2016 17:50:50 GMT+0530 (IST)\";\r\n Usage:\r\n      <smart-textfield type=\"date\" label=\"Date\" ng-model=\"date\"><smart-textfield>         \r\n */\r\n\r\n\r\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Auto-complete\r\n * @description This directive is useful for creating an auto-complete ui element. This directive is derived from 'textfield' directive. All the attributes of 'textfield' directive are applicable to this directive. Following are some additional attributes.\r\n * \r\n * @attr {Object} ng-model\r\n *    Default value to be displayed in textfield. 'ng-model' is expected to be an object having property (key) set in 'datakey' attribute.\r\n * @attr {Array} filterkeys\r\n *    An array of properties (keys) on which filtering to be applied. Suggestions will get filtered on the basis of properties (keys) passed in array.\r\n * @attr {String} optionformat\r\n *    A single suggestion format (template)\r\n * @attr {String} displayformat\r\n *    A format in which the data in textfield to be displayed\r\n * @attr {Boolean} loading \r\n *    This attribute can be used to display a loader while autosuggest data is being fetched from the server.\r\n * @attr {Function} on-select\r\n *    Callback when a suggestion is selected\r\n * \r\n * @example\r\n Dynamic:\r\n Controller:\r\n     $scope.onChange = function(uiElementConfig) {\r\n          uiElementConfig.attributes.options = [\r\n              {\r\n                  \"UserId\": 28360,\r\n                  \"UserName\": \"SRUser1@outlook.com\",\r\n                  \"FirstName\": \"SR \",\r\n                  \"LastName\": \"User1\"\r\n              }, {\r\n                  \"UserId\": 28977,\r\n                  \"UserName\": \"test1\",\r\n                  \"FirstName\": \"Test\",\r\n                  \"LastName\": \"\"\r\n              }, {\r\n                  \"UserId\": 57950,\r\n                  \"UserName\": \"HShah\",\r\n                  \"FirstName\": \"Harshit\",\r\n                  \"LastName\": \"Shah\"\r\n              }\r\n          ];\r\n     };\r\n     $scope.onSelect = function(autoSuggestData) {\r\n         console.log(autoSuggestData);\r\n         //   autoSuggestData will be updated every time a new suggestion is chosen. Passing 'model' in 'onSelect' is optional.\r\n     };\r\n     $scope.config = {\r\n          \"modelData\": {\r\n              \"autoSuggestData\": { \"UserId\": 28360, \"UserName\": \"SRUser1@outlook.com\", \"FirstName\": \"SR\", \"LastName\": \"User1\", \"title\": \"SR User1\" }\r\n          }, \r\n          \"formConfig\": {\r\n              \"sections\": [\r\n                  {\r\n                      \"isMandatory\": true,\r\n                      \"rows\": [\r\n                          {\r\n                              \"properties\": [\r\n                                  {\r\n                                      \"label\": \"Auto complete\",\r\n                                      \"type\": \"textfield\",\r\n                                      \"isMandatory\": true,\r\n                                      \"data\": \"autoSuggestData\",\r\n                                      \"onChange\": \"onChange\",\r\n                                      \"onSelect\": \"onSelect(autoSuggestData)\",\r\n                                      \"attributes\": {\r\n                                          \"type\": \"autocomplete\",\r\n                                          \"options\": [],\r\n                                          \"filterkeys\": [\"FirstName\", \"LastName\"],\r\n                                          \"optionformat\": \"<span>{FirstName} {LastName}</span>\",\r\n                                          \"displayformat\": \"{FirstName} {LastName}\",\r\n                                          \"loading\": false\r\n                                      }\r\n                                  }\r\n                              ]    \r\n                          }\r\n                      ]\r\n                  }\r\n              ]\r\n          }\r\n     };\r\n  Usage:\r\n     <smart-form-widget form-config=\"config.formConfig\" model-data=\"config.modelData\"></smart-form-widget>\r\n * @example\r\n Static:\r\n Controller:\r\n     $scope.autoCompleteData = { \"UserId\": 28360, \"UserName\": \"SRUser1@outlook.com\", \"FirstName\": \"SR\", \"LastName\": \"User1\", \"title\": \"SR User1\" };\r\n     $scope.onChange = function(e) {\r\n          //  Textfield's value can be found in e.data[0].value\r\n          //  See console for more\r\n          console.log(e);\r\n          $scope.options = [\r\n              {\r\n                  \"UserId\": 28360,\r\n                  \"UserName\": \"SRUser1@outlook.com\",\r\n                  \"FirstName\": \"SR \",\r\n                  \"LastName\": \"User1\"\r\n              }, {\r\n                  \"UserId\": 28977,\r\n                  \"UserName\": \"test1\",\r\n                  \"FirstName\": \"Test\",\r\n                  \"LastName\": \"\"\r\n              }, {\r\n                  \"UserId\": 57950,\r\n                  \"UserName\": \"HShah\",\r\n                  \"FirstName\": \"Harshit\",\r\n                  \"LastName\": \"Shah\"\r\n              }\r\n          ]; \r\n     };\r\n     $scope.onSelect = function(autoCompleteData) {\r\n         console.log(autoCompleteData);\r\n         //   autoCompleteData will be updated every time a new suggestion is chosen. Passing 'model' in 'onSelect' is optional.\r\n     };\r\n Usage:\r\n     <smart-textfield type=\"autocomplete\" label=\"Auto complete\" ng-model=\"autoCompleteData\" filterkeys=\"['FirstName', 'LastName']\" optionformat=\"<span>{FirstName} {LastName}</span>\" displayformat=\"{FirstName} {LastName}\" options=\"options\" on-change=\"onChange($event)\" on-select=\"onSelect(autoCompleteData)\"></smart-textfield>\r\n */\r\n\r\n\r\n(function () {\r\n    'use strict';\r\n    var textfieldId = 19820116;\r\n    //var directiveV2 = true;\r\n    //var isDirectiveV2enabled = function () { return true; }\r\n    $(function () {\r\n        angular.element('body').off('click').on('click', '.daterangepicker', function (e) {\r\n            e.stopPropagation();\r\n        });\r\n    });\r\n\r\n    angular.module('SMART2').directive('smartTextfield', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'RuleEngine', 'smartTextFieldService', 'smartTextField3Service', '$filter', '$window',\r\n        (typeof isDirectiveV2enabled !== 'undefined' ? (isDirectiveV2enabled() === true || isDirectiveV2enabled() === 'V3' ? smartTextField3Func : smartTextFieldFunc) : smartTextFieldFunc)]);\r\n\r\n\r\n    function smartTextFieldFunc($rootScope, $timeout, $translate, ScrollTo, RuleEngine, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                //ngModel: '=?',\r\n                modelOptions: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModelCtrl) {\r\n                scope.modelOptions = scope.modelOptions === false ? {} : !scope.modelOptions ? {\r\n                    updateOn: 'default blur change',\r\n                    debounce: { 'default': 300, 'blur': 0, 'change': 0 }\r\n                } : scope.modelOptions;\r\n                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon\r\n                var timePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker == 'true' ? true : false);\r\n                scope.format = (scope.format ? scope.format : timePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n                scope.count = 0;\r\n                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                var number, rulesValidationEvent;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n\r\n\r\n                if (scope.type == 'number') {\r\n                    element.bind(\"DOMMouseScroll mousewheel onmousewheel\", function (event) {\r\n\r\n                        // for IE\r\n                        event.returnValue = false;\r\n                        // for Chrome and Firefox\r\n                        if (event.preventDefault) {\r\n                            event.preventDefault();\r\n                        }\r\n\r\n                    });\r\n                }\r\n\r\n\r\n                var uniqueIDGenerator = function () {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xx2xxpxxoxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                if (attrs.validateOn) {\r\n                    rulesValidationEvent = attrs.validateOn;\r\n                }\r\n                else {\r\n                    rulesValidationEvent = 'blur';\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Following code has been added to make ng-model-options work\r\n                 *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                 */\r\n                try {\r\n                    ngModelCtrl.$render = function () {\r\n                        scope.ngModel = ngModelCtrl.$modelValue;\r\n                    };\r\n                }\r\n                catch (e) { }\r\n\r\n                var updateView = function () {\r\n                    try {\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                    catch (e) { }\r\n                };\r\n\r\n\r\n                function checkIfActive() {\r\n                    if (scope.readonly == 'true') {\r\n                        return true;\r\n                    }\r\n                    if (scope.type == 'number' && scope.ngModel !== 0 + '' && scope.placeholder === '' && (scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                        return false;\r\n                    }\r\n                    if (scope.type != 'number' && scope.type != 'autocomplete' && scope.placeholder === '' && (scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                        return false;\r\n                    }\r\n                    if (scope.type == 'autocomplete' && scope.placeholder === '' && (scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n\r\n                function setPrecisionLimits() {\r\n                    number = scope.ngModel;\r\n                    if (number != undefined) {\r\n                        var arr = (number.toString()).split('e')\r\n                        if (arr.length > 1 && parseInt(arr[1]) < 0) {\r\n                            number = (number).toFixed(6);\r\n                            scope.ngModel = number;\r\n                        }\r\n                        var tempArr = number.toString().split('.');\r\n                        if (tempArr != undefined && tempArr.length > 1) {\r\n                            var preDecimal = tempArr[0];\r\n                            if (preDecimal != 0 && preDecimal.toString().length > 20) {\r\n                                var tempVal = preDecimal.toString().substring(0, 19);\r\n                                scope.ngModel = parseInt(tempVal);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (number != 0 && number.toString().length > 20) {\r\n                                var tempVal = number.toString().substring(0, 19);\r\n                                scope.ngModel = parseInt(tempVal);\r\n                            }\r\n                        }\r\n                        if (scope.decimalprecision != undefined) {\r\n                            scope.ngModel = parseFloat(parseFloat(scope.ngModel).toFixed(scope.decimalprecision));\r\n                        }\r\n                        else if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length > 2 || splitPrecision.length < 1)\r\n                                return;\r\n                            var lowerPrecisionLimit = splitPrecision[0];\r\n                            var highPrecisionLimit = splitPrecision[1];\r\n\r\n                            var postDecimalNumbers = ((scope.ngModel + \"\").split(\".\")[1] != undefined) ? (scope.ngModel + \"\").split(\".\")[1].length : 0;\r\n\r\n                            if (postDecimalNumbers == 0)\r\n                                return;\r\n\r\n                            if (lowerPrecisionLimit > postDecimalNumbers && postDecimalNumbers < highPrecisionLimit && postDecimalNumbers != 0) {\r\n                                scope.ngModel = parseFloat(parseFloat(scope.ngModel).toFixed(lowerPrecisionLimit));\r\n                            }\r\n                            else if (postDecimalNumbers >= highPrecisionLimit && postDecimalNumbers != 0) {\r\n                                var fixed = Math.pow(10, highPrecisionLimit);\r\n                                scope.ngModel = Math.floor(scope.ngModel * fixed) / fixed;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.isActive = checkIfActive();\r\n\r\n                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.textfieldId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    textfieldId = uniqueIDGenerator();\r\n                    scope.textfieldId = 'txt-' + textfieldId;\r\n                }\r\n\r\n                scope.labelForTextfieldId = 'label-for-' + scope.textfieldId;\r\n\r\n                /*\r\n                * Skip tab key focus, if the field is readonly\r\n                */\r\n                setTimeout(function () {\r\n                    if (scope.readonly == 'true' && scope.type != 'date') {\r\n                        angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n                    }\r\n\r\n                    try {\r\n                        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n                            scope.$parent.$parent.onEditableRender(scope, element);\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                });\r\n\r\n                /*\r\n                 * Validate the textfield as soon as the validate is set to true\r\n                 */\r\n                var unbindValidate = scope.$watch('validate', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        scope.validateRules();\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 * Focus the textfield as soon as the focus is set to true\r\n                 */\r\n                var unbindFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        //  settimeout is added to avoid $digest already in progress\r\n                        setTimeout(function () {\r\n                            var el = angular.element('#' + scope.textfieldId);\r\n                            if (scope.label) {\r\n                                el.trigger('click');\r\n                                el.focus();\r\n                            } else {\r\n                                // if label is undefined or empty then directly focus on input element \r\n                                if (el.is(\"input\")) {\r\n                                    el.focus();\r\n                                } else {\r\n                                    el.find(\"input\").focus();\r\n                                }\r\n                            }\r\n                        }, 100); // increased timer hotfix for focus cell in ui-grid\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n                var checkRule = function () {\r\n                    var rules = scope.$eval(scope.rules);\r\n                    var isFoundInvalid = false;\r\n\r\n                    for (var i = 0; i < rules.length; i++) {\r\n                        if (typeof rules[i] == 'object') {\r\n                            if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                                scope.validate = true;\r\n                                scope.errorMessage = rules[i].error;\r\n                                scope.errorModel = rules[i].error;\r\n                                break;\r\n                            } else {\r\n                                if (scope.type === 'date') {\r\n                                    angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (!isFoundInvalid) {\r\n                                if (typeof scope.ngModel != 'object')\r\n                                    var data = scope.ngModel;\r\n                                else\r\n                                    var data = scope.displayModel;\r\n\r\n                                RuleEngine.isValid(rules[i], function (e) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = e.errorData.error;\r\n                                    scope.errorModel = e.errorData.error;\r\n                                    isFoundInvalid = true;\r\n                                }, data);\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                /*\r\n                 * Validate textfield rules\r\n                 */\r\n                scope.validateRules = function () {\r\n                    if (scope.readonly == 'true') {\r\n                        scope.isActive = true;\r\n                        return;\r\n                    }\r\n\r\n                    if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                        if (attrs.noTrim == 'true') {\r\n                            scope.ngModel = scope.ngModel;\r\n                        } else {\r\n                            scope.ngModel = scope.ngModel.trim();\r\n                        }\r\n                        ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n\r\n                    if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && (scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant('enterValueErrMsg');\r\n                        scope.errorModel = $translate.instant('enterValueErrMsg');\r\n                        return;\r\n                    }\r\n\r\n                    if (scope.type == 'number') {\r\n                        if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                            angular.element('#' + scope.textfieldId).val('');\r\n                            return;\r\n                        }\r\n                        if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                            if (scope.rules) {\r\n                                checkRule();\r\n                            }\r\n                            return;\r\n                        }\r\n                        if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                            scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.type == 'date' && !scope.rules) {\r\n                        $('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    scope.errorModel = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false;\r\n\r\n                        for (var i = 0; i < rules.length; i++) {\r\n                            if (typeof rules[i] == 'object') {\r\n                                if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = rules[i].error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    if (typeof scope.ngModel != 'object')\r\n                                        var data = scope.ngModel;\r\n                                    else\r\n                                        var data = scope.displayModel;\r\n\r\n                                    RuleEngine.isValid(rules[i], function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = e.errorData.error;\r\n                                        isFoundInvalid = true;\r\n                                    }, data);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                //  callback events\r\n                var isDateBlank = false;\r\n                scope.ngChange = function (e) {\r\n                    if (scope.type == 'number') {\r\n                        if (scope.ngModel == null || scope.ngModel == undefined)\r\n                            scope.count = 0;\r\n                        setPrecisionLimits();\r\n                    }\r\n                    scope.isActive = checkIfActive();\r\n                    if (rulesValidationEvent == 'change') {\r\n                        scope.validateRules();\r\n                    }\r\n\r\n                    if (scope.type != 'autocomplete') {\r\n                        updateView();\r\n                    }\r\n\r\n                    //  Value of 'e' is undefined in ng-change\r\n                    scope.onChange({\r\n                        $event: {\r\n                            data: angular.element('#' + scope.textfieldId),\r\n                            displayModel: scope.displayModel\r\n                        }\r\n                    });\r\n                };\r\n\r\n                scope.ngFocus = function (e) {\r\n                    if (scope.type === 'autocomplete' || scope.clearListOnFocus === \"true\") {\r\n                        var Obj = element.find('input').devbridgeAutocomplete();\r\n                        if (element.find('input').val() == '' && Obj) {\r\n                            Obj.clear();\r\n                        }\r\n                    }\r\n                    scope.isActive = true;\r\n                    scope.validate = false;\r\n                    if (rulesValidationEvent == 'focus') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onFocus({ $event: e });\r\n                };\r\n\r\n                scope.ngBlur = function (e) {\r\n                    if (scope.type == 'number') {\r\n                        if (scope.min != undefined || scope.min != null) {\r\n                            if (scope.ngModel == undefined || scope.ngModel == null || isNaN(scope.ngModel)) {\r\n                                $('#' + scope.textfieldId).val('');\r\n                            }\r\n                        }\r\n                    }\r\n                    if (scope.type == 'date' && isDateBlank) {\r\n                        $timeout(function () {\r\n                            var targetedEle = document.activeElement;\r\n                            if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                                //  scope.ngModel = null;\r\n                                scope.dateModel = null;\r\n                            }\r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({\r\n                                    $date: scope.ngModel\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                    if (scope.type === 'autocomplete') {\r\n                        if (scope.ngModel && scope.displayformat) {\r\n                            var splittedDisplayFormat = [];\r\n                            if (scope.displayformat.indexOf(\":\") > 0)\r\n                                splittedDisplayFormat = scope.displayformat.split(':');\r\n                            else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                                splittedDisplayFormat = scope.displayformat.split('-');\r\n                            else\r\n                                splittedDisplayFormat = scope.displayformat.split('-');\r\n                            var result = \"\";\r\n                            for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                                result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                                if (i < splittedDisplayFormat.length - 1) {\r\n                                    if (scope.displayformat.indexOf(\"-\") > 0)\r\n                                        result += '-';\r\n                                    else if (scope.displayformat.indexOf(\":\") > 0)\r\n                                        result += ':';\r\n                                }\r\n                            }\r\n                            if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n                                if (result !== scope.displayModel)\r\n                                    scope.displayModel = '';\r\n                            }\r\n                        }\r\n                    }\r\n                    //as debounce is used smartTextField templates for updating model, $timeout is used to keep validateRules() on blur in sync\r\n                    $timeout(function () {\r\n                        if (scope.type == 'date') {\r\n                            if (pickerObj && pickerObj.isShowing) {\r\n                                return;\r\n                            }\r\n                            else {\r\n                                scope.validateRules();\r\n                                scope.isActive = checkIfActive();\r\n                            }\r\n                        }\r\n                        else {\r\n                            scope.validateRules();\r\n                            scope.isActive = checkIfActive();\r\n\r\n                            try {\r\n                                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n                        }\r\n                    })\r\n\r\n                    //  had to use jQuery because 'active' class does not get removed sometimes even if scope.isActive's value is false\r\n                    scope.isActive || scope.validate ? angular.element('#' + scope.labelForTextfieldId).addClass('active') : angular.element('#' + scope.labelForTextfieldId).removeClass('active');\r\n\r\n                    //  had to use jQuery because 'invalid' class does not get removed sometimes even if scope.validate's value is false\r\n                    if (attrs.charactercounter) {\r\n                        scope.validate && scope.errorMessage ? angular.element('#' + scope.textfieldId).addClass('invalid') : angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n                    scope.focus = false;\r\n                    scope.onBlur({ $event: e });\r\n                };\r\n\r\n                scope.ngKeyUp = function (e) {\r\n                    if (scope.type == 'date') {\r\n                        if (e.which != 32) {\r\n                            var currentInputValue = $('#' + scope.textfieldId).val();\r\n                            if (currentInputValue == \"\") {\r\n                                scope.ngModel = null;\r\n                                scope.dateModel = \"\";\r\n                                isDateBlank = true;\r\n                                ngModelCtrl.$setViewValue('');\r\n                                if (angular.isFunction(scope.onDateChange)) {\r\n                                    scope.onDateChange({\r\n                                        $date: scope.ngModel\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (rulesValidationEvent == 'keyUp') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onKeyUp({ $event: e });\r\n                };\r\n\r\n                scope.ngKeyDown = function (e) {\r\n                    if (rulesValidationEvent == 'keyDown') {\r\n                        scope.validateRules();\r\n                    }\r\n                    //to control number of down arrow,up arrow signs on number fields\r\n                    if (scope.type === \"number\" && (e.keyCode == 38 || e.keyCode == 40))\r\n                        e.preventDefault();\r\n                    scope.onKeyDown({ $event: e });\r\n\r\n                };\r\n\r\n                scope.ngKeyPress = function (e) {\r\n                    if (scope.type == 'number' || attrs.datanumeric) {\r\n                        //to control number of +,-, signs and alphabets on number fields\r\n                        var charCode = e.charCode || e.keyCode,\r\n                        textValue = e.currentTarget.value,\r\n                        decimalDigit = [],\r\n                        cc = String.fromCharCode(charCode),\r\n                        escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                        if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                            e.preventDefault();\r\n                        }\r\n                        // Restrict the 2 dots entering\r\n                        if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                            e.preventDefault();\r\n                        }\r\n\r\n                        if (textValue) {\r\n                            decimalDigit = textValue.toString().split('.');\r\n                        }\r\n                        // Restrict the decimal value from entering\r\n                        if (attrs.decimalprecision) {\r\n                            if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                                e.preventDefault();\r\n                            }\r\n                            if (decimalDigit.length == 2) {\r\n                                if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                                    e.preventDefault();\r\n                                }\r\n                            }\r\n                        }\r\n                        if (scope.min != undefined || scope.min != null) {\r\n                            if (scope.min >= 0 && e.charCode == 45) {\r\n                                e.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (rulesValidationEvent == 'keyPress') {\r\n                        scope.validateRules();\r\n                    }\r\n                    scope.onKeyPress({ $event: e });\r\n                    if (e.charCode == 13) {\r\n                        scope.onEnter({ $event: e });\r\n                    }\r\n\r\n                    // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n                    if (e.target.value.length === attrs.maxlength && e.charCode !== 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                };\r\n\r\n\r\n                /*\r\n                 * This function is required to generate value attribute \r\n                 * and useful when up/down key is pressed\r\n                 */\r\n                function getFormattedData(data) {\r\n                    if (!data || data.length == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{');\r\n                            for (var j = 0; j < parentSplit.length; j++) {\r\n                                var childSplit = parentSplit[j].split('}');\r\n                                for (var k = 0; k < childSplit.length; k++) {\r\n                                    if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                        str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n\r\n                /*\r\n                 * Get plain display data\r\n                 */\r\n                function getDisplayData(data) {\r\n                    if (data == undefined || data == null || data == '') {\r\n                        return '';\r\n                    }\r\n                    var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                    try {\r\n                        var parentSplit = str.split('{');\r\n                        for (var j = 0; j < parentSplit.length; j++) {\r\n                            var childSplit = parentSplit[j].split('}');\r\n                            for (var k = 0; k < childSplit.length; k++) {\r\n                                if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                                    evalResult = eval('data.' + childSplit[k]);\r\n                                    evaluatedKeysCounter++;\r\n                                    if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                        evalResult = '';\r\n                                        nullKeysCounter++;\r\n                                    }\r\n                                    str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (evaluatedKeysCounter == nullKeysCounter) {\r\n                            str = '';\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Convert timestamp to UTC timestamp \r\n                 */\r\n                function toUTC(date) {\r\n                    return Date.UTC(\r\n                        date.getFullYear()\r\n                        , date.getMonth()\r\n                        , date.getDate()\r\n                        , date.getHours()\r\n                        , date.getMinutes()\r\n                        , date.getSeconds()\r\n                        , date.getMilliseconds()\r\n                    );\r\n                };\r\n                scope.isValueDateObj = false;\r\n                var doesContainDateString = false;\r\n                var dateFormate = scope.format;\r\n                function getGridFormatToTimestamp(stringdate) {\r\n                    var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                    // tmpModel = tmpModel.split('+');\r\n                    // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n                    return moment(tmpModel).format(dateFormate);\r\n                }\r\n                var pickerObj;\r\n                function createDatePicker() {\r\n                    $timeout(function () {\r\n                        var picker = angular.element('#' + scope.textfieldId);\r\n                        var callApplyFuncFlag = true;\r\n                        function setDateFormate(datePar) {\r\n                            if (doesContainDateString) {\r\n                                scope.ngModel = '\\/Date(' + (datePar.unix() * 1000) + ')\\/';\r\n                            } else {\r\n                                if (scope.isValueDateObj) {\r\n                                    var tempDate = datePar.format();\r\n                                    scope.ngModel = new Date(tempDate);\r\n                                } else {\r\n                                    scope.ngModel = (datePar.unix() * 1000);\r\n                                }\r\n                            }\r\n                            ngModelCtrl.$setViewValue(scope.ngModel);\r\n                            isDateBlank = false;\r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({ $date: scope.ngModel });\r\n                            }\r\n                        }\r\n                        var minDate = angular.isDefined(scope.min) ? doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(dateFormate) : '';\r\n                        var maxDate = angular.isDefined(scope.max) ? doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(dateFormate) : '';\r\n\r\n                        var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                        var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                        pickerObj = picker.daterangepicker({\r\n                            \"singleDatePicker\": true,\r\n                            \"showDropdowns\": true,\r\n                            \"timePicker\": timePicker,\r\n                            \"timePicker24Hour\": timePicker24Hour,\r\n                            \"timePickerIncrement\": timePickerIncrement,\r\n                            \"autoApply\": false,\r\n                            \"opens\": \"right\",\r\n                            \"drops\": \"down\",\r\n                            \"minDate\": minDate,\r\n                            \"maxDate\": maxDate,\r\n                            \"locale\": {\r\n                                \"format\": dateFormate,\r\n                                'cancelLabel': $translate.instant('cancelBtn'),\r\n                                'applyLabel': $translate.instant('applyBtn')\r\n                            }\r\n                        }, function (start, end, label) {\r\n                            callApplyFuncFlag = false;\r\n                            setDateFormate(end);\r\n                        }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                            var pos = pickerObj.container.offset(),\r\n                                wHeight = window.innerHeight,\r\n                                srTop = $(window).scrollTop();\r\n                            if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                                pickerObj.drops = \"up\";\r\n                                pickerObj.move();\r\n                            } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                                pickerObj.drops = \"down\";\r\n                                pickerObj.move();\r\n                            }\r\n                        }).data(\"daterangepicker\");\r\n\r\n                        picker.on('apply.daterangepicker', function (ev, pickerr) {\r\n                            if (callApplyFuncFlag) {\r\n                                setDateFormate(pickerr.endDate)\r\n                            }\r\n                            callApplyFuncFlag = true;\r\n                        });\r\n\r\n                        if (isDateBlank) {\r\n                            picker.val('');\r\n                            scope.ngModel = \"\";\r\n                            ngModelCtrl.$setViewValue('');\r\n                        };\r\n                    });\r\n                }\r\n\r\n                switch (scope.type) {\r\n                    case 'autocomplete':\r\n                        // key to be used to bind options\r\n                        var filterKeys;\r\n                        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                        }\r\n                        else {\r\n                            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                        }\r\n                        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n                        var displayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n                        /*\r\n                         * Check if the options are updated\r\n                         */\r\n                        var autoCompleteField;\r\n                        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n                            try {\r\n                                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                                    autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                                        filterKeys: filterKeys,\r\n                                        optionFormat: optionFormat,\r\n                                        displayFormat: displayFormat,\r\n                                        lookup: getFormattedData(newOptions),\r\n                                        width: scope.width,\r\n                                        showNoSuggestionNotice: showNoSuggestion,\r\n                                        noSuggestionNotice: noSuggestionNotice,\r\n                                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                                        onSelect: function (suggestion) {\r\n                                            angular.element('#' + scope.labelForTextfieldId).trigger('click');\r\n                                            scope.$evalAsync(function () {\r\n                                                scope.displayModel = getDisplayData(suggestion);\r\n                                                scope.ngModel = suggestion;\r\n                                                updateView();\r\n                                                $timeout(function () {\r\n                                                    scope.onSelect({\r\n                                                        $event: {\r\n                                                            data: suggestion\r\n                                                        }\r\n                                                    });\r\n                                                });\r\n                                            });\r\n                                        }\r\n                                    }).devbridgeAutocomplete();\r\n                                }\r\n                                else {\r\n                                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                                }\r\n                            }\r\n                            catch (e) { }\r\n                        });\r\n\r\n                        /*\r\n                         * Destroy autocomplete on scope destroy\r\n                         */\r\n                        scope.$on('$destroy', function () {\r\n                            if ($('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                                $('#' + scope.textfieldId).devbridgeAutocomplete().dispose();\r\n                            }\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                    case 'date':\r\n                        /*\r\n                         * Destroy datepicker on scope destroy\r\n                         */\r\n                        scope.$on('$destroy', function () {\r\n                            angular.element('#' + scope.textfieldId + '_root').remove();\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                    case 'text':\r\n                    case 'area':\r\n                    case 'number':\r\n                        scope.$on('$destroy', function () {\r\n                            destroyEverythingElse();\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                //Closing the suggestions on scroll to prevent overlapping issue\r\n                angular.element($window).scroll(function (e) {\r\n                    hideAutoOnScroll();\r\n                });\r\n\r\n                angular.element(\".modal, .modal-content\").scroll(function (e) {\r\n                    hideAutoOnScroll();\r\n                });\r\n\r\n                function hideAutoOnScroll() {\r\n                    if (autoCompleteField != undefined) {\r\n                        if (autoCompleteField.visible) {\r\n                            autoCompleteField.hide();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 *  Update 'active' class when textfield's value is updated\r\n                 */\r\n                switch (scope.type) {\r\n                    case 'autocomplete':\r\n                    case 'text':\r\n                    case 'area':\r\n                    case 'number':\r\n                        var unbindNumber = scope.$watch('ngModel', function (newVal) {\r\n                            if (scope.type == 'autocomplete' && angular.isDefined(newVal)) {\r\n                                scope.displayModel = getDisplayData(newVal);\r\n                                if (scope.displayModel !== \"\") {\r\n                                    scope.validate = false;\r\n                                    scope.errorMessage = null;\r\n                                    scope.errorModel = null;\r\n                            }\r\n                            }\r\n                            if (scope.type == 'number') {\r\n                                setPrecisionLimits();\r\n                            }\r\n                            if (attrs.decimalprecision && attrs.datanumeric) {\r\n                                setPrecisionLimits();\r\n                            }\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                            if (scope.type == 'area') {\r\n                                $timeout(function () {\r\n                                    angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                                });\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                    case 'date':\r\n                        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                        });\r\n                        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n                            dateFormate = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                            isDateBlank = false;\r\n                            doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                            if (newVal == \"\" || newVal == null) {\r\n                                newVal = Date.now();\r\n                                isDateBlank = true;\r\n                                scope.isValueDateObj = false;\r\n                            } else {\r\n                                if (doesContainDateString) {\r\n                                    var tmpModel = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                                    tmpModel = tmpModel.split('+');\r\n                                    tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                                    scope.dateModel = moment(tmpModel).format(dateFormate);\r\n                                }\r\n                                else {\r\n                                    if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                                        scope.isValueDateObj = true;\r\n                                    } else {\r\n                                        newVal = parseInt(newVal);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //scope.placeholder = scope.format;\r\n                            scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                            if (!isDateBlank) {\r\n                                if (!doesContainDateString) {\r\n                                    scope.dateModel = moment(newVal).format(dateFormate);\r\n                                }\r\n                            } else {\r\n                                scope.dateModel = \"\";\r\n                            }\r\n                            createDatePicker();\r\n                        });\r\n                        var unbindMin = scope.$watch('min', function (n) {\r\n                            createDatePicker();\r\n                        });\r\n                        var unbindMax = scope.$watch('max', function (n) {\r\n                            createDatePicker();\r\n                        });\r\n                        break;\r\n\r\n                    default:\r\n                        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n                            scope.isActive = checkIfActive();\r\n                            if (rulesValidationEvent == 'change') {\r\n                                scope.validateRules();\r\n                            }\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                if (scope.datanumeric == 'true') {\r\n                    scope.spinner = typeof attrs.spinner == 'undefined' ? 'true' : scope.spinner;\r\n                    scope.step = typeof attrs.step == 'undefined' ? 1 : scope.step;\r\n                    $timeout(function () {\r\n                        angular.element('#' + scope.textfieldId).inputNumber(scope.spinner, scope.step);\r\n                    });\r\n                }\r\n\r\n\r\n                function destroyEverythingElse() {\r\n                    element.off(); // deregister all event handlers\r\n                    $('#' + scope.textfieldId).off();\r\n                    $('#' + scope.labelForTextfieldId).off();\r\n\r\n                    if (unbindValidate)\r\n                        unbindValidate();\r\n                    if (unbindFocus)\r\n                        unbindFocus();\r\n                    if (unbindOptions)\r\n                        unbindOptions();\r\n                    if (unbindNumber)\r\n                        unbindNumber();\r\n                    if (unbindDateModel)\r\n                        unbindDateModel();\r\n                    if (angular.isFunction(scope.onDestroy)) {\r\n                        scope.onDestroy({});\r\n                    }\r\n                    // Removing contents of HTML from DOM\r\n                    $('#' + scope.textfieldId).remove();\r\n                    $('#' + scope.labelForTextfieldId).remove();\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTextfield/smartTextfieldTemplate.html'\r\n        };\r\n    }\r\n\r\n\r\n    function smartTextField2Func($rootScope, $timeout, $translate, ScrollTo, RuleEngine, smartTextFieldService, smartTextField3Service, $filter) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                isTitleVisible: '@'\r\n            },\r\n            compile: function () {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        if (scope.type === undefined || scope.type === 'text' || scope.type === 'area' || scope.type === 'password') {\r\n                            smartTextField_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'date') {\r\n\r\n                            SmartTextField_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'autocomplete') {\r\n\r\n                            SmartTextField_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n\r\n                        }\r\n                        else if (scope.type == 'number') {\r\n                            smartTextField_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate);\r\n                        }\r\n                        else {\r\n                            function SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n                                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n                                scope.count = 0;\r\n                                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                                var number, rulesValidationEvent;\r\n                                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n                                textfieldId++;\r\n                                scope.textfieldId = 'tf_' + textfieldId;\r\n                                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                                if (attrs.validateOn) {\r\n                                    rulesValidationEvent = attrs.validateOn;\r\n                                }\r\n                                else {\r\n                                    rulesValidationEvent = 'blur';\r\n                                }\r\n\r\n\r\n\r\n                                scope.onTextChange = function (e) {\r\n                                    scope.ngModel = e.target.value;\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    // if (rulesValidationEvent == 'change') {\r\n                                    smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                                    //  }\r\n                                    scope.onChange({ $event: e });\r\n                                };\r\n\r\n                                scope.ngBlur = function (e) {\r\n\r\n                                    scope.focus = false;\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n                                    scope.onBlur({ $event: e });\r\n                                }\r\n\r\n                                scope.ngKeyPress = function (e) {\r\n                                    scope.onKeyPress({ $event: e });\r\n                                };\r\n\r\n\r\n\r\n\r\n\r\n                                /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                                //try {\r\n                                //    ngModelCtrl.$render = function () {\r\n                                //        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                //        smartTextFieldService.updateTextValue(scope, element);\r\n                                //    };\r\n                                //}\r\n                                //catch (e) { }\r\n\r\n                                scope.prevModel = scope.ngModel;\r\n                                var updateView = function () {\r\n                                    try {\r\n                                        if (scope.ngModel !== scope.prevModel) {\r\n                                            $timeout(function () {\r\n                                                scope.prevModel = scope.ngModel;\r\n                                            });\r\n\r\n                                        }\r\n                                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                        smartTextFieldService.updateTextValue(scope, element);\r\n                                    }\r\n                                    catch (e) { }\r\n                                };\r\n\r\n\r\n\r\n                                var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                                    smartTextFieldService.updateTextValue(scope, element);\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                                });\r\n\r\n                                var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n                                    if (newVal[4] != oldVal[4]) {\r\n                                        smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    }\r\n                                    smartTextFieldService.setActiveClass(scope, element);\r\n                                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n                                });\r\n\r\n                                scope.hideShowField = function () {\r\n                                    scope.isVisible = !scope.isVisible;\r\n                                };\r\n\r\n\r\n\r\n                                smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n\r\n                                scope.$on('$destroy', function () {\r\n                                    unbindModelWatcher();\r\n                                    unbindAttributesWatcher();\r\n                                });\r\n                            }\r\n                            SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate);\r\n                        }\r\n                        //$timeout(function () {\r\n                        //    element.find(\"input\").trigger('blur'); // initiate with initial value\r\n                        //});\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function smartTextField3Func($rootScope, $timeout, $translate, ScrollTo, RuleEngine, smartTextFieldService, smartTextField3Service, $filter, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: '?ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onSearch: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                onDestroy: '&',\r\n                onDateChange: '&',\r\n                errorMessage: '@',\r\n                errorModel: '=?',\r\n                setFromGrid: '@',\r\n                isSearch: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                type: '@',\r\n                align: '@',\r\n                datanumeric: '@',\r\n                spinner: '@',\r\n                step: '@',\r\n                format: '@',    //  date format\r\n                regionalFormat: '@',    //  regional date format\r\n                timePicker: '@', //boolean value if date with time picker\r\n                isValueDateObj: '@',\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                suffixicon: '@',\r\n                maxlength: '@',\r\n                min: '@',\r\n                max: '@',\r\n                timePicker12Hour: '@',\r\n                minuteIncrement: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                width: '@',      //  autosuggest container width\r\n                minchars: '@',   //  autosuggest min chars\r\n                loading: '@',     //  loader while autosuggest data is being fetched\r\n                count: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                clearListOnFocus: '@',\r\n                retainDisplayModelAutocomplete: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                isTitleVisible: '@',\r\n                clienterror: '=?',\r\n                infinite: '@'\r\n            },\r\n            compile: function () {\r\n                return {\r\n                    post: function (scope, element, attrs, ngModelCtrl) {\r\n                        if (scope.type === undefined || scope.type === 'text' || scope.type === 'area' || scope.type === 'password') {\r\n                            smartTextField3_TextFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'date') {\r\n\r\n                            SmartTextField3_DateFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        else if (scope.type === 'autocomplete') {\r\n\r\n                            SmartTextField3_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate, $window);\r\n\r\n                        }\r\n                        else if (scope.type == 'number') {\r\n                            smartTextField3_NumFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $filter, $translate);\r\n                        }\r\n                        else {\r\n                            function SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate) {\r\n                                scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n                                scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n                                scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n                                scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n                                scope.count = 0;\r\n                                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                                showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                                var number, rulesValidationEvent;\r\n                                scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n                                textfieldId++;\r\n                                scope.textfieldId = 'tf_' + textfieldId;\r\n                                scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n                                if (attrs.validateOn) {\r\n                                    rulesValidationEvent = attrs.validateOn;\r\n                                }\r\n                                else {\r\n                                    rulesValidationEvent = 'blur';\r\n                                }\r\n\r\n\r\n\r\n                                scope.onTextChange = function (e) {\r\n                                    scope.ngModel = e.target.value;\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    // if (rulesValidationEvent == 'change') {\r\n                                    smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n                                    //  }\r\n                                    scope.onChange({ $event: e });\r\n                                };\r\n\r\n                                scope.ngBlur = function (e) {\r\n\r\n                                    scope.focus = false;\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n                                    scope.onBlur({ $event: e });\r\n                                }\r\n\r\n                                scope.ngKeyPress = function (e) {\r\n                                    scope.onKeyPress({ $event: e });\r\n                                };\r\n\r\n\r\n\r\n\r\n\r\n                                /*\r\n                             *  Following code has been added to make ng-model-options work\r\n                             *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n                             */\r\n                                //try {\r\n                                //    ngModelCtrl.$render = function () {\r\n                                //        scope.ngModel = ngModelCtrl.$modelValue;\r\n                                //        smartTextField3Service.updateTextValue(scope, element);\r\n                                //    };\r\n                                //}\r\n                                //catch (e) { }\r\n\r\n                                scope.prevModel = scope.ngModel;\r\n                                var updateView = function () {\r\n                                    try {\r\n                                        if (scope.ngModel !== scope.prevModel) {\r\n                                            $timeout(function () {\r\n                                                scope.prevModel = scope.ngModel;\r\n                                            });\r\n\r\n                                        }\r\n                                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                                        smartTextField3Service.updateTextValue(scope, element);\r\n                                    }\r\n                                    catch (e) { }\r\n                                };\r\n\r\n\r\n\r\n                                var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                                    scope.isActive = smartTextField3Service.checkIfActive(scope, element);\r\n\r\n\r\n                                    smartTextField3Service.updateTextValue(scope, element);\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n                                });\r\n\r\n                                var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n                                    if (newVal[4] != oldVal[4]) {\r\n                                        smartTextField3Service.validateRules(scope, ngModelCtrl, element, attrs);\r\n                                    }\r\n                                    smartTextField3Service.setActiveClass(scope, element);\r\n                                    smartTextField3Service.updateTextFieldClass(scope, element);\r\n\r\n\r\n                                });\r\n\r\n                                scope.hideShowField = function () {\r\n                                    scope.isVisible = !scope.isVisible;\r\n                                };\r\n\r\n\r\n\r\n                                smartTextField3Service.buildTemplate(scope, element, scope.onTextChange);\r\n\r\n                                scope.$on('$destroy', function () {\r\n                                    unbindModelWatcher();\r\n                                    unbindAttributesWatcher();\r\n                                });\r\n                            }\r\n                            SmartTextField_NumberFunc(scope, element, attrs, ngModelCtrl, smartTextField3Service, $timeout, $translate);\r\n                        }\r\n                        //$timeout(function () {\r\n                        //    element.find(\"input\").trigger('blur'); // initiate with initial value\r\n                        //});\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    function smartTextField_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n\r\n            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            scope.focus = false;\r\n            scope.onBlur({ $event: e });\r\n            $timeout(function () {\r\n                //updateView();\r\n\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            if (attrs.onKeyPress) {\r\n                scope.onKeyPress({ $event: e });\r\n            }\r\n            if (attrs.onEnter && e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            scope.validate = false;\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n             scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            scope.onFocus({ $event: e });\r\n        };\r\n\r\n        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n        var updateView = function () {\r\n            try {\r\n                if (smartTextFieldService.modal.getModal(scope, ngModelCtrl) !== scope.prevModel) {\r\n\r\n                    /* Removed $timeout due to ngBlur gets fired before scope.ngModel */\r\n                    $timeout(function () {\r\n                        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n\r\n                        if (typeof scope.ngModel === 'function') {\r\n                            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                        }\r\n                    });\r\n                    //scope.$apply();\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n        var unbindModelWatcher;\r\n        if (typeof scope.ngModel != 'function') {\r\n            unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                if(scope.typing === true) scope.typing = false;\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            });\r\n        } else {\r\n            unbindModelWatcher = scope.$watch(function () { return scope.ngModel(); }, function (newVal, oldVal) {\r\n                if (newVal != oldVal) {\r\n                     scope.typing = false;\r\n                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                    smartTextFieldService.setActiveClass(scope, element);\r\n                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                }\r\n\r\n            }, true);\r\n        }\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n        unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            }\r\n            if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            if (newVal[1] || newVal[1] == \"true\") {\r\n                element.find('input').focus();\r\n            }\r\n        });\r\n\r\n        //function bindOtherWatcher() {\r\n        //    if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n        //        //if (!angular.isDefined(unbindOtherWatcher)) {\r\n\r\n        //        //}\r\n        //    }\r\n        //    else {\r\n        //        if (angular.isDefined(unbindOtherWatcher)) {\r\n        //            unbindOtherWatcher();\r\n        //        }\r\n        //    }\r\n        //}\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        updateView();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //bindOtherWatcher();\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        if (scope.timePicker === 'true') {\r\n            scope.timePicker = true;\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? moment.localeData()._longDateFormat.L : scope.placeholder;\r\n        if (scope.timePicker == true) {\r\n            scope.placeholder = moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n        }\r\n\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        scope.datetimePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker === true ? true : false);\r\n        scope.format = (scope.format ? scope.format : scope.datetimePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        scope.applyClientZone = false;\r\n        scope.isValueDateObj = false;\r\n        scope.doesContainDateString = false;\r\n        scope.dateFormat = scope.format;\r\n        scope.isDateBlank = false;\r\n\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            scope.dateFormat = moment.localeData().longDateFormat('L');\r\n            if (scope.timePicker == true) {\r\n                scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n            }\r\n            scope.format = scope.dateFormat;\r\n        }\r\n        scope.convertIntoUTC = false;\r\n        if (typeof convertIntoUTC != 'undefined') {\r\n            scope.convertIntoUTC = convertIntoUTC;\r\n        }\r\n\r\n        //if (angular.isDefined(scope.$parent.$parent.property)) {\r\n        //    //this property (applyClientZone) comes from Config.js\r\n        //    if (angular.isDefined(scope.$parent.$parent.property.applyClientZone)) {\r\n        //        scope.applyClientZone = scope.$parent.$parent.property.applyClientZone;\r\n        //    }\r\n        //}\r\n\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            // smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            if (scope.isDateBlank) {\r\n                var targetedEle = document.activeElement;\r\n                if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                    //  scope.ngModel = null;\r\n                    scope.dateModel = null;\r\n                }\r\n                if (angular.isFunction(scope.onDateChange)) {\r\n                    scope.onDateChange({\r\n                        $date: scope.ngModel\r\n                    });\r\n                }\r\n            }\r\n\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            if (e.which != 32) {\r\n                var currentInputValue = $('#' + scope.textfieldId).val();\r\n                if (currentInputValue == \"\") {\r\n                    scope.ngModel = null;\r\n                    scope.dateModel = \"\"\r\n                    scope.isDateBlank = true;\r\n                    if (angular.isFunction(scope.onDateChange)) {\r\n                        scope.onDateChange({\r\n                            $date: scope.ngModel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyUp') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            if (rulesValidationEvent == 'keyDown') {\r\n                scope.validateRules();\r\n            }\r\n            ////to control number of down arrow,up arrow signs on number fields\r\n            //if (e.keyCode == 38 || e.keyCode == 40)\r\n            //    e.preventDefault();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyPress = function (e) {\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateDateValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        //var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n\r\n        //});\r\n\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindMin;\r\n        var unbindMax\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMin)) {\r\n                    unbindMin = scope.$watch('min', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMax)) {\r\n                    unbindMax = scope.$watch('max', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n                if (angular.isDefined(unbindMin)) {\r\n                    unbindMin();\r\n                }\r\n                if (angular.isDefined(unbindMax)) {\r\n                    unbindMax();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        smartTextFieldService.updateDateClass(scope, element);\r\n        smartTextFieldService.assignDateEvents(scope, element);\r\n        bindOtherWatcher();\r\n        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n            if (newVal) {\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                if (rulesValidationEvent == 'change') {\r\n                    scope.validateRules();\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n        });\r\n        var timeOffset = 20; // this is a fixed number in-case of timeZoneOffset is not defined.\r\n        scope.updatingDateModel = function (dateObj) {\r\n            if (typeof timeZoneOffset != 'undefined') {\r\n                timeOffset = timeZoneOffset;\r\n            }\r\n\r\n            if (timeOffset == 20) {\r\n                var adjustTimeZone = 0;\r\n                if (moment().zone() == -720) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n                scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n            }\r\n            else {\r\n                var adjustTimeZone = 0;\r\n                if (timeOffset == -12) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n\r\n                if (typeof dateObj == 'object') {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).add(timeOffset * 60, 'minute').add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                } else {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).utc().zone(timeOffset * -1).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    //scope.dateModel = moment(dateObj).zone(timeOffset * -1).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                }\r\n            }\r\n\r\n        }\r\n        // should be modified to discard UTC Convertion \r\n        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n            if (scope.timePicker === 'true') {\r\n                scope.timePicker = true;\r\n            }\r\n            if (!scope.dateModifiedbyUser) {\r\n                scope.dateFormat = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                    if (scope.timePicker == true) {\r\n                        scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                    }\r\n                    scope.format = scope.dateFormat;\r\n                }\r\n\r\n                scope.isDateBlank = false;\r\n                scope.doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                if (newVal == \"\" || newVal == null || typeof newVal == 'function') {\r\n                    newVal = Date.now();\r\n                    scope.isDateBlank = true;\r\n                    scope.isValueDateObj = false;\r\n                } else {\r\n                    if (scope.doesContainDateString) {\r\n                        var dateStr = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                        var tmpModel = dateStr;\r\n                        if (dateStr.indexOf('Date') <= -1) {\r\n                            tmpModel = tmpModel.split('+');\r\n                            tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                        }\r\n                        scope.updatingDateModel(tmpModel);\r\n                        //scope.dateModel = moment(tmpModel).format(scope.dateFormat);\r\n                        //smartTextFieldService.updateDateValue(scope, element);\r\n                    }\r\n                    else {\r\n                        if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                            scope.isValueDateObj = true;\r\n                        } else if (Object.prototype.toString.call(newVal) === '[object String]' && newVal.indexOf('T') > 0) {\r\n                            //scope.isValueDateObj = true;\r\n                        } else {\r\n                            newVal = parseInt(newVal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.placeholder = scope.format;\r\n                //scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                if (!scope.isDateBlank) {\r\n                    if (!scope.doesContainDateString) {\r\n                        //if (scope.applyClientZone) {\r\n                        //    scope.dateModel = moment(newVal).parseZone().format(scope.dateFormat);\r\n                        //}\r\n                        //else {\r\n                        scope.updatingDateModel(newVal);\r\n                        //scope.dateModel = moment(newVal).format(scope.dateFormat);\r\n                        //}\r\n                    }\r\n                } else {\r\n                    scope.dateModel = \"\";\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n                smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n            }\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n            scope.dateModifiedbyUser = false;\r\n\r\n            //smartTextFieldService.updateDateValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n        });\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            //unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindNgModel();\r\n            unbindDateModel();\r\n            if (angular.isDefined(unbindMin)) {\r\n                unbindMin();\r\n            }\r\n            if (angular.isDefined(unbindMax)) {\r\n                unbindMax();\r\n            }\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            console.log(scope.displayModel);\r\n\r\n            //updateView();\r\n\r\n            //console.log(scope.displayModel);\r\n            scope.onChange({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: scope.displayModel\r\n                }\r\n            });\r\n\r\n            ////scope.ngModel = e.target.value;\r\n            //smartTextFieldService.updateAutocompleteValue (scope, element);\r\n            //smartTextFieldService.setActiveClass(scope, element);\r\n            //// if (rulesValidationEvent == 'change') {\r\n            //smartTextFieldService.validateRules(scope, ngModelCtrl, element);\r\n            //smartTextFieldService.updateTextFieldClass(scope, element);\r\n            ////  }\r\n            ////scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n\r\n\r\n            if (scope.ngModel && scope.displayformat) {\r\n                var splittedDisplayFormat = [];\r\n                if (scope.displayformat.indexOf(\":\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split(':');\r\n                else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                else\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                var result = \"\";\r\n                for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                    result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                    if (i < splittedDisplayFormat.length - 1) {\r\n                        if (scope.displayformat.indexOf(\"-\") > 0)\r\n                            result += '-';\r\n                        else if (scope.displayformat.indexOf(\":\") > 0)\r\n                            result += ':';\r\n                    }\r\n                }\r\n\r\n                // P2P-16866\r\n                if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n\r\n                    if (e.target.value.trim() == '' || result !== scope.displayModel) {\r\n                        scope.displayModel = '';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            scope.focus = false;\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            $timeout(function () {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            });\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n            try {\r\n                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                }\r\n            }\r\n            catch (e) { }\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            ////var val = e.target.value;\r\n\r\n            //scope.displayModel = e.target.value;\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n\r\n        };\r\n        scope.elmVal = null;\r\n        scope.ngKeyUp = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            //if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n            //    scope.elmVal = e.target.value;\r\n            //    scope.onChange({\r\n            //        $event: {\r\n            //            data: element.find('#' + scope.textfieldId),\r\n            //            displayModel: e.target.value\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n        scope.search = function (e) {\r\n            if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n                scope.elmVal = e.target.value;\r\n                scope.onChange({\r\n                    $event: {\r\n                        data: element.find('#' + scope.textfieldId),\r\n                        displayModel: e.target.value\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            var Obj = elm.devbridgeAutocomplete();\r\n            if (elm.val() == '' && Obj) {\r\n                Obj.clear();\r\n                scope.elmVal = '';\r\n            }\r\n            scope.onFocus({ $event: e });\r\n        }\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateAutocompleteValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.displayModel = smartTextFieldService.getDisplayData(newVal, scope);\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['focus', 'isRemovable'], function (newVal, oldVal) {\r\n                        smartTextFieldService.setActiveClass(scope, element);\r\n                        smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var unbindValidationWatcher = scope.$watchGroup(['isMandatory', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[1] != oldVal[1] || newVal[2] != oldVal[2]) {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // key to be used to bind options\r\n        var filterKeys;\r\n        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n        }\r\n        else {\r\n            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n        }\r\n        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n        scope.ndisplayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n        /*\r\n         * Check if the options are updated\r\n         */\r\n        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n            try {\r\n                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                        filterKeys: filterKeys,\r\n                        optionFormat: optionFormat,\r\n                        displayFormat: scope.ndisplayFormat,\r\n                        lookup: smartTextFieldService.getFormattedData(newOptions, scope),\r\n                        width: scope.width,\r\n                        showNoSuggestionNotice: showNoSuggestion,\r\n                        noSuggestionNotice: noSuggestionNotice,\r\n                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                        onSelect: function (suggestion) {\r\n                            angular.element(document).trigger('click');\r\n                            scope.$evalAsync(function () {\r\n                                scope.displayModel = smartTextFieldService.getDisplayData(suggestion, scope);\r\n                                scope.ngModel = suggestion;\r\n                                updateView();\r\n                                $timeout(function () {\r\n                                    scope.onSelect({\r\n                                        $event: {\r\n                                            data: suggestion\r\n                                        }\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(smartTextFieldService.getFormattedData(newOptions, scope));\r\n                }\r\n            }\r\n            catch (e) { }\r\n        });\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        smartTextFieldService.assignAutocompleteEvents(scope, element);\r\n        bindOtherWatcher();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindOptions();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n            unbindValidationWatcher();\r\n        });\r\n    }\r\n\r\n    function smartTextField_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            // if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    scope.ngModel = parseFloat(e.target.value);\r\n            //}\r\n            updateView();\r\n            //scope.ngModel = parseFloat(e.target.value);\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    var num = e.target.value;\r\n            //    if (num.trim() != '') {\r\n            //        scope.ngModel = parseFloat(num);\r\n            //    }\r\n            //    else {\r\n            //        scope.ngModel = null;\r\n            //    }\r\n            //}\r\n            updateView();\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            if (scope.type == 'number' || attrs.datanumeric) {\r\n                //to control number of +,-, signs and alphabets on number fields\r\n                var charCode = e.charCode || e.keyCode,\r\n                textValue = e.currentTarget.value,\r\n                decimalDigit = [],\r\n                cc = String.fromCharCode(charCode),\r\n                escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                    e.preventDefault();\r\n                }\r\n                // Restrict the 2 dots entering\r\n                if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                if (textValue) {\r\n                    decimalDigit = textValue.toString().split('.');\r\n                }\r\n                // Restrict the decimal value from entering\r\n                if (attrs.decimalprecision) {\r\n                    if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                    if (decimalDigit.length == 2) {\r\n                        if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.min != undefined || scope.min != null) {\r\n                    if (scope.min >= 0 && e.charCode == 45) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n            // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n            if (angular.isDefined(attrs.maxlength) && e.target.value.length == attrs.maxlength && e.charCode !== 0) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element);\r\n                //smartTextFieldService.updateTextValue(scope, element);\r\n                if (scope.ngModel != null) {\r\n                    var min = 0;\r\n                    var max = 0;\r\n                    if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                        if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                            min = 0;\r\n                            max = 0;\r\n                        }\r\n                        else {\r\n                            min = MinPrecessionValue;//global default\r\n                            max = MaxPrecessionValue;//global default\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length == 2) {\r\n                                min = splitPrecision[0];\r\n                                max = splitPrecision[1];\r\n                            }\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (scope.minmaxprecision) {\r\n                            min = JSON.parse(scope.minmaxprecision)[0];\r\n                            max = JSON.parse(scope.minmaxprecision)[1];\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                    element.find('#' + scope.textfieldId).val($filter('minPrecisionHandler')(scope.ngModel, min, max, false))\r\n                    if (!scope.ngModel) {\r\n                        var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n                        if (num != '') {\r\n                            scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        else {\r\n                            scope.ngModel = null;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.ngModel !== scope.prevModel) {\r\n                        $timeout(function () {\r\n                            scope.prevModel = scope.ngModel;\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            updateView();\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                    mDec: 0,\r\n                    aPad: false,\r\n                    aSep: thousandSep,\r\n                    aDec: decimalSep,\r\n                    vMin: Number.NEGATIVE_INFINITY,\r\n                    vMax: Number.POSITIVE_INFINITY\r\n                });\r\n            } else {\r\n                element.find('#' + scope.textfieldId).autoNumeric();\r\n            }\r\n        } else {\r\n            var thousandSep = ',';\r\n            var decimalSep = '.';\r\n            var highPrecisionLimit = 0;\r\n            if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                if (splitPrecision.length == 2) {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    highPrecisionLimit = splitPrecision[1];\r\n                }\r\n            }\r\n            element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                mDec: highPrecisionLimit,\r\n                aPad: false,\r\n                aSep: thousandSep,\r\n                aDec: decimalSep,\r\n                vMin: Number.NEGATIVE_INFINITY,\r\n                vMax: Number.POSITIVE_INFINITY,\r\n            });\r\n        }\r\n        bindOtherWatcher();\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    function smartTextField3_TextFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n        scope.typing = false;\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n        if (scope.type === 'area') {\r\n            $timeout(function () {\r\n                angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n            });\r\n        }\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n\r\n            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            $timeout(function () {\r\n                //updateView();\r\n                scope.focus = false;\r\n                scope.typing = false;\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n                scope.onBlur({ $event: e });\r\n                if (scope.type == \"area\" && scope.ngModel == \"\") {\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"hidden\");\r\n                }\r\n            });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            if (attrs.onKeyPress) {\r\n                scope.onKeyPress({ $event: e });\r\n            }\r\n            if (attrs.onEnter && e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n        var viewTimeout;\r\n        scope.ngKeyUp = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            clearInterval(viewTimeout);\r\n            viewTimeout=setInterval(function(){\r\n\t\t\t\tclearInterval(viewTimeout);\r\n\t\t\t\tupdateView();\r\n\t\t\t},1500);\r\n            scope.onKeyUp({ $event: e });\r\n            if (scope.type == \"area\") {\r\n                if ($(angular.element('#' + scope.textfieldId)).height() < 64)\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"hidden\");\r\n                else\r\n                    $(angular.element('#' + scope.textfieldId)).css(\"overflow\", \"auto\");\r\n            }\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            scope.typing = true;\r\n            smartTextFieldService.modal.setModal(scope, e.target.value, ngModelCtrl);\r\n            updateView();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            scope.onFocus({ $event: e });\r\n        };\r\n\r\n        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n        var updateView = function () {\r\n            try {\r\n                if (smartTextFieldService.modal.getModal(scope, ngModelCtrl) !== scope.prevModel) {\r\n\r\n                    /* Removed $timeout due to ngBlur gets fired before scope.ngModel */\r\n                    $timeout(function () {\r\n                        scope.prevModel = smartTextFieldService.modal.getModal(scope, ngModelCtrl);\r\n\r\n                        if (typeof scope.ngModel === 'function') {\r\n                            smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                        }\r\n                    });\r\n                    //scope.$apply();\r\n                }\r\n                /* commented next line for PPST2-2193 (same text not searched again) */\r\n                else if(scope.isSearch == \"true\") {\r\n                    ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    }\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n        var unbindModelWatcher;\r\n        if (typeof scope.ngModel != 'function') {\r\n            unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                if (scope.type === 'area') {\r\n                    $timeout(function () {\r\n                        angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            unbindModelWatcher = scope.$watch(function () { return scope.ngModel(); }, function (newVal, oldVal) {\r\n                if (newVal != oldVal) {\r\n                    scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                    smartTextFieldService.setActiveClass(scope, element);\r\n                    smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    if (scope.type === 'area') {\r\n                        $timeout(function () {\r\n                            angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }, true);\r\n        }\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                if(scope.type === 'area'){\r\n                    smartTextFieldService.buildTemplate(scope, element, scope.onTextChange,attrs);\r\n                    smartTextFieldService.updateTextValue(scope, element, ngModelCtrl);\r\n                }\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n        unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n            }\r\n            if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            if (newVal[1] || newVal[1] == \"true\") {\r\n                element.find('input').focus();\r\n            }\r\n        });\r\n\r\n        //function bindOtherWatcher() {\r\n        //    if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n        //        //if (!angular.isDefined(unbindOtherWatcher)) {\r\n\r\n        //        //}\r\n        //    }\r\n        //    else {\r\n        //        if (angular.isDefined(unbindOtherWatcher)) {\r\n        //            unbindOtherWatcher();\r\n        //        }\r\n        //    }\r\n        //}\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        updateView();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //bindOtherWatcher();\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.triggerSearchEvent = function (e) {\r\n            scope.elmVal = e.target.value;\r\n            scope.onSearch({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: e.target.value\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        smartTextFieldService.assignSearchEvents(scope, element);\r\n\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField3_DateFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate) {\r\n        if (scope.timePicker === 'true') {\r\n            scope.timePicker = true;\r\n        }\r\n\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? moment.localeData()._longDateFormat.L : scope.placeholder;\r\n        if (scope.timePicker == true) {\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                scope.placeholder = scope.regionalFormat ? scope.regionalFormat : moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n            }\r\n            else {\r\n                scope.placeholder = moment.localeData()._longDateFormat.L + ' ' + moment.localeData()._longDateFormat.LT;\r\n            }\r\n        }\r\n\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        scope.datetimePicker = (typeof scope.timePicker == undefined ? false : scope.timePicker === true ? true : false);\r\n        scope.format = (scope.format ? scope.format : scope.datetimePicker ? 'DD/MM/YYYY h:mm' : 'DD/MM/YYYY');\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        scope.applyClientZone = false;\r\n        scope.isValueDateObj = false;\r\n        scope.doesContainDateString = false;\r\n        scope.dateFormat = scope.format;\r\n        scope.isDateBlank = false;\r\n\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.regionalFormat) {\r\n                scope.dateFormat = scope.regionalFormat;\r\n            }\r\n            else {\r\n                if (scope.timePicker == true) {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                }\r\n                else {\r\n                    scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                }\r\n            }\r\n            scope.format = scope.dateFormat;\r\n        }\r\n\r\n        scope.convertIntoUTC = false;\r\n        if (typeof convertIntoUTC != 'undefined') {\r\n            scope.convertIntoUTC = convertIntoUTC;\r\n        }\r\n\r\n        //if (angular.isDefined(scope.$parent.$parent.property)) {\r\n        //    //this property (applyClientZone) comes from Config.js\r\n        //    if (angular.isDefined(scope.$parent.$parent.property.applyClientZone)) {\r\n        //        scope.applyClientZone = scope.$parent.$parent.property.applyClientZone;\r\n        //    }\r\n        //}\r\n\r\n\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n            //scope.ngModel = e.target.value;\r\n            // smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            if (scope.isDateBlank) {\r\n                var targetedEle = document.activeElement;\r\n                if (!(angular.element(targetedEle).hasClass('monthselect') || angular.element(targetedEle).hasClass('yearselect') || angular.element(targetedEle).hasClass('hourselect') || angular.element(targetedEle).hasClass('minuteselect'))) {\r\n                    //  scope.ngModel = null;\r\n                    scope.dateModel = null;\r\n                }\r\n                if (angular.isFunction(scope.onDateChange)) {\r\n                    scope.onDateChange({\r\n                        $date: scope.ngModel\r\n                    });\r\n                }\r\n            }\r\n\r\n            var selectedDate = smartTextFieldService.getSelectedDate();\r\n            if (selectedDate == '') {\r\n                $('#' + scope.textfieldId).val('');\r\n            }\r\n            if ($('#' + scope.textfieldId).find('input').daterangepicker())\r\n                $('#' + scope.textfieldId).find('input').daterangepicker().daterangepicker();\r\n            if (angular.isDefined(selectedDate) && scope.datetimePicker && selectedDate.indexOf('Date(') <= -1)\r\n                $('#' + scope.textfieldId).val(smartTextFieldService.getPreviousDate());\r\n            smartTextFieldService.setSelectedDate(undefined);\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyUp = function (e) {\r\n            if (e.which != 32) {\r\n                var currentInputValue = $('#' + scope.textfieldId).val();\r\n                smartTextFieldService.setSelectedDate($('#' + scope.textfieldId).val());\r\n                if (currentInputValue == \"\") {\r\n                    scope.ngModel = null;\r\n                    scope.dateModel = \"\"\r\n                    scope.isDateBlank = true;\r\n                    if (angular.isFunction(scope.onDateChange)) {\r\n                        scope.onDateChange({\r\n                            $date: scope.ngModel\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyUp') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyUp({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyDown = function (e) {\r\n            if (rulesValidationEvent == 'keyDown') {\r\n                scope.validateRules();\r\n            }\r\n            ////to control number of down arrow,up arrow signs on number fields\r\n            //if (e.keyCode == 38 || e.keyCode == 40)\r\n            //    e.preventDefault();\r\n            scope.onKeyDown({ $event: e });\r\n        };\r\n\r\n        scope.ngKeyPress = function (e) {\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateDateValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        //var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n\r\n        //});\r\n\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindMin;\r\n        var unbindMax\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMin)) {\r\n                    unbindMin = scope.$watch('min', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n                if (!angular.isDefined(unbindMax)) {\r\n                    unbindMax = scope.$watch('max', function (n) {\r\n                        smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n                    });\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n                if (angular.isDefined(unbindMin)) {\r\n                    unbindMin();\r\n                }\r\n                if (angular.isDefined(unbindMax)) {\r\n                    unbindMax();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        smartTextFieldService.updateDateClass(scope, element);\r\n        smartTextFieldService.assignDateEvents(scope, element);\r\n        bindOtherWatcher();\r\n        var unbindDateModel = scope.$watch('dateModel', function (newVal) {\r\n            if (newVal) {\r\n                scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n                if (rulesValidationEvent == 'change') {\r\n                    scope.validateRules();\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n            }\r\n        });\r\n        var timeOffset = 20; // this is a fixed number in-case of timeZoneOffset is not defined.\r\n        scope.updatingDateModel = function (dateObj) {\r\n            if (typeof timeZoneOffset != 'undefined') {\r\n                timeOffset = timeZoneOffset;\r\n            }\r\n\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable && scope.regionalFormat) {\r\n                timeOffset = 0;\r\n            }\r\n\r\n            if (timeOffset == 20) {\r\n                var adjustTimeZone = 0;\r\n                if (moment().zone() == -720) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n                scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n            }\r\n            else {\r\n                var adjustTimeZone = 0;\r\n                if (timeOffset == -12) {\r\n                    adjustTimeZone = -1;\r\n                }\r\n\r\n                if (typeof dateObj == 'object') {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).add(timeOffset * 60, 'minute').add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                } else {\r\n                    if (timeZoneOffset != 20) {\r\n                        scope.dateModel = moment(dateObj).utc().zone(timeOffset * -1).add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    else {\r\n                        scope.dateModel = moment(dateObj).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                    }\r\n                    //scope.dateModel = moment(dateObj).zone(timeOffset * -1).utc().add(adjustTimeZone, 'second').format(scope.dateFormat);\r\n                }\r\n            }\r\n\r\n        }\r\n        // should be modified to discard UTC Convertion \r\n        var unbindNgModel = scope.$watch('ngModel', function (newVal) {\r\n            if (scope.timePicker === 'true') {\r\n                scope.timePicker = true;\r\n            }\r\n            if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable && scope.regionalFormat) {\r\n                $timeout(function () {\r\n                    scope.dateModel = element.find('input').val();\r\n                }, 250);\r\n            }\r\n            if (!scope.dateModifiedbyUser) {\r\n                if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                    if (scope.regionalFormat) {\r\n                        scope.dateFormat = scope.regionalFormat;\r\n                    }\r\n                    else {\r\n                        if (scope.timePicker == true) {\r\n                            scope.dateFormat = moment.localeData().longDateFormat('L') + ' ' + moment.localeData().longDateFormat('LT');\r\n                        }\r\n                        else {\r\n                            scope.dateFormat = moment.localeData().longDateFormat('L');\r\n                        }\r\n                    }\r\n                    scope.dateFormat = scope.dateFormat.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                    scope.format = scope.dateFormat;\r\n                }\r\n                else {\r\n                    scope.dateFormat = scope.format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                }\r\n\r\n                scope.isDateBlank = false;\r\n                scope.doesContainDateString = scope.setFromGrid == 'true' ? true : (newVal + '').toLowerCase().indexOf('date') > -1 ? true : false;\r\n                if (newVal == \"\" || newVal == null || typeof newVal == 'function') {\r\n                    newVal = Date.now();\r\n                    scope.isDateBlank = true;\r\n                    scope.isValueDateObj = false;\r\n                } else {\r\n                    if (scope.doesContainDateString) {\r\n                        var dateStr = (newVal + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n                        var tmpModel = dateStr;\r\n                        if (dateStr.indexOf('Date') <= -1) {\r\n                            tmpModel = tmpModel.split('+');\r\n                            tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + newVal + '\").getTime()') : tmpModel[0]));\r\n                        }\r\n                        scope.updatingDateModel(tmpModel);\r\n                        //scope.dateModel = moment(tmpModel).format(scope.dateFormat);\r\n                        //smartTextFieldService.updateDateValue(scope, element);\r\n                    }\r\n                    else {\r\n                        if (Object.prototype.toString.call(newVal) === '[object Date]') {\r\n                            scope.isValueDateObj = true;\r\n                        } else if (Object.prototype.toString.call(newVal) === '[object String]' && newVal.indexOf('T') > 0) {\r\n                            //scope.isValueDateObj = true;\r\n                        } else {\r\n                            newVal = parseInt(newVal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                scope.placeholder = scope.format;\r\n                //scope.placeholder = scope.placeholder == undefined || scope.placeholder == null || scope.placeholder == \"\" ? 'DD/MM/YYYY' : scope.placeholder; // to consider custom placeholder value and not only the format of the date-time picker\r\n\r\n                if (!scope.isDateBlank) {\r\n                    if (!scope.doesContainDateString) {\r\n                        //if (scope.applyClientZone) {\r\n                        //    scope.dateModel = moment(newVal).parseZone().format(scope.dateFormat);\r\n                        //}\r\n                        //else {\r\n                        scope.updatingDateModel(newVal);\r\n                        //scope.dateModel = moment(newVal).format(scope.dateFormat);\r\n                        //}\r\n                    }\r\n                } else {\r\n                    scope.dateModel = \"\";\r\n                }\r\n                smartTextFieldService.updateDateValue(scope, element);\r\n                smartTextFieldService.createDatePicker(scope, element, ngModelCtrl);\r\n            }\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n            scope.dateModifiedbyUser = false;\r\n\r\n            //smartTextFieldService.updateDateValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n        });\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        scope.$on('$destroy', function () {\r\n            //unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindNgModel();\r\n            unbindDateModel();\r\n            if (angular.isDefined(unbindMin)) {\r\n                unbindMin();\r\n            }\r\n            if (angular.isDefined(unbindMax)) {\r\n                unbindMax();\r\n            }\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n    function SmartTextField3_AutocompleteFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $translate, $window) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            console.log(scope.displayModel);\r\n\r\n            //updateView();\r\n\r\n            //console.log(scope.displayModel);\r\n            scope.onChange({\r\n                $event: {\r\n                    data: element.find('#' + scope.textfieldId),\r\n                    displayModel: scope.displayModel\r\n                }\r\n            });\r\n\r\n            ////scope.ngModel = e.target.value;\r\n            //smartTextFieldService.updateAutocompleteValue (scope, element);\r\n            //smartTextFieldService.setActiveClass(scope, element);\r\n            //// if (rulesValidationEvent == 'change') {\r\n            //smartTextFieldService.validateRules(scope, ngModelCtrl, element);\r\n            //smartTextFieldService.updateTextFieldClass(scope, element);\r\n            ////  }\r\n            ////scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n\r\n\r\n            if (scope.ngModel && scope.displayformat) {\r\n                var splittedDisplayFormat = [];\r\n                if (scope.displayformat.indexOf(\":\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split(':');\r\n                else if (scope.displayformat.indexOf(\"-\") > 0)\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                else\r\n                    splittedDisplayFormat = scope.displayformat.split('-');\r\n                var result = \"\";\r\n                for (var i = 0; i < splittedDisplayFormat.length; i++) {\r\n                    result += eval(\"scope.ngModel.\" + splittedDisplayFormat[i].replace('{', '').replace('}', ''));\r\n                    if (i < splittedDisplayFormat.length - 1) {\r\n                        if (scope.displayformat.indexOf(\"-\") > 0)\r\n                            result += '-';\r\n                        else if (scope.displayformat.indexOf(\":\") > 0)\r\n                            result += ':';\r\n                    }\r\n                }\r\n\r\n                // P2P-16866\r\n                if (scope.retainDisplayModelAutocomplete !== \"true\") {\r\n\r\n                    if (e.target.value.trim() == '' || result !== scope.displayModel) {\r\n                        scope.displayModel = '';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            scope.focus = false;\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            $timeout(function () {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            });\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n            try {\r\n                if (angular.isDefined(scope.$parent.$parent.onStopEdit)) {\r\n                    scope.$parent.$parent.onStopEdit(scope, element);\r\n                }\r\n            }\r\n            catch (e) { }\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            ////var val = e.target.value;\r\n\r\n            //scope.displayModel = e.target.value;\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                scope.validateRules();\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n\r\n        };\r\n        scope.elmVal = null;\r\n        scope.ngKeyUp = function (e) {\r\n            ////console.log(\"The text has been changed.\");\r\n            ////updateView();\r\n\r\n            //if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n            //    scope.elmVal = e.target.value;\r\n            //    scope.onChange({\r\n            //        $event: {\r\n            //            data: element.find('#' + scope.textfieldId),\r\n            //            displayModel: e.target.value\r\n            //        }\r\n            //    });\r\n            //}\r\n\r\n\r\n\r\n\r\n        };\r\n\r\n        scope.search = function (e) {\r\n            if (e.target.value != '' && e.target.value != scope.elmVal) {\r\n                scope.elmVal = e.target.value;\r\n                scope.onChange({\r\n                    $event: {\r\n                        data: element.find('#' + scope.textfieldId),\r\n                        displayModel: e.target.value\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        scope.ngFocus = function (e) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            var Obj = elm.devbridgeAutocomplete();\r\n            if (elm.val() == '' && Obj) {\r\n                Obj.clear();\r\n                scope.elmVal = '';\r\n            }\r\n            scope.onFocus({ $event: e });\r\n        }\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateAutocompleteValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                if (scope.ngModel !== scope.prevModel) {\r\n                    $timeout(function () {\r\n                        scope.prevModel = scope.ngModel;\r\n                    });\r\n\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.displayModel = smartTextFieldService.getDisplayData(newVal, scope);\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);     \r\n\r\n\r\n            smartTextFieldService.updateAutocompleteValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n\r\n            }\r\n\r\n        });\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['focus', 'isRemovable'], function (newVal, oldVal) {\r\n                        smartTextFieldService.setActiveClass(scope, element);\r\n                        smartTextFieldService.updateTextFieldClass(scope, element);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var unbindValidationWatcher = scope.$watchGroup(['isMandatory', 'validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n            if (newVal[1] != oldVal[1] || newVal[2] != oldVal[2]) {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            if (newVal[3] != oldVal[3] || newVal[4] != oldVal[4]) {\r\n                if (scope.showinfo || scope.showwarning) {\r\n                    element.find('> .input-field').addClass('field-has-icon');\r\n                }\r\n                else {\r\n                    element.find('> .input-field').removeClass('field-has-icon');\r\n                }\r\n            }\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // key to be used to bind options\r\n        var filterKeys;\r\n        if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n            filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n        }\r\n        else {\r\n            filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n        }\r\n        var optionFormat = scope.optionformat ? scope.optionformat : '{title}';\r\n        scope.ndisplayFormat = scope.displayformat ? scope.displayformat : '{title}';\r\n\r\n        /*\r\n         * Check if the options are updated\r\n         */\r\n        var autoCompleteField;\r\n        var unbindOptions = scope.$watch('options', function (newOptions) {\r\n            try {\r\n                if (!$('#' + scope.textfieldId).devbridgeAutocomplete()) {\r\n                    autoCompleteField = $('#' + scope.textfieldId).devbridgeAutocomplete({\r\n                        filterKeys: filterKeys,\r\n                        optionFormat: optionFormat,\r\n                        displayFormat: scope.ndisplayFormat,\r\n                        lookup: smartTextFieldService.getFormattedData(newOptions, scope),\r\n                        width: scope.width,\r\n                        showNoSuggestionNotice: showNoSuggestion,\r\n                        noSuggestionNotice: noSuggestionNotice,\r\n                        minChars: angular.isDefined(scope.minchars) ? parseInt(scope.minchars) : 1,\r\n                        onSelect: function (suggestion) {\r\n                        angular.element(document).trigger('click');\r\n                        scope.$evalAsync(function () {\r\n                                scope.displayModel = smartTextFieldService.getDisplayData(suggestion, scope);\r\n                                scope.ngModel = suggestion;\r\n                            updateView();\r\n                            $timeout(function () {\r\n                                scope.onSelect({\r\n                                    $event: {\r\n                                            data: suggestion\r\n                                    }\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n                    }).devbridgeAutocomplete();\r\n                }\r\n                else {\r\n                    $('#' + scope.textfieldId).devbridgeAutocomplete().setLookup(smartTextFieldService.getFormattedData(newOptions, scope));\r\n                }\r\n            }\r\n            catch (e) { }\r\n        });\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange, attrs);\r\n        smartTextFieldService.assignAutocompleteEvents(scope, element);\r\n        bindOtherWatcher();\r\n\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n\r\n        //Closing the suggestions on scroll to prevent overlapping issue\r\n        angular.element($window).scroll(function (e) {\r\n            hideAutoOnScroll();\r\n        });\r\n\r\n        angular.element(\".modal, .modal-content\").scroll(function (e) {\r\n            hideAutoOnScroll();\r\n        });\r\n\r\n        function hideAutoOnScroll() {\r\n            if (autoCompleteField != undefined) {\r\n                if (autoCompleteField.visible) {\r\n                    autoCompleteField.hide();\r\n                }\r\n                            }\r\n            }\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            unbindOptions();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n            unbindValidationWatcher();\r\n        });\r\n    }\r\n        \r\n    function smartTextField3_NumFunc(scope, element, attrs, ngModelCtrl, smartTextFieldService, $timeout, $filter, $translate) {\r\n        scope.placeholder = scope.placeholder == undefined || scope.placeholder == null ? '' : scope.placeholder;\r\n        scope.ngModel = scope.ngModel == undefined || scope.ngModel == null ? '' : scope.ngModel;\r\n        scope.textAlign = scope.align == undefined || scope.align == null ? 'left' : scope.align;\r\n        scope.suffixicon = ((scope.suffixicon == undefined || scope.suffixicon == null) && scope.type == \"date\") ? \"#icon_Calendar\" : scope.suffixicon; //  date picker icon                    \r\n        scope.count = 0;\r\n        var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n        var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n        showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n        var number, rulesValidationEvent;\r\n        scope.type = angular.isDefined(scope.type) ? scope.type : 'text';\r\n        textfieldId++;\r\n        scope.textfieldId = 'tf_' + textfieldId;\r\n        scope.isRemovable = scope.$eval(scope.removable) == undefined ? true : scope.$eval(scope.removable);\r\n        scope.showTitle = scope.isTitleVisible == undefined || scope.isTitleVisible == null || scope.isTitleVisible == 'true' ? true : false;\r\n        scope.infinite = attrs.infinite == 'true' ? true : false;\r\n\r\n        if (attrs.validateOn) {\r\n            rulesValidationEvent = attrs.validateOn;\r\n        }\r\n        else {\r\n            rulesValidationEvent = 'blur';\r\n        }\r\n        var preDecimalLength=\"\";\r\n\t\tif(typeof scope.max != \"undefined\"){\r\n\t\t\tfor(var i=0; i < scope.max; i++){\r\n\t\t\t\tpreDecimalLength+=\"9\";\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tpreDecimalLength=Number.POSITIVE_INFINITY;\r\n\t\t}\r\n\r\n\r\n        scope.onTextChange = function (e) {\r\n\r\n            // if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    scope.ngModel = parseFloat(e.target.value);\r\n            //}\r\n            updateView();\r\n            //scope.ngModel = parseFloat(e.target.value);\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            // if (rulesValidationEvent == 'change') {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n            //  }\r\n            scope.onChange({ $event: e });\r\n        };\r\n\r\n        scope.ngBlur = function (e) {\r\n            //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n\r\n            var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n            if (num != '') {\r\n                scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n            }\r\n            else {\r\n                scope.ngModel = null;\r\n            }\r\n            //}\r\n            //else {\r\n            //    var num = e.target.value;\r\n            //    if (num.trim() != '') {\r\n            //        scope.ngModel = parseFloat(num);\r\n            //    }\r\n            //    else {\r\n            //        scope.ngModel = null;\r\n            //    }\r\n            //}\r\n            updateView();\r\n            scope.focus = false;\r\n            //smartTextFieldService.updateTextValue(scope, element);\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n\r\n\r\n            scope.onBlur({ $event: e });\r\n        }\r\n\r\n        scope.ngKeyPress = function (e) {\r\n            if (scope.type == 'number' || attrs.datanumeric) {\r\n                //to control number of +,-, signs and alphabets on number fields\r\n                var charCode = e.charCode || e.keyCode,\r\n                    textValue = e.currentTarget.value,\r\n                    decimalDigit = [],\r\n                    cc = String.fromCharCode(charCode),\r\n                    escapeChars = [37, 38, 39, 40, 46, 8];\r\n\r\n                if (isNaN(cc) && (escapeChars.indexOf(charCode) == -1)) {\r\n                    e.preventDefault();\r\n                }\r\n                // Restrict the 2 dots entering\r\n                if (textValue.toString().indexOf('.') !== -1 && charCode == 46) {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                if (textValue) {\r\n                    decimalDigit = textValue.toString().split('.');\r\n                }\r\n                // Restrict the decimal value from entering\r\n                if (attrs.decimalprecision) {\r\n                    if (charCode == 46 && parseInt(attrs.decimalprecision) == 0) {\r\n                        e.preventDefault();\r\n                    }\r\n                    if (decimalDigit.length == 2) {\r\n                        if (decimalDigit[1] && decimalDigit[1].length >= parseInt(attrs.decimalprecision, 10)) {\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.min != undefined || scope.min != null) {\r\n                    if (scope.min >= 0 && e.charCode == 45) {\r\n                        e.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (rulesValidationEvent == 'keyPress') {\r\n                smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n            }\r\n            scope.onKeyPress({ $event: e });\r\n            if (e.charCode == 13) {\r\n                scope.onEnter({ $event: e });\r\n            }\r\n\r\n            // because of debounce has applied on smart-textfield, here we need to do DOM manipulation i.e. e.target.value to get latest value from textfield\r\n            if (angular.isDefined(attrs.maxlength) && e.target.value.length == attrs.maxlength && e.charCode !== 0) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n\r\n\r\n\r\n\r\n        /*\r\n     *  Following code has been added to make ng-model-options work\r\n     *  ngModelCtrl.$render & ngModelCtrl.$setViewValue serve the purpose\r\n     */\r\n        //try {\r\n        //    ngModelCtrl.$render = function () {\r\n        //        scope.ngModel = ngModelCtrl.$modelValue;\r\n        //        smartTextFieldService.updateTextValue(scope, element);\r\n        //    };\r\n        //}\r\n        //catch (e) { }\r\n\r\n        scope.prevModel = scope.ngModel;\r\n        var updateView = function () {\r\n            try {\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                smartTextFieldService.updateTextValue(scope, element);\r\n                //smartTextFieldService.updateTextValue(scope, element);\r\n                if (scope.ngModel != null) {\r\n                    var min = 0;\r\n                    var max = 0;\r\n                    if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                        if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                            min = 0;\r\n                            max = 0;\r\n                        }\r\n                        else {\r\n                            min = MinPrecessionValue;//global default\r\n                            max = MaxPrecessionValue;//global default\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                            var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                            if (splitPrecision.length == 2) {\r\n                                min = splitPrecision[0];\r\n                                max = splitPrecision[1];\r\n                            }\r\n                        }\r\n                    }\r\n                    try {\r\n                        if (scope.minmaxprecision) {\r\n                            min = JSON.parse(scope.minmaxprecision)[0];\r\n                            max = JSON.parse(scope.minmaxprecision)[1];\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        console.log(e)\r\n                    }\r\n                    var valueToModel;\r\n                    if (scope.ngModel === '') {\r\n                        valueToModel = scope.ngModel;\r\n                    } else {\r\n                        valueToModel = $filter('minPrecisionHandler')(scope.ngModel, min, max, false);\r\n                    }\r\n                    element.find('#' + scope.textfieldId).val(valueToModel);\r\n                    if (!scope.ngModel) {\r\n                        var num = element.find('#' + scope.textfieldId).autoNumeric('get');\r\n                        if (num != '') {\r\n                            scope.ngModel = parseFloat(element.find('#' + scope.textfieldId).autoNumeric('get'));\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        else {\r\n                            scope.ngModel = null;\r\n                        }\r\n                    }\r\n\r\n                    if (scope.ngModel !== scope.prevModel) {\r\n                        $timeout(function () {\r\n                            scope.prevModel = scope.ngModel;\r\n                        });\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n            catch (e) { }\r\n        };\r\n\r\n\r\n\r\n        var unbindModelWatcher = scope.$watch('ngModel', function (newVal) {\r\n\r\n            scope.isActive = smartTextFieldService.checkIfActive(scope, element);\r\n\r\n\r\n            updateView();\r\n            smartTextFieldService.setActiveClass(scope, element);\r\n            smartTextFieldService.updateTextFieldClass(scope, element);\r\n        });\r\n\r\n\r\n        //var unbindAttributesWatcher = scope.$watchGroup(['isMandatory', 'disable', 'readonly', 'focus', 'validate', 'isRemovable'], function (newVal, oldVal) {\r\n\r\n        //    if (newVal[4] != oldVal[4]) {\r\n        //        smartTextFieldService.validateRules(scope, ngModelCtrl, element,attrs);\r\n        //    }\r\n        //    smartTextFieldService.setActiveClass(scope, element);\r\n        //    smartTextFieldService.updateTextFieldClass(scope, element);\r\n\r\n\r\n        //});\r\n\r\n        var unbindOtherWatcher;\r\n        var unbindAttributesWatcher = scope.$watchGroup(['disable', 'readonly'], function (newVal, oldVal) {\r\n            if (newVal[0] !== oldVal[0] || newVal[1] !== oldVal[1]) {\r\n                smartTextFieldService.setActiveClass(scope, element);\r\n                smartTextFieldService.updateTextFieldClass(scope, element);\r\n                bindOtherWatcher();\r\n            }\r\n\r\n        });\r\n\r\n\r\n        function bindOtherWatcher() {\r\n            if ((angular.isDefined(scope.disable) && (scope.disable == false || scope.disable == 'false')) || ((angular.isDefined(scope.readonly) && (scope.readonly == false || scope.readonly == 'false')))) {\r\n                if (!angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher = scope.$watchGroup(['isMandatory', 'focus', 'validate', 'isRemovable', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                        if (newVal[2] != oldVal[2] || newVal[4] != oldVal[4]) { //validate\r\n                            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n\r\n                            smartTextFieldService.setActiveClass(scope, element);\r\n                            smartTextFieldService.updateTextFieldClass(scope, element);\r\n                        }\r\n                        if (newVal[5] != oldVal[5] || newVal[6] != oldVal[6]) {\r\n                            if (scope.showinfo || scope.showwarning) {\r\n                                element.find('> .input-field').addClass('field-has-icon');\r\n                            }\r\n                            else {\r\n                                element.find('> .input-field').removeClass('field-has-icon');\r\n                            }\r\n                        }\r\n                        if (newVal[1] || newVal[1] == \"true\") {\r\n                            element.find('input').focus();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (angular.isDefined(unbindOtherWatcher)) {\r\n                    unbindOtherWatcher();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        scope.hideShowField = function () {\r\n            scope.isVisible = !scope.isVisible;\r\n        };\r\n\r\n\r\n\r\n        smartTextFieldService.buildTemplate(scope, element, scope.onTextChange);\r\n        if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n            if (scope.minmaxprecision == undefined || scope.minmaxprecision == '') {\r\n                element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                    mDec: 0,\r\n                    aPad: false,\r\n                    aSep: thousandSep,\r\n                    aDec: decimalSep,\r\n                    vMin: Number.NEGATIVE_INFINITY,\r\n                    vMax: preDecimalLength\r\n                });\r\n            } else {\r\n                //element.find('#' + scope.textfieldId).autoNumeric();\r\n                var highPrecisionLimit = 0;\r\n\t\t\t\tif (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n\t\t\t\t\tvar splitPrecision = JSON.parse(scope.minmaxprecision);\r\n\t\t\t\t\tif (splitPrecision.length == 2) {\r\n\t\t\t\t\t\tvar lowerPrecisionLimit = splitPrecision[0];\r\n\t\t\t\t\t\thighPrecisionLimit = splitPrecision[1];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telement.find('#' + scope.textfieldId).autoNumeric('init', {\r\n\t\t\t\t\tmDec: highPrecisionLimit,\r\n\t\t\t\t\taPad: false,\r\n\t\t\t\t\taSep: thousandSep,\r\n                    aDec: decimalSep,\r\n\t\t\t\t\tvMin: Number.NEGATIVE_INFINITY,\r\n\t\t\t\t\tvMax: preDecimalLength,\r\n\t\t\t\t});\r\n            }\r\n        }\r\n        else {\r\n            var thousandSep = ',';\r\n            var decimalSep = '.';\r\n            var highPrecisionLimit = 0;\r\n            if (scope.minmaxprecision !== undefined && scope.minmaxprecision !== '') {\r\n                var splitPrecision = JSON.parse(scope.minmaxprecision);\r\n                if (splitPrecision.length == 2) {\r\n                    var lowerPrecisionLimit = splitPrecision[0];\r\n                    highPrecisionLimit = splitPrecision[1];\r\n                }\r\n            }\r\n            element.find('#' + scope.textfieldId).autoNumeric('init', {\r\n                mDec: highPrecisionLimit,\r\n                aPad: false,\r\n                aSep: thousandSep,\r\n                aDec: decimalSep,\r\n                vMin: Number.NEGATIVE_INFINITY,\r\n                vMax: preDecimalLength,\r\n            });\r\n        }\r\n        bindOtherWatcher();\r\n        if (scope.clienterror) {\r\n            smartTextFieldService.validateRules(scope, ngModelCtrl, element, attrs);\r\n        }\r\n        //setTimeout(function () {\r\n        //    //if (scope.readonly == 'true') {\r\n        //    //    angular.element('#' + scope.textfieldId).attr('tabindex', -1);\r\n        //    //}\r\n        //    try {\r\n        //        if (angular.isDefined(scope.$parent.$parent.onEditableRender)) {\r\n        //            scope.$parent.$parent.onEditableRender(scope, element);\r\n        //        }\r\n        //    }\r\n        //    catch (e) { }\r\n        //});\r\n\r\n        scope.$on('$destroy', function () {\r\n            unbindModelWatcher();\r\n            unbindAttributesWatcher();\r\n            if (angular.isDefined(unbindOtherWatcher)) {\r\n                unbindOtherWatcher();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    angular.module('SMART2').factory('smartTextFieldService', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', '$translate', '$timeout', smartTextFieldServiceFunc])\r\n    function smartTextFieldServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile, $translate, $timeout) {\r\n        var checkIfActive = function (scope) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                return true;\r\n            }\r\n            if (scope.type == 'number' && scope.ngModel !== 0 + '' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n            }\r\n            if (scope.type != 'number' && scope.type != 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n            }\r\n            if (scope.type == 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        var setActiveClass = function (scope, element, eventType) {\r\n            scope.active = checkIfActive(scope);\r\n            var el = element.find('#' + scope.textfieldId + '_label');\r\n\r\n            if ((typeof scope.active !== 'undefined' && scope.active == true) || (typeof scope.validate !== 'undefined' && scope.validate == true)) {\r\n                if (!el.hasClass('active')) {\r\n                    el.addClass('active');\r\n                }\r\n            } else {\r\n                if (el.hasClass('active')) {\r\n                    el.removeClass('active');\r\n                }\r\n            }\r\n        }\r\n\r\n        var updateTextFieldClass = function (scope, element) {\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            var elmContainer = $(element).find('#' + scope.textfieldId + '_container');\r\n            var lbl = $(element).find('#' + scope.textfieldId + '_label');\r\n            if (typeof scope.validate !== 'undefined' && scope.validate == true && typeof scope.errorMessage !== 'undefined' && scope.errorMessage) {\r\n                if (!elm.hasClass('invalid')) {\r\n                    elm.addClass('invalid');\r\n                    lbl.attr('data-error', $translate.instant(scope.errorMessage));\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n                }\r\n            }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'right') {\r\n                if (!elm.hasClass('right-align')) {\r\n                    elm.addClass('right-align');\r\n                }\r\n                if (!lbl.hasClass('right-align')) {\r\n                    lbl.addClass('right-align');\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('right-align')) {\r\n                    elm.removeClass('right-align');\r\n                }\r\n                if (lbl.hasClass('right-align')) {\r\n                    lbl.removeClass('right-align');\r\n                }\r\n            }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'left') {\r\n                if (!elm.hasClass('left-align')) {\r\n                    elm.addClass('left-align');\r\n                }\r\n                if (!lbl.hasClass('left-align')) {\r\n                    lbl.addClass('left-align');\r\n                }\r\n            }\r\n            else {\r\n                if (elm.hasClass('left-align')) {\r\n                    elm.removeClass('left-align');\r\n                }\r\n                if (lbl.hasClass('left-align')) {\r\n                    lbl.removeClass('left-align');\r\n                }\r\n            }\r\n\r\n            if ((typeof scope.readonly !== 'undefined' && (scope.readonly == true || scope.readonly == 'true')) || (typeof scope.disable !== 'undefined' && (scope.disable === 'true' || scope.disable === true))) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n                elmContainer.addClass('readOnlyField');\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n                }\r\n            }\r\n            else {\r\n                elm.prop(\"readonly\", false);\r\n                elm.attr(\"disabled\", false);\r\n                elm.removeAttr('tabindex');\r\n                elmContainer.removeClass('readOnlyField');\r\n            }\r\n\r\n\r\n            if (typeof scope.autocomplete != 'undefiend' && (scope.autocomplete == 'true' || scope.autocomplete == true))// \"{{autocomplete?'on':'off'}}\")\r\n            {\r\n\r\n            }\r\n            else {\r\n                // elm.autocomplete().disable();\r\n            }\r\n\r\n            //if (typeof scope.disable !== 'undefined' && scope.disable == true) {\r\n            //    elm.attr(\"disabled\", \"disabled\")\r\n            //}\r\n            //else {\r\n            //    elm.attr(\"disabled\", false);\r\n            //}\r\n\r\n\r\n            if (!elm.hasClass('ng-valid')) {\r\n                elm.addClass('ng-pristine ng-valid ng-scope ng-touched');\r\n            }\r\n\r\n\r\n            if (typeof scope.placeholder !== 'undefined' && scope.placeholder != '') {\r\n                elm.attr(\"placeholder\", scope.placeholder)\r\n            }\r\n\r\n            //Optional Field\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory == false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var container = $(element).find('#' + scope.textfieldId + '_container');\r\n                if (typeof optionalField == 'undefiend' || (typeof optionalField !== 'undefiend' && optionalField.length == 0)) {\r\n                    container.append(buildOptionalFieldTemplate(scope));\r\n                    optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n                    if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                        optionalField.bind(\"click\", scope.hideShowField);\r\n                    }\r\n                }\r\n                if (!container.hasClass('optionalField')) {\r\n                    container.addClass('optionalField');\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (typeof optionalField !== 'undefiend' && optionalField.length > 0) {\r\n                    optionalField.remove();\r\n                }\r\n            }\r\n\r\n            if (scope.type === 'text' || scope.type === 'number' || scope.type === 'area') {\r\n                if (typeof scope.maxlength != 'undefined') {\r\n                    if (parseInt(scope.maxlength) > -1) {\r\n                        elm.attr('maxlength', parseInt(scope.maxlength));\r\n                    }\r\n                }\r\n            }\r\n\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                className = className.replace('ng-hide', \"\");\r\n                element.removeClass(className);\r\n            }\r\n            elmContainer.addClass(className);\r\n        }\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory === false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.textfieldId + '_opField');\r\n                return optionalField;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildPrefixiconTemplate = function (scope) {\r\n            if (typeof scope.prefixicon !== 'undefined' && scope.prefixicon) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldprefixiconTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_prefixicon');\r\n                html = html.replace('{{prefixicon}}', scope.prefixicon);\r\n                return html;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildSpinnerTemplate = function (scope) {\r\n            if (!scope.type == 'autocomplete' && typeof scope.loading !== 'undefined' && scope.loading == true) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldSpinnerTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_spinner');\r\n                return html;\r\n            }\r\n            return '';\r\n        };\r\n\r\n        var buildTextFieldTemplate = function (scope) {\r\n            var html = '';\r\n\r\n            if (scope.type === 'area' && scope.readonly === 'true') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaReadonlyElementTemplate.html');\r\n            } else if (scope.type === 'area') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaElementTemplate.html');\r\n            }\r\n            else {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldElementTemplate.html');\r\n            }\r\n            if (scope.type === 'password') {\r\n                html = html.replace('type=\"text\"', 'type=\"password\"');\r\n            }\r\n            html = html.replace('{{id}}', scope.textfieldId);\r\n            html = html.replace('{{showHideReadMoreContent}}', 'showHideReadMoreContent' + scope.textfieldId);\r\n            html = html.replace('{{showLessContent}}', $translate.instant('showLess'));\r\n            html = html.replace('{{showMoreContent}}', $translate.instant('showMoreContent'));\r\n            return html;\r\n        };\r\n\r\n        var buildInfoIconTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //if (scope.showwarning || scope.showinfo) {\r\n            //    html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        //var buildWarningIconTemplate = function (scope) {\r\n        //    var html = '';\r\n        //    if (scope.showwarning || scope.showinfo) {\r\n        //        html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldwarningiconTemplate.html');\r\n        //    }\r\n        //    return html;\r\n        //};\r\n\r\n        var buildLabelTemplate = function (scope) {\r\n            var html = '';\r\n            //if (typeof scope.label !== 'undefined' && scope.label.trim() != '') {\r\n            html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldLabelTemplate.html');\r\n            html = html.replace('{{id}}', scope.textfieldId + '_label');\r\n            html = html.replace('{{textfieldId}}', scope.textfieldId);\r\n            html = html.replace('{{label}}', typeof scope.label === 'undefined' ? '' : scope.label);\r\n            if (!scope.label) {\r\n                html = html.replace('class=\"\"', 'class=\"empty-label\"');\r\n            }\r\n\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        var buildTemplate = function (scope, element, onChangeCallback, attrs) {\r\n            var container = $('<div/>', { id: scope.textfieldId + '_container' });// document.createElement('div');\r\n\r\n            var css = '';\r\n            if ((scope.isMandatory === false || scope.isMandatory === 'false') && scope.isRemovable === true) {\r\n                css += ' optionalField';\r\n            }\r\n            if (scope.showinfo || scope.showwarning) {\r\n                css += ' field-has-icon';\r\n                //if (scope.showinfo && scope.showwarning) {\r\n                //    css += ' field-has-two-icons';\r\n                //}\r\n            }\r\n            if (scope.readonly === 'true' || scope.disable === 'true') {\r\n                css += ' readOnlyField';\r\n            }\r\n            //if (!scope.customoption) {\r\n            //    css += ' defaultSelected';\r\n            //}\r\n            //if (scope.validate === true && scope.errorMessage) {\r\n            //    css += ' invalid';\r\n            //}\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                element.removeClass(className);\r\n            }\r\n            container.addClass(className + ' input-field ' + css);\r\n\r\n\r\n            container.append('<div class=\"elements-include\">' + buildOptionalFieldTemplate(scope) + buildPrefixiconTemplate(scope) + buildSpinnerTemplate(scope) + buildTextFieldTemplate(scope) + buildLabelTemplate(scope) + '</div>');\r\n            container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.html(container);\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            elm.on(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            elm.on(\"blur\", scope.ngBlur);\r\n\r\n            if (scope.type != undefined && scope.type == 'number') {\r\n                // elm.attr('type', 'number');\r\n\r\n                if (scope.min != undefined && scope.min != null) {\r\n                    if ($.isNumeric(scope.min)) {\r\n                        elm.attr('min', scope.min);\r\n                    }\r\n                }\r\n                if (scope.max != undefined && scope.max != null) {\r\n                    if ($.isNumeric(scope.max)) {\r\n                        elm.attr('max', scope.max);\r\n                    }\r\n                }\r\n\r\n                elm.bind('keypress', scope.ngKeyPress);\r\n\r\n\r\n\r\n            } else if (scope.type != undefined && scope.type == 'autocomplete') {\r\n                elm.on(\"focus\", scope.ngFocus);\r\n\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n                }\r\n            } else if (scope.type != undefined && (scope.type == 'area' || scope.type == 'text')) {\r\n\r\n                // Need to add debounce for updating the ngModel\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n                }\r\n                //if (attrs.onKeyUp) {\r\n                //    elm.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n                //}\r\n                if (attrs.onKeyDown) {\r\n                    elm.bind('keydown', debounce(scope.ngKeyDown, 250));\r\n                }\r\n                if (attrs.onFocus) {\r\n                    elm.bind('focus', scope.ngFocus);\r\n                }\r\n                // Need to optimize this line, post finding of better approach. It is required for filtering ng-repeat\r\n                elm.bind('keyup', scope.ngKeyUp);\r\n            }\r\n\r\n\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n            }\r\n            updateTextFieldClass(scope, element);\r\n            setActiveClass(scope, element);\r\n\r\n            if (angular.isDefined(scope.charactercounter) && scope.charactercounter == 'true') {\r\n                elm.attr('length', scope.maxlength);\r\n                elm.characterCounter();\r\n            }\r\n\r\n        };\r\n\r\n        var updateTextValue = function (scope, element, ngModelCtrl) {\r\n            var elm = element.find('#' + scope.textfieldId),\r\n                addClassElem = element.find('#showHideReadMoreContent' + scope.textfieldId),\r\n                showLessContent = element.find('.readOnlyshowLess'),\r\n                showMoreContent = element.find('.readOnlyShowMore');\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n\r\n                if ((modal.getModal(scope, ngModelCtrl)).length < 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.hide();\r\n                } else if ((modal.getModal(scope, ngModelCtrl)).length > 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.show();\r\n                }\r\n            }\r\n            if (scope.type === 'number') {\r\n                if (modelVal === null && scope.placeholder === \"\") {\r\n                    elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                } else {\r\n                    elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                }\r\n            }\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n\r\n                addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n            }\r\n            if (scope.type === 'area' && scope.readonly === 'true') {\r\n\r\n                if (elm.text() !== modal.getModal(scope, ngModelCtrl)) { elm.text(modal.getModal(scope, ngModelCtrl)); }\r\n                //addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n                $(showLessContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showMoreContent).show();\r\n                    $(addClassElem).removeClass('areareadOnlyContentPara2');\r\n                    $(addClassElem).addClass('ellipsis areareadOnlyContentPara1');\r\n                });\r\n                $(showMoreContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showLessContent).show();\r\n                    $(addClassElem).removeClass('ellipsis areareadOnlyContentPara1');\r\n                    $(addClassElem).addClass('areareadOnlyContentPara2');\r\n\r\n                });\r\n            }\r\n            else {\r\n                if (elm.val() !== modal.getModal(scope, ngModelCtrl) && !scope.typing) {\r\n                    elm.val(modal.getModal(scope, ngModelCtrl));\r\n                }\r\n                if (scope.showTitle) {\r\n                    elm.attr('title', modal.getModal(scope, ngModelCtrl));\r\n                }\r\n                if (modal.getModal(scope, ngModelCtrl) === '') {\r\n                    elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                } else {\r\n                    elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                }\r\n\r\n                /* Adding class truncate to input*/\r\n                if (!elm.hasClass('materialize-textarea') && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                    elm.addClass('truncate');\r\n                } else {\r\n                    elm.removeClass('truncate')\r\n                };\r\n            }\r\n        \r\n        }\r\n        var modal = {\r\n            getModal: function (scope, ngModelCtrl) {\r\n                return typeof scope.ngModel == \"function\" ? ngModelCtrl.$modelValue : scope.ngModel;\r\n            },\r\n            setModal: function (scope, value, ngModelCtrl) {\r\n\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    ngModelCtrl.$setViewValue(value)\r\n                    ngModelCtrl.$render()\r\n                } else {\r\n                    scope.ngModel = value;\r\n                }\r\n            }\r\n        };\r\n\r\n        var updateDateValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.dateModel);\r\n            elm.attr('title', scope.dateModel);\r\n        }\r\n\r\n        var updateAutocompleteValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.displayModel);\r\n            elm.attr('title', scope.displayModel);\r\n        }\r\n\r\n\r\n        var checkRule = function (scope, element) {\r\n            var rules = scope.$eval(scope.rules);\r\n            var isFoundInvalid = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n                if (typeof rules[i] == 'object') {\r\n                    if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = rules[i].error;\r\n                        scope.errorModel = rules[i].error;\r\n                        break;\r\n                    } else {\r\n                        if (scope.type === 'date') {\r\n                            angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (!isFoundInvalid) {\r\n                        if (typeof scope.ngModel != 'object')\r\n                            var data = scope.ngModel;\r\n                        else\r\n                            var data = scope.displayModel;\r\n\r\n                        RuleEngine.isValid(rules[i], function (e) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = e.errorData.error;\r\n                            scope.errorModel = rules[i].error;\r\n                            isFoundInvalid = true;\r\n                        }, data);\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var validateRules = function (scope, ngModelCtrl, element, attrs) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                scope.isActive = true;\r\n                return;\r\n            }\r\n\r\n            if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                if (attrs.noTrim == 'true') {\r\n                    //scope.ngModel = scope.ngModel;\r\n                } else {\r\n                    //scope.ngModel = scope.ngModel.trim();\r\n                    modal.setModal(scope, modal.getModal(scope, ngModelCtrl).trim(), ngModelCtrl);\r\n                }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n            }\r\n\r\n            if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (typeof scope.ngModel === 'undefined' || scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (scope.clienterror) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                return;\r\n            }\r\n\r\n            if (scope.type == 'number') {\r\n                if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                    angular.element('#' + scope.textfieldId).val('');\r\n                    return;\r\n                }\r\n                if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                    if (scope.rules) {\r\n                        checkRule(scope, element);\r\n                    }\r\n                    return;\r\n                }\r\n                //if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                //    scope.validate = true;\r\n                //    scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                //    scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                //    return;\r\n                //}\r\n\r\n            }\r\n\r\n            // CON-5898\r\n            if (scope.type == 'date' && !scope.rules) {\r\n                $('#' + scope.textfieldId).removeClass('invalid');\r\n            }\r\n\r\n            scope.validate = false;\r\n            scope.errorMessage = null;\r\n            scope.errorModel = null;\r\n\r\n            if (scope.rules) {\r\n                checkRule(scope, element);\r\n            }\r\n        };\r\n\r\n        var debounce = function (func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n        var updateDateClass = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            if (scope.type == 'date') {\r\n                if (!el.hasClass('datepicker')) {\r\n                    el.addClass('datepicker');\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        var assignDateEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.bind('keydown', scope.ngKeyDown);\r\n            el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', scope.ngKeyUp);\r\n\r\n        }\r\n\r\n        var assignAutocompleteEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            //el.bind('keydown', scope.ngKeyDown);\r\n            //el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n            el.on('input', debounce(scope.search, 250));\r\n\r\n        }\r\n\r\n        /*\r\n          * This function is required to generate value attribute \r\n          * and useful when up/down key is pressed\r\n          */\r\n        var getFormattedData = function (data, scope) {\r\n            if (!data || data.length == 0) {\r\n                return [];\r\n            }\r\n            for (var i = 0; i < data.length; i++) {\r\n                var str = scope.ndisplayFormat;\r\n                try {\r\n                    var parentSplit = str.split('{');\r\n                    for (var j = 0; j < parentSplit.length; j++) {\r\n                        var childSplit = parentSplit[j].split('}');\r\n                        for (var k = 0; k < childSplit.length; k++) {\r\n                            if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) { }\r\n                data[i].value = str.trim();\r\n            }\r\n            return data;\r\n        };\r\n        /*\r\n            *  Convert timestamp to UTC timestamp \r\n            */\r\n        var toUTC = function (date) {\r\n            return Date.UTC(\r\n                date.getFullYear()\r\n                , date.getMonth()\r\n                , date.getDate()\r\n                , date.getHours()\r\n                , date.getMinutes()\r\n                , date.getSeconds()\r\n                , date.getMilliseconds()\r\n            );\r\n        };\r\n\r\n        var getGridFormatToTimestamp = function (scope, stringdate) {\r\n            var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n            // tmpModel = tmpModel.split('+');\r\n            // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n            //if (scope.applyClientZone) {\r\n            //    return moment(tmpModel).parseZone().format(scope.dateFormat);\r\n            //}\r\n            //else {\r\n            return moment(tmpModel).format(scope.dateFormat);\r\n            //}\r\n        }\r\n\r\n        var updateNgModel = function (scope, timestamp) {\r\n            scope.dateModifiedbyUser = true;\r\n            if (scope.timePicker == true) {\r\n                if (scope.convertIntoUTC || timeZoneOffset != 20) {\r\n                    // that means the date will be saved in UTC Format\r\n                    scope.ngModel = moment(timestamp * 1000).add((timeZoneOffset * -60), 'minute').format('YYYY-MM-DDTHH:mm:ss');  //'\\/Date(' + ((timestamp - (moment().zone() * 60)) * 1000) + ')\\/';\r\n                } else {\r\n                    //This case is applied for Sourcing. because of the converstion happed before saving.\r\n                    scope.ngModel = '\\/Date(' + (timestamp * 1000) + ')\\/';\r\n                }\r\n            }\r\n            else {\r\n                // hooking a fixed time to fix the flipping issues.\r\n                // if (scope.convertIntoUTC) {\r\n                //scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                //}else\r\n                //{\r\n                //    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                //}\r\n\r\n                if (timeZoneOffset != 20) {\r\n                    scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                } else {\r\n                    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        var createDatePicker = function (scope, element, ngModelCtrl) {\r\n            setTimeout(function () {\r\n                var picker = element.find('#' + scope.textfieldId);\r\n                var callApplyFuncFlag = true;\r\n                function setDateFormate(datePar) {\r\n                    updateNgModel(scope, datePar.unix());\r\n                    $timeout(function () {\r\n                        // if (scope.doesContainDateString) {\r\n\r\n                        //} else {\r\n                        //    if (scope.isValueDateObj) {\r\n                        //        var tempDate = datePar.format();\r\n                        //        scope.ngModel = new Date(tempDate);\r\n                        //    } else {\r\n                        //        scope.ngModel = (datePar.unix() * 1000);\r\n                        //    }\r\n                        //}\r\n                        // ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        scope.isDateBlank = false;\r\n                        if (angular.isFunction(scope.onDateChange)) {\r\n                            scope.onDateChange({ $event: { date: scope.ngModel }});\r\n                        }\r\n\r\n                    })\r\n                }\r\n                var minDate = angular.isDefined(scope.min) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(scope.dateFormat) : '';\r\n                var maxDate = angular.isDefined(scope.max) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(scope.dateFormat) : '';\r\n\r\n                var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                var pickerObj = picker.daterangepicker({\r\n                    \"singleDatePicker\": true,\r\n                    \"showDropdowns\": true,\r\n                    \"timePicker\": scope.datetimePicker,\r\n                    \"timePicker24Hour\": timePicker24Hour,\r\n                    \"timePickerIncrement\": timePickerIncrement,\r\n                    \"autoApply\": false,\r\n                    \"opens\": \"right\",\r\n                    \"drops\": \"down\",\r\n                    \"minDate\": minDate,\r\n                    \"maxDate\": maxDate,\r\n                    \"autoUpdateInput\": false,\r\n                    \"locale\": {\r\n                        \"format\": scope.dateFormat,\r\n                        'cancelLabel': $translate.instant('cancelBtn'),\r\n                        'applyLabel': $translate.instant('applyBtn')\r\n                    }\r\n                }, function (start, end, label) {\r\n                    callApplyFuncFlag = false;\r\n                    setDateFormate(start);\r\n                }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                    var pos = pickerObj.container.offset(),\r\n                        wHeight = window.innerHeight,\r\n                        srTop = $(window).scrollTop();\r\n                    if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                        pickerObj.drops = \"up\";\r\n                        pickerObj.move();\r\n                    } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                        pickerObj.drops = \"down\";\r\n                        pickerObj.move();\r\n                    }\r\n                }).data(\"daterangepicker\");\r\n\r\n                picker.on('apply.daterangepicker', function (ev, pickerObj) {\r\n                    if (callApplyFuncFlag) {\r\n                        setDateFormate(pickerObj.startDate)\r\n                    }\r\n                    callApplyFuncFlag = true;\r\n                    pickerObj.autoUpdateInput = true;\r\n                    pickerObj.updateElement();\r\n                    pickerObj.autoUpdateInput = false;\r\n                });\r\n\r\n                if (scope.isDateBlank) {\r\n                    picker.val('');\r\n                    scope.ngModel = \"\";\r\n                    // WS-2072\r\n                    //ngModelCtrl.$setViewValue('');\r\n\r\n                };\r\n            });\r\n        }\r\n\r\n        var getDisplayData = function (data, scope) {\r\n            if (data == undefined || data == null || data == '') {\r\n                return '';\r\n            }\r\n            var str = scope.ndisplayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                            evalResult = eval('data.' + childSplit[k]);\r\n                            evaluatedKeysCounter++;\r\n                            if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                evalResult = '';\r\n                                nullKeysCounter++;\r\n                            }\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                        }\r\n                    }\r\n                }\r\n                if (evaluatedKeysCounter == nullKeysCounter) {\r\n                    str = '';\r\n                }\r\n            }\r\n            catch (e) { }\r\n            return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n        }\r\n\r\n        function debounce(func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n\r\n\r\n        var service = {\r\n            buildTemplate: buildTemplate,\r\n            setActiveClass: setActiveClass,\r\n            updateTextFieldClass: updateTextFieldClass,\r\n            checkIfActive: checkIfActive,\r\n            validateRules: validateRules,\r\n            checkRule: checkRule,\r\n            updateTextValue: updateTextValue,\r\n            debounce: debounce,\r\n            updateDateClass: updateDateClass,\r\n            assignDateEvents: assignDateEvents,\r\n            getFormattedData: getFormattedData,\r\n            toUTC: toUTC,\r\n            getGridFormatToTimestamp: getGridFormatToTimestamp,\r\n            createDatePicker: createDatePicker,\r\n            updateDateValue: updateDateValue,\r\n            updateAutocompleteValue: updateAutocompleteValue,\r\n            getDisplayData: getDisplayData,\r\n            assignAutocompleteEvents: assignAutocompleteEvents,\r\n            modal: modal\r\n        };\r\n\r\n        return service;\r\n    }\r\n\r\n    angular.module('SMART2').factory('smartTextField3Service', ['ScrollTo', 'RuleEngine', '$templateCache', '$compile', '$translate', '$timeout', smartTextField3ServiceFunc])\r\n        function smartTextField3ServiceFunc(ScrollTo, RuleEngine, $templateCache, $compile, $translate, $timeout) {\r\n        var _selectedDate, _previousDate;\r\n        var getSelectedDate = function () {\r\n            return _selectedDate;\r\n        };\r\n        var setSelectedDate = function (date) {\r\n            _selectedDate = date;\r\n        };\r\n        var getPreviousDate = function () {\r\n            return _previousDate;\r\n        };\r\n        var setPreviousDate = function (date) {\r\n            _previousDate = date;\r\n        };\r\n        var checkIfActive = function (scope) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                return true;\r\n        }\r\n            if (scope.type == 'number' && scope.ngModel !== 0 + '' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || isNaN(scope.ngModel) || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n        }\r\n            if (scope.type != 'number' && scope.type != 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.ngModel === '' || scope.ngModel === undefined || scope.ngModel === null)) {\r\n                return false;\r\n        }\r\n            if (scope.type == 'autocomplete' && (typeof scope.placeholder !== 'undefined' && scope.placeholder === '') && (typeof scope.ngModel === 'undefined' || scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                return false;\r\n        }\r\n            return true;\r\n        }\r\n\r\n        var setActiveClass = function (scope, element, eventType) {\r\n            scope.active = checkIfActive(scope);\r\n            var el = element.find('#' + scope.textfieldId + '_label');\r\n\r\n            if ((typeof scope.active !== 'undefined' && scope.active == true) || (typeof scope.validate !== 'undefined' && scope.validate == true)) {\r\n                if (!el.hasClass('active')) {\r\n                    el.addClass('active');\r\n            }\r\n            } else {\r\n                if (el.hasClass('active')) {\r\n                    el.removeClass('active');\r\n            }\r\n        }\r\n        }\r\n\r\n        var updateTextFieldClass = function (scope, element) {\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            var elmContainer = $(element).find('#' + scope.textfieldId + '_container');\r\n            var lbl = $(element).find('#' + scope.textfieldId + '_label');\r\n            if (typeof scope.validate !== 'undefined' && scope.validate == true && typeof scope.errorMessage !== 'undefined' && scope.errorMessage) {\r\n                if (!elm.hasClass('invalid')) {\r\n                    elm.addClass('invalid');\r\n                    lbl.attr('data-error', $translate.instant(scope.errorMessage));\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n            }\r\n        }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'right') {\r\n                if (!elm.hasClass('right-align')) {\r\n                    elm.addClass('right-align');\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('right-align')) {\r\n                    elm.removeClass('right-align');\r\n            }\r\n        }\r\n\r\n            if (typeof scope.textAlign !== 'undefined' && scope.textAlign == 'left') {\r\n                if (!elm.hasClass('left-align')) {\r\n                    elm.addClass('left-align');\r\n            }\r\n            }\r\n            else {\r\n                if (elm.hasClass('left-align')) {\r\n                    elm.removeClass('left-align');\r\n            }\r\n        }\r\n\r\n            if ((typeof scope.readonly !== 'undefined' && (scope.readonly == true || scope.readonly == 'true')) || (typeof scope.disable !== 'undefined' && (scope.disable === 'true' || scope.disable === true))) {\r\n                elm.prop(\"readonly\", true);\r\n                elm.attr(\"disabled\", \"disabled\");\r\n                elm.attr('tabindex', -1);\r\n                elmContainer.addClass('readOnlyField');\r\n                if (elm.hasClass('invalid')) {\r\n                    elm.removeClass('invalid');\r\n                    lbl.attr('data-error', '');\r\n            }\r\n            }\r\n            else {\r\n                elm.prop(\"readonly\", false);\r\n                elm.attr(\"disabled\", false);\r\n                elm.removeAttr('tabindex');\r\n                elmContainer.removeClass('readOnlyField');\r\n        }\r\n\r\n\r\n            if (typeof scope.autocomplete != 'undefiend' && (scope.autocomplete == 'true' || scope.autocomplete == true))// \"{{autocomplete?'on':'off'}}\")\r\n            {\r\n\r\n            }\r\n            else {\r\n                // elm.autocomplete().disable();\r\n        }\r\n\r\n            //if (typeof scope.disable !== 'undefined' && scope.disable == true) {\r\n            //    elm.attr(\"disabled\", \"disabled\")\r\n            //}\r\n            //else {\r\n            //    elm.attr(\"disabled\", false);\r\n            //}\r\n\r\n\r\n            if (!elm.hasClass('ng-valid')) {\r\n                elm.addClass('ng-pristine ng-valid ng-scope ng-touched');\r\n        }\r\n\r\n\r\n            if (typeof scope.placeholder !== 'undefined' && scope.placeholder != '') {\r\n                elm.attr(\"placeholder\", scope.placeholder)\r\n        }\r\n\r\n            //Optional Field\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory == false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var container = $(element).find('#' + scope.textfieldId + '_container');\r\n                if (typeof optionalField == 'undefiend' || (typeof optionalField !== 'undefiend' && optionalField.length == 0)) {\r\n                    container.append(buildOptionalFieldTemplate(scope));\r\n                    optionalField = $(element).find('#' + scope.textfieldId + '_opField');\r\n                    if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                        optionalField.bind(\"click\", scope.hideShowField);\r\n                }\r\n            }\r\n                if (!container.hasClass('optionalField')) {\r\n                    container.addClass('optionalField');\r\n            }\r\n\r\n            }\r\n            else {\r\n                if (typeof optionalField !== 'undefiend' && optionalField.length > 0) {\r\n                    optionalField.remove();\r\n            }\r\n        }\r\n\r\n            if (scope.type === 'text' || scope.type === 'number' || scope.type === 'area') {\r\n                if (typeof scope.maxlength != 'undefined') {\r\n                    if (parseInt(scope.maxlength) > -1) {\r\n                        elm.attr('maxlength', parseInt(scope.maxlength));\r\n                }\r\n            }\r\n        }\r\n\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                className = className.replace('ng-hide', \"\");\r\n                element.removeClass(className);\r\n        }\r\n            elmContainer.addClass(className);\r\n        }\r\n\r\n        var buildOptionalFieldTemplate = function (scope) {\r\n            if ((typeof scope.isMandatory !== 'undefined' && (scope.isMandatory == 'false' || scope.isMandatory === false)) && (scope.isRemovable == true || scope.isRemovable == 'true')) {\r\n                var optionalField = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldOptionalFieldTemplate.html');\r\n                optionalField = optionalField.replace('{{id}}', scope.textfieldId + '_opField');\r\n                return optionalField;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildPrefixiconTemplate = function (scope) {\r\n            if (typeof scope.prefixicon !== 'undefined' && scope.prefixicon) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldprefixiconTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_prefixicon');\r\n                html = html.replace('{{prefixicon}}', scope.prefixicon);\r\n                return html;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildSpinnerTemplate = function (scope) {\r\n            if (!scope.type == 'autocomplete' && typeof scope.loading !== 'undefined' && scope.loading == true) {\r\n                var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldSpinnerTemplate.html');\r\n                html = html.replace('{{id}}', scope.textfieldId + '_spinner');\r\n                return html;\r\n        }\r\n            return '';\r\n        };\r\n\r\n        var buildTextFieldTemplate = function (scope) {\r\n            var html = '';\r\n            if (scope.type === 'area' && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaReadonlyElementTemplate.html');\r\n            } else if (scope.type === 'area') {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextareaElementTemplate.html');\r\n            } else {\r\n                html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldElementTemplate.html');\r\n        }\r\n            if (scope.type === 'password') {\r\n                html = html.replace('type=\"text\"', 'type=\"password\"');\r\n        }\r\n            html = html.replace('{{id}}', scope.textfieldId);\r\n            html = html.replace('{{showHideReadMoreContent}}', 'showHideReadMoreContent' + scope.textfieldId);\r\n            html = html.replace('{{showLessContent}}', $translate.instant('showLess'));\r\n            html = html.replace('{{showMoreContent}}', $translate.instant('showMoreContent'));\r\n            return html;\r\n        };\r\n\r\n        var buildInfoIconTemplate = function (scope) {\r\n            var html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //if (scope.showwarning || scope.showinfo) {\r\n            //    html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldinfoiconTemplate.html');\r\n            //}\r\n            return html;\r\n        };\r\n\r\n            //var buildWarningIconTemplate = function (scope) {\r\n            //    var html = '';\r\n            //    if (scope.showwarning || scope.showinfo) {\r\n            //        html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldwarningiconTemplate.html');\r\n            //    }\r\n            //    return html;\r\n            //};\r\n\r\n        var buildLabelTemplate = function (scope) {\r\n            var html = '';\r\n            var dateLabel = typeof scope.format === 'undefined' ? scope.label : scope.label + \" (\" + scope.format + \")\";\r\n            //if (typeof scope.label !== 'undefined' && scope.label.trim() != '') {\r\n            html = $templateCache.get('shared/directives/uiElements/smartTextfield/smartTextfieldLabelTemplate.html');\r\n            html = html.replace('{{id}}', scope.textfieldId + '_label');\r\n            html = html.replace('{{textfieldId}}', scope.textfieldId);\r\n            html = html.replace('{{label}}', typeof scope.label === 'undefined' ? '' : scope.label);\r\n            html = html.replace('{{title}}', typeof scope.label === 'undefined' ? '' : dateLabel);\r\n            html = html.replace('{{format}}', typeof scope.format === 'undefined' ? '' : scope.format);\r\n             if (!scope.label) {\r\n                html = html.replace('class=\"\"', 'class=\"empty-label\"');\r\n        }\r\n\r\n            //}\r\n            return html;\r\n        };\r\n\r\n        var buildTemplate = function (scope, element, onChangeCallback, attrs) {\r\n            var container = $('<div/>', { id: scope.textfieldId + '_container' });// document.createElement('div');\r\n\r\n            var css = '';\r\n            if ((scope.isMandatory === false || scope.isMandatory === 'false') && scope.isRemovable === true) {\r\n                css += ' optionalField';\r\n        }\r\n            if (scope.showinfo || scope.showwarning) {\r\n                css += ' field-has-icon';\r\n                //if (scope.showinfo && scope.showwarning) {\r\n                //    css += ' field-has-two-icons';\r\n                //}\r\n        }\r\n            if (scope.readonly === 'true' || scope.disable === 'true') {\r\n                css += ' readOnlyField';\r\n        }\r\n            //if (!scope.customoption) {\r\n            //    css += ' defaultSelected';\r\n            //}\r\n            //if (scope.validate === true && scope.errorMessage) {\r\n            //    css += ' invalid';\r\n            //}\r\n            var className = '';\r\n            if (element.length > 0) {\r\n                className = element[0].className;\r\n                element.removeClass(className);\r\n                if (className) {\r\n                    scope.className = className;\r\n                }\r\n            }\r\n            container.addClass(scope.className + ' input-field ' + css);\r\n\r\n\r\n            container.append('<div class=\"elements-include\">' + buildOptionalFieldTemplate(scope) + buildPrefixiconTemplate(scope) + buildSpinnerTemplate(scope) + buildTextFieldTemplate(scope) + '</div>');\r\n            container.find('.elements-include').append($compile(buildLabelTemplate(scope))(scope));\r\n            container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //if (scope.showinfo || scope.showwarning) {\r\n            //    container.append($compile(buildInfoIconTemplate(scope))(scope));\r\n            //}\r\n\r\n            element.html(container);\r\n            var elm = $(element).find('#' + scope.textfieldId);\r\n            elm.on(\"change\", function (el) {\r\n                //console.log(el);\r\n                onChangeCallback(el);\r\n            });\r\n            elm.on(\"blur\", scope.ngBlur);\r\n\r\n            if (scope.type != undefined && scope.type == 'number') {\r\n                // elm.attr('type', 'number');\r\n\r\n                if (scope.min != undefined && scope.min != null) {\r\n                    if ($.isNumeric(scope.min)) {\r\n                        elm.attr('min', scope.min);\r\n                }\r\n            }\r\n                if (scope.max != undefined && scope.max != null) {\r\n                    if ($.isNumeric(scope.max)) {\r\n                        elm.attr('max', scope.max);\r\n                }\r\n            }\r\n\r\n                elm.bind('keypress', scope.ngKeyPress);\r\n\r\n\r\n\r\n            } else if (scope.type != undefined && scope.type == 'autocomplete') {\r\n                elm.on(\"focus\", scope.ngFocus);\r\n\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n            }\r\n            } else if (scope.type != undefined && (scope.type == 'area' || scope.type == 'text')) {\r\n\r\n                // Need to add debounce for updating the ngModel\r\n                if (attrs.onKeyPress || attrs.onEnter) {\r\n                    elm.bind('keypress', debounce(scope.ngKeyPress, 250));\r\n            }\r\n                //if (attrs.onKeyUp) {\r\n                //    elm.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n                //}\r\n                if (attrs.onKeyDown) {\r\n                    elm.bind('keydown', debounce(scope.ngKeyDown, 250));\r\n            }\r\n                if (attrs.onFocus) {\r\n                    elm.bind('focus', scope.ngFocus);\r\n            }\r\n                // Need to optimize this line, post finding of better approach. It is required for filtering ng-repeat\r\n                elm.bind('keyup', scope.ngKeyUp);\r\n            }\r\n\r\n\r\n            var optionalField = $(element).find('#' + scope.textfieldId + '_opField > i');\r\n            if (typeof optionalField != 'undefined' && optionalField.length > 0) {\r\n                optionalField.bind(\"click\", scope.hideShowField);\r\n\r\n        }\r\n            updateTextFieldClass(scope, element);\r\n            setActiveClass(scope, element);\r\n\r\n            if (angular.isDefined(scope.charactercounter) && scope.charactercounter == 'true') {\r\n                elm.attr('length', scope.maxlength);\r\n                elm.characterCounter();\r\n        }\r\n\r\n        };\r\n\r\n        var updateTextValue = function (scope, element, ngModelCtrl) {\r\n            var elm = element.find('#' + scope.textfieldId),\r\n                addClassElem = element.find('#showHideReadMoreContent' + scope.textfieldId),\r\n                showLessContent = element.find('.readOnlyshowLess'),\r\n                showMoreContent = element.find('.readOnlyShowMore');\r\n                showLessContent.hide();\r\n                showMoreContent.hide();\r\n            if (!addClassElem.hasClass('areareadOnlyContentPara2')) {\r\n                if (modal.getModal(scope, ngModelCtrl) && modal.getModal(scope, ngModelCtrl).length < 150) {\r\n                    showLessContent.hide();\r\n                    showMoreContent.hide();\r\n                } else if (modal.getModal(scope, ngModelCtrl) && modal.getModal(scope, ngModelCtrl).length > 150) {\r\n                    addClassElem.addClass('ellipsis areareadOnlyContentPara1');\r\n                    showLessContent.hide();\r\n                    showMoreContent.show();\r\n            }\r\n        }\r\n         \r\n            if (scope.type === 'area' && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                elm.text(modal.getModal(scope, ngModelCtrl));\r\n                $(showLessContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showMoreContent).show();\r\n                    $(addClassElem).removeClass('areareadOnlyContentPara2');\r\n                    $(addClassElem).addClass('ellipsis areareadOnlyContentPara1');\r\n                });\r\n                $(showMoreContent).off('click').on('click', function () {\r\n                    $(this).hide();\r\n                    $(showLessContent).show();\r\n                    $(addClassElem).removeClass('ellipsis areareadOnlyContentPara1');\r\n                    $(addClassElem).addClass('areareadOnlyContentPara2');\r\n                });\r\n            }\r\n            else {\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    $timeout(function () {\r\n                        elm = element.find('#' + scope.textfieldId);\r\n                        var gm = modal.getModal(scope, ngModelCtrl);\r\n                        if (elm.val() !== gm) {\r\n                            elm.val(gm);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', gm);\r\n                        }\r\n                        if (gm === '' || typeof gm == 'undefined') {\r\n                            elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                            elm.attr('title', '');\r\n                        } else {\r\n                             angular.element('#' + scope.textfieldId+\"_label\").addClass(\"active\");\r\n                             elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                        }\r\n                    });\r\n                } else if (scope.type == 'number' && scope.infinite) {\r\n                    var modelVal = modal.getModal(scope, ngModelCtrl)\r\n                    if (typeof elm.autoNumeric == 'function') {\r\n                        if (elm.autoNumeric('get') != modelVal && !scope.infinite) {\r\n                            elm.autoNumeric('set', modelVal);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', elm.autoNumeric('get'));\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (elm.val() !== modelVal) {\r\n                            elm.val(modelVal);\r\n                        }\r\n                        if (scope.showTitle) {\r\n                            elm.attr('title', modelVal);\r\n                        }\r\n                    }\r\n                   \r\n                    if (modelVal === null && scope.placeholder === \"\") {\r\n                        if ((scope.infinite == \"true\" && scope.type == \"number\") && (modelVal === 'undefined' || modelVal === null)) {\r\n                            angular.element('#' + scope.textfieldId).removeClass('ng-empty').addClass('ng-not-empty');\r\n                            angular.element('#' + scope.textfieldId + '_label').css({ \"font-size\": \"12px\", \"bottom\": \"37px\" });\r\n                        } else {\r\n                        elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                        }\r\n                    }\r\n                    else if (modelVal === '∞') {\r\n                        angular.element('#' + scope.textfieldId).removeClass('ng-empty').addClass('ng-not-empty');\r\n                        angular.element('#' + scope.textfieldId + '_label').css({ \"font-size\": \"12px\", \"bottom\": \"37px\" });\r\n                    }\r\n                    else {\r\n                        elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                    }\r\n                }\r\n                else {\r\n                    if (elm.val() !== modal.getModal(scope, ngModelCtrl)) {\r\n                        if (scope.typing) {\r\n                            smartTextFieldService.modal.setModal(scope, elm.val(), ngModelCtrl);\r\n                        } else {\r\n                            elm.val(modal.getModal(scope, ngModelCtrl));\r\n                        }\r\n\r\n                    }\r\n                    if (scope.showTitle) {\r\n                        elm.attr('title', modal.getModal(scope, ngModelCtrl));\r\n                    }\r\n                    if (modal.getModal(scope, ngModelCtrl) === '') {\r\n                        elm.addClass('ng-empty').removeClass('ng-not-empty');\r\n                    } else {\r\n                        elm.removeClass('ng-empty').addClass('ng-not-empty');\r\n                    }\r\n                }\r\n\r\n                /* Adding class truncate to input*/\r\n                if (!elm.hasClass('materialize-textarea') && (scope.readonly === 'true' || scope.disable === 'true')) {\r\n                    elm.addClass('truncate');\r\n                } else {\r\n                    elm.removeClass('truncate')\r\n            };\r\n        }\r\n            if (scope.type === 'area') {\r\n                    $timeout(function(){\r\n                         angular.element('#' + scope.textfieldId).trigger('autoresize');\r\n                    });\r\n            }\r\n       }\r\n\r\n        var modal = {\r\n                getModal: function (scope, ngModelCtrl) {\r\n                return typeof scope.ngModel == \"function\" ? ngModelCtrl.$modelValue : scope.ngModel;\r\n        },\r\n                setModal: function (scope, value, ngModelCtrl) {\r\n\r\n                if (typeof scope.ngModel == \"function\") {\r\n                    ngModelCtrl.$setViewValue(value)\r\n                    ngModelCtrl.$render()\r\n                } else {\r\n                    scope.ngModel = value;\r\n                }\r\n        }\r\n        };\r\n\r\n        var updateDateValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.dateModel);\r\n            elm.attr('title', scope.dateModel);\r\n        }\r\n\r\n        var updateAutocompleteValue = function (scope, element) {\r\n            var elm = element.find('#' + scope.textfieldId);\r\n            elm.val(scope.displayModel);\r\n            elm.attr('title', scope.displayModel);\r\n        }\r\n\r\n\r\n        var checkRule = function (scope, element) {\r\n            var rules = scope.$eval(scope.rules);\r\n            var isFoundInvalid = false;\r\n\r\n            for (var i = 0; i < rules.length; i++) {\r\n                if (typeof rules[i] == 'object') {\r\n                    if (eval((rules[i].rule).replace(/this/g, scope.type == 'autocomplete' ? 'scope.displayModel' : 'scope.ngModel'))) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = rules[i].error;\r\n                        scope.errorModel = rules[i].error;\r\n                        break;\r\n                    } else {\r\n                        if (scope.type === 'date') {\r\n                            angular.element('#' + scope.textfieldId).removeClass('invalid');\r\n                    }\r\n                }\r\n                }\r\n                else {\r\n                    if (!isFoundInvalid) {\r\n                        if (typeof scope.ngModel != 'object')\r\n                            var data = scope.ngModel;\r\n                        else\r\n                            var data = scope.displayModel;\r\n\r\n                        RuleEngine.isValid(rules[i], function (e) {\r\n                            scope.validate = true;\r\n                            scope.errorMessage = e.errorData.error;\r\n                            scope.errorModel = rules[i].error;\r\n                            isFoundInvalid = true;\r\n                        }, data);\r\n                    }\r\n                    else {\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n        var validateRules = function (scope, ngModelCtrl, element, attrs) {\r\n            if (typeof scope.readonly !== 'undefined' && scope.readonly == 'true') {\r\n                scope.isActive = true;\r\n                return;\r\n        }\r\n\r\n            if ((scope.type === 'text' || scope.type === 'area') && angular.isString(scope.ngModel)) {\r\n                if (attrs.noTrim == 'true') {\r\n                    //scope.ngModel = scope.ngModel;\r\n                } else {\r\n                    //scope.ngModel = scope.ngModel.trim();\r\n                    var tempString = modal.getModal(scope, ngModelCtrl);\r\n                    if (tempString.trim().length <= 0) {\r\n                        modal.setModal(scope, tempString.trim(), ngModelCtrl);\r\n                    } else {\r\n                        modal.setModal(scope, tempString, ngModelCtrl);\r\n                }\r\n            }\r\n                //ngModelCtrl.$setViewValue(scope.ngModel);\r\n        }\r\n\r\n            if ((scope.type == 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (typeof scope.ngModel === 'undefined' || scope.displayModel == '' || scope.displayModel == null || scope.displayModel == undefined || scope.ngModel.id === 0)) || (scope.type != 'autocomplete' && scope.$eval(scope.isMandatory) && !scope.clienterror && (scope.ngModel + '' == '' || scope.ngModel == null || scope.ngModel == undefined))) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n\r\n                return;\r\n        }\r\n\r\n            if (scope.clienterror) {\r\n                scope.validate = true;\r\n                scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                return;\r\n        }\r\n\r\n            if (scope.type == 'number' && !scope.infinite) {\r\n                if (!scope.$eval(scope.isMandatory) && isNaN(scope.ngModel)) {\r\n                    angular.element('#' + scope.textfieldId).val('');\r\n                    return;\r\n            }\r\n                if (!scope.$eval(scope.isMandatory) && scope.ngModel === null) {\r\n                    if (scope.rules) {\r\n                        checkRule(scope, element);\r\n                }\r\n                    return;\r\n            }\r\n                //if (scope.$eval(scope.isMandatory) && isNaN(scope.ngModel) || (!scope.$eval(scope.isMandatory) && number == undefined)) {\r\n                //    scope.validate = true;\r\n                //    scope.errorMessage = $translate.instant('enterNumberErrMsg');\r\n                //    scope.errorModel = $translate.instant('enterNumberErrMsg');\r\n                //    return;\r\n                //}\r\n\r\n        }\r\n\r\n            // CON-5898\r\n            if (scope.type == 'date' && !scope.rules) {\r\n                $('#' + scope.textfieldId).removeClass('invalid');\r\n        }\r\n\r\n            scope.validate = false;\r\n            scope.errorMessage = null;\r\n            scope.errorModel = null;\r\n\r\n            if (scope.rules) {\r\n                checkRule(scope, element);\r\n        }\r\n        };\r\n\r\n        var debounce = function (func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n            };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n        };\r\n        };\r\n\r\n        var updateDateClass = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            if (scope.type == 'date') {\r\n                if (!el.hasClass('datepicker')) {\r\n                    el.addClass('datepicker');\r\n            }\r\n        }\r\n\r\n\r\n        }\r\n        var assignDateEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.bind('keydown', scope.ngKeyDown);\r\n            el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', scope.ngKeyUp);\r\n\r\n        }\r\n\r\n        var assignAutocompleteEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            //el.bind('keydown', scope.ngKeyDown);\r\n            //el.bind('keypress', scope.ngKeyPress);\r\n            el.bind('keyup', debounce(scope.ngKeyUp, 250));\r\n            el.on('input', debounce(scope.search, 250));\r\n\r\n        }\r\n\r\n            /*\r\n              * This function is required to generate value attribute \r\n              * and useful when up/down key is pressed\r\n              */\r\n        var getFormattedData = function (data, scope) {\r\n            if (!data || data.length == 0) {\r\n                return [];\r\n        }\r\n            for (var i = 0; i < data.length; i++) {\r\n                var str = scope.ndisplayFormat;\r\n                try {\r\n                    var parentSplit = str.split('{');\r\n                    for (var j = 0; j < parentSplit.length; j++) {\r\n                        var childSplit = parentSplit[j].split('}');\r\n                        for (var k = 0; k < childSplit.length; k++) {\r\n                            if (childSplit[k].indexOf('.') > 0 || data[i].hasOwnProperty(childSplit[k])) {\r\n                                str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), eval('data[i].' + childSplit[k]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n                catch (e) { }\r\n                data[i].value = str.trim();\r\n        }\r\n            return data;\r\n        };\r\n            /*\r\n                *  Convert timestamp to UTC timestamp \r\n                */\r\n        var toUTC = function (date) {\r\n            return Date.UTC(\r\n                date.getFullYear()\r\n                , date.getMonth()\r\n                , date.getDate()\r\n                , date.getHours()\r\n                , date.getMinutes()\r\n                , date.getSeconds()\r\n                , date.getMilliseconds()\r\n            );\r\n        };\r\n\r\n        var getGridFormatToTimestamp = function (scope, stringdate) {\r\n            var tmpModel = (stringdate + '').replace(new RegExp(\"/\", \"ig\"), '');\r\n            // tmpModel = tmpModel.split('+');\r\n            // tmpModel = eval('new ' + (tmpModel.length > 1 ? ('Date(\"' + tmpModel.join('+') + '\").getTime()') : tmpModel[0]));\r\n            //if (scope.applyClientZone) {\r\n            //    return moment(tmpModel).parseZone().format(scope.dateFormat);\r\n            //}\r\n            //else {\r\n            return moment(tmpModel).format(scope.dateFormat);\r\n            //}\r\n        }\r\n\r\n        var updateNgModel = function (scope, timestamp) {\r\n            scope.dateModifiedbyUser = true;\r\n            if (scope.timePicker == true) {\r\n                if (scope.convertIntoUTC || timeZoneOffset != 20) {\r\n                    // that means the date will be saved in UTC Format\r\n                    scope.ngModel = moment(timestamp * 1000).add((timeZoneOffset * -60), 'minute').format('YYYY-MM-DDTHH:mm:ss');  //'\\/Date(' + ((timestamp - (moment().zone() * 60)) * 1000) + ')\\/';\r\n                } else {\r\n                    //This case is applied for Sourcing. because of the converstion happed before saving.\r\n                    scope.ngModel = '\\/Date(' + (timestamp * 1000) + ')\\/';\r\n            }\r\n            }\r\n            else {\r\n                // hooking a fixed time to fix the flipping issues.\r\n                // if (scope.convertIntoUTC) {\r\n                //scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                //}else\r\n                //{\r\n                //    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n                //}\r\n\r\n                if (timeZoneOffset != 20) {\r\n                    scope.ngModel = moment(timestamp * 1000).format('YYYY-MM-DD') + 'T12:00:00';//'\\/Date(' + (((timestamp- (moment().zone() * 60)) * 1000) + 43200000) + ')\\/';\r\n                } else {\r\n                    scope.ngModel = '\\/Date(' + ((timestamp * 1000) + 43200000) + ')\\/';\r\n            }\r\n        }\r\n        }\r\n\r\n\r\n        var createDatePicker = function (scope, element, ngModelCtrl) {\r\n            setTimeout(function () {\r\n                var picker = element.find('#' + scope.textfieldId);\r\n                var callApplyFuncFlag = true;\r\n                function setDateFormate(datePar) {\r\n                    updateNgModel(scope, datePar.unix());\r\n                    ngModelCtrl.$setViewValue(scope.ngModel);\r\n                    scope.$apply();\r\n                    $timeout(function () {\r\n                        // if (scope.doesContainDateString) {\r\n\r\n                        //} else {\r\n                        //    if (scope.isValueDateObj) {\r\n                        //        var tempDate = datePar.format();\r\n                        //        scope.ngModel = new Date(tempDate);\r\n                        //    } else {\r\n                        //        scope.ngModel = (datePar.unix() * 1000);\r\n                        //    }\r\n                        //}\r\n                        //ngModelCtrl.$setViewValue(scope.ngModel);\r\n                        scope.isDateBlank = false;                        \r\n                            if (angular.isFunction(scope.onDateChange)) {\r\n                                scope.onDateChange({ $event: { date: scope.ngModel } });\r\n                    }\r\n                        \r\n                    })\r\n            }\r\n                var minDate = angular.isDefined(scope.min) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.min) : moment(parseInt(scope.min)).format(scope.dateFormat) : '';\r\n                var maxDate = angular.isDefined(scope.max) ? scope.doesContainDateString ? getGridFormatToTimestamp(scope.max) : moment(parseInt(scope.max)).format(scope.dateFormat) : '';\r\n\r\n                var timePicker24Hour = angular.isDefined(scope.timePicker12Hour) ? false : true;\r\n                var timePickerIncrement = angular.isDefined(scope.minuteIncrement) ? scope.$eval(scope.minuteIncrement) : 1;\r\n\r\n                var pickerObj = picker.daterangepicker({\r\n                    \"singleDatePicker\": true,\r\n                    \"showDropdowns\": true,\r\n                    \"timePicker\": scope.datetimePicker,\r\n                    \"timePicker24Hour\": timePicker24Hour,\r\n                    \"timePickerIncrement\": timePickerIncrement,\r\n                    \"autoApply\": false,\r\n                    \"opens\": \"right\",\r\n                    \"drops\": \"down\",\r\n                    \"minDate\": minDate,\r\n                    \"maxDate\": maxDate,\r\n                    \"autoUpdateInput\": false,\r\n                    \"locale\": {\r\n                        \"format\": scope.dateFormat,\r\n                        'cancelLabel': $translate.instant('cancelBtn'),\r\n                        'applyLabel': $translate.instant('applyBtn')\r\n                        }\r\n                        }, function (start, end, label) {\r\n                    callApplyFuncFlag = false;\r\n                    setDateFormate(start);\r\n                }).bind(\"show.daterangepicker\", function () { // callback on after open datepicker\r\n                    setPreviousDate(pickerObj.element.val());\r\n                    var pos = pickerObj.container.offset(),\r\n                        wHeight = window.innerHeight,\r\n                        srTop = $(window).scrollTop();\r\n                    if ((pos.top + pickerObj.container.outerHeight() - srTop) > wHeight) { // if datepicker goes down then push it up\r\n                        pickerObj.drops = \"up\";\r\n                        pickerObj.move();\r\n                    } else if (pos.top < srTop) { // else if datepicker goes up then push it down\r\n                        pickerObj.drops = \"down\";\r\n                        pickerObj.move();\r\n                }\r\n                }).data(\"daterangepicker\");\r\n\r\n                picker.on('apply.daterangepicker', function (ev, pickerObj) {\r\n                    if (callApplyFuncFlag) {\r\n                        setDateFormate(pickerObj.startDate)\r\n                }\r\n                    callApplyFuncFlag = true;\r\n                    pickerObj.autoUpdateInput = true;\r\n                    pickerObj.updateElement();\r\n                    pickerObj.autoUpdateInput = false;\r\n                    setPreviousDate(pickerObj.element.val());\r\n                    setSelectedDate('\\/Date(' + ((pickerObj.startDate.unix() * 1000) + 43200000) + ')\\/');\r\n                });\r\n\r\n                if (scope.isDateBlank) {\r\n                    picker.val('');\r\n                    scope.ngModel = \"\";\r\n                    // WS-2072\r\n                    //ngModelCtrl.$setViewValue('');\r\n\r\n            };\r\n            });\r\n        }\r\n\r\n        var getDisplayData = function (data, scope) {\r\n            if (data == undefined || data == null || data == '') {\r\n                return '';\r\n        }\r\n            var str = scope.ndisplayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n            try {\r\n                var parentSplit = str.split('{');\r\n                for (var j = 0; j < parentSplit.length; j++) {\r\n                    var childSplit = parentSplit[j].split('}');\r\n                    for (var k = 0; k < childSplit.length; k++) {\r\n                        if (childSplit[k].indexOf('.') > 0 || data.hasOwnProperty(childSplit[k])) {\r\n                            evalResult = eval('data.' + childSplit[k]);\r\n                            evaluatedKeysCounter++;\r\n                            if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                evalResult = '';\r\n                                nullKeysCounter++;\r\n                        }\r\n                            str = str.replace(new RegExp(\"{\" + childSplit[k] + \"}\", \"ig\"), evalResult);\r\n                    }\r\n                }\r\n            }\r\n                if (evaluatedKeysCounter == nullKeysCounter) {\r\n                    str = '';\r\n            }\r\n        }\r\n            catch (e) { }\r\n            return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n        }\r\n\r\n            function debounce(func, wait, immediate) {\r\n            var timeout;\r\n            return function () {\r\n                var context = this, args = arguments;\r\n                var later = function () {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n            };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        };\r\n        var assignSearchEvents = function (scope, element) {\r\n            var el = element.find('#' + scope.textfieldId);\r\n            el.on('input', debounce(scope.triggerSearchEvent, 250));\r\n        }\r\n\r\n        var service = {\r\n                buildTemplate: buildTemplate,\r\n                setActiveClass: setActiveClass,\r\n                updateTextFieldClass: updateTextFieldClass,\r\n                checkIfActive: checkIfActive,\r\n                validateRules: validateRules,\r\n                checkRule: checkRule,\r\n                updateTextValue: updateTextValue,\r\n                debounce: debounce,\r\n                updateDateClass: updateDateClass,\r\n                assignDateEvents: assignDateEvents,\r\n                getFormattedData: getFormattedData,\r\n                toUTC: toUTC,\r\n                getGridFormatToTimestamp: getGridFormatToTimestamp,\r\n                createDatePicker: createDatePicker,\r\n                updateDateValue: updateDateValue,\r\n                updateAutocompleteValue: updateAutocompleteValue,\r\n                getDisplayData: getDisplayData,\r\n                assignAutocompleteEvents: assignAutocompleteEvents,\r\n                modal: modal,\r\n                setSelectedDate: setSelectedDate,\r\n                getSelectedDate: getSelectedDate,\r\n                setPreviousDate: setPreviousDate,\r\n            getPreviousDate: getPreviousDate,\r\n            assignSearchEvents: assignSearchEvents\r\n        };\r\n\r\n        return service;\r\n    }\r\n\r\n    (function ($) {\r\n\r\n        $.extend({\r\n\r\n                debounce: function (fn, timeout, invokeAsap, ctx) {\r\n\r\n                if (arguments.length == 3 && typeof invokeAsap != 'boolean') {\r\n                    ctx = invokeAsap;\r\n                    invokeAsap = false;\r\n                }\r\n\r\n                var timer;\r\n\r\n                return function () {\r\n\r\n                    var args = arguments;\r\n                    ctx = ctx || this;\r\n\r\n                    invokeAsap && !timer && fn.apply(ctx, args);\r\n\r\n                    clearTimeout(timer);\r\n\r\n                    timer = setTimeout(function () {\r\n                        !invokeAsap && fn.apply(ctx, args);\r\n                        timer = null;\r\n                    }, timeout);\r\n\r\n                };\r\n\r\n        },\r\n\r\n                throttle: function (fn, timeout, ctx) {\r\n\r\n                var timer, args, needInvoke;\r\n\r\n                return function () {\r\n\r\n                    args = arguments;\r\n                    needInvoke = true;\r\n                    ctx = ctx || this;\r\n\r\n                    if (!timer) {\r\n                        (function () {\r\n                            if (needInvoke) {\r\n                                fn.apply(ctx, args);\r\n                                needInvoke = false;\r\n                                timer = setTimeout(arguments.callee, timeout);\r\n                            }\r\n                            else {\r\n                                timer = null;\r\n                        }\r\n                        })();\r\n                }\r\n\r\n                };\r\n\r\n        }\r\n\r\n        });\r\n\r\n    })(jQuery);\r\n    angular.module('SMART2').directive('smartCharacterCount', [function () {\r\n        return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                if (parseInt(attrs.smartCharacterCount) > -1) {\r\n                    element.attr('length', attrs.smartCharacterCount);\r\n                    element.characterCounter();\r\n                }\r\n        }\r\n    }\r\n    }]);\r\n\r\n})();\n/**\r\n*  Ajax Autocomplete for jQuery, version 1.2.24\r\n*  (c) 2015 Tomas Kirda\r\n*\r\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\r\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\r\n*/\r\n\r\n/*jslint  browser: true, white: true, plusplus: true, vars: true */\r\n/*global define, window, document, jQuery, exports, require */\r\n\r\n// Expose plugin as an AMD module if AMD loader is present:\r\n(function (factory) {\r\n    'use strict';\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(['jquery'], factory);\r\n    } else if (typeof exports === 'object' && typeof require === 'function') {\r\n        // Browserify\r\n        factory(require('jquery'));\r\n    } else {\r\n        // Browser globals\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n\r\n    var getCompiledOption = function (str, option) {\r\n        try {\r\n            //var keys = Object.keys(suggestion);\r\n\r\n            //for(var i=0; i<keys.length; i++) {\r\n            //    if(suggestion.hasOwnProperty(keys[i])) {\r\n            //        str = str.replace(new RegExp(\"{\"+keys[i]+\"}\", \"ig\"), suggestion[keys[i]]);\r\n            //    }\r\n            //}\r\n\r\n            var parentSplit = str.split('{');\r\n            for (var i = 0; i < parentSplit.length; i++) {\r\n                var childSplit = parentSplit[i].split('}');\r\n                for (var j = 0; j < childSplit.length; j++) {\r\n                    if (childSplit[j].indexOf('.') > 0 || option.hasOwnProperty(childSplit[j])) {\r\n                        str = str.replace(new RegExp(\"{\" + childSplit[j] + \"}\", \"ig\"), eval('option.' + childSplit[j]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch(e) {}\r\n        return str;\r\n    };\r\n\r\n    var\r\n        utils = (function () {\r\n            return {\r\n                escapeRegExChars: function (value) {\r\n                    return value.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n                },\r\n                createNode: function (containerClass) {\r\n                    var div = document.createElement('div');\r\n                    div.className = containerClass;\r\n                    div.style.position = 'absolute';\r\n                    div.style.display = 'none';\r\n                    div.onclick = \"event.stopPropagation()\";\r\n                    div.addEventListener('click', function () {\r\n                        event.stopPropagation();\r\n                    });\r\n                    return div;\r\n                }\r\n            };\r\n        }()),\r\n\r\n        keys = {\r\n            ESC: 27,\r\n            TAB: 9,\r\n            RETURN: 13,\r\n            LEFT: 37,\r\n            UP: 38,\r\n            RIGHT: 39,\r\n            DOWN: 40\r\n        };\r\n\r\n    function Autocomplete(el, options) {\r\n        var noop = function () { },\r\n            that = this,\r\n            defaults = {\r\n                ajaxSettings: {},\r\n                autoSelectFirst: false,\r\n                appendTo: document.body,\r\n                serviceUrl: null,\r\n                lookup: null,\r\n                onSelect: null,\r\n                width: 'auto',\r\n                minChars: 1,\r\n                maxHeight: 300,\r\n                deferRequestBy: 0,\r\n                params: {},\r\n                formatResult: Autocomplete.formatResult,\r\n                delimiter: null,\r\n                zIndex: 9999,\r\n                type: 'GET',\r\n                noCache: false,\r\n                onSearchStart: noop,\r\n                onSearchComplete: noop,\r\n                onSearchError: noop,\r\n                preserveInput: false,\r\n                containerClass: 'autocomplete-suggestions',\r\n                tabDisabled: false,\r\n                dataType: 'text',\r\n                currentRequest: null,\r\n                triggerSelectOnValidInput: true,\r\n                preventBadQueries: true,\r\n                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {\r\n                    //  Added by Sushant\r\n                    try {\r\n                        var str = '';\r\n                        for (var i = 0; i < that.filterKeys.length; i++) {\r\n                            str = str + eval('suggestion.' + that.filterKeys[i]).toLowerCase().trim() + ' ';\r\n                        }\r\n                        str = str.trim();\r\n                    }\r\n                    catch (e) { }\r\n                    return str.indexOf(queryLowerCase) > -1;\r\n                },\r\n                paramName: 'query',\r\n                transformResult: function (response) {\r\n                    return typeof response === 'string' ? $.parseJSON(response) : response;\r\n                },\r\n                showNoSuggestionNotice: false,\r\n                noSuggestionNotice: 'No results',\r\n                orientation: 'bottom',\r\n                forceFixPosition: false,\r\n                multiselect: false,\r\n                showLookup: false,\r\n                addnew: false,\r\n                loading: false\r\n            };\r\n\r\n        // Shared variables:\r\n        that.element = el;\r\n        that.el = $(el);\r\n        that.suggestions = [];\r\n        that.badQueries = [];\r\n        that.selectedIndex = -1;\r\n        that.currentValue = that.element.value;\r\n        that.intervalId = 0;\r\n        that.cachedResponse = {};\r\n        that.onChangeInterval = null;\r\n        that.onChange = null;\r\n        that.isLocal = false;\r\n        that.suggestionsContainer = null;\r\n        that.noSuggestionsContainer = null;\r\n        that.options = $.extend({}, defaults, options);\r\n        that.classes = {\r\n            selected: 'autocomplete-selected',\r\n            suggestion: 'autocomplete-suggestion'\r\n        };\r\n        that.hint = null;\r\n        that.hintValue = '';\r\n        that.selection = null;\r\n\r\n        //  Added by Sushant\r\n        that.displayKey = options.displayKey ? options.displayKey : 'value';\r\n        that.filterKeys = options.filterKeys ? options.filterKeys : [that.displayKey];\r\n        that.optionFormat = options.optionFormat ? options.optionFormat : '{' + that.displayKey + '}';\r\n\r\n        that.setLookup = function (lookup) {\r\n            that.options.lookup = lookup;\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n            }\r\n        };\r\n        that.setLoading = function (flag) {\r\n            that.options.loading = flag;\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n            }\r\n        };\r\n\r\n        // Initialize and set options:\r\n        that.initialize();\r\n        that.setOptions(options);\r\n\r\n        //if (!that.options.addnew && !that.options.showLookup) {\r\n        //    that.onValueChange();\r\n        //}\r\n        if ($(that.element).is(\":focus\")) {\r\n            that.onValueChange();\r\n            that.suggest();\r\n        }\r\n    }\r\n\r\n    Autocomplete.utils = utils;\r\n    function isHTML(str) {\r\n        var a = document.createElement('div');\r\n        a.innerHTML = str;\r\n        for (var c = a.childNodes, i = c.length; i--;) {\r\n            if (c[i].nodeType == 1) return true;\r\n        }\r\n        return false;\r\n    }\r\n    $.Autocomplete = Autocomplete;\r\n    Autocomplete.formatResult = function (suggestion, currentValue, optionFormat) {\r\n        var str = suggestion.optionFormat ? suggestion.optionFormat : optionFormat;\r\n        str = getCompiledOption(str, suggestion);\r\n        if (isHTML(str)) {\r\n            return str;\r\n        }\r\n        var reg = new RegExp(currentValue, 'gi');\r\n        return str.replace(reg, function (val) { return '<strong>' + val + '</strong>' });\r\n    };\r\n\r\n    Autocomplete.prototype = {\r\n\r\n        killerFn: null,\r\n\r\n        initialize: function () {\r\n            var that = this,\r\n                suggestionSelector = '.' + that.classes.suggestion,\r\n                selected = that.classes.selected,\r\n                options = that.options,\r\n                container;\r\n\r\n            // Remove autocomplete attribute to prevent native suggestions:\r\n            that.element.setAttribute('autocomplete', 'off');\r\n\r\n            that.killerFn = function (e) {\r\n                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {\r\n                    that.killSuggestions();\r\n                    that.disableKillerFn();\r\n                }\r\n            };\r\n\r\n            // html() deals with many types: htmlString or Element or Array or jQuery\r\n            that.noSuggestionsContainer = $('<div class=\"autocomplete-no-suggestion\"></div>')\r\n                                          .html(this.options.noSuggestionNotice).get(0);\r\n\r\n            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\r\n\r\n            container = $(that.suggestionsContainer);\r\n\r\n            container.appendTo(options.appendTo);\r\n\r\n            // Only set width if it was provided:\r\n            if (options.width !== 'auto') {\r\n                container.width(options.width);\r\n            }\r\n\r\n            // Listen for mouse over event on suggestions list:\r\n            container.on('mouseover.autocomplete', suggestionSelector, function () {\r\n                that.activate($(this).data('index'));\r\n            });\r\n\r\n            // Deselect active element when mouse leaves suggestions container:\r\n            container.on('mouseout.autocomplete', function () {\r\n                that.selectedIndex = -1;\r\n                container.children('.' + selected).removeClass(selected);\r\n            });\r\n\r\n            // Listen for click event on suggestions list:\r\n            container.on('click.autocomplete', suggestionSelector, function () {\r\n                that.select($(this).data('index'));\r\n               // $(that.element).focus(); comment this line due to text overwrapping issue in autocomplete.\r\n            });\r\n\r\n            that.fixPositionCapture = function () {\r\n                if (that.visible) {\r\n                    that.fixPosition();\r\n                }\r\n            };\r\n\r\n            $(window).on('resize.autocomplete', that.fixPositionCapture);\r\n\r\n            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });\r\n            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('blur.autocomplete', function () { that.onBlur(); });\r\n            that.el.on('focus.autocomplete', function (e) { that.onFocus(); });\r\n            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('input.autocomplete', function (e) { that.onKeyUp(e); });\r\n            that.el.on('click.autocomplete', function (e) { e.stopPropagation(); });\r\n        },\r\n\r\n        onFocus: function () {\r\n            var that = this;\r\n            that.fixPosition();\r\n            //if (that.options.minChars === 0 && that.el.val().length === 0) {\r\n            //    that.onValueChange();\r\n            //}\r\n            if ($(that.element).is(\":focus\")) {\r\n                that.onValueChange();\r\n                that.suggest();\r\n            }\r\n        },\r\n\r\n        onBlur: function () {\r\n            if ($(document.activeElement).hasClass('scroll-inner-wrapp')) {\r\n                return;\r\n            }\r\n            var that = this;\r\n            //if(that.suggestions.length > 0 && that.suggestions[0].value.toLowerCase() === that.el.val().toLowerCase().trim()) {\r\n            //    that.hide();\r\n            //    that.onSelect(0);\r\n            //}\r\n            if (that.selectedIndex === -1) {\r\n                that.hide();\r\n         //       return;\r\n           }\r\n            this.enableKillerFn();\r\n        },\r\n        \r\n        abortAjax: function () {\r\n            var that = this;\r\n            if (that.currentRequest) {\r\n                that.currentRequest.abort();\r\n                that.currentRequest = null;\r\n            }\r\n        },\r\n\r\n        setOptions: function (suppliedOptions) {\r\n            var that = this,\r\n                options = that.options;\r\n\r\n            $.extend(options, suppliedOptions);\r\n\r\n            that.isLocal = $.isArray(options.lookup);\r\n\r\n            if (that.isLocal) {\r\n                options.lookup = that.verifySuggestionsFormat(options.lookup);\r\n            }\r\n\r\n            options.orientation = that.validateOrientation(options.orientation, 'bottom');\r\n\r\n            // Adjust height, width and z-index:\r\n            $(that.suggestionsContainer).css({\r\n                'max-height': options.maxHeight + 'px',\r\n                'width': options.width + 'px',\r\n                'z-index': options.zIndex\r\n            });\r\n        },\r\n        \r\n        clearCache: function () {\r\n            this.cachedResponse = {};\r\n            this.badQueries = [];\r\n        },\r\n\r\n        clear: function () {\r\n            this.clearCache();\r\n            this.currentValue = '';\r\n            this.suggestions = [];\r\n        },\r\n\r\n        disable: function () {\r\n            var that = this;\r\n            that.disabled = true;\r\n            clearInterval(that.onChangeInterval);\r\n            that.abortAjax();\r\n        },\r\n\r\n        enable: function () {\r\n            this.disabled = false;\r\n        },\r\n\r\n        fixPosition: function () {\r\n            // Use only when container has already its content\r\n\r\n            var that = this,\r\n                $container = $(that.suggestionsContainer),\r\n                containerParent = $container.parent().get(0);\r\n            // Fix position automatically when appended to body.\r\n            // In other cases force parameter must be given.\r\n            if (containerParent !== document.body && !that.options.forceFixPosition) {\r\n                return;\r\n            }\r\n\r\n            // Choose orientation\r\n            var orientation = that.options.orientation,\r\n                containerHeight = $container.outerHeight(),\r\n                height = that.el.outerHeight(),\r\n                offset = that.el.offset(),\r\n                styles = { 'top': offset.top, 'left': offset.left };\r\n\r\n            if (orientation === 'auto') {\r\n                var viewPortHeight = $(window).height(),\r\n                    scrollTop = $(window).scrollTop(),\r\n                    topOverflow = -scrollTop + offset.top - containerHeight,\r\n                    bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);\r\n\r\n                orientation = (Math.max(topOverflow, bottomOverflow) === topOverflow) ? 'top' : 'bottom';\r\n            }\r\n\r\n            if (orientation === 'top') {\r\n                styles.top += -containerHeight;\r\n            } else {\r\n                styles.top += height;\r\n            }\r\n\r\n            // If container is not positioned to body,\r\n            // correct its position using offset parent offset\r\n            if(containerParent !== document.body) {\r\n                var opacity = $container.css('opacity'),\r\n                    parentOffsetDiff;\r\n\r\n                    if (!that.visible){\r\n                        $container.css('opacity', 0).show();\r\n                    }\r\n\r\n                parentOffsetDiff = $container.offsetParent().offset();\r\n                styles.top -= parentOffsetDiff.top;\r\n                styles.left -= parentOffsetDiff.left;\r\n\r\n                if (!that.visible){\r\n                    $container.css('opacity', opacity).hide();\r\n                }\r\n            }\r\n\r\n            // -2px to account for suggestions border.\r\n            if (that.options.width === 'auto') {\r\n                styles.width = (that.el.outerWidth() - 2) + 'px';\r\n            }\r\n\r\n            $container.css(styles);\r\n        },\r\n\r\n        enableKillerFn: function () {\r\n            var that = this;\r\n            $(document).on('click.autocomplete', that.killerFn);\r\n        },\r\n\r\n        disableKillerFn: function () {\r\n            var that = this;\r\n            $(document).off('click.autocomplete', that.killerFn);\r\n        },\r\n\r\n        killSuggestions: function () {\r\n            var that = this;\r\n            that.stopKillSuggestions();\r\n            that.intervalId = window.setInterval(function () {\r\n                if (that.visible) {\r\n                    that.el.val(that.currentValue);\r\n                    that.hide();\r\n                }\r\n                \r\n                that.stopKillSuggestions();\r\n            }, 50);\r\n        },\r\n\r\n        stopKillSuggestions: function () {\r\n            window.clearInterval(this.intervalId);\r\n        },\r\n\r\n        isCursorAtEnd: function () {\r\n            var that = this,\r\n                valLength = that.el.val().length,\r\n                selectionStart = that.element.selectionStart,\r\n                range;\r\n\r\n            if (typeof selectionStart === 'number') {\r\n                return selectionStart === valLength;\r\n            }\r\n            if (document.selection) {\r\n                range = document.selection.createRange();\r\n                range.moveStart('character', -valLength);\r\n                return valLength === range.text.length;\r\n            }\r\n            return true;\r\n        },\r\n\r\n        onKeyPress: function (e) {\r\n            var that = this;\r\n\r\n            // If suggestions are hidden and user presses arrow down, display suggestions:\r\n            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\r\n                that.suggest();\r\n                return;\r\n            }\r\n\r\n            if (that.disabled || !that.visible) {\r\n                return;\r\n            }\r\n\r\n            switch (e.which) {\r\n                case keys.ESC:\r\n                    that.el.val(that.currentValue);\r\n                    that.hide();\r\n                    break;\r\n                case keys.RIGHT:\r\n                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\r\n                        that.selectHint();\r\n                        break;\r\n                    }\r\n                    return;\r\n                case keys.TAB:\r\n                    if (that.hint && that.options.onHint) {\r\n                        that.selectHint();\r\n                        return;\r\n                    }\r\n                    if (that.suggestions.length > 0 && that.currentValue.length >= that.options.minChars && that.selectedIndex === -1 && that.currentValue.length > 0) {\r\n                        that.selectedIndex = 0;\r\n                    }\r\n                    if (that.selectedIndex === -1) {\r\n                        that.hide();\r\n                        return;\r\n                    }\r\n                    that.select(that.selectedIndex);\r\n                    if (that.options.tabDisabled === false) {\r\n                        return;\r\n                    }\r\n                    break;\r\n                case keys.RETURN:\r\n                    if (that.selectedIndex === -1) {\r\n                        that.hide();\r\n                        return;\r\n                    }\r\n                    that.select(that.selectedIndex);\r\n                    break;\r\n                case keys.UP:\r\n                    that.moveUp();\r\n                    break;\r\n                case keys.DOWN:\r\n                    that.moveDown();\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            // Cancel event if function did not return:\r\n            e.stopImmediatePropagation();\r\n            e.preventDefault();\r\n        },\r\n\r\n        onKeyUp: function (e) {\r\n            var that = this;\r\n\r\n            if (that.disabled) {\r\n                return;\r\n            }\r\n\r\n            switch (e.which) {\r\n                case keys.UP:\r\n                case keys.DOWN:\r\n                    return;\r\n            }\r\n\r\n            clearInterval(that.onChangeInterval);\r\n\r\n            if (that.currentValue !== that.el.val()) {\r\n                that.findBestHint();\r\n                if (that.options.deferRequestBy > 0) {\r\n                    // Defer lookup in case when value changes very quickly:\r\n                    that.onChangeInterval = setInterval(function () {\r\n                        that.onValueChange();\r\n                    }, that.options.deferRequestBy);\r\n                } else {\r\n                    that.onValueChange();\r\n                }\r\n            }\r\n        },\r\n\r\n        onValueChange: function () {\r\n            var that = this,\r\n                options = that.options,\r\n                value = that.el.val(),\r\n                query = that.getQuery(value);\r\n\r\n            if (that.selection && that.currentValue !== query) {\r\n                that.selection = null;\r\n                (options.onInvalidateSelection || $.noop).call(that.element);\r\n            }\r\n\r\n            clearInterval(that.onChangeInterval);\r\n            that.currentValue = value;\r\n            that.selectedIndex = -1;\r\n\r\n            // Check existing suggestion for the match before proceeding:\r\n            if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {\r\n                that.select(0);\r\n                return;\r\n            }\r\n\r\n            if (query.length < options.minChars) {\r\n                //Suggestion will not hide \r\n                if (!(that.options.showLookup || that.options.addnew))\r\n                    that.hide();\r\n            } else {\r\n                that.getSuggestions(query);\r\n            }\r\n        },\r\n\r\n        isExactMatch: function (query) {\r\n            return false;\r\n        },\r\n\r\n        getQuery: function (value) {\r\n            var delimiter = this.options.delimiter,\r\n                parts;\r\n\r\n            if (!delimiter) {\r\n                return value;\r\n            }\r\n            parts = value.split(delimiter);\r\n            return $.trim(parts[parts.length - 1]);\r\n        },\r\n\r\n        getSuggestionsLocal: function (query) {\r\n            var that = this,\r\n                options = that.options,\r\n                queryLowerCase = query.toLowerCase(),\r\n                filter = options.lookupFilter,\r\n                limit = parseInt(options.lookupLimit, 10),\r\n                data;\r\n\r\n            data = {\r\n                suggestions: $.grep(options.lookup, function (suggestion) {\r\n                    //  If suggestion is set to filterable false, it will not get filtered\r\n                    if ((suggestion.filterable != null || suggestion.filterable != undefined) && suggestion.filterable === false) {\r\n                        return true;\r\n                    }\r\n                    return filter(suggestion, query, queryLowerCase);\r\n                })\r\n            };\r\n            \r\n            if (limit && data.suggestions.length > limit) {\r\n                data.suggestions = data.suggestions.slice(0, limit);\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        getSuggestions: function (q) {\r\n            var response,\r\n                that = this,\r\n                options = that.options,\r\n                serviceUrl = options.serviceUrl,\r\n                params,\r\n                cacheKey,\r\n                ajaxSettings;\r\n\r\n            options.params[options.paramName] = q;\r\n            params = options.ignoreParams ? null : options.params;\r\n\r\n            if (options.onSearchStart.call(that.element, options.params) === false) {\r\n                return;\r\n            }\r\n\r\n            if ($.isFunction(options.lookup)){\r\n                options.lookup(q, function (data) {\r\n                    that.suggestions = data.suggestions;\r\n                    that.suggest();\r\n                    options.onSearchComplete.call(that.element, q, data.suggestions);\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (that.isLocal) {\r\n                response = that.getSuggestionsLocal(q);\r\n            } else {\r\n                if ($.isFunction(serviceUrl)) {\r\n                    serviceUrl = serviceUrl.call(that.element, q);\r\n                }\r\n                cacheKey = serviceUrl + '?' + $.param(params || {});\r\n                response = that.cachedResponse[cacheKey];\r\n            }\r\n\r\n            if (response && $.isArray(response.suggestions)) {\r\n                that.suggestions = response.suggestions;\r\n                that.suggest();\r\n                options.onSearchComplete.call(that.element, q, response.suggestions);\r\n            } else if (!that.isBadQuery(q)) {\r\n                that.abortAjax();\r\n\r\n                ajaxSettings = {\r\n                    url: serviceUrl,\r\n                    data: params,\r\n                    type: options.type,\r\n                    dataType: options.dataType\r\n                };\r\n\r\n                $.extend(ajaxSettings, options.ajaxSettings);\r\n\r\n                that.currentRequest = $.ajax(ajaxSettings).done(function (data) {\r\n                    var result;\r\n                    that.currentRequest = null;\r\n                    result = options.transformResult(data, q);\r\n                    that.processResponse(result, q, cacheKey);\r\n                    options.onSearchComplete.call(that.element, q, result.suggestions);\r\n                }).fail(function (jqXHR, textStatus, errorThrown) {\r\n                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\r\n                });\r\n            } else {\r\n                options.onSearchComplete.call(that.element, q, []);\r\n            }\r\n        },\r\n\r\n        isBadQuery: function (q) {\r\n            if (!this.options.preventBadQueries){\r\n                return false;\r\n            }\r\n\r\n            var badQueries = this.badQueries,\r\n                i = badQueries.length;\r\n\r\n            while (i--) {\r\n                if (q.indexOf(badQueries[i]) === 0) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        hide: function () {\r\n            var that = this,\r\n                container = $(that.suggestionsContainer);\r\n\r\n            if ($.isFunction(that.options.onHide) && that.visible) {\r\n                that.options.onHide.call(that.element, container);\r\n            }\r\n\r\n            that.visible = false;\r\n                that.selectedIndex = -1;\r\n                clearInterval(that.onChangeInterval);\r\n                $(that.suggestionsContainer).hide();\r\n            that.signalHint(null);\r\n        },\r\n\r\n        suggest: function () {\r\n            //Skip condition when showlookup and addNew flag true\r\n            if (!(this.options.showLookup || this.options.addnew)) {\r\n                if (this.suggestions.length === 0) {\r\n                    if (this.options.showNoSuggestionNotice) {\r\n                        this.noSuggestions();\r\n                    } else {\r\n                        this.hide();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            var that = this,\r\n                options = that.options,\r\n                groupBy = options.groupBy,\r\n                formatResult = options.formatResult,\r\n                value = that.getQuery(that.currentValue),\r\n                className = that.classes.suggestion,\r\n                classSelected = that.classes.selected,\r\n                container = $(that.suggestionsContainer),\r\n                noSuggestionsContainer = $(that.noSuggestionsContainer),\r\n                beforeRender = options.beforeRender,\r\n                html = '',\r\n                category,\r\n                formatGroup = function (suggestion, index) {\r\n                        var currentCategory = suggestion.data[groupBy];\r\n\r\n                        if (category === currentCategory){\r\n                            return '';\r\n                        }\r\n\r\n                        category = currentCategory;\r\n\r\n                        return '<div class=\"autocomplete-group\"><strong>' + category + '</strong></div>';\r\n                    };\r\n\r\n            if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {\r\n                that.select(0);\r\n                return;\r\n            }\r\n\r\n\r\n            var formattedResult, formattedTitle;\r\n\r\n            //Loader HTMLs\r\n            var loaderHtmls = (that.options.loading && that.options.minChars <= that.currentValue.length) ? '<div class=\"autocomplete-suggestion center\">\\\r\n                    <div class=\"preloader-wrapper x-small field-suffix-loader active\">\\\r\n                        <div class=\"spinner-layer spinner-blue-only\">\\\r\n                            <div class=\"circle-clipper circle-clipper--x left\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                            <div class=\"gap-patch\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                            <div class=\"circle-clipper circle-clipper--x right\">\\\r\n                                <div class=\"circle\"></div>\\\r\n                            </div>\\\r\n                        </div>\\\r\n                    </div>\\\r\n                </div>':'';\r\n\r\n            // Build suggestions inner HTML:\r\n            var totalIndex = 0;\r\n            var innerWrapMaxHeight = (that.options.addnew == true || that.options.showLookup == true) ? that.options.maxHeight - 40 : that.options.maxHeight - 2;\r\n            html += \"<div class='scroll-inner-wrapp' style='max-height:\" + innerWrapMaxHeight + \"px;'>\";\r\n            if (!that.options.loading) {\r\n                $.each(that.suggestions, function (i, suggestion) {\r\n                    if (groupBy) {\r\n                        html += formatGroup(suggestion, value, i);\r\n                    }\r\n                    formattedResult = formatResult(suggestion, value, that.optionFormat);\r\n                    try {\r\n                        formattedTitle = escape(formattedResult);\r\n                        formattedTitle = unescape(formattedTitle.replace(/%28/g, 'openingroundbracket').replace(/%29/g, 'closingroundbracket'));\r\n                        //formattedTitle = $(formattedTitle).text() ? $(formattedTitle).text() : formattedTitle;\r\n                        formattedTitle = formattedTitle.replace(/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '');\r\n                    }\r\n                    catch (e) { }\r\n                    formattedTitle = formattedTitle.replace(/openingroundbracket/g, '(').replace(/closingroundbracket/g, ')');\r\n                    html += '<div class=\"' + className + '\" data-index=\"' + i + '\" title=\"' + unescape(formattedTitle) + '\">' + formattedResult + '</div>';\r\n                    totalIndex = i + 1;\r\n                });\r\n            } else {\r\n                html += loaderHtmls;\r\n            }\r\n            html += \"</div>\";\r\n\r\n            var noSuggestionsMessage = (that.suggestions.length < 1 && that.options.showNoSuggestionNotice && that.options.minChars <= that.currentValue.length) ? $('<i></i>').append(that.noSuggestionsContainer).html() : '';\r\n            if (that.options.addnew == true && that.options.showLookup == true) {\r\n                html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                html += '<div class=\"typeaHeade-add-new blue-text autocomplete-suggestion-half ' + className + '\" data-index=\"' + totalIndex + '\" title=\"' + that.options.addNewKey + '\"><i class=\"icon icon-fix-overlay iconSmall\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"' + that.options.addNewKey + '\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i></div>';\r\n                html += '<div class=\"typeaHeade-open-lookup autocomplete-suggestion-half ' + className + '\" data-index=\"' + ++totalIndex + '\"><a href=\"javascript:void(0)\" class=\"waves-effect waves-light\">' + that.options.showLookupKey + '</a></div>';\r\n            } else {\r\n                if (that.options.addnew == true) {\r\n                    html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                    html += '<div class=\"typeaHeade-add-new width-adj-to blue-text ' + className + '\" data-index=\"' + totalIndex + '\" title=\"' + that.options.addNewKey + '\"><i class=\"icon icon-fix-overlay iconSmall\" smart-tooltip position=\"bottom\" delay=\"50\" message=\"' + that.options.addNewKey + '\"><svg><use xlink:href=\"#icon_CirclePlus\"></use></svg></i></div>';\r\n            \t}\r\n                if (that.options.showLookup == true) {\r\n                    html += (that.options.loading) ? '' : noSuggestionsMessage;\r\n                    html += '<div class=\"typeaHeade-open-lookup width-adj-to ' + className + '\" data-index=\"' + ++totalIndex + '\"><a href=\"javascript:void(0)\" class=\"waves-effect waves-light\">' + that.options.showLookupKey + '</a></div>';\r\n            \t}\r\n            }\r\n            \r\n            this.adjustContainerWidth();\r\n\r\n            noSuggestionsContainer.detach();\r\n            container.html(html);\r\n\r\n            if ($.isFunction(beforeRender)) {\r\n                beforeRender.call(that.element, container);\r\n            }\r\n\r\n            that.fixPosition();\r\n            container.show();\r\n\r\n            // Select first value by default:\r\n            if (options.autoSelectFirst) {\r\n                that.selectedIndex = 0;\r\n                container.scrollTop(0);\r\n                container.children('.' + className).first().addClass(classSelected);\r\n            }\r\n\r\n            that.visible = true;\r\n            that.findBestHint();\r\n        },\r\n\r\n        noSuggestions: function() {\r\n             var that = this,\r\n                 container = $(that.suggestionsContainer),\r\n                 noSuggestionsContainer = $(that.noSuggestionsContainer);\r\n\r\n            this.adjustContainerWidth();\r\n\r\n            // Some explicit steps. Be careful here as it easy to get\r\n            // noSuggestionsContainer removed from DOM if not detached properly.\r\n            noSuggestionsContainer.detach();\r\n            container.empty(); // clean suggestions if any\r\n            container.append(noSuggestionsContainer);\r\n\r\n            that.fixPosition();\r\n\r\n            container.show();\r\n            that.visible = true;\r\n        },\r\n\r\n        adjustContainerWidth: function() {\r\n            var that = this,\r\n                options = that.options,\r\n                width,\r\n                container = $(that.suggestionsContainer);\r\n\r\n            // If width is auto, adjust width before displaying suggestions,\r\n            // because if instance was created before input had width, it will be zero.\r\n            // Also it adjusts if input width has changed.\r\n            // -2px to account for suggestions border.\r\n            if (options.width === 'auto') {\r\n                width = that.el.outerWidth() - 2;\r\n                container.width(width > 0 ? width : 300);\r\n            }\r\n        },\r\n\r\n        findBestHint: function () {\r\n            var that = this,\r\n                value = that.el.val().toLowerCase(),\r\n                bestMatch = null;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            $.each(that.suggestions, function (i, suggestion) {\r\n                var str = suggestion.optionFormat ? suggestion.optionFormat : that.optionFormat;\r\n                str = getCompiledOption(str, suggestion);\r\n                var foundMatch = str.toLowerCase().indexOf(value) === 0;\r\n                if (foundMatch) {\r\n                    bestMatch = suggestion;\r\n                }\r\n                return !foundMatch;\r\n            });\r\n\r\n            that.signalHint(bestMatch);\r\n        },\r\n\r\n        signalHint: function (suggestion) {\r\n            var hintValue = '',\r\n                that = this;\r\n            if (suggestion) {\r\n                var str = suggestion.optionFormat ? suggestion.optionFormat : that.optionFormat;\r\n                str = getCompiledOption(str, suggestion);\r\n                hintValue = that.currentValue + str.substr(that.currentValue.length);\r\n            }\r\n            if (that.hintValue !== hintValue) {\r\n                that.hintValue = hintValue;\r\n                that.hint = suggestion;\r\n                (this.options.onHint || $.noop)(hintValue);\r\n            }\r\n        },\r\n\r\n        verifySuggestionsFormat: function (suggestions) {\r\n            // If suggestions is string array, convert them to supported format:\r\n            if (suggestions.length && typeof suggestions[0] === 'string') {\r\n                return $.map(suggestions, function (value) {\r\n                    return { value: value, data: null };\r\n                });\r\n            }\r\n\r\n            return suggestions;\r\n        },\r\n\r\n        validateOrientation: function(orientation, fallback) {\r\n            orientation = $.trim(orientation || '').toLowerCase();\r\n\r\n            if($.inArray(orientation, ['auto', 'bottom', 'top']) === -1){\r\n                orientation = fallback;\r\n            }\r\n\r\n            return orientation;\r\n        },\r\n\r\n        processResponse: function (result, originalQuery, cacheKey) {\r\n            var that = this,\r\n                options = that.options;\r\n\r\n            result.suggestions = that.verifySuggestionsFormat(result.suggestions);\r\n\r\n            // Cache results if cache is not disabled:\r\n            if (!options.noCache) {\r\n                that.cachedResponse[cacheKey] = result;\r\n                if (options.preventBadQueries && result.suggestions.length === 0) {\r\n                    that.badQueries.push(originalQuery);\r\n                }\r\n            }\r\n\r\n            // Return if originalQuery is not matching current query:\r\n            if (originalQuery !== that.getQuery(that.currentValue)) {\r\n                return;\r\n            }\r\n\r\n            that.suggestions = result.suggestions;\r\n            that.suggest();\r\n        },\r\n\r\n        activate: function (index) {\r\n            var that = this,\r\n                activeItem,\r\n                selected = that.classes.selected,\r\n                container = $(that.suggestionsContainer),\r\n                children = container.find('.' + that.classes.suggestion);\r\n\r\n            container.find('.' + selected).removeClass(selected);\r\n\r\n            that.selectedIndex = index;\r\n\r\n            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\r\n                activeItem = children.get(that.selectedIndex);\r\n                $(activeItem).addClass(selected);\r\n                return activeItem;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        selectHint: function () {\r\n            var that = this,\r\n                i = $.inArray(that.hint, that.suggestions);\r\n\r\n            that.select(i);\r\n        },\r\n\r\n        select: function (i) {\r\n            var that = this;\r\n            if(!that.options.multiselect) //prevent hiding suggetions for multiselect\r\n                that.hide();\r\n            that.onSelect(i);\r\n        },\r\n\r\n        moveUp: function () {\r\n            var that = this;\r\n\r\n            if (that.selectedIndex === -1) {\r\n                return;\r\n            }\r\n\r\n            if (that.selectedIndex === 0) {\r\n                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\r\n                that.selectedIndex = -1;\r\n                that.el.val(that.currentValue);\r\n                that.findBestHint();\r\n                return;\r\n            }\r\n\r\n            that.adjustScroll(that.selectedIndex - 1);\r\n        },\r\n\r\n        moveDown: function () {\r\n            var that = this;\r\n\r\n            if (that.selectedIndex === (that.suggestions.length - 1)) {\r\n                return;\r\n            }\r\n\r\n            that.adjustScroll(that.selectedIndex + 1);\r\n        },\r\n\r\n        adjustScroll: function (index) {\r\n            var that = this,\r\n                activeItem = that.activate(index);\r\n\r\n            if (!activeItem) {\r\n                return;\r\n            }\r\n\r\n            var offsetTop,\r\n                upperBound,\r\n                lowerBound,\r\n                heightDelta = $(activeItem).outerHeight();\r\n\r\n            offsetTop = activeItem.offsetTop;\r\n            upperBound = $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop();\r\n            lowerBound = upperBound + that.options.maxHeight - heightDelta;\r\n\r\n            if (offsetTop < upperBound) {\r\n                $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop(offsetTop);\r\n            } else if (offsetTop > lowerBound) {\r\n                $(that.suggestionsContainer).children('.scroll-inner-wrapp').scrollTop(offsetTop - that.options.maxHeight + heightDelta);\r\n            }\r\n\r\n            if (!that.options.preserveInput) {\r\n                that.el.val(that.getValue(that.suggestions[index].value));\r\n            }\r\n            that.signalHint(null);\r\n        },\r\n\r\n        onSelect: function (index) {\r\n            var that = this;\r\n            //Added new callback for show lookup and Add New\r\n            var getTotalSuggested = that.suggestions.length;\r\n            if (index > getTotalSuggested && that.options.showLookup == true) {\r\n                that.hide();\r\n                if ($.isFunction(that.options.onClickShowLookup)) {\r\n                    that.options.onClickShowLookup.call(that.element, \"ShowLookup\");\r\n                    return;\r\n                }\r\n            }\r\n            if (index == getTotalSuggested && that.options.addnew == true) {\r\n                that.hide();\r\n                if ($.isFunction(that.options.onClickAddNew)) {\r\n                    that.options.onClickAddNew.call(that.element, \"AddNEW\");\r\n                    return;\r\n                }\r\n            }\r\n            var onSelectCallback = that.options.onSelect,\r\n                suggestion = that.suggestions[index];\r\n\r\n            that.currentValue = suggestion.value ? that.getValue(suggestion.value) : that.getValue(suggestion[that.options.displayFormat.slice(1, that.options.displayFormat.length - 1)]);\r\n\r\n            if (that.currentValue !== that.el.val() && !that.options.preserveInput) {\r\n                that.el.val(that.currentValue);\r\n            }\r\n\r\n            that.signalHint(null);\r\n            that.suggestions = [];\r\n            that.selection = suggestion;\r\n\r\n            if ($.isFunction(onSelectCallback)) {\r\n                onSelectCallback.call(that.element, suggestion);\r\n            }\r\n        },\r\n\r\n        getValue: function (value) {\r\n            var that = this,\r\n                delimiter = that.options.delimiter,\r\n                currentValue,\r\n                parts;\r\n\r\n            if (!delimiter) {\r\n                return value;\r\n            }\r\n\r\n            currentValue = that.currentValue;\r\n            parts = currentValue.split(delimiter);\r\n\r\n            if (parts.length === 1) {\r\n                return value;\r\n            }\r\n\r\n            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\r\n        },\r\n\r\n        dispose: function () {\r\n            var that = this;\r\n            that.el.off('.autocomplete').removeData('autocomplete');\r\n            that.disableKillerFn();\r\n            $(window).off('resize.autocomplete', that.fixPositionCapture);\r\n            $(that.suggestionsContainer).remove();\r\n        }\r\n    };\r\n\r\n    // Create chainable jQuery plugin:\r\n    $.fn.autocomplete = $.fn.devbridgeAutocomplete = function (options, args) {\r\n        var dataKey = 'autocomplete';\r\n        // If function invoked without argument return\r\n        // instance of the first matched element:\r\n        if (arguments.length === 0) {\r\n            return this.first().data(dataKey);\r\n        }\r\n\r\n        return this.each(function () {\r\n            var inputElement = $(this),\r\n                instance = inputElement.data(dataKey);\r\n\r\n            if (typeof options === 'string') {\r\n                if (instance && typeof instance[options] === 'function') {\r\n                    instance[options](args);\r\n                }\r\n            } else {\r\n                // If instance already exists, destroy it:\r\n                if (instance && instance.dispose) {\r\n                    instance.dispose();\r\n                }\r\n                instance = new Autocomplete(this, options);\r\n                inputElement.data(dataKey, instance);\r\n            }\r\n        });\r\n    };\r\n    $(document).on('click', function (e) {\r\n        if ($('.autocomplete-suggestions').is(':visible')) {\r\n            $('.autocomplete-suggestions').hide();\r\n        }\r\n    });\r\n}));\n(function () {\r\n    'use strict';\r\n    var smartTimeLineID = 0;\r\n    angular.module('SMART2').directive('smartTimeline', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', 'APPCONSTANTS', function ($rootScope, $timeout, $translate, ScrollTo, lookup, APPCONSTANTS) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                readonly: '@',\r\n                dateFormat: '@',\r\n                selectable: '@',\r\n                showCurrentTime: '@',\r\n                zoomMin: '@',\r\n                zoomMax: '@',\r\n                marginSpace: '@',\r\n                onSelect: '&',\r\n                onLoad: '&',\r\n                groupOrder: '&'\r\n            },\r\n            link: function (scope, element, attrs) {\r\n                var cultureCode = APPCONSTANTS.userPreferences.UserBasicDetails.Culture;\r\n                var readonly = (scope.readonly == null || scope.readonly == \"undefined\") ? false : (scope.readonly == 'true') ? true : false;\r\n                var selectable = (scope.selectable == null || scope.selectable == \"undefined\") ? true : (scope.selectable == 'true') ? true : false;\r\n                var showCurrentTime = (angular.isDefined(scope.showCurrentTime)) ? (scope.showCurrentTime == 'true') ? true : false : true;\r\n                scope.ngModel = scope.ngModel ? scope.ngModel : null;\r\n                var defaultMin = 1000 * 60 * 60 * 24, defaultMax = 1000 * 60 * 60 * 24 * 31 * 3;\r\n                var zoomMin = angular.isDefined(scope.zoomMin) ? (scope.zoomMin != \"\") ? parseInt(scope.zoomMin) : defaultMin : defaultMin; // Default 1Day\r\n                var zoomMax = angular.isDefined(scope.zoomMax) ? (scope.zoomMax != \"\") ? parseInt(scope.zoomMax) : defaultMax : defaultMax;  // Default 3Month\r\n                var marginSpace = (scope.marginSpace == null || scope.marginSpace == \"undefined\") ? 20 : parseInt(scope.marginSpace, 10);\r\n                var timeline = null;\r\n                var groupOrderFunc = function (a, b) {\r\n                    if (angular.isDefined(attrs.groupOrder)) {\r\n                        return scope.groupOrder({ $a: a, $b: b });\r\n                    } else {\r\n                        if (angular.isDefined(scope.ngModel[a.id]) && angular.isDefined(scope.ngModel[b.id])) {\r\n                            return scope.ngModel[a.id].lines[0].start - scope.ngModel[b.id].lines[0].start;\r\n                        }\r\n                    }\r\n                };\r\n                scope.timelineID = \"TimeLineId-\" + smartTimeLineID;\r\n                smartTimeLineID++;\r\n                function isTodayInBetween(s, e) {\r\n                    s = parseInt(s);\r\n                    e = parseInt(e);\r\n                    var d = new Date();\r\n                    var c = d.getTime();\r\n                    if (s < c && c < e) { // running \r\n                        return 0;\r\n                    }\r\n                    if (e < c) { // ended\r\n                        return -1;\r\n                    }\r\n                    if (c < s) { // not started\r\n                        return 1;\r\n                    }\r\n                }\r\n                function getAngularDateFormat(format) {\r\n                    return format.replace(/d/g, 'D').replace(/y/g, 'Y').replace(/E/g, 'd');\r\n                }\r\n                scope.$watch(\"ngModel\", function (newVal) {\r\n                    scope.ngModel = newVal;\r\n                    //var dateFormat = scope.dateFormat ? scope.dateFormat : 'dd/MM/yyyy';\r\n                    scope.getCultureCode = function (culturecode) {\r\n                        switch (culturecode) {\r\n                            case 'en-US':\r\n                                return 'MM/dd/yyyy hh:mm a';\r\n                                break;\r\n                            case 'zh-CN':\r\n                                return 'yyyy-MM-dd hh:mm a';\r\n                                break;\r\n                            case 'zh-CHT':\r\n                                return 'yyyy-MM-dd hh:mm a';\r\n                                break;\r\n                            case 'da-DK':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'de-DE':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'en-AU':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'es-ES':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'fr-FR':\r\n                                return 'yyyy/MM/dd hh:mm a';\r\n                                break;\r\n                            case 'it-IT':\r\n                                return 'yyyy/MM/dd hh:mm a';\r\n                                break;\r\n                            case 'ja-JP':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'ko-KR':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'nl-NL':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'pl-PL':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'pt-PT':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'ru-RU':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'sv-SE ':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            case 'th-TH ':\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                                break;\r\n                            default:\r\n                                return 'dd/MM/yyyy hh:mm a';\r\n                        }\r\n                    };\r\n\r\n                    var dateFormat = scope.getCultureCode(cultureCode) ? scope.getCultureCode(cultureCode) : 'dd/MM/yyyy hh:mm a';\r\n                    dateFormat = getAngularDateFormat(dateFormat);\r\n                    var groups = [];\r\n                    var items = [];\r\n                    var groupItemPeer = [];\r\n                    function formateData() {\r\n                        moment.locale(cultureCode);\r\n                        groups = [];\r\n                        items = [];\r\n                        var k = 0;\r\n                        for (var i = 0; i < scope.ngModel.length; i++) {\r\n                            groups.push({\r\n                                id: i,\r\n                                content: scope.ngModel[i].title,\r\n                                className: (typeof scope.ngModel[i].className === 'undefined') ? \"\" : scope.ngModel[i].className,\r\n                                style: (typeof scope.ngModel[i].style === 'undefined') ? \"\" : scope.ngModel[i].style\r\n                            });\r\n\r\n                            for (var j = 0; j < scope.ngModel[i].lines.length; j++) {\r\n                                var obj = {\r\n                                    id: k,\r\n                                    group: i\r\n                                }\r\n                                groupItemPeer[k] = j;\r\n                                var flagS = false, flagE = false;\r\n                                var classNamee = \"vis-timeline-cstyle-\" + (i % 10);\r\n                                if (scope.ngModel[i].lines[j].start != null && scope.ngModel[i].lines[j].start != \"\" && typeof scope.ngModel[i].lines[j].start != \"undefined\") {\r\n                                    obj.start = new Date(scope.ngModel[i].lines[j].start * 1);\r\n                                    obj.startFormated = moment.unix(scope.ngModel[i].lines[j].start / 1000).format(dateFormat);\r\n                                    flagS = true;\r\n                                }\r\n                                if (scope.ngModel[i].lines[j].end != null && scope.ngModel[i].lines[j].end != \"\" && typeof scope.ngModel[i].lines[j].end != \"undefined\") {\r\n                                    obj.end = new Date(scope.ngModel[i].lines[j].end * 1);\r\n                                    obj.endFormated = moment.unix(scope.ngModel[i].lines[j].end / 1000).format(dateFormat);\r\n                                    flagE = true;\r\n                                }\r\n                                if (flagS && flagE) {\r\n                                    var respo = isTodayInBetween(obj.start.getTime(), obj.end.getTime());\r\n                                    if (respo == -1) {\r\n                                        classNamee = classNamee + \" line-ended\";\r\n                                    }\r\n                                    if (respo == 1) {\r\n                                        classNamee = classNamee + \" line-not-started\";\r\n                                    }\r\n                                }\r\n                                var passedClassName = (typeof scope.ngModel[i].lines[j].className === 'undefined') ? \"\" : scope.ngModel[i].lines[j].className;\r\n                                classNamee = classNamee + \" \" + passedClassName;\r\n                                obj.className = classNamee;\r\n                                var barStyle = (typeof scope.ngModel[i].lines[j].style === 'undefined') ? \"\" : scope.ngModel[i].lines[j].style;\r\n                                obj.style = barStyle;\r\n                                if (typeof scope.ngModel[i].lines[j].content === 'undefined') {\r\n                                    obj.content = \"<div class='padding5' smart-tooltip title='\" + obj.startFormated + \" - \" + obj.endFormated + \"' position='top' delay='500' message= \" + $translate.instant('tooltipMsg') + \"></div>\";\r\n                                } else {\r\n                                    obj.content = scope.ngModel[i].lines[j].content;\r\n                                }\r\n                                items.push(obj);\r\n                                k++;\r\n                            }\r\n                        }\r\n                    }\r\n                    formateData();\r\n                    $timeout(function () {\r\n                        var groupSet = new vis.DataSet(groups);\r\n                        var itemSet = new vis.DataSet(items);\r\n                        var container = document.getElementById(scope.timelineID);\r\n                        if (timeline == null) {\r\n                            timeline = new vis.Timeline(container);\r\n                            container.addEventListener(\"touchmove\", function (e) {\r\n                                // to avoid original touch device (iPad, tablet) effects like pinch to zoom in/out. \r\n                                e.preventDefault();\r\n                            });\r\n                        }\r\n                        timeline.setGroups(groupSet);\n                        timeline.setItems(itemSet);\r\n                        var options = {\r\n                            editable: readonly,\r\n                            groupOrder: groupOrderFunc,\r\n                            selectable: selectable,\r\n                            showCurrentTime: showCurrentTime,\r\n                            zoomMin: zoomMin,\r\n                            zoomMax: zoomMax,\r\n                            margin: { item: marginSpace },\r\n                            locales: {},\r\n                            locale: cultureCode,\r\n                            format: {\r\n                            \tminorLabels: {\r\n                            \t\tmillisecond: 'SSS',\r\n                            \t\tsecond: 's',\r\n                            \t\tminute: 'hh:mm a',\r\n                            \t\thour: 'hh:mm a',\r\n                            \t\tweekday: 'ddd D',\r\n                            \t\tday: 'D',\r\n                            \t\tmonth: 'MMM',\r\n                            \t\tyear: 'YYYY'\r\n                            \t},\r\n                            \tmajorLabels: {\r\n                            \t\tmillisecond: 'hh:mm:ss a',\r\n                            \t\tsecond: 'D MMMM hh:mm a',\r\n                            \t\tminute: 'ddd D MMMM',\r\n                            \t\thour: 'ddd D MMMM',\r\n                            \t\tweekday: 'MMMM YYYY',\r\n                            \t\tday: 'MMMM YYYY',\r\n                            \t\tmonth: 'YYYY',\r\n                            \t\tyear: ''\r\n                            \t}\r\n                            }\r\n                        };\r\n                        options.locales[cultureCode] = {\r\n                            current: $translate.instant('labelCurrent'),\r\n                            time: $translate.instant('labelTime')\r\n                        };\r\n                        timeline.setOptions(options);\r\n                        if (attrs.fittobound === 'true') {\r\n                            timeline.fit(options);\r\n                        }\n                        $timeout(function () {\r\n                            if (angular.isFunction(scope.onLoad)) {\r\n                                scope.onLoad();\r\n                            }\r\n                        }, 2000);\r\n                        $(timeline.currentTime.bar).append('<span class=\"timelineLabelToday\">' + $translate.instant('timelineLabelToday') + '</span>');\r\n                        timeline.on('select', function (obj) {\r\n                            var props = timeline.getEventProperties(obj.event);\r\n                            var groupObj = (props.group != null) ? scope.ngModel[props.group] : null;\r\n                            var itemObj = (props.item != null) ? scope.ngModel[props.group].lines[groupItemPeer[props.item]] : null;\r\n                            var returnObj = {\r\n                                item: itemObj,\r\n                                group: groupObj,\r\n                                properties: props\r\n                            }\r\n\r\n                            if (angular.isFunction(scope.onSelect)) {\r\n                                scope.onSelect({\r\n                                    $res: returnObj\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }, true);\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTimeline/smartTimelineTemplate.html'\r\n        };\r\n    }]);\r\n})();\n  /**\n   * @memberof SMART2\n   * @ngdoc directive\n   * @name Tooltip\n   * @description This directive is useful for creating a tooltip.\n   * \n   * @attr {String} position\n   *    Tooltip position. Possible values are left, right, top, bottom. Default value is 'left'.\n   * @attr {Number} delay\n   *    Tooltip delay. Default value is '250'.\n   * @attr {String} tooltip\n   *    Tooltip message\n   * \n   * @example\n   Usage:\n   <span smart-tooltip position=\"top\" delay=\"500\" message=\"Tooltip message\"></span>\n   */\n\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartTooltip', [function () {\r\n        return {\r\n            restrict: 'A',\n            replace: true,\n            scope: {\r\n                customStyle: \"=\"\r\n            },\n            link: function (scope, element, attrs) {\r\n                var onMessage = attrs.$observe('message', function (value) {\r\n                    element.attr('data-tooltip', value);\r\n                });\n                element.attr('data-position', attrs.position ? attrs.position : 'left');\n                element.attr('data-delay', attrs.delay ? attrs.delay : '50');\n                element.attr('data-tooltip', attrs.message ? attrs.message : '');\n                element.addClass('tooltipped');\n                if (typeof scope.customStyle != \"undefined\") {\r\n                    var optionsObject = {\r\n                        \"customStyle\": scope.customStyle\r\n                    };\r\n                }\n                element.tooltip(optionsObject);\n                element.on('click', function () {\r\n                    element.trigger('mouseleave');\r\n                });\n                //  Destroy tooltip on scope destroy\n                scope.$on('$destroy', function () {\r\n                    element.tooltip('remove');\r\n                    onMessage();\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})();\n/**\r\n * @memberof SMART2\r\n * @ngdoc directive\r\n * @name Typeahead\r\n * @description This directive is used for creating a typeahead component ie Type and search plus select.\r\n * \r\n * @attr {String} label\r\n *    Label to be displayed for identification of this ui element\r\n * @attr {String} placeholder\r\n *    Hint text to be displayed\r\n * @attr {String} info-icon\r\n *    To show a custom icon\r\n * @attr {Array} ng-model\r\n *    Default values to be displayed (Note: Pass array only if multiselect is set to true. Else pass an object.)\r\n *  @attr {Array} options\r\n *    Values to be shown in suggestions\r\n * @attr {Boolean} multiselect\r\n *    To allow/disallow multiple selections\r\n * @attr {Boolean} addnew\r\n *    To allow add new option\r\n * @attr {Boolean} show-lookup\r\n *    To make autocomplete plus lookup available\r\n * @attr {Boolean} focus \r\n *    If set to true, this ui element will be focused\r\n * @attr {Boolean} validate\r\n *    If set to true, this ui element will be validated on the basis of rules passed to it\r\n * @attr {Array} rules \r\n *    Rules to be evaluated when this element's blur event is fired. A rule must have 'rule' and 'errorMessage' properties (keys).\r\n *    'rule' must be a condition or group of conditions. 'errorMessage' will be the message to be displayed when corresponding rule fails. See example for more.\r\n * @attr {String} error-message \r\n *    Error message to be displayed. This attribute can be set at any point to display an error message.\r\n * @attr {Boolean} is-mandatory \r\n *    If set to true, default error message will be displayed when blur event is fired and this ui element is left blank\r\n * @attr {Boolean} disable \r\n *    If set to true, field cannot be edited. Blur and focus events will not be fired (default behaviour).\r\n * @attr {Function} on-focus\r\n *    Callback function when ui element's focus event is fired\r\n * @attr {Function} on-blur\r\n *    Callback function when ui element's blur event is fired\r\n * @attr {Function} on-key-up\r\n *    Callback function when ui element's keyup event is fired\r\n * @attr {Function} on-key-down\r\n *    Callback function when ui element's keydown event is fired\r\n * @attr {Function} on-key-press\r\n *    Callback function when ui element's keypress event is fired\r\n * @attr {Function} on-select\r\n *    Callback function when a value is selected \r\n * @attr {Function} callback-on-iconclick\r\n *    Callback function for icon on the right side\r\n * @attr {Function} call-addnew\r\n *    Callback function for add new icon\r\n * \r\n *    \r\n * @example\r\n Static:\r\n Controller:\r\n      $scope.options = [\r\n\t\t{\r\n\t\t\t\"UserId\": 28360,\r\n\t\t\t\"UserName\": \"SRUser1@outlook.com\",                  \r\n\t\t\t\"FirstName\": \"SR\",                  \r\n\t\t\t\"LastName\": \"User1\"\r\n\t\t}, {                 \r\n\t\t\t\"UserId\": 28977,                  \r\n\t\t\t\"UserName\": \"SRUser1@outlook.com11\",\r\n\t\t\t\"FirstName\": \"Test\",\r\n\t\t\t\"LastName\": \"TestLastName\"    \r\n\t\t}, {                  \r\n\t\t\t\"UserId\": 57900,                  \r\n\t\t\t\"UserName\": \"SRUser1@outlook.com234\",                  \r\n\t\t\t\"FirstName\": \"Test23\",                  \r\n\t\t\t\"LastName\": \"test23lastname\"                 \r\n\t\t}\r\n\t]; \r\n\t$scope.selected = [{            \r\n\t\t\"UserId\": 28360,               \r\n\t\t\"UserName\": \"SRUser1@outlook.com\",               \r\n\t\t\"FirstName\": \"SR\",               \r\n\t\t\"LastName\": \"User1\"              \r\n\t}];  \r\n Usage:\r\n      <smart-typeahead class=\"col s2\" multiselect=\"true\" addnew=\"true\" showlookup=\"true\" placeholder=\"Place Holder\" ng-model=\"selected\" options=\"options\" filterkeys=\"['FirstName', 'LastName']\" optionformat=\"<span>{FirstName} {LastName}</span>\" displayformat=\"{FirstName} {LastName}\" label=\"{{typeaheadLabel}}\" callback-on-iconclick=\"callAfterClickedOnRightSideIcon(e)\" info-icon=\"#icon_CirclePlus\" call-addnew=\"callAfterAddNewFuncClick(e)\"></smart-typeahead>       \r\n */\r\n(function () {\r\n    'use strict';\r\n    var typeaheadId = 0;\r\n    angular.module('SMART2').directive('smartTypeahead', ['$rootScope', '$timeout', '$translate', 'ScrollTo', 'lookup', 'RuleEngine', '$window', function ($rootScope, $timeout, $translate, ScrollTo, lookup, RuleEngine, $window) {\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            require: 'ngModel',\r\n            scope: {\r\n                label: '@',\r\n                ngModel: '=?',\r\n                options: '=?',\r\n                isMandatory: '@',\r\n                isVisible: '=?',\r\n                rules: '@',\r\n                validate: '=?',\r\n                focus: '=?',\r\n                parentElement: '@',\r\n                onChange: '&',\r\n                onFocus: '&',\r\n                onBlur: '&',\r\n                onKeyUp: '&',\r\n                onKeyDown: '&',\r\n                onKeyPress: '&',\r\n                onEnter: '&',\r\n                onSelect: '&',\r\n                callbackOnIconClick: '&',\r\n                callAddNew: '&',\r\n                lookupOpen: '&',\r\n                lookupHide: '&',\r\n                onScrollEnd: '&',\r\n                onScrollTop: '&',\r\n                onScrollInProgress: '&',\r\n                searchtextKeyUp: '&',\r\n                errorMessage: '@',\r\n                //  input element's attribute except for listeners should be in small letters\r\n                align: '@',\r\n                format: '@',    //  date format\r\n                readonly: '@',\r\n                disable: '@',\r\n                prefixicon: '@',\r\n                maxlength: '@',\r\n                charactercounter: '@',\r\n                decimalprecision: '@',\r\n                minmaxprecision: '@',\r\n                placeholder: '@',\r\n                autocomplete: '@',\r\n                removable: '@',\r\n                datakey: '@',\r\n                filterkeys: '@',\r\n                optionformat: '@',\r\n                displayformat: '@',\r\n                desckey: '@',\r\n                multiselect: '@',\r\n                showLookup: '@',\r\n                infoIcon: '@',\r\n                infoIconTooltip: '@',\r\n                addnew: '@',\r\n                titleofmodel: '@',\r\n                selecttypeoption: '=?',\r\n                showInfoIcon: '=?',\r\n                isSupplier: '=?',\r\n                defaultselectoption: '@',\r\n                defaultselectiontext: '=?',\r\n                width: '@',\r\n                height: '@',\r\n                isDefaultMandatory: '@',\r\n                minCharForTrigger: '@',\r\n                noSuggestionNotice: '@',\r\n                showNoSuggestion: '@',\r\n                errorModel: '=?',\r\n                loading: '=?',\r\n                minMultiselect: '@',\r\n                showinfo: '@',\r\n                showwarning: '@',\r\n                clienterror: '=?',\r\n                isLazyLoadingEnabled: '@',\r\n                stopFilterOnKey: '@',\r\n                searchCount: '@',\r\n                requireLoader: '@'\r\n            },\r\n            link: function (scope, element, attrs, ngModel) {\r\n                scope.placeholder = (scope.placeholder == undefined || scope.placeholder == null) ? '' : scope.placeholder;\r\n                scope.ngModel = (scope.ngModel == undefined || scope.ngModel == null) ? '' : scope.ngModel;\r\n                scope.label = (scope.label == undefined || scope.label == null) ? '' : scope.label;\r\n                scope.textAlign = (scope.align == undefined || scope.align == null) ? 'left' : scope.align;\r\n                scope.infoIconFlag = (scope.infoIcon == undefined || scope.infoIcon == null) ? false : true;\r\n                scope.titleofmodel = (scope.titleofmodel == undefined || scope.titleofmodel == null) ? $translate.instant('titleOfModel') : scope.titleofmodel;\r\n                scope.infoIconTooltip = (scope.infoIconTooltip == undefined || scope.infoIconTooltip == null) ? '' : scope.infoIconTooltip;\r\n                scope.isLazyLoadingEnabled = angular.isDefined(scope.isLazyLoadingEnabled) ? scope.isLazyLoadingEnabled : false;\r\n                var multiselect = (scope.multiselect == undefined || scope.multiselect == null) ? false : scope.multiselect == \"true\" ? true : false;\r\n                var minMultiselect = (scope.minMultiselect == undefined || scope.minMultiselect == null) ? { event: false } : { event: true, value: scope.minMultiselect };\r\n                var showLookup = (scope.showLookup == undefined || scope.showLookup == null) ? true : scope.showLookup == \"true\" ? true : false;\r\n                var addnew = (scope.addnew == undefined || scope.addnew == null) ? false : scope.addnew == \"true\" ? true : false;\r\n                var readonly = (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false;\r\n                var minCharForTrigger = scope.minCharForTrigger ? parseInt(scope.minCharForTrigger) : 3;\r\n                var noSuggestionNotice = angular.isDefined(scope.noSuggestionNotice) ? scope.noSuggestionNotice : $translate.instant('noResultsErrMsg');\r\n                var showNoSuggestion = angular.isDefined(scope.showNoSuggestion) ? (scope.showNoSuggestion == 'true') ? true : false : false;\r\n                var loading = angular.isDefined(scope.loading) ? scope.loading : false;\r\n                if (noSuggestionNotice == '') {\r\n                    showNoSuggestion = false;\r\n                }\r\n                //showNoSuggestion = (noSuggestionNotice == '') ? false : showNoSuggestion;\r\n                var number, rulesValidationEvent;\r\n                var showLookupKey = $translate.instant('showLookupLabel'),\r\n                    addNewKey = $translate.instant('addNew');\r\n                scope.disabled = \"\";\r\n                scope.showInfoIcon = (scope.showInfoIcon == undefined || scope.showInfoIcon == null) ? false : scope.showInfoIcon;\r\n                var isInfoTipEnable = attrs.showInfoTip == 'true' ? true : false,\r\n                    checkInfoToolTip = function () {\r\n                        if (isInfoTipEnable) {\r\n                            scope.infotipData = scope.displayModel.replace(/,/g, '  ').trim().replace(/  /g, '<br>');\r\n                        } else {\r\n                            scope.infotipData = \"\";\r\n                        }\r\n                    };\r\n\r\n                var selectedArr = [], newOptionsSelected = [], newArr = [], copyArray = [], selectedArrIndex;\r\n                if (readonly) {\r\n                    scope.disabled = \"disabled\";\r\n                }\r\n                var uniqueIDGenerator = function () {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xx2xxpxxoxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                function checkIfActive() {\r\n                    if (scope.placeholder === '' && (scope.displayModel === '' || scope.displayModel === undefined || scope.displayModel === null)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                scope.isActive = checkIfActive();\r\n                if (attrs.id != undefined || attrs.id != null) {\r\n                    scope.typeaheadId = attrs.id;\r\n                    element.removeAttr('id');\r\n                }\r\n                else {\r\n                    var typeaheadId = uniqueIDGenerator();\r\n                    scope.typeaheadId = 'typeahead-' + typeaheadId;\r\n                }\r\n                scope.labelFortypeaheadId = 'label-for-' + scope.typeaheadId;\r\n\r\n                /*\r\n\t\t\t\t* Skip tab key focus, if field is readonly\r\n\t\t\t\t*/\r\n               var cancelMe =  setTimeout(function () {\r\n                    if (readonly) {\r\n                        angular.element('#' + scope.typeaheadId).attr('tabindex', -1);\r\n                    }\r\n                    clearTimeout(cancelMe);\r\n                    cancelMe = null;\r\n                });\r\n\r\n                var unbindFocus = scope.$watch('focus', function (newVal, oldVal) {\r\n                    if (newVal) {\r\n                        ScrollTo.perform(element, angular.element('#' + scope.parentElement));\r\n                        var clrTout = setTimeout(function () {\r\n                            angular.element('#' + scope.labelFortypeaheadId).trigger('click');\r\n                            clearTimeout(clrTout);\r\n                            clrTout = null;\r\n                        });\r\n                        scope.focus = false;\r\n                    }\r\n                });\r\n\r\n                var changeTimeout, keyUpTimeout, keyDownTimeout, keyPressTimeout;\r\n                scope.ngChange = function (e) {\r\n                    scope.isActive = checkIfActive();\r\n\r\n                    if (changeTimeout) {\r\n                        $timeout.cancel(changeTimeout);\r\n                    }\r\n                    changeTimeout = $timeout(function () {\r\n                        scope.onChange({\r\n                            $event: {\r\n                                data: angular.element('#' + scope.typeaheadId)\r\n                            }\r\n                        });\r\n                    }, 500);\r\n                };\r\n                scope.ngFocus = function (e) {\r\n                    scope.isActive = true;\r\n                    scope.onFocus({ $event: e });\r\n                    autoCompleteField.suggestions.length = 0;\r\n                };\r\n                scope.ngBlur = function (e) {\r\n                    var model = getModel();\r\n                    setValues(model);\r\n\r\n                    if (multiselect && model.length > 0) {\r\n                        scope.multiselectFlag = true;\r\n                    }\r\n\r\n                    scope.isActive = checkIfActive();\r\n                    scope.onBlur({ $event: e });\r\n                    if (model == undefined || model == null || model == '' || Object.getOwnPropertyNames(model).length === 0) {\r\n                        scope.showInfoIcon = false;\r\n                    } else {\r\n                        scope.showInfoIcon = true;\r\n                    }\r\n\r\n                    // Needed to add $timeout for not showing error message before show lookup open.\r\n                    var tout = $timeout(function () {\r\n                        if (!showLookupTrigger) {\r\n                            scope.validateRules();\r\n                        } else {\r\n                            showLookupTrigger = false;\r\n                        }\r\n                        $timeout.cancel(tout);\r\n                        tout = null;\r\n                    }, 200);\r\n                };\r\n                var preventKeyArray = [37, 38, 39, 40];\r\n                var showLookupTrigger = false;\r\n                scope.ngKeyUp = function (e) {\r\n                    if (multiselect && e.target.value == \"\") {\r\n                        setModel([]);\r\n                    }\r\n                    if (!multiselect && e.target.value == \"\") {\r\n                        setModel(null);\r\n                    }\r\n                    scope.showInfoIcon = false;\r\n                    if (keyUpTimeout) {\r\n                        $timeout.cancel(keyUpTimeout);\r\n                    }\r\n                    keyUpTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyUp({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                    DuplicateData(scope.displayModel, e);\r\n                };\r\n                scope.ngKeyDown = function (e) {\r\n                    scope.showInfoIcon = false;\r\n                    if (keyDownTimeout) {\r\n                        $timeout.cancel(keyDownTimeout);\r\n                    }\r\n                    keyDownTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyDown({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                    var formattedData = getFormattedData(newOptionsSelected);\r\n                    copyArray = angular.copy(formattedData).map(function (data) { return data.value.toLowerCase(); });\r\n                    DuplicateData(scope.displayModel, e);\r\n                };\r\n                scope.ngKeyPress = function (e) {\r\n                    if (keyPressTimeout) {\r\n                        $timeout.cancel(keyPressTimeout);\r\n                    }\r\n                    keyPressTimeout = $timeout(function () {\r\n                        var key = 'which' in e ? e.which : e.keyCode;\r\n                        if (!(preventKeyArray.indexOf(key) > -1)) {\r\n                            scope.onKeyPress({ $event: e });\r\n                        }\r\n\r\n                        if (e.charCode == 13) {\r\n                            scope.onEnter({ $event: e });\r\n                        }\r\n                    }, 500);\r\n                   DuplicateData(scope.displayModel, e);\r\n                };\r\n\r\n                scope.clickedOnIcon = function (e) {\r\n                    scope.callbackOnIconClick({ $event: e });\r\n                };\r\n\r\n                scope.validateRules = function () {\r\n                    var model = getModel();\r\n                    if (scope.readonly == 'true') {\r\n                        scope.isActive = true;\r\n                        return;\r\n                    }\r\n                    if (scope.$eval(scope.isMandatory) && !scope.clienterror && (Object.keys(model).length == 0 || model == null || model == undefined || model == '' || model.id == 0)) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"enterValueErrMsg\");\r\n                        scope.errorModel = $translate.instant(\"enterValueErrMsg\");\r\n                        return;\r\n                    }\r\n                    if (scope.clienterror) {\r\n                        scope.validate = true;\r\n                        scope.errorMessage = $translate.instant(\"clientErrMsg\");\r\n                        scope.errorModel = $translate.instant(\"clientErrMsg\");\r\n\r\n                        return;\r\n                    }\r\n\r\n                    scope.validate = false;\r\n                    scope.errorMessage = null;\r\n                    scope.errorModel = null;\r\n\r\n                    if (scope.rules) {\r\n                        var rules = scope.$eval(scope.rules);\r\n                        var isFoundInvalid = false,\r\n                            ruleLlen = rules.length;\r\n                        for (var i = 0; i < ruleLlen; i++) {\r\n                            var tRule = rules[i];\r\n                            if (typeof tRule == 'object') {\r\n                                if (eval((tRule.rule).replace(/this/g, 'scope.displayModel'))) {\r\n                                    scope.validate = true;\r\n                                    scope.errorMessage = tRule.error;\r\n                                    scope.errorModel = tRule.error;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!isFoundInvalid) {\r\n                                    RuleEngine.isValid(tRule, function (e) {\r\n                                        scope.validate = true;\r\n                                        scope.errorMessage = $translate.instant(e.errorData.error);\r\n                                        scope.errorModel = $translate.instant(e.errorData.error);\r\n                                        isFoundInvalid = true;\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                var unbindValidate = scope.$watchGroup(['validate', 'clienterror', 'showinfo', 'showwarning'], function (newVal, oldVal) {\r\n                    if (newVal[0] || newVal[1] != oldVal[1]) {\r\n                        scope.validateRules();\r\n                    }\r\n\r\n                    if (newVal[2] != oldVal[2] || newVal[3] != oldVal[3]) {\r\n                        if (scope.showinfo || scope.showwarning) {\r\n                            element.hasClass('input-field').addClass('field-has-icon');\r\n                        }\r\n                        else {\r\n                            element.hasClass('.input-field').removeClass('field-has-icon');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (scope.clienterror) {\r\n                    scope.validateRules();\r\n                }\r\n\r\n                function setModel(value, mode) {\r\n                    value = !value ? (multiselect ? [] : {}) : value;\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        if (multiselect && mode == \"autocomplete\") {\r\n                            var v = value;\r\n                            value = ngModel.$modelValue;\r\n                            value.push(v);\r\n                        };\r\n                        ngModel.$setViewValue(value);\r\n                        ngModel.$render();\r\n                        if (mode != \"autocomplete\") {\r\n                            setValues(value);\r\n                        };\r\n                    } else {\r\n                        if (multiselect && mode == \"autocomplete\") {\r\n                            scope.ngModel.push(value)\r\n                        } else if (multiselect === true) {\r\n                            if (typeof scope.ngModel == \"string\") {\r\n                                scope.ngModel = value;\r\n                            } else {\r\n                                if (scope.ngModel == value) {\r\n                                    value = angular.copy(value);\r\n                                }\r\n                                scope.ngModel.length = 0;\r\n                                [].push.apply(scope.ngModel, value);\r\n                            };\r\n                        } else {\r\n                            scope.ngModel = value;\r\n                        }\r\n                        setValues(scope.ngModel);\r\n                    }\r\n                };\r\n\r\n                function getModel() {\r\n                    var model;\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        model = ngModel.$modelValue;\r\n                    } else {\r\n                        model = scope.ngModel;\r\n                    }\r\n                    return model;\r\n                }\r\n\r\n                function DuplicateData(editTest, event) {\r\n\r\n                    var newArrLen = '';\r\n                    if (editTest || event.keyCode == 188 || event.type == \"keyup\") {\r\n                        var str_array = editTest.split(','),\r\n                            strLen = str_array.length;\r\n                        for (var i = 0; i < strLen; i++) {\r\n                            str_array[i] = str_array[i].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\r\n                        }\r\n                        angular.forEach(str_array, function (val) {\r\n                            var indexabc = copyArray.indexOf(val.toLowerCase());\r\n                            selectedArrIndex = newOptionsSelected.map(function (data) { return data.value.toLowerCase(); }).indexOf(val.toLowerCase());\r\n\r\n                            if (selectedArrIndex != -1 && newArr.indexOf(val) == -1) {\r\n                                selectedArr.push(selectedArrIndex);\r\n                                var ab = newOptionsSelected.splice(selectedArrIndex, 1)[0];\r\n                                newArr.push(ab);\r\n                                ab._$index = indexabc;\r\n                            }\r\n                        });\r\n                        if (event) {\r\n                            if (event.keyCode == 8 || event.keyCode == 46 || editTest.length == 3) {\r\n                            angular.forEach(str_array, function (val, v1, v2) {\r\n                                var isPresent = newArr.map(function (data) { return data.value; }).indexOf(val);\r\n                                if (isPresent == -1) {\r\n                                    newArrLen = newArr.length;\r\n                                    for (var i = 0 ; i < newArrLen; i++) {\r\n                                        var tNewArr = newArr[i];\r\n                                        if (newOptionsSelected.indexOf(tNewArr) == -1 && v2.indexOf(tNewArr.value) == -1) {\r\n                                            newOptionsSelected.splice(tNewArr._$index, 0, tNewArr);\r\n                                            newArr.splice(i, 1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                        }\r\n                    }\r\n                    else {\r\n                        newArrLen = newArr.length;\r\n                        for (var i = 0 ; i < newArrLen; i++) {\r\n                            if (newOptionsSelected.indexOf(newArr[i]) == -1) {\r\n                                newOptionsSelected.splice(newArr[i]._$index, 0, newArr[i]);\r\n                                newArr.splice(i, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                function getFormattedData(data) {\r\n                    var dataLength = data.length;\r\n                    if (!data || dataLength == 0) {\r\n                        return [];\r\n                    }\r\n                    for (var i = 0; i < dataLength; i++) {\r\n                        var str = displayFormat;\r\n                        try {\r\n                            var parentSplit = str.split('{'),\r\n                                parentSplitLen = parentSplit.length;\r\n                            for (var j = 0; j < parentSplitLen; j++) {\r\n                                var childSplit = parentSplit[j].split('}'),\r\n                                    childSplitLen = childSplit.length;\r\n                                for (var k = 0; k < childSplitLen; k++) {\r\n                                    var childObj = childSplit[k];\r\n                                    if (childObj.indexOf('.') > 0 || data[i].hasOwnProperty(childObj)) {\r\n                                        str = str.replace(new RegExp(\"{\" + childObj + \"}\", \"ig\"), eval('data[i].' + childObj));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                        data[i].value = str.trim();\r\n                    }\r\n                    return data;\r\n                };\r\n\r\n                var filterKeys;\r\n                if (angular.isDefined(scope.filterkeys) && scope.filterkeys.trim().indexOf('[') == 0) {\r\n                    filterKeys = scope.filterkeys ? scope.$eval(scope.filterkeys) : ['title'];\r\n                }\r\n                else {\r\n                    filterKeys = scope.filterkeys ? scope.$eval('[' + scope.filterkeys + ']') : ['title'];\r\n                }\r\n\r\n                //set optionFormat displayFormat related to filterKeys incase undefined\r\n                scope.filterKeys = scope.$eval(scope.filterkeys);\r\n                function getOpFormate() {\r\n                    var opFor = \"\",\r\n                        filterKeyLen = filterKeys.length;\r\n                    for (var i = 0; i < filterKeyLen; i++) {\r\n                        opFor = opFor + \"{\" + filterKeys[i] + \"} \";\r\n                    }\r\n                    if (opFor == \"\") {\r\n                        return \"{title}\";\r\n                    }\r\n                    opFor.trim();\r\n                    return opFor;\r\n                }\r\n\r\n                function getDispFormate() {\r\n                    var opDisp = \"<span>\",\r\n                        filterKeyLen = filterKeys.length;\r\n                    for (var i = 0; i < filterKeyLen; i++) {\r\n                        opDisp = opDisp + \"{\" + filterKeys[i] + \"} \";\r\n                    }\r\n                    if (opDisp == \"<span>\") {\r\n                        return \"{title}\";\r\n                    }\r\n                    opDisp.trim();\r\n                    opDisp = opDisp + \"</span>\";\r\n                    return opDisp;\r\n                }\r\n\r\n                var optionFormat = scope.optionformat ? scope.optionformat : getDispFormate();\r\n                var displayFormat = scope.displayformat ? scope.displayformat : getOpFormate();\r\n\r\n                function getDisplayData(data) {\r\n                    if (data == undefined || data == null || data == '') {\r\n                        return '';\r\n                    }\r\n                    var str = displayFormat, evalResult, evaluatedKeysCounter = 0, nullKeysCounter = 0;\r\n                    try {\r\n                        var parentSplit = str.split('{'),\r\n                            parentSplitLen = parentSplit.length;\r\n                        for (var j = 0; j < parentSplitLen; j++) {\r\n                            var childSplit = parentSplit[j].split('}'),\r\n                                childSplitLen = childSplit.length;\r\n                            for (var k = 0; k < childSplitLen; k++) {\r\n                                var tChild = childSplit[k];\r\n                                if (tChild.indexOf('.') > 0 || data.hasOwnProperty(tChild)) {\r\n                                    evalResult = eval('data.' + tChild);\r\n                                    evaluatedKeysCounter++;\r\n                                    if (evalResult == undefined || evalResult == null || (evalResult + '').trim().length == 0) {\r\n                                        evalResult = '';\r\n                                        nullKeysCounter++;\r\n                                    }\r\n                                    str = str.replace(new RegExp(\"{\" + tChild + \"}\", \"ig\"), evalResult);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (evaluatedKeysCounter == nullKeysCounter) {\r\n                            str = '';\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                    return str === undefined || str === null || str === 'undefined' || str === 'null' ? '' : str;\r\n                }\r\n                //Function return the array of proprrties Input:\"{abc} {dfg}\"; Output:[\"abc\",\"dfg\"]\r\n                function getFormatedArray(formatString) {\r\n                    var str = formatString.trim();\r\n                    try {\r\n                        var parentSplit = str.split('{'), propArray = [],\r\n                            tLen = parentSplit.length;\r\n                        for (var j = 0; j < tLen; j++) {\r\n                            var childSplit = parentSplit[j].split('}');\r\n                            if (j != 0) {\r\n                                propArray.push(childSplit[0].trim());\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e) { }\r\n                    return propArray === undefined || propArray === null || propArray === 'undefined' || propArray === 'null' ? '' : propArray;\r\n                };\r\n                var formatedArray = getFormatedArray(displayFormat);\r\n                \r\n                var delimiterVal = null;\r\n                if (multiselect == true) {\r\n                    delimiterVal = /(,|;)\\s*/;\r\n                }\r\n                var unbindOptions, autoCompleteField;\r\n               var toutOptions =  $timeout(function () {\r\n                    unbindOptions = scope.$watch('options', function (newOptions) {\r\n                        try {\r\n                            newOptionsSelected = newOptions;\r\n                            var formattedData = getFormattedData(newOptionsSelected);\r\n                            copyArray = angular.copy(formattedData).map(function (data) { return data.value.toLowerCase(); });\r\n                            if (!readonly) {\r\n                                if (!$('#' + scope.typeaheadId).devbridgeAutocomplete()) {\r\n                                    autoCompleteField = $('#' + scope.typeaheadId).devbridgeAutocomplete({\r\n                                        filterKeys: filterKeys,\r\n                                        optionFormat: optionFormat,\r\n                                        displayFormat: displayFormat,\r\n                                        lookup: formattedData,\r\n                                        width: scope.width,\r\n                                        maxHeight: scope.height,\r\n                                        multiselect: multiselect,\r\n                                        showLookup: showLookup,\r\n                                        addnew: addnew,\r\n                                        minChars: minCharForTrigger,\r\n                                        delimiter: delimiterVal,\r\n                                        showNoSuggestionNotice: showNoSuggestion,\r\n                                        noSuggestionNotice: noSuggestionNotice,\r\n                                        loading: loading,\r\n                                        minMultiselect: minMultiselect,\r\n                                        showLookupKey: showLookupKey,\r\n                                        addNewKey: addNewKey,\r\n                                        onSelect: function (suggestion) {\r\n                                            angular.element('#' + scope.labelFortypeaheadId).trigger('click');\r\n                                            scope.$evalAsync(function () {\r\n                                                if (multiselect == true) {\r\n                                                    scope.displayModel = \"\";\r\n                                                    setModel(suggestion, 'autocomplete');\r\n                                                    angular.forEach(getModel(), function (val) {\r\n                                                        scope.displayModel = scope.displayModel + val.value + ', ';\r\n                                                    });\r\n                                                    DuplicateData(scope.displayModel);\r\n                                                } else {\r\n                                                    scope.displayModel = getDisplayData(suggestion);\r\n                                                    setModel(suggestion, 'autocomplete');\r\n                                                }\r\n                                                var tOutTemp = $timeout(function () {\r\n                                                    scope.onSelect(suggestion);\r\n                                                    $timeout.cancel(tOutTemp);\r\n                                                    tOutTemp = null;\r\n                                                });\r\n                                            });\r\n                                        },\r\n                                        onClickAddNew: function (e) {\r\n                                            if (addnew) {\r\n                                                scope.callAddNew({ $event: e });\r\n                                                document.body.style.height = document.body.scrollHeight + 2 + \"px\";\r\n                                                var tTout = setTimeout(function () {\r\n                                                    window.scrollTo(0, (document.body.scrollTop + 1));\r\n                                                    window.scrollTo(0, (document.body.scrollTop - 1));\r\n                                                    document.body.style.height = \"\";\r\n                                                    clearTimeout(tTout);\r\n                                                    tTout = null;\r\n                                                });\r\n                                            }\r\n                                        },\r\n                                        onClickShowLookup: function (e) {\r\n                                            if (showLookup) {\r\n                                                scope.openLookup();\r\n                                            }\r\n                                        }\r\n                                    }).devbridgeAutocomplete();\r\n\r\n                                    $(autoCompleteField.element).focus(function (e) {\r\n                                        alignLookUp.call(this, e, autoCompleteField);\r\n                                        var drp = $window.lastOpenedDropdownConfig;\r\n                                        if (drp && !drp.activates.is(\":hidden\") && !angular.element(this).closest(drp.activates).length) { // focused textBox shuld not be within the Materlized dropDown thenonly close the Materlized dropDown.\r\n                                            //Materlized dropdown should be closed on focus on autoComplatetextbox\r\n                                            drp.origin.trigger('close');\r\n                                        }\r\n                                    }).keyup(function (e) {\r\n                                        alignLookUp.call(this, e, autoCompleteField);\r\n                                    });\r\n\r\n                                    //Closing the suggestions on scroll to prevent overlapping issue\r\n                                    angular.element($window).scroll(function (e) {\r\n                                        if (autoCompleteField.visible) {\r\n                                            autoCompleteField.hide();\r\n                                        }\r\n                                    });\r\n                                    //End of closing the suggestions on scroll to prevent overlapping issue\r\n\r\n                                  \r\n                                } else {\r\n                                    $('#' + scope.typeaheadId).devbridgeAutocomplete().setLookup(getFormattedData(newOptions));\r\n                                }\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    });\r\n                    var unbindLoading = scope.$watch('loading', function (newVal, oldVal) {\r\n                        if (newVal == true || newVal == false) {\r\n                            $('#' + scope.typeaheadId).devbridgeAutocomplete().setLoading(newVal);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                function alignLookUp(e) {\r\n                    var _this = $(this),\r\n                        scrollTop = $(\"html\").scrollTop() || $(\"body\").scrollTop(),\r\n                        elPosition = _this.offset(),\r\n                        elHeight = _this.outerHeight(),\r\n                        lookup = $(autoCompleteField.suggestionsContainer),\r\n                        lookupPosition = lookup.offset(),\r\n                        lookupHeight = lookup.outerHeight(),\r\n                        isOutOfBound = ((elPosition.top - scrollTop) + elHeight + lookupHeight) > window.innerHeight;\r\n\r\n                    lookup.css(\"opacity\", 0);\r\n                    if (isOutOfBound) { // if lookup list is going out of window\r\n                        if (autoCompleteField.options.orientation != \"top\") {\r\n                            autoCompleteField.options.orientation = \"top\";\r\n                            autoCompleteField.fixPosition();\r\n                        }\r\n                    } else {\r\n                        if (autoCompleteField.options.orientation == \"top\") {\r\n                            autoCompleteField.options.orientation = \"bottom\";\r\n                            autoCompleteField.fixPosition();\r\n                        }\r\n                    }\r\n                    lookup.css(\"opacity\", 1);\r\n                };\r\n                scope.openLookup = function () {\r\n                    showLookupTrigger = true;\r\n                    var len = newArr.length;\r\n                    for (var i = 0 ; i < len; i++) {\r\n                        var tItem = newArr[i];\r\n                        if (newOptionsSelected.indexOf(tItem) == -1) {\r\n                            newOptionsSelected.splice(tItem._$index, 0, tItem);\r\n                            newArr.splice(i, 1);\r\n                        }\r\n                    }\r\n                    if (scope.readonly === 'true' && !scope.mutiselectVal[1]) return false;\r\n\r\n                    if ($.isFunction(scope.lookupOpen)) {\r\n                        scope.lookupOpen();\r\n                    }\r\n                    var lookupConfig = {\r\n                        modelData: lookup.getTempModel() || getModel(),\r\n                        config: {\r\n                            mutliselect: multiselect,\r\n                            displayProperties: formatedArray,\r\n                            options: scope.options,\r\n                            descriptionKey: scope.desckey,\r\n                            addnew: addnew,\r\n                            onKeyUp: attrs.searchtextKeyUp ? scope.searchtextKeyUp : '',\r\n                            titleOfModel: scope.titleofmodel,\r\n                            defaultSelectOption: scope.defaultselectoption,\r\n                            defaultSelectionText: scope.defaultselectiontext,\r\n                            selectTypeOption: scope.selecttypeoption,\r\n                            readonly: (scope.readonly == undefined || scope.readonly == null) ? false : scope.readonly == \"true\" ? true : false,\r\n                            isMandatory: scope.isMandatory,\r\n                            isDefaultMandatory: scope.isDefaultMandatory,\r\n                            errorModel: scope.errorModel,\r\n                            minMultiselect: minMultiselect,\r\n                            label: scope.label,\r\n                            searchFilterKey: scope.$eval(scope.filterkeys),\r\n                            isLazyLoadingEnabled: scope.isLazyLoadingEnabled,\r\n                            stopFilterOnKey: scope.stopFilterOnKey,\r\n                            searchCount: scope.searchCount,\r\n                            requireLoader: scope.requireLoader\r\n                        }\r\n                    }\r\n                    var lookupTout = $timeout(function () {\r\n                        lookup.open(lookupConfig, function (response) {\r\n                            if (response.addnew) {\r\n                                if ($.isFunction(scope.callAddNew)) {\r\n                                    scope.callAddNew();\r\n                                }\r\n                            }\r\n                            setModel(response.result);\r\n                            scope.defaultselectiontext = response.defaultSelectionText;\r\n                            scope.selecttypeoption = response.selectTypeOption;\r\n                            scope.errorModel = response.errorModel;\r\n                            scope.validateRules();\r\n                            if ($.isFunction(scope.lookupHide)) {\r\n                                scope.lookupHide({ data: response });\r\n                            }\r\n                        });\r\n                        lookup.onScrollEnd(function () {\r\n                            scope.onScrollEnd({});\r\n                        });\r\n                        lookup.onScrollTop(function () {\r\n                            scope.onScrollTop({});\r\n                        });\r\n                        lookup.onScrollInProgress(function () {\r\n                            scope.onScrollInProgress({});\r\n                        });\r\n                        $timeout.cancel(lookupTout);\r\n                        lookupTout = null;\r\n                    });\r\n                }\r\n                scope.$on('$destroy', function () {\r\n                    if ($('#' + scope.typeaheadId).devbridgeAutocomplete()) {\r\n                        $('#' + scope.typeaheadId).devbridgeAutocomplete().dispose();\r\n                    }\r\n                    destroyEverythingElse();\r\n                });\r\n\r\n                scope.multiselectFlag = false;\r\n\r\n                function setValues(newVal) {\r\n                     scope.mutiselectVal = [\"\"];\r\n                    if (angular.isDefined(newVal) && newVal != null) {\r\n                        var valuee = \"\",\r\n                        totalEl = newVal.length;\r\n                        if (multiselect == true) {\r\n                            if (totalEl > 0) {\r\n\r\n                                if (minMultiselect.event) {\r\n                                    if ((totalEl == minMultiselect.value) && (getModel().length == minMultiselect.value)) {\r\n                                        scope.validateRules();\r\n                                    }\r\n                                }\r\n\r\n                                if (showLookup) {\r\n                                    scope.multiselectFlag = true;\r\n                                }\r\n                                if (scope.defaultselectoption) {\r\n                                    if (!scope.defaultselectiontext) {\r\n                                        scope.defaultselectiontext = getDisplayData(newVal[0]).replace(/(^\\s*)|(\\s*$)/gi, \"\");\r\n                                        scope.mutiselectVal = [scope.defaultselectiontext + \" (Default)\"];\r\n                                    }\r\n                                    for (var i = 0; i < totalEl; i++) {\r\n                                        if (newVal[i].name === scope.defaultselectiontext) {\r\n                                            scope.mutiselectVal = [getDisplayData(newVal[i]) + \" (Default)\"]; break;\r\n                                        }\r\n                                    }\r\n\r\n                                } else {\r\n                                    scope.mutiselectVal = [getDisplayData(newVal[0])];\r\n                                }\r\n\r\n                                if (totalEl > 1) {\r\n                                    scope.mutiselectVal.push(\"+\" + (totalEl - 1) + \" More\");\r\n                                }\r\n                            } else {\r\n                                scope.multiselectFlag = false;\r\n                            }\r\n                            for (var i = 0; i < totalEl; i++) {\r\n                                if (valuee && totalEl > 1) {\r\n                                    valuee += \",\" + getDisplayData(newVal[i]);\r\n                                }\r\n                                else {\r\n                                    valuee += getDisplayData(newVal[i])\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                        else {\r\n                            valuee = getDisplayData(newVal);\r\n                            scope.showInfoIcon = (valuee == '' || scope.isSupplier) ? false: true;\r\n                        }\r\n                        scope.displayModel = valuee.trim();\r\n                    }\r\n                    scope.isActive = checkIfActive();\r\n                    checkInfoToolTip();\r\n                }\r\n\r\n                var unbindNumber = scope.$watch(\"ngModel\", function (newVal) {\r\n                    if (typeof scope.ngModel == \"function\") {\r\n                        setValues(ngModel.$modelValue);\r\n                    } else {\r\n                        setValues(newVal);\r\n                    }\r\n                });\r\n                function destroyEverythingElse() {\r\n                    element.off(); // deregister all event handlers\r\n                    $('#' + scope.typeaheadId).off();\r\n                    $('#' + scope.labelFortypeaheadId).off();\r\n                    if (unbindFocus)\r\n                        unbindFocus();\r\n                    if (angular.isFunction(unbindOptions))\r\n                        unbindOptions();\r\n                    if (unbindNumber)\r\n                        unbindNumber();\r\n                    // Removing contents of HTML from DOM\r\n                    $('#' + scope.typeaheadId).remove();\r\n                    $('#' + scope.labelFortypeaheadId).remove();\r\n                    $timeout.cancel(toutOptions);\r\n\r\n                }\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/smartTypeahead/smartTypeaheadTemplate.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartUiGrid', ['$timeout', '$filter', 'gridConfigProvider', 'APPCONSTANTS', 'httpService', 'uiGridConstants', '$injector',\n    function ($timeout, $filter, gridConfigProvider, APPCONSTANTS, httpService, uiGridConstants, $injector) {\r\n        return {\r\n            restrict: 'AE',\n            scope: {\r\n                colDef: '@',\n                model: '=',\n                callback: '&',\n                focusRowCol: '@',\n                validationService: '@',\n                searchTerm: '@',\n                otherGridOptions: '@',\n                api: '=',\n                onRenderingStart: '&',\n                onRenderingFinish: '&',\n                dynamicPaginationPageSizes: '=',\r\n                dynamicItemTotal: '='\r\n\n            },\n            link: function (scope, element, attr) {\r\n\n                var paginationOptions = {\r\n                    pageNumber: 1,\n                    pageSize: 12,\n                    sort: null\r\n                };\n\n                if (scope.validationService != undefined) {\r\n                    var service = $injector.get(scope.validationService);\n                    scope.$parent[scope.validationService] = service;\n                    scope.cellClassFunction = scope.validationService + \".validateGridRow\";\n                    scope.cellEditableConditionFunction = scope.validationService + \".isEditableGridRow\";\r\n                }\n                var gridInstance;\n                var defaultGridOptions = {\r\n                    paginationPageSizes: scope.dynamicPaginationPageSizes ? scope.dynamicPaginationPageSizes : [10, 25, 50, 75],\n                    paginationPageSize: scope.dynamicPaginationPageSizes && scope.dynamicPaginationPageSizes[0] ? scope.dynamicPaginationPageSizes[0] : 10,\n                    useExternalPagination: scope.dynamicPaginationCallback ? true : false,\n                    enableCellEditOnFocus: true,\n                    enableFiltering: true,\n                    enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,\n                    treeRowHeaderAlwaysVisible: false,\n                    showTreeExpandNoChildren: false\r\n                };\n                var callback = scope.$eval(scope.callback);\n                var cellClassFunction = scope.$parent.$eval(scope.cellClassFunction);\n                var cellEditableConditionFunction = scope.$parent.$eval(scope.cellEditableConditionFunction);\n\n                scope.gridConfig = defaultGridOptions;\n                var modifiedColDef;\n\n                if (scope.api) {\r\n                    scope.api.getActiveColumns = function () {\r\n                        return scope.gridConfig.columnDefs;\r\n                    };\r\n                }\n\n                scope.$watch('focusRowCol', function (n, o) {\r\n                    if(n){\r\n                        gridInstance.cellNav.scrollToFocus(n.row.entity,n.col.colDef)\r\n                    }\r\n                });\n\n                scope.$watch('scope.dynamicItemTotal', function (n, o) {\r\n                    scope.gridConfig.totalItems = scope.dynamicItemTotal;\r\n                });\n\n                scope.$watch('searchTerm', function (n, o) {\r\n                    if (n && typeof n == 'string') {\r\n                        gridInstance.grid.refresh();\r\n                    }\r\n                });\n\n                scope.$watch('colDef', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        modifiedColDef = gridConfigProvider.getMassagedGirdConfig(scope.$eval(n), scope, cellClassFunction, cellEditableConditionFunction);\n                        _.each(modifiedColDef, function (def, idx, defs) {\r\n                            if (def.customTreeAggregationFinalizerFn) {\r\n                                def.customTreeAggregationFinalizerFn = eval(\"(\" + def.customTreeAggregationFinalizerFn + \")\");\r\n                            }\n                            if (def.customTreeAggregationFn) {\r\n                                def.customTreeAggregationFn = eval(\"(\" + def.customTreeAggregationFn + \")\");\r\n                            }\r\n                        });\n                        scope.gridConfig.columnDefs = null;\n                        scope.gridConfig.columnDefs = modifiedColDef;\n\n                        var groupingCol = _.filter(scope.gridConfig.columnDefs, function (col) { return col.isGrouped;})\n                        if (groupingCol && groupingCol.length > 0 && gridInstance) {\r\n                            gridInstance.grouping.clearGrouping();\n                            _.each(groupingCol, function (col) {\r\n                                gridInstance.grouping.groupColumn(col.field);\r\n                            });\r\n                        }\r\n                    }\r\n                });\n\n                scope.$watch('otherGridOptions', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        var modifiedOtherGridOptions = angular.merge({}, scope.gridConfig, scope.$eval(n));\n                        _.each(modifiedOtherGridOptions.appScopeProvider, function (prop, i, props) {\r\n                            modifiedOtherGridOptions.appScopeProvider[i] = eval(prop);\r\n                        });\n                        scope.gridConfig = null;\n                        scope.gridConfig = modifiedOtherGridOptions;\r\n                    }\r\n                });\n\n                scope.$watch('model', function (newModel) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (!newModel) {\r\n                        scope.gridConfig.data = [];\n                        return;\r\n                    }\n                    var treeColumns = treeViewColumnsToBeCreated(scope.gridConfig.columnDefs);\n                    if (treeColumns.length > 0) {\r\n                        scope.gridConfig = angular.extend(scope.gridConfig, {\r\n                            showTreeRowHeader: true,\n                            enableRowHeaderSelection: true, // Display checkboxes on every row when it's true\n                            showTreeExpandNoChildren: false\r\n                        });\n                        scope.gridConfig.data = assignTreeLevel($filter('orderBy')(newModel, treeColumns[0].field), treeColumns[0].field);\r\n                    }\n                    else {\r\n                        scope.gridConfig.data = newModel;\r\n                    }\r\n                });\r\n\r\n\r\n                if (!gridInstance) {\r\n                    scope.gridConfig.onRegisterApi = getGridInstanceCallback;\r\n                }\n\n\n                /*\n                 *  This function will check and return an array of columns for tree view\n                 */\n                var treeViewColumnsToBeCreated = function (colDefs) {\r\n                    return _.filter(colDefs, function (col) {\r\n                        return col.isTree;\r\n                    });\r\n                };\n\n                /*\n                 *  Sort grid data\n                 */\n                var sortData = function (data, key) {\r\n                    return data.slice(0).sort(function (a, b) {\r\n                        return (eval('a.' + key) > eval('b.' + key)) ? 1 : (eval('a.' + key) < eval('b.' + key)) ? -1 : 0;\r\n                    });\r\n                };\n\n                /*\n                 *  Assign tree view since it is required to create a tree view\n                 */\n                var assignTreeLevel = function (data, key) {\r\n                    var loopedItems = [];\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i].$$treeLevel = 0;\n                        if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                            data[i].$$treeLevel = 1;\r\n                        }\n                        if (eval('data[i].' + key).toString().indexOf('.') > -1) {\r\n                            var SplitLevelArr = eval('data[i].' + key).toString().split('.');\n                            data[i].$$treeLevel = SplitLevelArr.length - 1;\n                            if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                                data[i].$$treeLevel = parseInt(data[i].$$treeLevel) + 1;\r\n                            }\r\n                        }\n                        loopedItems.push(eval('data[i].' + key));\r\n                    }\n                    return data;\r\n                };\n\n                function getCellValue(row, col) {\r\n                    var data = gridInstance.grid.getCellDisplayValue(row, col);\n                    return data ? data.toString() : \"\";\r\n                };\n\n                function outerSearchCallback(rows, cols) {\r\n                    if (scope.searchTerm && typeof scope.searchTerm == 'string' && scope.searchTerm.length > 0) {\r\n                        _.each(rows, function (row, rowIndex) {\r\n                            var match = false;\n                            _.each(cols, function (col) {\r\n                                var cellValue = $filter('translate')(getCellValue(row, col));\n                                if (col.colDef.attributes && col.colDef.attributes.type && col.colDef.attributes.type.toLowerCase() == \"date\") {\r\n                                    var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\n                                    formattedDate = formattedDate.split('+');\n                                    formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\n                                    var month = formattedDate.getMonth() + 1 + '';\n                                    if (month.length === 1) {\r\n                                        month = 0 + '' + month;\r\n                                    }\n                                    formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\n                                    var decession = formattedDate.toLowerCase().trim().indexOf(escape(scope.searchTerm).replace(/%5C/g, '').trim()) > -1;\n                                    if (decession) {\r\n                                        match = true;\r\n                                    }\r\n                                }\n                                else if (cellValue.match(new RegExp(scope.searchTerm, \"i\"))) {\r\n                                    match = true;\r\n                                }\r\n                            });\n                            row.visible = match;\r\n                        });\r\n                    };\n                    return rows;\r\n                };\n\n                function onCheckboxSelect(row) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridCheckBoxDispatcher', {\r\n                            \"row\": row\r\n                        });\r\n                    }\r\n                }\n\n                //  this timeout prevents rows rendered callback being fired multiple times\n                var rowsRenderedTimeout;\n                function getGridInstanceCallback(instance) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('gridInstance', instance);\r\n                    }\n                    gridInstance = instance;\n                    if (typeof scope.api != undefined && scope.api != null && scope.api.rowSelectionCallback) {\r\n                        scope.gridConfig.isRowSelectable = scope.api.rowSelectionCallback;\n                        //gridInstance.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                    }\n                    gridInstance.grid.registerRowsProcessor(outerSearchCallback, 200);\n                    gridInstance.core.on.rowsRendered(scope, function (row) {\r\n                        if (rowsRenderedTimeout) {\r\n                            $timeout.cancel(rowsRenderedTimeout);\n                            rowsRenderedTimeout = undefined;\r\n                        }\n                        rowsRenderedTimeout = $timeout(function () {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridRowsRenderedDispatcher', {\r\n                                    \"row\": row\r\n                                });\r\n                            }\n                            setHeightForGrid();\n                            angular.isFunction(scope.onRenderingFinish) && scope.onRenderingFinish();\r\n                        }, 500);\r\n                    });\n\n\n                    gridInstance.selection.on.rowSelectionChanged(scope, onCheckboxSelect);\n                    gridInstance.cellNav.on.navigate(scope, function (newRowcol, oldRowCol) {\r\n                        if (newRowcol.col.colDef.isRegFocusCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridFocusColumnDispatcher', {\r\n                                    \"focusedRowColObj\": newRowcol,\r\n                                    \"bluredRowColObj\": oldRowCol,\r\n                                    \"instance\": gridInstance\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n                    gridInstance.edit.on.afterCellEdit(scope, function (rowEntity, colDef) {\n                        //if (colDef.isRegUpdateCol) {\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridUpdateColumnDispatcher', {\r\n                                \"rowModel\": rowEntity,\n                                \"colDef\": colDef,\n                                \"instance\": gridInstance\r\n                            });\r\n                        }\n                        // }\n                    });\n                    gridInstance.edit.on.beginCellEdit(scope, function (rowEntity, colDef) {\n                        //var focusedCell = gridInstance.cellNav.getFocusedCell();\n                        //if (!focusedCell.col.cellClass) {\n                        //    gridInstance.cellNav.scrollToFocus(rowEntity, colDef);\n                        //}\n\n                        switch (colDef.uiType) {\r\n                            case \"dropdown\":\n                                if (colDef.attributes.serviceObj && colDef.attributes.options.length == 0) {\r\n                                    getDataFolDropDown(colDef, rowEntity)\r\n                                } else {\r\n                                    colDef.attributes.options.map(function (x) { x[colDef.attributes.dataKey] = $filter('translate')(x[colDef.attributes.dataKey]) });\n                                    scope.dropDownOptions = colDef.attributes.options;\r\n                                }\n                                break;\r\n                        };\n\n                        if (colDef.isRegBeginEditCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridBeginEditColumnDispatcher', {\r\n                                    \"rowModel\": rowEntity,\n                                    \"colDef\": colDef\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n\n                    gridInstance.pagination.on.paginationChanged(scope, function (newPage, pageSize) {\n                        //alert(newPage+\"\");\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridDynamicPaginationCallback', {\r\n                                \"gridConfig\": scope.gridConfig,\n                                \"index\": newPage,\n                                \"pageSize\": pageSize\r\n                            });\r\n                        }\r\n                    });\r\n                };\n\n                function setHeightForGrid() {\r\n                    var rowCount = gridInstance.core.getVisibleRows(gridInstance.grid).length;\n                    var height;\n                    if (rowCount == 0) return;\n                    if (scope.gridConfig.rowHeight > 0) {\r\n                        height = ((rowCount + 1) * scope.gridConfig.rowHeight) + 54;\r\n                    } else {\r\n                        height = (rowCount * 35) + 54;\r\n                    }\n                    $($('.ui-grid')[0]).css({ 'width': '100%', 'height': height });\n                    $($('.ui-grid')[0]).find('ui-grid-header-canvas').css(\"width\", \"100%\");\n                    //gridInstance.core.handleWindowResize();\n                };\n\n\n                //*****************************************************autoSuggest bindings START*********************************************\n                scope.autoSuggestOptions = [];\n                scope.autoSuggestOnChange = function (e, col, row) {\r\n                    if (angular.isUndefined(e.data) || e.data.length == 0) {\r\n                        return;\r\n                    }\n                    callback('composedGridAutoSuggestChange', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": (e.data[0] !== undefined ? e.data[0].value : e.displayModel)\r\n                    });\r\n                    //logic to clear split entities autosuggest at grid level, needs to be handled further to make common for other autosuggests\r\n                 \r\n                    if (e.data[0].value == \"\")   {\r\n                        var obj = row.entity[col.colDef.field.split(\".\")[0]];\r\n                        var index;\r\n                        if (obj != null && obj != undefined && col.colDef.field.indexOf('split') >= 0) {\r\n                            if (row.entity.id > 0)\r\n                                index = _.findIndex(scope.model, { id: row.entity.id });\r\n                            else {\r\n                                _.each(scope.model, function (data, indexFound) {\r\n                                    if (_.isEqual(data, row.entity)) {\r\n                                        index = indexFound;\n                                        return;\r\n                                    }\r\n                                });\r\n                            }\n                            scope.model[index][col.colDef.field.split(\".\")[0]] = {\r\n                                \"entityType\": obj.entityType, \"fieldId\": obj.fieldId, \"splitEntityId\": obj.splitEntityId, \"code\": 0, \"entityCode\": null, \"name\": null, \"title\": null\r\n                            };\r\n                        }\r\n                    }\n\n                    var serviceObj = col.colDef.attributes.serviceObj;\n                    if (serviceObj != undefined) {\r\n                        var req = {\r\n                            type: serviceObj.method === \"POST\" ?\"POST\": \"GET\",\n                            url: serviceObj.url,\n                            params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value)),\n                            timeout: 120000,\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\n                                \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                            }\r\n                        };\n                        if (req.type === \"POST\")\r\n                        {\r\n                            req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value));\n                            delete req.params;\r\n                        }\n                        httpService.directhttp(req).then(function (response) {\r\n                            if (serviceObj.CallbackObj) {\r\n                                response = serviceObj.CallbackObj(response, col.colDef.name)\r\n                            }\n                            var resp = [];\n                            if (typeof response === \"string\")\n                                response = JSON.parse(response);\n                            if (serviceObj.isFlatArray) {\r\n                                _.each(response, function (x, index) {\r\n                                    var obj = {};\n                                    obj[\"name\"] = x;\n                                    obj[\"code\"] = x;\n                                    resp.push(obj);\r\n                                });\r\n                            }\n                            else {\r\n                                _.each(response, function (obj) {\r\n                                    var mapperObj = {};\n                                    _.each(serviceObj.mapper, function (mapper) {\r\n                                        var mapperstri = '';\n                                        if (angular.isArray(mapper['toBeMapped'])) {\r\n                                            _.each(mapper['toBeMapped'], function (res) {\r\n                                                mapperstri += obj[res] + \" \";\r\n                                            });\n                                            mapperstri.trim();\r\n                                        }\n                                        else\n                                            mapperstri = obj[mapper['toBeMapped']];\n\n                                        mapperObj[mapper['key']] = mapperstri;\r\n\n                                    });\n                                    _.each(serviceObj.staticValues, function (item) {\r\n                                        mapperObj[item['key']] = item['value'];\r\n                                    });\n                                    resp.push(mapperObj);\r\n                                });\r\n                            }\n                            scope.autoSuggestOptions = resp;\n\n                            //for item number and item description autosuggest\n                            if (serviceObj.responseRequired) {\r\n                                callback('composedGridParseItemMasterData', {\r\n                                    \"rowModel\": row,\n                                    \"colDef\": col,\n                                    \"response\": response,\n                                    \"value\": e.data[0].value\r\n                                });\r\n                            }\r\n                        }, function () {   /* Failure case here */ });\r\n                    }\n                    else {\r\n                        return;\r\n                    }\r\n\n                };\n                scope.autoSuggestOnSelect = function (event, autoSuggestModel, row, col) {\r\n                    autoSuggestModel = event.data;\n                    callback('composedGridSelectItemMasterData', {\r\n                        \"data\": autoSuggestModel,\n                        \"row\": row,\n                        \"col\": col,\r\n                        \"isModified\":true\r\n                    });\r\n                };\n                //*****************************************************autoSuggest bindings END***********************************************\n\n                //*****************************************************dropDOwn bindings START***********************************************\n                scope.isObject = function (val) {\r\n                    return typeof val == 'object';\r\n                }\n\n                scope.dropDownOnChange = function (row, col, val) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridDropDownOnSelectDispatcher', {\r\n                            \"row\": row,\n                            \"col\": col,\n                            \"val\": val\r\n                        });\r\n                    }\r\n                };\n\n                scope.dropDownOptions = [];\n                function getDataFolDropDown(col, row) {\r\n                    var serviceObj = col.attributes.serviceObj;\n                    var req = {\r\n                        method: \"GET\",\n                        url: serviceObj.url,\n                        params: serviceObj.param,\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\n                            \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                        }\r\n                    };\n                    httpService.directhttp(req).then(function (response) {\r\n                        if (typeof row[col.field] != 'object') {\r\n                            var resp = [];\n                            _.each(response, function (x, index) {\r\n                                var obj = {};\n                                obj[col.attributes.dataKey] = $filter('translate')(x);\n                                obj[col.attributes.idKey] = index;\n                                resp.push(obj);\r\n                            });\n                            col.attributes.options = resp;\r\n                        } else {\r\n                            col.attributes.options = response;\r\n                        }\n                        scope.dropDownOptions = col.attributes.options;\r\n                    }, function () {\r\n                    });\r\n                };\n                //*****************************************************dropDOwn bindings END***********************************************\n                //*****************************************************popup bindings START***********************************************\n\n\n                scope.popUpButtonClickCallback = function (row, col) {\n                    // segregate the splitpopup callback function based on config.js \n                    if (angular.isFunction(callback)) {\r\n                        if (col.colDef.isChargesGrid) {\r\n                            callback('composedChargesGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\n                        else {\r\n                            callback('composedGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\r\n                    }\r\n\n                };\n\n                //*****************************************************popup bindings END***********************************************\n\n                //*****************************************************checkBox bindings START***********************************************\n                scope.checkBoxOnChange = function (row, col, val) {\r\n                    callback('composedGridCheckBoxOnChangeDispatcher', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": val\r\n                    });\r\n                };\n                //*****************************************************checkBox bindings END***********************************************\n\n                //*****************************************************text & number keyup bindings START***********************************************\n                scope.textOrNumberKeyUp = function (e, col, row) {\r\n                    callback('composedGridTextKeyUp', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": e.target.value\r\n                    });\r\n                }\n                //*****************************************************text & number keyup bindings END***********************************************\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartUiGrid/smartUiGrid.html'\r\n        };\r\n    }]);\r\n})();\n(function () {\r\n    'use strict';\n    angular.module('SMART2').directive('smartUiTable', ['$timeout', '$filter', 'gridConfigProvider', 'APPCONSTANTS', 'httpService', 'uiGridConstants', '$injector',\n    function ($timeout, $filter, gridConfigProvider, APPCONSTANTS, httpService, uiGridConstants, $injector) {\r\n        return {\r\n            restrict: 'AE',\n            scope: {\r\n                colDef: '@',\n                model: '=',\n                callback: '&',\n                focusRowCol: '@',\n                validationService: '@',\n                searchTerm: '@',\n                otherGridOptions: '@',\n                api: '=',\n                onRenderingStart: '&',\n                onRenderingFinish: '&',\n                dynamicPaginationPageSizes: '=',\r\n                dynamicItemTotal: '='\r\n\n            },\n            link: function (scope, element, attr) {\r\n\n                var paginationOptions = {\r\n                    pageNumber: 1,\n                    pageSize: 12,\n                    sort: null\r\n                };\n\n                if (scope.validationService != undefined) {\r\n                    var service = $injector.get(scope.validationService);\n                    scope.$parent[scope.validationService] = service;\n                    scope.cellClassFunction = scope.validationService + \".validateGridRow\";\n                    scope.cellEditableConditionFunction = scope.validationService + \".isEditableGridRow\";\r\n                }\n                var gridInstance;\n                var defaultGridOptions = {\r\n                    paginationPageSizes: scope.dynamicPaginationPageSizes ? scope.dynamicPaginationPageSizes : [10, 25, 50, 75],\n                    paginationPageSize: scope.dynamicPaginationPageSizes && scope.dynamicPaginationPageSizes[0] ? scope.dynamicPaginationPageSizes[0] : 10,\n                    useExternalPagination: scope.dynamicPaginationCallback ? true : false,\n                    enableCellEditOnFocus: true,\n                    enableFiltering: true,\n                    enableVerticalScrollbar: uiGridConstants.scrollbars.NEVER,\n                    treeRowHeaderAlwaysVisible: false,\n                    showTreeExpandNoChildren: false,\r\n                    enableRowSelection: true\r\n                };\n                var callback = scope.$eval(scope.callback);\n                var cellClassFunction = scope.$parent.$eval(scope.cellClassFunction);\n                var cellEditableConditionFunction = scope.$parent.$eval(scope.cellEditableConditionFunction);\n\n                scope.gridConfig = defaultGridOptions;\n                var modifiedColDef;\n\n                if (scope.api) {\r\n                    scope.api.getActiveColumns = function () {\r\n                        return scope.gridConfig.columnDefs;\r\n                    };\r\n                }\n\n                scope.$watch('focusRowCol', function (n, o) {\r\n                    if(n){\r\n                        gridInstance.cellNav.scrollToFocus(n.row.entity,n.col.colDef)\r\n                    }\r\n                });\n\n                scope.$watch('scope.dynamicItemTotal', function (n, o) {\r\n                    scope.gridConfig.totalItems = scope.dynamicItemTotal;\r\n                });\n\n                scope.$watch('searchTerm', function (n, o) {\r\n                    if (n && typeof n == 'string') {\r\n                        gridInstance.grid.refresh();\r\n                    }\r\n                });\n\n                scope.$watch('colDef', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        modifiedColDef = gridConfigProvider.getMassagedGirdConfig(scope.$eval(n), scope, cellClassFunction, cellEditableConditionFunction);\n                        _.each(modifiedColDef, function (def, idx, defs) {\r\n                            if (def.customTreeAggregationFinalizerFn) {\r\n                                def.customTreeAggregationFinalizerFn = eval(\"(\" + def.customTreeAggregationFinalizerFn + \")\");\r\n                            }\n                            if (def.customTreeAggregationFn) {\r\n                                def.customTreeAggregationFn = eval(\"(\" + def.customTreeAggregationFn + \")\");\r\n                            }\r\n                        });\n                        scope.gridConfig.columnDefs = null;\n                        scope.gridConfig.columnDefs = modifiedColDef;\n\n                        var groupingCol = _.filter(scope.gridConfig.columnDefs, function (col) { return col.isGrouped;})\n                        if (groupingCol && groupingCol.length > 0 && gridInstance) {\r\n                            gridInstance.grouping.clearGrouping();\n                            _.each(groupingCol, function (col) {\r\n                                gridInstance.grouping.groupColumn(col.field);\r\n                            });\r\n                        }\r\n                    }\r\n                });\n\n                scope.$watch('otherGridOptions', function (n, o) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (scope.$eval(n)) {\r\n                        var modifiedOtherGridOptions = angular.merge({}, scope.gridConfig, scope.$eval(n));\n                        _.each(modifiedOtherGridOptions.appScopeProvider, function (prop, i, props) {\r\n                            modifiedOtherGridOptions.appScopeProvider[i] = eval(prop);\r\n                        });\n                        scope.gridConfig = null;\n                        scope.gridConfig = modifiedOtherGridOptions;\r\n                    }\r\n                });\n\n                scope.$watch('model', function (newModel) {\r\n                    angular.isFunction(scope.onRenderingStart) && scope.onRenderingStart();\n\n                    if (!newModel) {\r\n                        scope.gridConfig.data = [];\n                        return;\r\n                    }\n                    var treeColumns = treeViewColumnsToBeCreated(scope.gridConfig.columnDefs);\n                    if (treeColumns.length > 0) {\r\n                        scope.gridConfig = angular.extend(scope.gridConfig, {\r\n                            showTreeRowHeader: true,\n                            enableRowHeaderSelection: true, // Display checkboxes on every row when it's true\n                            showTreeExpandNoChildren: false\r\n                        });\n                        scope.gridConfig.data = assignTreeLevel($filter('orderBy')(newModel, treeColumns[0].field), treeColumns[0].field);\r\n                    }\n                    else {\r\n                        scope.gridConfig.data = newModel;\r\n                    }\r\n                });\n\n\n\n                if (!gridInstance) {\r\n                    scope.gridConfig.onRegister = getGridInstanceCallback;\r\n                }\n\n\n                /*\n                 *  This function will check and return an array of columns for tree view\n                 */\n                var treeViewColumnsToBeCreated = function (colDefs) {\r\n                    return _.filter(colDefs, function (col) {\r\n                        return col.isTree;\r\n                    });\r\n                };\n\n                /*\n                 *  Sort grid data\n                 */\n                var sortData = function (data, key) {\r\n                    return data.slice(0).sort(function (a, b) {\r\n                        return (eval('a.' + key) > eval('b.' + key)) ? 1 : (eval('a.' + key) < eval('b.' + key)) ? -1 : 0;\r\n                    });\r\n                };\n\n                /*\n                 *  Assign tree view since it is required to create a tree view\n                 */\n                var assignTreeLevel = function (data, key) {\r\n                    var loopedItems = [];\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i].$$treeLevel = 0;\n                        if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                            data[i].$$treeLevel = 1;\r\n                        }\n                        if (eval('data[i].' + key).toString().indexOf('.') > -1) {\r\n                            var SplitLevelArr = eval('data[i].' + key).toString().split('.');\n                            data[i].$$treeLevel = SplitLevelArr.length - 1;\n                            if (loopedItems.indexOf(eval('data[i].' + key)) > -1) {\r\n                                data[i].$$treeLevel = parseInt(data[i].$$treeLevel) + 1;\r\n                            }\r\n                        }\n                        loopedItems.push(eval('data[i].' + key));\r\n                    }\n                    return data;\r\n                };\n\n                function getCellValue(row, col) {\r\n                    var data = gridInstance.grid.getCellDisplayValue(row, col);\n                    return data ? data.toString() : \"\";\r\n                };\n\n                function outerSearchCallback(rows, cols) {\r\n                    if (scope.searchTerm && typeof scope.searchTerm == 'string' && scope.searchTerm.length > 0) {\r\n                        _.each(rows, function (row, rowIndex) {\r\n                            var match = false;\n                            _.each(cols, function (col) {\r\n                                var cellValue = $filter('translate')(getCellValue(row, col));\n                                if (col.colDef.attributes && col.colDef.attributes.type && col.colDef.attributes.type.toLowerCase() == \"date\") {\r\n                                    var formattedDate = (cellValue).replace(new RegExp(\"/\", \"ig\"), '');\n                                    formattedDate = formattedDate.split('+');\n                                    formattedDate = eval('new ' + formattedDate[0] + (formattedDate.length > 1 ? ')' : ''));\n                                    var month = formattedDate.getMonth() + 1 + '';\n                                    if (month.length === 1) {\r\n                                        month = 0 + '' + month;\r\n                                    }\n                                    formattedDate = formattedDate.getDate() + '/' + month + '/' + formattedDate.getFullYear();\n                                    var decession = formattedDate.toLowerCase().trim().indexOf(escape(scope.searchTerm).replace(/%5C/g, '').trim()) > -1;\n                                    if (decession) {\r\n                                        match = true;\r\n                                    }\r\n                                }\n                                else if (cellValue.match(new RegExp(scope.searchTerm, \"i\"))) {\r\n                                    match = true;\r\n                                }\r\n                            });\n                            row.visible = match;\r\n                        });\r\n                    };\n                    return rows;\r\n                };\n\n                function onCheckboxSelect(row) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridCheckBoxDispatcher', {\r\n                            \"row\": row\r\n                        });\r\n                    }\r\n                }\n\n                //  this timeout prevents rows rendered callback being fired multiple times\n                var rowsRenderedTimeout;\n                function getGridInstanceCallback(instance) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('gridInstance', instance);\r\n                    }\n                    gridInstance = instance;\n                    if (typeof scope.api != undefined && scope.api != null && scope.api.rowSelectionCallback) {\r\n                        scope.gridConfig.isRowSelectable = scope.api.rowSelectionCallback;\n                        //gridInstance.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);\n                    }\n                    //gridInstance.grid.registerRowsProcessor(outerSearchCallback, 200);\n                    //gridInstance.core.on.rowsRendered(scope, function (row) {\r\n                    //    if (rowsRenderedTimeout) {\r\n                    //        $timeout.cancel(rowsRenderedTimeout);\n                    //        rowsRenderedTimeout = undefined;\r\n                    //    }\n                    //    rowsRenderedTimeout = $timeout(function () {\r\n                    //        if (angular.isFunction(callback)) {\r\n                    //            callback('composedGridRowsRenderedDispatcher', {\r\n                    //                \"row\": row\r\n                    //            });\r\n                    //        }\n                    //        setHeightForGrid();\n                    //        angular.isFunction(scope.onRenderingFinish) && scope.onRenderingFinish();\r\n                    //    }, 500);\r\n                    //});\n\n\n                    gridInstance.selection.on.rowSelectionChanged(scope, onCheckboxSelect);\n                    //gridInstance.cellNav.on.navigate(scope, function (newRowcol, oldRowCol) {\r\n                    //    if (newRowcol.col.colDef.isRegFocusCol) {\r\n                    //        if (angular.isFunction(callback)) {\r\n                    //            callback('composedGridFocusColumnDispatcher', {\r\n                    //                \"focusedRowColObj\": newRowcol,\n                    //                \"bluredRowColObj\": oldRowCol\r\n                    //            });\r\n                    //        }\r\n                    //    }\r\n                    //});\n                    gridInstance.edit.on.afterCellEdit(scope, function (rowEntity, colDef) {\n                        //if (colDef.isRegUpdateCol) {\n                        if (angular.isFunction(callback)) {\r\n                            callback('composedGridUpdateColumnDispatcher', {\r\n                                \"rowModel\": rowEntity,\n                                \"colDef\": colDef,\n                                \"instance\": gridInstance\r\n                            });\r\n                        }\n                        // }\n                    });\n                    gridInstance.edit.on.beginCellEdit(scope, function (rowEntity, colDef) {\n                        //var focusedCell = gridInstance.cellNav.getFocusedCell();\n                        //if (!focusedCell.col.cellClass) {\n                        //    gridInstance.cellNav.scrollToFocus(rowEntity, colDef);\n                        //}\n\n                        switch (colDef.uiType) {\r\n                            case \"dropdown\":\n                                if (colDef.attributes.serviceObj && colDef.attributes.options.length == 0) {\r\n                                    getDataFolDropDown(colDef, rowEntity)\r\n                                } else {\r\n                                    colDef.attributes.options.map(function (x) { x[colDef.attributes.dataKey] = $filter('translate')(x[colDef.attributes.dataKey]) });\n                                    scope.dropDownOptions = colDef.attributes.options;\r\n                                }\n                                break;\r\n                        };\n\n                        if (colDef.isRegBeginEditCol) {\r\n                            if (angular.isFunction(callback)) {\r\n                                callback('composedGridBeginEditColumnDispatcher', {\r\n                                    \"rowModel\": rowEntity,\n                                    \"colDef\": colDef\r\n                                });\r\n                            }\r\n                        }\r\n                    });\n\n                    \n                    gridInstance.cell.on.click(scope, function (row, col) {\r\n                        callback('smartTableClick', {\r\n                            row: row,\n                            col: col\r\n                        });\n                    });\n\n                    //gridInstance.pagination.on.paginationChanged(scope, function (newPage, pageSize) {\n                    //    //alert(newPage+\"\");\n                    //    if (angular.isFunction(callback)) {\r\n                    //        callback('composedGridDynamicPaginationCallback', {\r\n                    //            \"gridConfig\": scope.gridConfig,\n                    //            \"index\": newPage,\n                    //            \"pageSize\": pageSize\r\n                    //        });\r\n                    //    }\r\n                    //});\r\n                };\n\n                function setHeightForGrid() {\r\n                    var rowCount = gridInstance.core.getVisibleRows(gridInstance.grid).length;\n                    var height;\n                    if (rowCount == 0) return;\n                    if (scope.gridConfig.rowHeight > 0) {\r\n                        height = ((rowCount + 1) * scope.gridConfig.rowHeight) + 54;\r\n                    } else {\r\n                        height = (rowCount * 35) + 54;\r\n                    }\n                    $($('.ui-grid')[0]).css({ 'width': '100%', 'height': height });\n                    $($('.ui-grid')[0]).find('ui-grid-header-canvas').css(\"width\", \"100%\");\n                    //gridInstance.core.handleWindowResize();\n                };\n\n\n                //*****************************************************autoSuggest bindings START*********************************************\n                scope.autoSuggestOptions = [];\n                scope.autoSuggestOnChange = function (e, col, row) {\r\n                    if (angular.isUndefined(e.data) || e.data.length == 0) {\r\n                        return;\r\n                    }\n                    callback('composedGridAutoSuggestChange', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": (e.data[0] !== undefined ? e.data[0].value : e.displayModel)\r\n                    });\n                    //logic to clear split entities autosuggest at grid level, needs to be handled further to make common for other autosuggests\n                    if (e.data[0].value == \"\")\r\n                    {\r\n                        var obj = row.entity[col.colDef.field.split(\".\")[0]];\n                        var index;\n                        if (obj != null && obj != undefined && col.colDef.field.indexOf('split') >= 0)\r\n                        {\r\n                            if (row.entity.id > 0)\n                                index = _.findIndex(scope.model, { id: row.entity.id });\n                            else\r\n                            {\r\n                                _.each(scope.model, function (data, indexFound) {\r\n                                    if (_.isEqual(data, row.entity)) {\r\n                                        index = indexFound;\n                                        return;\r\n                                    }\r\n                                });\r\n                            }\n                            scope.model[index][col.colDef.field.split(\".\")[0]] = {\r\n                                \"entityType\": obj.entityType, \"fieldId\": obj.fieldId, \"splitEntityId\": obj.splitEntityId, \"code\": 0, \"entityCode\": null, \"name\": null, \"title\": null\r\n                            };\r\n                        }\r\n                    }\n\n                    var serviceObj = col.colDef.attributes.serviceObj;\n                    if (serviceObj != undefined) {\r\n                        var req = {\r\n                            type: serviceObj.method === \"POST\" ?\"POST\": \"GET\",\n                            url: serviceObj.url,\n                            params: JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value)),\n                            timeout: 120000,\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\n                                \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                            }\r\n                        };\n                        if (req.type === \"POST\")\r\n                        {\r\n                            req.data = JSON.parse(JSON.stringify(serviceObj.param).replace(\"@term\", e.data[0].value));\n                            delete req.params;\r\n                        }\n                        httpService.directhttp(req).then(function (response) {\r\n                            if (serviceObj.CallbackObj) {\r\n                                response = serviceObj.CallbackObj(response, col.colDef.name)\r\n                            }\n                            var resp = [];\n                            if (typeof response === \"string\")\n                                response = JSON.parse(response);\n                            if (serviceObj.isFlatArray) {\r\n                                _.each(response, function (x, index) {\r\n                                    var obj = {};\n                                    obj[\"name\"] = x;\n                                    obj[\"code\"] = x;\n                                    resp.push(obj);\r\n                                });\r\n                            }\n                            else {\r\n                                _.each(response, function (obj) {\r\n                                    var mapperObj = {};\n                                    _.each(serviceObj.mapper, function (mapper) {\r\n                                        var mapperstri = '';\n                                        if (angular.isArray(mapper['toBeMapped'])) {\r\n                                            _.each(mapper['toBeMapped'], function (res) {\r\n                                                mapperstri += obj[res] + \" \";\r\n                                            });\n                                            mapperstri.trim();\r\n                                        }\n                                        else\n                                            mapperstri = obj[mapper['toBeMapped']];\n\n                                        mapperObj[mapper['key']] = mapperstri;\r\n\n                                    });\n                                    _.each(serviceObj.staticValues, function (item) {\r\n                                        mapperObj[item['key']] = item['value'];\r\n                                    });\n                                    resp.push(mapperObj);\r\n                                });\r\n                            }\n                            scope.autoSuggestOptions = resp;\n\n                            //for item number and item description autosuggest\n                            if (serviceObj.responseRequired) {\r\n                                callback('composedGridParseItemMasterData', {\r\n                                    \"rowModel\": row,\n                                    \"colDef\": col,\n                                    \"response\": response,\n                                    \"value\": e.data[0].value\r\n                                });\r\n                            }\r\n                        }, function () {   /* Failure case here */ });\r\n                    }\n                    else {\r\n                        return;\r\n                    }\r\n\n                };\n                scope.autoSuggestOnSelect = function (event, autoSuggestModel, row, col) {\r\n                    autoSuggestModel = event.data;\n                    callback('composedGridSelectItemMasterData', {\r\n                        \"data\": autoSuggestModel,\n                        \"row\": row,\n                        \"col\": col,\r\n                        \"isModified\":true\r\n                    });\r\n                };\n                //*****************************************************autoSuggest bindings END***********************************************\n\n                //*****************************************************dropDOwn bindings START***********************************************\n                scope.isObject = function (val) {\r\n                    return typeof val == 'object';\r\n                }\n\n                scope.dropDownOnChange = function (row, col, val) {\r\n                    if (angular.isFunction(callback)) {\r\n                        callback('composedGridDropDownOnSelectDispatcher', {\r\n                            \"row\": row,\n                            \"col\": col,\n                            \"val\": val\r\n                        });\r\n                    }\r\n                };\n\n                scope.dropDownOptions = [];\n                function getDataFolDropDown(col, row) {\r\n                    var serviceObj = col.attributes.serviceObj;\n                    var req = {\r\n                        method: \"GET\",\n                        url: serviceObj.url,\n                        params: serviceObj.param,\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\n                            \"UserExecutionContext\": JSON.stringify(APPCONSTANTS.userPreferences.UserBasicDetails)\r\n                        }\r\n                    };\n                    httpService.directhttp(req).then(function (response) {\r\n                        if (typeof row[col.field] != 'object') {\r\n                            var resp = [];\n                            _.each(response, function (x, index) {\r\n                                var obj = {};\n                                obj[col.attributes.dataKey] = $filter('translate')(x);\n                                obj[col.attributes.idKey] = index;\n                                resp.push(obj);\r\n                            });\n                            col.attributes.options = resp;\r\n                        } else {\r\n                            col.attributes.options = response;\r\n                        }\n                        scope.dropDownOptions = col.attributes.options;\r\n                    }, function () {\r\n                    });\r\n                };\n                //*****************************************************dropDOwn bindings END***********************************************\n                //*****************************************************popup bindings START***********************************************\n\n\n                scope.popUpButtonClickCallback = function (row, col) {\n                    // segregate the splitpopup callback function based on config.js \n                    if (angular.isFunction(callback)) {\r\n                        if (col.colDef.isChargesGrid) {\r\n                            callback('composedChargesGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\n                        else {\r\n                            callback('composedGridPopupButtonClickDispatcher', {\r\n                                \"row\": row,\n                                \"col\": col\r\n                            });\r\n                        }\r\n                    }\r\n\n                };\n\n                //*****************************************************popup bindings END***********************************************\n\n                //*****************************************************checkBox bindings START***********************************************\n                scope.checkBoxOnChange = function (row, col, val) {\r\n                    callback('composedGridCheckBoxOnChangeDispatcher', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": val\r\n                    });\r\n                };\n                //*****************************************************checkBox bindings END***********************************************\n\n                //*****************************************************text & number keyup bindings START***********************************************\n                scope.textOrNumberKeyUp = function (e, col, row) {\r\n                    callback('composedGridTextKeyUp', {\r\n                        \"row\": row,\n                        \"col\": col,\n                        \"val\": e.target.value\r\n                    });\r\n                }\n                //*****************************************************text & number keyup bindings END***********************************************\n\n            },\n            templateUrl: 'shared/directives/uiElements/smartUiTable/smartUiTable.html'\r\n        };\r\n    }]);\r\n})();\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').service('trackStatusService', ['$http', '$q', function ($http, $q) {\r\n        var self = this;\r\n        // Watch the change of main object\r\n        self.statusDataChange = { 'dataChange': '' };\r\n        self.legendChange = {'dataChange' : ''};\r\n        self.dataChange = function () {\r\n            self.statusDataChange['dataChange'] = new Date().getTime();\r\n        }\r\n        self.getChange = function () {\r\n            return self.statusDataChange['dataChange'];\r\n        }\r\n        self.legendChange = function () {\r\n            self.legendChange['dataChange'] = new Date().getTime();\r\n        }\r\n        self.getLegendChange = function () {\r\n            return self.legendChange['dataChange'];\r\n        }\r\n    }]);\r\n})(angular);\r\n\r\n(function (angular) {\r\n    'use strict';\r\n    angular.module('SMART2').directive('smartTrackStatus', ['trackStatusService', '$filter', '$translate',\r\n        function (trackStatusService, $filter, $translate) {\r\n        \r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            scope: {\r\n                data: \"=trackstatusData\",\r\n                onTabChange: \"=onTabChange\",\r\n                cycleChange: \"=onCycleChange\",\r\n                statusLegend: \"=statusLegend\",\r\n                approverLegend: \"=approverLegend\",\r\n                fileDownloadCallback: \"=fileDownloadCallback\",\r\n                scrollToStatus: \"=scrollToStatus\",\r\n                downloadAllAttachment : \"=downloadAllAttachment\"\r\n            },\r\n            templateUrl: 'shared/directives/uiElements/trackStatus/popupNewTrackStatus.html',\r\n            link: function (scope, elem, attr) {\r\n                scope.trackStatusService = trackStatusService;\r\n\t\t        \r\n                // translate the static labels\r\n                scope.headerLable = $translate.instant('TRACK_STATUS'); // header\r\n                scope.tsDocName = $translate.instant('TRACK_STATUS_DOC_NAME');\r\n                //scope.tsCreatedOn = $translate.instant('CREATED_ON');\r\n                scope.tsCreatedOn = attr.trackStatusType === 'milestone' ? $translate.instant('ACHIEVED_ON') : $translate.instant('CREATED_ON');\r\n                scope.tsCurrStatus = $translate.instant('CURRENT_STATUS');\r\n                scope.labelOn = $translate.instant('ON');\r\n                scope.legend = $translate.instant('Legend');\r\n                scope.by = $translate.instant('By');\r\n                scope.defContentCommentLen = 60; // 60 chars to be displayed in case of longer comments.\r\n                \r\n                // HTML page map for tabs\r\n                var htmlForDetail = 'shared/directives/uiElements/trackStatus/trackStatusDetail.html';\r\n                var dateFormat;\r\n                //if (typeof RegionalSettingEnable != \"undefined\" && RegionalSettingEnable) {\r\n                //    dateFormat = moment.localeData().longDateFormat('L');\r\n                //} else\r\n                if (attr.dateFormat && attr.dateFormat != '') {\r\n                    dateFormat = attr.dateFormat;\r\n                } else {\r\n                    dateFormat = 'DD/MM/YYYY';\r\n                }\r\n                // Utility methods\r\n                scope.getDate = function (date) {\r\n                    //return $filter('date')(date, dateFormat);\r\n                    return moment(parseInt(date)).format(dateFormat);\r\n                }\r\n                function dataChanged(a_data) {\r\n                    scope.data = a_data;\r\n                }\r\n                function statusListData(a_data) {\r\n                    scope.statusLists = a_data.datailedData;\r\n                }\r\n                scope.tabClicked = function (e) {\r\n                    scope.onTabChange(e);\r\n                }\r\n                scope.changeCycle = function (model) {\r\n                    scope.cycleChange(model);\r\n                }\r\n                //statusListData(scope.data);\r\n                // To update cycles\r\n                scope.cycleObject = [];\r\n                function selectCycle(a_data) {\r\n                    var cycles = a_data.cycles,\r\n                        len = cycles.length;\r\n                    scope.cycleObject = cycles;\r\n                    for(var indx = 0; indx < len; indx++) {\r\n                        if (cycles[indx].selected === true) {\r\n                            scope.selectedCycle = cycles[indx];\r\n                        }\r\n                    }\r\n                }\r\n                //selectCycle(scope.data);\r\n\r\n                // update tabs\r\n                scope.trackStatusTabs = [];\r\n                function updateTabs(a_data) {\r\n                    var tabs = a_data.trackStatusTabs,\r\n                        len = tabs.length;\r\n                    for (var t = 0; t < len; t++) {\r\n                        var tobj = tabs[t];\r\n                        if (tobj.active === true) {\r\n                            tobj.contentUrl = htmlForDetail;\r\n                        }\r\n                    }\r\n                    scope.trackStatusTabs = tabs;\r\n                }\r\n                //updateTabs(scope.data);\r\n                \r\n                // update doc name, created on and by, doc curr status\r\n                function updateHeaderData(a_data) {\r\n                    scope.headerSecData = a_data;\r\n                    scope.headerSecData.Comments.date = scope.getDate(a_data.Comments.date);\r\n                    scope.docCreatedOn = scope.getDate(a_data.createdOn);\r\n                }\r\n                //updateHeaderData(scope.data.projectStatus);\r\n\r\n                // check if comment exists\r\n                scope.hasComments = function (a_comment) {\r\n                    var flag = (a_comment !== \"\" && a_comment) ? true : false;\r\n                    return flag;\r\n                }\r\n                // show more less comments\r\n                scope.showLess = {};\r\n                scope.showMore = {};\r\n                scope.showMoreLess = function (id, arg) {\r\n                    if(arg === \"less\") {\r\n                        scope.showMore[id] = true;\r\n                        scope.showLess[id] = false;\r\n                    } else if (arg === \"more\") {\r\n                        scope.showLess[id] = true;\r\n                        scope.showMore[id] = false;\r\n                    }\r\n                }\r\n                // init show more\r\n                scope.showMoreComment = {};\r\n                scope.initShowModel = function (id) {\r\n                    scope.showMore[id] = true;\r\n                    scope.showLess[id] = false;\r\n                }\r\n                // Watch for any update in data change\r\n                scope.$watch('trackStatusService.getChange()', function (newVal, oldVal) {\r\n                    if (newVal !== oldVal && newVal) {\r\n                        // Data changed\r\n                        //dataChanged(scope.data);\r\n                        statusListData(scope.data);\r\n                        selectCycle(scope.data);\r\n                        updateTabs(scope.data);\r\n                        updateHeaderData(scope.data.projectStatus);\r\n                        addUniqueId();\r\n                        setTimeout(function () {\r\n                            scrollToLatestStatus();\r\n                        }, 1000);\r\n                    }\r\n\r\n                });\r\n                // Get string to be displayed for comments\r\n                scope.getString = function (a_str, a_count) {\r\n                    var strLen = a_str.length,\r\n                        str = \"\";\r\n                    if(strLen > a_count) {\r\n                        str = a_str.substr(0, a_count) +'...';\r\n                    } else {\r\n                        str = a_str.substr(0, a_count);\r\n                    }\r\n                        \r\n                    return str;\r\n                }\r\n                scope.applyStatusColor = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'approved':\r\n                        case 'accepted':\r\n                        case 'approval':\r\n                        case 'auto_approved':\r\n                            return 'color-approved';\r\n                            break;\r\n                        case 'approval pending':\r\n                        case 'delegated':\r\n                        case 'withdrawn':\r\n                        case 'approval withdrawn':\r\n                        case 'withdraw':\r\n                        case 'approval withdraw':\r\n                            return 'color-approved-pending';\r\n                            break;\r\n                        case 'rejected':\r\n                            return 'color-rejected';\r\n                            break;\r\n                        case 'pending':\r\n                            return 'color-approved-pending';\r\n                            break;\r\n                        case 'budget overriden':\r\n                            return 'color-bud-overrid';\r\n                        default:\r\n                            return 'grey-text';\r\n                    }\r\n                };\r\n                scope.IconStatus = function (ele) {\r\n                    var iconMap = {\r\n                        'pending': '',\r\n                        'approval': '',\r\n                        'rejected': '',\r\n                        'accepted': '',\r\n                        'approved': '',\r\n                        'auto_approved': '',\r\n                        'approval pending': '',\r\n                        'approval withdrawn': '',\r\n                        'withdrawn': '',\r\n                        'approval withdraw': '',\r\n                        'withdraw': ''\r\n                    }\r\n                    if (ele && iconMap.hasOwnProperty([ele.toLowerCase()])) {\r\n                        return '#icon_TSHexOutlin';\r\n                    } else {\r\n                        return '#icon_Info_i';\r\n                    }\r\n                };\r\n                scope.InnerIconStatus = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'pending':\r\n                        case 'approval pending' : \r\n                            return '#icon_TSPending';\r\n                            break;\r\n                        case 'approval':\r\n                        case 'accepted':\r\n                        case 'approved':\r\n                            return '#icon_TSAccepted';\r\n                            break;\r\n                        case 'rejected':\r\n                            return '#icon_TSRejected';\r\n                            break;\r\n                        case 'auto_approved':\r\n                            return '#Icon_AppAuto';\r\n                            break;\r\n                        case 'approval withdrawn':\r\n                        case 'withdrawn':\r\n                        case 'approval withdraw':\r\n                        case 'withdraw':\r\n                            return 'icon_TSWithdrawn';\r\n                            break;\r\n                        default:\r\n                            return '#icon_Info';\r\n                    }\r\n                };\r\n\r\n                // Currently not being used\r\n                scope.approvalGroupType = function (ele) {\r\n                    switch (ele.toLowerCase()) {\r\n                        case 'pool approval':\r\n                            return 'a-g-pool-approval';\r\n                            break;\r\n                        case 'parallel approval':\r\n                            return 'a-g-parallel-approval';\r\n                            break;\r\n                        case 'hr approval':\r\n                            return 'a-g-HR-approval';\r\n                            break;\r\n                        case 'group approval':\r\n                            return 'a-g-group-approval';\r\n                            break;\r\n                        default:\r\n                            return false;\r\n                    }\r\n                };\r\n                scope.slideDetailsTS = function (id) {\r\n                    var detailDataCopy = scope.data.datailedData,\r\n                        len = detailDataCopy.length;\r\n                    for (var indx = 0; indx < len; indx++) {\r\n                        if (detailDataCopy[indx].uniqueId === id) {\r\n                            detailDataCopy[indx].isDetailShow = !detailDataCopy[indx].isDetailShow;\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t\tscope.changeScreenSize = function (e) {\r\n\t\t\t\t\tscope.isFullscreen = !scope.isFullscreen;\r\n\t\t\t\t}\r\n\r\n                // add unique id to each actioner items\r\n                function addUniqueId() {\r\n                    var pItems = scope.data.datailedData,\r\n                        pLen = pItems.length;\r\n                    for (var indx = 0 ; indx < pLen; indx++) {\r\n                        var cArr = pItems[indx].actionerDetails,\r\n                            cLen = cArr.length;\r\n                        for (var c = 0; c < cLen; c++) {\r\n                            cArr[c].uniqueId = c +'-'+ uniqueIDGenerator();\r\n                        }\r\n                        pItems[indx].uniqueId = \"details\" + uniqueIDGenerator() + '-' + indx;\r\n                    }\r\n                }\r\n                addUniqueId();\r\n                // Unique id generator\r\n                function uniqueIDGenerator() {\r\n                    var d = new Date().getTime();\r\n                    var uniqueID = 'xxx2xxxpxxxoxxx'.replace(/[xy]/g, function (c) {\r\n                        var r = (d + Math.random() * 16) % 16 | 0;\r\n                        d = Math.floor(d / 16);\r\n                        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n                    });\r\n                    return uniqueID;\r\n                };\r\n\r\n                // Watch the legend change\r\n                scope.$watch('trackStatusService.getLegendChange()', function (newVal, oldVal) {\r\n                    if (newVal !== oldVal && newVal) {\r\n                        displayLegend(); // if legend changed\r\n                    }\r\n\r\n                });\r\n                // Approver legend\r\n                var defApproverLegend = [\r\n        \t        {\r\n        \t            \"icon\": \"#icon_AppOne\",\r\n        \t            \"color\": \"color-approved-pending\",\r\n        \t            \"text\": $translate.instant(\"POOL_APP_ATLEAST_ONE\")\r\n        \t        },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppAll\",\r\n\t                    \"color\": \"color-approved-pending\",\r\n\t                    \"text\": $translate.instant(\"PARALLEL_APPROVAL_FORALL\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppSingle\",\r\n\t                    \"color\": \"color-approved-pending\",\r\n\t                    \"text\": $translate.instant(\"INDIVIDUAL_MUST_APPROVE\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#Icon_AppAuto\",\r\n\t                    \"color\": \"color-approved\",\r\n\t                    \"text\": $translate.instant(\"AUTO_SYSTEM_APPROVE\")\r\n\t                },\r\n\t                {\r\n\t                    \"icon\": \"#icon_AppHoc\",\r\n\t                    \"color\": \"color-add-Hoc\",\r\n\t                    \"text\": $translate.instant(\"ADHOC_APPROVER\")\r\n\t                }\r\n                ];\r\n                var defStatusLegend = [\r\n                        {\r\n                            \"icon\": \"#icon_TSAccepted\",\r\n                            \"color\": \"color-approved\",\r\n                            \"text\": $translate.instant(\"APPROVED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSRejected\",\r\n                            \"color\": \"color-rejected\",\r\n                            \"text\": $translate.instant(\"REJECTED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPartialAc\",\r\n                            \"color\": \"color-approved\",\r\n                            \"text\": $translate.instant(\"PARTIALLY_APPROVED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPartialRe\",\r\n                            \"color\": \"color-rejected\",\r\n                            \"text\": $translate.instant(\"PARTIALLY_REJECTED\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSPending\",\r\n                            \"color\": \"color-approved-pending\",\r\n                            \"text\": $translate.instant(\"PENDING\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_TSWithdrawn\",\r\n                            \"color\": \"color-approved-pending\",\r\n                            \"text\": $translate.instant(\"Approval Withdrawn\")\r\n                        },\r\n                        {\r\n                            \"icon\": \"#icon_Info_i\",\r\n                            \"color\": \"grey-text\",\r\n                            \"text\": $translate.instant(\"INFORMATION\")\r\n                        }\r\n\r\n                ];\r\n                function displayLegend() {\r\n                    var statusLegend = (scope.statusLegend) ? scope.statusLegend : false; // status legend\r\n                    var approverLegend = (scope.approverLegend) ? scope.approverLegend : false;// approver legend\r\n                    scope.approverLegend = (!approverLegend) ? defApproverLegend : scope.approverLegend;                    \r\n                    scope.statusLegend = (!statusLegend) ? defStatusLegend : statusLegend;\r\n                };\r\n                displayLegend(); // will execute on load case\r\n                scope.isFullscreen = false; // default not full screen\r\n\t\t\t\tscope.changeScreenSize = function (e) {\r\n\t\t\t\t    scope.isFullscreen = !scope.isFullscreen;\r\n\t\t\t\t    if (scope.isFullscreen) {\r\n\t\t\t\t        scope.defContentCommentLen = 95;\r\n\t\t\t\t    } else {\r\n\t\t\t\t        scope.defContentCommentLen = 60;\r\n\t\t\t\t    }\r\n\t\t\t\t    return;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n                // set scroll to latest status\r\n\t\t\t\tattr.$observe('focusLatest', function (newVal) {\r\n\t\t\t\t    if (newVal == \"true\") {\r\n\t\t\t\t        setTimeout(function () {\r\n\t\t\t\t            scrollToLatestStatus();\r\n\t\t\t\t        }, 200);\r\n\t\t\t\t        \r\n\t\t\t\t    } else {\r\n\t\t\t\t        //$('.scrollbar-outer').animate({ scrollTop: 0}, \"slow\");\r\n\t\t\t\t    }\r\n\t\t\t\t});\r\n\r\n                // Set z-index and position relative for tabs to pass content within shadow\r\n\t\t\t\tfunction setTabCss() {\r\n\t\t\t\t    var tabDiv = $('#trackStatusTabId').children(\":first\");\r\n\t\t\t\t    if (tabDiv.hasClass('borderBtmGray')) {\r\n\t\t\t\t        tabDiv.css({\r\n\t\t\t\t            'z-index': 2,\r\n\t\t\t\t            'position': 'relative'\r\n\t\t\t\t        });\r\n\t\t\t\t    }\r\n\t\t\t\t    \r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction scrollToLatestStatus() {\r\n\t\t\t\t    var idToSetScroll = \"\",\r\n                        $target = \"\",\r\n                        len = scope.data.datailedData.length,\r\n                        scrollIndex = (scope.scrollToStatus && scope.scrollToStatus != \"\") ? Number(scope.scrollToStatus) : (len - 1),\r\n\t\t\t\t        uniqueid = scope.data.datailedData[scrollIndex].uniqueId;// get the last element id and set the scroll\r\n\r\n\t\t\t\t    setTabCss();\r\n\t\t\t\t    \r\n\t\t\t\t    $target = $('[uniqueid=' + uniqueid + ']');\r\n\t\t\t\t    var scrollPosition = $('#scroll-8').scrollTop() + $target.parent().position().top;\r\n\t\t\t\t    $('.scrollbar-outer').animate({ scrollTop: scrollPosition }, \"slow\", 'swing');\r\n\t\t\t\t    return false;\r\n\t\t\t\t}\r\n            }\r\n            ,\r\n            controller: ['$scope', function ($scope) {\r\n                this.getFDownloadCallback = function () {\r\n                    return $scope.fileDownloadCallback;\r\n                },\r\n                this.getDownloadAllAttchment = function () {\r\n                    return $scope.downloadAllAttachment;\r\n                }\r\n            }]\r\n        }\r\n        }])\r\n\r\n        // To show attachments attached and downaloadable\r\n    .directive('attachmentsCallout', ['$timeout', function ($timeout) {\r\n        return {\r\n            restrict : 'EA',\r\n            scope: {\r\n                attachments: '=attachments',\r\n                identifier: '=identifier',\r\n                id: '=id'\r\n            },\r\n            require: '^smartTrackStatus',\r\n            templateUrl: 'shared/directives/uiElements/trackStatus/attachmentsDownload.html',\r\n            link: function (scope, elem, attr, cntrl) {\r\n                scope.downloadFile = cntrl.getFDownloadCallback();\r\n                scope.showDownloadAllAttachment = cntrl.getDownloadAllAttchment();\r\n                scope.filedownload = function (a_data) {\r\n                    scope.downloadFile(a_data);\r\n                }\r\n            }\r\n        }\r\n    }]);\r\n})(angular);\n(function() {\r\n\r\n    /*\r\n     *  Prevent document's default scroll behaviour on space\r\n     */\r\n    window.onkeydown = function(e) {\r\n        if (e.keyCode == 32 && $(e.target).hasClass('ui-grid-focuser')) {\r\n            e.preventDefault();\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n    angular.module('SMART2')\r\n        .directive(\"uigridCompatible\", ['uiGridConstants', 'uiGridEditConstants', '$rootScope', uigridCompatibleFunc]);\r\n\r\n    function uigridCompatibleFunc(uiGridConstants, uiGridEditConstants, $rootScope) {\r\n        return {\r\n            require: ['?^uiGrid', '?^uiGridRenderContainer'],\r\n            restrict: 'A',\r\n            link: function(scope, element, attrs, controllers) {\r\n                var uiGridCtrl = controllers[0];\r\n                var renderContainerCtrl = controllers[1];\r\n\r\n                var isFocused = false;\r\n                var isSelectElement = false;\r\n\r\n                /*\r\n                 *  Remove previous cell scope if any\r\n                 */\r\n                if (window.lastRenderedElementScope) {\r\n                    try {\r\n                        window.lastRenderedElementScope.stopEdit();\r\n                        window.lastRenderedElementScope = undefined;\r\n                    }\r\n                    catch (e) { }\r\n                }\r\n\r\n                window.lastRenderedElementScope = scope;\r\n\r\n                /*\r\n                 *  On popup close listener\r\n                 */\r\n                var onPopupClosed = $rootScope.$on(\"popupClosed\", function () {\r\n                    uiGridCtrl.focus();\r\n                });\r\n\r\n                /*\r\n                *  On date component close listener\r\n                */\r\n                var onDatePopupClosed = $rootScope.$on(\"closedPopup\", function () {\r\n                    uiGridCtrl.focus();\r\n                });\r\n\r\n                /*\r\n                 *  On popup open listener\r\n                 */\r\n                var onPopupOpened = $rootScope.$on(\"popupOpened\", function () {\r\n                    document.activeElement.blur();\r\n                });\r\n\r\n                /*\r\n                 *  Viewport keydown broadcast listener\r\n                 */\r\n                var onViewPortKeyDown = uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown(scope, function (e, rowCol) {\r\n                    var inputText = element.find(\"input\");\r\n                    var anchor = element.find(\"a\");\r\n\r\n                    switch (e.keyCode) {\r\n                        case 32:\r\n                            if (anchor.length > 0) {\r\n                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                                anchor.trigger(\"click\");\r\n                            }\r\n                            else if (inputText.length > 0 && !isFocused) {\r\n                                inputText.focus();\r\n                                isFocused = true;\r\n                            }\r\n                            else if (isSelectElement) {\r\n                                select.focus();\r\n                            }\r\n                            break;\r\n                        case 9:\r\n                            scope.stopEdit();\r\n                            break;\r\n                        default:\r\n                            if (element.attr(\"type\") !== \"date\") {\r\n                                inputText.focus();\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n\r\n                /*\r\n                 *  Stop cell editing and destroy the scope\r\n                 */\r\n                scope.stopEdit = function (e) {\r\n                    if (isSelectElement) {\r\n                        select.blur();\r\n                    }\r\n                    scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);\r\n                };\r\n\r\n\r\n                /*\r\n                 *  Element key down handler\r\n                 */\r\n                var onElementKeyDown = function (e) {\r\n                    switch (e.keyCode) {\r\n                        case 32:\r\n                            var inputText = element.find(\"input\");\r\n                            var anchor = element.find(\"a\");\r\n\r\n                            if (anchor.length > 0) {\r\n                                window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                                anchor.trigger(\"click\");\r\n                            }\r\n                            else if (isSelectElement) {\r\n                                select.focus();\r\n                            }\r\n                            break;\r\n                        case uiGridConstants.keymap.ESC:\r\n                            e.stopPropagation();\r\n                            scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);\r\n                            break;\r\n                    }\r\n                    if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {\r\n                        e.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;\r\n                        if (uiGridCtrl.cellNav.handleKeyDown(e) !== null) {\r\n                            scope.stopEdit(e);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //handle enter and tab for editing not using cellNav\r\n                        switch (e.keyCode) {\r\n                            case uiGridConstants.keymap.ENTER: // Enter (Leave Field)\r\n                            case uiGridConstants.keymap.TAB:\r\n                                scope.stopEdit(e);\r\n                                break;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                element.on('keydown', onElementKeyDown);\r\n\r\n\r\n                //  Focus select element\r\n                var select = element.find(\"select\");\r\n                isSelectElement = select.length > 0;\r\n                if (isSelectElement) {\r\n                    setTimeout(function () {\r\n                        select.focus();\r\n                    });\r\n                }\r\n\r\n\r\n\r\n                //  Trigger anchor tag's click event if cell clicked\r\n                if (window.isCellClicked) {\r\n                    setTimeout(function () {\r\n                        var anchor = element.find(\"a\");\r\n                        if (anchor.length > 0) {\r\n                            window.isPopupOpenedByUIGridCompatibleElement = true;\r\n                            anchor.trigger('click');\r\n                        }\r\n                    });\r\n                    window.isCellClicked = false;\r\n                }\r\n\r\n\r\n                /*\r\n                 *  Destroy broadcast listeners on scope destroy\r\n                 */\r\n                scope.$on('$destroy', function () {\r\n                    onPopupClosed();\r\n                    onDatePopupClosed();\r\n                    onPopupOpened();\r\n                    onViewPortKeyDown();\r\n                    element.off('keydown', onElementKeyDown);\r\n                });\r\n            }\r\n        };\r\n    };\r\n})();\r\n"],"sourceRoot":"/source/"}