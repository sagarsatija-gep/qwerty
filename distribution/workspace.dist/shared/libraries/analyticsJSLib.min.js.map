{"version":3,"sources":["slick.grid.js","slick.js","slick.core.js","slick.autotooltips.js","slick.checkboxselectcolumn.js","slick.rowselectionmodel.js","slick.dataview.js","slick.columngroup.js","slick.cellselectionmodel.js","slick.cellrangeselector.js","slick.cellrangedecorator.js"],"names":["factory","define","amd","exports","module","require","jQuery","$","Slick","window","element","settings","dataSettings","_","this","defaults","htmlWrappers","accessibility","adaptiveHeight","appendArrows","appendDots","arrows","asNavFor","prevArrow","nextArrow","autoplay","autoplaySpeed","centerMode","centerPadding","cssEase","customPaging","slider","i","dots","dotsClass","draggable","easing","edgeFriction","fade","focusOnSelect","infinite","initialSlide","lazyLoad","mobileFirst","pauseOnHover","pauseOnFocus","pauseOnDotsHover","respondTo","responsive","rows","rtl","slide","slidesPerRow","slidesToShow","slidesToScroll","speed","swipe","swipeToSlide","touchMove","touchThreshold","useCSS","useTransform","variableWidth","vertical","verticalSwiping","waitForAnimate","zIndex","initials","animating","dragging","autoPlayTimer","currentDirection","currentLeft","currentSlide","direction","$dots","listWidth","listHeight","loadIndex","$nextArrow","$prevArrow","slideCount","slideWidth","$slideTrack","$slides","sliding","slideOffset","swipeLeft","$list","touchObject","transformsEnabled","unslicked","extend","activeBreakpoint","animType","animProp","breakpoints","breakpointSettings","cssTransitions","focussed","interrupted","hidden","paused","positionProp","rowCount","shouldClick","$slider","$slidesCache","transformType","transitionType","visibilityChange","windowWidth","windowTimer","data","options","originalSettings","document","mozHidden","webkitHidden","autoPlay","proxy","autoPlayClear","autoPlayIterator","changeSlide","clickHandler","selectHandler","setPosition","swipeHandler","dragHandler","keyHandler","instanceUid","htmlExpr","registerBreakpoints","init","prototype","activateADA","find","attr","aria-hidden","tabindex","addSlide","slickAdd","markup","index","addBefore","unload","length","appendTo","insertBefore","eq","insertAfter","prependTo","children","detach","append","each","reinit","animateHeight","targetHeight","outerHeight","animate","height","animateSlide","targetLeft","callback","animProps","left","top","animStart","duration","step","now","Math","ceil","css","complete","call","applyTransition","setTimeout","disableTransition","getNavTarget","not","target","slick","slideHandler","transition","setInterval","clearInterval","slideTo","buildArrows","addClass","removeClass","removeAttr","test","add","aria-disabled","buildDots","dot","getDotCount","first","buildOut","wrapAll","parent","wrap","setupInfinite","updateDots","setSlideClasses","buildRows","a","b","c","newSlides","numOfSlides","originalSlides","slidesPerSection","createDocumentFragment","createElement","row","get","appendChild","empty","width","display","checkResponsive","initial","forceUpdate","breakpoint","targetBreakpoint","respondToWidth","triggerBreakpoint","sliderWidth","innerWidth","min","hasOwnProperty","unslick","refresh","trigger","event","dontAnimate","indexOffset","unevenOffset","$target","currentTarget","is","preventDefault","closest","message","checkNavigable","navigables","prevNavigable","getNavigableIndexes","n","cleanUpEvents","off","interrupt","visibility","cleanUpSlideEvents","orientationChange","resize","cleanUpRows","stopImmediatePropagation","stopPropagation","destroy","remove","fadeSlide","slideIndex","opacity","fadeSlideOut","filterSlides","slickFilter","filter","focusHandler","on","$sf","getCurrent","slickCurrentSlide","breakPoint","counter","pagerQty","getLeft","verticalHeight","targetSlide","verticalOffset","floor","offsetLeft","outerWidth","getOption","slickGetOption","option","max","indexes","push","getSlick","getSlideCount","slidesTraversed","swipedSlide","centerOffset","abs","goTo","slickGoTo","parseInt","creation","hasClass","setProps","startLoad","loadSlider","initializeEvents","updateArrows","initADA","role","aria-describedby","aria-selected","aria-controls","id","end","initArrowEvents","initDotEvents","initSlideEvents","action","initUI","show","tagName","match","keyCode","loadImages","imagesScope","image","imageSource","imageToLoad","onload","onerror","src","loadRange","cloneRange","rangeStart","rangeEnd","slice","progressiveLazyLoad","next","slickNext","pause","slickPause","play","slickPlay","postSlide","prev","slickPrev","tryCount","$imgsToLoad","initializing","lastVisibleIndex","currentBreakpoint","l","responsiveSettings","type","splice","sort","clearTimeout","windowDelay","removeSlide","slickRemove","removeBefore","removeAll","setCSS","position","x","y","positionProps","setDimensions","padding","offset","setFade","right","setHeight","setOption","slickSetOption","item","value","arguments","opt","val","bodyStyle","body","style","undefined","WebkitTransition","MozTransition","msTransition","OTransform","perspectiveProperty","webkitPerspective","MozTransform","MozPerspective","webkitTransform","msTransform","transform","allSlides","remainder","infiniteCount","clone","toggle","targetElement","parents","sync","animSlide","oldSlide","slideLeft","navTarget","hide","swipeDirection","xDist","yDist","r","swipeAngle","startX","curX","startY","curY","atan2","round","PI","swipeEnd","swipeLength","edgeHit","minSwipe","indexOf","fingerCount","originalEvent","touches","swipeStart","swipeMove","curLeft","positionOffset","pageX","clientX","pageY","clientY","sqrt","pow","unfilterSlides","slickUnfilter","fromBreakpoint","fn","ret","args","Array","apply","EventData","isPropagationStopped","isImmediatePropagationStopped","Event","handlers","subscribe","unsubscribe","notify","e","scope","returnValue","EventHandler","handler","unsubscribeAll","Range","fromRow","fromCell","toRow","toCell","isSingleRow","isSingleCell","contains","cell","toString","NonDataItem","__nonDataRow","Group","__group","level","count","title","collapsed","totals","groups","groupingKey","GroupTotals","__groupTotals","group","initialized","EditorLock","activeEditController","isActive","editController","activate","commitCurrentEdit","cancelCurrentEdit","deactivate","NonDataRow","GlobalEditorLock","equals","AutoTooltips","grid","_defaults","_grid","enableForCells","onMouseEnter","handleMouseEnter","enableForHeaderCells","onHeaderMouseEnter","handleHeaderMouseEnter","getCellFromEvent","text","$node","getCellNode","scrollWidth","trim","maxToolTipLength","substr","column","toolTip","name","CheckboxSelectColumn","_handler","onSelectedRowsChanged","handleSelectedRowsChanged","onClick","handleClick","onHeaderClick","handleHeaderClick","onKeyDown","handleKeyDown","selectedRows","getSelectedRows","lookup","_selectedRowsLookup","invalidateRow","render","cHtml","getCheckboxHtml","getDataLength","updateColumnHeader","_options","columnId","isChecked","idGen","random","Date","checkbox_html","which","getColumns","getEditorLock","toggleRowSelection","setSelectedRows","grep","concat","getColumnDefinition","field","resizable","sortable","cssClass","formatter","checkboxSelectionFormatter","columnDef","dataContext","RowSelectionModel","onActiveCellChanged","wrapHandler","handleActiveCellChange","_inHandler","rangesToRows","ranges","j","rowsToRanges","lastCell","getRowsRange","from","to","_ranges","setSelectedRanges","_self","onSelectedRangesChanged","getSelectedRanges","selectActiveRow","activeRow","getActiveCell","shiftKey","ctrlKey","altKey","metaKey","active","bottom","scrollRowIntoView","canCellBeActive","getOptions","multiSelect","selection","idx","inArray","setActiveCell","o","last","pop","DataView","beginUpdate","suspend","endUpdate","setRefreshHints","hints","refreshHints","setFilterArgs","filterArgs","updateIdxById","startingIndex","items","idProperty","idxById","ensureIdUniqueness","getItems","setItems","objectIdProperty","filteredItems","setPagingOptions","pageSize","pagesize","pagenum","totalRows","pageNum","onPagingInfoChanged","getPagingInfo","self","totalPages","comparer","ascending","sortAsc","sortComparer","fastSortField","reverse","fastSort","oldToString","Object","reSort","setFilter","filterFn","inlineFilters","compiledFilter","compileFilter","compiledFilterWithCaching","compileFilterWithCaching","getGrouping","groupingInfos","setGrouping","groupingInfo","groupItemMetadataProvider","Data","GroupItemMetadataProvider","toggledGroupsByLevel","gi","groupingInfoDefaults","getterIsAFn","getter","compiledAccumulators","aggregators","compileAccumulatorLoop","groupBy","valueGetter","valueFormatter","setAggregators","groupAggregators","includeCollapsed","Error","aggregateCollapsed","getItemByIdx","getIdxById","ensureRowsByIdCache","rowsById","getRowById","getItemById","mapIdsToRows","idArray","mapRowsToIds","rowArray","ids","updateItem","updated","insertItem","addItem","deleteItem","getLength","getItem","displayTotalsRow","calculateTotals","getItemMetadata","getGroupRowMetadata","getTotalsRowMetadata","expandCollapseAllGroups","collapse","collapseAllGroups","expandAllGroups","expandCollapseGroup","collapseGroup","varArgs","arg0","groupingDelimiter","split","join","expandGroup","getGroups","extractGroups","parentGroup","groupsByVal","predefinedValues","agg","isLeafLevel","aggregateChildGroups","storeResult","addGroupTotals","lazyTotalsCalculation","addTotals","g","groupCollapsed","toggledGroups","aggregateEmpty","flattenGroupedRows","groupedRows","gl","jj","getFunctionInfo","fnRegex","matches","params","aggregator","accumulatorInfo","accumulate","Function","displayName","filterInfo","filterBody","replace","tpl","uncompiledFilter","retval","ii","uncompiledFilterWithCaching","cache","getFilteredAndPagedItems","batchFilter","batchFilterWithCaching","isFilterNarrowing","isFilterExpanding","filterCache","isFilterUnchanged","paged","getRowDiffs","newRows","eitherIsNonData","diff","ignoreDiffsBefore","ignoreDiffsAfter","rl","recalc","_items","prevRefreshHints","countBefore","totalRowsBefore","onRowCountChanged","previous","current","onRowsChanged","syncGridSelection","preserveHidden","preserveHiddenOnSelectionChange","setSelectedRowIds","rowIds","selectedRowIds","onSelectedRowIdsChanged","update","inHandler","newSelectedRowIds","existing","syncGridCellCssStyles","key","storeCellCssStyles","hash","hashById","newHash","setCellCssStyles","getCellCssStyles","onCellCssStylesChanged","AvgAggregator","field_","count_","nonNullCount_","sum_","NaN","parseFloat","groupTotals","avg","MinAggregator","min_","MaxAggregator","max_","SumAggregator","sum","Aggregators","Avg","Min","Max","Sum","ColumnGroup","$container","getContainerNode","onColumnsResized","onColumnsReordered","enableColumnGrouping","isColumnGroupEnabled","setGroupedColumns","removeColumnGrouping","$groupHeaderColumns","resizeCanvas","headerColumns","columns","columnGroups","getGroupedColumns","setGroupIndex","setColumnIndex","getGroupedColumnsTemplate","prepend","groupCompare","setColumns","slickColumns","borderWidth","reduce","forEach","_index","groupNames","keys","_groupIndex","groupName","$columns","groupedColumns","groupedColumn","c1","c2","CellSelectionModel","_canvas","getCanvasNode","registerPlugin","_selector","onCellRangeSelected","handleCellRangeSelected","onBeforeCellRangeSelected","handleBeforeCellRangeSelected","unregisterPlugin","removeInvalidRanges","result","canCellBeSelected","range","selectActiveCell","dRow","dCell","dirRow","dirCell","new_last","viewRow","viewCell","scrollCellIntoView","CellRangeSelector","selectionCss","border","_decorator","CellRangeDecorator","onDragInit","handleDragInit","onDragStart","handleDragStart","onDrag","handleDrag","onDragEnd","handleDragEnd","dd","_dragging","focus","start","getCellFromPoint","_elem","selectionCssClass","getCellNodeBox","SlickGrid","container","maxSupportedCssHeight","getMaxSupportedCssHeight","scrollbarDimensions","measureScrollbar","validateAndEnforceOptions","columnDefaults","defaultColumnWidth","columnsById","m","minWidth","maxWidth","enableColumnReorder","uid","$focusSink","$headerScroller","$headers","getHeadersWidth","$headerRowScroller","$headerRow","$headerRowSpacer","getCanvasWidth","$topPanelScroller","$topPanel","showTopPanel","showHeaderRow","$viewport","autoHeight","$canvas","$focusSink2","explicitInitialization","finishInitialization","viewportW","measureCellPaddingAndBorder","disableSelection","enableTextSelectionOnCells","bind","updateColumnCaches","createColumnHeaders","setupColumnSort","createCssRules","bindAncestorScrollEvents","handleScroll","handleHeaderContextMenu","delegate","handleHeaderMouseLeave","handleHeaderRowScroll","handleDblClick","handleContextMenu","distance","handleMouseLeave","navigator","userAgent","toLowerCase","handleMouseWheel","plugin","plugins","unshift","setSelectionModel","model","selectionModel","handleSelectedRangesChanged","getSelectionModel","headersWidth","availableWidth","viewportHasVScroll","rowWidth","fullWidthRows","updateCanvasWidth","forceColumnWidthsUpdate","oldCanvasWidth","canvasWidth","viewportHasHScroll","applyColumnWidths","jquery","supportedHeight","testUpTo","div","elem","parentNode","clientWidth","scrollHeight","clientHeight","$elem","$boundAncestors","handleActiveCellPositionChange","unbindAncestorScrollEvents","unbind","getColumnIndex","$header","onBeforeHeaderCellDestroy","node","html","onHeaderCellRendered","getHeaderRow","getHeaderRowColumn","onMouseLeave","onBeforeHeaderRowCellDestroy","header","headerColumnWidthDiff","headerCssClass","headerRowCell","onHeaderRowCellRendered","setSortColumns","sortColumns","setupColumnResize","setupColumnReorder","click","$col","sortOpts","multiColumnSort","defaultSortAsc","onSort","sortCols","map","col","sortCol","containment","axis","cursor","tolerance","helper","placeholder","ui","beforeStop","stop","reorderedIds","reorderedColumns","columnElements","minPageX","maxPageX","firstResizable","lastResizable","forceFitColumns","shrinkLeewayOnRight","stretchLeewayOnRight","previousWidth","absoluteColumnMinWidth","shrinkLeewayOnLeft","stretchLeewayOnLeft","actualMinWidth","d","applyColumnHeaderWidths","syncColumnCellResize","newWidth","rerenderOnResize","invalidateAllRows","getVBoxDelta","$el","p","delta","el","h","v","headerColumnHeightDiff","cellWidthDiff","cellHeightDiff","$style","rowHeight","rules","topPanelHeight","headerRowHeight","styleSheet","cssText","createTextNode","getColumnCssRules","stylesheet","sheets","styleSheets","ownerNode","owningElement","columnCssRulesL","columnCssRulesR","columnIdx","cssRules","selector","selectorText","exec","removeCssRules","onBeforeDestroy","evt","editorLock","getEditController","autosizeColumns","prevTotal","widths","shrinkLeeway","total","availWidth","shrinkProportion","absMinWidth","shrinkSize","growProportion","growSize","currentWidth","reRender","headers","w","rule","setSortColumn","cols","headerColumnEls","columnIndex","getSortColumns","k","selectedCellCssClass","columnPosLeft","columnPosRight","columnDefinitions","setOptions","makeActiveCellNormal","enableAddRow","leaveSpaceForNewRows","setData","newData","scrollToTop","updateRowCount","scrollTo","getData","getDataLengthIncludingAddNew","getDataItem","getTopPanel","setTopPanelVisibility","visible","slideDown","slideUp","setHeaderRowVisibility","getRowTop","getRowFromPosition","th","viewportH","oldOffset","page","ph","cj","newScrollTop","getVisibleRange","cleanupRows","updateRowPositions","prevScrollTop","vScrollDir","scrollTop","lastRenderedScrollTop","onViewportChanged","defaultFormatter","getFormatter","rowMetadata","columnOverrides","formatterFactory","getEditor","columnMetadata","editor","editorFactory","getDataItemValueForColumn","dataItemColumnValueExtractor","appendRowHtml","stringArray","dataLength","dataLoading","rowCss","addNewRowCssClass","metadata","cssClasses","colspan","columnData","leftPx","rightPx","appendCellHtml","cellCss","activeCell","cellCssClasses","rowsCache","cellRenderQueue","cellColSpans","rangeToKeep","removeRowFromCache","invalidate","currentEditor","cacheEntry","rowNodeFromLastMouseWheelEvent","rowNode","zombieRowNodeFromLastMouseWheelEvent","removeChild","postProcessedRows","renderedRows","counter_rows_removed","invalidateRows","updateCell","cellNode","loadValue","innerHTML","invalidatePostProcessingResults","updateRow","ensureCellNodesInRowsCache","cellNodesByColumnIdx","getViewportHeight","numVisibleRows","lastRenderedScrollLeft","dataLengthIncludingAddNew","numberOfRows","oldViewportHasVScroll","activeCellNode","resetActiveCell","oldH","oldScrollTopInRange","viewportTop","viewportLeft","scrollLeft","getRenderedRange","buffer","minBuffer","lastChild","previousSibling","cleanUpCells","totalCellsRemoved","cellsToRemove","cellToRemove","cleanUpAndRenderCells","cellsAdded","processedRows","totalCellsAdded","btm","processedRow","renderRows","needToReselectCell","counter_rows_rendered","firstChild","startPostProcessing","enableAsyncPostRender","h_postrender","asyncPostProcessRows","asyncPostRenderDelay","postProcessFromRow","postProcessToRow","rendered","h_render","vScrollDist","hScrollDist","prevScrollLeft","forceSyncScrolling","onScroll","asyncPostRender","updateCellCssStylesOnRenderedRows","addedHash","removedHash","addedRowHash","removedRowHash","addCellCssStyles","removeCellCssStyles","prevHash","flashCell","toggleCellClass","times","$cell","queue","toggleClass","cellFlashingCssClass","dequeue","cellExists","handled","navigatePrev","cancelEditAndSetFocus","navigatePageDown","navigatePageUp","navigateLeft","navigateRight","navigateUp","navigateDown","navigateNext","editable","commitEditAndSetFocus","makeActiveCellEditable","error","activeElement","setFocus","setActiveCellInternal","onContextMenu","onDblClick","gotoCell","onHeaderMouseLeave","onHeaderContextMenu","getCellFromNode","cls","className","getRowFromNode","y1","y2","x1","x2","tabbingDirection","doPaging","getColspan","scrollRight","newCell","opt_editMode","activeCellChanged","activePosX","autoEdit","isCellPotentiallyEditable","h_editorLoader","asyncEditorLoading","asyncEditorLoadDelay","clearTextSelection","getSelection","sel","removeAllRanges","cannotTriggerInsert","onBeforeCellEditorDestroy","onBeforeEditCell","gridPosition","absBox","commitChanges","cancelChanges","serializedEditorValue","serializeValue","box","offsetTop","offsetParent","offsetHeight","offsetWidth","getActiveCellPosition","getGridPosition","onActiveCellPositionChanged","cellBox","getCellEditor","getActiveCellNode","rowAtTop","rowAtBottom","scrollRowToTop","scrollPage","dir","deltaRows","enableCellNavigation","prevCell","prevActivePosX","findFirstFocusableCell","findLastFocusableCell","lastFocusableCell","gotoRight","posX","gotoLeft","firstFocusableCell","pos","gotoDown","gotoUp","gotoNext","gotoPrev","lastSelectableCell","navigate","tabbingDirections","up","down","stepFunctions","stepFn","isAddNewRow","focusable","selectable","forceEdit","isValueChanged","validationResults","validate","valid","editCommand","serializedValue","prevSerializedValue","execute","applyValue","onCellChange","undo","editCommandHandler","newItem","onAddNewRow","onValidationError","debug","s","alert","eval","expr","slickGridVersion","getViewport","editActiveCell","Grid"],"mappings":"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","file":"analyticsJSLib.min.js","sourcesContent":["/**\r\n * @license\r\n * (c) 2009-2013 Michael Leibman\r\n * michael{dot}leibman{at}gmail{dot}com\r\n * http://github.com/mleibman/slickgrid\r\n *\r\n * Distributed under MIT license.\r\n * All rights reserved.\r\n *\r\n * SlickGrid v2.2\r\n *\r\n * NOTES:\r\n *     Cell/row DOM manipulations are done directly bypassing jQuery's DOM manipulation methods.\r\n *     This increases the speed dramatically, but can only be done safely because there are no event handlers\r\n *     or data associated with any cell/row DOM nodes.  Cell editors must make sure they implement .destroy()\r\n *     and do proper cleanup.\r\n */\r\n\r\n// make sure required JavaScript modules are loaded\r\nif (typeof jQuery === \"undefined\") {\r\n  throw \"SlickGrid requires jquery module to be loaded\";\r\n}\r\n\r\nif (typeof Slick === \"undefined\") {\r\n  throw \"slick.core.js not loaded\";\r\n}\r\n\r\n\r\n(function ($) {\r\n  // Slick.Grid\r\n  $.extend(true, window, {\r\n    Slick: {\r\n      Grid: SlickGrid\r\n    }\r\n  });\r\n\r\n  // shared across all grids on the page\r\n  var scrollbarDimensions;\r\n  var maxSupportedCssHeight;  // browser's breaking point\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  // SlickGrid class implementation (available as Slick.Grid)\r\n\r\n  /**\r\n   * Creates a new instance of the grid.\r\n   * @class SlickGrid\r\n   * @constructor\r\n   * @param {Node}              container   Container node to create the grid in.\r\n   * @param {Array,Object}      data        An array of objects for databinding.\r\n   * @param {Array}             columns     An array of column definitions.\r\n   * @param {Object}            options     Grid options.\r\n   **/\r\n  function SlickGrid(container, data, columns, options) {\r\n    // settings\r\n    var defaults = {\r\n      explicitInitialization: false,\r\n      rowHeight: 25,\r\n      defaultColumnWidth: 80,\r\n      enableAddRow: false,\r\n      leaveSpaceForNewRows: false,\r\n      editable: false,\r\n      autoEdit: true,\r\n      enableCellNavigation: true,\r\n      enableColumnReorder: true,\r\n      asyncEditorLoading: false,\r\n      asyncEditorLoadDelay: 100,\r\n      forceFitColumns: false,\r\n      enableAsyncPostRender: false,\r\n      asyncPostRenderDelay: 50,\r\n      autoHeight: false,\r\n      editorLock: Slick.GlobalEditorLock,\r\n      showHeaderRow: false,\r\n      headerRowHeight: 25,\r\n      showTopPanel: false,\r\n      topPanelHeight: 25,\r\n      formatterFactory: null,\r\n      editorFactory: null,\r\n      cellFlashingCssClass: \"flashing\",\r\n      selectedCellCssClass: \"selected\",\r\n      multiSelect: true,\r\n      enableTextSelectionOnCells: false,\r\n      dataItemColumnValueExtractor: null,\r\n      fullWidthRows: false,\r\n      multiColumnSort: false,\r\n      defaultFormatter: defaultFormatter,\r\n      forceSyncScrolling: false,\r\n      addNewRowCssClass: \"new-row\"\r\n    };\r\n\r\n    var columnDefaults = {\r\n      name: \"\",\r\n      resizable: true,\r\n      sortable: false,\r\n      minWidth: 30,\r\n      rerenderOnResize: false,\r\n      headerCssClass: null,\r\n      defaultSortAsc: true,\r\n      focusable: true,\r\n      selectable: true\r\n    };\r\n\r\n    // scroller\r\n    var th;   // virtual height\r\n    var h;    // real scrollable height\r\n    var ph;   // page height\r\n    var n;    // number of pages\r\n    var cj;   // \"jumpiness\" coefficient\r\n\r\n    var page = 0;       // current page\r\n    var offset = 0;     // current page offset\r\n    var vScrollDir = 1;\r\n\r\n    // private\r\n    var initialized = false;\r\n    var $container;\r\n    var uid = \"slickgrid_\" + Math.round(1000000 * Math.random());\r\n    var self = this;\r\n    var $focusSink, $focusSink2;\r\n    var $headerScroller;\r\n    var $headers;\r\n    var $headerRow, $headerRowScroller, $headerRowSpacer;\r\n    var $topPanelScroller;\r\n    var $topPanel;\r\n    var $viewport;\r\n    var $canvas;\r\n    var $style;\r\n    var $boundAncestors;\r\n    var stylesheet, columnCssRulesL, columnCssRulesR;\r\n    var viewportH, viewportW;\r\n    var canvasWidth;\r\n    var viewportHasHScroll, viewportHasVScroll;\r\n    var headerColumnWidthDiff = 0, headerColumnHeightDiff = 0, // border+padding\r\n        cellWidthDiff = 0, cellHeightDiff = 0;\r\n    var absoluteColumnMinWidth;\r\n\r\n    var tabbingDirection = 1;\r\n    var activePosX;\r\n    var activeRow, activeCell;\r\n    var activeCellNode = null;\r\n    var currentEditor = null;\r\n    var serializedEditorValue;\r\n    var editController;\r\n\r\n    var rowsCache = {};\r\n    var renderedRows = 0;\r\n    var numVisibleRows;\r\n    var prevScrollTop = 0;\r\n    var scrollTop = 0;\r\n    var lastRenderedScrollTop = 0;\r\n    var lastRenderedScrollLeft = 0;\r\n    var prevScrollLeft = 0;\r\n    var scrollLeft = 0;\r\n\r\n    var selectionModel;\r\n    var selectedRows = [];\r\n\r\n    var plugins = [];\r\n    var cellCssClasses = {};\r\n\r\n    var columnsById = {};\r\n    var sortColumns = [];\r\n    var columnPosLeft = [];\r\n    var columnPosRight = [];\r\n\r\n\r\n    // async call handles\r\n    var h_editorLoader = null;\r\n    var h_render = null;\r\n    var h_postrender = null;\r\n    var postProcessedRows = {};\r\n    var postProcessToRow = null;\r\n    var postProcessFromRow = null;\r\n\r\n    // perf counters\r\n    var counter_rows_rendered = 0;\r\n    var counter_rows_removed = 0;\r\n\r\n    // These two variables work around a bug with inertial scrolling in Webkit/Blink on Mac.\r\n    // See http://crbug.com/312427.\r\n    var rowNodeFromLastMouseWheelEvent;  // this node must not be deleted while inertial scrolling\r\n    var zombieRowNodeFromLastMouseWheelEvent;  // node that was hidden instead of getting deleted\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Initialization\r\n\r\n    function init() {\r\n      $container = $(container);\r\n      if ($container.length < 1) {\r\n        throw new Error(\"SlickGrid requires a valid container, \" + container + \" does not exist in the DOM.\");\r\n      }\r\n\r\n      // calculate these only once and share between grid instances\r\n      maxSupportedCssHeight = maxSupportedCssHeight || getMaxSupportedCssHeight();\r\n      scrollbarDimensions = scrollbarDimensions || measureScrollbar();\r\n\r\n      options = $.extend({}, defaults, options);\r\n      validateAndEnforceOptions();\r\n      columnDefaults.width = options.defaultColumnWidth;\r\n\r\n      columnsById = {};\r\n      for (var i = 0; i < columns.length; i++) {\r\n        var m = columns[i] = $.extend({}, columnDefaults, columns[i]);\r\n        columnsById[m.id] = i;\r\n        if (m.minWidth && m.width < m.minWidth) {\r\n          m.width = m.minWidth;\r\n        }\r\n        if (m.maxWidth && m.width > m.maxWidth) {\r\n          m.width = m.maxWidth;\r\n        }\r\n      }\r\n\r\n      // validate loaded JavaScript modules against requested options\r\n      if (options.enableColumnReorder && !$.fn.sortable) {\r\n        throw new Error(\"SlickGrid's 'enableColumnReorder = true' option requires jquery-ui.sortable module to be loaded\");\r\n      }\r\n\r\n      editController = {\r\n        \"commitCurrentEdit\": commitCurrentEdit,\r\n        \"cancelCurrentEdit\": cancelCurrentEdit\r\n      };\r\n\r\n      $container\r\n          .empty()\r\n          .css(\"overflow\", \"hidden\")\r\n          .css(\"outline\", 0)\r\n          .addClass(uid)\r\n          .addClass(\"ui-widget\");\r\n\r\n      // set up a positioning container if needed\r\n      if (!/relative|absolute|fixed/.test($container.css(\"position\"))) {\r\n        $container.css(\"position\", \"relative\");\r\n      }\r\n\r\n      $focusSink = $(\"<div tabIndex='0' hideFocus style='position:fixed;width:0;height:0;top:0;left:0;outline:0;'></div>\").appendTo($container);\r\n\r\n      $headerScroller = $(\"<div class='slick-header ui-state-default' style='overflow:hidden;position:relative;' />\").appendTo($container);\r\n      $headers = $(\"<div class='slick-header-columns' style='left:-1000px' />\").appendTo($headerScroller);\r\n      $headers.width(getHeadersWidth());\r\n\r\n      $headerRowScroller = $(\"<div class='slick-headerrow ui-state-default' style='overflow:hidden;position:relative;' />\").appendTo($container);\r\n      $headerRow = $(\"<div class='slick-headerrow-columns' />\").appendTo($headerRowScroller);\r\n      $headerRowSpacer = $(\"<div style='display:block;height:1px;position:absolute;top:0;left:0;'></div>\")\r\n          .css(\"width\", getCanvasWidth() + scrollbarDimensions.width + \"px\")\r\n          .appendTo($headerRowScroller);\r\n\r\n      $topPanelScroller = $(\"<div class='slick-top-panel-scroller ui-state-default' style='overflow:hidden;position:relative;' />\").appendTo($container);\r\n      $topPanel = $(\"<div class='slick-top-panel' style='width:10000px' />\").appendTo($topPanelScroller);\r\n\r\n      if (!options.showTopPanel) {\r\n        $topPanelScroller.hide();\r\n      }\r\n\r\n      if (!options.showHeaderRow) {\r\n        $headerRowScroller.hide();\r\n      }\r\n\r\n      $viewport = $(\"<div class='slick-viewport' style='width:100%;overflow:auto;outline:0;position:relative;;'>\").appendTo($container);\r\n      $viewport.css(\"overflow-y\", options.autoHeight ? \"hidden\" : \"auto\");\r\n\r\n      $canvas = $(\"<div class='grid-canvas' />\").appendTo($viewport);\r\n\r\n      $focusSink2 = $focusSink.clone().appendTo($container);\r\n\r\n      if (!options.explicitInitialization) {\r\n        finishInitialization();\r\n      }\r\n    }\r\n\r\n    function finishInitialization() {\r\n      if (!initialized) {\r\n        initialized = true;\r\n\r\n        viewportW = parseFloat($.css($container[0], \"width\", true));\r\n\r\n        // header columns and cells may have different padding/border skewing width calculations (box-sizing, hello?)\r\n        // calculate the diff so we can set consistent sizes\r\n        measureCellPaddingAndBorder();\r\n\r\n        // for usability reasons, all text selection in SlickGrid is disabled\r\n        // with the exception of input and textarea elements (selection must\r\n        // be enabled there so that editors work as expected); note that\r\n        // selection in grid cells (grid body) is already unavailable in\r\n        // all browsers except IE\r\n        disableSelection($headers); // disable all text selection in header (including input and textarea)\r\n\r\n        if (!options.enableTextSelectionOnCells) {\r\n          // disable text selection in grid cells except in input and textarea elements\r\n          // (this is IE-specific, because selectstart event will only fire in IE)\r\n          $viewport.bind(\"selectstart.ui\", function (event) {\r\n            return $(event.target).is(\"input,textarea\");\r\n          });\r\n        }\r\n\r\n        updateColumnCaches();\r\n        createColumnHeaders();\r\n        setupColumnSort();\r\n        createCssRules();\r\n        resizeCanvas();\r\n        bindAncestorScrollEvents();\r\n\r\n        $container\r\n            .bind(\"resize.slickgrid\", resizeCanvas);\r\n        $viewport\r\n            //.bind(\"click\", handleClick)\r\n            .bind(\"scroll\", handleScroll);\r\n        $headerScroller\r\n            .bind(\"contextmenu\", handleHeaderContextMenu)\r\n            .bind(\"click\", handleHeaderClick)\r\n            .delegate(\".slick-header-column\", \"mouseenter\", handleHeaderMouseEnter)\r\n            .delegate(\".slick-header-column\", \"mouseleave\", handleHeaderMouseLeave);\r\n        $headerRowScroller\r\n            .bind(\"scroll\", handleHeaderRowScroll);\r\n        $focusSink.add($focusSink2)\r\n            .bind(\"keydown\", handleKeyDown);\r\n        $canvas\r\n            .bind(\"keydown\", handleKeyDown)\r\n            .bind(\"click\", handleClick)\r\n            .bind(\"dblclick\", handleDblClick)\r\n            .bind(\"contextmenu\", handleContextMenu)\r\n            .bind(\"draginit\", handleDragInit)\r\n            .bind(\"dragstart\", {distance: 3}, handleDragStart)\r\n            .bind(\"drag\", handleDrag)\r\n            .bind(\"dragend\", handleDragEnd)\r\n            .delegate(\".slick-cell\", \"mouseenter\", handleMouseEnter)\r\n            .delegate(\".slick-cell\", \"mouseleave\", handleMouseLeave);\r\n\r\n        // Work around http://crbug.com/312427.\r\n        if (navigator.userAgent.toLowerCase().match(/webkit/) &&\r\n            navigator.userAgent.toLowerCase().match(/macintosh/)) {\r\n          $canvas.bind(\"mousewheel\", handleMouseWheel);\r\n        }\r\n      }\r\n    }\r\n\r\n    function registerPlugin(plugin) {\r\n      plugins.unshift(plugin);\r\n      plugin.init(self);\r\n    }\r\n\r\n    function unregisterPlugin(plugin) {\r\n      for (var i = plugins.length; i >= 0; i--) {\r\n        if (plugins[i] === plugin) {\r\n          if (plugins[i].destroy) {\r\n            plugins[i].destroy();\r\n          }\r\n          plugins.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    function setSelectionModel(model) {\r\n      if (selectionModel) {\r\n        selectionModel.onSelectedRangesChanged.unsubscribe(handleSelectedRangesChanged);\r\n        if (selectionModel.destroy) {\r\n          selectionModel.destroy();\r\n        }\r\n      }\r\n\r\n      selectionModel = model;\r\n      if (selectionModel) {\r\n        selectionModel.init(self);\r\n        selectionModel.onSelectedRangesChanged.subscribe(handleSelectedRangesChanged);\r\n      }\r\n    }\r\n\r\n    function getSelectionModel() {\r\n      return selectionModel;\r\n    }\r\n\r\n    function getCanvasNode() {\r\n      return $canvas[0];\r\n    }\r\n     \r\n    function measureScrollbar() {\r\n       // yogesh.jagdale :: Done changes for REP-4214 slik grid header width issue\r\n      /*var $c = $(\"<div style='position:absolute; top:-10000px; left:-10000px; width:100px; height:100px; overflow:scroll;'></div>\").appendTo(\"body\");\r\n      var dim = {\r\n        width: $c.width() - $c[0].clientWidth,\r\n        height: $c.height() - $c[0].clientHeight\r\n      };\r\n      $c.remove();\r\n      return dim;*/\r\n        return { width: 0, height: 0 };\r\n    }\r\n\r\n    function getHeadersWidth() {\r\n      var headersWidth = 0;\r\n      for (var i = 0, ii = columns.length; i < ii; i++) {\r\n        var width = columns[i].width;\r\n        headersWidth += width;\r\n      }\r\n      headersWidth += scrollbarDimensions.width;\r\n      return Math.max(headersWidth, viewportW) + 1000;\r\n    }\r\n\r\n    function getCanvasWidth() {\r\n      var availableWidth = viewportHasVScroll ? viewportW - scrollbarDimensions.width : viewportW;\r\n      var rowWidth = 0;\r\n      var i = columns.length;\r\n      while (i--) {\r\n        rowWidth += columns[i].width;\r\n      }\r\n      return options.fullWidthRows ? Math.max(rowWidth, availableWidth) : rowWidth;\r\n    }\r\n\r\n    function updateCanvasWidth(forceColumnWidthsUpdate) {\r\n      var oldCanvasWidth = canvasWidth;\r\n      canvasWidth = getCanvasWidth();\r\n\r\n      if (canvasWidth != oldCanvasWidth) {\r\n        $canvas.width(canvasWidth);\r\n        $headerRow.width(canvasWidth);\r\n        $headers.width(getHeadersWidth());\r\n        viewportHasHScroll = (canvasWidth > viewportW - scrollbarDimensions.width);\r\n      }\r\n\r\n      $headerRowSpacer.width(canvasWidth + (viewportHasVScroll ? scrollbarDimensions.width : 0));\r\n\r\n      if (canvasWidth != oldCanvasWidth || forceColumnWidthsUpdate) {\r\n        applyColumnWidths();\r\n      }\r\n    }\r\n\r\n    function disableSelection($target) {\r\n      if ($target && $target.jquery) {\r\n        $target\r\n            .attr(\"unselectable\", \"on\")\r\n            .css(\"MozUserSelect\", \"none\")\r\n            .bind(\"selectstart.ui\", function () {\r\n              return false;\r\n            }); // from jquery:ui.core.js 1.7.2\r\n      }\r\n    }\r\n\r\n    function getMaxSupportedCssHeight() {\r\n      var supportedHeight = 1000000;\r\n      // FF reports the height back but still renders blank after ~6M px\r\n      var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\r\n      var div = $(\"<div style='display:none' />\").appendTo(document.body);\r\n\r\n      while (true) {\r\n        var test = supportedHeight * 2;\r\n        div.css(\"height\", test);\r\n        if (test > testUpTo || div.height() !== test) {\r\n          break;\r\n        } else {\r\n          supportedHeight = test;\r\n        }\r\n      }\r\n\r\n      div.remove();\r\n      return supportedHeight;\r\n    }\r\n\r\n    // TODO:  this is static.  need to handle page mutation.\r\n    function bindAncestorScrollEvents() {\r\n      var elem = $canvas[0];\r\n      while ((elem = elem.parentNode) != document.body && elem != null) {\r\n        // bind to scroll containers only\r\n        if (elem == $viewport[0] || elem.scrollWidth != elem.clientWidth || elem.scrollHeight != elem.clientHeight) {\r\n          var $elem = $(elem);\r\n          if (!$boundAncestors) {\r\n            $boundAncestors = $elem;\r\n          } else {\r\n            $boundAncestors = $boundAncestors.add($elem);\r\n          }\r\n          $elem.bind(\"scroll.\" + uid, handleActiveCellPositionChange);\r\n        }\r\n      }\r\n    }\r\n\r\n    function unbindAncestorScrollEvents() {\r\n      if (!$boundAncestors) {\r\n        return;\r\n      }\r\n      $boundAncestors.unbind(\"scroll.\" + uid);\r\n      $boundAncestors = null;\r\n    }\r\n\r\n    function updateColumnHeader(columnId, title, toolTip) {\r\n      if (!initialized) { return; }\r\n      var idx = getColumnIndex(columnId);\r\n      if (idx == null) {\r\n        return;\r\n      }\r\n\r\n      var columnDef = columns[idx];\r\n      var $header = $headers.children().eq(idx);\r\n      if ($header) {\r\n        if (title !== undefined) {\r\n          columns[idx].name = title;\r\n        }\r\n        if (toolTip !== undefined) {\r\n          columns[idx].toolTip = toolTip;\r\n        }\r\n\r\n        trigger(self.onBeforeHeaderCellDestroy, {\r\n          \"node\": $header[0],\r\n          \"column\": columnDef\r\n        });\r\n\r\n        $header\r\n            .attr(\"title\", toolTip || \"\")\r\n            .children().eq(0).html(title);\r\n\r\n        trigger(self.onHeaderCellRendered, {\r\n          \"node\": $header[0],\r\n          \"column\": columnDef\r\n        });\r\n      }\r\n    }\r\n\r\n    function getHeaderRow() {\r\n      return $headerRow[0];\r\n    }\r\n\r\n    function getHeaderRowColumn(columnId) {\r\n      var idx = getColumnIndex(columnId);\r\n      var $header = $headerRow.children().eq(idx);\r\n      return $header && $header[0];\r\n    }\r\n\r\n    function createColumnHeaders() {\r\n      function onMouseEnter() {\r\n        $(this).addClass(\"ui-state-hover\");\r\n      }\r\n\r\n      function onMouseLeave() {\r\n        $(this).removeClass(\"ui-state-hover\");\r\n      }\r\n\r\n      $headers.find(\".slick-header-column\")\r\n        .each(function() {\r\n          var columnDef = $(this).data(\"column\");\r\n          if (columnDef) {\r\n            trigger(self.onBeforeHeaderCellDestroy, {\r\n              \"node\": this,\r\n              \"column\": columnDef\r\n            });\r\n          }\r\n        });\r\n      $headers.empty();\r\n      $headers.width(getHeadersWidth());\r\n\r\n      $headerRow.find(\".slick-headerrow-column\")\r\n        .each(function() {\r\n          var columnDef = $(this).data(\"column\");\r\n          if (columnDef) {\r\n            trigger(self.onBeforeHeaderRowCellDestroy, {\r\n              \"node\": this,\r\n              \"column\": columnDef\r\n            });\r\n          }\r\n        });\r\n      $headerRow.empty();\r\n\r\n      for (var i = 0; i < columns.length; i++) {\r\n        var m = columns[i];\r\n\r\n        var header = $(\"<div class='ui-state-default slick-header-column' />\")\r\n            .html(\"<span class='slick-column-name'>\" + m.name + \"</span>\")\r\n            .width(m.width - headerColumnWidthDiff)\r\n            .attr(\"id\", \"\" + uid + m.id)\r\n            .attr(\"title\", m.toolTip || \"\")\r\n            .data(\"column\", m)\r\n            .addClass(m.headerCssClass || \"\")\r\n            .appendTo($headers);\r\n\r\n        if (options.enableColumnReorder || m.sortable) {\r\n          header\r\n            .on('mouseenter', onMouseEnter)\r\n            .on('mouseleave', onMouseLeave);\r\n        }\r\n\r\n        if (m.sortable) {\r\n          header.addClass(\"slick-header-sortable\");\r\n          header.append(\"<span class='slick-sort-indicator' />\");\r\n        }\r\n\r\n        trigger(self.onHeaderCellRendered, {\r\n          \"node\": header[0],\r\n          \"column\": m\r\n        });\r\n\r\n        if (options.showHeaderRow) {\r\n          var headerRowCell = $(\"<div class='ui-state-default slick-headerrow-column l\" + i + \" r\" + i + \"'></div>\")\r\n              .data(\"column\", m)\r\n              .appendTo($headerRow);\r\n\r\n          trigger(self.onHeaderRowCellRendered, {\r\n            \"node\": headerRowCell[0],\r\n            \"column\": m\r\n          });\r\n        }\r\n      }\r\n\r\n      setSortColumns(sortColumns);\r\n      setupColumnResize();\r\n      if (options.enableColumnReorder) {\r\n        setupColumnReorder();\r\n      }\r\n    }\r\n\r\n    function setupColumnSort() {\r\n      $headers.click(function (e) {\r\n        // temporary workaround for a bug in jQuery 1.7.1 (http://bugs.jquery.com/ticket/11328)\r\n        e.metaKey = e.metaKey || e.ctrlKey;\r\n\r\n        if ($(e.target).hasClass(\"slick-resizable-handle\")) {\r\n          return;\r\n        }\r\n\r\n        var $col = $(e.target).closest(\".slick-header-column\");\r\n        if (!$col.length) {\r\n          return;\r\n        }\r\n\r\n        var column = $col.data(\"column\");\r\n        if (column.sortable) {\r\n          if (!getEditorLock().commitCurrentEdit()) {\r\n            return;\r\n          }\r\n\r\n          var sortOpts = null;\r\n          var i = 0;\r\n          for (; i < sortColumns.length; i++) {\r\n            if (sortColumns[i].columnId == column.id) {\r\n              sortOpts = sortColumns[i];\r\n              sortOpts.sortAsc = !sortOpts.sortAsc;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (e.metaKey && options.multiColumnSort) {\r\n            if (sortOpts) {\r\n              sortColumns.splice(i, 1);\r\n            }\r\n          }\r\n          else {\r\n            if ((!e.shiftKey && !e.metaKey) || !options.multiColumnSort) {\r\n              sortColumns = [];\r\n            }\r\n\r\n            if (!sortOpts) {\r\n              sortOpts = { columnId: column.id, sortAsc: column.defaultSortAsc };\r\n              sortColumns.push(sortOpts);\r\n            } else if (sortColumns.length == 0) {\r\n              sortColumns.push(sortOpts);\r\n            }\r\n          }\r\n\r\n          setSortColumns(sortColumns);\r\n\r\n          if (!options.multiColumnSort) {\r\n            trigger(self.onSort, {\r\n              multiColumnSort: false,\r\n              sortCol: column,\r\n              sortAsc: sortOpts.sortAsc}, e);\r\n          } else {\r\n            trigger(self.onSort, {\r\n              multiColumnSort: true,\r\n              sortCols: $.map(sortColumns, function(col) {\r\n                return {sortCol: columns[getColumnIndex(col.columnId)], sortAsc: col.sortAsc };\r\n              })}, e);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    function setupColumnReorder() {\r\n      $headers.filter(\":ui-sortable\").sortable(\"destroy\");\r\n      $headers.sortable({\r\n        containment: \"parent\",\r\n        distance: 3,\r\n        axis: \"x\",\r\n        cursor: \"default\",\r\n        tolerance: \"intersection\",\r\n        helper: \"clone\",\r\n        placeholder: \"slick-sortable-placeholder ui-state-default slick-header-column\",\r\n        start: function (e, ui) {\r\n          ui.placeholder.width(ui.helper.outerWidth() - headerColumnWidthDiff);\r\n          $(ui.helper).addClass(\"slick-header-column-active\");\r\n        },\r\n        beforeStop: function (e, ui) {\r\n          $(ui.helper).removeClass(\"slick-header-column-active\");\r\n        },\r\n        stop: function (e) {\r\n          if (!getEditorLock().commitCurrentEdit()) {\r\n            $(this).sortable(\"cancel\");\r\n            return;\r\n          }\r\n\r\n          var reorderedIds = $headers.sortable(\"toArray\");\r\n          var reorderedColumns = [];\r\n          for (var i = 0; i < reorderedIds.length; i++) {\r\n            reorderedColumns.push(columns[getColumnIndex(reorderedIds[i].replace(uid, \"\"))]);\r\n          }\r\n          setColumns(reorderedColumns);\r\n\r\n          trigger(self.onColumnsReordered, {});\r\n          e.stopPropagation();\r\n          setupColumnResize();\r\n        }\r\n      });\r\n    }\r\n\r\n    function setupColumnResize() {\r\n      var $col, j, c, pageX, columnElements, minPageX, maxPageX, firstResizable, lastResizable;\r\n      columnElements = $headers.children();\r\n      columnElements.find(\".slick-resizable-handle\").remove();\r\n      columnElements.each(function (i, e) {\r\n        if (columns[i].resizable) {\r\n          if (firstResizable === undefined) {\r\n            firstResizable = i;\r\n          }\r\n          lastResizable = i;\r\n        }\r\n      });\r\n      if (firstResizable === undefined) {\r\n        return;\r\n      }\r\n      columnElements.each(function (i, e) {\r\n        if (i < firstResizable || (options.forceFitColumns && i >= lastResizable)) {\r\n          return;\r\n        }\r\n        $col = $(e);\r\n        $(\"<div class='slick-resizable-handle' />\")\r\n            .appendTo(e)\r\n            .bind(\"dragstart\", function (e, dd) {\r\n              if (!getEditorLock().commitCurrentEdit()) {\r\n                return false;\r\n              }\r\n              pageX = e.pageX;\r\n              $(this).parent().addClass(\"slick-header-column-active\");\r\n              var shrinkLeewayOnRight = null, stretchLeewayOnRight = null;\r\n              // lock each column's width option to current width\r\n              columnElements.each(function (i, e) {\r\n                columns[i].previousWidth = $(e).outerWidth();\r\n              });\r\n              if (options.forceFitColumns) {\r\n                shrinkLeewayOnRight = 0;\r\n                stretchLeewayOnRight = 0;\r\n                // colums on right affect maxPageX/minPageX\r\n                for (j = i + 1; j < columnElements.length; j++) {\r\n                  c = columns[j];\r\n                  if (c.resizable) {\r\n                    if (stretchLeewayOnRight !== null) {\r\n                      if (c.maxWidth) {\r\n                        stretchLeewayOnRight += c.maxWidth - c.previousWidth;\r\n                      } else {\r\n                        stretchLeewayOnRight = null;\r\n                      }\r\n                    }\r\n                    shrinkLeewayOnRight += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);\r\n                  }\r\n                }\r\n              }\r\n              var shrinkLeewayOnLeft = 0, stretchLeewayOnLeft = 0;\r\n              for (j = 0; j <= i; j++) {\r\n                // columns on left only affect minPageX\r\n                c = columns[j];\r\n                if (c.resizable) {\r\n                  if (stretchLeewayOnLeft !== null) {\r\n                    if (c.maxWidth) {\r\n                      stretchLeewayOnLeft += c.maxWidth - c.previousWidth;\r\n                    } else {\r\n                      stretchLeewayOnLeft = null;\r\n                    }\r\n                  }\r\n                  shrinkLeewayOnLeft += c.previousWidth - Math.max(c.minWidth || 0, absoluteColumnMinWidth);\r\n                }\r\n              }\r\n              if (shrinkLeewayOnRight === null) {\r\n                shrinkLeewayOnRight = 100000;\r\n              }\r\n              if (shrinkLeewayOnLeft === null) {\r\n                shrinkLeewayOnLeft = 100000;\r\n              }\r\n              if (stretchLeewayOnRight === null) {\r\n                stretchLeewayOnRight = 100000;\r\n              }\r\n              if (stretchLeewayOnLeft === null) {\r\n                stretchLeewayOnLeft = 100000;\r\n              }\r\n              maxPageX = pageX + Math.min(shrinkLeewayOnRight, stretchLeewayOnLeft);\r\n              minPageX = pageX - Math.min(shrinkLeewayOnLeft, stretchLeewayOnRight);\r\n            })\r\n            .bind(\"drag\", function (e, dd) {\r\n              var actualMinWidth, d = Math.min(maxPageX, Math.max(minPageX, e.pageX)) - pageX, x;\r\n              if (d < 0) { // shrink column\r\n                x = d;\r\n                for (j = i; j >= 0; j--) {\r\n                  c = columns[j];\r\n                  if (c.resizable) {\r\n                    actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);\r\n                    if (x && c.previousWidth + x < actualMinWidth) {\r\n                      x += c.previousWidth - actualMinWidth;\r\n                      c.width = actualMinWidth;\r\n                    } else {\r\n                      c.width = c.previousWidth + x;\r\n                      x = 0;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (options.forceFitColumns) {\r\n                  x = -d;\r\n                  for (j = i + 1; j < columnElements.length; j++) {\r\n                    c = columns[j];\r\n                    if (c.resizable) {\r\n                      if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {\r\n                        x -= c.maxWidth - c.previousWidth;\r\n                        c.width = c.maxWidth;\r\n                      } else {\r\n                        c.width = c.previousWidth + x;\r\n                        x = 0;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              } else { // stretch column\r\n                x = d;\r\n                for (j = i; j >= 0; j--) {\r\n                  c = columns[j];\r\n                  if (c.resizable) {\r\n                    if (x && c.maxWidth && (c.maxWidth - c.previousWidth < x)) {\r\n                      x -= c.maxWidth - c.previousWidth;\r\n                      c.width = c.maxWidth;\r\n                    } else {\r\n                      c.width = c.previousWidth + x;\r\n                      x = 0;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (options.forceFitColumns) {\r\n                  x = -d;\r\n                  for (j = i + 1; j < columnElements.length; j++) {\r\n                    c = columns[j];\r\n                    if (c.resizable) {\r\n                      actualMinWidth = Math.max(c.minWidth || 0, absoluteColumnMinWidth);\r\n                      if (x && c.previousWidth + x < actualMinWidth) {\r\n                        x += c.previousWidth - actualMinWidth;\r\n                        c.width = actualMinWidth;\r\n                      } else {\r\n                        c.width = c.previousWidth + x;\r\n                        x = 0;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              applyColumnHeaderWidths();\r\n              if (options.syncColumnCellResize) {\r\n                applyColumnWidths();\r\n              }\r\n            })\r\n            .bind(\"dragend\", function (e, dd) {\r\n              var newWidth;\r\n              $(this).parent().removeClass(\"slick-header-column-active\");\r\n              for (j = 0; j < columnElements.length; j++) {\r\n                c = columns[j];\r\n                newWidth = $(columnElements[j]).outerWidth();\r\n\r\n                if (c.previousWidth !== newWidth && c.rerenderOnResize) {\r\n                  invalidateAllRows();\r\n                }\r\n              }\r\n              updateCanvasWidth(true);\r\n              render();\r\n              trigger(self.onColumnsResized, {});\r\n            });\r\n      });\r\n    }\r\n\r\n    function getVBoxDelta($el) {\r\n      var p = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"];\r\n      var delta = 0;\r\n      $.each(p, function (n, val) {\r\n        delta += parseFloat($el.css(val)) || 0;\r\n      });\r\n      return delta;\r\n    }\r\n\r\n    function measureCellPaddingAndBorder() {\r\n      var el;\r\n      var h = [\"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\"];\r\n      var v = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"];\r\n\r\n      el = $(\"<div class='ui-state-default slick-header-column' style='visibility:hidden'>-</div>\").appendTo($headers);\r\n      headerColumnWidthDiff = headerColumnHeightDiff = 0;\r\n      if (el.css(\"box-sizing\") != \"border-box\" && el.css(\"-moz-box-sizing\") != \"border-box\" && el.css(\"-webkit-box-sizing\") != \"border-box\") {\r\n        $.each(h, function (n, val) {\r\n          headerColumnWidthDiff += parseFloat(el.css(val)) || 0;\r\n        });\r\n        $.each(v, function (n, val) {\r\n          headerColumnHeightDiff += parseFloat(el.css(val)) || 0;\r\n        });\r\n      }\r\n      el.remove();\r\n\r\n      var r = $(\"<div class='slick-row' />\").appendTo($canvas);\r\n      el = $(\"<div class='slick-cell' id='' style='visibility:hidden'>-</div>\").appendTo(r);\r\n      cellWidthDiff = cellHeightDiff = 0;\r\n      if (el.css(\"box-sizing\") != \"border-box\" && el.css(\"-moz-box-sizing\") != \"border-box\" && el.css(\"-webkit-box-sizing\") != \"border-box\") {\r\n        $.each(h, function (n, val) {\r\n          cellWidthDiff += parseFloat(el.css(val)) || 0;\r\n        });\r\n        $.each(v, function (n, val) {\r\n          cellHeightDiff += parseFloat(el.css(val)) || 0;\r\n        });\r\n      }\r\n      r.remove();\r\n\r\n      absoluteColumnMinWidth = Math.max(headerColumnWidthDiff, cellWidthDiff);\r\n    }\r\n\r\n    function createCssRules() {\r\n      $style = $(\"<style type='text/css' rel='stylesheet' />\").appendTo($(\"head\"));\r\n      var rowHeight = (options.rowHeight - cellHeightDiff);\r\n      var rules = [\r\n        \".\" + uid + \" .slick-header-column { left: 1000px; }\",\r\n        \".\" + uid + \" .slick-top-panel { height:\" + options.topPanelHeight + \"px; }\",\r\n        \".\" + uid + \" .slick-headerrow-columns { height:\" + options.headerRowHeight + \"px; }\",\r\n        \".\" + uid + \" .slick-cell { height:\" + rowHeight + \"px; }\",\r\n        \".\" + uid + \" .slick-row { height:\" + options.rowHeight + \"px; }\"\r\n      ];\r\n\r\n      for (var i = 0; i < columns.length; i++) {\r\n        rules.push(\".\" + uid + \" .l\" + i + \" { }\");\r\n        rules.push(\".\" + uid + \" .r\" + i + \" { }\");\r\n      }\r\n\r\n      if ($style[0].styleSheet) { // IE\r\n        $style[0].styleSheet.cssText = rules.join(\" \");\r\n      } else {\r\n        $style[0].appendChild(document.createTextNode(rules.join(\" \")));\r\n      }\r\n    }\r\n\r\n    function getColumnCssRules(idx) {\r\n      if (!stylesheet) {\r\n        var sheets = document.styleSheets;\r\n        for (var i = 0; i < sheets.length; i++) {\r\n          if ((sheets[i].ownerNode || sheets[i].owningElement) == $style[0]) {\r\n            stylesheet = sheets[i];\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!stylesheet) {\r\n          throw new Error(\"Cannot find stylesheet.\");\r\n        }\r\n\r\n        // find and cache column CSS rules\r\n        columnCssRulesL = [];\r\n        columnCssRulesR = [];\r\n        var cssRules = (stylesheet.cssRules || stylesheet.rules);\r\n        var matches, columnIdx;\r\n        for (var i = 0; i < cssRules.length; i++) {\r\n          var selector = cssRules[i].selectorText;\r\n          if (matches = /\\.l\\d+/.exec(selector)) {\r\n            columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\r\n            columnCssRulesL[columnIdx] = cssRules[i];\r\n          } else if (matches = /\\.r\\d+/.exec(selector)) {\r\n            columnIdx = parseInt(matches[0].substr(2, matches[0].length - 2), 10);\r\n            columnCssRulesR[columnIdx] = cssRules[i];\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        \"left\": columnCssRulesL[idx],\r\n        \"right\": columnCssRulesR[idx]\r\n      };\r\n    }\r\n\r\n    function removeCssRules() {\r\n      $style.remove();\r\n      stylesheet = null;\r\n    }\r\n\r\n    function destroy() {\r\n      getEditorLock().cancelCurrentEdit();\r\n\r\n      trigger(self.onBeforeDestroy, {});\r\n\r\n      var i = plugins.length;\r\n      while(i--) {\r\n        unregisterPlugin(plugins[i]);\r\n      }\r\n\r\n      if (options.enableColumnReorder) {\r\n          $headers.filter(\":ui-sortable\").sortable(\"destroy\");\r\n      }\r\n\r\n      unbindAncestorScrollEvents();\r\n      $container.unbind(\".slickgrid\");\r\n      removeCssRules();\r\n\r\n      $canvas.unbind(\"draginit dragstart dragend drag\");\r\n      $container.empty().removeClass(uid);\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    // General\r\n\r\n    function trigger(evt, args, e) {\r\n      e = e || new Slick.EventData();\r\n      args = args || {};\r\n      args.grid = self;\r\n      return evt.notify(args, e, self);\r\n    }\r\n\r\n    function getEditorLock() {\r\n      return options.editorLock;\r\n    }\r\n\r\n    function getEditController() {\r\n      return editController;\r\n    }\r\n\r\n    function getColumnIndex(id) {\r\n      return columnsById[id];\r\n    }\r\n\r\n    function autosizeColumns() {\r\n      var i, c,\r\n          widths = [],\r\n          shrinkLeeway = 0,\r\n          total = 0,\r\n          prevTotal,\r\n          availWidth = viewportHasVScroll ? viewportW - scrollbarDimensions.width : viewportW;\r\n\r\n      for (i = 0; i < columns.length; i++) {\r\n        c = columns[i];\r\n        widths.push(c.width);\r\n        total += c.width;\r\n        if (c.resizable) {\r\n          shrinkLeeway += c.width - Math.max(c.minWidth, absoluteColumnMinWidth);\r\n        }\r\n      }\r\n\r\n      // shrink\r\n      prevTotal = total;\r\n      while (total > availWidth && shrinkLeeway) {\r\n        var shrinkProportion = (total - availWidth) / shrinkLeeway;\r\n        for (i = 0; i < columns.length && total > availWidth; i++) {\r\n          c = columns[i];\r\n          var width = widths[i];\r\n          if (!c.resizable || width <= c.minWidth || width <= absoluteColumnMinWidth) {\r\n            continue;\r\n          }\r\n          var absMinWidth = Math.max(c.minWidth, absoluteColumnMinWidth);\r\n          var shrinkSize = Math.floor(shrinkProportion * (width - absMinWidth)) || 1;\r\n          shrinkSize = Math.min(shrinkSize, width - absMinWidth);\r\n          total -= shrinkSize;\r\n          shrinkLeeway -= shrinkSize;\r\n          widths[i] -= shrinkSize;\r\n        }\r\n        if (prevTotal <= total) {  // avoid infinite loop\r\n          break;\r\n        }\r\n        prevTotal = total;\r\n      }\r\n\r\n      // grow\r\n      prevTotal = total;\r\n      while (total < availWidth) {\r\n        var growProportion = availWidth / total;\r\n        for (i = 0; i < columns.length && total < availWidth; i++) {\r\n          c = columns[i];\r\n          var currentWidth = widths[i];\r\n          var growSize;\r\n\r\n          if (!c.resizable || c.maxWidth <= currentWidth) {\r\n            growSize = 0;\r\n          } else {\r\n            growSize = Math.min(Math.floor(growProportion * currentWidth) - currentWidth, (c.maxWidth - currentWidth) || 1000000) || 1;\r\n          }\r\n          total += growSize;\r\n          widths[i] += growSize;\r\n        }\r\n        if (prevTotal >= total) {  // avoid infinite loop\r\n          break;\r\n        }\r\n        prevTotal = total;\r\n      }\r\n\r\n      var reRender = false;\r\n      for (i = 0; i < columns.length; i++) {\r\n        if (columns[i].rerenderOnResize && columns[i].width != widths[i]) {\r\n          reRender = true;\r\n        }\r\n        columns[i].width = widths[i];\r\n      }\r\n\r\n      applyColumnHeaderWidths();\r\n      updateCanvasWidth(true);\r\n      if (reRender) {\r\n        invalidateAllRows();\r\n        render();\r\n      }\r\n    }\r\n\r\n    function applyColumnHeaderWidths() {\r\n      if (!initialized) { return; }\r\n      var h;\r\n      for (var i = 0, headers = $headers.children(), ii = headers.length; i < ii; i++) {\r\n        h = $(headers[i]);\r\n        if (h.width() !== columns[i].width - headerColumnWidthDiff) {\r\n          h.width(columns[i].width - headerColumnWidthDiff);\r\n        }\r\n      }\r\n\r\n      updateColumnCaches();\r\n    }\r\n\r\n    function applyColumnWidths() {\r\n      var x = 0, w, rule;\r\n      for (var i = 0; i < columns.length; i++) {\r\n        w = columns[i].width;\r\n\r\n        rule = getColumnCssRules(i);\r\n        rule.left.style.left = x + \"px\";\r\n        rule.right.style.right = (canvasWidth - x - w) + \"px\";\r\n\r\n        x += columns[i].width;\r\n      }\r\n    }\r\n\r\n    function setSortColumn(columnId, ascending) {\r\n      setSortColumns([{ columnId: columnId, sortAsc: ascending}]);\r\n    }\r\n\r\n    function setSortColumns(cols) {\r\n      sortColumns = cols;\r\n\r\n      var headerColumnEls = $headers.children();\r\n      headerColumnEls\r\n          .removeClass(\"slick-header-column-sorted\")\r\n          .find(\".slick-sort-indicator\")\r\n              .removeClass(\"slick-sort-indicator-asc slick-sort-indicator-desc\");\r\n\r\n      $.each(sortColumns, function(i, col) {\r\n        if (col.sortAsc == null) {\r\n          col.sortAsc = true;\r\n        }\r\n        var columnIndex = getColumnIndex(col.columnId);\r\n        if (columnIndex != null) {\r\n          headerColumnEls.eq(columnIndex)\r\n              .addClass(\"slick-header-column-sorted\")\r\n              .find(\".slick-sort-indicator\")\r\n                  .addClass(col.sortAsc ? \"slick-sort-indicator-asc\" : \"slick-sort-indicator-desc\");\r\n        }\r\n      });\r\n    }\r\n\r\n    function getSortColumns() {\r\n      return sortColumns;\r\n    }\r\n\r\n    function handleSelectedRangesChanged(e, ranges) {\r\n      selectedRows = [];\r\n      var hash = {};\r\n      for (var i = 0; i < ranges.length; i++) {\r\n        for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\r\n          if (!hash[j]) {  // prevent duplicates\r\n            selectedRows.push(j);\r\n            hash[j] = {};\r\n          }\r\n          for (var k = ranges[i].fromCell; k <= ranges[i].toCell; k++) {\r\n            if (canCellBeSelected(j, k)) {\r\n              hash[j][columns[k].id] = options.selectedCellCssClass;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      setCellCssStyles(options.selectedCellCssClass, hash);\r\n\r\n      trigger(self.onSelectedRowsChanged, {rows: getSelectedRows()}, e);\r\n    }\r\n\r\n    function getColumns() {\r\n      return columns;\r\n    }\r\n\r\n    function updateColumnCaches() {\r\n      // Pre-calculate cell boundaries.\r\n      columnPosLeft = [];\r\n      columnPosRight = [];\r\n      var x = 0;\r\n      for (var i = 0, ii = columns.length; i < ii; i++) {\r\n        columnPosLeft[i] = x;\r\n        columnPosRight[i] = x + columns[i].width;\r\n        x += columns[i].width;\r\n      }\r\n    }\r\n\r\n    function setColumns(columnDefinitions) {\r\n      columns = columnDefinitions;\r\n\r\n      columnsById = {};\r\n      for (var i = 0; i < columns.length; i++) {\r\n        var m = columns[i] = $.extend({}, columnDefaults, columns[i]);\r\n        columnsById[m.id] = i;\r\n        if (m.minWidth && m.width < m.minWidth) {\r\n          m.width = m.minWidth;\r\n        }\r\n        if (m.maxWidth && m.width > m.maxWidth) {\r\n          m.width = m.maxWidth;\r\n        }\r\n      }\r\n\r\n      updateColumnCaches();\r\n\r\n      if (initialized) {\r\n        invalidateAllRows();\r\n        createColumnHeaders();\r\n        removeCssRules();\r\n        createCssRules();\r\n        resizeCanvas();\r\n        applyColumnWidths();\r\n        handleScroll();\r\n      }\r\n    }\r\n\r\n    function getOptions() {\r\n      return options;\r\n    }\r\n\r\n    function setOptions(args) {\r\n      if (!getEditorLock().commitCurrentEdit()) {\r\n        return;\r\n      }\r\n\r\n      makeActiveCellNormal();\r\n\r\n      if (options.enableAddRow !== args.enableAddRow) {\r\n        invalidateRow(getDataLength());\r\n      }\r\n\r\n      options = $.extend(options, args);\r\n      validateAndEnforceOptions();\r\n\r\n      $viewport.css(\"overflow-y\", options.autoHeight ? \"hidden\" : \"auto\");\r\n      render();\r\n    }\r\n\r\n    function validateAndEnforceOptions() {\r\n      if (options.autoHeight) {\r\n        options.leaveSpaceForNewRows = false;\r\n      }\r\n    }\r\n\r\n    function setData(newData, scrollToTop) {\r\n      data = newData;\r\n      invalidateAllRows();\r\n      updateRowCount();\r\n      if (scrollToTop) {\r\n        scrollTo(0);\r\n      }\r\n    }\r\n\r\n    function getData() {\r\n      return data;\r\n    }\r\n\r\n    function getDataLength() {\r\n      if (data.getLength) {\r\n        return data.getLength();\r\n      } else {\r\n        return data.length;\r\n      }\r\n    }\r\n\r\n    function getDataLengthIncludingAddNew() {\r\n      return getDataLength() + (options.enableAddRow ? 1 : 0);\r\n    }\r\n\r\n    function getDataItem(i) {\r\n      if (data.getItem) {\r\n        return data.getItem(i);\r\n      } else {\r\n        return data[i];\r\n      }\r\n    }\r\n\r\n    function getTopPanel() {\r\n      return $topPanel[0];\r\n    }\r\n\r\n    function setTopPanelVisibility(visible) {\r\n      if (options.showTopPanel != visible) {\r\n        options.showTopPanel = visible;\r\n        if (visible) {\r\n          $topPanelScroller.slideDown(\"fast\", resizeCanvas);\r\n        } else {\r\n          $topPanelScroller.slideUp(\"fast\", resizeCanvas);\r\n        }\r\n      }\r\n    }\r\n\r\n    function setHeaderRowVisibility(visible) {\r\n      if (options.showHeaderRow != visible) {\r\n        options.showHeaderRow = visible;\r\n        if (visible) {\r\n          $headerRowScroller.slideDown(\"fast\", resizeCanvas);\r\n        } else {\r\n          $headerRowScroller.slideUp(\"fast\", resizeCanvas);\r\n        }\r\n      }\r\n    }\r\n\r\n    function getContainerNode() {\r\n      return $container.get(0);\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Rendering / Scrolling\r\n\r\n    function getRowTop(row) {\r\n      return options.rowHeight * row - offset;\r\n    }\r\n\r\n    function getRowFromPosition(y) {\r\n      return Math.floor((y + offset) / options.rowHeight);\r\n    }\r\n\r\n    function scrollTo(y) {\r\n      y = Math.max(y, 0);\r\n      y = Math.min(y, th - viewportH + (viewportHasHScroll ? scrollbarDimensions.height : 0));\r\n\r\n      var oldOffset = offset;\r\n\r\n      page = Math.min(n - 1, Math.floor(y / ph));\r\n      offset = Math.round(page * cj);\r\n      var newScrollTop = y - offset;\r\n\r\n      if (offset != oldOffset) {\r\n        var range = getVisibleRange(newScrollTop);\r\n        cleanupRows(range);\r\n        updateRowPositions();\r\n      }\r\n\r\n      if (prevScrollTop != newScrollTop) {\r\n        vScrollDir = (prevScrollTop + oldOffset < newScrollTop + offset) ? 1 : -1;\r\n        $viewport[0].scrollTop = (lastRenderedScrollTop = scrollTop = prevScrollTop = newScrollTop);\r\n\r\n        trigger(self.onViewportChanged, {});\r\n      }\r\n    }\r\n\r\n    function defaultFormatter(row, cell, value, columnDef, dataContext) {\r\n      if (value == null) {\r\n        return \"\";\r\n      } else {\r\n        return (value + \"\").replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\");\r\n      }\r\n    }\r\n\r\n    function getFormatter(row, column) {\r\n      var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\r\n\r\n      // look up by id, then index\r\n      var columnOverrides = rowMetadata &&\r\n          rowMetadata.columns &&\r\n          (rowMetadata.columns[column.id] || rowMetadata.columns[getColumnIndex(column.id)]);\r\n\r\n      return (columnOverrides && columnOverrides.formatter) ||\r\n          (rowMetadata && rowMetadata.formatter) ||\r\n          column.formatter ||\r\n          (options.formatterFactory && options.formatterFactory.getFormatter(column)) ||\r\n          options.defaultFormatter;\r\n    }\r\n\r\n    function getEditor(row, cell) {\r\n      var column = columns[cell];\r\n      var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\r\n      var columnMetadata = rowMetadata && rowMetadata.columns;\r\n\r\n      if (columnMetadata && columnMetadata[column.id] && columnMetadata[column.id].editor !== undefined) {\r\n        return columnMetadata[column.id].editor;\r\n      }\r\n      if (columnMetadata && columnMetadata[cell] && columnMetadata[cell].editor !== undefined) {\r\n        return columnMetadata[cell].editor;\r\n      }\r\n\r\n      return column.editor || (options.editorFactory && options.editorFactory.getEditor(column));\r\n    }\r\n\r\n    function getDataItemValueForColumn(item, columnDef) {\r\n      if (options.dataItemColumnValueExtractor) {\r\n        return options.dataItemColumnValueExtractor(item, columnDef);\r\n      }\r\n      return item[columnDef.field];\r\n    }\r\n\r\n    function appendRowHtml(stringArray, row, range, dataLength) {\r\n      var d = getDataItem(row);\r\n      var dataLoading = row < dataLength && !d;\r\n      var rowCss = \"slick-row\" +\r\n          (dataLoading ? \" loading\" : \"\") +\r\n          (row === activeRow ? \" active\" : \"\") +\r\n          (row % 2 == 1 ? \" odd\" : \" even\");\r\n\r\n      if (!d) {\r\n        rowCss += \" \" + options.addNewRowCssClass;\r\n      }\r\n\r\n      var metadata = data.getItemMetadata && data.getItemMetadata(row);\r\n\r\n      if (metadata && metadata.cssClasses) {\r\n        rowCss += \" \" + metadata.cssClasses;\r\n      }\r\n\r\n      stringArray.push(\"<div class='ui-widget-content \" + rowCss + \"' style='top:\" + getRowTop(row) + \"px'>\");\r\n\r\n      var colspan, m;\r\n      for (var i = 0, ii = columns.length; i < ii; i++) {\r\n        m = columns[i];\r\n        colspan = 1;\r\n        if (metadata && metadata.columns) {\r\n          var columnData = metadata.columns[m.id] || metadata.columns[i];\r\n          colspan = (columnData && columnData.colspan) || 1;\r\n          if (colspan === \"*\") {\r\n            colspan = ii - i;\r\n          }\r\n        }\r\n\r\n        // Do not render cells outside of the viewport.\r\n        if (columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\r\n          if (columnPosLeft[i] > range.rightPx) {\r\n            // All columns to the right are outside the range.\r\n            break;\r\n          }\r\n\r\n          appendCellHtml(stringArray, row, i, colspan, d);\r\n        }\r\n\r\n        if (colspan > 1) {\r\n          i += (colspan - 1);\r\n        }\r\n      }\r\n\r\n      stringArray.push(\"</div>\");\r\n    }\r\n\r\n    function appendCellHtml(stringArray, row, cell, colspan, item) {\r\n      var m = columns[cell];\r\n      var cellCss = \"slick-cell l\" + cell + \" r\" + Math.min(columns.length - 1, cell + colspan - 1) +\r\n          (m.cssClass ? \" \" + m.cssClass : \"\");\r\n      if (row === activeRow && cell === activeCell) {\r\n        cellCss += (\" active\");\r\n      }\r\n\r\n      // TODO:  merge them together in the setter\r\n      for (var key in cellCssClasses) {\r\n        if (cellCssClasses[key][row] && cellCssClasses[key][row][m.id]) {\r\n          cellCss += (\" \" + cellCssClasses[key][row][m.id]);\r\n        }\r\n      }\r\n\r\n      stringArray.push(\"<div class='\" + cellCss + \"'>\");\r\n\r\n      // if there is a corresponding row (if not, this is the Add New row or this data hasn't been loaded yet)\r\n      if (item) {\r\n        var value = getDataItemValueForColumn(item, m);\r\n        stringArray.push(getFormatter(row, m)(row, cell, value, m, item));\r\n      }\r\n\r\n      stringArray.push(\"</div>\");\r\n\r\n      rowsCache[row].cellRenderQueue.push(cell);\r\n      rowsCache[row].cellColSpans[cell] = colspan;\r\n    }\r\n\r\n\r\n    function cleanupRows(rangeToKeep) {\r\n      for (var i in rowsCache) {\r\n        if (((i = parseInt(i, 10)) !== activeRow) && (i < rangeToKeep.top || i > rangeToKeep.bottom)) {\r\n          removeRowFromCache(i);\r\n        }\r\n      }\r\n    }\r\n\r\n    function invalidate() {\r\n      updateRowCount();\r\n      invalidateAllRows();\r\n      render();\r\n    }\r\n\r\n    function invalidateAllRows() {\r\n      if (currentEditor) {\r\n        makeActiveCellNormal();\r\n      }\r\n      for (var row in rowsCache) {\r\n        removeRowFromCache(row);\r\n      }\r\n    }\r\n\r\n    function removeRowFromCache(row) {\r\n      var cacheEntry = rowsCache[row];\r\n      if (!cacheEntry) {\r\n        return;\r\n      }\r\n\r\n      if (rowNodeFromLastMouseWheelEvent == cacheEntry.rowNode) {\r\n        cacheEntry.rowNode.style.display = 'none';\r\n        zombieRowNodeFromLastMouseWheelEvent = rowNodeFromLastMouseWheelEvent;\r\n      } else {\r\n        $canvas[0].removeChild(cacheEntry.rowNode);\r\n      }\r\n      \r\n      delete rowsCache[row];\r\n      delete postProcessedRows[row];\r\n      renderedRows--;\r\n      counter_rows_removed++;\r\n    }\r\n\r\n    function invalidateRows(rows) {\r\n      var i, rl;\r\n      if (!rows || !rows.length) {\r\n        return;\r\n      }\r\n      vScrollDir = 0;\r\n      for (i = 0, rl = rows.length; i < rl; i++) {\r\n        if (currentEditor && activeRow === rows[i]) {\r\n          makeActiveCellNormal();\r\n        }\r\n        if (rowsCache[rows[i]]) {\r\n          removeRowFromCache(rows[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    function invalidateRow(row) {\r\n      invalidateRows([row]);\r\n    }\r\n\r\n    function updateCell(row, cell) {\r\n      var cellNode = getCellNode(row, cell);\r\n      if (!cellNode) {\r\n        return;\r\n      }\r\n\r\n      var m = columns[cell], d = getDataItem(row);\r\n      if (currentEditor && activeRow === row && activeCell === cell) {\r\n        currentEditor.loadValue(d);\r\n      } else {\r\n        cellNode.innerHTML = d ? getFormatter(row, m)(row, cell, getDataItemValueForColumn(d, m), m, d) : \"\";\r\n        invalidatePostProcessingResults(row);\r\n      }\r\n    }\r\n\r\n    function updateRow(row) {\r\n      var cacheEntry = rowsCache[row];\r\n      if (!cacheEntry) {\r\n        return;\r\n      }\r\n\r\n      ensureCellNodesInRowsCache(row);\r\n\r\n      var d = getDataItem(row);\r\n\r\n      for (var columnIdx in cacheEntry.cellNodesByColumnIdx) {\r\n        if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(columnIdx)) {\r\n          continue;\r\n        }\r\n\r\n        columnIdx = columnIdx | 0;\r\n        var m = columns[columnIdx],\r\n            node = cacheEntry.cellNodesByColumnIdx[columnIdx];\r\n\r\n        if (row === activeRow && columnIdx === activeCell && currentEditor) {\r\n          currentEditor.loadValue(d);\r\n        } else if (d) {\r\n          node.innerHTML = getFormatter(row, m)(row, columnIdx, getDataItemValueForColumn(d, m), m, d);\r\n        } else {\r\n          node.innerHTML = \"\";\r\n        }\r\n      }\r\n\r\n      invalidatePostProcessingResults(row);\r\n    }\r\n\r\n    function getViewportHeight() {\r\n      return parseFloat($.css($container[0], \"height\", true)) -\r\n          parseFloat($.css($container[0], \"paddingTop\", true)) -\r\n          parseFloat($.css($container[0], \"paddingBottom\", true)) -\r\n          parseFloat($.css($headerScroller[0], \"height\")) - getVBoxDelta($headerScroller) -\r\n          (options.showTopPanel ? options.topPanelHeight + getVBoxDelta($topPanelScroller) : 0) -\r\n          (options.showHeaderRow ? options.headerRowHeight + getVBoxDelta($headerRowScroller) : 0);\r\n    }\r\n\r\n    function resizeCanvas() {\r\n      if (!initialized) { return; }\r\n      if (options.autoHeight) {\r\n        viewportH = options.rowHeight * getDataLengthIncludingAddNew();\r\n      } else {\r\n        viewportH = getViewportHeight();\r\n      }\r\n\r\n      numVisibleRows = Math.ceil(viewportH / options.rowHeight);\r\n      viewportW = parseFloat($.css($container[0], \"width\", true));\r\n      if (!options.autoHeight) {\r\n        $viewport.height(viewportH);\r\n      }\r\n\r\n      if (options.forceFitColumns) {\r\n        autosizeColumns();\r\n      }\r\n\r\n      updateRowCount();\r\n      handleScroll();\r\n      // Since the width has changed, force the render() to reevaluate virtually rendered cells.\r\n      lastRenderedScrollLeft = -1;\r\n      render();\r\n    }\r\n\r\n    function updateRowCount() {\r\n      if (!initialized) { return; }\r\n\r\n      var dataLengthIncludingAddNew = getDataLengthIncludingAddNew();\r\n      var numberOfRows = dataLengthIncludingAddNew +\r\n          (options.leaveSpaceForNewRows ? numVisibleRows - 1 : 0);\r\n\r\n      var oldViewportHasVScroll = viewportHasVScroll;\r\n      // with autoHeight, we do not need to accommodate the vertical scroll bar\r\n      viewportHasVScroll = !options.autoHeight && (numberOfRows * options.rowHeight > viewportH);\r\n\r\n      makeActiveCellNormal();\r\n\r\n      // remove the rows that are now outside of the data range\r\n      // this helps avoid redundant calls to .removeRow() when the size of the data decreased by thousands of rows\r\n      var l = dataLengthIncludingAddNew - 1;\r\n      for (var i in rowsCache) {\r\n        if (i >= l) {\r\n          removeRowFromCache(i);\r\n        }\r\n      }\r\n\r\n      if (activeCellNode && activeRow > l) {\r\n        resetActiveCell();\r\n      }\r\n\r\n      var oldH = h;\r\n      th = Math.max(options.rowHeight * numberOfRows, viewportH - scrollbarDimensions.height);\r\n      if (th < maxSupportedCssHeight) {\r\n        // just one page\r\n        h = ph = th;\r\n        n = 1;\r\n        cj = 0;\r\n      } else {\r\n        // break into pages\r\n        h = maxSupportedCssHeight;\r\n        ph = h / 100;\r\n        n = Math.floor(th / ph);\r\n        cj = (th - h) / (n - 1);\r\n      }\r\n\r\n      if (h !== oldH) {\r\n        $canvas.css(\"height\", h);\r\n        scrollTop = $viewport[0].scrollTop;\r\n      }\r\n\r\n      var oldScrollTopInRange = (scrollTop + offset <= th - viewportH);\r\n\r\n      if (th == 0 || scrollTop == 0) {\r\n        page = offset = 0;\r\n      } else if (oldScrollTopInRange) {\r\n        // maintain virtual position\r\n        scrollTo(scrollTop + offset);\r\n      } else {\r\n        // scroll to bottom\r\n        scrollTo(th - viewportH);\r\n      }\r\n\r\n      if (h != oldH && options.autoHeight) {\r\n        resizeCanvas();\r\n      }\r\n\r\n      if (options.forceFitColumns && oldViewportHasVScroll != viewportHasVScroll) {\r\n        autosizeColumns();\r\n      }\r\n      updateCanvasWidth(false);\r\n    }\r\n\r\n    function getVisibleRange(viewportTop, viewportLeft) {\r\n      if (viewportTop == null) {\r\n        viewportTop = scrollTop;\r\n      }\r\n      if (viewportLeft == null) {\r\n        viewportLeft = scrollLeft;\r\n      }\r\n\r\n      return {\r\n        top: getRowFromPosition(viewportTop),\r\n        bottom: getRowFromPosition(viewportTop + viewportH) + 1,\r\n        leftPx: viewportLeft,\r\n        rightPx: viewportLeft + viewportW\r\n      };\r\n    }\r\n\r\n    function getRenderedRange(viewportTop, viewportLeft) {\r\n      var range = getVisibleRange(viewportTop, viewportLeft);\r\n      var buffer = Math.round(viewportH / options.rowHeight);\r\n      var minBuffer = 3;\r\n\r\n      if (vScrollDir == -1) {\r\n        range.top -= buffer;\r\n        range.bottom += minBuffer;\r\n      } else if (vScrollDir == 1) {\r\n        range.top -= minBuffer;\r\n        range.bottom += buffer;\r\n      } else {\r\n        range.top -= minBuffer;\r\n        range.bottom += minBuffer;\r\n      }\r\n\r\n      range.top = Math.max(0, range.top);\r\n      range.bottom = Math.min(getDataLengthIncludingAddNew() - 1, range.bottom);\r\n\r\n      range.leftPx -= viewportW;\r\n      range.rightPx += viewportW;\r\n\r\n      range.leftPx = Math.max(0, range.leftPx);\r\n      range.rightPx = Math.min(canvasWidth, range.rightPx);\r\n\r\n      return range;\r\n    }\r\n\r\n    function ensureCellNodesInRowsCache(row) {\r\n      var cacheEntry = rowsCache[row];\r\n      if (cacheEntry) {\r\n        if (cacheEntry.cellRenderQueue.length) {\r\n          var lastChild = cacheEntry.rowNode.lastChild;\r\n          while (cacheEntry.cellRenderQueue.length) {\r\n            var columnIdx = cacheEntry.cellRenderQueue.pop();\r\n            cacheEntry.cellNodesByColumnIdx[columnIdx] = lastChild;\r\n            lastChild = lastChild.previousSibling;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function cleanUpCells(range, row) {\r\n      var totalCellsRemoved = 0;\r\n      var cacheEntry = rowsCache[row];\r\n\r\n      // Remove cells outside the range.\r\n      var cellsToRemove = [];\r\n      for (var i in cacheEntry.cellNodesByColumnIdx) {\r\n        // I really hate it when people mess with Array.prototype.\r\n        if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(i)) {\r\n          continue;\r\n        }\r\n\r\n        // This is a string, so it needs to be cast back to a number.\r\n        i = i | 0;\r\n\r\n        var colspan = cacheEntry.cellColSpans[i];\r\n        if (columnPosLeft[i] > range.rightPx ||\r\n          columnPosRight[Math.min(columns.length - 1, i + colspan - 1)] < range.leftPx) {\r\n          if (!(row == activeRow && i == activeCell)) {\r\n            cellsToRemove.push(i);\r\n          }\r\n        }\r\n      }\r\n\r\n      var cellToRemove;\r\n      while ((cellToRemove = cellsToRemove.pop()) != null) {\r\n        cacheEntry.rowNode.removeChild(cacheEntry.cellNodesByColumnIdx[cellToRemove]);\r\n        delete cacheEntry.cellColSpans[cellToRemove];\r\n        delete cacheEntry.cellNodesByColumnIdx[cellToRemove];\r\n        if (postProcessedRows[row]) {\r\n          delete postProcessedRows[row][cellToRemove];\r\n        }\r\n        totalCellsRemoved++;\r\n      }\r\n    }\r\n\r\n    function cleanUpAndRenderCells(range) {\r\n      var cacheEntry;\r\n      var stringArray = [];\r\n      var processedRows = [];\r\n      var cellsAdded;\r\n      var totalCellsAdded = 0;\r\n      var colspan;\r\n\r\n      for (var row = range.top, btm = range.bottom; row <= btm; row++) {\r\n        cacheEntry = rowsCache[row];\r\n        if (!cacheEntry) {\r\n          continue;\r\n        }\r\n\r\n        // cellRenderQueue populated in renderRows() needs to be cleared first\r\n        ensureCellNodesInRowsCache(row);\r\n\r\n        cleanUpCells(range, row);\r\n\r\n        // Render missing cells.\r\n        cellsAdded = 0;\r\n\r\n        var metadata = data.getItemMetadata && data.getItemMetadata(row);\r\n        metadata = metadata && metadata.columns;\r\n\r\n        var d = getDataItem(row);\r\n\r\n        // TODO:  shorten this loop (index? heuristics? binary search?)\r\n        for (var i = 0, ii = columns.length; i < ii; i++) {\r\n          // Cells to the right are outside the range.\r\n          if (columnPosLeft[i] > range.rightPx) {\r\n            break;\r\n          }\r\n\r\n          // Already rendered.\r\n          if ((colspan = cacheEntry.cellColSpans[i]) != null) {\r\n            i += (colspan > 1 ? colspan - 1 : 0);\r\n            continue;\r\n          }\r\n\r\n          colspan = 1;\r\n          if (metadata) {\r\n            var columnData = metadata[columns[i].id] || metadata[i];\r\n            colspan = (columnData && columnData.colspan) || 1;\r\n            if (colspan === \"*\") {\r\n              colspan = ii - i;\r\n            }\r\n          }\r\n\r\n          if (columnPosRight[Math.min(ii - 1, i + colspan - 1)] > range.leftPx) {\r\n            appendCellHtml(stringArray, row, i, colspan, d);\r\n            cellsAdded++;\r\n          }\r\n\r\n          i += (colspan > 1 ? colspan - 1 : 0);\r\n        }\r\n\r\n        if (cellsAdded) {\r\n          totalCellsAdded += cellsAdded;\r\n          processedRows.push(row);\r\n        }\r\n      }\r\n\r\n      if (!stringArray.length) {\r\n        return;\r\n      }\r\n\r\n      var x = document.createElement(\"div\");\r\n      x.innerHTML = stringArray.join(\"\");\r\n\r\n      var processedRow;\r\n      var node;\r\n      while ((processedRow = processedRows.pop()) != null) {\r\n        cacheEntry = rowsCache[processedRow];\r\n        var columnIdx;\r\n        while ((columnIdx = cacheEntry.cellRenderQueue.pop()) != null) {\r\n          node = x.lastChild;\r\n          cacheEntry.rowNode.appendChild(node);\r\n          cacheEntry.cellNodesByColumnIdx[columnIdx] = node;\r\n        }\r\n      }\r\n    }\r\n\r\n    function renderRows(range) {\r\n      var parentNode = $canvas[0],\r\n          stringArray = [],\r\n          rows = [],\r\n          needToReselectCell = false,\r\n          dataLength = getDataLength();\r\n\r\n      for (var i = range.top, ii = range.bottom; i <= ii; i++) {\r\n        if (rowsCache[i]) {\r\n          continue;\r\n        }\r\n        renderedRows++;\r\n        rows.push(i);\r\n\r\n        // Create an entry right away so that appendRowHtml() can\r\n        // start populatating it.\r\n        rowsCache[i] = {\r\n          \"rowNode\": null,\r\n\r\n          // ColSpans of rendered cells (by column idx).\r\n          // Can also be used for checking whether a cell has been rendered.\r\n          \"cellColSpans\": [],\r\n\r\n          // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().\r\n          \"cellNodesByColumnIdx\": [],\r\n\r\n          // Column indices of cell nodes that have been rendered, but not yet indexed in\r\n          // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the\r\n          // end of the row.\r\n          \"cellRenderQueue\": []\r\n        };\r\n\r\n        appendRowHtml(stringArray, i, range, dataLength);\r\n        if (activeCellNode && activeRow === i) {\r\n          needToReselectCell = true;\r\n        }\r\n        counter_rows_rendered++;\r\n      }\r\n\r\n      if (!rows.length) { return; }\r\n\r\n      var x = document.createElement(\"div\");\r\n      x.innerHTML = stringArray.join(\"\");\r\n\r\n      for (var i = 0, ii = rows.length; i < ii; i++) {\r\n        rowsCache[rows[i]].rowNode = parentNode.appendChild(x.firstChild);\r\n      }\r\n\r\n      if (needToReselectCell) {\r\n        activeCellNode = getCellNode(activeRow, activeCell);\r\n      }\r\n    }\r\n\r\n    function startPostProcessing() {\r\n      if (!options.enableAsyncPostRender) {\r\n        return;\r\n      }\r\n      clearTimeout(h_postrender);\r\n      h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);\r\n    }\r\n\r\n    function invalidatePostProcessingResults(row) {\r\n      delete postProcessedRows[row];\r\n      postProcessFromRow = Math.min(postProcessFromRow, row);\r\n      postProcessToRow = Math.max(postProcessToRow, row);\r\n      startPostProcessing();\r\n    }\r\n\r\n    function updateRowPositions() {\r\n      for (var row in rowsCache) {\r\n        rowsCache[row].rowNode.style.top = getRowTop(row) + \"px\";\r\n      }\r\n    }\r\n\r\n    function render() {\r\n      if (!initialized) { return; }\r\n      var visible = getVisibleRange();\r\n      var rendered = getRenderedRange();\r\n\r\n      // remove rows no longer in the viewport\r\n      cleanupRows(rendered);\r\n\r\n      // add new rows & missing cells in existing rows\r\n      if (lastRenderedScrollLeft != scrollLeft) {\r\n        cleanUpAndRenderCells(rendered);\r\n      }\r\n\r\n      // render missing rows\r\n      renderRows(rendered);\r\n\r\n      postProcessFromRow = visible.top;\r\n      postProcessToRow = Math.min(getDataLengthIncludingAddNew() - 1, visible.bottom);\r\n      startPostProcessing();\r\n\r\n      lastRenderedScrollTop = scrollTop;\r\n      lastRenderedScrollLeft = scrollLeft;\r\n      h_render = null;\r\n    }\r\n\r\n    function handleHeaderRowScroll() {\r\n      var scrollLeft = $headerRowScroller[0].scrollLeft;\r\n      if (scrollLeft != $viewport[0].scrollLeft) {\r\n        $viewport[0].scrollLeft = scrollLeft;\r\n      }\r\n    }\r\n\r\n    function handleScroll() {\r\n      scrollTop = $viewport[0].scrollTop;\r\n      scrollLeft = $viewport[0].scrollLeft;\r\n      var vScrollDist = Math.abs(scrollTop - prevScrollTop);\r\n      var hScrollDist = Math.abs(scrollLeft - prevScrollLeft);\r\n\r\n      if (hScrollDist) {\r\n        prevScrollLeft = scrollLeft;\r\n        $headerScroller[0].scrollLeft = scrollLeft;\r\n        $topPanelScroller[0].scrollLeft = scrollLeft;\r\n        $headerRowScroller[0].scrollLeft = scrollLeft;\r\n      }\r\n\r\n      if (vScrollDist) {\r\n        vScrollDir = prevScrollTop < scrollTop ? 1 : -1;\r\n        prevScrollTop = scrollTop;\r\n\r\n        // switch virtual pages if needed\r\n        if (vScrollDist < viewportH) {\r\n          scrollTo(scrollTop + offset);\r\n        } else {\r\n          var oldOffset = offset;\r\n          if (h == viewportH) {\r\n            page = 0;\r\n          } else {\r\n            page = Math.min(n - 1, Math.floor(scrollTop * ((th - viewportH) / (h - viewportH)) * (1 / ph)));\r\n          }\r\n          offset = Math.round(page * cj);\r\n          if (oldOffset != offset) {\r\n            invalidateAllRows();\r\n          }\r\n        }\r\n      }\r\n\r\n      if (hScrollDist || vScrollDist) {\r\n        if (h_render) {\r\n          clearTimeout(h_render);\r\n        }\r\n\r\n        if (Math.abs(lastRenderedScrollTop - scrollTop) > 20 ||\r\n            Math.abs(lastRenderedScrollLeft - scrollLeft) > 20) {\r\n          if (options.forceSyncScrolling || (\r\n              Math.abs(lastRenderedScrollTop - scrollTop) < viewportH &&\r\n              Math.abs(lastRenderedScrollLeft - scrollLeft) < viewportW)) {\r\n            render();\r\n          } else {\r\n            h_render = setTimeout(render, 50);\r\n          }\r\n\r\n          trigger(self.onViewportChanged, {});\r\n        }\r\n      }\r\n\r\n      trigger(self.onScroll, {scrollLeft: scrollLeft, scrollTop: scrollTop});\r\n    }\r\n\r\n    function asyncPostProcessRows() {\r\n      var dataLength = getDataLength();\r\n      while (postProcessFromRow <= postProcessToRow) {\r\n        var row = (vScrollDir >= 0) ? postProcessFromRow++ : postProcessToRow--;\r\n        var cacheEntry = rowsCache[row];\r\n        if (!cacheEntry || row >= dataLength) {\r\n          continue;\r\n        }\r\n\r\n        if (!postProcessedRows[row]) {\r\n          postProcessedRows[row] = {};\r\n        }\r\n\r\n        ensureCellNodesInRowsCache(row);\r\n        for (var columnIdx in cacheEntry.cellNodesByColumnIdx) {\r\n          if (!cacheEntry.cellNodesByColumnIdx.hasOwnProperty(columnIdx)) {\r\n            continue;\r\n          }\r\n\r\n          columnIdx = columnIdx | 0;\r\n\r\n          var m = columns[columnIdx];\r\n          if (m.asyncPostRender && !postProcessedRows[row][columnIdx]) {\r\n            var node = cacheEntry.cellNodesByColumnIdx[columnIdx];\r\n            if (node) {\r\n              m.asyncPostRender(node, row, getDataItem(row), m);\r\n            }\r\n            postProcessedRows[row][columnIdx] = true;\r\n          }\r\n        }\r\n\r\n        h_postrender = setTimeout(asyncPostProcessRows, options.asyncPostRenderDelay);\r\n        return;\r\n      }\r\n    }\r\n\r\n    function updateCellCssStylesOnRenderedRows(addedHash, removedHash) {\r\n      var node, columnId, addedRowHash, removedRowHash;\r\n      for (var row in rowsCache) {\r\n        removedRowHash = removedHash && removedHash[row];\r\n        addedRowHash = addedHash && addedHash[row];\r\n\r\n        if (removedRowHash) {\r\n          for (columnId in removedRowHash) {\r\n            if (!addedRowHash || removedRowHash[columnId] != addedRowHash[columnId]) {\r\n              node = getCellNode(row, getColumnIndex(columnId));\r\n              if (node) {\r\n                $(node).removeClass(removedRowHash[columnId]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (addedRowHash) {\r\n          for (columnId in addedRowHash) {\r\n            if (!removedRowHash || removedRowHash[columnId] != addedRowHash[columnId]) {\r\n              node = getCellNode(row, getColumnIndex(columnId));\r\n              if (node) {\r\n                $(node).addClass(addedRowHash[columnId]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function addCellCssStyles(key, hash) {\r\n      if (cellCssClasses[key]) {\r\n        throw \"addCellCssStyles: cell CSS hash with key '\" + key + \"' already exists.\";\r\n      }\r\n\r\n      cellCssClasses[key] = hash;\r\n      updateCellCssStylesOnRenderedRows(hash, null);\r\n\r\n      trigger(self.onCellCssStylesChanged, { \"key\": key, \"hash\": hash });\r\n    }\r\n\r\n    function removeCellCssStyles(key) {\r\n      if (!cellCssClasses[key]) {\r\n        return;\r\n      }\r\n\r\n      updateCellCssStylesOnRenderedRows(null, cellCssClasses[key]);\r\n      delete cellCssClasses[key];\r\n\r\n      trigger(self.onCellCssStylesChanged, { \"key\": key, \"hash\": null });\r\n    }\r\n\r\n    function setCellCssStyles(key, hash) {\r\n      var prevHash = cellCssClasses[key];\r\n\r\n      cellCssClasses[key] = hash;\r\n      updateCellCssStylesOnRenderedRows(hash, prevHash);\r\n\r\n      trigger(self.onCellCssStylesChanged, { \"key\": key, \"hash\": hash });\r\n    }\r\n\r\n    function getCellCssStyles(key) {\r\n      return cellCssClasses[key];\r\n    }\r\n\r\n    function flashCell(row, cell, speed) {\r\n      speed = speed || 100;\r\n      if (rowsCache[row]) {\r\n        var $cell = $(getCellNode(row, cell));\r\n\r\n        function toggleCellClass(times) {\r\n          if (!times) {\r\n            return;\r\n          }\r\n          setTimeout(function () {\r\n                $cell.queue(function () {\r\n                  $cell.toggleClass(options.cellFlashingCssClass).dequeue();\r\n                  toggleCellClass(times - 1);\r\n                });\r\n              },\r\n              speed);\r\n        }\r\n\r\n        toggleCellClass(4);\r\n      }\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Interactivity\r\n\r\n    function handleMouseWheel(e) {\r\n      var rowNode = $(e.target).closest(\".slick-row\")[0];\r\n      if (rowNode != rowNodeFromLastMouseWheelEvent) {\r\n        if (zombieRowNodeFromLastMouseWheelEvent && zombieRowNodeFromLastMouseWheelEvent != rowNode) {\r\n          $canvas[0].removeChild(zombieRowNodeFromLastMouseWheelEvent);\r\n          zombieRowNodeFromLastMouseWheelEvent = null;\r\n        }\r\n        rowNodeFromLastMouseWheelEvent = rowNode;      \r\n      }\r\n    }\r\n\r\n    function handleDragInit(e, dd) {\r\n      var cell = getCellFromEvent(e);\r\n      if (!cell || !cellExists(cell.row, cell.cell)) {\r\n        return false;\r\n      }\r\n\r\n      var retval = trigger(self.onDragInit, dd, e);\r\n      if (e.isImmediatePropagationStopped()) {\r\n        return retval;\r\n      }\r\n\r\n      // if nobody claims to be handling drag'n'drop by stopping immediate propagation,\r\n      // cancel out of it\r\n      return false;\r\n    }\r\n\r\n    function handleDragStart(e, dd) {\r\n      var cell = getCellFromEvent(e);\r\n      if (!cell || !cellExists(cell.row, cell.cell)) {\r\n        return false;\r\n      }\r\n\r\n      var retval = trigger(self.onDragStart, dd, e);\r\n      if (e.isImmediatePropagationStopped()) {\r\n        return retval;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    function handleDrag(e, dd) {\r\n      return trigger(self.onDrag, dd, e);\r\n    }\r\n\r\n    function handleDragEnd(e, dd) {\r\n      trigger(self.onDragEnd, dd, e);\r\n    }\r\n\r\n    function handleKeyDown(e) {\r\n      trigger(self.onKeyDown, {row: activeRow, cell: activeCell}, e);\r\n      var handled = e.isImmediatePropagationStopped();\r\n\r\n      if (!handled) {\r\n        if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\r\n          if (e.which == 27) {\r\n            if (!getEditorLock().isActive()) {\r\n              return; // no editing mode to cancel, allow bubbling and default processing (exit without cancelling the event)\r\n            }\r\n            cancelEditAndSetFocus();\r\n          } else if (e.which == 34) {\r\n            navigatePageDown();\r\n            handled = true;           \r\n          } else if (e.which == 33) {\r\n            navigatePageUp();\r\n            handled = true;\r\n          } else if (e.which == 37) {\r\n            handled = navigateLeft();\r\n          } else if (e.which == 39) {\r\n            handled = navigateRight();\r\n          } else if (e.which == 38) {\r\n            handled = navigateUp();\r\n          } else if (e.which == 40) {\r\n            handled = navigateDown();\r\n          } else if (e.which == 9) {\r\n            handled = navigateNext();\r\n          } else if (e.which == 13) {\r\n            if (options.editable) {\r\n              if (currentEditor) {\r\n                // adding new row\r\n                if (activeRow === getDataLength()) {\r\n                  navigateDown();\r\n                } else {\r\n                  commitEditAndSetFocus();\r\n                }\r\n              } else {\r\n                if (getEditorLock().commitCurrentEdit()) {\r\n                  makeActiveCellEditable();\r\n                }\r\n              }\r\n            }\r\n            handled = true;\r\n          }\r\n        } else if (e.which == 9 && e.shiftKey && !e.ctrlKey && !e.altKey) {\r\n          handled = navigatePrev();\r\n        }\r\n      }\r\n\r\n      if (handled) {\r\n        // the event has been handled so don't let parent element (bubbling/propagation) or browser (default) handle it\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        try {\r\n          e.originalEvent.keyCode = 0; // prevent default behaviour for special keys in IE browsers (F3, F5, etc.)\r\n        }\r\n        // ignore exceptions - setting the original event's keycode throws access denied exception for \"Ctrl\"\r\n        // (hitting control key only, nothing else), \"Shift\" (maybe others)\r\n        catch (error) {\r\n        }\r\n      }\r\n    }\r\n\r\n    function handleClick(e) {\r\n      if (!currentEditor) {\r\n        // if this click resulted in some cell child node getting focus,\r\n        // don't steal it back - keyboard events will still bubble up\r\n        // IE9+ seems to default DIVs to tabIndex=0 instead of -1, so check for cell clicks directly.\r\n        if (e.target != document.activeElement || $(e.target).hasClass(\"slick-cell\")) {\r\n          setFocus();\r\n        }\r\n      }\r\n\r\n      var cell = getCellFromEvent(e);\r\n      if (!cell || (currentEditor !== null && activeRow == cell.row && activeCell == cell.cell)) {\r\n        return;\r\n      }\r\n\r\n      trigger(self.onClick, {row: cell.row, cell: cell.cell}, e);\r\n      if (e.isImmediatePropagationStopped()) {\r\n        return;\r\n      }\r\n\r\n      if ((activeCell != cell.cell || activeRow != cell.row) && canCellBeActive(cell.row, cell.cell)) {\r\n        if (!getEditorLock().isActive() || getEditorLock().commitCurrentEdit()) {\r\n          scrollRowIntoView(cell.row, false);\r\n          setActiveCellInternal(getCellNode(cell.row, cell.cell));\r\n        }\r\n      }\r\n    }\r\n\r\n    function handleContextMenu(e) {\r\n      var $cell = $(e.target).closest(\".slick-cell\", $canvas);\r\n      if ($cell.length === 0) {\r\n        return;\r\n      }\r\n\r\n      // are we editing this cell?\r\n      if (activeCellNode === $cell[0] && currentEditor !== null) {\r\n        return;\r\n      }\r\n\r\n      trigger(self.onContextMenu, {}, e);\r\n    }\r\n\r\n    function handleDblClick(e) {\r\n      var cell = getCellFromEvent(e);\r\n      if (!cell || (currentEditor !== null && activeRow == cell.row && activeCell == cell.cell)) {\r\n        return;\r\n      }\r\n\r\n      trigger(self.onDblClick, {row: cell.row, cell: cell.cell}, e);\r\n      if (e.isImmediatePropagationStopped()) {\r\n        return;\r\n      }\r\n\r\n      if (options.editable) {\r\n        gotoCell(cell.row, cell.cell, true);\r\n      }\r\n    }\r\n\r\n    function handleHeaderMouseEnter(e) {\r\n      trigger(self.onHeaderMouseEnter, {\r\n        \"column\": $(this).data(\"column\")\r\n      }, e);\r\n    }\r\n\r\n    function handleHeaderMouseLeave(e) {\r\n      trigger(self.onHeaderMouseLeave, {\r\n        \"column\": $(this).data(\"column\")\r\n      }, e);\r\n    }\r\n\r\n    function handleHeaderContextMenu(e) {\r\n      var $header = $(e.target).closest(\".slick-header-column\", \".slick-header-columns\");\r\n      var column = $header && $header.data(\"column\");\r\n      trigger(self.onHeaderContextMenu, {column: column}, e);\r\n    }\r\n\r\n    function handleHeaderClick(e) {\r\n      var $header = $(e.target).closest(\".slick-header-column\", \".slick-header-columns\");\r\n      var column = $header && $header.data(\"column\");\r\n      if (column) {\r\n        trigger(self.onHeaderClick, {column: column}, e);\r\n      }\r\n    }\r\n\r\n    function handleMouseEnter(e) {\r\n      trigger(self.onMouseEnter, {}, e);\r\n    }\r\n\r\n    function handleMouseLeave(e) {\r\n      trigger(self.onMouseLeave, {}, e);\r\n    }\r\n\r\n    function cellExists(row, cell) {\r\n      return !(row < 0 || row >= getDataLength() || cell < 0 || cell >= columns.length);\r\n    }\r\n\r\n    function getCellFromPoint(x, y) {\r\n      var row = getRowFromPosition(y);\r\n      var cell = 0;\r\n\r\n      var w = 0;\r\n      for (var i = 0; i < columns.length && w < x; i++) {\r\n        w += columns[i].width;\r\n        cell++;\r\n      }\r\n\r\n      if (cell < 0) {\r\n        cell = 0;\r\n      }\r\n\r\n      return {row: row, cell: cell - 1};\r\n    }\r\n\r\n    function getCellFromNode(cellNode) {\r\n      // read column number from .l<columnNumber> CSS class\r\n      var cls = /l\\d+/.exec(cellNode.className);\r\n      if (!cls) {\r\n        throw \"getCellFromNode: cannot get cell - \" + cellNode.className;\r\n      }\r\n      return parseInt(cls[0].substr(1, cls[0].length - 1), 10);\r\n    }\r\n\r\n    function getRowFromNode(rowNode) {\r\n      for (var row in rowsCache) {\r\n        if (rowsCache[row].rowNode === rowNode) {\r\n          return row | 0;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    function getCellFromEvent(e) {\r\n      var $cell = $(e.target).closest(\".slick-cell\", $canvas);\r\n      if (!$cell.length) {\r\n        return null;\r\n      }\r\n\r\n      var row = getRowFromNode($cell[0].parentNode);\r\n      var cell = getCellFromNode($cell[0]);\r\n\r\n      if (row == null || cell == null) {\r\n        return null;\r\n      } else {\r\n        return {\r\n          \"row\": row,\r\n          \"cell\": cell\r\n        };\r\n      }\r\n    }\r\n\r\n    function getCellNodeBox(row, cell) {\r\n      if (!cellExists(row, cell)) {\r\n        return null;\r\n      }\r\n\r\n      var y1 = getRowTop(row);\r\n      var y2 = y1 + options.rowHeight - 1;\r\n      var x1 = 0;\r\n      for (var i = 0; i < cell; i++) {\r\n        x1 += columns[i].width;\r\n      }\r\n      var x2 = x1 + columns[cell].width;\r\n\r\n      return {\r\n        top: y1,\r\n        left: x1,\r\n        bottom: y2,\r\n        right: x2\r\n      };\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Cell switching\r\n\r\n    function resetActiveCell() {\r\n      setActiveCellInternal(null, false);\r\n    }\r\n\r\n    function setFocus() {\r\n      if (tabbingDirection == -1) {\r\n        $focusSink[0].focus();\r\n      } else {\r\n        $focusSink2[0].focus();\r\n      }\r\n    }\r\n\r\n    function scrollCellIntoView(row, cell, doPaging) {\r\n      scrollRowIntoView(row, doPaging);\r\n\r\n      var colspan = getColspan(row, cell);\r\n      var left = columnPosLeft[cell],\r\n        right = columnPosRight[cell + (colspan > 1 ? colspan - 1 : 0)],\r\n        scrollRight = scrollLeft + viewportW;\r\n\r\n      if (left < scrollLeft) {\r\n        $viewport.scrollLeft(left);\r\n        handleScroll();\r\n        render();\r\n      } else if (right > scrollRight) {\r\n        $viewport.scrollLeft(Math.min(left, right - $viewport[0].clientWidth));\r\n        handleScroll();\r\n        render();\r\n      }\r\n    }\r\n\r\n    function setActiveCellInternal(newCell, opt_editMode) {\r\n      if (activeCellNode !== null) {\r\n        makeActiveCellNormal();\r\n        $(activeCellNode).removeClass(\"active\");\r\n        if (rowsCache[activeRow]) {\r\n          $(rowsCache[activeRow].rowNode).removeClass(\"active\");\r\n        }\r\n      }\r\n\r\n      var activeCellChanged = (activeCellNode !== newCell);\r\n      activeCellNode = newCell;\r\n\r\n      if (activeCellNode != null) {\r\n        activeRow = getRowFromNode(activeCellNode.parentNode);\r\n        activeCell = activePosX = getCellFromNode(activeCellNode);\r\n\r\n        if (opt_editMode == null) {\r\n          opt_editMode = (activeRow == getDataLength()) || options.autoEdit;\r\n        }\r\n\r\n        $(activeCellNode).addClass(\"active\");\r\n        $(rowsCache[activeRow].rowNode).addClass(\"active\");\r\n\r\n        if (options.editable && opt_editMode && isCellPotentiallyEditable(activeRow, activeCell)) {\r\n          clearTimeout(h_editorLoader);\r\n\r\n          if (options.asyncEditorLoading) {\r\n            h_editorLoader = setTimeout(function () {\r\n              makeActiveCellEditable();\r\n            }, options.asyncEditorLoadDelay);\r\n          } else {\r\n            makeActiveCellEditable();\r\n          }\r\n        }\r\n      } else {\r\n        activeRow = activeCell = null;\r\n      }\r\n\r\n      if (activeCellChanged) {\r\n        trigger(self.onActiveCellChanged, getActiveCell());\r\n      }\r\n    }\r\n\r\n    function clearTextSelection() {\r\n      if (document.selection && document.selection.empty) {\r\n        try {\r\n          //IE fails here if selected element is not in dom\r\n          document.selection.empty();\r\n        } catch (e) { }\r\n      } else if (window.getSelection) {\r\n        var sel = window.getSelection();\r\n        if (sel && sel.removeAllRanges) {\r\n          sel.removeAllRanges();\r\n        }\r\n      }\r\n    }\r\n\r\n    function isCellPotentiallyEditable(row, cell) {\r\n      var dataLength = getDataLength();\r\n      // is the data for this row loaded?\r\n      if (row < dataLength && !getDataItem(row)) {\r\n        return false;\r\n      }\r\n\r\n      // are we in the Add New row?  can we create new from this cell?\r\n      if (columns[cell].cannotTriggerInsert && row >= dataLength) {\r\n        return false;\r\n      }\r\n\r\n      // does this cell have an editor?\r\n      if (!getEditor(row, cell)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function makeActiveCellNormal() {\r\n      if (!currentEditor) {\r\n        return;\r\n      }\r\n      trigger(self.onBeforeCellEditorDestroy, {editor: currentEditor});\r\n      currentEditor.destroy();\r\n      currentEditor = null;\r\n\r\n      if (activeCellNode) {\r\n        var d = getDataItem(activeRow);\r\n        $(activeCellNode).removeClass(\"editable invalid\");\r\n        if (d) {\r\n          var column = columns[activeCell];\r\n          var formatter = getFormatter(activeRow, column);\r\n          activeCellNode.innerHTML = formatter(activeRow, activeCell, getDataItemValueForColumn(d, column), column, d);\r\n          invalidatePostProcessingResults(activeRow);\r\n        }\r\n      }\r\n\r\n      // if there previously was text selected on a page (such as selected text in the edit cell just removed),\r\n      // IE can't set focus to anything else correctly\r\n      if (navigator.userAgent.toLowerCase().match(/msie/)) {\r\n        clearTextSelection();\r\n      }\r\n\r\n      getEditorLock().deactivate(editController);\r\n    }\r\n\r\n    function makeActiveCellEditable(editor) {\r\n      if (!activeCellNode) {\r\n        return;\r\n      }\r\n      if (!options.editable) {\r\n        throw \"Grid : makeActiveCellEditable : should never get called when options.editable is false\";\r\n      }\r\n\r\n      // cancel pending async call if there is one\r\n      clearTimeout(h_editorLoader);\r\n\r\n      if (!isCellPotentiallyEditable(activeRow, activeCell)) {\r\n        return;\r\n      }\r\n\r\n      var columnDef = columns[activeCell];\r\n      var item = getDataItem(activeRow);\r\n\r\n      if (trigger(self.onBeforeEditCell, {row: activeRow, cell: activeCell, item: item, column: columnDef}) === false) {\r\n        setFocus();\r\n        return;\r\n      }\r\n\r\n      getEditorLock().activate(editController);\r\n      $(activeCellNode).addClass(\"editable\");\r\n\r\n      // don't clear the cell if a custom editor is passed through\r\n      if (!editor) {\r\n        activeCellNode.innerHTML = \"\";\r\n      }\r\n\r\n      currentEditor = new (editor || getEditor(activeRow, activeCell))({\r\n        grid: self,\r\n        gridPosition: absBox($container[0]),\r\n        position: absBox(activeCellNode),\r\n        container: activeCellNode,\r\n        column: columnDef,\r\n        item: item || {},\r\n        commitChanges: commitEditAndSetFocus,\r\n        cancelChanges: cancelEditAndSetFocus\r\n      });\r\n\r\n      if (item) {\r\n        currentEditor.loadValue(item);\r\n      }\r\n\r\n      serializedEditorValue = currentEditor.serializeValue();\r\n\r\n      if (currentEditor.position) {\r\n        handleActiveCellPositionChange();\r\n      }\r\n    }\r\n\r\n    function commitEditAndSetFocus() {\r\n      // if the commit fails, it would do so due to a validation error\r\n      // if so, do not steal the focus from the editor\r\n      if (getEditorLock().commitCurrentEdit()) {\r\n        setFocus();\r\n        if (options.autoEdit) {\r\n          navigateDown();\r\n        }\r\n      }\r\n    }\r\n\r\n    function cancelEditAndSetFocus() {\r\n      if (getEditorLock().cancelCurrentEdit()) {\r\n        setFocus();\r\n      }\r\n    }\r\n\r\n    function absBox(elem) {\r\n      var box = {\r\n        top: elem.offsetTop,\r\n        left: elem.offsetLeft,\r\n        bottom: 0,\r\n        right: 0,\r\n        width: $(elem).outerWidth(),\r\n        height: $(elem).outerHeight(),\r\n        visible: true};\r\n      box.bottom = box.top + box.height;\r\n      box.right = box.left + box.width;\r\n\r\n      // walk up the tree\r\n      var offsetParent = elem.offsetParent;\r\n      while ((elem = elem.parentNode) != document.body) {\r\n        if (box.visible && elem.scrollHeight != elem.offsetHeight && $(elem).css(\"overflowY\") != \"visible\") {\r\n          box.visible = box.bottom > elem.scrollTop && box.top < elem.scrollTop + elem.clientHeight;\r\n        }\r\n\r\n        if (box.visible && elem.scrollWidth != elem.offsetWidth && $(elem).css(\"overflowX\") != \"visible\") {\r\n          box.visible = box.right > elem.scrollLeft && box.left < elem.scrollLeft + elem.clientWidth;\r\n        }\r\n\r\n        box.left -= elem.scrollLeft;\r\n        box.top -= elem.scrollTop;\r\n\r\n        if (elem === offsetParent) {\r\n          box.left += elem.offsetLeft;\r\n          box.top += elem.offsetTop;\r\n          offsetParent = elem.offsetParent;\r\n        }\r\n\r\n        box.bottom = box.top + box.height;\r\n        box.right = box.left + box.width;\r\n      }\r\n\r\n      return box;\r\n    }\r\n\r\n    function getActiveCellPosition() {\r\n      return absBox(activeCellNode);\r\n    }\r\n\r\n    function getGridPosition() {\r\n      return absBox($container[0])\r\n    }\r\n\r\n    function handleActiveCellPositionChange() {\r\n      if (!activeCellNode) {\r\n        return;\r\n      }\r\n\r\n      trigger(self.onActiveCellPositionChanged, {});\r\n\r\n      if (currentEditor) {\r\n        var cellBox = getActiveCellPosition();\r\n        if (currentEditor.show && currentEditor.hide) {\r\n          if (!cellBox.visible) {\r\n            currentEditor.hide();\r\n          } else {\r\n            currentEditor.show();\r\n          }\r\n        }\r\n\r\n        if (currentEditor.position) {\r\n          currentEditor.position(cellBox);\r\n        }\r\n      }\r\n    }\r\n\r\n    function getCellEditor() {\r\n      return currentEditor;\r\n    }\r\n\r\n    function getActiveCell() {\r\n      if (!activeCellNode) {\r\n        return null;\r\n      } else {\r\n        return {row: activeRow, cell: activeCell};\r\n      }\r\n    }\r\n\r\n    function getActiveCellNode() {\r\n      return activeCellNode;\r\n    }\r\n\r\n    function scrollRowIntoView(row, doPaging) {\r\n      var rowAtTop = row * options.rowHeight;\r\n      var rowAtBottom = (row + 1) * options.rowHeight - viewportH + (viewportHasHScroll ? scrollbarDimensions.height : 0);\r\n\r\n      // need to page down?\r\n      if ((row + 1) * options.rowHeight > scrollTop + viewportH + offset) {\r\n        scrollTo(doPaging ? rowAtTop : rowAtBottom);\r\n        render();\r\n      }\r\n      // or page up?\r\n      else if (row * options.rowHeight < scrollTop + offset) {\r\n        scrollTo(doPaging ? rowAtBottom : rowAtTop);\r\n        render();\r\n      }\r\n    }\r\n\r\n    function scrollRowToTop(row) {\r\n      scrollTo(row * options.rowHeight);\r\n      render();\r\n    }\r\n\r\n    function scrollPage(dir) {\r\n      var deltaRows = dir * numVisibleRows;\r\n      scrollTo((getRowFromPosition(scrollTop) + deltaRows) * options.rowHeight);\r\n      render();\r\n\r\n      if (options.enableCellNavigation && activeRow != null) {\r\n        var row = activeRow + deltaRows;\r\n        var dataLengthIncludingAddNew = getDataLengthIncludingAddNew();\r\n        if (row >= dataLengthIncludingAddNew) {\r\n          row = dataLengthIncludingAddNew - 1;\r\n        }\r\n        if (row < 0) {\r\n          row = 0;\r\n        }\r\n\r\n        var cell = 0, prevCell = null;\r\n        var prevActivePosX = activePosX;\r\n        while (cell <= activePosX) {\r\n          if (canCellBeActive(row, cell)) {\r\n            prevCell = cell;  \r\n          }\r\n          cell += getColspan(row, cell);\r\n        }\r\n\r\n        if (prevCell !== null) {\r\n          setActiveCellInternal(getCellNode(row, prevCell));\r\n          activePosX = prevActivePosX;\r\n        } else {\r\n          resetActiveCell();\r\n        }\r\n      }\r\n    }\r\n\r\n    function navigatePageDown() {\r\n      scrollPage(1);\r\n    }\r\n\r\n    function navigatePageUp() {\r\n      scrollPage(-1);\r\n    }\r\n\r\n    function getColspan(row, cell) {\r\n      var metadata = data.getItemMetadata && data.getItemMetadata(row);\r\n      if (!metadata || !metadata.columns) {\r\n        return 1;\r\n      }\r\n\r\n      var columnData = metadata.columns[columns[cell].id] || metadata.columns[cell];\r\n      var colspan = (columnData && columnData.colspan);\r\n      if (colspan === \"*\") {\r\n        colspan = columns.length - cell;\r\n      } else {\r\n        colspan = colspan || 1;\r\n      }\r\n\r\n      return colspan;\r\n    }\r\n\r\n    function findFirstFocusableCell(row) {\r\n      var cell = 0;\r\n      while (cell < columns.length) {\r\n        if (canCellBeActive(row, cell)) {\r\n          return cell;\r\n        }\r\n        cell += getColspan(row, cell);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    function findLastFocusableCell(row) {\r\n      var cell = 0;\r\n      var lastFocusableCell = null;\r\n      while (cell < columns.length) {\r\n        if (canCellBeActive(row, cell)) {\r\n          lastFocusableCell = cell;\r\n        }\r\n        cell += getColspan(row, cell);\r\n      }\r\n      return lastFocusableCell;\r\n    }\r\n\r\n    function gotoRight(row, cell, posX) {\r\n      if (cell >= columns.length) {\r\n        return null;\r\n      }\r\n\r\n      do {\r\n        cell += getColspan(row, cell);\r\n      }\r\n      while (cell < columns.length && !canCellBeActive(row, cell));\r\n\r\n      if (cell < columns.length) {\r\n        return {\r\n          \"row\": row,\r\n          \"cell\": cell,\r\n          \"posX\": cell\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n\r\n    function gotoLeft(row, cell, posX) {\r\n      if (cell <= 0) {\r\n        return null;\r\n      }\r\n\r\n      var firstFocusableCell = findFirstFocusableCell(row);\r\n      if (firstFocusableCell === null || firstFocusableCell >= cell) {\r\n        return null;\r\n      }\r\n\r\n      var prev = {\r\n        \"row\": row,\r\n        \"cell\": firstFocusableCell,\r\n        \"posX\": firstFocusableCell\r\n      };\r\n      var pos;\r\n      while (true) {\r\n        pos = gotoRight(prev.row, prev.cell, prev.posX);\r\n        if (!pos) {\r\n          return null;\r\n        }\r\n        if (pos.cell >= cell) {\r\n          return prev;\r\n        }\r\n        prev = pos;\r\n      }\r\n    }\r\n\r\n    function gotoDown(row, cell, posX) {\r\n      var prevCell;\r\n      var dataLengthIncludingAddNew = getDataLengthIncludingAddNew();\r\n      while (true) {\r\n        if (++row >= dataLengthIncludingAddNew) {\r\n          return null;\r\n        }\r\n\r\n        prevCell = cell = 0;\r\n        while (cell <= posX) {\r\n          prevCell = cell;\r\n          cell += getColspan(row, cell);\r\n        }\r\n\r\n        if (canCellBeActive(row, prevCell)) {\r\n          return {\r\n            \"row\": row,\r\n            \"cell\": prevCell,\r\n            \"posX\": posX\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    function gotoUp(row, cell, posX) {\r\n      var prevCell;\r\n      while (true) {\r\n        if (--row < 0) {\r\n          return null;\r\n        }\r\n\r\n        prevCell = cell = 0;\r\n        while (cell <= posX) {\r\n          prevCell = cell;\r\n          cell += getColspan(row, cell);\r\n        }\r\n\r\n        if (canCellBeActive(row, prevCell)) {\r\n          return {\r\n            \"row\": row,\r\n            \"cell\": prevCell,\r\n            \"posX\": posX\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    function gotoNext(row, cell, posX) {\r\n      if (row == null && cell == null) {\r\n        row = cell = posX = 0;\r\n        if (canCellBeActive(row, cell)) {\r\n          return {\r\n            \"row\": row,\r\n            \"cell\": cell,\r\n            \"posX\": cell\r\n          };\r\n        }\r\n      }\r\n\r\n      var pos = gotoRight(row, cell, posX);\r\n      if (pos) {\r\n        return pos;\r\n      }\r\n\r\n      var firstFocusableCell = null;\r\n      var dataLengthIncludingAddNew = getDataLengthIncludingAddNew();\r\n      while (++row < dataLengthIncludingAddNew) {\r\n        firstFocusableCell = findFirstFocusableCell(row);\r\n        if (firstFocusableCell !== null) {\r\n          return {\r\n            \"row\": row,\r\n            \"cell\": firstFocusableCell,\r\n            \"posX\": firstFocusableCell\r\n          };\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    function gotoPrev(row, cell, posX) {\r\n      if (row == null && cell == null) {\r\n        row = getDataLengthIncludingAddNew() - 1;\r\n        cell = posX = columns.length - 1;\r\n        if (canCellBeActive(row, cell)) {\r\n          return {\r\n            \"row\": row,\r\n            \"cell\": cell,\r\n            \"posX\": cell\r\n          };\r\n        }\r\n      }\r\n\r\n      var pos;\r\n      var lastSelectableCell;\r\n      while (!pos) {\r\n        pos = gotoLeft(row, cell, posX);\r\n        if (pos) {\r\n          break;\r\n        }\r\n        if (--row < 0) {\r\n          return null;\r\n        }\r\n\r\n        cell = 0;\r\n        lastSelectableCell = findLastFocusableCell(row);\r\n        if (lastSelectableCell !== null) {\r\n          pos = {\r\n            \"row\": row,\r\n            \"cell\": lastSelectableCell,\r\n            \"posX\": lastSelectableCell\r\n          };\r\n        }\r\n      }\r\n      return pos;\r\n    }\r\n\r\n    function navigateRight() {\r\n      return navigate(\"right\");\r\n    }\r\n\r\n    function navigateLeft() {\r\n      return navigate(\"left\");\r\n    }\r\n\r\n    function navigateDown() {\r\n      return navigate(\"down\");\r\n    }\r\n\r\n    function navigateUp() {\r\n      return navigate(\"up\");\r\n    }\r\n\r\n    function navigateNext() {\r\n      return navigate(\"next\");\r\n    }\r\n\r\n    function navigatePrev() {\r\n      return navigate(\"prev\");\r\n    }\r\n\r\n    /**\r\n     * @param {string} dir Navigation direction.\r\n     * @return {boolean} Whether navigation resulted in a change of active cell.\r\n     */\r\n    function navigate(dir) {\r\n      if (!options.enableCellNavigation) {\r\n        return false;\r\n      }\r\n\r\n      if (!activeCellNode && dir != \"prev\" && dir != \"next\") {\r\n        return false;\r\n      }\r\n\r\n      if (!getEditorLock().commitCurrentEdit()) {\r\n        return true;\r\n      }\r\n      setFocus();\r\n\r\n      var tabbingDirections = {\r\n        \"up\": -1,\r\n        \"down\": 1,\r\n        \"left\": -1,\r\n        \"right\": 1,\r\n        \"prev\": -1,\r\n        \"next\": 1\r\n      };\r\n      tabbingDirection = tabbingDirections[dir];\r\n\r\n      var stepFunctions = {\r\n        \"up\": gotoUp,\r\n        \"down\": gotoDown,\r\n        \"left\": gotoLeft,\r\n        \"right\": gotoRight,\r\n        \"prev\": gotoPrev,\r\n        \"next\": gotoNext\r\n      };\r\n      var stepFn = stepFunctions[dir];\r\n      var pos = stepFn(activeRow, activeCell, activePosX);\r\n      if (pos) {\r\n        var isAddNewRow = (pos.row == getDataLength());\r\n        scrollCellIntoView(pos.row, pos.cell, !isAddNewRow);\r\n        setActiveCellInternal(getCellNode(pos.row, pos.cell));\r\n        activePosX = pos.posX;\r\n        return true;\r\n      } else {\r\n        setActiveCellInternal(getCellNode(activeRow, activeCell));\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function getCellNode(row, cell) {\r\n      if (rowsCache[row]) {\r\n        ensureCellNodesInRowsCache(row);\r\n        return rowsCache[row].cellNodesByColumnIdx[cell];\r\n      }\r\n      return null;\r\n    }\r\n\r\n    function setActiveCell(row, cell) {\r\n      if (!initialized) { return; }\r\n      if (row > getDataLength() || row < 0 || cell >= columns.length || cell < 0) {\r\n        return;\r\n      }\r\n\r\n      if (!options.enableCellNavigation) {\r\n        return;\r\n      }\r\n\r\n      scrollCellIntoView(row, cell, false);\r\n      setActiveCellInternal(getCellNode(row, cell), false);\r\n    }\r\n\r\n    function canCellBeActive(row, cell) {\r\n      if (!options.enableCellNavigation || row >= getDataLengthIncludingAddNew() ||\r\n          row < 0 || cell >= columns.length || cell < 0) {\r\n        return false;\r\n      }\r\n\r\n      var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\r\n      if (rowMetadata && typeof rowMetadata.focusable === \"boolean\") {\r\n        return rowMetadata.focusable;\r\n      }\r\n\r\n      var columnMetadata = rowMetadata && rowMetadata.columns;\r\n      if (columnMetadata && columnMetadata[columns[cell].id] && typeof columnMetadata[columns[cell].id].focusable === \"boolean\") {\r\n        return columnMetadata[columns[cell].id].focusable;\r\n      }\r\n      if (columnMetadata && columnMetadata[cell] && typeof columnMetadata[cell].focusable === \"boolean\") {\r\n        return columnMetadata[cell].focusable;\r\n      }\r\n\r\n      return columns[cell].focusable;\r\n    }\r\n\r\n    function canCellBeSelected(row, cell) {\r\n      if (row >= getDataLength() || row < 0 || cell >= columns.length || cell < 0) {\r\n        return false;\r\n      }\r\n\r\n      var rowMetadata = data.getItemMetadata && data.getItemMetadata(row);\r\n      if (rowMetadata && typeof rowMetadata.selectable === \"boolean\") {\r\n        return rowMetadata.selectable;\r\n      }\r\n\r\n      var columnMetadata = rowMetadata && rowMetadata.columns && (rowMetadata.columns[columns[cell].id] || rowMetadata.columns[cell]);\r\n      if (columnMetadata && typeof columnMetadata.selectable === \"boolean\") {\r\n        return columnMetadata.selectable;\r\n      }\r\n\r\n      return columns[cell].selectable;\r\n    }\r\n\r\n    function gotoCell(row, cell, forceEdit) {\r\n      if (!initialized) { return; }\r\n      if (!canCellBeActive(row, cell)) {\r\n        return;\r\n      }\r\n\r\n      if (!getEditorLock().commitCurrentEdit()) {\r\n        return;\r\n      }\r\n\r\n      scrollCellIntoView(row, cell, false);\r\n\r\n      var newCell = getCellNode(row, cell);\r\n\r\n      // if selecting the 'add new' row, start editing right away\r\n      setActiveCellInternal(newCell, forceEdit || (row === getDataLength()) || options.autoEdit);\r\n\r\n      // if no editor was created, set the focus back on the grid\r\n      if (!currentEditor) {\r\n        setFocus();\r\n      }\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    // IEditor implementation for the editor lock\r\n\r\n    function commitCurrentEdit() {\r\n      var item = getDataItem(activeRow);\r\n      var column = columns[activeCell];\r\n\r\n      if (currentEditor) {\r\n        if (currentEditor.isValueChanged()) {\r\n          var validationResults = currentEditor.validate();\r\n\r\n          if (validationResults.valid) {\r\n            if (activeRow < getDataLength()) {\r\n              var editCommand = {\r\n                row: activeRow,\r\n                cell: activeCell,\r\n                editor: currentEditor,\r\n                serializedValue: currentEditor.serializeValue(),\r\n                prevSerializedValue: serializedEditorValue,\r\n                execute: function () {\r\n                  this.editor.applyValue(item, this.serializedValue);\r\n                  updateRow(this.row);\r\n                  trigger(self.onCellChange, {\r\n                    row: activeRow,\r\n                    cell: activeCell,\r\n                    item: item\r\n                  });\r\n                },\r\n                undo: function () {\r\n                  this.editor.applyValue(item, this.prevSerializedValue);\r\n                  updateRow(this.row);\r\n                  trigger(self.onCellChange, {\r\n                    row: activeRow,\r\n                    cell: activeCell,\r\n                    item: item\r\n                  });\r\n                }\r\n              };\r\n\r\n              if (options.editCommandHandler) {\r\n                makeActiveCellNormal();\r\n                options.editCommandHandler(item, column, editCommand);\r\n              } else {\r\n                editCommand.execute();\r\n                makeActiveCellNormal();\r\n              }\r\n\r\n            } else {\r\n              var newItem = {};\r\n              currentEditor.applyValue(newItem, currentEditor.serializeValue());\r\n              makeActiveCellNormal();\r\n              trigger(self.onAddNewRow, {item: newItem, column: column});\r\n            }\r\n\r\n            // check whether the lock has been re-acquired by event handlers\r\n            return !getEditorLock().isActive();\r\n          } else {\r\n            // Re-add the CSS class to trigger transitions, if any.\r\n            $(activeCellNode).removeClass(\"invalid\");\r\n            $(activeCellNode).width();  // force layout\r\n            $(activeCellNode).addClass(\"invalid\");\r\n\r\n            trigger(self.onValidationError, {\r\n              editor: currentEditor,\r\n              cellNode: activeCellNode,\r\n              validationResults: validationResults,\r\n              row: activeRow,\r\n              cell: activeCell,\r\n              column: column\r\n            });\r\n\r\n            currentEditor.focus();\r\n            return false;\r\n          }\r\n        }\r\n\r\n        makeActiveCellNormal();\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function cancelCurrentEdit() {\r\n      makeActiveCellNormal();\r\n      return true;\r\n    }\r\n\r\n    function rowsToRanges(rows) {\r\n      var ranges = [];\r\n      var lastCell = columns.length - 1;\r\n      for (var i = 0; i < rows.length; i++) {\r\n        ranges.push(new Slick.Range(rows[i], 0, rows[i], lastCell));\r\n      }\r\n      return ranges;\r\n    }\r\n\r\n    function getSelectedRows() {\r\n      if (!selectionModel) {\r\n        throw \"Selection model is not set\";\r\n      }\r\n      return selectedRows;\r\n    }\r\n\r\n    function setSelectedRows(rows) {\r\n      if (!selectionModel) {\r\n        throw \"Selection model is not set\";\r\n      }\r\n      selectionModel.setSelectedRanges(rowsToRanges(rows));\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Debug\r\n\r\n    this.debug = function () {\r\n      var s = \"\";\r\n\r\n      s += (\"\\n\" + \"counter_rows_rendered:  \" + counter_rows_rendered);\r\n      s += (\"\\n\" + \"counter_rows_removed:  \" + counter_rows_removed);\r\n      s += (\"\\n\" + \"renderedRows:  \" + renderedRows);\r\n      s += (\"\\n\" + \"numVisibleRows:  \" + numVisibleRows);\r\n      s += (\"\\n\" + \"maxSupportedCssHeight:  \" + maxSupportedCssHeight);\r\n      s += (\"\\n\" + \"n(umber of pages):  \" + n);\r\n      s += (\"\\n\" + \"(current) page:  \" + page);\r\n      s += (\"\\n\" + \"page height (ph):  \" + ph);\r\n      s += (\"\\n\" + \"vScrollDir:  \" + vScrollDir);\r\n\r\n      alert(s);\r\n    };\r\n\r\n    // a debug helper to be able to access private members\r\n    this.eval = function (expr) {\r\n      return eval(expr);\r\n    };\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Public API\r\n\r\n    $.extend(this, {\r\n      \"slickGridVersion\": \"2.1\",\r\n\r\n      // Events\r\n      \"onScroll\": new Slick.Event(),\r\n      \"onSort\": new Slick.Event(),\r\n      \"onHeaderMouseEnter\": new Slick.Event(),\r\n      \"onHeaderMouseLeave\": new Slick.Event(),\r\n      \"onHeaderContextMenu\": new Slick.Event(),\r\n      \"onHeaderClick\": new Slick.Event(),\r\n      \"onHeaderCellRendered\": new Slick.Event(),\r\n      \"onBeforeHeaderCellDestroy\": new Slick.Event(),\r\n      \"onHeaderRowCellRendered\": new Slick.Event(),\r\n      \"onBeforeHeaderRowCellDestroy\": new Slick.Event(),\r\n      \"onMouseEnter\": new Slick.Event(),\r\n      \"onMouseLeave\": new Slick.Event(),\r\n      \"onClick\": new Slick.Event(),\r\n      \"onDblClick\": new Slick.Event(),\r\n      \"onContextMenu\": new Slick.Event(),\r\n      \"onKeyDown\": new Slick.Event(),\r\n      \"onAddNewRow\": new Slick.Event(),\r\n      \"onValidationError\": new Slick.Event(),\r\n      \"onViewportChanged\": new Slick.Event(),\r\n      \"onColumnsReordered\": new Slick.Event(),\r\n      \"onColumnsResized\": new Slick.Event(),\r\n      \"onCellChange\": new Slick.Event(),\r\n      \"onBeforeEditCell\": new Slick.Event(),\r\n      \"onBeforeCellEditorDestroy\": new Slick.Event(),\r\n      \"onBeforeDestroy\": new Slick.Event(),\r\n      \"onActiveCellChanged\": new Slick.Event(),\r\n      \"onActiveCellPositionChanged\": new Slick.Event(),\r\n      \"onDragInit\": new Slick.Event(),\r\n      \"onDragStart\": new Slick.Event(),\r\n      \"onDrag\": new Slick.Event(),\r\n      \"onDragEnd\": new Slick.Event(),\r\n      \"onSelectedRowsChanged\": new Slick.Event(),\r\n      \"onCellCssStylesChanged\": new Slick.Event(),\r\n\r\n      // Methods\r\n      \"registerPlugin\": registerPlugin,\r\n      \"unregisterPlugin\": unregisterPlugin,\r\n      \"getColumns\": getColumns,\r\n      \"setColumns\": setColumns,\r\n      \"getColumnIndex\": getColumnIndex,\r\n      \"updateColumnHeader\": updateColumnHeader,\r\n      \"setSortColumn\": setSortColumn,\r\n      \"setSortColumns\": setSortColumns,\r\n      \"getSortColumns\": getSortColumns,\r\n      \"autosizeColumns\": autosizeColumns,\r\n      \"getOptions\": getOptions,\r\n      \"setOptions\": setOptions,\r\n      \"getData\": getData,\r\n      \"getDataLength\": getDataLength,\r\n      \"getDataItem\": getDataItem,\r\n      \"setData\": setData,\r\n      \"getSelectionModel\": getSelectionModel,\r\n      \"setSelectionModel\": setSelectionModel,\r\n      \"getSelectedRows\": getSelectedRows,\r\n      \"setSelectedRows\": setSelectedRows,\r\n      \"getContainerNode\": getContainerNode,\r\n\r\n      \"render\": render,\r\n      \"invalidate\": invalidate,\r\n      \"invalidateRow\": invalidateRow,\r\n      \"invalidateRows\": invalidateRows,\r\n      \"invalidateAllRows\": invalidateAllRows,\r\n      \"updateCell\": updateCell,\r\n      \"updateRow\": updateRow,\r\n      \"getViewport\": getVisibleRange,\r\n      \"getRenderedRange\": getRenderedRange,\r\n      \"resizeCanvas\": resizeCanvas,\r\n      \"updateRowCount\": updateRowCount,\r\n      \"scrollRowIntoView\": scrollRowIntoView,\r\n      \"scrollRowToTop\": scrollRowToTop,\r\n      \"scrollCellIntoView\": scrollCellIntoView,\r\n      \"getCanvasNode\": getCanvasNode,\r\n      \"focus\": setFocus,\r\n\r\n      \"getCellFromPoint\": getCellFromPoint,\r\n      \"getCellFromEvent\": getCellFromEvent,\r\n      \"getActiveCell\": getActiveCell,\r\n      \"setActiveCell\": setActiveCell,\r\n      \"getActiveCellNode\": getActiveCellNode,\r\n      \"getActiveCellPosition\": getActiveCellPosition,\r\n      \"resetActiveCell\": resetActiveCell,\r\n      \"editActiveCell\": makeActiveCellEditable,\r\n      \"getCellEditor\": getCellEditor,\r\n      \"getCellNode\": getCellNode,\r\n      \"getCellNodeBox\": getCellNodeBox,\r\n      \"canCellBeSelected\": canCellBeSelected,\r\n      \"canCellBeActive\": canCellBeActive,\r\n      \"navigatePrev\": navigatePrev,\r\n      \"navigateNext\": navigateNext,\r\n      \"navigateUp\": navigateUp,\r\n      \"navigateDown\": navigateDown,\r\n      \"navigateLeft\": navigateLeft,\r\n      \"navigateRight\": navigateRight,\r\n      \"navigatePageUp\": navigatePageUp,\r\n      \"navigatePageDown\": navigatePageDown,\r\n      \"gotoCell\": gotoCell,\r\n      \"getTopPanel\": getTopPanel,\r\n      \"setTopPanelVisibility\": setTopPanelVisibility,\r\n      \"setHeaderRowVisibility\": setHeaderRowVisibility,\r\n      \"getHeaderRow\": getHeaderRow,\r\n      \"getHeaderRowColumn\": getHeaderRowColumn,\r\n      \"getGridPosition\": getGridPosition,\r\n      \"flashCell\": flashCell,\r\n      \"addCellCssStyles\": addCellCssStyles,\r\n      \"setCellCssStyles\": setCellCssStyles,\r\n      \"removeCellCssStyles\": removeCellCssStyles,\r\n      \"getCellCssStyles\": getCellCssStyles,\r\n\r\n      \"init\": finishInitialization,\r\n      \"destroy\": destroy,\r\n\r\n      // IEditor implementation\r\n      \"getEditorLock\": getEditorLock,\r\n      \"getEditController\": getEditController\r\n    });\r\n\r\n    init();\r\n  }\r\n}(jQuery));\r\n","/*\n     _ _      _       _\n ___| (_) ___| | __  (_)___\n/ __| | |/ __| |/ /  | / __|\n\\__ \\ | | (__|   < _ | \\__ \\\n|___/_|_|\\___|_|\\_(_)/ |___/\n                   |__/\n\n Version: 1.5.9\n  Author: Ken Wheeler\n Website: http://kenwheeler.github.io\n    Docs: http://kenwheeler.github.io/slick\n    Repo: http://github.com/kenwheeler/slick\n  Issues: http://github.com/kenwheeler/slick/issues\n\n */\r\n/* global window, document, define, jQuery, setInterval, clearInterval */\r\n(function(factory) {\r\n    'use strict';\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(['jquery'], factory);\r\n    } else if (typeof exports !== 'undefined') {\r\n        module.exports = factory(require('jquery'));\r\n    } else {\r\n        factory(jQuery);\r\n    }\r\n\r\n}(function($) {\r\n    'use strict';\r\n    var Slick = window.Slick || {};\r\n\r\n    Slick = (function() {\r\n\r\n        var instanceUid = 0;\r\n\r\n        function Slick(element, settings) {\r\n\r\n            var _ = this, dataSettings;\r\n\r\n            _.defaults = {\r\n                htmlWrappers: 'slick',\r\n                accessibility: true,\r\n                adaptiveHeight: false,\r\n                appendArrows: $(element),\r\n                appendDots: $(element),\r\n                arrows: true,\r\n                asNavFor: null,\r\n                prevArrow: '<button type=\"button\" data-role=\"none\" class=\"slick-prev\" aria-label=\"Previous\" tabindex=\"0\" role=\"button\"><i class=\"icon iconSmall\"><svg><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#icon_LeftChevron\"></use></svg></i></button>',\r\n                nextArrow: '<button type=\"button\" data-role=\"none\" class=\"slick-next\" aria-label=\"Next\" tabindex=\"0\" role=\"button\"><i class=\"icon iconSmall\"><svg><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#icon_RightChevro\"></use></svg></i></button>',\r\n                autoplay: false,\r\n                autoplaySpeed: 3000,\r\n                centerMode: false,\r\n                centerPadding: '50px',\r\n                cssEase: 'ease',\r\n                customPaging: function(slider, i) {\r\n                    //return $('<button type=\"button\" data-role=\"none\" role=\"button\" tabindex=\"0\" />').text(i + 1);\r\n                },\r\n                dots: false,\r\n                dotsClass: 'slick-dots',\r\n                draggable: true,\r\n                easing: 'linear',\r\n                edgeFriction: 0.35,\r\n                fade: false,\r\n                focusOnSelect: false,\r\n                infinite: true,\r\n                initialSlide: 0,\r\n                lazyLoad: 'ondemand',\r\n                mobileFirst: false,\r\n                pauseOnHover: true,\r\n                pauseOnFocus: true,\r\n                pauseOnDotsHover: false,\r\n                respondTo: 'window',\r\n                responsive: null,\r\n                rows: 1,\r\n                rtl: false,\r\n                slide: '',\r\n                slidesPerRow: 1,\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1,\r\n                speed: 500,\r\n                swipe: true,\r\n                swipeToSlide: false,\r\n                touchMove: true,\r\n                touchThreshold: 5,\r\n                useCSS: true,\r\n                useTransform: true,\r\n                variableWidth: false,\r\n                vertical: false,\r\n                verticalSwiping: false,\r\n                waitForAnimate: true,\r\n                zIndex: 1000\r\n            };\r\n\r\n            _.initials = {\r\n                animating: false,\r\n                dragging: false,\r\n                autoPlayTimer: null,\r\n                currentDirection: 0,\r\n                currentLeft: null,\r\n                currentSlide: 0,\r\n                direction: 1,\r\n                $dots: null,\r\n                listWidth: null,\r\n                listHeight: null,\r\n                loadIndex: 0,\r\n                $nextArrow: null,\r\n                $prevArrow: null,\r\n                slideCount: null,\r\n                slideWidth: null,\r\n                $slideTrack: null,\r\n                $slides: null,\r\n                sliding: false,\r\n                slideOffset: 0,\r\n                swipeLeft: null,\r\n                $list: null,\r\n                touchObject: {},\r\n                transformsEnabled: false,\r\n                unslicked: false\r\n            };\r\n\r\n            $.extend(_, _.initials);\r\n\r\n            _.activeBreakpoint = null;\r\n            _.animType = null;\r\n            _.animProp = null;\r\n            _.breakpoints = [];\r\n            _.breakpointSettings = [];\r\n            _.cssTransitions = false;\r\n            _.focussed = false;\r\n            _.interrupted = false;\r\n            _.hidden = 'hidden';\r\n            _.paused = true;\r\n            _.positionProp = null;\r\n            _.respondTo = null;\r\n            _.rowCount = 1;\r\n            _.shouldClick = true;\r\n            _.$slider = $(element);\r\n            _.$slidesCache = null;\r\n            _.transformType = null;\r\n            _.transitionType = null;\r\n            _.visibilityChange = 'visibilitychange';\r\n            _.windowWidth = 0;\r\n            _.windowTimer = null;\r\n\r\n            dataSettings = $(element).data('slick') || {};\r\n\r\n            _.options = $.extend({}, _.defaults, settings, dataSettings);\r\n\r\n            _.currentSlide = _.options.initialSlide;\r\n\r\n            _.originalSettings = _.options;\r\n\r\n            if (typeof document.mozHidden !== 'undefined') {\r\n                _.hidden = 'mozHidden';\r\n                _.visibilityChange = 'mozvisibilitychange';\r\n            } else if (typeof document.webkitHidden !== 'undefined') {\r\n                _.hidden = 'webkitHidden';\r\n                _.visibilityChange = 'webkitvisibilitychange';\r\n            }\r\n\r\n            _.autoPlay = $.proxy(_.autoPlay, _);\r\n            _.autoPlayClear = $.proxy(_.autoPlayClear, _);\r\n            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\r\n            _.changeSlide = $.proxy(_.changeSlide, _);\r\n            _.clickHandler = $.proxy(_.clickHandler, _);\r\n            _.selectHandler = $.proxy(_.selectHandler, _);\r\n            _.setPosition = $.proxy(_.setPosition, _);\r\n            _.swipeHandler = $.proxy(_.swipeHandler, _);\r\n            _.dragHandler = $.proxy(_.dragHandler, _);\r\n            _.keyHandler = $.proxy(_.keyHandler, _);\r\n\r\n            _.instanceUid = instanceUid++;\r\n\r\n            // A simple way to check for HTML strings\r\n            // Strict HTML recognition (must start with <)\r\n            // Extracted from jQuery v1.11 source\r\n            _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\r\n\r\n\r\n            _.registerBreakpoints();\r\n            _.init(true);\r\n\r\n        }\r\n\r\n        return Slick;\r\n\r\n    }());\r\n\r\n    Slick.prototype.activateADA = function() {\r\n        var _ = this;\r\n\r\n        _.$slideTrack.find('.slick-active').attr({\r\n            'aria-hidden': 'false'\r\n        }).find('a, input, button, select').attr({\r\n            'tabindex': '0'\r\n        });\r\n\r\n    };\r\n\r\n    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {\r\n\r\n        var _ = this;\r\n\r\n        if (typeof(index) === 'boolean') {\r\n            addBefore = index;\r\n            index = null;\r\n        } else if (index < 0 || (index >= _.slideCount)) {\r\n            return false;\r\n        }\r\n\r\n        _.unload();\r\n\r\n        if (typeof(index) === 'number') {\r\n            if (index === 0 && _.$slides.length === 0) {\r\n                $(markup).appendTo(_.$slideTrack);\r\n            } else if (addBefore) {\r\n                $(markup).insertBefore(_.$slides.eq(index));\r\n            } else {\r\n                $(markup).insertAfter(_.$slides.eq(index));\r\n            }\r\n        } else {\r\n            if (addBefore === true) {\r\n                $(markup).prependTo(_.$slideTrack);\r\n            } else {\r\n                $(markup).appendTo(_.$slideTrack);\r\n            }\r\n        }\r\n\r\n        _.$slides = _.$slideTrack.children(this.options.slide);\r\n\r\n        _.$slideTrack.children(this.options.slide).detach();\r\n\r\n        _.$slideTrack.append(_.$slides);\r\n\r\n        _.$slides.each(function(index, element) {\r\n            $(element).attr('data-slick-index', index);\r\n        });\r\n\r\n        _.$slidesCache = _.$slides;\r\n\r\n        _.reinit();\r\n\r\n    };\r\n\r\n    Slick.prototype.animateHeight = function() {\r\n        var _ = this;\r\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\r\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\r\n            _.$list.animate({\r\n                height: targetHeight\r\n            }, _.options.speed);\r\n        }\r\n    };\r\n\r\n    Slick.prototype.animateSlide = function(targetLeft, callback) {\r\n\r\n        var animProps = {},\r\n            _ = this;\r\n\r\n        _.animateHeight();\r\n\r\n        if (_.options.rtl === true && _.options.vertical === false) {\r\n            targetLeft = -targetLeft;\r\n        }\r\n        if (_.transformsEnabled === false) {\r\n            if (_.options.vertical === false) {\r\n                _.$slideTrack.animate({\r\n                    left: targetLeft\r\n                }, _.options.speed, _.options.easing, callback);\r\n            } else {\r\n                _.$slideTrack.animate({\r\n                    top: targetLeft\r\n                }, _.options.speed, _.options.easing, callback);\r\n            }\r\n\r\n        } else {\r\n\r\n            if (_.cssTransitions === false) {\r\n                if (_.options.rtl === true) {\r\n                    _.currentLeft = -(_.currentLeft);\r\n                }\r\n                $({\r\n                    animStart: _.currentLeft\r\n                }).animate({\r\n                    animStart: targetLeft\r\n                }, {\r\n                    duration: _.options.speed,\r\n                    easing: _.options.easing,\r\n                    step: function(now) {\r\n                        now = Math.ceil(now);\r\n                        if (_.options.vertical === false) {\r\n                            animProps[_.animType] = 'translate(' +\r\n                                now + 'px, 0px)';\r\n                            _.$slideTrack.css(animProps);\r\n                        } else {\r\n                            animProps[_.animType] = 'translate(0px,' +\r\n                                now + 'px)';\r\n                            _.$slideTrack.css(animProps);\r\n                        }\r\n                    },\r\n                    complete: function() {\r\n                        if (callback) {\r\n                            callback.call();\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } else {\r\n\r\n                _.applyTransition();\r\n                targetLeft = Math.ceil(targetLeft);\r\n\r\n                if (_.options.vertical === false) {\r\n                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\r\n                } else {\r\n                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\r\n                }\r\n                _.$slideTrack.css(animProps);\r\n\r\n                if (callback) {\r\n                    setTimeout(function() {\r\n\r\n                        _.disableTransition();\r\n\r\n                        callback.call();\r\n                    }, _.options.speed);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.getNavTarget = function() {\r\n\r\n        var _ = this,\r\n            asNavFor = _.options.asNavFor;\r\n\r\n        if ( asNavFor && asNavFor !== null ) {\r\n            asNavFor = $(asNavFor).not(_.$slider);\r\n        }\r\n\r\n        return asNavFor;\r\n\r\n    };\r\n\r\n    Slick.prototype.asNavFor = function(index) {\r\n\r\n        var _ = this,\r\n            asNavFor = _.getNavTarget();\r\n\r\n        if ( asNavFor !== null && typeof asNavFor === 'object' ) {\r\n            asNavFor.each(function() {\r\n                var target = $(this).slick('getSlick');\r\n                if(!target.unslicked) {\r\n                    target.slideHandler(index, true);\r\n                }\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.applyTransition = function(slide) {\r\n\r\n        var _ = this,\r\n            transition = {};\r\n\r\n        if (_.options.fade === false) {\r\n            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\r\n        } else {\r\n            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\r\n        }\r\n\r\n        if (_.options.fade === false) {\r\n            _.$slideTrack.css(transition);\r\n        } else {\r\n            _.$slides.eq(slide).css(transition);\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.autoPlay = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.autoPlayClear();\r\n\r\n        if ( _.slideCount > _.options.slidesToShow ) {\r\n            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.autoPlayClear = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.autoPlayTimer) {\r\n            clearInterval(_.autoPlayTimer);\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.autoPlayIterator = function() {\r\n\r\n        var _ = this,\r\n            slideTo = _.currentSlide + _.options.slidesToScroll;\r\n\r\n        if ( !_.paused && !_.interrupted && !_.focussed ) {\r\n\r\n            if ( _.options.infinite === false ) {\r\n\r\n                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {\r\n                    _.direction = 0;\r\n                }\r\n\r\n                else if ( _.direction === 0 ) {\r\n\r\n                    slideTo = _.currentSlide - _.options.slidesToScroll;\r\n\r\n                    if ( _.currentSlide - 1 === 0 ) {\r\n                        _.direction = 1;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            _.slideHandler( slideTo );\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.buildArrows = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.arrows === true ) {\r\n\r\n            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\r\n            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\r\n\r\n            if( _.slideCount > _.options.slidesToShow ) {\r\n\r\n                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\r\n                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\r\n\r\n                if (_.htmlExpr.test(_.options.prevArrow)) {\r\n                    _.$prevArrow.prependTo(_.options.appendArrows);\r\n                }\r\n\r\n                if (_.htmlExpr.test(_.options.nextArrow)) {\r\n                    _.$nextArrow.appendTo(_.options.appendArrows);\r\n                }\r\n\r\n                if (_.options.infinite !== true) {\r\n                    _.$prevArrow\r\n                        .addClass('slick-disabled')\r\n                        .attr('aria-disabled', 'true');\r\n                }\r\n\r\n            } else {\r\n\r\n                _.$prevArrow.add( _.$nextArrow )\r\n\r\n                    .addClass('slick-hidden')\r\n                    .attr({\r\n                        'aria-disabled': 'true',\r\n                        'tabindex': '-1'\r\n                    });\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.buildDots = function() {\r\n\r\n        var _ = this,\r\n            i, dot;\r\n\r\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n            _.$slider.addClass('slick-dotted');\r\n\r\n            dot = $('<ul />').addClass(_.options.dotsClass);\r\n\r\n            for (i = 0; i <= _.getDotCount(); i += 1) {\r\n                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\r\n            }\r\n\r\n            _.$dots = dot.appendTo(_.options.appendDots);\r\n\r\n            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.buildOut = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.htmlWrappers == \"slick\") {\r\n            _.$slides =\r\n                _.$slider\r\n                .children( _.options.slide + ':not(.slick-cloned)')\r\n                .addClass('slick-slide');\r\n\r\n            _.slideCount = _.$slides.length;\r\n\r\n            _.$slides.each(function(index, element) {\r\n                $(element)\r\n                    .attr('data-slick-index', index)\r\n                    .data('originalStyling', $(element).attr('style') || '');\r\n            });\r\n\r\n            _.$slider.addClass('slick-slider');\r\n\r\n            _.$slideTrack = (_.slideCount === 0) ?\r\n                $('<div class=\"slick-track\"/>').appendTo(_.$slider) :\r\n            _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\r\n\r\n            _.$list = _.$slideTrack.wrap(\r\n                '<div aria-live=\"polite\" class=\"slick-list col centered s11\"/>').parent();\r\n            _.$slideTrack.css('opacity', 0);\r\n        } else if (_.options.htmlWrappers == \"custom\") {\r\n            /*\r\n                HTML structure required for this option is as below\r\n\r\n                +-<div.slick-slider>\r\n\t            |    \r\n                +----<div.slick-list>\r\n                    |\r\n                    +----<div.slick-track>\r\n                        |\r\n                        +----<div.slick-slide>\r\n                \r\n            */\r\n            _.$slides = _.$slider.find(\".slick-slide\");\r\n            _.slideCount = _.$slides.length;\r\n            _.$slidesCache = _.$slides;\r\n            _.$slideTrack = _.$slider.find(\".slick-track\");\r\n            _.$list = _.$slideTrack.parent();\r\n            _.$slider.find(\".slick-list\").addClass(\"col centered s11\");\r\n            _.$slideTrack.css('opacity', 0);\r\n        }\r\n\r\n        if (_.options.centerMode === true || _.options.swipeToSlide === true) {\r\n            _.options.slidesToScroll = 1;\r\n        }\r\n\r\n        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\r\n\r\n        _.setupInfinite();\r\n\r\n        _.buildArrows();\r\n\r\n        _.buildDots();\r\n\r\n        _.updateDots();\r\n\r\n\r\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\r\n\r\n        if (_.options.draggable === true) {\r\n            _.$list.addClass('draggable');\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.buildRows = function() {\r\n\r\n        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;\r\n\r\n        newSlides = document.createDocumentFragment();\r\n        originalSlides = _.$slider.children();\r\n\r\n        if(_.options.rows > 1) {\r\n\r\n            slidesPerSection = _.options.slidesPerRow * _.options.rows;\r\n            numOfSlides = Math.ceil(\r\n                originalSlides.length / slidesPerSection\r\n            );\r\n\r\n            for(a = 0; a < numOfSlides; a++){\r\n                var slide = document.createElement('div');\r\n                for(b = 0; b < _.options.rows; b++) {\r\n                    var row = document.createElement('div');\r\n                    for(c = 0; c < _.options.slidesPerRow; c++) {\r\n                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));\r\n                        if (originalSlides.get(target)) {\r\n                            row.appendChild(originalSlides.get(target));\r\n                        }\r\n                    }\r\n                    slide.appendChild(row);\r\n                }\r\n                newSlides.appendChild(slide);\r\n            }\r\n\r\n            _.$slider.empty().append(newSlides);\r\n            _.$slider.children().children().children()\r\n                .css({\r\n                    'width':(100 / _.options.slidesPerRow) + '%',\r\n                    'display': 'inline-block'\r\n                });\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.checkResponsive = function(initial, forceUpdate) {\r\n\r\n        var _ = this,\r\n            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;\r\n        var sliderWidth = _.$slider.width();\r\n        var windowWidth = window.innerWidth || $(window).width();\r\n\r\n        if (_.respondTo === 'window') {\r\n            respondToWidth = windowWidth;\r\n        } else if (_.respondTo === 'slider') {\r\n            respondToWidth = sliderWidth;\r\n        } else if (_.respondTo === 'min') {\r\n            respondToWidth = Math.min(windowWidth, sliderWidth);\r\n        }\r\n\r\n        if ( _.options.responsive &&\r\n            _.options.responsive.length &&\r\n            _.options.responsive !== null) {\r\n\r\n            targetBreakpoint = null;\r\n\r\n            for (breakpoint in _.breakpoints) {\r\n                if (_.breakpoints.hasOwnProperty(breakpoint)) {\r\n                    if (_.originalSettings.mobileFirst === false) {\r\n                        if (respondToWidth < _.breakpoints[breakpoint]) {\r\n                            targetBreakpoint = _.breakpoints[breakpoint];\r\n                        }\r\n                    } else {\r\n                        if (respondToWidth > _.breakpoints[breakpoint]) {\r\n                            targetBreakpoint = _.breakpoints[breakpoint];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (targetBreakpoint !== null) {\r\n                if (_.activeBreakpoint !== null) {\r\n                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\r\n                        _.activeBreakpoint =\r\n                            targetBreakpoint;\r\n                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\r\n                            _.unslick(targetBreakpoint);\r\n                        } else {\r\n                            _.options = $.extend({}, _.originalSettings,\r\n                                _.breakpointSettings[\r\n                                    targetBreakpoint]);\r\n                            if (initial === true) {\r\n                                _.currentSlide = _.options.initialSlide;\r\n                            }\r\n                            _.refresh(initial);\r\n                        }\r\n                        triggerBreakpoint = targetBreakpoint;\r\n                    }\r\n                } else {\r\n                    _.activeBreakpoint = targetBreakpoint;\r\n                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\r\n                        _.unslick(targetBreakpoint);\r\n                    } else {\r\n                        _.options = $.extend({}, _.originalSettings,\r\n                            _.breakpointSettings[\r\n                                targetBreakpoint]);\r\n                        if (initial === true) {\r\n                            _.currentSlide = _.options.initialSlide;\r\n                        }\r\n                        _.refresh(initial);\r\n                    }\r\n                    triggerBreakpoint = targetBreakpoint;\r\n                }\r\n            } else {\r\n                if (_.activeBreakpoint !== null) {\r\n                    _.activeBreakpoint = null;\r\n                    _.options = _.originalSettings;\r\n                    if (initial === true) {\r\n                        _.currentSlide = _.options.initialSlide;\r\n                    }\r\n                    _.refresh(initial);\r\n                    triggerBreakpoint = targetBreakpoint;\r\n                }\r\n            }\r\n\r\n            // only trigger breakpoints during an actual break. not on initialize.\r\n            if( !initial && triggerBreakpoint !== false ) {\r\n                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.changeSlide = function(event, dontAnimate) {\r\n\r\n        var _ = this,\r\n            $target = $(event.currentTarget),\r\n            indexOffset, slideOffset, unevenOffset;\r\n\r\n        // If target is a link, prevent default action.\r\n        if($target.is('a')) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        // If target is not the <li> element (ie: a child), find the <li>.\r\n        if(!$target.is('li')) {\r\n            $target = $target.closest('li');\r\n        }\r\n\r\n        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);\r\n        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\r\n\r\n        switch (event.data.message) {\r\n\r\n            case 'previous':\r\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\r\n                if (_.slideCount > _.options.slidesToShow) {\r\n                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\r\n                }\r\n                break;\r\n\r\n            case 'next':\r\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\r\n                if (_.slideCount > _.options.slidesToShow) {\r\n                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\r\n                }\r\n                break;\r\n\r\n            case 'index':\r\n                var index = event.data.index === 0 ? 0 :\r\n                    event.data.index || $target.index() * _.options.slidesToScroll;\r\n\r\n                _.slideHandler(_.checkNavigable(index), false, dontAnimate);\r\n                $target.children().trigger('focus');\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.checkNavigable = function(index) {\r\n\r\n        var _ = this,\r\n            navigables, prevNavigable;\r\n\r\n        navigables = _.getNavigableIndexes();\r\n        prevNavigable = 0;\r\n        if (index > navigables[navigables.length - 1]) {\r\n            index = navigables[navigables.length - 1];\r\n        } else {\r\n            for (var n in navigables) {\r\n                if (index < navigables[n]) {\r\n                    index = prevNavigable;\r\n                    break;\r\n                }\r\n                prevNavigable = navigables[n];\r\n            }\r\n        }\r\n\r\n        return index;\r\n    };\r\n\r\n    Slick.prototype.cleanUpEvents = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.dots && _.$dots !== null) {\r\n\r\n            $('li', _.$dots)\r\n                .off('click.slick', _.changeSlide)\r\n                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))\r\n                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n        }\r\n\r\n        _.$slider.off('focus.slick blur.slick');\r\n\r\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\r\n            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\r\n        }\r\n\r\n        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\r\n        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\r\n        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\r\n        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\r\n\r\n        _.$list.off('click.slick', _.clickHandler);\r\n\r\n        $(document).off(_.visibilityChange, _.visibility);\r\n\r\n        _.cleanUpSlideEvents();\r\n\r\n        if (_.options.accessibility === true) {\r\n            _.$list.off('keydown.slick', _.keyHandler);\r\n        }\r\n\r\n        if (_.options.focusOnSelect === true) {\r\n            $(_.$slideTrack).children().off('click.slick', _.selectHandler);\r\n        }\r\n\r\n        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\r\n\r\n        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\r\n\r\n        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\r\n\r\n        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\r\n        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);\r\n\r\n    };\r\n\r\n    Slick.prototype.cleanUpSlideEvents = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\r\n        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n    };\r\n\r\n    Slick.prototype.cleanUpRows = function() {\r\n\r\n        var _ = this, originalSlides;\r\n\r\n        if(_.options.rows > 1) {\r\n            originalSlides = _.$slides.children().children();\r\n            originalSlides.removeAttr('style');\r\n            _.$slider.empty().append(originalSlides);\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.clickHandler = function(event) {\r\n\r\n        var _ = this;\r\n\r\n        if (_.shouldClick === false) {\r\n            event.stopImmediatePropagation();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.destroy = function(refresh) {\r\n\r\n        var _ = this;\r\n\r\n        _.autoPlayClear();\r\n\r\n        _.touchObject = {};\r\n\r\n        _.cleanUpEvents();\r\n\r\n        $('.slick-cloned', _.$slider).detach();\r\n\r\n        if (_.$dots) {\r\n            _.$dots.remove();\r\n        }\r\n\r\n\r\n        if ( _.$prevArrow && _.$prevArrow.length ) {\r\n\r\n            _.$prevArrow\r\n                .removeClass('slick-disabled slick-arrow slick-hidden')\r\n                .removeAttr('aria-hidden aria-disabled tabindex')\r\n                .css('display','');\r\n\r\n            if ( _.htmlExpr.test( _.options.prevArrow )) {\r\n                _.$prevArrow.remove();\r\n            }\r\n        }\r\n\r\n        if ( _.$nextArrow && _.$nextArrow.length ) {\r\n\r\n            _.$nextArrow\r\n                .removeClass('slick-disabled slick-arrow slick-hidden')\r\n                .removeAttr('aria-hidden aria-disabled tabindex')\r\n                .css('display','');\r\n\r\n            if ( _.htmlExpr.test( _.options.nextArrow )) {\r\n                _.$nextArrow.remove();\r\n            }\r\n\r\n        }\r\n\r\n\r\n        if (_.$slides) {\r\n\r\n            _.$slides\r\n                .removeClass((_.options.htmlWrappers == 'custom' ? '' : 'slick-slide') + ' slick-active slick-center slick-visible slick-current')\r\n                .removeAttr('aria-hidden')\r\n                .removeAttr('data-slick-index')\r\n                .each(function(){\r\n                    $(this).attr('style', $(this).data('originalStyling'));\r\n                });\r\n\r\n            if (_.options.htmlWrappers == 'slick') {\r\n                _.$slideTrack.children(this.options.slide).detach();\r\n\r\n                _.$slideTrack.detach();\r\n\r\n                _.$list.detach();\r\n\r\n                _.$slider.append(_.$slides);\r\n            }\r\n        }\r\n\r\n        _.cleanUpRows();\r\n\r\n        if (_.options.htmlWrappers == 'slick')\r\n        _.$slider.removeClass('slick-slider');\r\n        _.$slider.removeClass('slick-initialized');\r\n        _.$slider.removeClass('slick-dotted');\r\n\r\n        _.unslicked = true;\r\n\r\n        if(!refresh) {\r\n            _.$slider.trigger('destroy', [_]);\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.disableTransition = function(slide) {\r\n\r\n        var _ = this,\r\n            transition = {};\r\n\r\n        transition[_.transitionType] = '';\r\n\r\n        if (_.options.fade === false) {\r\n            _.$slideTrack.css(transition);\r\n        } else {\r\n            _.$slides.eq(slide).css(transition);\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.fadeSlide = function(slideIndex, callback) {\r\n\r\n        var _ = this;\r\n\r\n        if (_.cssTransitions === false) {\r\n\r\n            _.$slides.eq(slideIndex).css({\r\n                zIndex: _.options.zIndex\r\n            });\r\n\r\n            _.$slides.eq(slideIndex).animate({\r\n                opacity: 1\r\n            }, _.options.speed, _.options.easing, callback);\r\n\r\n        } else {\r\n\r\n            _.applyTransition(slideIndex);\r\n\r\n            _.$slides.eq(slideIndex).css({\r\n                opacity: 1,\r\n                zIndex: _.options.zIndex\r\n            });\r\n\r\n            if (callback) {\r\n                setTimeout(function() {\r\n\r\n                    _.disableTransition(slideIndex);\r\n\r\n                    callback.call();\r\n                }, _.options.speed);\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.fadeSlideOut = function(slideIndex) {\r\n\r\n        var _ = this;\r\n\r\n        if (_.cssTransitions === false) {\r\n\r\n            _.$slides.eq(slideIndex).animate({\r\n                opacity: 0,\r\n                zIndex: _.options.zIndex - 2\r\n            }, _.options.speed, _.options.easing);\r\n\r\n        } else {\r\n\r\n            _.applyTransition(slideIndex);\r\n\r\n            _.$slides.eq(slideIndex).css({\r\n                opacity: 0,\r\n                zIndex: _.options.zIndex - 2\r\n            });\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {\r\n\r\n        var _ = this;\r\n\r\n        if (filter !== null) {\r\n\r\n            _.$slidesCache = _.$slides;\r\n\r\n            _.unload();\r\n\r\n            _.$slideTrack.children(this.options.slide).detach();\r\n\r\n            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\r\n\r\n            _.reinit();\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.focusHandler = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.$slider\r\n            .off('focus.slick blur.slick')\r\n            .on('focus.slick blur.slick',\r\n                '*:not(.slick-arrow)', function(event) {\r\n\r\n                    event.stopImmediatePropagation();\r\n                    var $sf = $(this);\r\n\r\n                    setTimeout(function() {\r\n\r\n                        if( _.options.pauseOnFocus ) {\r\n                            _.focussed = $sf.is(':focus');\r\n                            _.autoPlay();\r\n                        }\r\n\r\n                    }, 0);\r\n\r\n                });\r\n    };\r\n\r\n    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {\r\n\r\n        var _ = this;\r\n        return _.currentSlide;\r\n\r\n    };\r\n\r\n    Slick.prototype.getDotCount = function() {\r\n\r\n        var _ = this;\r\n\r\n        var breakPoint = 0;\r\n        var counter = 0;\r\n        var pagerQty = 0;\r\n\r\n        if (_.options.infinite === true) {\r\n            while (breakPoint < _.slideCount) {\r\n                ++pagerQty;\r\n                breakPoint = counter + _.options.slidesToScroll;\r\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n            }\r\n        } else if (_.options.centerMode === true) {\r\n            pagerQty = _.slideCount;\r\n        } else if(!_.options.asNavFor) {\r\n            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\r\n        }else {\r\n            while (breakPoint < _.slideCount) {\r\n                ++pagerQty;\r\n                breakPoint = counter + _.options.slidesToScroll;\r\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n            }\r\n        }\r\n\r\n        return pagerQty - 1;\r\n\r\n    };\r\n\r\n    Slick.prototype.getLeft = function(slideIndex) {\r\n\r\n        var _ = this,\r\n            targetLeft,\r\n            verticalHeight,\r\n            verticalOffset = 0,\r\n            targetSlide;\r\n\r\n        _.slideOffset = 0;\r\n        verticalHeight = _.$slides.first().outerHeight(true);\r\n\r\n        if (_.options.infinite === true) {\r\n            if (_.slideCount > _.options.slidesToShow) {\r\n                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;\r\n                verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;\r\n            }\r\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\r\n                    if (slideIndex > _.slideCount) {\r\n                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;\r\n                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;\r\n                    } else {\r\n                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;\r\n                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (slideIndex + _.options.slidesToShow > _.slideCount) {\r\n                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;\r\n                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;\r\n            }\r\n        }\r\n\r\n        if (_.slideCount <= _.options.slidesToShow) {\r\n            _.slideOffset = 0;\r\n            verticalOffset = 0;\r\n        }\r\n\r\n        if (_.options.centerMode === true && _.options.infinite === true) {\r\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\r\n        } else if (_.options.centerMode === true) {\r\n            _.slideOffset = 0;\r\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\r\n        }\r\n\r\n        if (_.options.vertical === false) {\r\n            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;\r\n        } else {\r\n            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;\r\n        }\r\n\r\n        if (_.options.variableWidth === true) {\r\n\r\n            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\r\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\r\n            } else {\r\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\r\n            }\r\n\r\n            if (_.options.rtl === true) {\r\n                if (targetSlide[0]) {\r\n                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\r\n                } else {\r\n                    targetLeft =  0;\r\n                }\r\n            } else {\r\n                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\r\n            }\r\n\r\n            if (_.options.centerMode === true) {\r\n                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\r\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\r\n                } else {\r\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\r\n                }\r\n\r\n                if (_.options.rtl === true) {\r\n                    if (targetSlide[0]) {\r\n                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\r\n                    } else {\r\n                        targetLeft =  0;\r\n                    }\r\n                } else {\r\n                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\r\n                }\r\n\r\n                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\r\n            }\r\n        }\r\n\r\n        return targetLeft;\r\n\r\n    };\r\n\r\n    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {\r\n\r\n        var _ = this;\r\n\r\n        return _.options[option];\r\n\r\n    };\r\n\r\n    Slick.prototype.getNavigableIndexes = function() {\r\n\r\n        var _ = this,\r\n            breakPoint = 0,\r\n            counter = 0,\r\n            indexes = [],\r\n            max;\r\n\r\n        if (_.options.infinite === false) {\r\n            max = _.slideCount;\r\n        } else {\r\n            breakPoint = _.options.slidesToScroll * -1;\r\n            counter = _.options.slidesToScroll * -1;\r\n            max = _.slideCount * 2;\r\n        }\r\n\r\n        while (breakPoint < max) {\r\n            indexes.push(breakPoint);\r\n            breakPoint = counter + _.options.slidesToScroll;\r\n            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n        }\r\n\r\n        return indexes;\r\n\r\n    };\r\n\r\n    Slick.prototype.getSlick = function() {\r\n\r\n        return this;\r\n\r\n    };\r\n\r\n    Slick.prototype.getSlideCount = function() {\r\n\r\n        var _ = this,\r\n            slidesTraversed, swipedSlide, centerOffset;\r\n\r\n        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\r\n\r\n        if (_.options.swipeToSlide === true) {\r\n            _.$slideTrack.find('.slick-slide').each(function(index, slide) {\r\n                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {\r\n                    swipedSlide = slide;\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\r\n\r\n            return slidesTraversed;\r\n\r\n        } else {\r\n            return _.options.slidesToScroll;\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {\r\n\r\n        var _ = this;\r\n\r\n        _.changeSlide({\r\n            data: {\r\n                message: 'index',\r\n                index: parseInt(slide)\r\n            }\r\n        }, dontAnimate);\r\n\r\n    };\r\n\r\n    Slick.prototype.init = function(creation) {\r\n\r\n        var _ = this;\r\n\r\n        if (!$(_.$slider).hasClass('slick-initialized')) {\r\n\r\n            $(_.$slider).addClass('slick-initialized');\r\n\r\n            _.buildRows();\r\n            _.buildOut();\r\n            _.setProps();\r\n            _.startLoad();\r\n            _.loadSlider();\r\n            _.initializeEvents();\r\n            _.updateArrows();\r\n            _.updateDots();\r\n            _.checkResponsive(true);\r\n            _.focusHandler();\r\n\r\n        }\r\n\r\n        if (creation) {\r\n            _.$slider.trigger('init', [_]);\r\n        }\r\n\r\n        if (_.options.accessibility === true) {\r\n            _.initADA();\r\n        }\r\n\r\n        if ( _.options.autoplay ) {\r\n\r\n            _.paused = false;\r\n            _.autoPlay();\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.initADA = function() {\r\n        var _ = this;\r\n        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\r\n            'aria-hidden': 'true',\r\n            'tabindex': '-1'\r\n        }).find('a, input, button, select').attr({\r\n            'tabindex': '-1'\r\n        });\r\n\r\n        _.$slideTrack.attr('role', 'listbox');\r\n\r\n        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {\r\n            $(this).attr({\r\n                'role': 'option',\r\n                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''\r\n            });\r\n        });\r\n\r\n        if (_.$dots !== null) {\r\n            _.$dots.attr('role', 'tablist').find('li').each(function(i) {\r\n                $(this).attr({\r\n                    'role': 'presentation',\r\n                    'aria-selected': 'false',\r\n                    'aria-controls': 'navigation' + _.instanceUid + i + '',\r\n                    'id': 'slick-slide' + _.instanceUid + i + ''\r\n                });\r\n            })\r\n                .first().attr('aria-selected', 'true').end()\r\n                .find('button').attr('role', 'button').end()\r\n                .closest('div').attr('role', 'toolbar');\r\n        }\r\n        _.activateADA();\r\n\r\n    };\r\n\r\n    Slick.prototype.initArrowEvents = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n            _.$prevArrow\r\n               .off('click.slick')\r\n               .on('click.slick', {\r\n                   message: 'previous'\r\n               }, _.changeSlide);\r\n            _.$nextArrow\r\n               .off('click.slick')\r\n               .on('click.slick', {\r\n                   message: 'next'\r\n               }, _.changeSlide);\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.initDotEvents = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n            $('li', _.$dots).on('click.slick', {\r\n                message: 'index'\r\n            }, _.changeSlide);\r\n        }\r\n\r\n        if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {\r\n\r\n            $('li', _.$dots)\r\n                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))\r\n                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.initSlideEvents = function() {\r\n\r\n        var _ = this;\r\n\r\n        if ( _.options.pauseOnHover ) {\r\n\r\n            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\r\n            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.initializeEvents = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.initArrowEvents();\r\n\r\n        _.initDotEvents();\r\n        _.initSlideEvents();\r\n\r\n        _.$list.on('touchstart.slick mousedown.slick', {\r\n            action: 'start'\r\n        }, _.swipeHandler);\r\n        _.$list.on('touchmove.slick mousemove.slick', {\r\n            action: 'move'\r\n        }, _.swipeHandler);\r\n        _.$list.on('touchend.slick mouseup.slick', {\r\n            action: 'end'\r\n        }, _.swipeHandler);\r\n        _.$list.on('touchcancel.slick mouseleave.slick', {\r\n            action: 'end'\r\n        }, _.swipeHandler);\r\n\r\n        _.$list.on('click.slick', _.clickHandler);\r\n\r\n        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\r\n\r\n        if (_.options.accessibility === true) {\r\n            _.$list.on('keydown.slick', _.keyHandler);\r\n        }\r\n\r\n        if (_.options.focusOnSelect === true) {\r\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\r\n        }\r\n\r\n        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\r\n\r\n        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\r\n\r\n        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\r\n\r\n        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\r\n        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);\r\n\r\n    };\r\n\r\n    Slick.prototype.initUI = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n            _.$prevArrow.show();\r\n            _.$nextArrow.show();\r\n\r\n        }\r\n\r\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n            _.$dots.show();\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.keyHandler = function(event) {\r\n\r\n        var _ = this;\r\n        //Dont slide if the cursor is inside the form fields and arrow keys are pressed\r\n        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\r\n            if (event.keyCode === 37 && _.options.accessibility === true) {\r\n                _.changeSlide({\r\n                    data: {\r\n                        message: _.options.rtl === true ? 'next' :  'previous'\r\n                    }\r\n                });\r\n            } else if (event.keyCode === 39 && _.options.accessibility === true) {\r\n                _.changeSlide({\r\n                    data: {\r\n                        message: _.options.rtl === true ? 'previous' : 'next'\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.lazyLoad = function() {\r\n\r\n        var _ = this,\r\n            loadRange, cloneRange, rangeStart, rangeEnd;\r\n\r\n        function loadImages(imagesScope) {\r\n\r\n            $('img[data-lazy]', imagesScope).each(function() {\r\n\r\n                var image = $(this),\r\n                    imageSource = $(this).attr('data-lazy'),\r\n                    imageToLoad = document.createElement('img');\r\n\r\n                imageToLoad.onload = function() {\r\n\r\n                    image\r\n                        .animate({ opacity: 0 }, 100, function() {\r\n                            image\r\n                                .attr('src', imageSource)\r\n                                .animate({ opacity: 1 }, 200, function() {\r\n                                    image\r\n                                        .removeAttr('data-lazy')\r\n                                        .removeClass('slick-loading');\r\n                                });\r\n                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\r\n                        });\r\n\r\n                };\r\n\r\n                imageToLoad.onerror = function() {\r\n\r\n                    image\r\n                        .removeAttr( 'data-lazy' )\r\n                        .removeClass( 'slick-loading' )\r\n                        .addClass( 'slick-lazyload-error' );\r\n\r\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\r\n\r\n                };\r\n\r\n                imageToLoad.src = imageSource;\r\n\r\n            });\r\n\r\n        }\r\n\r\n        if (_.options.centerMode === true) {\r\n            if (_.options.infinite === true) {\r\n                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\r\n                rangeEnd = rangeStart + _.options.slidesToShow + 2;\r\n            } else {\r\n                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\r\n                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\r\n            }\r\n        } else {\r\n            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\r\n            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\r\n            if (_.options.fade === true) {\r\n                if (rangeStart > 0) rangeStart--;\r\n                if (rangeEnd <= _.slideCount) rangeEnd++;\r\n            }\r\n        }\r\n\r\n        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\r\n        loadImages(loadRange);\r\n\r\n        if (_.slideCount <= _.options.slidesToShow) {\r\n            cloneRange = _.$slider.find('.slick-slide');\r\n            loadImages(cloneRange);\r\n        } else\r\n            if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\r\n                cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\r\n                loadImages(cloneRange);\r\n            } else if (_.currentSlide === 0) {\r\n                cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\r\n                loadImages(cloneRange);\r\n            }\r\n\r\n    };\r\n\r\n    Slick.prototype.loadSlider = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.setPosition();\r\n\r\n        _.$slideTrack.css({\r\n            opacity: 1\r\n        });\r\n\r\n        _.$slider.removeClass('slick-loading');\r\n\r\n        _.initUI();\r\n\r\n        if (_.options.lazyLoad === 'progressive') {\r\n            _.progressiveLazyLoad();\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.next = Slick.prototype.slickNext = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.changeSlide({\r\n            data: {\r\n                message: 'next'\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    Slick.prototype.orientationChange = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.checkResponsive();\r\n        _.setPosition();\r\n\r\n    };\r\n\r\n    Slick.prototype.pause = Slick.prototype.slickPause = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.autoPlayClear();\r\n        _.paused = true;\r\n\r\n    };\r\n\r\n    Slick.prototype.play = Slick.prototype.slickPlay = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.autoPlay();\r\n        _.options.autoplay = true;\r\n        _.paused = false;\r\n        _.focussed = false;\r\n        _.interrupted = false;\r\n\r\n    };\r\n\r\n    Slick.prototype.postSlide = function(index) {\r\n\r\n        var _ = this;\r\n\r\n        if( !_.unslicked ) {\r\n\r\n            _.$slider.trigger('afterChange', [_, index]);\r\n\r\n            _.animating = false;\r\n\r\n            _.setPosition();\r\n\r\n            _.swipeLeft = null;\r\n\r\n            if ( _.options.autoplay ) {\r\n                _.autoPlay();\r\n            }\r\n\r\n            if (_.options.accessibility === true) {\r\n                _.initADA();\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.prev = Slick.prototype.slickPrev = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.changeSlide({\r\n            data: {\r\n                message: 'previous'\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    Slick.prototype.preventDefault = function(event) {\r\n\r\n        event.preventDefault();\r\n\r\n    };\r\n\r\n    Slick.prototype.progressiveLazyLoad = function( tryCount ) {\r\n\r\n        tryCount = tryCount || 1;\r\n\r\n        var _ = this,\r\n            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),\r\n            image,\r\n            imageSource,\r\n            imageToLoad;\r\n\r\n        if ( $imgsToLoad.length ) {\r\n\r\n            image = $imgsToLoad.first();\r\n            imageSource = image.attr('data-lazy');\r\n            imageToLoad = document.createElement('img');\r\n\r\n            imageToLoad.onload = function() {\r\n\r\n                image\r\n                    .attr( 'src', imageSource )\r\n                    .removeAttr('data-lazy')\r\n                    .removeClass('slick-loading');\r\n\r\n                if ( _.options.adaptiveHeight === true ) {\r\n                    _.setPosition();\r\n                }\r\n\r\n                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);\r\n                _.progressiveLazyLoad();\r\n\r\n            };\r\n\r\n            imageToLoad.onerror = function() {\r\n\r\n                if ( tryCount < 3 ) {\r\n\r\n                    /**\r\n                     * try to load the image 3 times,\r\n                     * leave a slight delay so we don't get\r\n                     * servers blocking the request.\r\n                     */\r\n                    setTimeout( function() {\r\n                        _.progressiveLazyLoad( tryCount + 1 );\r\n                    }, 500 );\r\n\r\n                } else {\r\n\r\n                    image\r\n                        .removeAttr( 'data-lazy' )\r\n                        .removeClass( 'slick-loading' )\r\n                        .addClass( 'slick-lazyload-error' );\r\n\r\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\r\n\r\n                    _.progressiveLazyLoad();\r\n\r\n                }\r\n\r\n            };\r\n\r\n            imageToLoad.src = imageSource;\r\n\r\n        } else {\r\n\r\n            _.$slider.trigger('allImagesLoaded', [ _ ]);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.refresh = function( initializing ) {\r\n\r\n        var _ = this, currentSlide, lastVisibleIndex;\r\n\r\n        lastVisibleIndex = _.slideCount - _.options.slidesToShow;\r\n\r\n        // in non-infinite sliders, we don't want to go past the\r\n        // last visible index.\r\n        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {\r\n            _.currentSlide = lastVisibleIndex;\r\n        }\r\n\r\n        // if less slides than to show, go to start.\r\n        if ( _.slideCount <= _.options.slidesToShow ) {\r\n            _.currentSlide = 0;\r\n\r\n        }\r\n\r\n        currentSlide = _.currentSlide;\r\n\r\n        _.destroy(true);\r\n\r\n        $.extend(_, _.initials, { currentSlide: currentSlide });\r\n\r\n        _.init();\r\n\r\n        if( !initializing ) {\r\n\r\n            _.changeSlide({\r\n                data: {\r\n                    message: 'index',\r\n                    index: currentSlide\r\n                }\r\n            }, false);\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.registerBreakpoints = function() {\r\n\r\n        var _ = this, breakpoint, currentBreakpoint, l,\r\n            responsiveSettings = _.options.responsive || null;\r\n\r\n        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {\r\n\r\n            _.respondTo = _.options.respondTo || 'window';\r\n\r\n            for ( breakpoint in responsiveSettings ) {\r\n\r\n                l = _.breakpoints.length-1;\r\n                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;\r\n\r\n                if (responsiveSettings.hasOwnProperty(breakpoint)) {\r\n\r\n                    // loop through the breakpoints and cut out any existing\r\n                    // ones with the same breakpoint number, we don't want dupes.\r\n                    while( l >= 0 ) {\r\n                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {\r\n                            _.breakpoints.splice(l,1);\r\n                        }\r\n                        l--;\r\n                    }\r\n\r\n                    _.breakpoints.push(currentBreakpoint);\r\n                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            _.breakpoints.sort(function(a, b) {\r\n                return ( _.options.mobileFirst ) ? a-b : b-a;\r\n            });\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.reinit = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.$slides =\r\n            _.$slideTrack\r\n                .children(_.options.slide)\r\n                .addClass('slick-slide');\r\n\r\n        _.slideCount = _.$slides.length;\r\n\r\n        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\r\n            _.currentSlide = _.currentSlide - _.options.slidesToScroll;\r\n        }\r\n\r\n        if (_.slideCount <= _.options.slidesToShow) {\r\n            _.currentSlide = 0;\r\n        }\r\n\r\n        _.registerBreakpoints();\r\n\r\n        _.setProps();\r\n        _.setupInfinite();\r\n        _.buildArrows();\r\n        _.updateArrows();\r\n        _.initArrowEvents();\r\n        _.buildDots();\r\n        _.updateDots();\r\n        _.initDotEvents();\r\n        _.cleanUpSlideEvents();\r\n        _.initSlideEvents();\r\n\r\n        _.checkResponsive(false, true);\r\n\r\n        if (_.options.focusOnSelect === true) {\r\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\r\n        }\r\n\r\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\r\n\r\n        _.setPosition();\r\n        _.focusHandler();\r\n\r\n        _.paused = !_.options.autoplay;\r\n        _.autoPlay();\r\n\r\n        _.$slider.trigger('reInit', [_]);\r\n\r\n    };\r\n\r\n    Slick.prototype.resize = function() {\r\n\r\n        var _ = this;\r\n\r\n        if ($(window).width() !== _.windowWidth) {\r\n            clearTimeout(_.windowDelay);\r\n            _.windowDelay = window.setTimeout(function() {\r\n                _.windowWidth = $(window).width();\r\n                _.checkResponsive();\r\n                if( !_.unslicked ) { _.setPosition(); }\r\n            }, 50);\r\n        }\r\n    };\r\n\r\n    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {\r\n\r\n        var _ = this;\r\n\r\n        if (typeof(index) === 'boolean') {\r\n            removeBefore = index;\r\n            index = removeBefore === true ? 0 : _.slideCount - 1;\r\n        } else {\r\n            index = removeBefore === true ? --index : index;\r\n        }\r\n\r\n        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\r\n            return false;\r\n        }\r\n\r\n        _.unload();\r\n\r\n        if (removeAll === true) {\r\n            _.$slideTrack.children().remove();\r\n        } else {\r\n            _.$slideTrack.children(this.options.slide).eq(index).remove();\r\n        }\r\n\r\n        _.$slides = _.$slideTrack.children(this.options.slide);\r\n\r\n        _.$slideTrack.children(this.options.slide).detach();\r\n\r\n        _.$slideTrack.append(_.$slides);\r\n\r\n        _.$slidesCache = _.$slides;\r\n\r\n        _.reinit();\r\n\r\n    };\r\n\r\n    Slick.prototype.setCSS = function(position) {\r\n\r\n        var _ = this,\r\n            positionProps = {},\r\n            x, y;\r\n\r\n        if (_.options.rtl === true) {\r\n            position = -position;\r\n        }\r\n        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\r\n        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\r\n\r\n        positionProps[_.positionProp] = position;\r\n\r\n        if (_.transformsEnabled === false) {\r\n            _.$slideTrack.css(positionProps);\r\n        } else {\r\n            positionProps = {};\r\n            if (_.cssTransitions === false) {\r\n                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\r\n                _.$slideTrack.css(positionProps);\r\n            } else {\r\n                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\r\n                _.$slideTrack.css(positionProps);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.setDimensions = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.vertical === false) {\r\n            if (_.options.centerMode === true) {\r\n                _.$list.css({\r\n                    padding: ('0px ' + _.options.centerPadding)\r\n                });\r\n            }\r\n        } else {\r\n            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\r\n            if (_.options.centerMode === true) {\r\n                _.$list.css({\r\n                    padding: (_.options.centerPadding + ' 0px')\r\n                });\r\n            }\r\n        }\r\n\r\n        _.listWidth = _.$list.width();\r\n        _.listHeight = _.$list.height();\r\n\r\n\r\n        if (_.options.vertical === false && _.options.variableWidth === false) {\r\n            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\r\n            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));\r\n\r\n        } else if (_.options.variableWidth === true) {\r\n            _.$slideTrack.width(5000 * _.slideCount);\r\n        } else {\r\n            _.slideWidth = Math.ceil(_.listWidth);\r\n            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));\r\n        }\r\n\r\n        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\r\n        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\r\n\r\n    };\r\n\r\n    Slick.prototype.setFade = function() {\r\n\r\n        var _ = this,\r\n            targetLeft;\r\n\r\n        _.$slides.each(function(index, element) {\r\n            targetLeft = (_.slideWidth * index) * -1;\r\n            if (_.options.rtl === true) {\r\n                $(element).css({\r\n                    position: 'relative',\r\n                    right: targetLeft,\r\n                    top: 0,\r\n                    zIndex: _.options.zIndex - 2,\r\n                    opacity: 0\r\n                });\r\n            } else {\r\n                $(element).css({\r\n                    position: 'relative',\r\n                    left: targetLeft,\r\n                    top: 0,\r\n                    zIndex: _.options.zIndex - 2,\r\n                    opacity: 0\r\n                });\r\n            }\r\n        });\r\n\r\n        _.$slides.eq(_.currentSlide).css({\r\n            zIndex: _.options.zIndex - 1,\r\n            opacity: 1\r\n        });\r\n\r\n    };\r\n\r\n    Slick.prototype.setHeight = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\r\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\r\n            _.$list.css('height', targetHeight);\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.setOption =\r\n    Slick.prototype.slickSetOption = function() {\r\n\r\n        /**\r\n         * accepts arguments in format of:\r\n         *\r\n         *  - for changing a single option's value:\r\n         *     .slick(\"setOption\", option, value, refresh )\r\n         *\r\n         *  - for changing a set of responsive options:\r\n         *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\r\n         *\r\n         *  - for updating multiple values at once (not responsive)\r\n         *     .slick(\"setOption\", { 'option': value, ... }, refresh )\r\n         */\r\n\r\n        var _ = this, l, item, option, value, refresh = false, type;\r\n\r\n        if( $.type( arguments[0] ) === 'object' ) {\r\n\r\n            option =  arguments[0];\r\n            refresh = arguments[1];\r\n            type = 'multiple';\r\n\r\n        } else if ( $.type( arguments[0] ) === 'string' ) {\r\n\r\n            option =  arguments[0];\r\n            value = arguments[1];\r\n            refresh = arguments[2];\r\n\r\n            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {\r\n\r\n                type = 'responsive';\r\n\r\n            } else if ( typeof arguments[1] !== 'undefined' ) {\r\n\r\n                type = 'single';\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if ( type === 'single' ) {\r\n\r\n            _.options[option] = value;\r\n\r\n\r\n        } else if ( type === 'multiple' ) {\r\n\r\n            $.each( option , function( opt, val ) {\r\n\r\n                _.options[opt] = val;\r\n\r\n            });\r\n\r\n\r\n        } else if ( type === 'responsive' ) {\r\n\r\n            for ( item in value ) {\r\n\r\n                if( $.type( _.options.responsive ) !== 'array' ) {\r\n\r\n                    _.options.responsive = [ value[item] ];\r\n\r\n                } else {\r\n\r\n                    l = _.options.responsive.length-1;\r\n\r\n                    // loop through the responsive object and splice out duplicates.\r\n                    while( l >= 0 ) {\r\n\r\n                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {\r\n\r\n                            _.options.responsive.splice(l,1);\r\n\r\n                        }\r\n\r\n                        l--;\r\n\r\n                    }\r\n\r\n                    _.options.responsive.push( value[item] );\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if ( refresh ) {\r\n\r\n            _.unload();\r\n            _.reinit();\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.setPosition = function() {\r\n\r\n        var _ = this;\r\n\r\n        _.setDimensions();\r\n\r\n        _.setHeight();\r\n\r\n        if (_.options.fade === false) {\r\n            _.setCSS(_.getLeft(_.currentSlide));\r\n        } else {\r\n            _.setFade();\r\n        }\r\n\r\n        _.$slider.trigger('setPosition', [_]);\r\n\r\n    };\r\n\r\n    Slick.prototype.setProps = function() {\r\n\r\n        var _ = this,\r\n            bodyStyle = document.body.style;\r\n\r\n        _.positionProp = _.options.vertical === true ? 'top' : 'left';\r\n\r\n        if (_.positionProp === 'top') {\r\n            _.$slider.addClass('slick-vertical');\r\n        } else {\r\n            _.$slider.removeClass('slick-vertical');\r\n        }\r\n\r\n        if (bodyStyle.WebkitTransition !== undefined ||\r\n            bodyStyle.MozTransition !== undefined ||\r\n            bodyStyle.msTransition !== undefined) {\r\n            if (_.options.useCSS === true) {\r\n                _.cssTransitions = true;\r\n            }\r\n        }\r\n\r\n        if ( _.options.fade ) {\r\n            if ( typeof _.options.zIndex === 'number' ) {\r\n                if( _.options.zIndex < 3 ) {\r\n                    _.options.zIndex = 3;\r\n                }\r\n            } else {\r\n                _.options.zIndex = _.defaults.zIndex;\r\n            }\r\n        }\r\n\r\n        if (bodyStyle.OTransform !== undefined) {\r\n            _.animType = 'OTransform';\r\n            _.transformType = '-o-transform';\r\n            _.transitionType = 'OTransition';\r\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\r\n        }\r\n        if (bodyStyle.MozTransform !== undefined) {\r\n            _.animType = 'MozTransform';\r\n            _.transformType = '-moz-transform';\r\n            _.transitionType = 'MozTransition';\r\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\r\n        }\r\n        if (bodyStyle.webkitTransform !== undefined) {\r\n            _.animType = 'webkitTransform';\r\n            _.transformType = '-webkit-transform';\r\n            _.transitionType = 'webkitTransition';\r\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\r\n        }\r\n        if (bodyStyle.msTransform !== undefined) {\r\n            _.animType = 'msTransform';\r\n            _.transformType = '-ms-transform';\r\n            _.transitionType = 'msTransition';\r\n            if (bodyStyle.msTransform === undefined) _.animType = false;\r\n        }\r\n        if (bodyStyle.transform !== undefined && _.animType !== false) {\r\n            _.animType = 'transform';\r\n            _.transformType = 'transform';\r\n            _.transitionType = 'transition';\r\n        }\r\n        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);\r\n    };\r\n\r\n\r\n    Slick.prototype.setSlideClasses = function(index) {\r\n\r\n        var _ = this,\r\n            centerOffset, allSlides, indexOffset, remainder;\r\n\r\n        allSlides = _.$slider\r\n            .find('.slick-slide')\r\n            .removeClass('slick-active slick-center slick-current')\r\n            .attr('aria-hidden', 'true');\r\n\r\n        _.$slides\r\n            .eq(index)\r\n            .addClass('slick-current');\r\n\r\n        if (_.options.centerMode === true) {\r\n\r\n            centerOffset = Math.floor(_.options.slidesToShow / 2);\r\n\r\n            if (_.options.infinite === true) {\r\n\r\n                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {\r\n\r\n                    _.$slides\r\n                        .slice(index - centerOffset, index + centerOffset + 1)\r\n                        .addClass('slick-active')\r\n                        .attr('aria-hidden', 'false');\r\n\r\n                } else {\r\n\r\n                    indexOffset = _.options.slidesToShow + index;\r\n                    allSlides\r\n                        .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)\r\n                        .addClass('slick-active')\r\n                        .attr('aria-hidden', 'false');\r\n\r\n                }\r\n\r\n                if (index === 0) {\r\n\r\n                    allSlides\r\n                        .eq(allSlides.length - 1 - _.options.slidesToShow)\r\n                        .addClass('slick-center');\r\n\r\n                } else if (index === _.slideCount - 1) {\r\n\r\n                    allSlides\r\n                        .eq(_.options.slidesToShow)\r\n                        .addClass('slick-center');\r\n\r\n                }\r\n\r\n            }\r\n\r\n            _.$slides\r\n                .eq(index)\r\n                .addClass('slick-center');\r\n\r\n        } else {\r\n\r\n            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {\r\n\r\n                _.$slides\r\n                    .slice(index, index + _.options.slidesToShow)\r\n                    .addClass('slick-active')\r\n                    .attr('aria-hidden', 'false');\r\n\r\n            } else if (allSlides.length <= _.options.slidesToShow) {\r\n\r\n                allSlides\r\n                    .addClass('slick-active')\r\n                    .attr('aria-hidden', 'false');\r\n\r\n            } else {\r\n\r\n                remainder = _.slideCount % _.options.slidesToShow;\r\n                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\r\n\r\n                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {\r\n\r\n                    allSlides\r\n                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)\r\n                        .addClass('slick-active')\r\n                        .attr('aria-hidden', 'false');\r\n\r\n                } else {\r\n\r\n                    allSlides\r\n                        .slice(indexOffset, indexOffset + _.options.slidesToShow)\r\n                        .addClass('slick-active')\r\n                        .attr('aria-hidden', 'false');\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if (_.options.lazyLoad === 'ondemand') {\r\n            _.lazyLoad();\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.setupInfinite = function() {\r\n\r\n        var _ = this,\r\n            i, slideIndex, infiniteCount;\r\n\r\n        if (_.options.fade === true) {\r\n            _.options.centerMode = false;\r\n        }\r\n\r\n        if (_.options.infinite === true && _.options.fade === false) {\r\n\r\n            slideIndex = null;\r\n\r\n            if (_.slideCount > _.options.slidesToShow) {\r\n\r\n                if (_.options.centerMode === true) {\r\n                    infiniteCount = _.options.slidesToShow + 1;\r\n                } else {\r\n                    infiniteCount = _.options.slidesToShow;\r\n                }\r\n\r\n                for (i = _.slideCount; i > (_.slideCount -\r\n                        infiniteCount); i -= 1) {\r\n                    slideIndex = i - 1;\r\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\r\n                        .attr('data-slick-index', slideIndex - _.slideCount)\r\n                        .prependTo(_.$slideTrack).addClass('slick-cloned');\r\n                }\r\n                for (i = 0; i < infiniteCount; i += 1) {\r\n                    slideIndex = i;\r\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\r\n                        .attr('data-slick-index', slideIndex + _.slideCount)\r\n                        .appendTo(_.$slideTrack).addClass('slick-cloned');\r\n                }\r\n                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {\r\n                    $(this).attr('id', '');\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.interrupt = function( toggle ) {\r\n\r\n        var _ = this;\r\n\r\n        if( !toggle ) {\r\n            _.autoPlay();\r\n        }\r\n        _.interrupted = toggle;\r\n\r\n    };\r\n\r\n    Slick.prototype.selectHandler = function(event) {\r\n\r\n        var _ = this;\r\n\r\n        var targetElement =\r\n            $(event.target).is('.slick-slide') ?\r\n                $(event.target) :\r\n                $(event.target).parents('.slick-slide');\r\n\r\n        var index = parseInt(targetElement.attr('data-slick-index'));\r\n\r\n        if (!index) index = 0;\r\n\r\n        if (_.slideCount <= _.options.slidesToShow) {\r\n\r\n            _.setSlideClasses(index);\r\n            _.asNavFor(index);\r\n            return;\r\n\r\n        }\r\n\r\n        _.slideHandler(index);\r\n\r\n    };\r\n\r\n    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {\r\n\r\n        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,\r\n            _ = this, navTarget;\r\n\r\n        sync = sync || false;\r\n\r\n        if (_.animating === true && _.options.waitForAnimate === true) {\r\n            return;\r\n        }\r\n\r\n        if (_.options.fade === true && _.currentSlide === index) {\r\n            return;\r\n        }\r\n\r\n        if (_.slideCount <= _.options.slidesToShow) {\r\n            return;\r\n        }\r\n\r\n        if (sync === false) {\r\n            _.asNavFor(index);\r\n        }\r\n\r\n        targetSlide = index;\r\n        targetLeft = _.getLeft(targetSlide);\r\n        slideLeft = _.getLeft(_.currentSlide);\r\n\r\n        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\r\n\r\n        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\r\n            if (_.options.fade === false) {\r\n                targetSlide = _.currentSlide;\r\n                if (dontAnimate !== true) {\r\n                    _.animateSlide(slideLeft, function() {\r\n                        _.postSlide(targetSlide);\r\n                    });\r\n                } else {\r\n                    _.postSlide(targetSlide);\r\n                }\r\n            }\r\n            return;\r\n        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {\r\n            if (_.options.fade === false) {\r\n                targetSlide = _.currentSlide;\r\n                if (dontAnimate !== true) {\r\n                    _.animateSlide(slideLeft, function() {\r\n                        _.postSlide(targetSlide);\r\n                    });\r\n                } else {\r\n                    _.postSlide(targetSlide);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        if ( _.options.autoplay ) {\r\n            clearInterval(_.autoPlayTimer);\r\n        }\r\n\r\n        if (targetSlide < 0) {\r\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);\r\n            } else {\r\n                animSlide = _.slideCount + targetSlide;\r\n            }\r\n        } else if (targetSlide >= _.slideCount) {\r\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n                animSlide = 0;\r\n            } else {\r\n                animSlide = targetSlide - _.slideCount;\r\n            }\r\n        } else {\r\n            animSlide = targetSlide;\r\n        }\r\n\r\n        _.animating = true;\r\n\r\n        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\r\n\r\n        oldSlide = _.currentSlide;\r\n        _.currentSlide = animSlide;\r\n\r\n        _.setSlideClasses(_.currentSlide);\r\n\r\n        if ( _.options.asNavFor ) {\r\n\r\n            navTarget = _.getNavTarget();\r\n            navTarget = navTarget.slick('getSlick');\r\n\r\n            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {\r\n                navTarget.setSlideClasses(_.currentSlide);\r\n            }\r\n\r\n        }\r\n\r\n        _.updateDots();\r\n        _.updateArrows();\r\n\r\n        if (_.options.fade === true) {\r\n            if (dontAnimate !== true) {\r\n\r\n                _.fadeSlideOut(oldSlide);\r\n\r\n                _.fadeSlide(animSlide, function() {\r\n                    _.postSlide(animSlide);\r\n                });\r\n\r\n            } else {\r\n                _.postSlide(animSlide);\r\n            }\r\n            _.animateHeight();\r\n            return;\r\n        }\r\n\r\n        if (dontAnimate !== true) {\r\n            _.animateSlide(targetLeft, function() {\r\n                _.postSlide(animSlide);\r\n            });\r\n        } else {\r\n            _.postSlide(animSlide);\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.startLoad = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n            _.$prevArrow.hide();\r\n            _.$nextArrow.hide();\r\n\r\n        }\r\n\r\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n            _.$dots.hide();\r\n\r\n        }\r\n\r\n        _.$slider.addClass('slick-loading');\r\n\r\n    };\r\n\r\n    Slick.prototype.swipeDirection = function() {\r\n\r\n        var xDist, yDist, r, swipeAngle, _ = this;\r\n\r\n        xDist = _.touchObject.startX - _.touchObject.curX;\r\n        yDist = _.touchObject.startY - _.touchObject.curY;\r\n        r = Math.atan2(yDist, xDist);\r\n\r\n        swipeAngle = Math.round(r * 180 / Math.PI);\r\n        if (swipeAngle < 0) {\r\n            swipeAngle = 360 - Math.abs(swipeAngle);\r\n        }\r\n\r\n        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {\r\n            return (_.options.rtl === false ? 'left' : 'right');\r\n        }\r\n        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {\r\n            return (_.options.rtl === false ? 'left' : 'right');\r\n        }\r\n        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {\r\n            return (_.options.rtl === false ? 'right' : 'left');\r\n        }\r\n        if (_.options.verticalSwiping === true) {\r\n            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {\r\n                return 'down';\r\n            } else {\r\n                return 'up';\r\n            }\r\n        }\r\n\r\n        return 'vertical';\r\n\r\n    };\r\n\r\n    Slick.prototype.swipeEnd = function(event) {\r\n\r\n        var _ = this,\r\n            slideCount,\r\n            direction;\r\n\r\n        _.dragging = false;\r\n        _.interrupted = false;\r\n        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;\r\n\r\n        if ( _.touchObject.curX === undefined ) {\r\n            return false;\r\n        }\r\n\r\n        if ( _.touchObject.edgeHit === true ) {\r\n            _.$slider.trigger('edge', [_, _.swipeDirection() ]);\r\n        }\r\n\r\n        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {\r\n\r\n            direction = _.swipeDirection();\r\n\r\n            switch ( direction ) {\r\n\r\n                case 'left':\r\n                case 'down':\r\n\r\n                    slideCount =\r\n                        _.options.swipeToSlide ?\r\n                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :\r\n                            _.currentSlide + _.getSlideCount();\r\n\r\n                    _.currentDirection = 0;\r\n\r\n                    break;\r\n\r\n                case 'right':\r\n                case 'up':\r\n\r\n                    slideCount =\r\n                        _.options.swipeToSlide ?\r\n                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :\r\n                            _.currentSlide - _.getSlideCount();\r\n\r\n                    _.currentDirection = 1;\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n\r\n            }\r\n\r\n            if( direction != 'vertical' ) {\r\n\r\n                _.slideHandler( slideCount );\r\n                _.touchObject = {};\r\n                _.$slider.trigger('swipe', [_, direction ]);\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            if ( _.touchObject.startX !== _.touchObject.curX ) {\r\n\r\n                _.slideHandler( _.currentSlide );\r\n                _.touchObject = {};\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.swipeHandler = function(event) {\r\n\r\n        var _ = this;\r\n\r\n        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {\r\n            return;\r\n        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\r\n            return;\r\n        }\r\n\r\n        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?\r\n            event.originalEvent.touches.length : 1;\r\n\r\n        _.touchObject.minSwipe = _.listWidth / _.options\r\n            .touchThreshold;\r\n\r\n        if (_.options.verticalSwiping === true) {\r\n            _.touchObject.minSwipe = _.listHeight / _.options\r\n                .touchThreshold;\r\n        }\r\n\r\n        switch (event.data.action) {\r\n\r\n            case 'start':\r\n                _.swipeStart(event);\r\n                break;\r\n\r\n            case 'move':\r\n                _.swipeMove(event);\r\n                break;\r\n\r\n            case 'end':\r\n                _.swipeEnd(event);\r\n                break;\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.swipeMove = function(event) {\r\n\r\n        var _ = this,\r\n            edgeWasHit = false,\r\n            curLeft, swipeDirection, swipeLength, positionOffset, touches;\r\n\r\n        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\r\n\r\n        if (!_.dragging || touches && touches.length !== 1) {\r\n            return false;\r\n        }\r\n\r\n        curLeft = _.getLeft(_.currentSlide);\r\n\r\n        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\r\n        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\r\n\r\n        _.touchObject.swipeLength = Math.round(Math.sqrt(\r\n            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\r\n\r\n        if (_.options.verticalSwiping === true) {\r\n            _.touchObject.swipeLength = Math.round(Math.sqrt(\r\n                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\r\n        }\r\n\r\n        swipeDirection = _.swipeDirection();\r\n\r\n        if (swipeDirection === 'vertical') {\r\n            return;\r\n        }\r\n\r\n        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\r\n        if (_.options.verticalSwiping === true) {\r\n            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\r\n        }\r\n\r\n\r\n        swipeLength = _.touchObject.swipeLength;\r\n\r\n        _.touchObject.edgeHit = false;\r\n\r\n        if (_.options.infinite === false) {\r\n            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {\r\n                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\r\n                _.touchObject.edgeHit = true;\r\n            }\r\n        }\r\n\r\n        if (_.options.vertical === false) {\r\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\r\n        } else {\r\n            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;\r\n        }\r\n        if (_.options.verticalSwiping === true) {\r\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\r\n        }\r\n\r\n        if (_.options.fade === true || _.options.touchMove === false) {\r\n            return false;\r\n        }\r\n\r\n        if (_.animating === true) {\r\n            _.swipeLeft = null;\r\n            return false;\r\n        }\r\n\r\n        _.setCSS(_.swipeLeft);\r\n\r\n    };\r\n\r\n    Slick.prototype.swipeStart = function(event) {\r\n\r\n        var _ = this,\r\n            touches;\r\n\r\n        _.interrupted = true;\r\n\r\n        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\r\n            _.touchObject = {};\r\n            return false;\r\n        }\r\n\r\n        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\r\n            touches = event.originalEvent.touches[0];\r\n        }\r\n\r\n        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\r\n        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\r\n\r\n        _.dragging = true;\r\n\r\n    };\r\n\r\n    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.$slidesCache !== null) {\r\n\r\n            _.unload();\r\n\r\n            _.$slideTrack.children(this.options.slide).detach();\r\n\r\n            _.$slidesCache.appendTo(_.$slideTrack);\r\n\r\n            _.reinit();\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.unload = function() {\r\n\r\n        var _ = this;\r\n\r\n        $('.slick-cloned', _.$slider).remove();\r\n\r\n        if (_.$dots) {\r\n            _.$dots.remove();\r\n        }\r\n\r\n        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\r\n            _.$prevArrow.remove();\r\n        }\r\n\r\n        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\r\n            _.$nextArrow.remove();\r\n        }\r\n\r\n        _.$slides\r\n            .removeClass('slick-slide slick-active slick-visible slick-current')\r\n            .attr('aria-hidden', 'true')\r\n            .css('width', '');\r\n\r\n    };\r\n\r\n    Slick.prototype.unslick = function(fromBreakpoint) {\r\n\r\n        var _ = this;\r\n        _.$slider.trigger('unslick', [_, fromBreakpoint]);\r\n        _.destroy();\r\n\r\n    };\r\n\r\n    Slick.prototype.updateArrows = function() {\r\n\r\n        var _ = this,\r\n            centerOffset;\r\n\r\n        centerOffset = Math.floor(_.options.slidesToShow / 2);\r\n\r\n        if ( _.options.arrows === true &&\r\n            _.slideCount > _.options.slidesToShow &&\r\n            !_.options.infinite ) {\r\n\r\n            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n            if (_.currentSlide === 0) {\r\n\r\n                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\r\n\r\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\r\n\r\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.updateDots = function() {\r\n\r\n        var _ = this;\r\n\r\n        if (_.$dots !== null) {\r\n\r\n            _.$dots\r\n                .find('li')\r\n                .removeClass('slick-active')\r\n                .attr('aria-hidden', 'true');\r\n\r\n            _.$dots\r\n                .find('li')\r\n                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))\r\n                .addClass('slick-active')\r\n                .attr('aria-hidden', 'false');\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Slick.prototype.visibility = function() {\r\n\r\n        var _ = this;\r\n\r\n        if ( _.options.autoplay ) {\r\n\r\n            if ( document[_.hidden] ) {\r\n\r\n                _.interrupted = true;\r\n\r\n            } else {\r\n\r\n                _.interrupted = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    $.fn.slick = function() {\r\n        var _ = this,\r\n            opt = arguments[0],\r\n            args = Array.prototype.slice.call(arguments, 1),\r\n            l = _.length,\r\n            i,\r\n            ret;\r\n        for (i = 0; i < l; i++) {\r\n            if (typeof opt == 'object' || typeof opt == 'undefined')\r\n                _[i].slick = new Slick(_[i], opt);\r\n            else\r\n                ret = _[i].slick[opt].apply(_[i].slick, args);\r\n            if (typeof ret != 'undefined') return ret;\r\n        }\r\n        return _;\r\n    };\r\n\r\n}));","/***\n * Contains core SlickGrid classes.\n * @module Core\n * @namespace Slick\n */\n\n(function ($) {\n  // register namespace\n  $.extend(true, window, {\n    \"Slick\": {\n      \"Event\": Event,\n      \"EventData\": EventData,\n      \"EventHandler\": EventHandler,\n      \"Range\": Range,\n      \"NonDataRow\": NonDataItem,\n      \"Group\": Group,\n      \"GroupTotals\": GroupTotals,\n      \"EditorLock\": EditorLock,\n\n      /***\n       * A global singleton editor lock.\n       * @class GlobalEditorLock\n       * @static\n       * @constructor\n       */\n      \"GlobalEditorLock\": new EditorLock()\n    }\n  });\n\n  /***\n   * An event object for passing data to event handlers and letting them control propagation.\n   * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n   * @class EventData\n   * @constructor\n   */\n  function EventData() {\n    var isPropagationStopped = false;\n    var isImmediatePropagationStopped = false;\n\n    /***\n     * Stops event from propagating up the DOM tree.\n     * @method stopPropagation\n     */\n    this.stopPropagation = function () {\n      isPropagationStopped = true;\n    };\n\n    /***\n     * Returns whether stopPropagation was called on this event object.\n     * @method isPropagationStopped\n     * @return {Boolean}\n     */\n    this.isPropagationStopped = function () {\n      return isPropagationStopped;\n    };\n\n    /***\n     * Prevents the rest of the handlers from being executed.\n     * @method stopImmediatePropagation\n     */\n    this.stopImmediatePropagation = function () {\n      isImmediatePropagationStopped = true;\n    };\n\n    /***\n     * Returns whether stopImmediatePropagation was called on this event object.\\\n     * @method isImmediatePropagationStopped\n     * @return {Boolean}\n     */\n    this.isImmediatePropagationStopped = function () {\n      return isImmediatePropagationStopped;\n    }\n  }\n\n  /***\n   * A simple publisher-subscriber implementation.\n   * @class Event\n   * @constructor\n   */\n  function Event() {\n    var handlers = [];\n\n    /***\n     * Adds an event handler to be called when the event is fired.\n     * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n     * object the event was fired with.<p>\n     * @method subscribe\n     * @param fn {Function} Event handler.\n     */\n    this.subscribe = function (fn) {\n      handlers.push(fn);\n    };\n\n    /***\n     * Removes an event handler added with <code>subscribe(fn)</code>.\n     * @method unsubscribe\n     * @param fn {Function} Event handler to be removed.\n     */\n    this.unsubscribe = function (fn) {\n      for (var i = handlers.length - 1; i >= 0; i--) {\n        if (handlers[i] === fn) {\n          handlers.splice(i, 1);\n        }\n      }\n    };\n\n    /***\n     * Fires an event notifying all subscribers.\n     * @method notify\n     * @param args {Object} Additional data object to be passed to all handlers.\n     * @param e {EventData}\n     *      Optional.\n     *      An <code>EventData</code> object to be passed to all handlers.\n     *      For DOM events, an existing W3C/jQuery event object can be passed in.\n     * @param scope {Object}\n     *      Optional.\n     *      The scope (\"this\") within which the handler will be executed.\n     *      If not specified, the scope will be set to the <code>Event</code> instance.\n     */\n    this.notify = function (args, e, scope) {\n      e = e || new EventData();\n      scope = scope || this;\n\n      var returnValue;\n      for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n        returnValue = handlers[i].call(scope, e, args);\n      }\n\n      return returnValue;\n    };\n  }\n\n  function EventHandler() {\n    var handlers = [];\n\n    this.subscribe = function (event, handler) {\n      handlers.push({\n        event: event,\n        handler: handler\n      });\n      event.subscribe(handler);\n\n      return this;  // allow chaining\n    };\n\n    this.unsubscribe = function (event, handler) {\n      var i = handlers.length;\n      while (i--) {\n        if (handlers[i].event === event &&\n            handlers[i].handler === handler) {\n          handlers.splice(i, 1);\n          event.unsubscribe(handler);\n          return;\n        }\n      }\n\n      return this;  // allow chaining\n    };\n\n    this.unsubscribeAll = function () {\n      var i = handlers.length;\n      while (i--) {\n        handlers[i].event.unsubscribe(handlers[i].handler);\n      }\n      handlers = [];\n\n      return this;  // allow chaining\n    }\n  }\n\n  /***\n   * A structure containing a range of cells.\n   * @class Range\n   * @constructor\n   * @param fromRow {Integer} Starting row.\n   * @param fromCell {Integer} Starting cell.\n   * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n   * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n   */\n  function Range(fromRow, fromCell, toRow, toCell) {\n    if (toRow === undefined && toCell === undefined) {\n      toRow = fromRow;\n      toCell = fromCell;\n    }\n\n    /***\n     * @property fromRow\n     * @type {Integer}\n     */\n    this.fromRow = Math.min(fromRow, toRow);\n\n    /***\n     * @property fromCell\n     * @type {Integer}\n     */\n    this.fromCell = Math.min(fromCell, toCell);\n\n    /***\n     * @property toRow\n     * @type {Integer}\n     */\n    this.toRow = Math.max(fromRow, toRow);\n\n    /***\n     * @property toCell\n     * @type {Integer}\n     */\n    this.toCell = Math.max(fromCell, toCell);\n\n    /***\n     * Returns whether a range represents a single row.\n     * @method isSingleRow\n     * @return {Boolean}\n     */\n    this.isSingleRow = function () {\n      return this.fromRow == this.toRow;\n    };\n\n    /***\n     * Returns whether a range represents a single cell.\n     * @method isSingleCell\n     * @return {Boolean}\n     */\n    this.isSingleCell = function () {\n      return this.fromRow == this.toRow && this.fromCell == this.toCell;\n    };\n\n    /***\n     * Returns whether a range contains a given cell.\n     * @method contains\n     * @param row {Integer}\n     * @param cell {Integer}\n     * @return {Boolean}\n     */\n    this.contains = function (row, cell) {\n      return row >= this.fromRow && row <= this.toRow &&\n          cell >= this.fromCell && cell <= this.toCell;\n    };\n\n    /***\n     * Returns a readable representation of a range.\n     * @method toString\n     * @return {String}\n     */\n    this.toString = function () {\n      if (this.isSingleCell()) {\n        return \"(\" + this.fromRow + \":\" + this.fromCell + \")\";\n      }\n      else {\n        return \"(\" + this.fromRow + \":\" + this.fromCell + \" - \" + this.toRow + \":\" + this.toCell + \")\";\n      }\n    }\n  }\n\n\n  /***\n   * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n   * @class NonDataItem\n   * @constructor\n   */\n  function NonDataItem() {\n    this.__nonDataRow = true;\n  }\n\n\n  /***\n   * Information about a group of rows.\n   * @class Group\n   * @extends Slick.NonDataItem\n   * @constructor\n   */\n  function Group() {\n    this.__group = true;\n\n    /**\n     * Grouping level, starting with 0.\n     * @property level\n     * @type {Number}\n     */\n    this.level = 0;\n\n    /***\n     * Number of rows in the group.\n     * @property count\n     * @type {Integer}\n     */\n    this.count = 0;\n\n    /***\n     * Grouping value.\n     * @property value\n     * @type {Object}\n     */\n    this.value = null;\n\n    /***\n     * Formatted display value of the group.\n     * @property title\n     * @type {String}\n     */\n    this.title = null;\n\n    /***\n     * Whether a group is collapsed.\n     * @property collapsed\n     * @type {Boolean}\n     */\n    this.collapsed = false;\n\n    /***\n     * GroupTotals, if any.\n     * @property totals\n     * @type {GroupTotals}\n     */\n    this.totals = null;\n\n    /**\n     * Rows that are part of the group.\n     * @property rows\n     * @type {Array}\n     */\n    this.rows = [];\n\n    /**\n     * Sub-groups that are part of the group.\n     * @property groups\n     * @type {Array}\n     */\n    this.groups = null;\n\n    /**\n     * A unique key used to identify the group.  This key can be used in calls to DataView\n     * collapseGroup() or expandGroup().\n     * @property groupingKey\n     * @type {Object}\n     */\n    this.groupingKey = null;\n  }\n\n  Group.prototype = new NonDataItem();\n\n  /***\n   * Compares two Group instances.\n   * @method equals\n   * @return {Boolean}\n   * @param group {Group} Group instance to compare to.\n   */\n  Group.prototype.equals = function (group) {\n    return this.value === group.value &&\n        this.count === group.count &&\n        this.collapsed === group.collapsed &&\n        this.title === group.title;\n  };\n\n  /***\n   * Information about group totals.\n   * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n   * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n   * formatters during the display.\n   * @class GroupTotals\n   * @extends Slick.NonDataItem\n   * @constructor\n   */\n  function GroupTotals() {\n    this.__groupTotals = true;\n\n    /***\n     * Parent Group.\n     * @param group\n     * @type {Group}\n     */\n    this.group = null;\n\n    /***\n     * Whether the totals have been fully initialized / calculated.\n     * Will be set to false for lazy-calculated group totals.\n     * @param initialized\n     * @type {Boolean}\n     */\n    this.initialized = false;\n  }\n\n  GroupTotals.prototype = new NonDataItem();\n\n  /***\n   * A locking helper to track the active edit controller and ensure that only a single controller\n   * can be active at a time.  This prevents a whole class of state and validation synchronization\n   * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\n   * and attempt a commit or cancel before proceeding.\n   * @class EditorLock\n   * @constructor\n   */\n  function EditorLock() {\n    var activeEditController = null;\n\n    /***\n     * Returns true if a specified edit controller is active (has the edit lock).\n     * If the parameter is not specified, returns true if any edit controller is active.\n     * @method isActive\n     * @param editController {EditController}\n     * @return {Boolean}\n     */\n    this.isActive = function (editController) {\n      return (editController ? activeEditController === editController : activeEditController !== null);\n    };\n\n    /***\n     * Sets the specified edit controller as the active edit controller (acquire edit lock).\n     * If another edit controller is already active, and exception will be thrown.\n     * @method activate\n     * @param editController {EditController} edit controller acquiring the lock\n     */\n    this.activate = function (editController) {\n      if (editController === activeEditController) { // already activated?\n        return;\n      }\n      if (activeEditController !== null) {\n        throw \"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\";\n      }\n      if (!editController.commitCurrentEdit) {\n        throw \"SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\";\n      }\n      if (!editController.cancelCurrentEdit) {\n        throw \"SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\";\n      }\n      activeEditController = editController;\n    };\n\n    /***\n     * Unsets the specified edit controller as the active edit controller (release edit lock).\n     * If the specified edit controller is not the active one, an exception will be thrown.\n     * @method deactivate\n     * @param editController {EditController} edit controller releasing the lock\n     */\n    this.deactivate = function (editController) {\n      if (activeEditController !== editController) {\n        throw \"SlickGrid.EditorLock.deactivate: specified editController is not the currently active one\";\n      }\n      activeEditController = null;\n    };\n\n    /***\n     * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n     * controller and returns whether the commit attempt was successful (commit may fail due to validation\n     * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n     * and false otherwise.  If no edit controller is active, returns true.\n     * @method commitCurrentEdit\n     * @return {Boolean}\n     */\n    this.commitCurrentEdit = function () {\n      return (activeEditController ? activeEditController.commitCurrentEdit() : true);\n    };\n\n    /***\n     * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n     * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n     * active, returns true.\n     * @method cancelCurrentEdit\n     * @return {Boolean}\n     */\n    this.cancelCurrentEdit = function cancelCurrentEdit() {\n      return (activeEditController ? activeEditController.cancelCurrentEdit() : true);\n    };\n  }\n})(jQuery);\n\n\n","(function ($) {\r\n  // Register namespace\r\n  $.extend(true, window, {\r\n    \"Slick\": {\r\n      \"AutoTooltips\": AutoTooltips\r\n    }\r\n  });\r\n\r\n  /**\r\n   * AutoTooltips plugin to show/hide tooltips when columns are too narrow to fit content.\r\n   * @constructor\r\n   * @param {boolean} [options.enableForCells=true]        - Enable tooltip for grid cells\r\n   * @param {boolean} [options.enableForHeaderCells=false] - Enable tooltip for header cells\r\n   * @param {number}  [options.maxToolTipLength=null]      - The maximum length for a tooltip\r\n   */\r\n  function AutoTooltips(options) {\r\n    var _grid;\r\n    var _self = this;\r\n    var _defaults = {\r\n      enableForCells: true,\r\n      enableForHeaderCells: false,\r\n      maxToolTipLength: null\r\n    };\r\n    \r\n    /**\r\n     * Initialize plugin.\r\n     */\r\n    function init(grid) {\r\n      options = $.extend(true, {}, _defaults, options);\r\n      _grid = grid;\r\n      if (options.enableForCells) _grid.onMouseEnter.subscribe(handleMouseEnter);\r\n      if (options.enableForHeaderCells) _grid.onHeaderMouseEnter.subscribe(handleHeaderMouseEnter);\r\n    }\r\n    \r\n    /**\r\n     * Destroy plugin.\r\n     */\r\n    function destroy() {\r\n      if (options.enableForCells) _grid.onMouseEnter.unsubscribe(handleMouseEnter);\r\n      if (options.enableForHeaderCells) _grid.onHeaderMouseEnter.unsubscribe(handleHeaderMouseEnter);\r\n    }\r\n    \r\n    /**\r\n     * Handle mouse entering grid cell to add/remove tooltip.\r\n     * @param {jQuery.Event} e - The event\r\n     */\r\n    function handleMouseEnter(e) {\r\n      var cell = _grid.getCellFromEvent(e);\r\n      if (cell) {\r\n        var $node = $(_grid.getCellNode(cell.row, cell.cell));\r\n        var text;\r\n        if ($node.innerWidth() < $node[0].scrollWidth) {\r\n          text = $.trim($node.text());\r\n          if (options.maxToolTipLength && text.length > options.maxToolTipLength) {\r\n            text = text.substr(0, options.maxToolTipLength - 3) + \"...\";\r\n          }\r\n        } else {\r\n          text = \"\";\r\n        }\r\n        $node.attr(\"title\", text);\r\n      }\r\n    }\r\n    \r\n    /**\r\n     * Handle mouse entering header cell to add/remove tooltip.\r\n     * @param {jQuery.Event} e     - The event\r\n     * @param {object} args.column - The column definition\r\n     */\r\n    function handleHeaderMouseEnter(e, args) {\r\n      var column = args.column,\r\n          $node = $(e.target).closest(\".slick-header-column\");\r\n      if (column && !column.toolTip) {\r\n        $node.attr(\"title\", ($node.innerWidth() < $node[0].scrollWidth) ? column.name : \"\");\r\n      }\r\n    }\r\n    \r\n    // Public API\r\n    $.extend(this, {\r\n      \"init\": init,\r\n      \"destroy\": destroy\r\n    });\r\n  }\r\n})(jQuery);","(function ($) {\r\n  // register namespace\r\n  $.extend(true, window, {\r\n    \"Slick\": {\r\n      \"CheckboxSelectColumn\": CheckboxSelectColumn\r\n    }\r\n  });\r\n\r\n\r\n  function CheckboxSelectColumn(options) {\r\n    var _grid;\r\n    var _self = this;\r\n    var _handler = new Slick.EventHandler();\r\n    var _selectedRowsLookup = {};\r\n    var _defaults = {\r\n      columnId: \"_checkbox_selector\",\r\n      cssClass: null,\r\n      toolTip: \"Select/Deselect All\",\r\n      width: 30\r\n    };\r\n\r\n    var _options = $.extend(true, {}, _defaults, options);\r\n\r\n    function init(grid) {\r\n      _grid = grid;\r\n      _handler\r\n        .subscribe(_grid.onSelectedRowsChanged, handleSelectedRowsChanged)\r\n        .subscribe(_grid.onClick, handleClick)\r\n        .subscribe(_grid.onHeaderClick, handleHeaderClick)\r\n        .subscribe(_grid.onKeyDown, handleKeyDown);\r\n    }\r\n\r\n    function destroy() {\r\n      _handler.unsubscribeAll();\r\n    }\r\n\r\n    function handleSelectedRowsChanged(e, args) {\r\n      var selectedRows = _grid.getSelectedRows();\r\n      var lookup = {}, row, i;\r\n      for (i = 0; i < selectedRows.length; i++) {\r\n        row = selectedRows[i];\r\n        lookup[row] = true;\r\n        if (lookup[row] !== _selectedRowsLookup[row]) {\r\n          _grid.invalidateRow(row);\r\n          delete _selectedRowsLookup[row];\r\n        }\r\n      }\r\n      for (i in _selectedRowsLookup) {\r\n        _grid.invalidateRow(i);\r\n      }\r\n      _selectedRowsLookup = lookup;\r\n      _grid.render();\r\n      \r\n      var cHtml = getCheckboxHtml(selectedRows.length && selectedRows.length == _grid.getDataLength());\r\n      _grid.updateColumnHeader(_options.columnId, cHtml, _options.toolTip);\r\n    }\r\n\t\r\n      // @yogesh.jagdale added getCheckboxHtml function :: Checkbox html changes for to achive SMART2.0 design\r\n    function getCheckboxHtml(isChecked) {\r\n        var idGen = \"chk_\" + Math.random(Date.now()),\r\n\t\tcheckbox_html = \"<span class='slick-ck-wrap'><input type='checkbox' id='\" + idGen + \"' class='filled-in'><label for='\" + idGen + \"'></label></span>\";\r\n\r\n        if (isChecked) {\r\n            checkbox_html = \"<span class='slick-ck-wrap'><input checked type='checkbox' id='\" + idGen + \"' class='filled-in'><label for='\" + idGen + \"'></label></span>\";\r\n        }\r\n\r\n        return checkbox_html;\r\n    }\r\n\t\r\n    function handleKeyDown(e, args) {\r\n      if (e.which == 32) {\r\n        if (_grid.getColumns()[args.cell].id === _options.columnId) {\r\n          // if editing, try to commit\r\n          if (!_grid.getEditorLock().isActive() || _grid.getEditorLock().commitCurrentEdit()) {\r\n            toggleRowSelection(args.row);\r\n          }\r\n          e.preventDefault();\r\n          e.stopImmediatePropagation();\r\n        }\r\n      }\r\n    }\r\n\r\n    function handleClick(e, args) {\r\n      // clicking on a row select checkbox\r\n      if (_grid.getColumns()[args.cell].id === _options.columnId && $(e.target).is(\":checkbox\")) {\r\n        // if editing, try to commit\r\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\r\n          e.preventDefault();\r\n          e.stopImmediatePropagation();\r\n          return;\r\n        }\r\n\r\n        toggleRowSelection(args.row);\r\n        e.stopPropagation();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }\r\n\r\n    function toggleRowSelection(row) {\r\n      if (_selectedRowsLookup[row]) {\r\n        _grid.setSelectedRows($.grep(_grid.getSelectedRows(), function (n) {\r\n          return n != row\r\n        }));\r\n      } else {\r\n        _grid.setSelectedRows(_grid.getSelectedRows().concat(row));\r\n      }\r\n    }\r\n\r\n    function handleHeaderClick(e, args) {\r\n      if (args.column.id == _options.columnId && $(e.target).is(\":checkbox\")) {\r\n        // if editing, try to commit\r\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\r\n          e.preventDefault();\r\n          e.stopImmediatePropagation();\r\n          return;\r\n        }\r\n\r\n        if ($(e.target).is(\":checked\")) {\r\n          var rows = [];\r\n          for (var i = 0; i < _grid.getDataLength(); i++) {\r\n            rows.push(i);\r\n          }\r\n          _grid.setSelectedRows(rows);\r\n        } else {\r\n          _grid.setSelectedRows([]);\r\n        }\r\n        e.stopPropagation();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }\r\n\r\n    function getColumnDefinition() {\r\n      return {\r\n        id: _options.columnId,\r\n        name: getCheckboxHtml(false),\r\n        toolTip: _options.toolTip,\r\n        field: \"sel\",\r\n        width: _options.width,\r\n        resizable: false,\r\n        sortable: false,\r\n        cssClass: _options.cssClass,\r\n        formatter: checkboxSelectionFormatter\r\n      };\r\n    }\r\n\r\n    function checkboxSelectionFormatter(row, cell, value, columnDef, dataContext) {\r\n      if (dataContext) {\r\n          return getCheckboxHtml(_selectedRowsLookup[row]);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    $.extend(this, {\r\n      \"init\": init,\r\n      \"destroy\": destroy,\r\n\r\n      \"getColumnDefinition\": getColumnDefinition\r\n    });\r\n  }\r\n})(jQuery);","(function ($) {\r\n  // register namespace\r\n  $.extend(true, window, {\r\n    \"Slick\": {\r\n      \"RowSelectionModel\": RowSelectionModel\r\n    }\r\n  });\r\n\r\n  function RowSelectionModel(options) {\r\n    var _grid;\r\n    var _ranges = [];\r\n    var _self = this;\r\n    var _handler = new Slick.EventHandler();\r\n    var _inHandler;\r\n    var _options;\r\n    var _defaults = {\r\n      selectActiveRow: true\r\n    };\r\n\r\n    function init(grid) {\r\n      _options = $.extend(true, {}, _defaults, options);\r\n      _grid = grid;\r\n      _handler.subscribe(_grid.onActiveCellChanged,\r\n          wrapHandler(handleActiveCellChange));\r\n      _handler.subscribe(_grid.onKeyDown,\r\n          wrapHandler(handleKeyDown));\r\n      _handler.subscribe(_grid.onClick,\r\n          wrapHandler(handleClick));\r\n    }\r\n\r\n    function destroy() {\r\n      _handler.unsubscribeAll();\r\n    }\r\n\r\n    function wrapHandler(handler) {\r\n      return function () {\r\n        if (!_inHandler) {\r\n          _inHandler = true;\r\n          handler.apply(this, arguments);\r\n          _inHandler = false;\r\n        }\r\n      };\r\n    }\r\n\r\n    function rangesToRows(ranges) {\r\n      var rows = [];\r\n      for (var i = 0; i < ranges.length; i++) {\r\n        for (var j = ranges[i].fromRow; j <= ranges[i].toRow; j++) {\r\n          rows.push(j);\r\n        }\r\n      }\r\n      return rows;\r\n    }\r\n\r\n    function rowsToRanges(rows) {\r\n      var ranges = [];\r\n      var lastCell = _grid.getColumns().length - 1;\r\n      for (var i = 0; i < rows.length; i++) {\r\n        ranges.push(new Slick.Range(rows[i], 0, rows[i], lastCell));\r\n      }\r\n      return ranges;\r\n    }\r\n\r\n    function getRowsRange(from, to) {\r\n      var i, rows = [];\r\n      for (i = from; i <= to; i++) {\r\n        rows.push(i);\r\n      }\r\n      for (i = to; i < from; i++) {\r\n        rows.push(i);\r\n      }\r\n      return rows;\r\n    }\r\n\r\n    function getSelectedRows() {\r\n      return rangesToRows(_ranges);\r\n    }\r\n\r\n    function setSelectedRows(rows) {\r\n      setSelectedRanges(rowsToRanges(rows));\r\n    }\r\n\r\n    function setSelectedRanges(ranges) {\r\n      _ranges = ranges;\r\n      _self.onSelectedRangesChanged.notify(_ranges);\r\n    }\r\n\r\n    function getSelectedRanges() {\r\n      return _ranges;\r\n    }\r\n\r\n    function handleActiveCellChange(e, data) {\r\n      if (_options.selectActiveRow && data.row != null) {\r\n        setSelectedRanges([new Slick.Range(data.row, 0, data.row, _grid.getColumns().length - 1)]);\r\n      }\r\n    }\r\n\r\n    function handleKeyDown(e) {\r\n      var activeRow = _grid.getActiveCell();\r\n      if (activeRow && e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey && (e.which == 38 || e.which == 40)) {\r\n        var selectedRows = getSelectedRows();\r\n        selectedRows.sort(function (x, y) {\r\n          return x - y\r\n        });\r\n\r\n        if (!selectedRows.length) {\r\n          selectedRows = [activeRow.row];\r\n        }\r\n\r\n        var top = selectedRows[0];\r\n        var bottom = selectedRows[selectedRows.length - 1];\r\n        var active;\r\n\r\n        if (e.which == 40) {\r\n          active = activeRow.row < bottom || top == bottom ? ++bottom : ++top;\r\n        } else {\r\n          active = activeRow.row < bottom ? --bottom : --top;\r\n        }\r\n\r\n        if (active >= 0 && active < _grid.getDataLength()) {\r\n          _grid.scrollRowIntoView(active);\r\n          _ranges = rowsToRanges(getRowsRange(top, bottom));\r\n          setSelectedRanges(_ranges);\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n    }\r\n\r\n    function handleClick(e) {\r\n      var cell = _grid.getCellFromEvent(e);\r\n      if (!cell || !_grid.canCellBeActive(cell.row, cell.cell)) {\r\n        return false;\r\n      }\r\n\r\n      if (!_grid.getOptions().multiSelect || (\r\n          !e.ctrlKey && !e.shiftKey && !e.metaKey)) {\r\n        return false;\r\n      }\r\n\r\n      var selection = rangesToRows(_ranges);\r\n      var idx = $.inArray(cell.row, selection);\r\n\r\n      if (idx === -1 && (e.ctrlKey || e.metaKey)) {\r\n        selection.push(cell.row);\r\n        _grid.setActiveCell(cell.row, cell.cell);\r\n      } else if (idx !== -1 && (e.ctrlKey || e.metaKey)) {\r\n        selection = $.grep(selection, function (o, i) {\r\n          return (o !== cell.row);\r\n        });\r\n        _grid.setActiveCell(cell.row, cell.cell);\r\n      } else if (selection.length && e.shiftKey) {\r\n        var last = selection.pop();\r\n        var from = Math.min(cell.row, last);\r\n        var to = Math.max(cell.row, last);\r\n        selection = [];\r\n        for (var i = from; i <= to; i++) {\r\n          if (i !== last) {\r\n            selection.push(i);\r\n          }\r\n        }\r\n        selection.push(last);\r\n        _grid.setActiveCell(cell.row, cell.cell);\r\n      }\r\n\r\n      _ranges = rowsToRanges(selection);\r\n      setSelectedRanges(_ranges);\r\n      e.stopImmediatePropagation();\r\n\r\n      return true;\r\n    }\r\n\r\n    $.extend(this, {\r\n      \"getSelectedRows\": getSelectedRows,\r\n      \"setSelectedRows\": setSelectedRows,\r\n\r\n      \"getSelectedRanges\": getSelectedRanges,\r\n      \"setSelectedRanges\": setSelectedRanges,\r\n\r\n      \"init\": init,\r\n      \"destroy\": destroy,\r\n\r\n      \"onSelectedRangesChanged\": new Slick.Event()\r\n    });\r\n  }\r\n})(jQuery);","(function ($) {\n  $.extend(true, window, {\n    Slick: {\n      Data: {\n        DataView: DataView,\n        Aggregators: {\n          Avg: AvgAggregator,\n          Min: MinAggregator,\n          Max: MaxAggregator,\n          Sum: SumAggregator\n        }\n      }\n    }\n  });\n\n\n  /***\n   * A sample Model implementation.\n   * Provides a filtered view of the underlying data.\n   *\n   * Relies on the data item having an \"id\" property uniquely identifying it.\n   */\n  function DataView(options) {\n    var self = this;\n\n    var defaults = {\n      groupItemMetadataProvider: null,\n      inlineFilters: false\n    };\n\n\n    // private\n    var idProperty = \"id\";  // property holding a unique row id\n    var items = [];         // data by index\n    var rows = [];          // data by row\n    var idxById = {};       // indexes by id\n    var rowsById = null;    // rows by id; lazy-calculated\n    var filter = null;      // filter function\n    var updated = null;     // updated item ids\n    var suspend = false;    // suspends the recalculation\n    var sortAsc = true;\n    var fastSortField;\n    var sortComparer;\n    var refreshHints = {};\n    var prevRefreshHints = {};\n    var filterArgs;\n    var filteredItems = [];\n    var compiledFilter;\n    var compiledFilterWithCaching;\n    var filterCache = [];\n\n    // grouping\n    var groupingInfoDefaults = {\n      getter: null,\n      formatter: null,\n      comparer: function(a, b) { return a.value - b.value; },\n      predefinedValues: [],\n      aggregators: [],\n      aggregateEmpty: false,\n      aggregateCollapsed: false,\n      aggregateChildGroups: false,\n      collapsed: false,\n      displayTotalsRow: true,\n      lazyTotalsCalculation: false\n    };\n    var groupingInfos = [];\n    var groups = [];\n    var toggledGroupsByLevel = [];\n    var groupingDelimiter = ':|:';\n\n    var pagesize = 0;\n    var pagenum = 0;\n    var totalRows = 0;\n\n    // events\n    var onRowCountChanged = new Slick.Event();\n    var onRowsChanged = new Slick.Event();\n    var onPagingInfoChanged = new Slick.Event();\n\n    options = $.extend(true, {}, defaults, options);\n\n\n    function beginUpdate() {\n      suspend = true;\n    }\n\n    function endUpdate() {\n      suspend = false;\n      refresh();\n    }\n\n    function setRefreshHints(hints) {\n      refreshHints = hints;\n    }\n\n    function setFilterArgs(args) {\n      filterArgs = args;\n    }\n\n    function updateIdxById(startingIndex) {\n      startingIndex = startingIndex || 0;\n      var id;\n      for (var i = startingIndex, l = items.length; i < l; i++) {\n        id = items[i][idProperty];\n        if (id === undefined) {\n          throw \"Each data element must implement a unique 'id' property\";\n        }\n        idxById[id] = i;\n      }\n    }\n\n    function ensureIdUniqueness() {\n      var id;\n      for (var i = 0, l = items.length; i < l; i++) {\n        id = items[i][idProperty];\n        if (id === undefined || idxById[id] !== i) {\n          throw \"Each data element must implement a unique 'id' property\";\n        }\n      }\n    }\n\n    function getItems() {\n      return items;\n    }\n\n    function setItems(data, objectIdProperty) {\n      if (objectIdProperty !== undefined) {\n        idProperty = objectIdProperty;\n      }\n      items = filteredItems = data;\n      idxById = {};\n      updateIdxById();\n      ensureIdUniqueness();\n      refresh();\n    }\n\n    function setPagingOptions(args) {\n      if (args.pageSize != undefined) {\n        pagesize = args.pageSize;\n        pagenum = pagesize ? Math.min(pagenum, Math.max(0, Math.ceil(totalRows / pagesize) - 1)) : 0;\n      }\n\n      if (args.pageNum != undefined) {\n        pagenum = Math.min(args.pageNum, Math.max(0, Math.ceil(totalRows / pagesize) - 1));\n      }\n\n      onPagingInfoChanged.notify(getPagingInfo(), null, self);\n\n      refresh();\n    }\n\n    function getPagingInfo() {\n      var totalPages = pagesize ? Math.max(1, Math.ceil(totalRows / pagesize)) : 1;\n      return {pageSize: pagesize, pageNum: pagenum, totalRows: totalRows, totalPages: totalPages};\n    }\n\n    function sort(comparer, ascending) {\n      sortAsc = ascending;\n      sortComparer = comparer;\n      fastSortField = null;\n      if (ascending === false) {\n        items.reverse();\n      }\n      items.sort(comparer);\n      if (ascending === false) {\n        items.reverse();\n      }\n      idxById = {};\n      updateIdxById();\n      refresh();\n    }\n\n    /***\n     * Provides a workaround for the extremely slow sorting in IE.\n     * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString\n     * to return the value of that field and then doing a native Array.sort().\n     */\n    function fastSort(field, ascending) {\n      sortAsc = ascending;\n      fastSortField = field;\n      sortComparer = null;\n      var oldToString = Object.prototype.toString;\n      Object.prototype.toString = (typeof field == \"function\") ? field : function () {\n        return this[field]\n      };\n      // an extra reversal for descending sort keeps the sort stable\n      // (assuming a stable native sort implementation, which isn't true in some cases)\n      if (ascending === false) {\n        items.reverse();\n      }\n      items.sort();\n      Object.prototype.toString = oldToString;\n      if (ascending === false) {\n        items.reverse();\n      }\n      idxById = {};\n      updateIdxById();\n      refresh();\n    }\n\n    function reSort() {\n      if (sortComparer) {\n        sort(sortComparer, sortAsc);\n      } else if (fastSortField) {\n        fastSort(fastSortField, sortAsc);\n      }\n    }\n\n    function setFilter(filterFn) {\n      filter = filterFn;\n      if (options.inlineFilters) {\n        compiledFilter = compileFilter();\n        compiledFilterWithCaching = compileFilterWithCaching();\n      }\n      refresh();\n    }\n\n    function getGrouping() {\n      return groupingInfos;\n    }\n\n    function setGrouping(groupingInfo) {\n      if (!options.groupItemMetadataProvider) {\n        options.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\n      }\n\n      groups = [];\n      toggledGroupsByLevel = [];\n      groupingInfo = groupingInfo || [];\n      groupingInfos = (groupingInfo instanceof Array) ? groupingInfo : [groupingInfo];\n\n      for (var i = 0; i < groupingInfos.length; i++) {\n        var gi = groupingInfos[i] = $.extend(true, {}, groupingInfoDefaults, groupingInfos[i]);\n        gi.getterIsAFn = typeof gi.getter === \"function\";\n\n        // pre-compile accumulator loops\n        gi.compiledAccumulators = [];\n        var idx = gi.aggregators.length;\n        while (idx--) {\n          gi.compiledAccumulators[idx] = compileAccumulatorLoop(gi.aggregators[idx]);\n        }\n\n        toggledGroupsByLevel[i] = {};\n      }\n\n      refresh();\n    }\n\n    /**\n     * @deprecated Please use {@link setGrouping}.\n     */\n    function groupBy(valueGetter, valueFormatter, sortComparer) {\n      if (valueGetter == null) {\n        setGrouping([]);\n        return;\n      }\n\n      setGrouping({\n        getter: valueGetter,\n        formatter: valueFormatter,\n        comparer: sortComparer\n      });\n    }\n\n    /**\n     * @deprecated Please use {@link setGrouping}.\n     */\n    function setAggregators(groupAggregators, includeCollapsed) {\n      if (!groupingInfos.length) {\n        throw new Error(\"At least one grouping must be specified before calling setAggregators().\");\n      }\n\n      groupingInfos[0].aggregators = groupAggregators;\n      groupingInfos[0].aggregateCollapsed = includeCollapsed;\n\n      setGrouping(groupingInfos);\n    }\n\n    function getItemByIdx(i) {\n      return items[i];\n    }\n\n    function getIdxById(id) {\n      return idxById[id];\n    }\n\n    function ensureRowsByIdCache() {\n      if (!rowsById) {\n        rowsById = {};\n        for (var i = 0, l = rows.length; i < l; i++) {\n          rowsById[rows[i][idProperty]] = i;\n        }\n      }\n    }\n\n    function getRowById(id) {\n      ensureRowsByIdCache();\n      return rowsById[id];\n    }\n\n    function getItemById(id) {\n      return items[idxById[id]];\n    }\n\n    function mapIdsToRows(idArray) {\n      var rows = [];\n      ensureRowsByIdCache();\n      for (var i = 0, l = idArray.length; i < l; i++) {\n        var row = rowsById[idArray[i]];\n        if (row != null) {\n          rows[rows.length] = row;\n        }\n      }\n      return rows;\n    }\n\n    function mapRowsToIds(rowArray) {\n      var ids = [];\n      for (var i = 0, l = rowArray.length; i < l; i++) {\n        if (rowArray[i] < rows.length) {\n          ids[ids.length] = rows[rowArray[i]][idProperty];\n        }\n      }\n      return ids;\n    }\n\n    function updateItem(id, item) {\n      if (idxById[id] === undefined || id !== item[idProperty]) {\n        throw \"Invalid or non-matching id\";\n      }\n      items[idxById[id]] = item;\n      if (!updated) {\n        updated = {};\n      }\n      updated[id] = true;\n      refresh();\n    }\n\n    function insertItem(insertBefore, item) {\n      items.splice(insertBefore, 0, item);\n      updateIdxById(insertBefore);\n      refresh();\n    }\n\n    function addItem(item) {\n      items.push(item);\n      updateIdxById(items.length - 1);\n      refresh();\n    }\n\n    function deleteItem(id) {\n      var idx = idxById[id];\n      if (idx === undefined) {\n        throw \"Invalid id\";\n      }\n      delete idxById[id];\n      items.splice(idx, 1);\n      updateIdxById(idx);\n      refresh();\n    }\n\n    function getLength() {\n      return rows.length;\n    }\n\n    function getItem(i) {\n      var item = rows[i];\n\n      // if this is a group row, make sure totals are calculated and update the title\n      if (item && item.__group && item.totals && !item.totals.initialized) {\n        var gi = groupingInfos[item.level];\n        if (!gi.displayTotalsRow) {\n          calculateTotals(item.totals);\n          item.title = gi.formatter ? gi.formatter(item) : item.value;\n        }\n      }\n      // if this is a totals row, make sure it's calculated\n      else if (item && item.__groupTotals && !item.initialized) {\n        calculateTotals(item);\n      }\n\n      return item;\n    }\n\n    function getItemMetadata(i) {\n      var item = rows[i];\n      if (item === undefined) {\n        return null;\n      }\n\n      // overrides for grouping rows\n      if (item.__group) {\n        return options.groupItemMetadataProvider.getGroupRowMetadata(item);\n      }\n\n      // overrides for totals rows\n      if (item.__groupTotals) {\n        return options.groupItemMetadataProvider.getTotalsRowMetadata(item);\n      }\n\n      return null;\n    }\n\n    function expandCollapseAllGroups(level, collapse) {\n      if (level == null) {\n        for (var i = 0; i < groupingInfos.length; i++) {\n          toggledGroupsByLevel[i] = {};\n          groupingInfos[i].collapsed = collapse;\n        }\n      } else {\n        toggledGroupsByLevel[level] = {};\n        groupingInfos[level].collapsed = collapse;\n      }\n      refresh();\n    }\n\n    /**\n     * @param level {Number} Optional level to collapse.  If not specified, applies to all levels.\n     */\n    function collapseAllGroups(level) {\n      expandCollapseAllGroups(level, true);\n    }\n\n    /**\n     * @param level {Number} Optional level to expand.  If not specified, applies to all levels.\n     */\n    function expandAllGroups(level) {\n      expandCollapseAllGroups(level, false);\n    }\n\n    function expandCollapseGroup(level, groupingKey, collapse) {\n      toggledGroupsByLevel[level][groupingKey] = groupingInfos[level].collapsed ^ collapse;\n      refresh();\n    }\n\n    /**\n     * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\n     *     variable argument list of grouping values denoting a unique path to the row.  For\n     *     example, calling collapseGroup('high', '10%') will collapse the '10%' subgroup of\n     *     the 'high' group.\n     */\n    function collapseGroup(varArgs) {\n      var args = Array.prototype.slice.call(arguments);\n      var arg0 = args[0];\n      if (args.length == 1 && arg0.indexOf(groupingDelimiter) != -1) {\n        expandCollapseGroup(arg0.split(groupingDelimiter).length - 1, arg0, true);\n      } else {\n        expandCollapseGroup(args.length - 1, args.join(groupingDelimiter), true);\n      }\n    }\n\n    /**\n     * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\n     *     variable argument list of grouping values denoting a unique path to the row.  For\n     *     example, calling expandGroup('high', '10%') will expand the '10%' subgroup of\n     *     the 'high' group.\n     */\n    function expandGroup(varArgs) {\n      var args = Array.prototype.slice.call(arguments);\n      var arg0 = args[0];\n      if (args.length == 1 && arg0.indexOf(groupingDelimiter) != -1) {\n        expandCollapseGroup(arg0.split(groupingDelimiter).length - 1, arg0, false);\n      } else {\n        expandCollapseGroup(args.length - 1, args.join(groupingDelimiter), false);\n      }\n    }\n\n    function getGroups() {\n      return groups;\n    }\n\n    function extractGroups(rows, parentGroup) {\n      var group;\n      var val;\n      var groups = [];\n      var groupsByVal = {};\n      var r;\n      var level = parentGroup ? parentGroup.level + 1 : 0;\n      var gi = groupingInfos[level];\n\n      for (var i = 0, l = gi.predefinedValues.length; i < l; i++) {\n        val = gi.predefinedValues[i];\n        group = groupsByVal[val];\n        if (!group) {\n          group = new Slick.Group();\n          group.value = val;\n          group.level = level;\n          group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;\n          groups[groups.length] = group;\n          groupsByVal[val] = group;\n        }\n      }\n\n      for (var i = 0, l = rows.length; i < l; i++) {\n        r = rows[i];\n        val = gi.getterIsAFn ? gi.getter(r) : r[gi.getter];\n        group = groupsByVal[val];\n        if (!group) {\n          group = new Slick.Group();\n          group.value = val;\n          group.level = level;\n          group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;\n          groups[groups.length] = group;\n          groupsByVal[val] = group;\n        }\n\n        group.rows[group.count++] = r;\n      }\n\n      if (level < groupingInfos.length - 1) {\n        for (var i = 0; i < groups.length; i++) {\n          group = groups[i];\n          group.groups = extractGroups(group.rows, group);\n        }\n      }      \n\n      groups.sort(groupingInfos[level].comparer);\n\n      return groups;\n    }\n\n    function calculateTotals(totals) {\n      var group = totals.group;\n      var gi = groupingInfos[group.level];\n      var isLeafLevel = (group.level == groupingInfos.length);\n      var agg, idx = gi.aggregators.length;\n\n      if (!isLeafLevel && gi.aggregateChildGroups) {\n        // make sure all the subgroups are calculated\n        var i = group.groups.length;\n        while (i--) {\n          if (!group.groups[i].initialized) {\n            calculateTotals(group.groups[i]);\n          }\n        }\n      }\n\n      while (idx--) {\n        agg = gi.aggregators[idx];\n        agg.init();\n        if (!isLeafLevel && gi.aggregateChildGroups) {\n          gi.compiledAccumulators[idx].call(agg, group.groups);\n        } else {\n          gi.compiledAccumulators[idx].call(agg, group.rows);\n        }\n        agg.storeResult(totals);\n      }\n      totals.initialized = true;\n    }\n\n    function addGroupTotals(group) {\n      var gi = groupingInfos[group.level];\n      var totals = new Slick.GroupTotals();\n      totals.group = group;\n      group.totals = totals;\n      if (!gi.lazyTotalsCalculation) {\n        calculateTotals(totals);\n      }\n    }\n\n    function addTotals(groups, level) {\n      level = level || 0;\n      var gi = groupingInfos[level];\n      var groupCollapsed = gi.collapsed;\n      var toggledGroups = toggledGroupsByLevel[level];      \n      var idx = groups.length, g;\n      while (idx--) {\n        g = groups[idx];\n\n        if (g.collapsed && !gi.aggregateCollapsed) {\n          continue;\n        }\n\n        // Do a depth-first aggregation so that parent group aggregators can access subgroup totals.\n        if (g.groups) {\n          addTotals(g.groups, level + 1);\n        }\n\n        if (gi.aggregators.length && (\n            gi.aggregateEmpty || g.rows.length || (g.groups && g.groups.length))) {\n          addGroupTotals(g);\n        }\n\n        g.collapsed = groupCollapsed ^ toggledGroups[g.groupingKey];\n        g.title = gi.formatter ? gi.formatter(g) : g.value;\n      }\n    } \n\n    function flattenGroupedRows(groups, level) {\n      level = level || 0;\n      var gi = groupingInfos[level];\n      var groupedRows = [], rows, gl = 0, g;\n      for (var i = 0, l = groups.length; i < l; i++) {\n        g = groups[i];\n        groupedRows[gl++] = g;\n\n        if (!g.collapsed) {\n          rows = g.groups ? flattenGroupedRows(g.groups, level + 1) : g.rows;\n          for (var j = 0, jj = rows.length; j < jj; j++) {\n            groupedRows[gl++] = rows[j];\n          }\n        }\n\n        if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {\n          groupedRows[gl++] = g.totals;\n        }\n      }\n      return groupedRows;\n    }\n\n    function getFunctionInfo(fn) {\n      var fnRegex = /^function[^(]*\\(([^)]*)\\)\\s*{([\\s\\S]*)}$/;\n      var matches = fn.toString().match(fnRegex);\n      return {\n        params: matches[1].split(\",\"),\n        body: matches[2]\n      };\n    }\n\n    function compileAccumulatorLoop(aggregator) {\n      var accumulatorInfo = getFunctionInfo(aggregator.accumulate);\n      var fn = new Function(\n          \"_items\",\n          \"for (var \" + accumulatorInfo.params[0] + \", _i=0, _il=_items.length; _i<_il; _i++) {\" +\n              accumulatorInfo.params[0] + \" = _items[_i]; \" +\n              accumulatorInfo.body +\n          \"}\"\n      );\n      fn.displayName = fn.name = \"compiledAccumulatorLoop\";\n      return fn;\n    }\n\n    function compileFilter() {\n      var filterInfo = getFunctionInfo(filter);\n\n      var filterBody = filterInfo.body\n          .replace(/return false\\s*([;}]|$)/gi, \"{ continue _coreloop; }$1\")\n          .replace(/return true\\s*([;}]|$)/gi, \"{ _retval[_idx++] = $item$; continue _coreloop; }$1\")\n          .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\n          \"{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\n\n      // This preserves the function template code after JS compression,\n      // so that replace() commands still work as expected.\n      var tpl = [\n        //\"function(_items, _args) { \",\n        \"var _retval = [], _idx = 0; \",\n        \"var $item$, $args$ = _args; \",\n        \"_coreloop: \",\n        \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\n        \"$item$ = _items[_i]; \",\n        \"$filter$; \",\n        \"} \",\n        \"return _retval; \"\n        //\"}\"\n      ].join(\"\");\n      tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\n      tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\n      tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\n\n      var fn = new Function(\"_items,_args\", tpl);\n      fn.displayName = fn.name = \"compiledFilter\";\n      return fn;\n    }\n\n    function compileFilterWithCaching() {\n      var filterInfo = getFunctionInfo(filter);\n\n      var filterBody = filterInfo.body\n          .replace(/return false\\s*([;}]|$)/gi, \"{ continue _coreloop; }$1\")\n          .replace(/return true\\s*([;}]|$)/gi, \"{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1\")\n          .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\n          \"{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\n\n      // This preserves the function template code after JS compression,\n      // so that replace() commands still work as expected.\n      var tpl = [\n        //\"function(_items, _args, _cache) { \",\n        \"var _retval = [], _idx = 0; \",\n        \"var $item$, $args$ = _args; \",\n        \"_coreloop: \",\n        \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\n        \"$item$ = _items[_i]; \",\n        \"if (_cache[_i]) { \",\n        \"_retval[_idx++] = $item$; \",\n        \"continue _coreloop; \",\n        \"} \",\n        \"$filter$; \",\n        \"} \",\n        \"return _retval; \"\n        //\"}\"\n      ].join(\"\");\n      tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\n      tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\n      tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\n\n      var fn = new Function(\"_items,_args,_cache\", tpl);\n      fn.displayName = fn.name = \"compiledFilterWithCaching\";\n      return fn;\n    }\n\n    function uncompiledFilter(items, args) {\n      var retval = [], idx = 0;\n\n      for (var i = 0, ii = items.length; i < ii; i++) {\n        if (filter(items[i], args)) {\n          retval[idx++] = items[i];\n        }\n      }\n\n      return retval;\n    }\n\n    function uncompiledFilterWithCaching(items, args, cache) {\n      var retval = [], idx = 0, item;\n\n      for (var i = 0, ii = items.length; i < ii; i++) {\n        item = items[i];\n        if (cache[i]) {\n          retval[idx++] = item;\n        } else if (filter(item, args)) {\n          retval[idx++] = item;\n          cache[i] = true;\n        }\n      }\n\n      return retval;\n    }\n\n    function getFilteredAndPagedItems(items) {\n      if (filter) {\n        var batchFilter = options.inlineFilters ? compiledFilter : uncompiledFilter;\n        var batchFilterWithCaching = options.inlineFilters ? compiledFilterWithCaching : uncompiledFilterWithCaching;\n\n        if (refreshHints.isFilterNarrowing) {\n          filteredItems = batchFilter(filteredItems, filterArgs);\n        } else if (refreshHints.isFilterExpanding) {\n          filteredItems = batchFilterWithCaching(items, filterArgs, filterCache);\n        } else if (!refreshHints.isFilterUnchanged) {\n          filteredItems = batchFilter(items, filterArgs);\n        }\n      } else {\n        // special case:  if not filtering and not paging, the resulting\n        // rows collection needs to be a copy so that changes due to sort\n        // can be caught\n        filteredItems = pagesize ? items : items.concat();\n      }\n\n      // get the current page\n      var paged;\n      if (pagesize) {\n        if (filteredItems.length < pagenum * pagesize) {\n          pagenum = Math.floor(filteredItems.length / pagesize);\n        }\n        paged = filteredItems.slice(pagesize * pagenum, pagesize * pagenum + pagesize);\n      } else {\n        paged = filteredItems;\n      }\n\n      return {totalRows: filteredItems.length, rows: paged};\n    }\n\n    function getRowDiffs(rows, newRows) {\n      var item, r, eitherIsNonData, diff = [];\n      var from = 0, to = newRows.length;\n\n      if (refreshHints && refreshHints.ignoreDiffsBefore) {\n        from = Math.max(0,\n            Math.min(newRows.length, refreshHints.ignoreDiffsBefore));\n      }\n\n      if (refreshHints && refreshHints.ignoreDiffsAfter) {\n        to = Math.min(newRows.length,\n            Math.max(0, refreshHints.ignoreDiffsAfter));\n      }\n\n      for (var i = from, rl = rows.length; i < to; i++) {\n        if (i >= rl) {\n          diff[diff.length] = i;\n        } else {\n          item = newRows[i];\n          r = rows[i];\n\n          if ((groupingInfos.length && (eitherIsNonData = (item.__nonDataRow) || (r.__nonDataRow)) &&\n              item.__group !== r.__group ||\n              item.__group && !item.equals(r))\n              || (eitherIsNonData &&\n              // no good way to compare totals since they are arbitrary DTOs\n              // deep object comparison is pretty expensive\n              // always considering them 'dirty' seems easier for the time being\n              (item.__groupTotals || r.__groupTotals))\n              || item[idProperty] != r[idProperty]\n              || (updated && updated[item[idProperty]])\n              ) {\n            diff[diff.length] = i;\n          }\n        }\n      }\n      return diff;\n    }\n\n    function recalc(_items) {\n      rowsById = null;\n\n      if (refreshHints.isFilterNarrowing != prevRefreshHints.isFilterNarrowing ||\n          refreshHints.isFilterExpanding != prevRefreshHints.isFilterExpanding) {\n        filterCache = [];\n      }\n\n      var filteredItems = getFilteredAndPagedItems(_items);\n      totalRows = filteredItems.totalRows;\n      var newRows = filteredItems.rows;\n\n      groups = [];\n      if (groupingInfos.length) {\n        groups = extractGroups(newRows);\n        if (groups.length) {\n          addTotals(groups);\n          newRows = flattenGroupedRows(groups);\n        }\n      }\n\n      var diff = getRowDiffs(rows, newRows);\n\n      rows = newRows;\n\n      return diff;\n    }\n\n    function refresh() {\n      if (suspend) {\n        return;\n      }\n\n      var countBefore = rows.length;\n      var totalRowsBefore = totalRows;\n\n      var diff = recalc(items, filter); // pass as direct refs to avoid closure perf hit\n\n      // if the current page is no longer valid, go to last page and recalc\n      // we suffer a performance penalty here, but the main loop (recalc) remains highly optimized\n      if (pagesize && totalRows < pagenum * pagesize) {\n        pagenum = Math.max(0, Math.ceil(totalRows / pagesize) - 1);\n        diff = recalc(items, filter);\n      }\n\n      updated = null;\n      prevRefreshHints = refreshHints;\n      refreshHints = {};\n\n      if (totalRowsBefore != totalRows) {\n        onPagingInfoChanged.notify(getPagingInfo(), null, self);\n      }\n      if (countBefore != rows.length) {\n        onRowCountChanged.notify({previous: countBefore, current: rows.length}, null, self);\n      }\n      if (diff.length > 0) {\n        onRowsChanged.notify({rows: diff}, null, self);\n      }\n    }\n\n    /***\n     * Wires the grid and the DataView together to keep row selection tied to item ids.\n     * This is useful since, without it, the grid only knows about rows, so if the items\n     * move around, the same rows stay selected instead of the selection moving along\n     * with the items.\n     *\n     * NOTE:  This doesn't work with cell selection model.\n     *\n     * @param grid {Slick.Grid} The grid to sync selection with.\n     * @param preserveHidden {Boolean} Whether to keep selected items that go out of the\n     *     view due to them getting filtered out.\n     * @param preserveHiddenOnSelectionChange {Boolean} Whether to keep selected items\n     *     that are currently out of the view (see preserveHidden) as selected when selection\n     *     changes.\n     * @return {Slick.Event} An event that notifies when an internal list of selected row ids\n     *     changes.  This is useful since, in combination with the above two options, it allows\n     *     access to the full list selected row ids, and not just the ones visible to the grid.\n     * @method syncGridSelection\n     */\n    function syncGridSelection(grid, preserveHidden, preserveHiddenOnSelectionChange) {\n      var self = this;\n      var inHandler;\n      var selectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\n      var onSelectedRowIdsChanged = new Slick.Event();\n\n      function setSelectedRowIds(rowIds) {\n        if (selectedRowIds.join(\",\") == rowIds.join(\",\")) {\n          return;\n        }\n\n        selectedRowIds = rowIds;\n\n        onSelectedRowIdsChanged.notify({\n          \"grid\": grid,\n          \"ids\": selectedRowIds\n        }, new Slick.EventData(), self);\n      }\n\n      function update() {\n        if (selectedRowIds.length > 0) {\n          inHandler = true;\n          var selectedRows = self.mapIdsToRows(selectedRowIds);\n          if (!preserveHidden) {\n            setSelectedRowIds(self.mapRowsToIds(selectedRows));       \n          }\n          grid.setSelectedRows(selectedRows);\n          inHandler = false;\n        }\n      }\n\n      grid.onSelectedRowsChanged.subscribe(function(e, args) {\n        if (inHandler) { return; }\n        var newSelectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\n        if (!preserveHiddenOnSelectionChange || !grid.getOptions().multiSelect) {\n          setSelectedRowIds(newSelectedRowIds);\n        } else {\n          // keep the ones that are hidden\n          var existing = $.grep(selectedRowIds, function(id) { return self.getRowById(id) === undefined; });\n          // add the newly selected ones\n          setSelectedRowIds(existing.concat(newSelectedRowIds));\n        }\n      });\n\n      this.onRowsChanged.subscribe(update);\n\n      this.onRowCountChanged.subscribe(update);\n\n      return onSelectedRowIdsChanged;\n    }\n\n    function syncGridCellCssStyles(grid, key) {\n      var hashById;\n      var inHandler;\n\n      // since this method can be called after the cell styles have been set,\n      // get the existing ones right away\n      storeCellCssStyles(grid.getCellCssStyles(key));\n\n      function storeCellCssStyles(hash) {\n        hashById = {};\n        for (var row in hash) {\n          var id = rows[row][idProperty];\n          hashById[id] = hash[row];\n        }\n      }\n\n      function update() {\n        if (hashById) {\n          inHandler = true;\n          ensureRowsByIdCache();\n          var newHash = {};\n          for (var id in hashById) {\n            var row = rowsById[id];\n            if (row != undefined) {\n              newHash[row] = hashById[id];\n            }\n          }\n          grid.setCellCssStyles(key, newHash);\n          inHandler = false;\n        }\n      }\n\n      grid.onCellCssStylesChanged.subscribe(function(e, args) {\n        if (inHandler) { return; }\n        if (key != args.key) { return; }\n        if (args.hash) {\n          storeCellCssStyles(args.hash);\n        }\n      });\n\n      this.onRowsChanged.subscribe(update);\n\n      this.onRowCountChanged.subscribe(update);\n    }\n\n    $.extend(this, {\n      // methods\n      \"beginUpdate\": beginUpdate,\n      \"endUpdate\": endUpdate,\n      \"setPagingOptions\": setPagingOptions,\n      \"getPagingInfo\": getPagingInfo,\n      \"getItems\": getItems,\n      \"setItems\": setItems,\n      \"setFilter\": setFilter,\n      \"sort\": sort,\n      \"fastSort\": fastSort,\n      \"reSort\": reSort,\n      \"setGrouping\": setGrouping,\n      \"getGrouping\": getGrouping,\n      \"groupBy\": groupBy,\n      \"setAggregators\": setAggregators,\n      \"collapseAllGroups\": collapseAllGroups,\n      \"expandAllGroups\": expandAllGroups,\n      \"collapseGroup\": collapseGroup,\n      \"expandGroup\": expandGroup,\n      \"getGroups\": getGroups,\n      \"getIdxById\": getIdxById,\n      \"getRowById\": getRowById,\n      \"getItemById\": getItemById,\n      \"getItemByIdx\": getItemByIdx,\n      \"mapRowsToIds\": mapRowsToIds,\n      \"mapIdsToRows\": mapIdsToRows,\n      \"setRefreshHints\": setRefreshHints,\n      \"setFilterArgs\": setFilterArgs,\n      \"refresh\": refresh,\n      \"updateItem\": updateItem,\n      \"insertItem\": insertItem,\n      \"addItem\": addItem,\n      \"deleteItem\": deleteItem,\n      \"syncGridSelection\": syncGridSelection,\n      \"syncGridCellCssStyles\": syncGridCellCssStyles,\n\n      // data provider methods\n      \"getLength\": getLength,\n      \"getItem\": getItem,\n      \"getItemMetadata\": getItemMetadata,\n\n      // events\n      \"onRowCountChanged\": onRowCountChanged,\n      \"onRowsChanged\": onRowsChanged,\n      \"onPagingInfoChanged\": onPagingInfoChanged\n    });\n  }\n\n  function AvgAggregator(field) {\n    this.field_ = field;\n\n    this.init = function () {\n      this.count_ = 0;\n      this.nonNullCount_ = 0;\n      this.sum_ = 0;\n    };\n\n    this.accumulate = function (item) {\n      var val = item[this.field_];\n      this.count_++;\n      if (val != null && val !== \"\" && val !== NaN) {\n        this.nonNullCount_++;\n        this.sum_ += parseFloat(val);\n      }\n    };\n\n    this.storeResult = function (groupTotals) {\n      if (!groupTotals.avg) {\n        groupTotals.avg = {};\n      }\n      if (this.nonNullCount_ != 0) {\n        groupTotals.avg[this.field_] = this.sum_ / this.nonNullCount_;\n      }\n    };\n  }\n\n  function MinAggregator(field) {\n    this.field_ = field;\n\n    this.init = function () {\n      this.min_ = null;\n    };\n\n    this.accumulate = function (item) {\n      var val = item[this.field_];\n      if (val != null && val !== \"\" && val !== NaN) {\n        if (this.min_ == null || val < this.min_) {\n          this.min_ = val;\n        }\n      }\n    };\n\n    this.storeResult = function (groupTotals) {\n      if (!groupTotals.min) {\n        groupTotals.min = {};\n      }\n      groupTotals.min[this.field_] = this.min_;\n    }\n  }\n\n  function MaxAggregator(field) {\n    this.field_ = field;\n\n    this.init = function () {\n      this.max_ = null;\n    };\n\n    this.accumulate = function (item) {\n      var val = item[this.field_];\n      if (val != null && val !== \"\" && val !== NaN) {\n        if (this.max_ == null || val > this.max_) {\n          this.max_ = val;\n        }\n      }\n    };\n\n    this.storeResult = function (groupTotals) {\n      if (!groupTotals.max) {\n        groupTotals.max = {};\n      }\n      groupTotals.max[this.field_] = this.max_;\n    }\n  }\n\n  function SumAggregator(field) {\n    this.field_ = field;\n\n    this.init = function () {\n      this.sum_ = null;\n    };\n\n    this.accumulate = function (item) {\n      var val = item[this.field_];\n      if (val != null && val !== \"\" && val !== NaN) {\n        this.sum_ += parseFloat(val);\n      }\n    };\n\n    this.storeResult = function (groupTotals) {\n      if (!groupTotals.sum) {\n        groupTotals.sum = {};\n      }\n      groupTotals.sum[this.field_] = this.sum_;\n    }\n  }\n\n  // TODO:  add more built-in aggregators\n  // TODO:  merge common aggregators in one to prevent needles iterating\n\n})(jQuery);\n","(function($) {\n    $.extend(true, window, {\n        \"Slick\": {\n            \"ColumnGroup\": ColumnGroup\n        }\n    });\n\n    function ColumnGroup() {\n        var grid, $container, $groupHeaderColumns, self = this,\n            isColumnGroupEnabled = false;\n        var handler = new Slick.EventHandler();\n\n        function init(_grid) {\n            grid = _grid;\n            $container = $(grid.getContainerNode());\n            handler.subscribe(grid.onColumnsResized, onColumnsResized);\n            handler.subscribe(grid.onColumnsReordered, onColumnsReordered);\n        }\n\n        function enableColumnGrouping() {\n            if(isColumnGroupEnabled) {\n                return;\n            }\n            isColumnGroupEnabled = true;\n            setGroupedColumns();\n        }\n\n        function removeColumnGrouping() {\n            if(!isColumnGroupEnabled) {\n                return;\n            }\n            isColumnGroupEnabled = false;\n            $groupHeaderColumns.remove();\n            grid.resizeCanvas();\n        }\n\n        function setGroupedColumns() {\n            var headerColumns = $container.find(\".slick-header-columns\");\n            $groupHeaderColumns = $('<div class=\"slick-group-header-columns ui-state-default\"> </div>');\n            $groupHeaderColumns.css({\n                width: headerColumns.width() + \"px\",\n                left: headerColumns.position().left + \"px\"\n            });\n\n            var columns = grid.getColumns();\n            var columnGroups = getGroupedColumns(columns);\n            setGroupIndex(columns);\n            setColumnIndex(columns);\n\n            $groupHeaderColumns.append(getGroupedColumnsTemplate(columnGroups));\n            $container.find(\".slick-header\").prepend($groupHeaderColumns);\n\n            //setupGroupColumnReorder();\n            columns.sort(groupCompare);\n            grid.setColumns(columns);\n            grid.resizeCanvas();\n        }\n\n        function getGroupedColumnsTemplate(columnGroups) {\n            var slickColumns = \"\", borderWidth=2;\n            $.each(columnGroups, function(name , group) {\n                var width = group.reduce(function(width, column) {\n                    return width + column.width;\n                }, 0);\n                var displayName = (name === \"-\") ? \" \" : name;\n                slickColumns += '<div class=\"ui-state-default slick-header-column\" data-group-name=\"' + name + '\"style=\"width:' + (width-borderWidth) + 'px\"> <div class=\"slick-column-name\">' + displayName + '</div></div>';\n                borderWidth = 1;\n            });\n            return slickColumns;\n        }\n\n        function setColumnIndex(columns) {\n            columns.forEach(function(column, index) {\n                column._index = index;\n            });\n        }\n\n        function setGroupIndex(columns) {\n            var groupNames = Object.keys(getGroupedColumns(columns));\n            columns.forEach(function(column) {\n                column._groupIndex = groupNames.indexOf(column.groupName);\n                column._groupIndex = column._groupIndex === -1 ? groupNames.length : column._groupIndex;\n            });\n        }\n\n        function setupGroupColumnReorder() {\n            $groupHeaderColumns.sortable({\n                containment: \"parent\",\n                distance: 3,\n                axis: \"x\",\n                cursor: \"default\",\n                tolerance: \"intersection\",\n                helper: \"clone\",\n                update: onColumnsReordered\n            });\n        }\n\n        function onColumnsResized() {\n            var columns = grid.getColumns(), borderWidth=2;\n\n            if (!isColumnGroupEnabled) {\n                self.onColumnsResized.notify(columns);\n                return;\n            }\n\n            $.each(getGroupedColumns(columns), function(name, group) {\n                var width = group.reduce(function(width, column) {\n                    return width + column.width;\n                }, 0);\n                $groupHeaderColumns.find(\"[data-group-name='\" + name + \"']\").css(\"width\", width-borderWidth);\n                borderWidth = 1;\n            });\n\n            self.onColumnsResized.notify(columns);\n        }\n\n\n        function onColumnsReordered() {\n            var columns = grid.getColumns();\n            setColumnIndex(columns);\n\n            if (!isColumnGroupEnabled) {\n                self.onColumnsReordered.notify(columns);\n                return;\n            }\n\n            var $columns = $(\".slick-group-header-columns .slick-header-column\");\n            var columnGroups = getGroupedColumns(columns);\n            $columns.each(function(index, column) {\n                var groupedColumns = columnGroups[$(column).data(\"group-name\")];\n                groupedColumns.forEach(function(groupedColumn) {\n                    groupedColumn._groupIndex = index;\n                });\n            });\n            columns.sort(groupCompare);\n            grid.setColumns(columns);\n            setColumnIndex(columns);\n            self.onColumnsReordered.notify(columns);\n        }\n\n        function groupCompare(c1, c2) {\n            return (c1._groupIndex - c2._groupIndex) || (c1._index - c2._index);\n        }\n\n        function getGroupedColumns(columns) {\n            var groupedColumns = {};\n            columns.forEach(function(column) {\n                var groupName = column.groupName || \"-\";\n                groupedColumns[groupName] = groupedColumns[groupName] || [];\n                groupedColumns[groupName].push(column);\n            });\n            return groupedColumns;\n        }\n\n        function destroy() {\n            handler.unsubscribeAll();\n        }\n\n        this.onColumnsReordered = new Slick.Event();\n        this.onColumnsResized = new Slick.Event();\n\n        return {\n            init: init,\n            destroy: destroy,\n            onColumnsReordered: this.onColumnsReordered,\n            onColumnsResized: this.onColumnsResized,\n            enableColumnGrouping: enableColumnGrouping,\n            removeColumnGrouping: removeColumnGrouping\n        };\n    }\n\n}(jQuery));","(function ($) {\r\n  // register namespace \r\n $.extend(true, window, {\r\n    \"Slick\": {\r\n       \"CellSelectionModel\": CellSelectionModel\r\n    }\r\n  });\r\n\r\n\r\n  function CellSelectionModel(options) {\r\n    var _grid;\r\n    var _canvas;\r\n    var _ranges = [];\r\n    var _self = this;\r\n    var _selector = new Slick.CellRangeSelector({\r\n      \"selectionCss\": {\r\n        \"border\": \"2px solid black\"\r\n      }\r\n    });\r\n    var _options;\r\n    var _defaults = {\r\n      selectActiveCell: true\r\n    };\r\n\r\n\r\n    function init(grid) {\r\n      _options = $.extend(true, {}, _defaults, options);\r\n      _grid = grid;\r\n      _canvas = _grid.getCanvasNode();\r\n      _grid.onActiveCellChanged.subscribe(handleActiveCellChange);\r\n      _grid.onKeyDown.subscribe(handleKeyDown);\r\n      grid.registerPlugin(_selector);\r\n      _selector.onCellRangeSelected.subscribe(handleCellRangeSelected);\r\n      _selector.onBeforeCellRangeSelected.subscribe(handleBeforeCellRangeSelected);\r\n    }\r\n\r\n    function destroy() {\r\n      _grid.onActiveCellChanged.unsubscribe(handleActiveCellChange);\r\n      _grid.onKeyDown.unsubscribe(handleKeyDown);\r\n      _selector.onCellRangeSelected.unsubscribe(handleCellRangeSelected);\r\n      _selector.onBeforeCellRangeSelected.unsubscribe(handleBeforeCellRangeSelected);\r\n      _grid.unregisterPlugin(_selector);\r\n    }\r\n\r\n    function removeInvalidRanges(ranges) {\r\n      var result = [];\r\n\r\n      for (var i = 0; i < ranges.length; i++) {\r\n        var r = ranges[i];\r\n        if (_grid.canCellBeSelected(r.fromRow, r.fromCell) && _grid.canCellBeSelected(r.toRow, r.toCell)) {\r\n          result.push(r);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    function setSelectedRanges(ranges) {\r\n      _ranges = removeInvalidRanges(ranges);\r\n      _self.onSelectedRangesChanged.notify(_ranges);\r\n    }\r\n\r\n    function getSelectedRanges() {\r\n      return _ranges;\r\n    }\r\n\r\n    function handleBeforeCellRangeSelected(e, args) {\r\n      if (_grid.getEditorLock().isActive()) {\r\n        e.stopPropagation();\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function handleCellRangeSelected(e, args) {\r\n      setSelectedRanges([args.range]);\r\n    }\r\n\r\n    function handleActiveCellChange(e, args) {\r\n      if (_options.selectActiveCell && args.row != null && args.cell != null) {\r\n        setSelectedRanges([new Slick.Range(args.row, args.cell)]);\r\n      }\r\n    }\r\n    \r\n    function handleKeyDown(e) {\r\n      /***\r\n       * Кey codes\r\n       * 37 left\r\n       * 38 up\r\n       * 39 right\r\n       * 40 down                     \r\n       */                                         \r\n      var ranges, last;\r\n      var active = _grid.getActiveCell(); \r\n\r\n      if ( active && e.shiftKey && !e.ctrlKey && !e.altKey && \r\n          (e.which == 37 || e.which == 39 || e.which == 38 || e.which == 40) ) {\r\n      \r\n        ranges = getSelectedRanges();\r\n        if (!ranges.length)\r\n         ranges.push(new Slick.Range(active.row, active.cell));\r\n         \r\n        // keyboard can work with last range only          \r\n        last = ranges.pop();\r\n        \r\n        // can't handle selection out of active cell\r\n        if (!last.contains(active.row, active.cell))\r\n          last = new Slick.Range(active.row, active.cell);\r\n        \r\n        var dRow = last.toRow - last.fromRow,\r\n            dCell = last.toCell - last.fromCell,\r\n            // walking direction\r\n            dirRow = active.row == last.fromRow ? 1 : -1,\r\n            dirCell = active.cell == last.fromCell ? 1 : -1;\r\n                 \r\n        if (e.which == 37) {\r\n          dCell -= dirCell; \r\n        } else if (e.which == 39) {\r\n          dCell += dirCell ; \r\n        } else if (e.which == 38) {\r\n          dRow -= dirRow; \r\n        } else if (e.which == 40) {\r\n          dRow += dirRow; \r\n        }\r\n        \r\n        // define new selection range \r\n        var new_last = new Slick.Range(active.row, active.cell, active.row + dirRow*dRow, active.cell + dirCell*dCell);\r\n        if (removeInvalidRanges([new_last]).length) {\r\n          ranges.push(new_last);\r\n          var viewRow = dirRow > 0 ? new_last.toRow : new_last.fromRow;\r\n          var viewCell = dirCell > 0 ? new_last.toCell : new_last.fromCell;\r\n         _grid.scrollRowIntoView(viewRow);\r\n         _grid.scrollCellIntoView(viewRow, viewCell);\r\n        }\r\n        else \r\n          ranges.push(last);\r\n\r\n        setSelectedRanges(ranges);  \r\n       \r\n        e.preventDefault();\r\n        e.stopPropagation();        \r\n      }           \r\n    }\r\n\r\n    $.extend(this, {\r\n      \"getSelectedRanges\": getSelectedRanges,\r\n      \"setSelectedRanges\": setSelectedRanges,\r\n\r\n      \"init\": init,\r\n      \"destroy\": destroy,\r\n\r\n      \"onSelectedRangesChanged\": new Slick.Event()\r\n    });\r\n  }\r\n})(jQuery);","(function ($) {\r\n  // register namespace\r\n  $.extend(true, window, {\r\n    \"Slick\": {\r\n      \"CellRangeSelector\": CellRangeSelector\r\n    }\r\n  });\r\n\r\n\r\n  function CellRangeSelector(options) {\r\n    var _grid;\r\n    var _canvas;\r\n    var _dragging;\r\n    var _decorator;\r\n    var _self = this;\r\n    var _handler = new Slick.EventHandler();\r\n    var _defaults = {\r\n      selectionCss: {\r\n        \"border\": \"2px dashed blue\"\r\n      }\r\n    };\r\n\r\n\r\n    function init(grid) {\r\n      options = $.extend(true, {}, _defaults, options);\r\n      _decorator = new Slick.CellRangeDecorator(grid, options);\r\n      _grid = grid;\r\n      _canvas = _grid.getCanvasNode();\r\n      _handler\r\n        .subscribe(_grid.onDragInit, handleDragInit)\r\n        .subscribe(_grid.onDragStart, handleDragStart)\r\n        .subscribe(_grid.onDrag, handleDrag)\r\n        .subscribe(_grid.onDragEnd, handleDragEnd);\r\n    }\r\n\r\n    function destroy() {\r\n      _handler.unsubscribeAll();\r\n    }\r\n\r\n    function handleDragInit(e, dd) {\r\n      // prevent the grid from cancelling drag'n'drop by default\r\n      e.stopImmediatePropagation();\r\n    }\r\n\r\n    function handleDragStart(e, dd) {\r\n      var cell = _grid.getCellFromEvent(e);\r\n      if (_self.onBeforeCellRangeSelected.notify(cell) !== false) {\r\n        if (_grid.canCellBeSelected(cell.row, cell.cell)) {\r\n          _dragging = true;\r\n          e.stopImmediatePropagation();\r\n        }\r\n      }\r\n      if (!_dragging) {\r\n        return;\r\n      }\r\n\r\n      _grid.focus();\r\n\r\n      var start = _grid.getCellFromPoint(\r\n          dd.startX - $(_canvas).offset().left,\r\n          dd.startY - $(_canvas).offset().top);\r\n\r\n      dd.range = {start: start, end: {}};\r\n\r\n      return _decorator.show(new Slick.Range(start.row, start.cell));\r\n    }\r\n\r\n    function handleDrag(e, dd) {\r\n      if (!_dragging) {\r\n        return;\r\n      }\r\n      e.stopImmediatePropagation();\r\n\r\n      var end = _grid.getCellFromPoint(\r\n          e.pageX - $(_canvas).offset().left,\r\n          e.pageY - $(_canvas).offset().top);\r\n\r\n      if (!_grid.canCellBeSelected(end.row, end.cell)) {\r\n        return;\r\n      }\r\n\r\n      dd.range.end = end;\r\n      _decorator.show(new Slick.Range(dd.range.start.row, dd.range.start.cell, end.row, end.cell));\r\n    }\r\n\r\n    function handleDragEnd(e, dd) {\r\n      if (!_dragging) {\r\n        return;\r\n      }\r\n\r\n      _dragging = false;\r\n      e.stopImmediatePropagation();\r\n\r\n      _decorator.hide();\r\n      _self.onCellRangeSelected.notify({\r\n        range: new Slick.Range(\r\n            dd.range.start.row,\r\n            dd.range.start.cell,\r\n            dd.range.end.row,\r\n            dd.range.end.cell\r\n        )\r\n      });\r\n    }\r\n\r\n    $.extend(this, {\r\n      \"init\": init,\r\n      \"destroy\": destroy,\r\n\r\n      \"onBeforeCellRangeSelected\": new Slick.Event(),\r\n      \"onCellRangeSelected\": new Slick.Event()\r\n    });\r\n  }\r\n})(jQuery);","(function ($) {\r\n  // register namespace\r\n  $.extend(true, window, {\r\n    \"Slick\": {\r\n      \"CellRangeDecorator\": CellRangeDecorator\r\n    }\r\n  });\r\n\r\n  /***\r\n   * Displays an overlay on top of a given cell range.\r\n   *\r\n   * TODO:\r\n   * Currently, it blocks mouse events to DOM nodes behind it.\r\n   * Use FF and WebKit-specific \"pointer-events\" CSS style, or some kind of event forwarding.\r\n   * Could also construct the borders separately using 4 individual DIVs.\r\n   *\r\n   * @param {Grid} grid\r\n   * @param {Object} options\r\n   */\r\n  function CellRangeDecorator(grid, options) {\r\n    var _elem;\r\n    var _defaults = {\r\n      selectionCssClass: 'slick-range-decorator',\r\n      selectionCss: {\r\n        \"zIndex\": \"9999\",\r\n        \"border\": \"2px dashed red\"\r\n      }\r\n    };\r\n\r\n    options = $.extend(true, {}, _defaults, options);\r\n\r\n\r\n    function show(range) {\r\n      if (!_elem) {\r\n        _elem = $(\"<div></div>\", {css: options.selectionCss})\r\n            .addClass(options.selectionCssClass)\r\n            .css(\"position\", \"absolute\")\r\n            .appendTo(grid.getCanvasNode());\r\n      }\r\n\r\n      var from = grid.getCellNodeBox(range.fromRow, range.fromCell);\r\n      var to = grid.getCellNodeBox(range.toRow, range.toCell);\r\n\r\n      _elem.css({\r\n        top: from.top - 1,\r\n        left: from.left - 1,\r\n        height: to.bottom - from.top - 2,\r\n        width: to.right - from.left - 2\r\n      });\r\n\r\n      return _elem;\r\n    }\r\n\r\n    function hide() {\r\n      if (_elem) {\r\n        _elem.remove();\r\n        _elem = null;\r\n      }\r\n    }\r\n\r\n    $.extend(this, {\r\n      \"show\": show,\r\n      \"hide\": hide\r\n    });\r\n  }\r\n})(jQuery);"],"sourceRoot":"/source/"}